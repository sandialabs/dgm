Software is in /projects

/projects/gnu/bin contains more modern GCC version (3.2.1)

fftw is in

/projects/fftw-2.1.3/

It looks like ATLAS is at 

/projects/hpti/ATLAS


Timing runs on Ross:
==================================

Using qsub to compute nodes.

cyl.tst case
==================================
NCPUS      Time/step     Speedup
==================================
1          0.46914        1.0000
2          0.23760        1.9745
4          0.13462        3.4849
8          0.08198        5.7226
16         0.06787        6.9123 

y-nodes with CXML
==================================
NCPUS      Time/step     Speedup
==================================
1          0.28600        1.000
2          0.13989        2.045
4          0.07248        3.946
8          0.04267	  6.703
16         0.02977        9.607

sub.tst case (note that this run has over 10,000 elements)
==================================
NCPUS      Time/step     Speedup
==================================
1          7.03730	  1.0000
2          3.46910        2.0286
4          1.70100	  4.1372
8          0.81922	  8.5902
16         0.46420	  15.160
32	   0.29653	  23.732

"y" nodes are faster than "t" nodes.

sub.tst case (with CXML)
==================================
NCPUS      Time/step     Speedup
==================================
1          5.8390         1.000
2          2.7466         2.136
4          1.2982         4.498
8          0.61923        9.429
16         0.32441        17.999

This is now working very well

Channel:
==================================
NCPUS      Time/step     Speedup
==================================
1          7.193         1.000
2          3.562         2.019
4          1.832         3.925
8          0.899         8.001 
16         0.467        15.401
32         0.307        23.412

This is now working quite well also.

With the CXML and Send/Receive the speedup is almost perfect
to 16 processors but then starts to fall off.  (512 element with p=3)

With 16 processors, there are 32 elements per CPU.  With 5*4^3 dof per 
processor yeilds 10,240 dof per processor.

Note that the sub case, which scales much better, has many more 
elements than the channel case.  I could make a better channel
mesh which uses more elements and I bet that would scale better too.

With the sub, I have been using p=2.  With 16 processors there are approx.
664 elements per processors with 36 dof per processor = 23,913 dof per
processor.

So, you can see that at 16 processors I have fewer dof/proc in the chan case.

There is likely a sweet spot at or over 10,000 dof/proc. 
