<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="class">
    <name>Sacado::CacheFad::AbsOp</name>
    <filename>classSacado_1_1CacheFad_1_1AbsOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::AbsOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1AbsOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::AbsOp</name>
    <filename>classSacado_1_1ELRFad_1_1AbsOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::AbsOp</name>
    <filename>classSacado_1_1Fad_1_1AbsOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::AbsOp</name>
    <filename>classSacado_1_1LFad_1_1AbsOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::AbstractScalarParameterEntry</name>
    <filename>classSacado_1_1AbstractScalarParameterEntry.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractScalarParameterEntry</name>
      <anchorfile>classSacado_1_1AbstractScalarParameterEntry.html</anchorfile>
      <anchor>ab38637b56d73f9f89ced8c0a20083fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractScalarParameterEntry</name>
      <anchorfile>classSacado_1_1AbstractScalarParameterEntry.html</anchorfile>
      <anchor>a5f79bd9b25fe9444aa804fe7d1ea2ec7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRealValue</name>
      <anchorfile>classSacado_1_1AbstractScalarParameterEntry.html</anchorfile>
      <anchor>a667eb3ac3050561ce76dc18682df537b</anchor>
      <arglist>(double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getRealValue</name>
      <anchorfile>classSacado_1_1AbstractScalarParameterEntry.html</anchorfile>
      <anchor>aca305d4a495bd1242712899d4bfacf24</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSacado_1_1AbstractScalarParameterEntry.html</anchorfile>
      <anchor>ac7bea95f9a817c1f8afc20b91b889ad1</anchor>
      <arglist>(std::ostream &amp;os) const  =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::ACosExprType</name>
    <filename>structSacado_1_1Tay_1_1ACosExprType.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::ACoshOp</name>
    <filename>classSacado_1_1ELRFad_1_1ACoshOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::ACoshOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1ACoshOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::ACoshOp</name>
    <filename>classSacado_1_1Fad_1_1ACoshOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::ACoshOp</name>
    <filename>classSacado_1_1LFad_1_1ACoshOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::ACoshOp</name>
    <filename>classSacado_1_1CacheFad_1_1ACoshOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::ACosOp</name>
    <filename>classSacado_1_1Fad_1_1ACosOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::ACosOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1ACosOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::ACosOp</name>
    <filename>classSacado_1_1CacheFad_1_1ACosOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::ACosOp</name>
    <filename>classSacado_1_1LFad_1_1ACosOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::ACosOp</name>
    <filename>classSacado_1_1ELRFad_1_1ACosOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::ACosQuadOp</name>
    <filename>classSacado_1_1Tay_1_1ACosQuadOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADcontext</name>
    <filename>classSacado_1_1Rad2d_1_1ADcontext.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ADcontext</name>
    <filename>classSacado_1_1Rad_1_1ADcontext.html</filename>
    <templarg>Double</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADcontext</name>
    <filename>classSacado_1_1Rad2_1_1ADcontext.html</filename>
    <templarg>Double</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ADcontext</name>
    <filename>classSacado_1_1RadVec_1_1ADcontext.html</filename>
    <templarg>Double</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ADcontext</name>
    <filename>classSacado_1_1Radnt_1_1ADcontext.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::add_type</name>
    <filename>structSacado_1_1mpl_1_1add__type.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::AdditionOp</name>
    <filename>classSacado_1_1ELRFad_1_1AdditionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::AdditionOp</name>
    <filename>classSacado_1_1Tay_1_1AdditionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::AdditionOp</name>
    <filename>classSacado_1_1Fad_1_1AdditionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::AdditionOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1AdditionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::AdditionOp</name>
    <filename>classSacado_1_1CacheFad_1_1AdditionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::AdditionOp</name>
    <filename>classSacado_1_1LFad_1_1AdditionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::AdditionOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</name>
    <filename>classSacado_1_1Tay_1_1AdditionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::AdditionOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</name>
    <filename>classSacado_1_1Tay_1_1AdditionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Rad2d::ADmemblock</name>
    <filename>structSacado_1_1Rad2d_1_1ADmemblock.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Rad::ADmemblock</name>
    <filename>structSacado_1_1Rad_1_1ADmemblock.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Rad2::ADmemblock</name>
    <filename>structSacado_1_1Rad2_1_1ADmemblock.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::RadVec::ADmemblock</name>
    <filename>structSacado_1_1RadVec_1_1ADmemblock.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Radnt::ADmemblock</name>
    <filename>structSacado_1_1Radnt_1_1ADmemblock.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADvar</name>
    <filename>classSacado_1_1Rad2d_1_1ADvar.html</filename>
    <base>Sacado::Rad2d::IndepADvar</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ADvar</name>
    <filename>classSacado_1_1Rad_1_1ADvar.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad::IndepADvar</base>
    <class kind="struct">Sacado::Rad::ADvar::apply</class>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>adb21e2489fcfc950a063628e65d7a70c</anchor>
      <arglist>(const IndepADVar &amp;x)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>ac53e4a983e7281b4a2f3197e864d4b0a</anchor>
      <arglist>(ADvar *, const ADVari &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvar</name>
    <filename>classSacado_1_1Rad2_1_1ADvar.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad2::IndepADvar</base>
    <class kind="struct">Sacado::Rad2::ADvar::apply</class>
    <member kind="friend">
      <type>friend ADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>ac53e4a983e7281b4a2f3197e864d4b0a</anchor>
      <arglist>(ADvar *, const ADVari &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>ac53e4a983e7281b4a2f3197e864d4b0a</anchor>
      <arglist>(ADvar *, const ADVari &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ADvar</name>
    <filename>classSacado_1_1RadVec_1_1ADvar.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::RadVec::IndepADvar</base>
    <class kind="struct">Sacado::RadVec::ADvar::apply</class>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a5a860177503bd588a013e0a7be103178</anchor>
      <arglist>(const IndepADVar &amp;x)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>ac53e4a983e7281b4a2f3197e864d4b0a</anchor>
      <arglist>(ADvar *, const ADVari &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ADvar</name>
    <filename>classSacado_1_1Radnt_1_1ADvar.html</filename>
    <base>Sacado::Radnt::IndepADvar</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADvar1</name>
    <filename>classSacado_1_1Rad2d_1_1ADvar1.html</filename>
    <base>Sacado::Rad2d::ADvari</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ADvar1</name>
    <filename>classSacado_1_1Rad_1_1ADvar1.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad::ADvari</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvar1</name>
    <filename>classSacado_1_1Rad2_1_1ADvar1.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad2::ADvari</base>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ADvar1</name>
    <filename>classSacado_1_1RadVec_1_1ADvar1.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::RadVec::ADvari</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ADvar1</name>
    <filename>classSacado_1_1Radnt_1_1ADvar1.html</filename>
    <base>Sacado::Radnt::ADvari</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADvar1g</name>
    <filename>classSacado_1_1Rad2d_1_1ADvar1g.html</filename>
    <base>Sacado::Rad2d::ADvar1</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvar1g</name>
    <filename>classSacado_1_1Rad2_1_1ADvar1g.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad2::ADvar1</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADvar1s</name>
    <filename>classSacado_1_1Rad2d_1_1ADvar1s.html</filename>
    <base>Sacado::Rad2d::ADvar1</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ADvar1s</name>
    <filename>classSacado_1_1Rad_1_1ADvar1s.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad::ADvar1</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvar1s</name>
    <filename>classSacado_1_1Rad2_1_1ADvar1s.html</filename>
    <templarg></templarg>
    <base>Sacado::Rad2::ADvar1</base>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ADvar1s</name>
    <filename>classSacado_1_1RadVec_1_1ADvar1s.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::RadVec::ADvar1</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ADvar1s</name>
    <filename>classSacado_1_1Radnt_1_1ADvar1s.html</filename>
    <base>Sacado::Radnt::ADvar1</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADvar2</name>
    <filename>classSacado_1_1Rad2d_1_1ADvar2.html</filename>
    <base>Sacado::Rad2d::ADvari</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ADvar2</name>
    <filename>classSacado_1_1Rad_1_1ADvar2.html</filename>
    <templarg></templarg>
    <base>Sacado::Rad::ADvari</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvar2</name>
    <filename>classSacado_1_1Rad2_1_1ADvar2.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad2::ADvari</base>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ADvar2</name>
    <filename>classSacado_1_1RadVec_1_1ADvar2.html</filename>
    <templarg></templarg>
    <base>Sacado::RadVec::ADvari</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ADvar2</name>
    <filename>classSacado_1_1Radnt_1_1ADvar2.html</filename>
    <base>Sacado::Radnt::ADvari</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADvar2g</name>
    <filename>classSacado_1_1Rad2d_1_1ADvar2g.html</filename>
    <base>Sacado::Rad2d::ADvar2</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvar2g</name>
    <filename>classSacado_1_1Rad2_1_1ADvar2g.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad2::ADvar2</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADvar2q</name>
    <filename>classSacado_1_1Rad2d_1_1ADvar2q.html</filename>
    <base>Sacado::Rad2d::ADvar2</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ADvar2q</name>
    <filename>classSacado_1_1Rad_1_1ADvar2q.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad::ADvar2</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvar2q</name>
    <filename>classSacado_1_1Rad2_1_1ADvar2q.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad2::ADvar2</base>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ADvar2q</name>
    <filename>classSacado_1_1RadVec_1_1ADvar2q.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::RadVec::ADvar2</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ADvar2q</name>
    <filename>classSacado_1_1Radnt_1_1ADvar2q.html</filename>
    <base>Sacado::Radnt::ADvar2</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADvari</name>
    <filename>classSacado_1_1Rad2d_1_1ADvari.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvari</name>
    <filename>classSacado_1_1Rad2_1_1ADvari.html</filename>
    <templarg>Double</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ADvari</name>
    <filename>classSacado_1_1RadVec_1_1ADvari.html</filename>
    <templarg>Double</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ADvari</name>
    <filename>classSacado_1_1Rad_1_1ADvari.html</filename>
    <templarg>Double</templarg>
    <base>Base&lt; ADvari&lt; Double &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ADvari</name>
    <filename>classSacado_1_1Radnt_1_1ADvari.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Rad2d::ADvari_block</name>
    <filename>structSacado_1_1Rad2d_1_1ADvari__block.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvari_block</name>
    <filename>classSacado_1_1Rad2_1_1ADvari__block.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>ADvari_head</name>
    <filename>structADvari__head.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ADvarn</name>
    <filename>classSacado_1_1Radnt_1_1ADvarn.html</filename>
    <base>Sacado::Radnt::ADvari</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADvarn</name>
    <filename>classSacado_1_1Rad2d_1_1ADvarn.html</filename>
    <base>Sacado::Rad2d::ADvari</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ADvarn</name>
    <filename>classSacado_1_1Rad_1_1ADvarn.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad::ADvari</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvarn</name>
    <filename>classSacado_1_1Rad2_1_1ADvarn.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad2::ADvari</base>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ADvarn</name>
    <filename>classSacado_1_1RadVec_1_1ADvarn.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::RadVec::ADvari</base>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Impl::AnalyzeSacadoShape</name>
    <filename>structKokkos_1_1Impl_1_1AnalyzeSacadoShape.html</filename>
    <templarg>T</templarg>
    <templarg>Layout</templarg>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Impl::AnalyzeSacadoShape&lt; const T, Layout &gt;</name>
    <filename>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T_00_01Layout_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Impl::AnalyzeSacadoShape&lt; const T[], Layout &gt;</name>
    <filename>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[]_00_01Layout_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Impl::AnalyzeSacadoShape&lt; const T[N], Layout &gt;</name>
    <filename>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[N]_00_01Layout_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Impl::AnalyzeSacadoShape&lt; T *, Layout &gt;</name>
    <filename>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T_01_5_00_01Layout_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Impl::AnalyzeSacadoShape&lt; T[], Layout &gt;</name>
    <filename>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[]_00_01Layout_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Impl::AnalyzeSacadoShape&lt; T[N], Layout &gt;</name>
    <filename>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[N]_00_01Layout_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Impl::AnalyzeSacadoShape&lt; void, Layout &gt;</name>
    <filename>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01void_00_01Layout_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::FlopCounterPack::ScalarFlopCounter::apply</name>
    <filename>structSacado_1_1FlopCounterPack_1_1ScalarFlopCounter_1_1apply.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::size_impl&lt; range_c_tag &gt;::apply</name>
    <filename>structSacado_1_1mpl_1_1size__impl_3_01range__c__tag_01_4_1_1apply.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::CacheTaylor::apply</name>
    <filename>structSacado_1_1Tay_1_1CacheTaylor_1_1apply.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::begin_impl&lt; range_c_tag &gt;::apply</name>
    <filename>structSacado_1_1mpl_1_1begin__impl_3_01range__c__tag_01_4_1_1apply.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::end_impl&lt; range_c_tag &gt;::apply</name>
    <filename>structSacado_1_1mpl_1_1end__impl_3_01range__c__tag_01_4_1_1apply.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::Taylor::apply</name>
    <filename>structSacado_1_1Tay_1_1Taylor_1_1apply.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::at_impl&lt; range_c_tag, Pos &gt;::apply</name>
    <filename>structSacado_1_1mpl_1_1at__impl_3_01range__c__tag_00_01Pos_01_4_1_1apply.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Rad::ADvar::apply</name>
    <filename>structSacado_1_1Rad_1_1ADvar_1_1apply.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply</name>
    <filename>structSacado_1_1mpl_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap&lt; lambda&lt; F &gt;::type, A1, A2, A3, A4, A5 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::Rad2::ADvar::apply</name>
    <filename>structSacado_1_1Rad2_1_1ADvar_1_1apply.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::DFad::apply</name>
    <filename>structSacado_1_1FAD__NS_1_1DFad_1_1apply.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind1::apply</name>
    <filename>structSacado_1_1mpl_1_1bind1_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap1&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::RadVec::ADvar::apply</name>
    <filename>structSacado_1_1RadVec_1_1ADvar_1_1apply.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::DMFad::apply</name>
    <filename>structSacado_1_1Fad_1_1DMFad_1_1apply.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind2::apply</name>
    <filename>structSacado_1_1mpl_1_1bind2_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap2&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::DefaultEvalTypeTraits::apply</name>
    <filename>structSacado_1_1DefaultEvalTypeTraits_1_1apply.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::DVFad::apply</name>
    <filename>structSacado_1_1Fad_1_1DVFad_1_1apply.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind3::apply</name>
    <filename>structSacado_1_1mpl_1_1bind3_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap3&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value, T3, U1, U2, U3, U4, U5 &gt;::type &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind4::apply</name>
    <filename>structSacado_1_1mpl_1_1bind4_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap4&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value, T3, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value+is_same&lt; T4, placeholders::_ &gt;::value, T4, U1, U2, U3, U4, U5 &gt;::type &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind5::apply</name>
    <filename>structSacado_1_1mpl_1_1bind5_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap5&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value, T3, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value+is_same&lt; T4, placeholders::_ &gt;::value, T4, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value+is_same&lt; T4, placeholders::_ &gt;::value+is_same&lt; T5, placeholders::_ &gt;::value, T5, U1, U2, U3, U4, U5 &gt;::type &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 1 &gt;::apply</name>
    <filename>structSacado_1_1mpl_1_1arg_3_011_01_4_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 2 &gt;::apply</name>
    <filename>structSacado_1_1mpl_1_1arg_3_012_01_4_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::SFad::apply</name>
    <filename>structSacado_1_1FAD__NS_1_1SFad_1_1apply.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 4 &gt;::apply</name>
    <filename>structSacado_1_1mpl_1_1arg_3_014_01_4_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::SimpleFad::apply</name>
    <filename>structSacado_1_1Fad_1_1SimpleFad_1_1apply.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::SLFad::apply</name>
    <filename>structSacado_1_1FAD__NS_1_1SLFad_1_1apply.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 3 &gt;::apply</name>
    <filename>structSacado_1_1mpl_1_1arg_3_013_01_4_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 5 &gt;::apply</name>
    <filename>structSacado_1_1mpl_1_1arg_3_015_01_4_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::ViewFad::apply</name>
    <filename>structSacado_1_1FAD__NS_1_1ViewFad_1_1apply.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote1::apply</name>
    <filename>structSacado_1_1mpl_1_1quote1_1_1apply.html</filename>
    <templarg></templarg>
    <base>type_wrap&lt; F&lt; T1 &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::LFad::LogicalSparse::apply</name>
    <filename>structSacado_1_1LFad_1_1LogicalSparse_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote2::apply</name>
    <filename>structSacado_1_1mpl_1_1quote2_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>type_wrap&lt; F&lt; T1, T2 &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote0::apply</name>
    <filename>structSacado_1_1mpl_1_1quote0_1_1apply.html</filename>
    <base>type_wrap&lt; F &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote3::apply</name>
    <filename>structSacado_1_1mpl_1_1quote3_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>type_wrap&lt; F&lt; T1, T2, T3 &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote5::apply</name>
    <filename>structSacado_1_1mpl_1_1quote5_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>type_wrap&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote4::apply</name>
    <filename>structSacado_1_1mpl_1_1quote4_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>type_wrap&lt; F&lt; T1, T2, T3, T4 &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply0</name>
    <filename>structSacado_1_1mpl_1_1apply0.html</filename>
    <templarg></templarg>
    <base>apply_wrap0&lt; lambda&lt; F &gt;::type &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply1</name>
    <filename>structSacado_1_1mpl_1_1apply1.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap1&lt; lambda&lt; F &gt;::type, A1 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply2</name>
    <filename>structSacado_1_1mpl_1_1apply2.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap2&lt; lambda&lt; F &gt;::type, A1, A2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply3</name>
    <filename>structSacado_1_1mpl_1_1apply3.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap3&lt; lambda&lt; F &gt;::type, A1, A2, A3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply4</name>
    <filename>structSacado_1_1mpl_1_1apply4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap4&lt; lambda&lt; F &gt;::type, A1, A2, A3, A4 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply5</name>
    <filename>structSacado_1_1mpl_1_1apply5.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap5&lt; lambda&lt; F &gt;::type, A1, A2, A3, A4, A5 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap.html</filename>
    <templarg>F</templarg>
    <templarg>A1</templarg>
    <templarg>A2</templarg>
    <templarg>A3</templarg>
    <templarg>A4</templarg>
    <templarg>A5</templarg>
    <base>Sacado::mpl::apply_wrap5</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap0</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap0.html</filename>
    <templarg>F</templarg>
  </compound>
  <compound kind="class">
    <name>apply_wrap0&lt; lambda&lt; F &gt;::type &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap0.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap1</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap1.html</filename>
    <templarg>F</templarg>
    <templarg>A1</templarg>
  </compound>
  <compound kind="class">
    <name>apply_wrap1&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap1.html</filename>
  </compound>
  <compound kind="class">
    <name>apply_wrap1&lt; lambda&lt; F &gt;::type, A1 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap1.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap2</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap2.html</filename>
    <templarg>F</templarg>
    <templarg>A1</templarg>
    <templarg>A2</templarg>
  </compound>
  <compound kind="class">
    <name>apply_wrap2&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap2.html</filename>
  </compound>
  <compound kind="class">
    <name>apply_wrap2&lt; lambda&lt; F &gt;::type, A1, A2 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap2.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap3</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap3.html</filename>
    <templarg>F</templarg>
    <templarg>A1</templarg>
    <templarg>A2</templarg>
    <templarg>A3</templarg>
  </compound>
  <compound kind="class">
    <name>apply_wrap3&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value, T3, U1, U2, U3, U4, U5 &gt;::type &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap3.html</filename>
  </compound>
  <compound kind="class">
    <name>apply_wrap3&lt; lambda&lt; F &gt;::type, A1, A2, A3 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap3.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap4</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap4.html</filename>
    <templarg>F</templarg>
    <templarg>A1</templarg>
    <templarg>A2</templarg>
    <templarg>A3</templarg>
    <templarg>A4</templarg>
  </compound>
  <compound kind="class">
    <name>apply_wrap4&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value, T3, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value+is_same&lt; T4, placeholders::_ &gt;::value, T4, U1, U2, U3, U4, U5 &gt;::type &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap4.html</filename>
  </compound>
  <compound kind="class">
    <name>apply_wrap4&lt; lambda&lt; F &gt;::type, A1, A2, A3, A4 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap5</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap5.html</filename>
    <templarg>F</templarg>
    <templarg>A1</templarg>
    <templarg>A2</templarg>
    <templarg>A3</templarg>
    <templarg>A4</templarg>
    <templarg>A5</templarg>
  </compound>
  <compound kind="class">
    <name>apply_wrap5&lt; arg&lt; k &gt;, T1, T2, T3, T4, T5 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap5.html</filename>
  </compound>
  <compound kind="class">
    <name>apply_wrap5&lt; arg&lt; N &gt;, T1, T2, T3, T4, T5 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap5.html</filename>
  </compound>
  <compound kind="class">
    <name>apply_wrap5&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value, T3, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value+is_same&lt; T4, placeholders::_ &gt;::value, T4, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value+is_same&lt; T4, placeholders::_ &gt;::value+is_same&lt; T5, placeholders::_ &gt;::value, T5, U1, U2, U3, U4, U5 &gt;::type &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap5.html</filename>
  </compound>
  <compound kind="class">
    <name>apply_wrap5&lt; lambda&lt; F &gt;::type, A1, A2, A3, A4, A5 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap5.html</filename>
  </compound>
  <compound kind="class">
    <name>apply_wrap&lt; arg&lt; k &gt;, T1, T2, T3, T4, T5 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap.html</filename>
    <base>apply_wrap5&lt; arg&lt; k &gt;, T1, T2, T3, T4, T5 &gt;</base>
  </compound>
  <compound kind="class">
    <name>apply_wrap&lt; arg&lt; N &gt;, T1, T2, T3, T4, T5 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap.html</filename>
    <base>apply_wrap5&lt; arg&lt; N &gt;, T1, T2, T3, T4, T5 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap&lt; F, A1, A2, A3, A4, mpl::none &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap_3_01F_00_01A1_00_01A2_00_01A3_00_01A4_00_01mpl_1_1none_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::mpl::apply_wrap4</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap&lt; F, A1, A2, A3, mpl::none, mpl::none &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap_3_01F_00_01A1_00_01A2_00_01A3_00_01mpl_1_1none_00_01mpl_1_1none_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::mpl::apply_wrap3</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap&lt; F, A1, A2, mpl::none, mpl::none, mpl::none &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap_3_01F_00_01A1_00_01A2_00_01mpl_1_1none_00_01mpl_1_1none_00_01mpl_1_1none_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::mpl::apply_wrap2</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap&lt; F, A1, mpl::none, mpl::none, mpl::none, mpl::none &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap_3_01F_00_01A1_00_01mpl_1_1none_00_01mpl_1_1none_00_01mpl_1_1none_00_01mpl_1_1none_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::mpl::apply_wrap1</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap&lt; F, mpl::none, mpl::none, mpl::none, mpl::none, mpl::none &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap_3_01F_00_01mpl_1_1none_00_01mpl_1_1none_00_01mpl_1_1none_00_013418fa650659cd58268262754e6725e.html</filename>
    <templarg></templarg>
    <base>Sacado::mpl::apply_wrap0</base>
  </compound>
  <compound kind="class">
    <name>apply_wrap&lt; lambda&lt; F &gt;::type, A1, A2, A3, A4, A5 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap.html</filename>
    <base>apply_wrap5&lt; lambda&lt; F &gt;::type, A1, A2, A3, A4, A5 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg</name>
    <filename>structSacado_1_1mpl_1_1arg.html</filename>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 1 &gt;</name>
    <filename>structSacado_1_1mpl_1_1arg_3_011_01_4.html</filename>
    <class kind="struct">Sacado::mpl::arg&lt; 1 &gt;::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 2 &gt;</name>
    <filename>structSacado_1_1mpl_1_1arg_3_012_01_4.html</filename>
    <class kind="struct">Sacado::mpl::arg&lt; 2 &gt;::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 3 &gt;</name>
    <filename>structSacado_1_1mpl_1_1arg_3_013_01_4.html</filename>
    <class kind="struct">Sacado::mpl::arg&lt; 3 &gt;::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 4 &gt;</name>
    <filename>structSacado_1_1mpl_1_1arg_3_014_01_4.html</filename>
    <class kind="struct">Sacado::mpl::arg&lt; 4 &gt;::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 5 &gt;</name>
    <filename>structSacado_1_1mpl_1_1arg_3_015_01_4.html</filename>
    <class kind="struct">Sacado::mpl::arg&lt; 5 &gt;::apply</class>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::ArrayTraits</name>
    <filename>classSacado_1_1Fad_1_1ArrayTraits.html</filename>
    <templarg>OrdinalType</templarg>
    <templarg>FadType</templarg>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_dynamic</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a9fc4d484a23537d95d3f6f00f2b8ccc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrdinalType</type>
      <name>workspace_size</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a156860ecb18e9df7eace361c64dcb4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a77618fabfdbc017a8300191cbba823a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace_pointer</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ab092a2ec2257d5f2bda78a4a8b475222</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayTraits&lt; OrdinalType, Sacado::CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1ArrayTraits.html</filename>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_dynamic</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a9fc4d484a23537d95d3f6f00f2b8ccc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrdinalType</type>
      <name>workspace_size</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a156860ecb18e9df7eace361c64dcb4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a77618fabfdbc017a8300191cbba823a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace_pointer</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ab092a2ec2257d5f2bda78a4a8b475222</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayTraits&lt; OrdinalType, Sacado::ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1ArrayTraits.html</filename>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_dynamic</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a9fc4d484a23537d95d3f6f00f2b8ccc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrdinalType</type>
      <name>workspace_size</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a156860ecb18e9df7eace361c64dcb4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a77618fabfdbc017a8300191cbba823a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace_pointer</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ab092a2ec2257d5f2bda78a4a8b475222</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayTraits&lt; OrdinalType, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1ArrayTraits.html</filename>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_dynamic</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a9fc4d484a23537d95d3f6f00f2b8ccc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrdinalType</type>
      <name>workspace_size</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a156860ecb18e9df7eace361c64dcb4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a77618fabfdbc017a8300191cbba823a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace_pointer</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ab092a2ec2257d5f2bda78a4a8b475222</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayTraits&lt; OrdinalType, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1ArrayTraits.html</filename>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_dynamic</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a9fc4d484a23537d95d3f6f00f2b8ccc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrdinalType</type>
      <name>workspace_size</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a156860ecb18e9df7eace361c64dcb4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a77618fabfdbc017a8300191cbba823a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace_pointer</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ab092a2ec2257d5f2bda78a4a8b475222</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayTraits&lt; OrdinalType, Sacado::Fad::DFad&lt; ScalarType &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1ArrayTraits.html</filename>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_dynamic</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a9fc4d484a23537d95d3f6f00f2b8ccc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrdinalType</type>
      <name>workspace_size</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a156860ecb18e9df7eace361c64dcb4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a77618fabfdbc017a8300191cbba823a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace_pointer</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ab092a2ec2257d5f2bda78a4a8b475222</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayTraits&lt; OrdinalType, Sacado::Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1ArrayTraits.html</filename>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_dynamic</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a9fc4d484a23537d95d3f6f00f2b8ccc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrdinalType</type>
      <name>workspace_size</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a156860ecb18e9df7eace361c64dcb4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a77618fabfdbc017a8300191cbba823a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace_pointer</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ab092a2ec2257d5f2bda78a4a8b475222</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayTraits&lt; OrdinalType, Sacado::Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1ArrayTraits.html</filename>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_dynamic</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a9fc4d484a23537d95d3f6f00f2b8ccc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrdinalType</type>
      <name>workspace_size</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a156860ecb18e9df7eace361c64dcb4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a77618fabfdbc017a8300191cbba823a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace_pointer</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ab092a2ec2257d5f2bda78a4a8b475222</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayTraits&lt; OrdinalType, Sacado::Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1ArrayTraits.html</filename>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_dynamic</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a9fc4d484a23537d95d3f6f00f2b8ccc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrdinalType</type>
      <name>workspace_size</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a156860ecb18e9df7eace361c64dcb4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a77618fabfdbc017a8300191cbba823a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace_pointer</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ab092a2ec2257d5f2bda78a4a8b475222</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayTraits&lt; OrdinalType, Sacado::Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1ArrayTraits.html</filename>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_dynamic</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a9fc4d484a23537d95d3f6f00f2b8ccc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrdinalType</type>
      <name>workspace_size</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a156860ecb18e9df7eace361c64dcb4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a77618fabfdbc017a8300191cbba823a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace_pointer</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ab092a2ec2257d5f2bda78a4a8b475222</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayTraits&lt; OrdinalType, Sacado::Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1ArrayTraits.html</filename>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_dynamic</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a9fc4d484a23537d95d3f6f00f2b8ccc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrdinalType</type>
      <name>workspace_size</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a156860ecb18e9df7eace361c64dcb4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a77618fabfdbc017a8300191cbba823a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace_pointer</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ab092a2ec2257d5f2bda78a4a8b475222</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ArrayValueType</name>
    <filename>structSacado_1_1Fad_1_1ArrayValueType.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ArrayValueType&lt;  Sacado::CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ArrayValueType_3_01_01Sacado_1_1CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ArrayValueType&lt;  Sacado::ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ArrayValueType_3_01_01Sacado_1_1ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ArrayValueType&lt;  Sacado::ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ArrayValueType_3_01_01Sacado_1_1ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ArrayValueType&lt;  Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ArrayValueType_3_01_01Sacado_1_1ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ArrayValueType&lt;  Sacado::Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ArrayValueType_3_01_01Sacado_1_1Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ArrayValueType&lt;  Sacado::Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ArrayValueType_3_01_01Sacado_1_1Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ArrayValueType&lt;  Sacado::Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ArrayValueType_3_01_01Sacado_1_1Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ArrayValueType&lt;  Sacado::Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ArrayValueType_3_01_01Sacado_1_1Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ArrayValueType&lt;  Sacado::Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ArrayValueType_3_01_01Sacado_1_1Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::ASinExprType</name>
    <filename>structSacado_1_1Tay_1_1ASinExprType.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::ASinhOp</name>
    <filename>classSacado_1_1ELRFad_1_1ASinhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::ASinhOp</name>
    <filename>classSacado_1_1Fad_1_1ASinhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::ASinhOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1ASinhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::ASinhOp</name>
    <filename>classSacado_1_1CacheFad_1_1ASinhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::ASinhOp</name>
    <filename>classSacado_1_1LFad_1_1ASinhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::ASinOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1ASinOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::ASinOp</name>
    <filename>classSacado_1_1Fad_1_1ASinOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::ASinOp</name>
    <filename>classSacado_1_1CacheFad_1_1ASinOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::ASinOp</name>
    <filename>classSacado_1_1LFad_1_1ASinOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::ASinOp</name>
    <filename>classSacado_1_1ELRFad_1_1ASinOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::ASinQuadOp</name>
    <filename>classSacado_1_1Tay_1_1ASinQuadOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::at</name>
    <filename>structSacado_1_1mpl_1_1at.html</filename>
    <templarg>T</templarg>
    <templarg>Pos</templarg>
  </compound>
  <compound kind="class">
    <name>at&lt; Range, Pos &gt;</name>
    <filename>structSacado_1_1mpl_1_1at.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::at_impl</name>
    <filename>structSacado_1_1mpl_1_1at__impl.html</filename>
    <templarg></templarg>
    <templarg>Pos</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::at_impl&lt; range_c_tag, Pos &gt;</name>
    <filename>structSacado_1_1mpl_1_1at__impl_3_01range__c__tag_00_01Pos_01_4.html</filename>
    <templarg>Pos</templarg>
    <class kind="struct">Sacado::mpl::at_impl&lt; range_c_tag, Pos &gt;::apply</class>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Atan2Op</name>
    <filename>classSacado_1_1ELRFad_1_1Atan2Op.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Atan2Op</name>
    <filename>classSacado_1_1Fad_1_1Atan2Op.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Atan2Op</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Atan2Op.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Atan2Op</name>
    <filename>classSacado_1_1LFad_1_1Atan2Op.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Atan2Op</name>
    <filename>classSacado_1_1CacheFad_1_1Atan2Op.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::ATanExprType</name>
    <filename>structSacado_1_1Tay_1_1ATanExprType.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::ATanhOp</name>
    <filename>classSacado_1_1ELRFad_1_1ATanhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::ATanhOp</name>
    <filename>classSacado_1_1Fad_1_1ATanhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::ATanhOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1ATanhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::ATanhOp</name>
    <filename>classSacado_1_1CacheFad_1_1ATanhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::ATanhOp</name>
    <filename>classSacado_1_1LFad_1_1ATanhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::ATanOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1ATanOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::ATanOp</name>
    <filename>classSacado_1_1Fad_1_1ATanOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::ATanOp</name>
    <filename>classSacado_1_1CacheFad_1_1ATanOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::ATanOp</name>
    <filename>classSacado_1_1LFad_1_1ATanOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::ATanOp</name>
    <filename>classSacado_1_1ELRFad_1_1ATanOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::ATanQuadOp</name>
    <filename>classSacado_1_1Tay_1_1ATanQuadOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Base</name>
    <filename>structSacado_1_1Base.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>Base&lt; ADvari&lt; Double &gt; &gt;</name>
    <filename>structSacado_1_1Base.html</filename>
  </compound>
  <compound kind="class">
    <name>Base&lt; IndepADvar&lt; Double &gt; &gt;</name>
    <filename>structSacado_1_1Base.html</filename>
  </compound>
  <compound kind="class">
    <name>Base&lt; ScalarFlopCounter&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Base.html</filename>
  </compound>
  <compound kind="class">
    <name>Base&lt; Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Base.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::BaseExpr</name>
    <filename>structSacado_1_1ELRCacheFad_1_1BaseExpr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::BaseExpr</name>
    <filename>structSacado_1_1Fad_1_1BaseExpr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::CacheFad::BaseExpr</name>
    <filename>structSacado_1_1CacheFad_1_1BaseExpr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::BaseExpr</name>
    <filename>structSacado_1_1ELRFad_1_1BaseExpr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::BaseExpr&lt; GeneralFad&lt; T, Fad::DynamicStorage&lt; T &gt; &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1BaseExpr_3_01GeneralFad_3_01T_00_01Fad_1_1DynamicStorage_3_01T_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::BaseExpr&lt; GeneralFad&lt; T, Fad::MemPoolStorage&lt; T &gt; &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1BaseExpr_3_01GeneralFad_3_01T_00_01Fad_1_1MemPoolStorage_3_01T_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::BaseExpr&lt; GeneralFad&lt; T, Fad::StaticStorage&lt; T, N &gt; &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1BaseExpr_3_01GeneralFad_3_01T_00_01Fad_1_1StaticStorage_3_01T_00_01N_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::BaseExpr&lt; GeneralFad&lt; T, Fad::VectorDynamicStorage&lt; T &gt; &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1BaseExpr_3_01GeneralFad_3_01T_00_01Fad_1_1VectorDynamicStorage_3_01T_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::BaseExpr&lt; GeneralFad&lt; T, Fad::ViewStorage&lt; T, l, s, U &gt; &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1BaseExpr_3_01GeneralFad_3_01T_00_01Fad_1_1ViewStorage_3_01T_00_01l_00_01s_00_01U_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>l</templarg>
    <templarg>s</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType</name>
    <filename>structSacado_1_1BaseExprType.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; CacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; ELRFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; Fad::DMFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01Fad_1_1DMFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; Fad::DVFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01Fad_1_1DVFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; Fad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; FAD_NS::DFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01FAD__NS_1_1DFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; FAD_NS::SFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01FAD__NS_1_1SFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; FAD_NS::SLFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01FAD__NS_1_1SLFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; FAD_NS::ViewFad&lt; T, l, s, U &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01FAD__NS_1_1ViewFad_3_01T_00_01l_00_01s_00_01U_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>l</templarg>
    <templarg>s</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; LFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; LFad::LogicalSparse&lt; T, L &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01LFad_1_1LogicalSparse_3_01T_00_01L_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; Tay::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01Tay_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::begin</name>
    <filename>structSacado_1_1mpl_1_1begin.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::begin_impl</name>
    <filename>structSacado_1_1mpl_1_1begin__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::begin_impl&lt; range_c_tag &gt;</name>
    <filename>structSacado_1_1mpl_1_1begin__impl_3_01range__c__tag_01_4.html</filename>
    <class kind="struct">Sacado::mpl::begin_impl&lt; range_c_tag &gt;::apply</class>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::BinaryExpr</name>
    <filename>classSacado_1_1Tay_1_1BinaryExpr.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Op</templarg>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>value_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>a2fac9acf9828fa95642e38a27d75abbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::scalar_type</type>
      <name>scalar_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>af0665cac6a37c26acf62c650c036261a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::base_expr_type</type>
      <name>base_expr_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>af202b79ab664b43c916973a4784c21d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryExpr</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>a1163e0a34fa8d223b918952fdff92a91</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 &amp;expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>aeecfb4214174a11330c591f129d55093</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>ab762a609328b4431466ae4413d9ed4e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>ad4ba78fbc391d9fd461c2ae19d83cebe</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>aec7a7c56152bced15db32c202ef70d07</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>a77441affe44b49d1f8ca57f99cc2121f</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExprT1</type>
      <name>expr1_</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>a3487e455fe93dcc33cda8e8f55632908</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExprT2</type>
      <name>expr2_</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>a98a410e45c65080f487f00822bfa518b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Op&lt; ExprT1, ExprT2 &gt;</type>
      <name>op_</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>a858b4b280fb4c6edee6e301773939b4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::BinaryExpr&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2, Op &gt;</name>
    <filename>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</filename>
    <templarg></templarg>
    <templarg>Op</templarg>
    <member kind="typedef">
      <type>ConstExpr&lt; typename ExprT2::value_type &gt;</type>
      <name>ExprT1</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>a9c438092edadfe167f2df1c2f95ae07a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>acd99d7dc5895b7f2c34dcd504fbd5901</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryExpr</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>a82d4efa53ed78e8a157ec9a4ab9d86cd</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 &amp;expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>ade227894e340fae37867825f004f0c23</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>acab366fd29e5178d08c3cb528c519c05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>a20bdab784cb66adfdad68f81f5931d1c</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>acdcfa61c0a821d6c0629f4d6545094e6</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>a23feade308d6570e3532e0bc6f0d4c99</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExprT1</type>
      <name>expr1_</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>a88eb50e8b58e40840ef74e36ce88c6a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExprT2</type>
      <name>expr2_</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>aae487f591abc986574493e145d2ae8ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Op&lt; ExprT1, ExprT2 &gt;</type>
      <name>op_</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>aa23c54ad06246eef7484d7cf0e7c68e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::BinaryExpr&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt;, Op &gt;</name>
    <filename>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</filename>
    <templarg></templarg>
    <templarg>Op</templarg>
    <member kind="typedef">
      <type>ConstExpr&lt; typename ExprT1::value_type &gt;</type>
      <name>ExprT2</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a60ad9a9fed4c859a89c5828756642482</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a7a3ec57e790a3075d9cd19747a4c0356</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryExpr</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a0d33de4b8ede895bfc9b82f970e2bc26</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 &amp;expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a7db11d3daf1bf8bfca450d2b228f034b</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a7f321470a6ed5966dd0fb59ed302a228</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a1dfe3865e8050c16db96f9505cc316b4</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a7c4e3c8613792a24593b6a34f59df488</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a9fa5d975ba7057b669a752870316190f</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExprT1</type>
      <name>expr1_</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>aa39d43e5b51d50e2a3adc34dbf260cc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExprT2</type>
      <name>expr2_</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>af30d2e3b681be90e5693154fe61544db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Op&lt; ExprT1, ExprT2 &gt;</type>
      <name>op_</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a31a5fd98cfe715116662321907af8b22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind1</name>
    <filename>structSacado_1_1mpl_1_1bind1.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Sacado::mpl::bind1::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind2</name>
    <filename>structSacado_1_1mpl_1_1bind2.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Sacado::mpl::bind2::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind3</name>
    <filename>structSacado_1_1mpl_1_1bind3.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Sacado::mpl::bind3::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind4</name>
    <filename>structSacado_1_1mpl_1_1bind4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Sacado::mpl::bind4::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind5</name>
    <filename>structSacado_1_1mpl_1_1bind5.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Sacado::mpl::bind5::apply</class>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::BLAS</name>
    <filename>classSacado_1_1Fad_1_1BLAS.html</filename>
    <templarg>OrdinalType</templarg>
    <templarg>FadType</templarg>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(FadType *da, FadType *db, MagnitudeType *c, FadType *s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, FadType *dx, const OrdinalType incx, FadType *dy, const OrdinalType incy, MagnitudeType *c, FadType *s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const FadType &amp;alpha, FadType *x, const OrdinalType incx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const FadType *x, const OrdinalType incx, FadType *y, const OrdinalType incy) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, FadType *y, const OrdinalType incy) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; FadType &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const FadType *x, const OrdinalType incx) const </arglist>
    </member>
    <member kind="function">
      <type>FadType</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const </arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const FadType *x, const OrdinalType incx) const </arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const FadType *x, const OrdinalType incx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, FadType *y, const OrdinalType incy) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, FadType *x, const OrdinalType incx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, FadType *A, const OrdinalType lda) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, FadType *C, const OrdinalType ldc) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, FadType *C, const OrdinalType ldc) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, FadType *B, const OrdinalType ldb) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, FadType *B, const OrdinalType ldb) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a4a3a2af82e4cee85af4a8d9451c6a01a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType &amp;z, const OrdinalType n_z_dot, ValueType *zdot) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a33c243d1c205a70dc335d80aa299a9bc</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *y, const OrdinalType incy, const OrdinalType n_y_dot, ValueType *y_dot, const OrdinalType incy_dot, const OrdinalType n_dot) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa6f7c185098173be263298aa69a391a6</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType *A, const OrdinalType lda, const OrdinalType n_A_dot, ValueType *A_dot, const OrdinalType lda_dot, const OrdinalType n_dot) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a359e9e6429070fbaafe1d5cde7f75084</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5c637cc9b3ec498c1f843e71faf215c2</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a20c966b2d4ddc4740d0ba95e6001f8d9</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a1e65bef5a764679972583ffab0ec76b6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArrayTraits&lt; OrdinalType, FadType &gt;</type>
      <name>arrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a3138d2abdaf1418ab3b3dcf2c13c43cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::BLAS&lt; OrdinalType, ValueType &gt;</type>
      <name>blas</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01e0af8c1f58c4440e7306dcb8b32c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_default_impl</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a37fa0d364d8ec2b428a34467473ee791</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemv_Ax</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a10ab3ca54fd6c1779e396edcc0e4c52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemm_AB</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a6339bf08f964aafa661ab6a0888655fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(FadType *da, FadType *db, MagnitudeType *c, FadType *s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, FadType *dx, const OrdinalType incx, FadType *dy, const OrdinalType incy, MagnitudeType *c, FadType *s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const FadType &amp;alpha, FadType *x, const OrdinalType incx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const FadType *x, const OrdinalType incx, FadType *y, const OrdinalType incy) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, FadType *y, const OrdinalType incy) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; FadType &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const FadType *x, const OrdinalType incx) const </arglist>
    </member>
    <member kind="function">
      <type>FadType</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const </arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const FadType *x, const OrdinalType incx) const </arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const FadType *x, const OrdinalType incx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, FadType *y, const OrdinalType incy) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, FadType *x, const OrdinalType incx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, FadType *A, const OrdinalType lda) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, FadType *C, const OrdinalType ldc) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, FadType *C, const OrdinalType ldc) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, FadType *B, const OrdinalType ldb) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, FadType *B, const OrdinalType ldb) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Teuchos::BLAS&lt; OrdinalType, Sacado::CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>classTeuchos_1_1BLAS_3_01OrdinalType_00_01Sacado_1_1CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>BLAS&lt; OrdinalType, Sacado::CacheFad::DFad&lt; ValueT &gt; &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classTeuchos_1_1BLAS_3_01OrdinalType_00_01Sacado_1_1CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ac0977ecd46b8418d21953d8e2c610db7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BLAS&lt; OrdinalType, Sacado::CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1BLAS.html</filename>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(Sacado::CacheFad::DFad&lt; ValueT &gt; *da, Sacado::CacheFad::DFad&lt; ValueT &gt; *db, MagnitudeType *c, Sacado::CacheFad::DFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, Sacado::CacheFad::DFad&lt; ValueT &gt; *dx, const OrdinalType incx, Sacado::CacheFad::DFad&lt; ValueT &gt; *dy, const OrdinalType incy, MagnitudeType *c, Sacado::CacheFad::DFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const Sacado::CacheFad::DFad&lt; ValueT &gt; &amp;alpha, Sacado::CacheFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const Sacado::CacheFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx, Sacado::CacheFad::DFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, Sacado::CacheFad::DFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; Sacado::CacheFad::DFad&lt; ValueT &gt; &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const Sacado::CacheFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::CacheFad::DFad&lt; ValueT &gt;</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const Sacado::CacheFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const Sacado::CacheFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, Sacado::CacheFad::DFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, Sacado::CacheFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, Sacado::CacheFad::DFad&lt; ValueT &gt; *A, const OrdinalType lda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::CacheFad::DFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::CacheFad::DFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::CacheFad::DFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::CacheFad::DFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a4a3a2af82e4cee85af4a8d9451c6a01a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType &amp;z, const OrdinalType n_z_dot, ValueType *zdot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a33c243d1c205a70dc335d80aa299a9bc</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *y, const OrdinalType incy, const OrdinalType n_y_dot, ValueType *y_dot, const OrdinalType incy_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa6f7c185098173be263298aa69a391a6</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType *A, const OrdinalType lda, const OrdinalType n_A_dot, ValueType *A_dot, const OrdinalType lda_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a359e9e6429070fbaafe1d5cde7f75084</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5c637cc9b3ec498c1f843e71faf215c2</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a20c966b2d4ddc4740d0ba95e6001f8d9</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a1e65bef5a764679972583ffab0ec76b6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArrayTraits&lt; OrdinalType, Sacado::CacheFad::DFad&lt; ValueT &gt; &gt;</type>
      <name>arrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a3138d2abdaf1418ab3b3dcf2c13c43cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::BLAS&lt; OrdinalType, ValueType &gt;</type>
      <name>blas</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01e0af8c1f58c4440e7306dcb8b32c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_default_impl</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a37fa0d364d8ec2b428a34467473ee791</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemv_Ax</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a10ab3ca54fd6c1779e396edcc0e4c52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemm_AB</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a6339bf08f964aafa661ab6a0888655fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(Sacado::CacheFad::DFad&lt; ValueT &gt; *da, Sacado::CacheFad::DFad&lt; ValueT &gt; *db, MagnitudeType *c, Sacado::CacheFad::DFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, Sacado::CacheFad::DFad&lt; ValueT &gt; *dx, const OrdinalType incx, Sacado::CacheFad::DFad&lt; ValueT &gt; *dy, const OrdinalType incy, MagnitudeType *c, Sacado::CacheFad::DFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const Sacado::CacheFad::DFad&lt; ValueT &gt; &amp;alpha, Sacado::CacheFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const Sacado::CacheFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx, Sacado::CacheFad::DFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, Sacado::CacheFad::DFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; Sacado::CacheFad::DFad&lt; ValueT &gt; &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const Sacado::CacheFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::CacheFad::DFad&lt; ValueT &gt;</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const Sacado::CacheFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const Sacado::CacheFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, Sacado::CacheFad::DFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, Sacado::CacheFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, Sacado::CacheFad::DFad&lt; ValueT &gt; *A, const OrdinalType lda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::CacheFad::DFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::CacheFad::DFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::CacheFad::DFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::CacheFad::DFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Teuchos::BLAS&lt; OrdinalType, Sacado::ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>classTeuchos_1_1BLAS_3_01OrdinalType_00_01Sacado_1_1ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::Fad::BLAS</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classTeuchos_1_1BLAS_3_01OrdinalType_00_01Sacado_1_1ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>af45b22e745ac6c160620623db7d96478</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BLAS&lt; OrdinalType, Sacado::ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1BLAS.html</filename>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(Sacado::ELRFad::DFad&lt; ValueT &gt; *da, Sacado::ELRFad::DFad&lt; ValueT &gt; *db, MagnitudeType *c, Sacado::ELRFad::DFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, Sacado::ELRFad::DFad&lt; ValueT &gt; *dx, const OrdinalType incx, Sacado::ELRFad::DFad&lt; ValueT &gt; *dy, const OrdinalType incy, MagnitudeType *c, Sacado::ELRFad::DFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::DFad&lt; ValueT &gt; &amp;alpha, Sacado::ELRFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx, Sacado::ELRFad::DFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, Sacado::ELRFad::DFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; Sacado::ELRFad::DFad&lt; ValueT &gt; &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::ELRFad::DFad&lt; ValueT &gt;</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, Sacado::ELRFad::DFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, Sacado::ELRFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, Sacado::ELRFad::DFad&lt; ValueT &gt; *A, const OrdinalType lda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::ELRFad::DFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::ELRFad::DFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::ELRFad::DFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::ELRFad::DFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a4a3a2af82e4cee85af4a8d9451c6a01a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType &amp;z, const OrdinalType n_z_dot, ValueType *zdot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a33c243d1c205a70dc335d80aa299a9bc</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *y, const OrdinalType incy, const OrdinalType n_y_dot, ValueType *y_dot, const OrdinalType incy_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa6f7c185098173be263298aa69a391a6</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType *A, const OrdinalType lda, const OrdinalType n_A_dot, ValueType *A_dot, const OrdinalType lda_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a359e9e6429070fbaafe1d5cde7f75084</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5c637cc9b3ec498c1f843e71faf215c2</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a20c966b2d4ddc4740d0ba95e6001f8d9</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a1e65bef5a764679972583ffab0ec76b6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArrayTraits&lt; OrdinalType, Sacado::ELRFad::DFad&lt; ValueT &gt; &gt;</type>
      <name>arrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a3138d2abdaf1418ab3b3dcf2c13c43cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::BLAS&lt; OrdinalType, ValueType &gt;</type>
      <name>blas</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01e0af8c1f58c4440e7306dcb8b32c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_default_impl</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a37fa0d364d8ec2b428a34467473ee791</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemv_Ax</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a10ab3ca54fd6c1779e396edcc0e4c52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemm_AB</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a6339bf08f964aafa661ab6a0888655fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(Sacado::ELRFad::DFad&lt; ValueT &gt; *da, Sacado::ELRFad::DFad&lt; ValueT &gt; *db, MagnitudeType *c, Sacado::ELRFad::DFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, Sacado::ELRFad::DFad&lt; ValueT &gt; *dx, const OrdinalType incx, Sacado::ELRFad::DFad&lt; ValueT &gt; *dy, const OrdinalType incy, MagnitudeType *c, Sacado::ELRFad::DFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::DFad&lt; ValueT &gt; &amp;alpha, Sacado::ELRFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx, Sacado::ELRFad::DFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, Sacado::ELRFad::DFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; Sacado::ELRFad::DFad&lt; ValueT &gt; &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::ELRFad::DFad&lt; ValueT &gt;</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, Sacado::ELRFad::DFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, Sacado::ELRFad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, Sacado::ELRFad::DFad&lt; ValueT &gt; *A, const OrdinalType lda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::ELRFad::DFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::ELRFad::DFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::ELRFad::DFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::ELRFad::DFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Teuchos::BLAS&lt; OrdinalType, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>classTeuchos_1_1BLAS_3_01OrdinalType_00_01Sacado_1_1ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Num</templarg>
    <base>Sacado::Fad::BLAS</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classTeuchos_1_1BLAS_3_01OrdinalType_00_01Sacado_1_1ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae1a1012b33e8395cb4e6d71e714c06a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BLAS&lt; OrdinalType, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1BLAS.html</filename>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *da, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *db, MagnitudeType *c, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *dx, const OrdinalType incx, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *dy, const OrdinalType incy, MagnitudeType *c, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SFad&lt; ValueT, Num &gt; &amp;alpha, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; Sacado::ELRFad::SFad&lt; ValueT, Num &gt; &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::ELRFad::SFad&lt; ValueT, Num &gt;</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *A, const OrdinalType lda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a4a3a2af82e4cee85af4a8d9451c6a01a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType &amp;z, const OrdinalType n_z_dot, ValueType *zdot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a33c243d1c205a70dc335d80aa299a9bc</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *y, const OrdinalType incy, const OrdinalType n_y_dot, ValueType *y_dot, const OrdinalType incy_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa6f7c185098173be263298aa69a391a6</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType *A, const OrdinalType lda, const OrdinalType n_A_dot, ValueType *A_dot, const OrdinalType lda_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a359e9e6429070fbaafe1d5cde7f75084</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5c637cc9b3ec498c1f843e71faf215c2</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a20c966b2d4ddc4740d0ba95e6001f8d9</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a1e65bef5a764679972583ffab0ec76b6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArrayTraits&lt; OrdinalType, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; &gt;</type>
      <name>arrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a3138d2abdaf1418ab3b3dcf2c13c43cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::BLAS&lt; OrdinalType, ValueType &gt;</type>
      <name>blas</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01e0af8c1f58c4440e7306dcb8b32c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_default_impl</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a37fa0d364d8ec2b428a34467473ee791</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemv_Ax</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a10ab3ca54fd6c1779e396edcc0e4c52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemm_AB</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a6339bf08f964aafa661ab6a0888655fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *da, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *db, MagnitudeType *c, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *dx, const OrdinalType incx, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *dy, const OrdinalType incy, MagnitudeType *c, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SFad&lt; ValueT, Num &gt; &amp;alpha, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; Sacado::ELRFad::SFad&lt; ValueT, Num &gt; &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::ELRFad::SFad&lt; ValueT, Num &gt;</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *A, const OrdinalType lda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::ELRFad::SFad&lt; ValueT, Num &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Teuchos::BLAS&lt; OrdinalType, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>classTeuchos_1_1BLAS_3_01OrdinalType_00_01Sacado_1_1ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Num</templarg>
    <base>Sacado::Fad::BLAS</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classTeuchos_1_1BLAS_3_01OrdinalType_00_01Sacado_1_1ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac39d99cee3266dbb0e1879ce4ec86a64</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BLAS&lt; OrdinalType, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1BLAS.html</filename>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *da, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *db, MagnitudeType *c, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *dx, const OrdinalType incx, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *dy, const OrdinalType incy, MagnitudeType *c, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; &amp;alpha, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::ELRFad::SLFad&lt; ValueT, Num &gt;</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *A, const OrdinalType lda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a4a3a2af82e4cee85af4a8d9451c6a01a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType &amp;z, const OrdinalType n_z_dot, ValueType *zdot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a33c243d1c205a70dc335d80aa299a9bc</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *y, const OrdinalType incy, const OrdinalType n_y_dot, ValueType *y_dot, const OrdinalType incy_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa6f7c185098173be263298aa69a391a6</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType *A, const OrdinalType lda, const OrdinalType n_A_dot, ValueType *A_dot, const OrdinalType lda_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a359e9e6429070fbaafe1d5cde7f75084</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5c637cc9b3ec498c1f843e71faf215c2</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a20c966b2d4ddc4740d0ba95e6001f8d9</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a1e65bef5a764679972583ffab0ec76b6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArrayTraits&lt; OrdinalType, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</type>
      <name>arrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a3138d2abdaf1418ab3b3dcf2c13c43cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::BLAS&lt; OrdinalType, ValueType &gt;</type>
      <name>blas</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01e0af8c1f58c4440e7306dcb8b32c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_default_impl</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a37fa0d364d8ec2b428a34467473ee791</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemv_Ax</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a10ab3ca54fd6c1779e396edcc0e4c52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemm_AB</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a6339bf08f964aafa661ab6a0888655fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *da, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *db, MagnitudeType *c, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *dx, const OrdinalType incx, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *dy, const OrdinalType incy, MagnitudeType *c, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; &amp;alpha, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::ELRFad::SLFad&lt; ValueT, Num &gt;</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *A, const OrdinalType lda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Teuchos::BLAS&lt; OrdinalType, Sacado::Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>classTeuchos_1_1BLAS_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>BLAS&lt; OrdinalType, Sacado::Fad::DFad&lt; ValueT &gt; &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classTeuchos_1_1BLAS_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>abf2fd94bc8afe593e6f1c0e6d293ec21</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BLAS&lt; OrdinalType, Sacado::Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1BLAS.html</filename>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(Sacado::Fad::DFad&lt; ValueT &gt; *da, Sacado::Fad::DFad&lt; ValueT &gt; *db, MagnitudeType *c, Sacado::Fad::DFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, Sacado::Fad::DFad&lt; ValueT &gt; *dx, const OrdinalType incx, Sacado::Fad::DFad&lt; ValueT &gt; *dy, const OrdinalType incy, MagnitudeType *c, Sacado::Fad::DFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DFad&lt; ValueT &gt; &amp;alpha, Sacado::Fad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DFad&lt; ValueT &gt; *x, const OrdinalType incx, Sacado::Fad::DFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, Sacado::Fad::DFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; Sacado::Fad::DFad&lt; ValueT &gt; &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::DFad&lt; ValueT &gt;</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, Sacado::Fad::DFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, Sacado::Fad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, Sacado::Fad::DFad&lt; ValueT &gt; *A, const OrdinalType lda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::DFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::DFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::DFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::DFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a4a3a2af82e4cee85af4a8d9451c6a01a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType &amp;z, const OrdinalType n_z_dot, ValueType *zdot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a33c243d1c205a70dc335d80aa299a9bc</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *y, const OrdinalType incy, const OrdinalType n_y_dot, ValueType *y_dot, const OrdinalType incy_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa6f7c185098173be263298aa69a391a6</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType *A, const OrdinalType lda, const OrdinalType n_A_dot, ValueType *A_dot, const OrdinalType lda_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a359e9e6429070fbaafe1d5cde7f75084</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5c637cc9b3ec498c1f843e71faf215c2</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a20c966b2d4ddc4740d0ba95e6001f8d9</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a1e65bef5a764679972583ffab0ec76b6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArrayTraits&lt; OrdinalType, Sacado::Fad::DFad&lt; ValueT &gt; &gt;</type>
      <name>arrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a3138d2abdaf1418ab3b3dcf2c13c43cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::BLAS&lt; OrdinalType, ValueType &gt;</type>
      <name>blas</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01e0af8c1f58c4440e7306dcb8b32c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_default_impl</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a37fa0d364d8ec2b428a34467473ee791</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemv_Ax</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a10ab3ca54fd6c1779e396edcc0e4c52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemm_AB</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a6339bf08f964aafa661ab6a0888655fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(Sacado::Fad::DFad&lt; ValueT &gt; *da, Sacado::Fad::DFad&lt; ValueT &gt; *db, MagnitudeType *c, Sacado::Fad::DFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, Sacado::Fad::DFad&lt; ValueT &gt; *dx, const OrdinalType incx, Sacado::Fad::DFad&lt; ValueT &gt; *dy, const OrdinalType incy, MagnitudeType *c, Sacado::Fad::DFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DFad&lt; ValueT &gt; &amp;alpha, Sacado::Fad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DFad&lt; ValueT &gt; *x, const OrdinalType incx, Sacado::Fad::DFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, Sacado::Fad::DFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; Sacado::Fad::DFad&lt; ValueT &gt; &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::DFad&lt; ValueT &gt;</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, Sacado::Fad::DFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, Sacado::Fad::DFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, Sacado::Fad::DFad&lt; ValueT &gt; *A, const OrdinalType lda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::DFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::DFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::DFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::DFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Teuchos::BLAS&lt; OrdinalType, Sacado::Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>classTeuchos_1_1BLAS_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>BLAS&lt; OrdinalType, Sacado::Fad::DMFad&lt; ValueT &gt; &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classTeuchos_1_1BLAS_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>adf2831d61e656bc7ceb955117d4f25dd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BLAS&lt; OrdinalType, Sacado::Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1BLAS.html</filename>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(Sacado::Fad::DMFad&lt; ValueT &gt; *da, Sacado::Fad::DMFad&lt; ValueT &gt; *db, MagnitudeType *c, Sacado::Fad::DMFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, Sacado::Fad::DMFad&lt; ValueT &gt; *dx, const OrdinalType incx, Sacado::Fad::DMFad&lt; ValueT &gt; *dy, const OrdinalType incy, MagnitudeType *c, Sacado::Fad::DMFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DMFad&lt; ValueT &gt; &amp;alpha, Sacado::Fad::DMFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DMFad&lt; ValueT &gt; *x, const OrdinalType incx, Sacado::Fad::DMFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, Sacado::Fad::DMFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; Sacado::Fad::DMFad&lt; ValueT &gt; &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DMFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::DMFad&lt; ValueT &gt;</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DMFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DMFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, Sacado::Fad::DMFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, Sacado::Fad::DMFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, Sacado::Fad::DMFad&lt; ValueT &gt; *A, const OrdinalType lda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::DMFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::DMFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::DMFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::DMFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a4a3a2af82e4cee85af4a8d9451c6a01a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType &amp;z, const OrdinalType n_z_dot, ValueType *zdot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a33c243d1c205a70dc335d80aa299a9bc</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *y, const OrdinalType incy, const OrdinalType n_y_dot, ValueType *y_dot, const OrdinalType incy_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa6f7c185098173be263298aa69a391a6</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType *A, const OrdinalType lda, const OrdinalType n_A_dot, ValueType *A_dot, const OrdinalType lda_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a359e9e6429070fbaafe1d5cde7f75084</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5c637cc9b3ec498c1f843e71faf215c2</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a20c966b2d4ddc4740d0ba95e6001f8d9</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a1e65bef5a764679972583ffab0ec76b6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArrayTraits&lt; OrdinalType, Sacado::Fad::DMFad&lt; ValueT &gt; &gt;</type>
      <name>arrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a3138d2abdaf1418ab3b3dcf2c13c43cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::BLAS&lt; OrdinalType, ValueType &gt;</type>
      <name>blas</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01e0af8c1f58c4440e7306dcb8b32c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_default_impl</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a37fa0d364d8ec2b428a34467473ee791</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemv_Ax</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a10ab3ca54fd6c1779e396edcc0e4c52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemm_AB</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a6339bf08f964aafa661ab6a0888655fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(Sacado::Fad::DMFad&lt; ValueT &gt; *da, Sacado::Fad::DMFad&lt; ValueT &gt; *db, MagnitudeType *c, Sacado::Fad::DMFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, Sacado::Fad::DMFad&lt; ValueT &gt; *dx, const OrdinalType incx, Sacado::Fad::DMFad&lt; ValueT &gt; *dy, const OrdinalType incy, MagnitudeType *c, Sacado::Fad::DMFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DMFad&lt; ValueT &gt; &amp;alpha, Sacado::Fad::DMFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DMFad&lt; ValueT &gt; *x, const OrdinalType incx, Sacado::Fad::DMFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, Sacado::Fad::DMFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; Sacado::Fad::DMFad&lt; ValueT &gt; &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DMFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::DMFad&lt; ValueT &gt;</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DMFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DMFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, Sacado::Fad::DMFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, Sacado::Fad::DMFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, Sacado::Fad::DMFad&lt; ValueT &gt; *A, const OrdinalType lda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::DMFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::DMFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::DMFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::DMFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Teuchos::BLAS&lt; OrdinalType, Sacado::Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>classTeuchos_1_1BLAS_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::Fad::BLAS</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classTeuchos_1_1BLAS_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a2f41957a12737ec813ddaabe8570dc52</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BLAS&lt; OrdinalType, Sacado::Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1BLAS.html</filename>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(Sacado::Fad::DVFad&lt; ValueT &gt; *da, Sacado::Fad::DVFad&lt; ValueT &gt; *db, MagnitudeType *c, Sacado::Fad::DVFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, Sacado::Fad::DVFad&lt; ValueT &gt; *dx, const OrdinalType incx, Sacado::Fad::DVFad&lt; ValueT &gt; *dy, const OrdinalType incy, MagnitudeType *c, Sacado::Fad::DVFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DVFad&lt; ValueT &gt; &amp;alpha, Sacado::Fad::DVFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DVFad&lt; ValueT &gt; *x, const OrdinalType incx, Sacado::Fad::DVFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, Sacado::Fad::DVFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; Sacado::Fad::DVFad&lt; ValueT &gt; &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DVFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::DVFad&lt; ValueT &gt;</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DVFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DVFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, Sacado::Fad::DVFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, Sacado::Fad::DVFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, Sacado::Fad::DVFad&lt; ValueT &gt; *A, const OrdinalType lda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::DVFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::DVFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::DVFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::DVFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a4a3a2af82e4cee85af4a8d9451c6a01a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType &amp;z, const OrdinalType n_z_dot, ValueType *zdot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a33c243d1c205a70dc335d80aa299a9bc</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *y, const OrdinalType incy, const OrdinalType n_y_dot, ValueType *y_dot, const OrdinalType incy_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa6f7c185098173be263298aa69a391a6</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType *A, const OrdinalType lda, const OrdinalType n_A_dot, ValueType *A_dot, const OrdinalType lda_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a359e9e6429070fbaafe1d5cde7f75084</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5c637cc9b3ec498c1f843e71faf215c2</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a20c966b2d4ddc4740d0ba95e6001f8d9</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a1e65bef5a764679972583ffab0ec76b6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArrayTraits&lt; OrdinalType, Sacado::Fad::DVFad&lt; ValueT &gt; &gt;</type>
      <name>arrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a3138d2abdaf1418ab3b3dcf2c13c43cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::BLAS&lt; OrdinalType, ValueType &gt;</type>
      <name>blas</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01e0af8c1f58c4440e7306dcb8b32c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_default_impl</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a37fa0d364d8ec2b428a34467473ee791</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemv_Ax</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a10ab3ca54fd6c1779e396edcc0e4c52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemm_AB</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a6339bf08f964aafa661ab6a0888655fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(Sacado::Fad::DVFad&lt; ValueT &gt; *da, Sacado::Fad::DVFad&lt; ValueT &gt; *db, MagnitudeType *c, Sacado::Fad::DVFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, Sacado::Fad::DVFad&lt; ValueT &gt; *dx, const OrdinalType incx, Sacado::Fad::DVFad&lt; ValueT &gt; *dy, const OrdinalType incy, MagnitudeType *c, Sacado::Fad::DVFad&lt; ValueT &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DVFad&lt; ValueT &gt; &amp;alpha, Sacado::Fad::DVFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DVFad&lt; ValueT &gt; *x, const OrdinalType incx, Sacado::Fad::DVFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, Sacado::Fad::DVFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; Sacado::Fad::DVFad&lt; ValueT &gt; &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DVFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::DVFad&lt; ValueT &gt;</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DVFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::DVFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, Sacado::Fad::DVFad&lt; ValueT &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, Sacado::Fad::DVFad&lt; ValueT &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, Sacado::Fad::DVFad&lt; ValueT &gt; *A, const OrdinalType lda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::DVFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::DVFad&lt; ValueT &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::DVFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::DVFad&lt; ValueT &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Teuchos::BLAS&lt; OrdinalType, Sacado::Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>classTeuchos_1_1BLAS_3_01OrdinalType_00_01Sacado_1_1Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Num</templarg>
    <base>BLAS&lt; OrdinalType, Sacado::Fad::SFad&lt; ValueT, Num &gt; &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classTeuchos_1_1BLAS_3_01OrdinalType_00_01Sacado_1_1Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a07f43479a3bb6725525133931fe50174</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BLAS&lt; OrdinalType, Sacado::Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1BLAS.html</filename>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(Sacado::Fad::SFad&lt; ValueT, Num &gt; *da, Sacado::Fad::SFad&lt; ValueT, Num &gt; *db, MagnitudeType *c, Sacado::Fad::SFad&lt; ValueT, Num &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, Sacado::Fad::SFad&lt; ValueT, Num &gt; *dx, const OrdinalType incx, Sacado::Fad::SFad&lt; ValueT, Num &gt; *dy, const OrdinalType incy, MagnitudeType *c, Sacado::Fad::SFad&lt; ValueT, Num &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SFad&lt; ValueT, Num &gt; &amp;alpha, Sacado::Fad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx, Sacado::Fad::SFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, Sacado::Fad::SFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; Sacado::Fad::SFad&lt; ValueT, Num &gt; &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::SFad&lt; ValueT, Num &gt;</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, Sacado::Fad::SFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, Sacado::Fad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, Sacado::Fad::SFad&lt; ValueT, Num &gt; *A, const OrdinalType lda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::SFad&lt; ValueT, Num &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::SFad&lt; ValueT, Num &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::SFad&lt; ValueT, Num &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::SFad&lt; ValueT, Num &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a4a3a2af82e4cee85af4a8d9451c6a01a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType &amp;z, const OrdinalType n_z_dot, ValueType *zdot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a33c243d1c205a70dc335d80aa299a9bc</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *y, const OrdinalType incy, const OrdinalType n_y_dot, ValueType *y_dot, const OrdinalType incy_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa6f7c185098173be263298aa69a391a6</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType *A, const OrdinalType lda, const OrdinalType n_A_dot, ValueType *A_dot, const OrdinalType lda_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a359e9e6429070fbaafe1d5cde7f75084</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5c637cc9b3ec498c1f843e71faf215c2</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a20c966b2d4ddc4740d0ba95e6001f8d9</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a1e65bef5a764679972583ffab0ec76b6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArrayTraits&lt; OrdinalType, Sacado::Fad::SFad&lt; ValueT, Num &gt; &gt;</type>
      <name>arrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a3138d2abdaf1418ab3b3dcf2c13c43cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::BLAS&lt; OrdinalType, ValueType &gt;</type>
      <name>blas</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01e0af8c1f58c4440e7306dcb8b32c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_default_impl</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a37fa0d364d8ec2b428a34467473ee791</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemv_Ax</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a10ab3ca54fd6c1779e396edcc0e4c52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemm_AB</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a6339bf08f964aafa661ab6a0888655fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(Sacado::Fad::SFad&lt; ValueT, Num &gt; *da, Sacado::Fad::SFad&lt; ValueT, Num &gt; *db, MagnitudeType *c, Sacado::Fad::SFad&lt; ValueT, Num &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, Sacado::Fad::SFad&lt; ValueT, Num &gt; *dx, const OrdinalType incx, Sacado::Fad::SFad&lt; ValueT, Num &gt; *dy, const OrdinalType incy, MagnitudeType *c, Sacado::Fad::SFad&lt; ValueT, Num &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SFad&lt; ValueT, Num &gt; &amp;alpha, Sacado::Fad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx, Sacado::Fad::SFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, Sacado::Fad::SFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; Sacado::Fad::SFad&lt; ValueT, Num &gt; &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::SFad&lt; ValueT, Num &gt;</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, Sacado::Fad::SFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, Sacado::Fad::SFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, Sacado::Fad::SFad&lt; ValueT, Num &gt; *A, const OrdinalType lda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::SFad&lt; ValueT, Num &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::SFad&lt; ValueT, Num &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::SFad&lt; ValueT, Num &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::SFad&lt; ValueT, Num &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Teuchos::BLAS&lt; OrdinalType, Sacado::Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>classTeuchos_1_1BLAS_3_01OrdinalType_00_01Sacado_1_1Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Num</templarg>
    <base>Sacado::Fad::BLAS</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classTeuchos_1_1BLAS_3_01OrdinalType_00_01Sacado_1_1Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aee35933e16283672bf2afea9a5f404c5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BLAS&lt; OrdinalType, Sacado::Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1BLAS.html</filename>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(Sacado::Fad::SLFad&lt; ValueT, Num &gt; *da, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *db, MagnitudeType *c, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *dx, const OrdinalType incx, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *dy, const OrdinalType incy, MagnitudeType *c, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SLFad&lt; ValueT, Num &gt; &amp;alpha, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; Sacado::Fad::SLFad&lt; ValueT, Num &gt; &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::SLFad&lt; ValueT, Num &gt;</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *A, const OrdinalType lda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a4a3a2af82e4cee85af4a8d9451c6a01a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType &amp;z, const OrdinalType n_z_dot, ValueType *zdot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a33c243d1c205a70dc335d80aa299a9bc</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *y, const OrdinalType incy, const OrdinalType n_y_dot, ValueType *y_dot, const OrdinalType incy_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa6f7c185098173be263298aa69a391a6</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType *A, const OrdinalType lda, const OrdinalType n_A_dot, ValueType *A_dot, const OrdinalType lda_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a359e9e6429070fbaafe1d5cde7f75084</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5c637cc9b3ec498c1f843e71faf215c2</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a20c966b2d4ddc4740d0ba95e6001f8d9</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a1e65bef5a764679972583ffab0ec76b6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArrayTraits&lt; OrdinalType, Sacado::Fad::SLFad&lt; ValueT, Num &gt; &gt;</type>
      <name>arrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a3138d2abdaf1418ab3b3dcf2c13c43cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::BLAS&lt; OrdinalType, ValueType &gt;</type>
      <name>blas</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01e0af8c1f58c4440e7306dcb8b32c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_default_impl</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a37fa0d364d8ec2b428a34467473ee791</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemv_Ax</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a10ab3ca54fd6c1779e396edcc0e4c52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemm_AB</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a6339bf08f964aafa661ab6a0888655fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(Sacado::Fad::SLFad&lt; ValueT, Num &gt; *da, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *db, MagnitudeType *c, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *dx, const OrdinalType incx, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *dy, const OrdinalType incy, MagnitudeType *c, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SLFad&lt; ValueT, Num &gt; &amp;alpha, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; Sacado::Fad::SLFad&lt; ValueT, Num &gt; &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::SLFad&lt; ValueT, Num &gt;</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const Sacado::Fad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *y, const OrdinalType incy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *x, const OrdinalType incx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *A, const OrdinalType lda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *C, const OrdinalType ldc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, Sacado::Fad::SLFad&lt; ValueT, Num &gt; *B, const OrdinalType ldb) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::CacheTaylor</name>
    <filename>classSacado_1_1Tay_1_1CacheTaylor.html</filename>
    <templarg>T</templarg>
    <base>Sacado::Tay::Expr&lt; CacheTaylorImplementation&lt; T &gt; &gt;</base>
    <class kind="struct">Sacado::Tay::CacheTaylor::apply</class>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>abfbb6cfce0894c00b7df933b25f714af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; T &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a6b969eeb744961e45b6ecdc5cf27159e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a9306982574334cfae0678c1bc9fc1163</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>aafdfffcd83f57ba5d3d12794b8b4bf44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>accbb3ca57de860cc96b3238c180a419b</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a541977db31824448c418079379640ddc</anchor>
      <arglist>(const typename dummy&lt; value_type, scalar_type &gt;::type &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a6faccc83ad8554f5c1c2070caae9db16</anchor>
      <arglist>(int d, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a5594b4bfc9de9bded65224b2f128494d</anchor>
      <arglist>(const CacheTaylor &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a8ba618a5c3dd3a153a2856bd47c7d4bc</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a302ba36658e27564e9c63c1fd7847771</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>ac2340c0db6955c02e9b7322f51928cb3</anchor>
      <arglist>(const typename dummy&lt; value_type, scalar_type &gt;::type &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a8aef747ac22d93aff7b7bd14d455fa58</anchor>
      <arglist>(const CacheTaylor&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a3d6b3588270af9b4651d85ec2f7ca4bc</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Expr&lt; UnaryExpr&lt; CacheTaylor&lt; T &gt;, UnaryPlusOp &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a928430fc3adf94e8df7b2949b64d2ad7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Expr&lt; UnaryExpr&lt; CacheTaylor&lt; T &gt;, UnaryMinusOp &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>ad86cbc440c5c9cbd927648e97440bdc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a2542d1ddc77cf2e424b0d0b61dabe23e</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a5870c73429a96a265d819446c09f75a3</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>afe30b71ae0b1d5f51f4816eb95b28908</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a4b9941b6711603718fd33821ae0e4727</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a9955ad45dcd4575797bf3b80db8284eb</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>ae59aa01957dd714cdb3bba07099f037f</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a34fb19cf5d2d0bef4b97bca9c1f84478</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>aa20fd4a2d698e32350837e07659b5091</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>aafdfffcd83f57ba5d3d12794b8b4bf44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>accbb3ca57de860cc96b3238c180a419b</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a541977db31824448c418079379640ddc</anchor>
      <arglist>(const typename dummy&lt; value_type, scalar_type &gt;::type &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a6faccc83ad8554f5c1c2070caae9db16</anchor>
      <arglist>(int d, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a5594b4bfc9de9bded65224b2f128494d</anchor>
      <arglist>(const CacheTaylor &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a8ba618a5c3dd3a153a2856bd47c7d4bc</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a302ba36658e27564e9c63c1fd7847771</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>ac2340c0db6955c02e9b7322f51928cb3</anchor>
      <arglist>(const typename dummy&lt; value_type, scalar_type &gt;::type &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a8aef747ac22d93aff7b7bd14d455fa58</anchor>
      <arglist>(const CacheTaylor&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a3d6b3588270af9b4651d85ec2f7ca4bc</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Expr&lt; UnaryExpr&lt; CacheTaylor&lt; T &gt;, UnaryPlusOp &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a928430fc3adf94e8df7b2949b64d2ad7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Expr&lt; UnaryExpr&lt; CacheTaylor&lt; T &gt;, UnaryMinusOp &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>ad86cbc440c5c9cbd927648e97440bdc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a2542d1ddc77cf2e424b0d0b61dabe23e</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a5870c73429a96a265d819446c09f75a3</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>afe30b71ae0b1d5f51f4816eb95b28908</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a4b9941b6711603718fd33821ae0e4727</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a9955ad45dcd4575797bf3b80db8284eb</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>ae59aa01957dd714cdb3bba07099f037f</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a34fb19cf5d2d0bef4b97bca9c1f84478</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>aa20fd4a2d698e32350837e07659b5091</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::CacheTaylorImplementation</name>
    <filename>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a138ee3b8b481853981ea29895c3d644e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; T &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a805073c4f701cbed09ba238d29075d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylorImplementation</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>aa94366f43a7533f3e1066c35d3e52ebc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylorImplementation</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a38382e221e3a5561829f6c6dfbd296b7</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylorImplementation</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a83a9227f0e4420cb1fcbf779b95a1b98</anchor>
      <arglist>(int d, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylorImplementation</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a2c41a3646d66008165c2c9a6ff2751ed</anchor>
      <arglist>(const CacheTaylorImplementation &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CacheTaylorImplementation</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>af0e0427ce1e5d28cc62cc5d5f6492daf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a78cad411da6a229eb807fb4145f89f25</anchor>
      <arglist>(int d, bool keep_coeffs)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>ac572cd4942bad5d9f9b709955b889057</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>adfbdb98445e2ae0bf712807b1c7250ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a4e8752857833ae86914949f7d721a7eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a4084cf02e620458f973701f2db8655ed</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>const std::valarray&lt; T &gt; &amp;</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a0a2d6c29d70c63146e9e53fe4a9ab372</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>ab504d458d8ccf1516e6b0db749b4a125</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a7939f9371d18e4353333045c2d3b568c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a1425c1d4643c3f946b98c975e3dde477</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a052fa24cd4749ee5a8a4ed3b901f1f71</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a2a978fe4a6850e2a04747306928dd4fc</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a5f4655ef86fcdbd924ee942596dfa68e</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resizeCoeffs</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>ab79b4ef9da9159827b76ff5af3459b22</anchor>
      <arglist>(int dnew)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::valarray&lt; T &gt;</type>
      <name>coeff_</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>ad0c00dc0ef43cc0fdef94122bb9c453d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>ac572cd4942bad5d9f9b709955b889057</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>adfbdb98445e2ae0bf712807b1c7250ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a4e8752857833ae86914949f7d721a7eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a4084cf02e620458f973701f2db8655ed</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>const std::valarray&lt; T &gt; &amp;</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a0a2d6c29d70c63146e9e53fe4a9ab372</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>ab504d458d8ccf1516e6b0db749b4a125</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a7939f9371d18e4353333045c2d3b568c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a1425c1d4643c3f946b98c975e3dde477</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a052fa24cd4749ee5a8a4ed3b901f1f71</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a2a978fe4a6850e2a04747306928dd4fc</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a5f4655ef86fcdbd924ee942596dfa68e</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::CADcontext</name>
    <filename>classSacado_1_1Rad2d_1_1CADcontext.html</filename>
    <base>Sacado::Rad2d::ADcontext</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::CADcontext</name>
    <filename>classSacado_1_1Rad_1_1CADcontext.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad::ADcontext</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::CADcontext</name>
    <filename>classSacado_1_1Rad2_1_1CADcontext.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad2::ADcontext</base>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::CADcontext</name>
    <filename>classSacado_1_1RadVec_1_1CADcontext.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::RadVec::ADcontext</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::CADcontext</name>
    <filename>classSacado_1_1Radnt_1_1CADcontext.html</filename>
    <base>Sacado::Radnt::ADcontext</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::convertible_impl::checker</name>
    <filename>structSacado_1_1mpl_1_1convertible__impl_1_1checker.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::MemPool::Chunk</name>
    <filename>structSacado_1_1Fad_1_1MemPool_1_1Chunk.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ConstADvar</name>
    <filename>classSacado_1_1Rad2d_1_1ConstADvar.html</filename>
    <base>Sacado::Rad2d::ADvar</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ConstADvar</name>
    <filename>classSacado_1_1Rad_1_1ConstADvar.html</filename>
    <templarg></templarg>
    <base>Sacado::Rad::ADvar</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ConstADvar</name>
    <filename>classSacado_1_1Rad2_1_1ConstADvar.html</filename>
    <templarg></templarg>
    <base>Sacado::Rad2::ADvar</base>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ConstADvar</name>
    <filename>classSacado_1_1RadVec_1_1ConstADvar.html</filename>
    <templarg></templarg>
    <base>Sacado::RadVec::ADvar</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ConstADvar</name>
    <filename>classSacado_1_1Radnt_1_1ConstADvar.html</filename>
    <base>Sacado::Radnt::ADvar</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ConstADvari</name>
    <filename>classSacado_1_1Rad2d_1_1ConstADvari.html</filename>
    <base>Sacado::Rad2d::ADvari</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ConstADvari</name>
    <filename>classSacado_1_1Rad_1_1ConstADvari.html</filename>
    <templarg></templarg>
    <base>Sacado::Rad::ADvari</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ConstADvari</name>
    <filename>classSacado_1_1Rad2_1_1ConstADvari.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad2::ADvari</base>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ConstADvari</name>
    <filename>classSacado_1_1RadVec_1_1ConstADvari.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::RadVec::ADvari</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ConstADvari</name>
    <filename>classSacado_1_1Radnt_1_1ConstADvari.html</filename>
    <base>Sacado::Radnt::ADvari</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::ConstExpr</name>
    <filename>classSacado_1_1Tay_1_1ConstExpr.html</filename>
    <templarg>ConstT</templarg>
    <member kind="typedef">
      <type>ConstT</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>aedc474664186a942e1eb354c66c6d980</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a4de864fdff53af578a83e28b9fec11dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstT</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a094ce051fc8118facf91b0f0e59dfd95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>ad69506dd288b9aa2466b849c14fc0ea5</anchor>
      <arglist>(const ConstT &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>af3ede266918b520c4e8a3f4beaf798da</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a428b996e4697f0d854e22a2b1fbfd9e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>ac8dd283e48d44893e77332f5bda1db6e</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>af6758cd4636de6738fea92f934f0dca3</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a7cae6cbc6621dd417afabe7849fc3b37</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstT</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>ac5425c7395a5da92af5a8318e5e2b422</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::ConstExpr</name>
    <filename>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</filename>
    <templarg>ConstT</templarg>
    <member kind="typedef">
      <type>ConstT</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a6c338edd63a6ae4744336c7fafbd3b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>acfc6d30d85565c8c6d9ef2f9e8cc2780</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstT</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ac9dd508a01890d3cb79a1c253d4a6132</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>aaa4b29b6de8c88a9daaf7a2f940d7c12</anchor>
      <arglist>(const ConstT &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ad31aabd5b7374ed2bfb1bd51e293e34a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a33a2001680f1178193b869b1601e8c8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ae8b3614167e1bd7e349cfcd6d2a0efe6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ad2e63163075dd5e850aadc73efc19b93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a8342331d5715d045f10f045c737d5d7c</anchor>
      <arglist>(const value_type &amp;bar, value_type partials[]) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>abd0cfc6bce345c516835aaf367803574</anchor>
      <arglist>(int i, value_type dots[]) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a22301fb0b7c6bd64629eef4476795a8f</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>aa1ae4eccd892fc3c6e54b90183039484</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinear</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ae71d86f4f6253f2d3fb4a8b3b58796ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>num_args</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a9d78af29408ee384b152f0c5c8b3c82b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstT &amp;</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a623f3189565c0ef7b3142097fff96034</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::ConstExpr</name>
    <filename>classSacado_1_1Fad_1_1ConstExpr.html</filename>
    <templarg>ConstT</templarg>
    <member kind="typedef">
      <type>ConstT</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>ad29e9c33148405978199ed37f499db25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a471769c799f834cabdf41dbed121d50a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstT</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a29c1cd610d7eeb485aae91e2c25d9013</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>aff124075a397c80470cabf7ed8f42922</anchor>
      <arglist>(const ConstT &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>const ConstT &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a7111a8d52492067eae802e2319c9476c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ConstT &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a124c7ce7716bc367493d0297d3164209</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstT &amp;</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a69baa7527c1880d32929795dc10797ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::ConstExpr</name>
    <filename>classSacado_1_1CacheFad_1_1ConstExpr.html</filename>
    <templarg>ConstT</templarg>
    <member kind="typedef">
      <type>ConstT</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>acc138eb861d54f33cda11acd0fc8d55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>aaa832b334db13fe027f1a5c680870f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstT</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a476c1e8276b04c659f84a2124fb6ab56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a60f8a9e51b878f533807bc9b051ab9a6</anchor>
      <arglist>(const ConstT &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ac059ec13693513c06c1b6c7f00599a91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a0ff550c8be3f94eb76b5639ee9db4998</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ac16ef0e71ee50740daa932394ac9c7cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>val</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a667e71c531ef6ccc78cacb08aa625b35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a262221002ced2d5bce649ddaee4374ca</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a8594a7a760fb64581e8596a0d92ef8be</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstT &amp;</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a9360da9201dba4ccb9b85bedffc14495</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::ConstExpr</name>
    <filename>classSacado_1_1ELRFad_1_1ConstExpr.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ConstT</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>a80197b201c62f456895a252201973dc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>abfe2df4032c24af977594764a6d46128</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstT</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>a8f2221b0d121db3edcfb89224003a647</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>ae030a84d49abfc67805adb736b96fabe</anchor>
      <arglist>(const ConstT &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>a339fb64b0f8739d924ca651a09846bdb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>a30a3a2190e07e659d70cb6c9e3767697</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>adde7bd744e015e8cf98250f2c9499882</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>ae8064d3e371ca6c9be54fc7fa53f6c47</anchor>
      <arglist>(const value_type &amp;bar, value_type partials[]) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>a460832ae5cb04d3ca6bd377ac882a1f5</anchor>
      <arglist>(int i, value_type dots[]) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>aedf623a0452b1c53493aba03de59e321</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>a12b6238cb6b7d347dffd8c725e0decfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinear</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>a9c00396609087fecf45a11fad9faf2dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>num_args</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>ac8e52b9090289465eddfdf4f355d5278</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstT &amp;</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>a1c9f59d33cbc79ee731536b66217df59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstExpr&lt; T1 &gt;</name>
    <filename>classSacado_1_1Fad_1_1ConstExpr.html</filename>
    <member kind="typedef">
      <type>T1</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>ad29e9c33148405978199ed37f499db25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a471769c799f834cabdf41dbed121d50a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T1</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a29c1cd610d7eeb485aae91e2c25d9013</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>aff124075a397c80470cabf7ed8f42922</anchor>
      <arglist>(const T1 &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>const T1 &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a7111a8d52492067eae802e2319c9476c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T1 &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a124c7ce7716bc367493d0297d3164209</anchor>
      <arglist>(int j) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const T1 &amp;</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a69baa7527c1880d32929795dc10797ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstExpr&lt; T1 &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</filename>
    <member kind="typedef">
      <type>T1</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a6c338edd63a6ae4744336c7fafbd3b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>acfc6d30d85565c8c6d9ef2f9e8cc2780</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T1</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ac9dd508a01890d3cb79a1c253d4a6132</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>aaa4b29b6de8c88a9daaf7a2f940d7c12</anchor>
      <arglist>(const T1 &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ad31aabd5b7374ed2bfb1bd51e293e34a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a33a2001680f1178193b869b1601e8c8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ae8b3614167e1bd7e349cfcd6d2a0efe6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ad2e63163075dd5e850aadc73efc19b93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a8342331d5715d045f10f045c737d5d7c</anchor>
      <arglist>(const value_type &amp;bar, value_type partials[]) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>abd0cfc6bce345c516835aaf367803574</anchor>
      <arglist>(int i, value_type dots[]) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a22301fb0b7c6bd64629eef4476795a8f</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>aa1ae4eccd892fc3c6e54b90183039484</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinear</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ae71d86f4f6253f2d3fb4a8b3b58796ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>num_args</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a9d78af29408ee384b152f0c5c8b3c82b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const T1 &amp;</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a623f3189565c0ef7b3142097fff96034</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstExpr&lt; T1 &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1ConstExpr.html</filename>
    <member kind="typedef">
      <type>T1</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>acc138eb861d54f33cda11acd0fc8d55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>aaa832b334db13fe027f1a5c680870f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T1</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a476c1e8276b04c659f84a2124fb6ab56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a60f8a9e51b878f533807bc9b051ab9a6</anchor>
      <arglist>(const T1 &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ac059ec13693513c06c1b6c7f00599a91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a0ff550c8be3f94eb76b5639ee9db4998</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ac16ef0e71ee50740daa932394ac9c7cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>val</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a667e71c531ef6ccc78cacb08aa625b35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a262221002ced2d5bce649ddaee4374ca</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a8594a7a760fb64581e8596a0d92ef8be</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const T1 &amp;</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a9360da9201dba4ccb9b85bedffc14495</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstExpr&lt; T2 &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</filename>
    <member kind="typedef">
      <type>T2</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a6c338edd63a6ae4744336c7fafbd3b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>acfc6d30d85565c8c6d9ef2f9e8cc2780</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T2</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ac9dd508a01890d3cb79a1c253d4a6132</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>aaa4b29b6de8c88a9daaf7a2f940d7c12</anchor>
      <arglist>(const T2 &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ad31aabd5b7374ed2bfb1bd51e293e34a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a33a2001680f1178193b869b1601e8c8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ae8b3614167e1bd7e349cfcd6d2a0efe6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ad2e63163075dd5e850aadc73efc19b93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a8342331d5715d045f10f045c737d5d7c</anchor>
      <arglist>(const value_type &amp;bar, value_type partials[]) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>abd0cfc6bce345c516835aaf367803574</anchor>
      <arglist>(int i, value_type dots[]) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a22301fb0b7c6bd64629eef4476795a8f</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>aa1ae4eccd892fc3c6e54b90183039484</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinear</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ae71d86f4f6253f2d3fb4a8b3b58796ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>num_args</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a9d78af29408ee384b152f0c5c8b3c82b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const T2 &amp;</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a623f3189565c0ef7b3142097fff96034</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstExpr&lt; T2 &gt;</name>
    <filename>classSacado_1_1Fad_1_1ConstExpr.html</filename>
    <member kind="typedef">
      <type>T2</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>ad29e9c33148405978199ed37f499db25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a471769c799f834cabdf41dbed121d50a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T2</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a29c1cd610d7eeb485aae91e2c25d9013</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>aff124075a397c80470cabf7ed8f42922</anchor>
      <arglist>(const T2 &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>const T2 &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a7111a8d52492067eae802e2319c9476c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T2 &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a124c7ce7716bc367493d0297d3164209</anchor>
      <arglist>(int j) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const T2 &amp;</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a69baa7527c1880d32929795dc10797ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstExpr&lt; T2 &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1ConstExpr.html</filename>
    <member kind="typedef">
      <type>T2</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>acc138eb861d54f33cda11acd0fc8d55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>aaa832b334db13fe027f1a5c680870f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T2</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a476c1e8276b04c659f84a2124fb6ab56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a60f8a9e51b878f533807bc9b051ab9a6</anchor>
      <arglist>(const T2 &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ac059ec13693513c06c1b6c7f00599a91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a0ff550c8be3f94eb76b5639ee9db4998</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ac16ef0e71ee50740daa932394ac9c7cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>val</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a667e71c531ef6ccc78cacb08aa625b35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a262221002ced2d5bce649ddaee4374ca</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a8594a7a760fb64581e8596a0d92ef8be</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const T2 &amp;</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a9360da9201dba4ccb9b85bedffc14495</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstExpr&lt; typename ExprT1::value_type &gt;</name>
    <filename>classSacado_1_1Tay_1_1ConstExpr.html</filename>
    <member kind="typedef">
      <type>typename ExprT1::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>aedc474664186a942e1eb354c66c6d980</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a4de864fdff53af578a83e28b9fec11dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename ExprT1::value_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a094ce051fc8118facf91b0f0e59dfd95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>ad69506dd288b9aa2466b849c14fc0ea5</anchor>
      <arglist>(const typename ExprT1::value_type &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>af3ede266918b520c4e8a3f4beaf798da</anchor>
      <arglist>(unsigned int d) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a428b996e4697f0d854e22a2b1fbfd9e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>ac8dd283e48d44893e77332f5bda1db6e</anchor>
      <arglist>(unsigned int d) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>af6758cd4636de6738fea92f934f0dca3</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a7cae6cbc6621dd417afabe7849fc3b37</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>typename ExprT1::value_type</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>ac5425c7395a5da92af5a8318e5e2b422</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstExpr&lt; typename ExprT2::value_type &gt;</name>
    <filename>classSacado_1_1Tay_1_1ConstExpr.html</filename>
    <member kind="typedef">
      <type>typename ExprT2::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>aedc474664186a942e1eb354c66c6d980</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a4de864fdff53af578a83e28b9fec11dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename ExprT2::value_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a094ce051fc8118facf91b0f0e59dfd95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>ad69506dd288b9aa2466b849c14fc0ea5</anchor>
      <arglist>(const typename ExprT2::value_type &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>af3ede266918b520c4e8a3f4beaf798da</anchor>
      <arglist>(unsigned int d) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a428b996e4697f0d854e22a2b1fbfd9e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>ac8dd283e48d44893e77332f5bda1db6e</anchor>
      <arglist>(unsigned int d) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>af6758cd4636de6738fea92f934f0dca3</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a7cae6cbc6621dd417afabe7849fc3b37</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>typename ExprT2::value_type</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>ac5425c7395a5da92af5a8318e5e2b422</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ConstTemplateIterator</name>
    <filename>classSacado_1_1ConstTemplateIterator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ConstTemplateIterator</name>
      <anchorfile>classSacado_1_1ConstTemplateIterator.html</anchorfile>
      <anchor>ad95f8686b12459fcc854be9c7c7d471c</anchor>
      <arglist>(typename std::vector&lt; Teuchos::RCP&lt; BaseT &gt; &gt;::const_iterator p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSacado_1_1ConstTemplateIterator.html</anchorfile>
      <anchor>a9a8a9c8a0feebc11c79729a374758928</anchor>
      <arglist>(const ConstTemplateIterator &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSacado_1_1ConstTemplateIterator.html</anchorfile>
      <anchor>a73e660dd7b4bbf32c22d4f2d85d8bc15</anchor>
      <arglist>(const ConstTemplateIterator &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::ConstTemplateIterator&lt; BaseT &gt;::reference</type>
      <name>operator*</name>
      <anchorfile>classSacado_1_1ConstTemplateIterator.html</anchorfile>
      <anchor>a180f84a18b65b040515d5c5d30fd486b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::ConstTemplateIterator&lt; BaseT &gt;::pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classSacado_1_1ConstTemplateIterator.html</anchorfile>
      <anchor>a3ce2576d6548bf85dbb524687b69c4c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstTemplateIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSacado_1_1ConstTemplateIterator.html</anchorfile>
      <anchor>af683582f381dd1fd6c88a56bb0f3ce0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstTemplateIterator</type>
      <name>operator++</name>
      <anchorfile>classSacado_1_1ConstTemplateIterator.html</anchorfile>
      <anchor>a561357c5df5bcd083d7b64e2afafc5ba</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; BaseT &gt;</type>
      <name>rcp</name>
      <anchorfile>classSacado_1_1ConstTemplateIterator.html</anchorfile>
      <anchor>ab92e461ead3eb2af5680304c91668fdc</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::convertible_impl</name>
    <filename>structSacado_1_1mpl_1_1convertible__impl.html</filename>
    <class kind="struct">Sacado::mpl::convertible_impl::checker</class>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::CoshOp</name>
    <filename>classSacado_1_1Tay_1_1CoshOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::CoshOp</name>
    <filename>classSacado_1_1Fad_1_1CoshOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::CoshOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1CoshOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::CoshOp</name>
    <filename>classSacado_1_1CacheFad_1_1CoshOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::CoshOp</name>
    <filename>classSacado_1_1LFad_1_1CoshOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::CoshOp</name>
    <filename>classSacado_1_1ELRFad_1_1CoshOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::CosOp</name>
    <filename>classSacado_1_1Tay_1_1CosOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::CosOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1CosOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::CosOp</name>
    <filename>classSacado_1_1Fad_1_1CosOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::CosOp</name>
    <filename>classSacado_1_1CacheFad_1_1CosOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::CosOp</name>
    <filename>classSacado_1_1LFad_1_1CosOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::CosOp</name>
    <filename>classSacado_1_1ELRFad_1_1CosOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::TemplateManager::DefaultBuilderOp</name>
    <filename>structSacado_1_1TemplateManager_1_1DefaultBuilderOp.html</filename>
    <member kind="function">
      <type>Teuchos::RCP&lt; BaseT &gt;</type>
      <name>build</name>
      <anchorfile>structSacado_1_1TemplateManager_1_1DefaultBuilderOp.html</anchorfile>
      <anchor>a4811c2b9925493ed8593074b2daeaf02</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::DefaultEvalTypeTraits</name>
    <filename>structSacado_1_1DefaultEvalTypeTraits.html</filename>
    <class kind="struct">Sacado::DefaultEvalTypeTraits::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::deref</name>
    <filename>structSacado_1_1mpl_1_1deref.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::deref&lt; range_c_iterator&lt; Range, Pos &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1deref_3_01range__c__iterator_3_01Range_00_01Pos_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Pos</templarg>
    <base>at&lt; Range, Pos &gt;</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::Derp</name>
    <filename>classSacado_1_1Rad2d_1_1Derp.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::Derp</name>
    <filename>classSacado_1_1Rad_1_1Derp.html</filename>
    <templarg>Double</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::Derp</name>
    <filename>classSacado_1_1Rad2_1_1Derp.html</filename>
    <templarg>Double</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::Derp</name>
    <filename>classSacado_1_1RadVec_1_1Derp.html</filename>
    <templarg>Double</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::Derp</name>
    <filename>classSacado_1_1Radnt_1_1Derp.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::FAD_NS::DFad</name>
    <filename>classSacado_1_1FAD__NS_1_1DFad.html</filename>
    <templarg>ValueT</templarg>
    <class kind="struct">Sacado::FAD_NS::DFad::apply</class>
    <member kind="typedef">
      <type>Fad::DynamicStorage&lt; ValueT &gt;</type>
      <name>StorageType</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>ad9d9245802f5be708bc2540eade9eaa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a1059169a9e62ffed2111854b86d73a0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a0df075ca51f75423b965fc79c4798c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ValueT &gt;::type</type>
      <name>ScalarT</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a231b81d13e4164181e1669773929d6a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a91f79c8d26360358574d837a35d365d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>ac984f83735e912fcdc6cca89ba8860e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a1ec26441080f0b2735cae6382307d927</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a0806829d17711e60bb7728c1fb705fad</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a67530414e960808b6ad3c7f56034a997</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a36a1e27d796f1e904b836ada95b0d860</anchor>
      <arglist>(const DFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a3d2ffbe276fa3605d88cfcd7d0068e9c</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>ac984f83735e912fcdc6cca89ba8860e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a1ec26441080f0b2735cae6382307d927</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a0806829d17711e60bb7728c1fb705fad</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a67530414e960808b6ad3c7f56034a997</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a36a1e27d796f1e904b836ada95b0d860</anchor>
      <arglist>(const DFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a3d2ffbe276fa3605d88cfcd7d0068e9c</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::DFad</name>
    <filename>classSacado_1_1ELRCacheFad_1_1DFad.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::DFad</name>
    <filename>classSacado_1_1Fad_1_1DFad.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::DFad</name>
    <filename>classSacado_1_1CacheFad_1_1DFad.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::DFad</name>
    <filename>classSacado_1_1ELRFad_1_1DFad.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::disable_if</name>
    <filename>structSacado_1_1mpl_1_1disable__if.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>disable_if_c&lt; Cond::value, T &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::disable_if_c</name>
    <filename>structSacado_1_1mpl_1_1disable__if__c.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>disable_if_c&lt; Cond::value, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1disable__if__c.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::disable_if_c&lt; false, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1disable__if__c_3_01false_00_01T_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::DivisionOp</name>
    <filename>classSacado_1_1ELRFad_1_1DivisionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::DivisionOp</name>
    <filename>classSacado_1_1Tay_1_1DivisionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::DivisionOp</name>
    <filename>classSacado_1_1Fad_1_1DivisionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::DivisionOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1DivisionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::DivisionOp</name>
    <filename>classSacado_1_1LFad_1_1DivisionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::DivisionOp</name>
    <filename>classSacado_1_1CacheFad_1_1DivisionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::DivisionOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</name>
    <filename>classSacado_1_1Tay_1_1DivisionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::DivisionOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</name>
    <filename>classSacado_1_1Tay_1_1DivisionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::DMFad</name>
    <filename>classSacado_1_1Fad_1_1DMFad.html</filename>
    <templarg>ValueT</templarg>
    <base>Expr&lt; GeneralFad&lt; ValueT, MemPoolStorage&lt; ValueT &gt; &gt; &gt;</base>
    <class kind="struct">Sacado::Fad::DMFad::apply</class>
    <member kind="typedef">
      <type>MemPoolStorage&lt; ValueT &gt;</type>
      <name>StorageType</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a7ed24deef7a8573913746c5037f8a053</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>ac4f3c35468864136f73b01c40ea697e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>afe01a4b1923ff61e8a2582e47e919a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ValueT &gt;::type</type>
      <name>ScalarT</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>ab5dda72dcfdd65f2bdaeaf78fc145fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>ac999624af158e2980c20541af0da7290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, DMFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a659987369501928a16a73d682693345d</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>DMFad &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>acbee5fa90977ce5f404a2fe9dc5de1d2</anchor>
      <arglist>(const DMFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, DMFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>ac2c20a77f1710f7022d2ea41a48652c0</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, DMFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a9cac0ae624a85190208d8088faa7c0d5</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, DMFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a64288e28769dfbaecdd828b004039120</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, DMFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>abb01fad4f5a3dde28b57993d0967f53d</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, DMFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>af2749428f63f4697bd4dc902b878f3dc</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>DMFad &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>ab11593fe8626c89500fdc0c81e7f3ba2</anchor>
      <arglist>(const DMFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>DMFad &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a894fe83054fa4c1934c7d9c930f10c8a</anchor>
      <arglist>(const DMFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>DMFad &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a96b67ac29bbc8967e388d9c1d0cff988</anchor>
      <arglist>(const DMFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>DMFad &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>aa037cdc38e541e7967e509e9d1ffdd23</anchor>
      <arglist>(const DMFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, DMFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>ae50480a60c74e07a669f60c3f900ad22</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, DMFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>ae8227902a1428d6958b0e2834af9f665</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, DMFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a408bf112defb744fdbd4994f4d7a612c</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, DMFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a4951d69c780dea94cc998e397476dc30</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a6c229e12b89b6845f0a7bce4a6837175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a09fec5aaadb198b9108b42414f088fa4</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a9be23f99c7cf0ede7e86cc88cd8d456e</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>aa0a0bdb28d8110c5ca9215199c8aa814</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a9051bdb939f5b64cc7e6807b246b2ccb</anchor>
      <arglist>(const DMFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a0b2a19c01e68b4ce2c4fec1b3ff93fe8</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDefaultPool</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>afbb683b6a029ba691c51727425ad8ccf</anchor>
      <arglist>(MemPool *pool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a6c229e12b89b6845f0a7bce4a6837175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a09fec5aaadb198b9108b42414f088fa4</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a9be23f99c7cf0ede7e86cc88cd8d456e</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>aa0a0bdb28d8110c5ca9215199c8aa814</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a9051bdb939f5b64cc7e6807b246b2ccb</anchor>
      <arglist>(const DMFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a0b2a19c01e68b4ce2c4fec1b3ff93fe8</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::DoubleAvoid</name>
    <filename>classSacado_1_1Rad2_1_1DoubleAvoid.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::DoubleAvoid</name>
    <filename>classSacado_1_1RadVec_1_1DoubleAvoid.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::DoubleAvoid</name>
    <filename>classSacado_1_1Rad_1_1DoubleAvoid.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::DoubleAvoid&lt; double &gt;</name>
    <filename>classSacado_1_1Rad_1_1DoubleAvoid_3_01double_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::DoubleAvoid&lt; double &gt;</name>
    <filename>classSacado_1_1Rad2_1_1DoubleAvoid_3_01double_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::DoubleAvoid&lt; double &gt;</name>
    <filename>classSacado_1_1RadVec_1_1DoubleAvoid_3_01double_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::DoubleAvoid&lt; int &gt;</name>
    <filename>classSacado_1_1Rad_1_1DoubleAvoid_3_01int_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::DoubleAvoid&lt; long &gt;</name>
    <filename>classSacado_1_1Rad_1_1DoubleAvoid_3_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ds_array</name>
    <filename>structSacado_1_1ds__array.html</filename>
    <templarg></templarg>
    <templarg>isScalar</templarg>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>get</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>a9d9f827cf2ff02ee796f8998f62f7656</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>get_and_fill</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>a792ba1930c270ece2084923812bca2c7</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>get_and_fill</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>acdd3aa6f8b6091914e239e0c09d0e5b8</anchor>
      <arglist>(const T *src, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>strided_get_and_fill</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>a2e288f3b84b3ea370ab03d61386affc8</anchor>
      <arglist>(const T *src, int stride, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>a1eaf0e5a33046babe260dfe373cdd278</anchor>
      <arglist>(const T *src, T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>strided_copy</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>a6b9ab886c5b0ed403ef38f286f54fa97</anchor>
      <arglist>(const T *src, int src_stride, T *dest, int dest_stride, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>zero</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>a897d67618204d5362bd5c11c7d91ced4</anchor>
      <arglist>(T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>strided_zero</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>abebab16f6195056711e3bb7382333d40</anchor>
      <arglist>(T *dest, int stride, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy_and_release</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>ab7ca7eb7d1c261859edcf6ed3154e9d2</anchor>
      <arglist>(T *m, int sz)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ds_array&lt; T, true &gt;</name>
    <filename>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>get</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>aec73c09597d2e0d90cb27637f4ad6a4e</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>get_and_fill</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a67ef58fa90572b7850837973fdf9b057</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>get_and_fill</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a70fa75baf831cfb8092aaf9da4a40512</anchor>
      <arglist>(const T *src, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>strided_get_and_fill</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a1b9bcce84de17414e2d753af8d387386</anchor>
      <arglist>(const T *src, int stride, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a78b1300f5e0b34bd820b4b955728cbb7</anchor>
      <arglist>(const T *src, T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>strided_copy</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a17f01a5c6e5da09875267cc662f32c82</anchor>
      <arglist>(const T *src, int src_stride, T *dest, int dest_stride, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>zero</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a6303ac0244f7091254544a64debea948</anchor>
      <arglist>(T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>strided_zero</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>ab63e2a177fd3fda73dafd3d4db381f6e</anchor>
      <arglist>(T *dest, int stride, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy_and_release</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a108195a483e601405a8d8db0ffa72e2c</anchor>
      <arglist>(T *m, int sz)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::dummy</name>
    <filename>structSacado_1_1dummy.html</filename>
    <templarg>T</templarg>
    <templarg>U</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::dummy&lt; T, T &gt;</name>
    <filename>structSacado_1_1dummy_3_01T_00_01T_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::dummy_arg</name>
    <filename>structSacado_1_1dummy__arg.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::DVFad</name>
    <filename>classSacado_1_1Fad_1_1DVFad.html</filename>
    <templarg>ValueT</templarg>
    <base>Expr&lt; GeneralFad&lt; ValueT, VectorDynamicStorage&lt; ValueT &gt; &gt; &gt;</base>
    <class kind="struct">Sacado::Fad::DVFad::apply</class>
    <member kind="typedef">
      <type>VectorDynamicStorage&lt; ValueT &gt;</type>
      <name>StorageType</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a9a6e817f73aebfd77c7e89c86d186342</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>aade625cefdaa0ea586a14659bc0e3847</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a810790f845fa214ab10af06d7a666ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ValueT &gt;::type</type>
      <name>ScalarT</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a009fb70ddc60f0a66392739191fa445c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a0c3ee7599742734922ff48bb9dffcc81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, DVFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a4b57d0e5e7729cb46c9ebbe4e65f5020</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>DVFad &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a1123d55aee76c6b5005b5f170a4e210f</anchor>
      <arglist>(const DVFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, DVFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>af3d6bfb164c0a6432a0a1d5c304351ed</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, DVFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>adc347ee32dd52073f368f41f5f1d1917</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, DVFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a22452b6451817ad3f2cf72592858c1e5</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, DVFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a490060cd23c9afa82f6695c5b6e4dd63</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, DVFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a4eb744fc6e448dc7ebfab0d35a3a1dd9</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>DVFad &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a027310be17816379eb9234a9d37e4851</anchor>
      <arglist>(const DVFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>DVFad &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a6de68e804b2d2d2e8c612b87ef88ad15</anchor>
      <arglist>(const DVFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>DVFad &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a20cae7118929f131bd4cc91d0f2bb43a</anchor>
      <arglist>(const DVFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>DVFad &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a9148e4d19cec41e4184422228e7cfb58</anchor>
      <arglist>(const DVFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, DVFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a7377f3e397186ae9054ec0d759cf9b77</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, DVFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a68538eccfb37a524b560eea1cb557863</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, DVFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>ac19916d7e532030f4b22941a25863330</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, DVFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a81c4a7d53797008e0f6a0aaa63d493e9</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a0c52135b7d9edb4b78fe840431913550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a9e3e2da224cf03e855cd05e0843d96d9</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a1230f878a48fd020ca37cf742a178d7e</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a0911d809d873c629341e38d2b367c203</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a5e57afa31a7af6afc9029a329526f395</anchor>
      <arglist>(const int sz, ValueT *x, ValueT *dx, bool zero_out=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a98659ec6d0531b4aaa525d8e8c685c98</anchor>
      <arglist>(const int sz, const int i, ValueT *x, ValueT *dx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>aae7b5176983c6608df30dcc1633a8361</anchor>
      <arglist>(const DVFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a3a80ca28ef5b52f6041777c5ecc4349e</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a0c52135b7d9edb4b78fe840431913550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a9e3e2da224cf03e855cd05e0843d96d9</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a1230f878a48fd020ca37cf742a178d7e</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a0911d809d873c629341e38d2b367c203</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a5e57afa31a7af6afc9029a329526f395</anchor>
      <arglist>(const int sz, ValueT *x, ValueT *dx, bool zero_out=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a98659ec6d0531b4aaa525d8e8c685c98</anchor>
      <arglist>(const int sz, const int i, ValueT *x, ValueT *dx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>aae7b5176983c6608df30dcc1633a8361</anchor>
      <arglist>(const DVFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a3a80ca28ef5b52f6041777c5ecc4349e</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::DynamicStorage</name>
    <filename>classSacado_1_1Fad_1_1DynamicStorage.html</filename>
    <templarg>T</templarg>
    <templarg>U</templarg>
    <member kind="function">
      <type></type>
      <name>DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>ad65511fcfca7701d14949ce4869ce254</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a275d131bef0cde65df0972ef5e44c801</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a079cf6f55c5b2f86004e342d6ffe0e1c</anchor>
      <arglist>(const DynamicStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a84447d70b369634543f589eb11c2072e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DynamicStorage &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>abfdad2069d632ae4aaa6e4839984ca4e</anchor>
      <arglist>(const DynamicStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>ac7b8223484330405d7090c7417c53141</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a85b7a05dec2af3cb7056eec44ff0bd1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a288137bd982505378ba0e0fbdf101aff</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeAndZero</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a37b8bed736e87555cd33b55c6d1fbe16</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>ad9944c935a5d31cb6baa6d3d4697ac47</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a2421b60704d3ba9db19a5bc7e2fb8969</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a248fec1f29a8ceecc9c86215087ef557</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a05da93a4b5fcf42033a5e17211081108</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const U *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a5206d0269b7ad0aeb4e248a67cf11739</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>af2e2bdb2701cac8dd6673ee17ecaa5b0</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>U &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a1ea95ff1c2f89186a420d0b2afe72b22</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const U &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>ae357054f8cb8284cffc45e85aa8374af</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>afbae022f8a59854280cbd9fa1a8dce6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sz_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a263a881962ecc26c6ffa9f9b665389ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>len_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a23841fc33731b448b0876646f92bb738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>U *</type>
      <name>dx_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a34e636b1fff753d1f0e1b4a8c4fcc700</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DynamicStorage&lt; ValT, LogT &gt;</name>
    <filename>classSacado_1_1Fad_1_1DynamicStorage.html</filename>
    <member kind="function">
      <type></type>
      <name>DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>ad65511fcfca7701d14949ce4869ce254</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a275d131bef0cde65df0972ef5e44c801</anchor>
      <arglist>(const int sz, const ValT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a079cf6f55c5b2f86004e342d6ffe0e1c</anchor>
      <arglist>(const DynamicStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a84447d70b369634543f589eb11c2072e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DynamicStorage &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>abfdad2069d632ae4aaa6e4839984ca4e</anchor>
      <arglist>(const DynamicStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>ac7b8223484330405d7090c7417c53141</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a85b7a05dec2af3cb7056eec44ff0bd1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a288137bd982505378ba0e0fbdf101aff</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeAndZero</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a37b8bed736e87555cd33b55c6d1fbe16</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>ad9944c935a5d31cb6baa6d3d4697ac47</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a2421b60704d3ba9db19a5bc7e2fb8969</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ValT &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a248fec1f29a8ceecc9c86215087ef557</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ValT &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a05da93a4b5fcf42033a5e17211081108</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LogT *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a5206d0269b7ad0aeb4e248a67cf11739</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LogT</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>af2e2bdb2701cac8dd6673ee17ecaa5b0</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>LogT &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a1ea95ff1c2f89186a420d0b2afe72b22</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const LogT &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>ae357054f8cb8284cffc45e85aa8374af</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValT</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>afbae022f8a59854280cbd9fa1a8dce6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sz_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a263a881962ecc26c6ffa9f9b665389ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>len_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a23841fc33731b448b0876646f92bb738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LogT *</type>
      <name>dx_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a34e636b1fff753d1f0e1b4a8c4fcc700</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DynamicStorage&lt; ValueT &gt;</name>
    <filename>classSacado_1_1Fad_1_1DynamicStorage.html</filename>
    <member kind="function">
      <type></type>
      <name>DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>ad65511fcfca7701d14949ce4869ce254</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a275d131bef0cde65df0972ef5e44c801</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a079cf6f55c5b2f86004e342d6ffe0e1c</anchor>
      <arglist>(const DynamicStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a84447d70b369634543f589eb11c2072e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DynamicStorage &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>abfdad2069d632ae4aaa6e4839984ca4e</anchor>
      <arglist>(const DynamicStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>ac7b8223484330405d7090c7417c53141</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a85b7a05dec2af3cb7056eec44ff0bd1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a288137bd982505378ba0e0fbdf101aff</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeAndZero</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a37b8bed736e87555cd33b55c6d1fbe16</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>ad9944c935a5d31cb6baa6d3d4697ac47</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a2421b60704d3ba9db19a5bc7e2fb8969</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ValueT &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a248fec1f29a8ceecc9c86215087ef557</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ValueT &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a05da93a4b5fcf42033a5e17211081108</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ValueT *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a5206d0269b7ad0aeb4e248a67cf11739</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ValueT</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>af2e2bdb2701cac8dd6673ee17ecaa5b0</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>ValueT &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a1ea95ff1c2f89186a420d0b2afe72b22</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const ValueT &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>ae357054f8cb8284cffc45e85aa8374af</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueT</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>afbae022f8a59854280cbd9fa1a8dce6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sz_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a263a881962ecc26c6ffa9f9b665389ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>len_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a23841fc33731b448b0876646f92bb738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueT *</type>
      <name>dx_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a34e636b1fff753d1f0e1b4a8c4fcc700</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::enable_if</name>
    <filename>structSacado_1_1mpl_1_1enable__if.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>enable_if_c&lt; Cond::value, T &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::enable_if_c</name>
    <filename>structSacado_1_1mpl_1_1enable__if__c.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>enable_if_c&lt; Cond::value, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1enable__if__c.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::enable_if_c&lt; true, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1enable__if__c_3_01true_00_01T_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::end</name>
    <filename>structSacado_1_1mpl_1_1end.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::end_impl</name>
    <filename>structSacado_1_1mpl_1_1end__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::end_impl&lt; range_c_tag &gt;</name>
    <filename>structSacado_1_1mpl_1_1end__impl_3_01range__c__tag_01_4.html</filename>
    <class kind="struct">Sacado::mpl::end_impl&lt; range_c_tag &gt;::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::ParameterVectorBase::Entry</name>
    <filename>structSacado_1_1ParameterVectorBase_1_1Entry.html</filename>
    <member kind="function">
      <type></type>
      <name>Entry</name>
      <anchorfile>structSacado_1_1ParameterVectorBase_1_1Entry.html</anchorfile>
      <anchor>a6b8294297f8412b4e019bfc13e321864</anchor>
      <arglist>(const Teuchos::RCP&lt; FamilyType &gt; &amp;f, BaseValueType bv)</arglist>
    </member>
    <member kind="variable">
      <type>Teuchos::RCP&lt; FamilyType &gt;</type>
      <name>family</name>
      <anchorfile>structSacado_1_1ParameterVectorBase_1_1Entry.html</anchorfile>
      <anchor>a430bd48f61c43048c5eecd2e0980e49d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BaseValueType</type>
      <name>baseValue</name>
      <anchorfile>structSacado_1_1ParameterVectorBase_1_1Entry.html</anchorfile>
      <anchor>a488a1df0f3713f4619ac20e0d67b58c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::ExpOp</name>
    <filename>classSacado_1_1Tay_1_1ExpOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::ExpOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1ExpOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::ExpOp</name>
    <filename>classSacado_1_1Fad_1_1ExpOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::ExpOp</name>
    <filename>classSacado_1_1CacheFad_1_1ExpOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::ExpOp</name>
    <filename>classSacado_1_1LFad_1_1ExpOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::ExpOp</name>
    <filename>classSacado_1_1ELRFad_1_1ExpOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::Expr</name>
    <filename>classSacado_1_1Tay_1_1Expr.html</filename>
    <templarg>ExprT</templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>aa09d4afb965eca48c9c75c7303ac78fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>a7f73abc304f2e406db5f8f198e1a5754</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>ae9ef3aa36e55a8a38093859898b3fabd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>a52cd4dba806d782e1d0ca3fa3a5297a6</anchor>
      <arglist>(const ExprT &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>a85f482b9d2c54fabd70b2782456cdb81</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>abbba500c00eb3e6c40a9779ee7ae8f76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>a1473dcb4c922a8f5070cbb95989ab825</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>a36525fbeed4f6f13fcc3ebda155258aa</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>a39a782d030487d8a54e97e0f76e1ac2a</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>a12d714860283f81a05f1875a19443ca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExprT</type>
      <name>expr_</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>a0d5366844252f9515f4fbf4c7f8adc7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr</name>
    <filename>classSacado_1_1Fad_1_1Expr.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr</name>
    <filename>classSacado_1_1CacheFad_1_1Expr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr</name>
    <filename>classSacado_1_1LFad_1_1Expr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr</name>
    <filename>classSacado_1_1ELRFad_1_1Expr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  AbsOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01AbsOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  AbsOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01AbsOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  AbsOp&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01AbsOp_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  ACoshOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01ACoshOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt;  ACoshOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01_01ACoshOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt;  ACoshOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01_01ACoshOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  ACoshOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01ACoshOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  ACoshOp&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01ACoshOp_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt;  ACosOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01_01ACosOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt;  ACosOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01_01ACosOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  ACosOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01ACosOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  ACosOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01ACosOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  ACosOp&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01ACosOp_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  AdditionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01AdditionOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  AdditionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01AdditionOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  AdditionOp&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01AdditionOp_3_01Expr_3_01T1_01_4_00_01Expr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  AdditionOp&lt; Expr&lt; T1 &gt;, typename Expr&lt; T1 &gt;::value_type &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01AdditionOp_3_01Expr_3_01T1_01_4_00_01typename_01Expr_3_01T1_01_4_1_1value__type_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  AdditionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01AdditionOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  AdditionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01AdditionOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  AdditionOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01AdditionOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  AdditionOp&lt; ExprT1, ExprT2 &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01AdditionOp_3_01ExprT1_00_01ExprT2_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  AdditionOp&lt; typename Expr&lt; T2 &gt;::value_type, Expr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01AdditionOp_3_01typename_01Expr_3_01T2_01_4_1_1value__type_00_01Expr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  ASinhOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01ASinhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt;  ASinhOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01_01ASinhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt;  ASinhOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01_01ASinhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  ASinhOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01ASinhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  ASinhOp&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01ASinhOp_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt;  ASinOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01_01ASinOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt;  ASinOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01_01ASinOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  ASinOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01ASinOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  ASinOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01ASinOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  ASinOp&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01ASinOp_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  Atan2Op&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01Atan2Op_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  Atan2Op&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01Atan2Op_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  Atan2Op&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01Atan2Op_3_01Expr_3_01T1_01_4_00_01Expr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  Atan2Op&lt; Expr&lt; T1 &gt;, typename Expr&lt; T1 &gt;::value_type &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01Atan2Op_3_01Expr_3_01T1_01_4_00_01typename_01Expr_3_01T1_01_4_1_1value__type_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  Atan2Op&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01Atan2Op_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  Atan2Op&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01Atan2Op_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  Atan2Op&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01Atan2Op_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  Atan2Op&lt; ExprT1, ExprT2 &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01Atan2Op_3_01ExprT1_00_01ExprT2_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  Atan2Op&lt; typename Expr&lt; T2 &gt;::value_type, Expr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01Atan2Op_3_01typename_01Expr_3_01T2_01_4_1_1value__type_00_01Expr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  ATanhOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01ATanhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt;  ATanhOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01_01ATanhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt;  ATanhOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01_01ATanhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  ATanhOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01ATanhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  ATanhOp&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01ATanhOp_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt;  ATanOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01_01ATanOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt;  ATanOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01_01ATanOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  ATanOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01ATanOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  ATanOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01ATanOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  ATanOp&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01ATanOp_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt;  CoshOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01_01CoshOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt;  CoshOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01_01CoshOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  CoshOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01CoshOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  CoshOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01CoshOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  CoshOp&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01CoshOp_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt;  CosOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01_01CosOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt;  CosOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01_01CosOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  CosOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01CosOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  CosOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01CosOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  CosOp&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01CosOp_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  DivisionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01DivisionOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  DivisionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01DivisionOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  DivisionOp&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01DivisionOp_3_01Expr_3_01T1_01_4_00_01Expr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  DivisionOp&lt; Expr&lt; T1 &gt;, typename Expr&lt; T1 &gt;::value_type &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01DivisionOp_3_01Expr_3_01T1_01_4_00_01typename_01Expr_3_01T1_01_4_1_1value__type_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  DivisionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01DivisionOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  DivisionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01DivisionOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  DivisionOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01DivisionOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  DivisionOp&lt; ExprT1, ExprT2 &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01DivisionOp_3_01ExprT1_00_01ExprT2_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  DivisionOp&lt; typename Expr&lt; T2 &gt;::value_type, Expr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01DivisionOp_3_01typename_01Expr_3_01T2_01_4_1_1value__type_00_01Expr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt;  ExpOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01_01ExpOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt;  ExpOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01_01ExpOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  ExpOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01ExpOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  ExpOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01ExpOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  ExpOp&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01ExpOp_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  FAbsOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01FAbsOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  FAbsOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01FAbsOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  FAbsOp&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01FAbsOp_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt;  Log10Op&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01_01Log10Op_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt;  Log10Op&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01_01Log10Op_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  Log10Op&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01Log10Op_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  Log10Op&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01Log10Op_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  Log10Op&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01Log10Op_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt;  LogOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01_01LogOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt;  LogOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01_01LogOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  LogOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01LogOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  LogOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01LogOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  LogOp&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01LogOp_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  MaxOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01MaxOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  MaxOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01MaxOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  MaxOp&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01MaxOp_3_01Expr_3_01T1_01_4_00_01Expr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  MaxOp&lt; Expr&lt; T1 &gt;, typename Expr&lt; T1 &gt;::value_type &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01MaxOp_3_01Expr_3_01T1_01_4_00_01typename_01Expr_3_01T1_01_4_1_1value__type_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  MaxOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01MaxOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  MaxOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01MaxOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  MaxOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01MaxOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  MaxOp&lt; ExprT1, ExprT2 &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01MaxOp_3_01ExprT1_00_01ExprT2_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  MaxOp&lt; typename Expr&lt; T2 &gt;::value_type, Expr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01MaxOp_3_01typename_01Expr_3_01T2_01_4_1_1value__type_00_01Expr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  MinOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01MinOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  MinOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01MinOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  MinOp&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01MinOp_3_01Expr_3_01T1_01_4_00_01Expr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  MinOp&lt; Expr&lt; T1 &gt;, typename Expr&lt; T1 &gt;::value_type &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01MinOp_3_01Expr_3_01T1_01_4_00_01typename_01Expr_3_01T1_01_4_1_1value__type_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  MinOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01MinOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  MinOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01MinOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  MinOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01MinOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  MinOp&lt; ExprT1, ExprT2 &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01MinOp_3_01ExprT1_00_01ExprT2_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  MinOp&lt; typename Expr&lt; T2 &gt;::value_type, Expr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01MinOp_3_01typename_01Expr_3_01T2_01_4_1_1value__type_00_01Expr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  MultiplicationOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01MultiplicationOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  MultiplicationOp&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01MultiplicationOp_3_01Expr_3_01T1_01_4_00_01Expr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  MultiplicationOp&lt; Expr&lt; T1 &gt;, typename Expr&lt; T1 &gt;::value_type &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01MultiplicationOp_3_01Expr_3_01T1_01_4_00_01typename_01Expr_3_6eff17cadcd984427e50d2c35979b33e.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  MultiplicationOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01MultiplicationOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  MultiplicationOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01MultiplicationOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  MultiplicationOp&lt; typename Expr&lt; T2 &gt;::value_type, Expr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01MultiplicationOp_3_01typename_01Expr_3_01T2_01_4_1_1value__ty165ffdc06f3dca91babcffe68ed90aef.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  PowerOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01PowerOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  PowerOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01PowerOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  PowerOp&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01PowerOp_3_01Expr_3_01T1_01_4_00_01Expr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  PowerOp&lt; Expr&lt; T1 &gt;, typename Expr&lt; T1 &gt;::value_type &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01PowerOp_3_01Expr_3_01T1_01_4_00_01typename_01Expr_3_01T1_01_4_1_1value__type_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  PowerOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01PowerOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  PowerOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01PowerOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  PowerOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01PowerOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  PowerOp&lt; ExprT1, ExprT2 &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01PowerOp_3_01ExprT1_00_01ExprT2_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  PowerOp&lt; typename Expr&lt; T2 &gt;::value_type, Expr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01PowerOp_3_01typename_01Expr_3_01T2_01_4_1_1value__type_00_01Expr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  SinhOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01SinhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt;  SinhOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01_01SinhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt;  SinhOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01_01SinhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  SinhOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01SinhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  SinhOp&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01SinhOp_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt;  SinOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01_01SinOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt;  SinOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01_01SinOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  SinOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01SinOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  SinOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01SinOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  SinOp&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01SinOp_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt;  SqrtOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01_01SqrtOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt;  SqrtOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01_01SqrtOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  SqrtOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01SqrtOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  SqrtOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01SqrtOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  SqrtOp&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01SqrtOp_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  SubtractionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01SubtractionOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  SubtractionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01SubtractionOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  SubtractionOp&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01SubtractionOp_3_01Expr_3_01T1_01_4_00_01Expr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  SubtractionOp&lt; Expr&lt; T1 &gt;, typename Expr&lt; T1 &gt;::value_type &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01SubtractionOp_3_01Expr_3_01T1_01_4_00_01typename_01Expr_3_01T1_01_4_1_1value__type_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  SubtractionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01SubtractionOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  SubtractionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01SubtractionOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  SubtractionOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01SubtractionOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  SubtractionOp&lt; ExprT1, ExprT2 &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01SubtractionOp_3_01ExprT1_00_01ExprT2_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  SubtractionOp&lt; typename Expr&lt; T2 &gt;::value_type, Expr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01SubtractionOp_3_01typename_01Expr_3_01T2_01_4_1_1value__type_00_01Expr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  TanhOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01TanhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt;  TanhOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01_01TanhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt;  TanhOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01_01TanhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  TanhOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01TanhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  TanhOp&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01TanhOp_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt;  TanOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01_01TanOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt;  TanOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01_01TanOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  TanOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01TanOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  TanOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01TanOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  TanOp&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01TanOp_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  UnaryMinusOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  UnaryMinusOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  UnaryMinusOp&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01UnaryMinusOp_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt;  UnaryPlusOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt;  UnaryPlusOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt;  UnaryPlusOp&lt; ExprT &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01_01UnaryPlusOp_3_01ExprT_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; AbsOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; AbsOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; AdditionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01AdditionOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; AdditionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01AdditionOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; AdditionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01AdditionOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; AdditionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01AdditionOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; AdditionOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01AdditionOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; AdditionOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01AdditionOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; Atan2Op&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01Atan2Op_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; Atan2Op&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01Atan2Op_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; Atan2Op&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01Atan2Op_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; Atan2Op&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01Atan2Op_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; Atan2Op&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01Atan2Op_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; Atan2Op&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01Atan2Op_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::Expr&lt; CacheTaylorImplementation&lt; T &gt; &gt;</name>
    <filename>classSacado_1_1Tay_1_1Expr_3_01CacheTaylorImplementation_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <base>Sacado::Tay::CacheTaylorImplementation</base>
    <member kind="typedef">
      <type>CacheTaylor&lt; T &gt;</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr_3_01CacheTaylorImplementation_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a5bd7a293d1b3c1ad7cef2f8914590946</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr_3_01CacheTaylorImplementation_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a0181839fdf65b104fed9f61d67aeefe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr_3_01CacheTaylorImplementation_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a97452479f4a53af73905fc9925cc6cbb</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr_3_01CacheTaylorImplementation_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a69483764ef96acb9bf97fc7b9ceb3905</anchor>
      <arglist>(int d, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr_3_01CacheTaylorImplementation_3_01T_01_4_01_4.html</anchorfile>
      <anchor>afbf14791802fe27b9e0d9d4c56893d8e</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; DivisionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01DivisionOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; DivisionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01DivisionOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; DivisionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01DivisionOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; DivisionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01DivisionOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; DivisionOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01DivisionOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; DivisionOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01DivisionOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; FAbsOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; FAbsOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::Fad::GeneralFad</base>
    <member kind="typedef">
      <type>GeneralFad&lt; T, Storage &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>ab55f9ff4bed0b9a4a3ed83ebb91d782d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeneralFad&lt; T, Storage &gt;::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a0e731481a280a12b478cd1f7319bd976</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseExpr&lt; GeneralFad&lt; T, Storage &gt; &gt;::type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a6fd0ab1a3ed301943bfabb02476bc745</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a1d7f26bbe556dc6b791b517af4b125e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a5b251adac5e9e04b075cacf588dd2bd1</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a44512f62f5647acc005817a90e40acc8</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a356261350112b25f59c7e3f5b31de6a4</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a903c83b991f819dd3469d38cd71aae55</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>ad5e8a16545d1efb5b592783766d70677</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>aa6629014a0235e25dcea05837f90821a</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a6e733cfdf117f0da9695aa3d9ebe72f6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::ELRCacheFad::GeneralFad</base>
    <member kind="typedef">
      <type>BaseExpr&lt; GeneralFad&lt; T, Storage &gt; &gt;::type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>adbb3ef77aaf98033d045049bab9ebc76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a246bd7fd0f87d544798702fbbfa24165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a59cbc4d36277da54ef700625b190f813</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>abf17c53a6cc60b7c1a8fa626eb23911c</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>afb61655af2ab4bc4a11f6308055b8c75</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a82986c8a3ce47f8605dcfdc0a7c61ff6</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a6c4e4a7e79e7a188b246f95e55e5d451</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a3985669ba4b4e2b4e161378781268f4d</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>aa688cb2efd70c5b3bdf097214bad71a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a45548109efd6a0a3cf8c11ad994f194e</anchor>
      <arglist>(const T &amp;bar, value_type partials[]) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a4a65f481c3b1f578a86a1212c5c40da4</anchor>
      <arglist>(int i, value_type dots[]) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a0dd581b952ae18e5876433a658592cd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinear</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>aeb3535bb2e659736e55e42d5c9e3f47e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a4c838a8b6a4f6ddf3d77990e4cccbb57</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>getDx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a2603cce8c38f6f317b68d8a29c8c44ea</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>num_args</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>aff552fa70f844950562da5aa19104888</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_linear</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a0cf8cfb1af9c813697364da0fafc8b09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::CacheFad::GeneralFad</base>
    <member kind="typedef">
      <type>GeneralFad&lt; T, Storage &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>af99e806f0779524e26a89e0cf1be0759</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeneralFad&lt; T, Storage &gt;::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>aabc5eb0b6e16bf8bab30fee60fc1e650</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseExpr&lt; GeneralFad&lt; T, Storage &gt; &gt;::type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>adcf74f54c39263e0bb1b16200088e84d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a5a722fdc9a35780d5241ed6b977865b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a0871fdd2bc605a7218e33b8cef8f4239</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>aa32d0ca5b97817aa17148d34d21a6f37</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>acf7036e8aed3836e7f63203671262c6d</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a056382968f6fe0fde24042d1ce4fd27e</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a776ea99ec0e70c1cd80648654a60065b</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a05ae70fe105a6400fb1ec1f565836d0c</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>acdb4676655fcfaac129acc218c29d88d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::ELRFad::GeneralFad</base>
    <member kind="typedef">
      <type>GeneralFad&lt; T, Storage &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a5bdae9dd15b70010d52812464c47047d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeneralFad&lt; T, Storage &gt;::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a5431f125cbdacc3e40335f98f9130ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseExpr&lt; GeneralFad&lt; T, Storage &gt; &gt;::type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a6ad742c8a65f640d0bf7c7801ee36a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>ac1512a92b993c1d26c1c650255e41ec0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a796568d7cdd2e8b1fa8b35fb9b74508c</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>af2d034a12b3f82cf9152eaf03e1f483a</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a2e44a53a231da98631219623042fb39d</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a6d0bd41b981549165f2870f5198aef7e</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a0e67460adfcd62abe3e961ce50d2e16a</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a69cf9f8f2b52a65f67bfc31a33ed4a00</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>abf02d86ce37ae52c6f5f382651366af9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a3e71f1efbc5e6d884fe74a82f7df9b26</anchor>
      <arglist>(const T &amp;bar, value_type partials[]) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>abcb60bd2d2a4d175b8d0d50f48b343ef</anchor>
      <arglist>(int i, value_type dots[]) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a9c57d0e76bf3dc6ec8b3b392a67ae1ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive2</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a8fca96825729c692f056d518707afaaf</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinear</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>ae2cb8d30d6ccabc6d3e1e62da041be34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>ab3a8df606830f58838707c7129d25d20</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>getDx</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a6d2f2ba5db68a73759f7abfa687207ab</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeActivePartials</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a1c63c4a1f1f52cab0943bfd1f6c75f3c</anchor>
      <arglist>(const T &amp;bar, value_type *partials) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>num_args</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a80631b2f53aa4c93f099bbcf07a8832b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_linear</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a87d751a3ed2e568246ab239a9398b773</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Expr&lt; GeneralFad&lt; ValueT, MemPoolStorage&lt; ValueT &gt; &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr.html</filename>
  </compound>
  <compound kind="class">
    <name>Expr&lt; GeneralFad&lt; ValueT, VectorDynamicStorage&lt; ValueT &gt; &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt; LogicalSparseImp&lt; ValT, LogT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg>ValT</templarg>
    <templarg>LogT</templarg>
    <base>Sacado::LFad::LogicalSparseImp</base>
    <member kind="typedef">
      <type>LogicalSparseImp&lt; ValT, LogT &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a7eec0b3672f26344e6ad39069c3ab0cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LogicalSparseImp&lt; ValT, LogT &gt;::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>afe5f93338a4af554a6c1c07f39b2ab73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LogicalSparse&lt; ValT, LogT &gt;</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>adf92ed1bacded5c881eaf4e8637425bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a1f23750b3a31f5f8b037c1d89b88cfdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>aed30218f114044397999ebfe5a1f2acb</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a4a5e39bef5aba3e3f5c11f438ca6be2e</anchor>
      <arglist>(const int sz, const ValT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>ab40e79fd82ba4769a4241cfdc9494d98</anchor>
      <arglist>(const int sz, const int i, const ValT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a9c8819f91f628a5193d9fd219b0dd42f</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>ac6fff95fe438d6a19b92494a282f0b71</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a8e5512cffe0eba18e8bd8cde6d2c9d59</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; MaxOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01MaxOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; MaxOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01MaxOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; MaxOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01MaxOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; MaxOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01MaxOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; MaxOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01MaxOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; MaxOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01MaxOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; MinOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01MinOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; MinOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01MinOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; MinOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01MinOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; MinOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01MinOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; MinOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01MinOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; MinOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01MinOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; MultiplicationOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01MultiplicationOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; MultiplicationOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01MultiplicationOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt; MultiplicationOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01MultiplicationOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; MultiplicationOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01MultiplicationOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; MultiplicationOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01MultiplicationOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt; MultiplicationOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01MultiplicationOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; MultiplicationOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01MultiplicationOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; MultiplicationOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01MultiplicationOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt; MultiplicationOp&lt; ExprT1, ExprT2 &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01MultiplicationOp_3_01ExprT1_00_01ExprT2_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; PowerOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01PowerOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; PowerOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01PowerOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; PowerOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01PowerOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; PowerOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01PowerOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; PowerOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01PowerOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; PowerOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01PowerOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>RemoveConst&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ad9a05e2a1b3f6bae9d1f83533e552a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a8c439af604f5520bb02f7928a778f914</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SFad&lt; value_type, Num &gt;</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ace54e939a08bc8dc3e808cd6f4dd1e63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a411a343eae27290497b42ec00e9d63f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4aeb6b45f236fdb7c353dc58ea7e33f3</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a5be1f9681d56e9bd76af966460516a14</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a09fce8a130c032593203901f1e648f9f</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4bbd281013398259bc46f042432b13ce</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a814d704a0ea424c959e702bbd2b94ae2</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4398fc88f4aa6851dfe01b0e7665537c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>accec918b162dee6a79fab21304cd8aa3</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab4e3aa577b6ac329a34842fc306a05e1</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a10f07a506ae69041585cc0f0f91112fb</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a34745308dea5d968375b166aea1a52d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a418baca5fbe631c1421b875aac750eaf</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7cc5b5498520775cd9e2a3ca078282e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a07ff2910f3958b90d203ca19b4efcb9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, bool &gt;::type</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a8d8be4390f048b56572a94ae749095d3</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a10e27f2493bf2f3ecc6484e57dc516c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ad950c3bd413b788a395255d2295dae2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4897da1d3640a9acef732b303e811165</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a6bd84da66d3b2074cf5e643ce16c7728</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>adbf03a49dd4b5aeb79a088b55681e2ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a06207124b4d1cfd9f5821e7c8d731e91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7f8e1e6d400da03a476d85ea864e08ae</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aacab4eccd8348c9210b04716d93abcb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a82bd2647fbe0efd4ea75d267fd6c57e4</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a064b1ae7199c822ee03b99f0b4cc766a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a23778eb23d91813c921cd5d9f024e8b6</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>adda67d5b79b3a9e6f15087609f886c77</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Expr &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ad94614fb41d499d2fc6d2ed1a48af378</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a3f4ae96221692602b20cdb5799fae603</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a61e9f39b16fa322eecc278e80982b874</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aa501bfb64799e4a4d67bf7e0f546a668</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a198c75d2e660af44089e7d44bf3e4821</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af1765e9fac2702ca72eea0a0c6fa84eb</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af84222ba0427b3a45d969102e379c7e2</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a305db6bb3abd6aadf7b77984fe4b385f</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af98e9002766cd09d0bd320645304c423</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a17818ea5808abf4c9fd4154704a1b177</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>dx_</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af2976cbd2e7cbd1cadbe91b6b7d845fb</anchor>
      <arglist>[Num]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4e73a7edc1fc8b2e94366fa93e30b314</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a411a343eae27290497b42ec00e9d63f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4aeb6b45f236fdb7c353dc58ea7e33f3</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a5be1f9681d56e9bd76af966460516a14</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a09fce8a130c032593203901f1e648f9f</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4bbd281013398259bc46f042432b13ce</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a814d704a0ea424c959e702bbd2b94ae2</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4398fc88f4aa6851dfe01b0e7665537c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>accec918b162dee6a79fab21304cd8aa3</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab4e3aa577b6ac329a34842fc306a05e1</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a10f07a506ae69041585cc0f0f91112fb</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a34745308dea5d968375b166aea1a52d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a418baca5fbe631c1421b875aac750eaf</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7cc5b5498520775cd9e2a3ca078282e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a07ff2910f3958b90d203ca19b4efcb9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, bool &gt;::type</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a8d8be4390f048b56572a94ae749095d3</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a10e27f2493bf2f3ecc6484e57dc516c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ad950c3bd413b788a395255d2295dae2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4897da1d3640a9acef732b303e811165</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a6bd84da66d3b2074cf5e643ce16c7728</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>adbf03a49dd4b5aeb79a088b55681e2ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a06207124b4d1cfd9f5821e7c8d731e91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7f8e1e6d400da03a476d85ea864e08ae</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aacab4eccd8348c9210b04716d93abcb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a82bd2647fbe0efd4ea75d267fd6c57e4</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a064b1ae7199c822ee03b99f0b4cc766a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a23778eb23d91813c921cd5d9f024e8b6</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>adda67d5b79b3a9e6f15087609f886c77</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Expr &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ad94614fb41d499d2fc6d2ed1a48af378</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a3f4ae96221692602b20cdb5799fae603</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a61e9f39b16fa322eecc278e80982b874</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aa501bfb64799e4a4d67bf7e0f546a668</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a198c75d2e660af44089e7d44bf3e4821</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af1765e9fac2702ca72eea0a0c6fa84eb</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af84222ba0427b3a45d969102e379c7e2</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a305db6bb3abd6aadf7b77984fe4b385f</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af98e9002766cd09d0bd320645304c423</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a17818ea5808abf4c9fd4154704a1b177</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <class kind="struct">Sacado::ELRFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;::LocalAccumOp</class>
    <member kind="typedef">
      <type>RemoveConst&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a39d6f6261630b92e4958826cf6e3c148</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab0a5e26336687eb1a730b4fd4b12ce0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SFad&lt; value_type, Num &gt;</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a0dfa00e993fedbe595e89a5aaaee8143</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a65e11b33bd859c95eecdb75394ae9168</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a8d9b8526eecc887e282130f0583e1ac6</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a6d4b3508f6c52f257a808b95a95dd898</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a8b9915bf91ecfbf8bd2e6811ec646413</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7d3f806f656e6013a322fe57b812dc7b</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a69f93072ec44b9db6b7595003ef84571</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae06070f43ca22e3221e3ca8b6dc8c9fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a83d5b2c8e35ac3a6c69afbcc869258cf</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>afec081942b25d6eb86cb7dc3785c7d32</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac4abbec4b2867c6f98cce199521c1280</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a126d2e918ea9cfbbb1a52dbb98a2ff2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7272739dbd644be2769d639fa80008d0</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ad01f66a293f2a705f4b39dd1ed558275</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, bool &gt;::type</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac2e67852ca90db2ee5aa447fcc4f5372</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae6fb391ba37883cf9aa64dfeb973336d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aa30d4806109de63f622526cc1d97501b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a533de8de5aa88165660e6bff36500bd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a3f79cc4a9f2fa58c8c4141dffc17b1e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4a7e61879645bf9ad73d8a222b8c5c71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a50dcc5f819991288e031e9443ff1d4ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7d45f105bcda58f6d58c22ec5dfe6f1e</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a581c861f286a383173930019cf9c5d3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af32dc861bd1bb27020eea66fedd2c591</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac8a02aaf17eabdbebc470695049bc1c2</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aab147e00086f97224296ecd95ec37a9a</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>acfc6e8e5a598006173a9b22a9aae3e56</anchor>
      <arglist>(const T &amp;bar, value_type partials[]) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a1c96eda85b52683b9441ae1f70764b52</anchor>
      <arglist>(int i, value_type dots[]) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae318064e3f3dd63ae6a6783c39b5e883</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a6e7cae51a0ae8e2654b42fef8fd577fc</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>getDx</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aeb5c83137d3ddb13e42b970c51efa368</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a593fee05a5e66f228598875cc9559676</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Expr &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4254ab1e61dd8bb46f7e6fc9c63cebd3</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a48107a43b0420c791f36acb9f9b29d64</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a5131234f4ed35ed7806213189bd33023</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a52ad0abca1ec9d31d4836ab916eae6cd</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a180213b70aebe44c98a1d05f286c5fcd</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a1f87aa093f1ef4e4cdf704922a4eb08c</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab26b8bc3037b55d72aec5a3205591d8e</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a045865e74902e11baed4aa5fb852c02f</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab0ea7f4ae707b6eb02e7a30e5d9c5d6c</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ad8059976ee3fbccd51cf93ff74480b03</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>num_args</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aa8e1f1322323cd3a64322b4dacbb725c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_linear</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a13dfd1300856678668ad31420aa07260</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>dx_</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aa24718cd2c9358f87645afcfa363e2a4</anchor>
      <arglist>[Num]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7f78e17e3ad4954951582c6b6a329244</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a65e11b33bd859c95eecdb75394ae9168</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a8d9b8526eecc887e282130f0583e1ac6</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a6d4b3508f6c52f257a808b95a95dd898</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a8b9915bf91ecfbf8bd2e6811ec646413</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7d3f806f656e6013a322fe57b812dc7b</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a69f93072ec44b9db6b7595003ef84571</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae06070f43ca22e3221e3ca8b6dc8c9fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a83d5b2c8e35ac3a6c69afbcc869258cf</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>afec081942b25d6eb86cb7dc3785c7d32</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac4abbec4b2867c6f98cce199521c1280</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a126d2e918ea9cfbbb1a52dbb98a2ff2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7272739dbd644be2769d639fa80008d0</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ad01f66a293f2a705f4b39dd1ed558275</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, bool &gt;::type</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac2e67852ca90db2ee5aa447fcc4f5372</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae6fb391ba37883cf9aa64dfeb973336d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aa30d4806109de63f622526cc1d97501b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a533de8de5aa88165660e6bff36500bd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a3f79cc4a9f2fa58c8c4141dffc17b1e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4a7e61879645bf9ad73d8a222b8c5c71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a50dcc5f819991288e031e9443ff1d4ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7d45f105bcda58f6d58c22ec5dfe6f1e</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a581c861f286a383173930019cf9c5d3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af32dc861bd1bb27020eea66fedd2c591</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac8a02aaf17eabdbebc470695049bc1c2</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aab147e00086f97224296ecd95ec37a9a</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>acfc6e8e5a598006173a9b22a9aae3e56</anchor>
      <arglist>(const T &amp;bar, value_type partials[]) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a1c96eda85b52683b9441ae1f70764b52</anchor>
      <arglist>(int i, value_type dots[]) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae318064e3f3dd63ae6a6783c39b5e883</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a6e7cae51a0ae8e2654b42fef8fd577fc</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>getDx</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aeb5c83137d3ddb13e42b970c51efa368</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a593fee05a5e66f228598875cc9559676</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Expr &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4254ab1e61dd8bb46f7e6fc9c63cebd3</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a48107a43b0420c791f36acb9f9b29d64</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a5131234f4ed35ed7806213189bd33023</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a52ad0abca1ec9d31d4836ab916eae6cd</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a180213b70aebe44c98a1d05f286c5fcd</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a1f87aa093f1ef4e4cdf704922a4eb08c</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab26b8bc3037b55d72aec5a3205591d8e</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a045865e74902e11baed4aa5fb852c02f</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab0ea7f4ae707b6eb02e7a30e5d9c5d6c</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ad8059976ee3fbccd51cf93ff74480b03</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <class kind="struct">Sacado::ELRCacheFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;::LocalAccumOp</class>
    <member kind="typedef">
      <type>RemoveConst&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a1e95223106fce2cadee0064688d1e5f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af343bbe73d81f5b693bde27c251be1e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SFad&lt; value_type, Num &gt;</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4717af9596344f948ca371d762effb3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae44f073328971cd3cdb5531cec97055a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac5ee55e6dd08ee3fa2f87e2452f3b5ff</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aae4ee8cb6dae053b836efb50a7343915</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aa1197c6488e924638cac9c93b418e420</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aaf52473b2cf68def84a6f2d08e9b2df0</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a15e408e96b2e2b3fd312e81d42d16df6</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>acdc64367f979536213ec06d298f0e3ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a299369ddd04cef547e7271d1b800a14b</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab4aff3e297e5427e8b8a0257cae57dd3</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a3610472b9c077b5e6ff1e690536d1eca</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae93c7e28c0d36e7cdd4997628c83c9b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab29ebde61189eaa6bed0eec09168aa7f</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a9dea716bb302f823d5fe80f4df870168</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>abcfe5ea21d7d9ddfccef532f5104c9e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, bool &gt;::type</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7b35b7aca511f5d09a1e27131997e864</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a8249cb8a84657e2f8a9482eb17818f76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aee0d87312620688b8c9d79416143da3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a6eac34ce6794889b250e94aa773fa7c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac286e23040e3ab5abe658cfb5fe85660</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a1fd49194147e8f550e634c17c8d2f919</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae11cb47d3b79154ef2da29eaa32f264b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac569da71a104905914eec0290e2becf3</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aeae401b35b59de1945948fd1285dd6b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a5a904c93e50bbdf0d25c2fe8a01093e9</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aa26ccb3e300f383ce88e640ac5a6576b</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aee0cdd9c382e67347e9288598e38455b</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af70231c456fd0baa2ea430b3e57aa83f</anchor>
      <arglist>(const T &amp;bar, value_type partials[]) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7debcb17cd7e71e08497475244fdd42b</anchor>
      <arglist>(int i, value_type dots[]) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a5ce44717e00e8d94fef661f7b0812cb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a92bf3c80d7a39fd5492ee9f2f9df4b6d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>getDx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>acc03c51e8c94aa57c07ee198075996f0</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a200dabca2263d14f3a82ebe7f51e99d2</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Expr &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af463c92bd72f42148d1373e7cd81b252</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aa6e496478589879ff691ecfaddbdcb88</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a38508b896621af1e07c2d1c85fa038df</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a89a4210b17460bd7b6ad24c829e01e4d</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae628f864946b4afd5eadb100b8be390c</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>abec2b51bc44f26a6da3de6c2848c512c</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aeb31a46ff113e0a02372fb3b0756bfe5</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a322de39de82fedbbd70e902473bb5495</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a712efa8d20f002c63641d6ccb00d5676</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aeedc78352395e45dadbe4f5a2bf023b9</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>num_args</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>acc85ea2938657ffc803006ace21c2aa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_linear</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a230f891d0b38d40f3ae26090cf696734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>dx_</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4ee288e373e0da0745ac381021b2e51e</anchor>
      <arglist>[Num]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a6438d6af8320e15402c344d5f861937e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae44f073328971cd3cdb5531cec97055a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac5ee55e6dd08ee3fa2f87e2452f3b5ff</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aae4ee8cb6dae053b836efb50a7343915</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aa1197c6488e924638cac9c93b418e420</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aaf52473b2cf68def84a6f2d08e9b2df0</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a15e408e96b2e2b3fd312e81d42d16df6</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>acdc64367f979536213ec06d298f0e3ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a299369ddd04cef547e7271d1b800a14b</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab4aff3e297e5427e8b8a0257cae57dd3</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a3610472b9c077b5e6ff1e690536d1eca</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae93c7e28c0d36e7cdd4997628c83c9b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab29ebde61189eaa6bed0eec09168aa7f</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a9dea716bb302f823d5fe80f4df870168</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>abcfe5ea21d7d9ddfccef532f5104c9e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, bool &gt;::type</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7b35b7aca511f5d09a1e27131997e864</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a8249cb8a84657e2f8a9482eb17818f76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aee0d87312620688b8c9d79416143da3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a6eac34ce6794889b250e94aa773fa7c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac286e23040e3ab5abe658cfb5fe85660</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a1fd49194147e8f550e634c17c8d2f919</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae11cb47d3b79154ef2da29eaa32f264b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac569da71a104905914eec0290e2becf3</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aeae401b35b59de1945948fd1285dd6b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a5a904c93e50bbdf0d25c2fe8a01093e9</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aa26ccb3e300f383ce88e640ac5a6576b</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aee0cdd9c382e67347e9288598e38455b</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af70231c456fd0baa2ea430b3e57aa83f</anchor>
      <arglist>(const T &amp;bar, value_type partials[]) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7debcb17cd7e71e08497475244fdd42b</anchor>
      <arglist>(int i, value_type dots[]) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a5ce44717e00e8d94fef661f7b0812cb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a92bf3c80d7a39fd5492ee9f2f9df4b6d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>getDx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>acc03c51e8c94aa57c07ee198075996f0</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a200dabca2263d14f3a82ebe7f51e99d2</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Expr &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af463c92bd72f42148d1373e7cd81b252</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aa6e496478589879ff691ecfaddbdcb88</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a38508b896621af1e07c2d1c85fa038df</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a89a4210b17460bd7b6ad24c829e01e4d</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae628f864946b4afd5eadb100b8be390c</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>abec2b51bc44f26a6da3de6c2848c512c</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aeb31a46ff113e0a02372fb3b0756bfe5</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a322de39de82fedbbd70e902473bb5495</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a712efa8d20f002c63641d6ccb00d5676</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aeedc78352395e45dadbe4f5a2bf023b9</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt; SFadExprTag&lt; T, Num &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>RemoveConst&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a0230bd245ef6a57949d3e4f3245fbeb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a750244e133a0c13a2e1b72abfdade852</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SFad&lt; value_type, Num &gt;</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a75b799e953c39374d4c42dccabac3d9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a20d494fa331b7ca366934f7a924db18e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a6c27189aac043746861251dbec301907</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>adb7fbb688552960f2301a7166e8316bd</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a7dd3337a311bc326792bf6c2e7d92637</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a977cfc216c9ca18b43770509902c9a32</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a3595282e4d8bba36f08479b308e8898f</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a5dcdc6e3346a2876511df799ebea3ae5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a2fc7125762bb8eab0f59a77aa60fb6ac</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a6062fea1a4d7c8cc5f8f71cf9dacfe9c</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a475034713fa70a5c1e98e973112c2dbb</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>aceeb5d40919365e480c7d7a59038997e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a112dfb10eb8db3cfe71b7e7b362df4ac</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>afa9f2379f916aa91bef13a34f12c1077</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, bool &gt;::type</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>aa7b20b0f2715a5b9b8b113ae2fb6727d</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>add3d20acdac06e7e15c1419660b82a74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a609b94af7654f8bebdbb61f9c2747ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>adb1655c0b36be0bb83a0ca8db044a9b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>afbc09e68b3d2c738a1d84ba3192c8a05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>ac81e66b9a385167a6642e995218def9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a17bcd4aa0dbf950948c57e62f490ab4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>acbba47d7b17ee824cc1375e3983392c0</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>ae97c983d8602926d095229b330ec1d4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>aa8e521d487b2d307a57e072f67ed33b9</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>adb8f6ece9b326a9abf7f0677d0c49790</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>ab2c852c1dcfdbd1b15d9b19f1156f0eb</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a568bcd2936a5d68dae1a384a728d2736</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Expr &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>aacbac95095514735ee237fd4ed4420ed</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a174596d584a974912097d3113a463efe</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a80b57e5d36a78cd7e96b7f882225277e</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>ae8fda38943bcd6cf62b28b5cf984e2dd</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a026df1f84ec09874f155d4e7f67e8df7</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>ab186b92f57437dc7310c5eea8ce5869b</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a0e36c7f472ec47d958a46feafb4d3027</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>aef8920d16c898885c35a60706a86dc7c</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a5b14bba8fafcbb505f1c9957b4786251</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a0f3447268a5101e172283fdf1174ca72</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>dx_</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>af4a51178a0789a6ac2d2edf2dcc904e4</anchor>
      <arglist>[Num]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a78f4700a60d3ccf89a54030771e8cf01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a20d494fa331b7ca366934f7a924db18e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a6c27189aac043746861251dbec301907</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>adb7fbb688552960f2301a7166e8316bd</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a7dd3337a311bc326792bf6c2e7d92637</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a977cfc216c9ca18b43770509902c9a32</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a3595282e4d8bba36f08479b308e8898f</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a5dcdc6e3346a2876511df799ebea3ae5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a2fc7125762bb8eab0f59a77aa60fb6ac</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a6062fea1a4d7c8cc5f8f71cf9dacfe9c</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a475034713fa70a5c1e98e973112c2dbb</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>aceeb5d40919365e480c7d7a59038997e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a112dfb10eb8db3cfe71b7e7b362df4ac</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>afa9f2379f916aa91bef13a34f12c1077</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, bool &gt;::type</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>aa7b20b0f2715a5b9b8b113ae2fb6727d</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>add3d20acdac06e7e15c1419660b82a74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a609b94af7654f8bebdbb61f9c2747ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>adb1655c0b36be0bb83a0ca8db044a9b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>afbc09e68b3d2c738a1d84ba3192c8a05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>ac81e66b9a385167a6642e995218def9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a17bcd4aa0dbf950948c57e62f490ab4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>acbba47d7b17ee824cc1375e3983392c0</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>ae97c983d8602926d095229b330ec1d4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>aa8e521d487b2d307a57e072f67ed33b9</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>adb8f6ece9b326a9abf7f0677d0c49790</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>ab2c852c1dcfdbd1b15d9b19f1156f0eb</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a568bcd2936a5d68dae1a384a728d2736</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Expr &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>aacbac95095514735ee237fd4ed4420ed</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a174596d584a974912097d3113a463efe</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a80b57e5d36a78cd7e96b7f882225277e</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>ae8fda38943bcd6cf62b28b5cf984e2dd</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a026df1f84ec09874f155d4e7f67e8df7</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, Expr &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>ab186b92f57437dc7310c5eea8ce5869b</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a0e36c7f472ec47d958a46feafb4d3027</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>aef8920d16c898885c35a60706a86dc7c</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a5b14bba8fafcbb505f1c9957b4786251</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, Expr &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a0f3447268a5101e172283fdf1174ca72</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; SubtractionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01SubtractionOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; SubtractionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01SubtractionOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; SubtractionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01SubtractionOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; SubtractionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01SubtractionOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; SubtractionOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01SubtractionOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; SubtractionOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01SubtractionOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; UnaryMinusOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; UnaryMinusOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; UnaryPlusOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; UnaryPlusOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::ExprConstRef</name>
    <filename>structSacado_1_1ELRCacheFad_1_1ExprConstRef.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::ExprConstRef</name>
    <filename>structSacado_1_1ELRFad_1_1ExprConstRef.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::ExprConstRef&lt; ConstExpr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ELRCacheFad_1_1ExprConstRef_3_01ConstExpr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::ExprConstRef&lt; ConstExpr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ELRFad_1_1ExprConstRef_3_01ConstExpr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>ExprConstRef&lt; ExprT1 &gt;</name>
    <filename>structSacado_1_1ELRFad_1_1ExprConstRef.html</filename>
  </compound>
  <compound kind="class">
    <name>ExprConstRef&lt; ExprT2 &gt;</name>
    <filename>structSacado_1_1ELRFad_1_1ExprConstRef.html</filename>
  </compound>
  <compound kind="class">
    <name>ExprConstRef&lt; Sacado::ELRFad::ConstExpr &gt;</name>
    <filename>structSacado_1_1ELRFad_1_1ExprConstRef.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::ExprLevel</name>
    <filename>structSacado_1_1ELRCacheFad_1_1ExprLevel.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::CacheFad::ExprLevel</name>
    <filename>structSacado_1_1CacheFad_1_1ExprLevel.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprLevel</name>
    <filename>structSacado_1_1Fad_1_1ExprLevel.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::LFad::ExprLevel</name>
    <filename>structSacado_1_1LFad_1_1ExprLevel.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::ExprLevel</name>
    <filename>structSacado_1_1ELRFad_1_1ExprLevel.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::ExprLevel&lt; DFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1ExprLevel_3_01DFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprLevel&lt; DMFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprLevel_3_01DMFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprLevel&lt; DVFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprLevel_3_01DVFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ELRCacheFad_1_1ExprLevel_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::CacheFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1CacheFad_1_1ExprLevel_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprLevel&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprLevel_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::LFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1LFad_1_1ExprLevel_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ELRFad_1_1ExprLevel_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::LFad::ExprLevel&lt; LogicalSparse&lt; T, L &gt; &gt;</name>
    <filename>structSacado_1_1LFad_1_1ExprLevel_3_01LogicalSparse_3_01T_00_01L_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::ExprLevel&lt; SFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1ExprLevel_3_01SFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::ExprLevel&lt; SLFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1ExprLevel_3_01SLFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::ExprLevel&lt; ViewFad&lt; T, l, s, U &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1ExprLevel_3_01ViewFad_3_01T_00_01l_00_01s_00_01U_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>l</templarg>
    <templarg>s</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  AbsOp&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01AbsOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  ACoshOp&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01ACoshOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  ACosOp&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01ACosOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  AdditionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01AdditionOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  AdditionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01AdditionOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  AdditionOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01AdditionOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  ASinhOp&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01ASinhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  ASinOp&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01ASinOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  Atan2Op&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01Atan2Op_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  Atan2Op&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01Atan2Op_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  Atan2Op&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01Atan2Op_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  ATanhOp&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01ATanhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  ATanOp&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01ATanOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  CoshOp&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01CoshOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  CosOp&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01CosOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  DivisionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01DivisionOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  DivisionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01DivisionOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  DivisionOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01DivisionOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  ExpOp&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01ExpOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  FAbsOp&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01FAbsOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  Log10Op&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01Log10Op_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  LogOp&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01LogOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  MaxOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01MaxOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  MaxOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01MaxOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  MaxOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01MaxOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  MinOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01MinOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  MinOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01MinOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  MinOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01MinOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  PowerOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01PowerOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  PowerOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01PowerOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  PowerOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01PowerOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  SinhOp&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01SinhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  SinOp&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01SinOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  SqrtOp&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01SqrtOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  SubtractionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01SubtractionOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  SubtractionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01SubtractionOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  SubtractionOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01SubtractionOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  TanhOp&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01TanhOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  TanOp&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01TanOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  UnaryMinusOp&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt;  UnaryPlusOp&lt; ExprT &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt; Expr&lt; ExprT, Spec &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01Expr_3_01ExprT_00_01Spec_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt; MultiplicationOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01MultiplicationOp_3_01ConstExpr_3_01T1_01_4_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt; MultiplicationOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01MultiplicationOp_3_01ExprT1_00_01ConstExpr_3_01T2_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt; MultiplicationOp&lt; ExprT1, ExprT2 &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01MultiplicationOp_3_01ExprT1_00_01ExprT2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpecDefault</name>
    <filename>structSacado_1_1Fad_1_1ExprSpecDefault.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::FAbsOp</name>
    <filename>classSacado_1_1ELRFad_1_1FAbsOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::FAbsOp</name>
    <filename>classSacado_1_1Tay_1_1FAbsOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::FAbsOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1FAbsOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::FAbsOp</name>
    <filename>classSacado_1_1Fad_1_1FAbsOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::FAbsOp</name>
    <filename>classSacado_1_1CacheFad_1_1FAbsOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::FAbsOp</name>
    <filename>classSacado_1_1LFad_1_1FAbsOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Fad_LAPACK</name>
    <filename>classSacado_1_1Fad_1_1Fad__LAPACK.html</filename>
    <templarg>OrdinalType</templarg>
    <templarg>FadType</templarg>
    <member kind="function">
      <type>void</type>
      <name>GESV</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a6dfea5d52e569a1ee7c6c1aac0e9a620</anchor>
      <arglist>(const OrdinalType n, const OrdinalType nrhs, FadType *A, const OrdinalType lda, OrdinalType *IPIV, FadType *B, const OrdinalType ldb, OrdinalType *info) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fad_LAPACK</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a32a799025c9c08db21d65269d13fa207</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fad_LAPACK</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a94ecc4d67e2c69c5b3446b4fddfd22d7</anchor>
      <arglist>(const Fad_LAPACK &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Fad_LAPACK</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>ada95f4905eeb679fa2e2cd569d3d74b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GESV</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>ab06a83f8b9d216132510e5f19f343cac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArrayTraits&lt; OrdinalType, FadType &gt;</type>
      <name>arrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>aa649b0e1b28e1fad2ff4580e585fd04a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::LAPACK&lt; OrdinalType, ValueType &gt;</type>
      <name>lapack</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a7533db0c412ac491a032d1eda0c5a9bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_default_impl</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a7a511f116ad21ff554aac14dce0555fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fad_LAPACK</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a32a799025c9c08db21d65269d13fa207</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fad_LAPACK</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a94ecc4d67e2c69c5b3446b4fddfd22d7</anchor>
      <arglist>(const Fad_LAPACK &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Fad_LAPACK</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>ada95f4905eeb679fa2e2cd569d3d74b7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Fad_LAPACK&lt; OrdinalType, Sacado::Fad::DFad&lt; ScalarType &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1Fad__LAPACK.html</filename>
    <member kind="function">
      <type>void</type>
      <name>GESV</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a6dfea5d52e569a1ee7c6c1aac0e9a620</anchor>
      <arglist>(const OrdinalType n, const OrdinalType nrhs, Sacado::Fad::DFad&lt; ScalarType &gt; *A, const OrdinalType lda, OrdinalType *IPIV, Sacado::Fad::DFad&lt; ScalarType &gt; *B, const OrdinalType ldb, OrdinalType *info) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fad_LAPACK</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a32a799025c9c08db21d65269d13fa207</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fad_LAPACK</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a94ecc4d67e2c69c5b3446b4fddfd22d7</anchor>
      <arglist>(const Fad_LAPACK &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Fad_LAPACK</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>ada95f4905eeb679fa2e2cd569d3d74b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GESV</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>ab06a83f8b9d216132510e5f19f343cac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArrayTraits&lt; OrdinalType, Sacado::Fad::DFad&lt; ScalarType &gt; &gt;</type>
      <name>arrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>aa649b0e1b28e1fad2ff4580e585fd04a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::LAPACK&lt; OrdinalType, ValueType &gt;</type>
      <name>lapack</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a7533db0c412ac491a032d1eda0c5a9bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_default_impl</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a7a511f116ad21ff554aac14dce0555fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fad_LAPACK</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a32a799025c9c08db21d65269d13fa207</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fad_LAPACK</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a94ecc4d67e2c69c5b3446b4fddfd22d7</anchor>
      <arglist>(const Fad_LAPACK &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Fad_LAPACK</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>ada95f4905eeb679fa2e2cd569d3d74b7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::GeneralFad::FastLocalAccumOp</name>
    <filename>structSacado_1_1ELRCacheFad_1_1GeneralFad_1_1FastLocalAccumOp.html</filename>
    <templarg>ExprT</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::GeneralFad::FastLocalAccumOp</name>
    <filename>structSacado_1_1ELRFad_1_1GeneralFad_1_1FastLocalAccumOp.html</filename>
    <templarg>ExprT</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::find</name>
    <filename>structSacado_1_1mpl_1_1find.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::find&lt; Seq, T, Iter1, Iter1 &gt;</name>
    <filename>structSacado_1_1mpl_1_1find_3_01Seq_00_01T_00_01Iter1_00_01Iter1_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::FlopCounterPack::FlopCounts</name>
    <filename>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>EFlopType</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ESummaryFlopType</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>aea590d7f1d682d7ad59425ba7902b09d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlopCounts</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>a2af4af5fe39c6e9b5e30dc779cb37f70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>a17d4ee0ab77dff25da791c1863eed972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>a1df5cf49ae52c505fb55af5e3ebe5d78</anchor>
      <arglist>(EFlopType ft)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>flopCounts</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>a17178bb354860be4e1f3f77d658c609d</anchor>
      <arglist>[NUM_OPS]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>summaryFlopCounts</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>a386354d6bcdcd4d598c5dc761b0c4246</anchor>
      <arglist>[NUM_SUMMARY_OPS]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>totalFlopCount</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>adcad729b5363c66856611afea86ce3f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>flopCountsNames</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>ab238e05eca7695250766e95ab8ea99cc</anchor>
      <arglist>[NUM_OPS]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>summaryFlopCountsNames</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>a896049003b980721899319c374f69d95</anchor>
      <arglist>[NUM_SUMMARY_OPS]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static unsigned int</type>
      <name>flopGranularity</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>a0b78d29a762842fc89c12377baed84c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::for_each</name>
    <filename>structSacado_1_1mpl_1_1for__each.html</filename>
    <templarg>Seq</templarg>
    <templarg>Iter1</templarg>
    <templarg>Iter2</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::for_each&lt; Seq, Iter1, Iter1 &gt;</name>
    <filename>structSacado_1_1mpl_1_1for__each_3_01Seq_00_01Iter1_00_01Iter1_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::for_each_no_kokkos</name>
    <filename>structSacado_1_1mpl_1_1for__each__no__kokkos.html</filename>
    <templarg>Seq</templarg>
    <templarg>Iter1</templarg>
    <templarg>Iter2</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::for_each_no_kokkos&lt; Seq, Iter1, Iter1 &gt;</name>
    <filename>structSacado_1_1mpl_1_1for__each__no__kokkos_3_01Seq_00_01Iter1_00_01Iter1_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::Found</name>
    <filename>structSacado_1_1mpl_1_1Found.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::GeneralFad</name>
    <filename>classSacado_1_1Fad_1_1GeneralFad.html</filename>
    <templarg>T</templarg>
    <templarg>Storage</templarg>
    <member kind="typedef">
      <type>RemoveConst&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a02dd8babc9dba28ea0f7d450ad4c66c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ae0dd714c57e8311221add959935869e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a9c18f21da3c1bd412871a7d14c10d63e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ad6d383ab66cba06250dad55810d3ee52</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>af6d22ef8d9e2551bd2b9a6c6962bc32d</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aa3dec190327249af93ec2fa92110e27a</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aae2df8fc86e6a4c8709a961522271de7</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a67a09a3c061d49fe9c34480af20372b1</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>adc3c10e1cb5e64802463fbc35ab0612b</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a6ab99e98fffd6b85fee45865bfc3e7fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a116ffb051ab399dd108843330b303366</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a15bc52a94ab998ce9435eb1f7a71323b</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a825bf0d609ea8a3ac26af67193b128c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, bool &gt;::type</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a3d66713e60971bba7be8684708ac313c</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a20dac78b74159085a30b849756970221</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a8f56071102fdbbc1def58c6acb4cacfb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a308f0592e7f2890cde8da2b55fa0fc41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a61a1ac39e196829328f9caf3f9976c08</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a21702df106caa2dd9399c79a9c5dbb2b</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a001f828e70695ba8c6ba08fd6b03c8d4</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aca9e08234c5e3a634204bef7440d70b4</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>af338157eee92f6563b50b12fa7e9e7d0</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ae455106d04f2fb3a6bf8163de805ef36</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a290e983a05f4bfc35c082f1291d330ae</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a013ea3a54a237496a41d5658cbd8a4d3</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aee07d9bef5027bb2736825322c045e50</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ab0f7dd7a434c7e263d0b1d8e443ef504</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a8dc27fb9b6f1760c2fbd5b26b2ea5af5</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a54e1561f1d306912926f72e70c04819a</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a9c7cf14ed45ae6776ce1cbb01b581593</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aef76624db18bb21100f899211f6c4609</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a08783ba6e8dec56393fd14f68b489255</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ab3a39c64ddd9e43e5687ab09046d8f98</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a9c18f21da3c1bd412871a7d14c10d63e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ad6d383ab66cba06250dad55810d3ee52</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>af6d22ef8d9e2551bd2b9a6c6962bc32d</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aa3dec190327249af93ec2fa92110e27a</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aae2df8fc86e6a4c8709a961522271de7</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a67a09a3c061d49fe9c34480af20372b1</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>adc3c10e1cb5e64802463fbc35ab0612b</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a6ab99e98fffd6b85fee45865bfc3e7fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a116ffb051ab399dd108843330b303366</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a15bc52a94ab998ce9435eb1f7a71323b</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a825bf0d609ea8a3ac26af67193b128c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, bool &gt;::type</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a3d66713e60971bba7be8684708ac313c</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a20dac78b74159085a30b849756970221</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a8f56071102fdbbc1def58c6acb4cacfb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a308f0592e7f2890cde8da2b55fa0fc41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a61a1ac39e196829328f9caf3f9976c08</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a21702df106caa2dd9399c79a9c5dbb2b</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a001f828e70695ba8c6ba08fd6b03c8d4</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aca9e08234c5e3a634204bef7440d70b4</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>af338157eee92f6563b50b12fa7e9e7d0</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ae455106d04f2fb3a6bf8163de805ef36</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a290e983a05f4bfc35c082f1291d330ae</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a013ea3a54a237496a41d5658cbd8a4d3</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aee07d9bef5027bb2736825322c045e50</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ab0f7dd7a434c7e263d0b1d8e443ef504</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a8dc27fb9b6f1760c2fbd5b26b2ea5af5</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a54e1561f1d306912926f72e70c04819a</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a9c7cf14ed45ae6776ce1cbb01b581593</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aef76624db18bb21100f899211f6c4609</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a08783ba6e8dec56393fd14f68b489255</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ab3a39c64ddd9e43e5687ab09046d8f98</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::GeneralFad</name>
    <filename>classSacado_1_1CacheFad_1_1GeneralFad.html</filename>
    <templarg>T</templarg>
    <templarg>Storage</templarg>
    <member kind="typedef">
      <type>RemoveConst&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a945c52d6457d8b96606610ac63e5f020</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ace51eab839116b9674cc69497cb3654d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a3a482d1b872fda09412c165c5f9e8005</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a45bfacbec3a4d545ad22f40796139d17</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>aba33b71ab1e0c17933ab3fee606495eb</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a7a413dd2d64800520495ae1b13a8b45a</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ac5dd3a66c5821c025c7a9f5c0856ced7</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a0fd8bf7b44c9ece5cd62f11d3a161b8e</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ab01814cfaccffedd8b716b62ad7a53f1</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a4a20ef4928ffcebe2c9afac89ddb44a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a7579941b3d8ef2708eae2fb85709ed35</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a84abbb280f6a9dc7e27a098e42237de5</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a887736517518b14ee4e724589d409f8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>afc6c9f6d90c0cf19199299340e48ee87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, bool &gt;::type</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>abbc95025215b289df6a148d5012f2086</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ad6426bee706e8006807ca3ada10ab798</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a733b406b3b30799b8e5cad28ab760922</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a28839ef10217363780785510ed3d2221</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>af5ce964b0b20236588d21418eb85e8c2</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a09072e89582eab5a79526fe930bfe9fd</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a0e4367e42dd9501755664ed98dbba554</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a784daa096c200a249fd967a37d779c0a</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a8dd1688ceb1dfacc6f4a3de5cc15e04b</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a10f37f2adf6e0570df6a389ccf1ef13d</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a2081875c6fad189fc39587c0c7e6f6cd</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a973fbfb948ca891636e0e18108a311b9</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ac182e1c6d62fb388ffa056a77128e475</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a7d1f7a9cb6238e4a16c7e07c2e0a6ff0</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a222c2b0afb8ebed96755d4fb6ca9421d</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>aa3999cd1810a1abd803d3bbc5a76ba48</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a7056dd0fee4a6ae781a21896553df9c5</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a8052013014cdd71ea5048be456cb1d3f</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>aa5a2ec05b2e0f8bbc293097c6157fbf0</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a28878f133f06d25c589d147bd714938b</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a3a482d1b872fda09412c165c5f9e8005</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a45bfacbec3a4d545ad22f40796139d17</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>aba33b71ab1e0c17933ab3fee606495eb</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a7a413dd2d64800520495ae1b13a8b45a</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ac5dd3a66c5821c025c7a9f5c0856ced7</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a0fd8bf7b44c9ece5cd62f11d3a161b8e</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ab01814cfaccffedd8b716b62ad7a53f1</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a4a20ef4928ffcebe2c9afac89ddb44a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a7579941b3d8ef2708eae2fb85709ed35</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a84abbb280f6a9dc7e27a098e42237de5</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a887736517518b14ee4e724589d409f8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>afc6c9f6d90c0cf19199299340e48ee87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, bool &gt;::type</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>abbc95025215b289df6a148d5012f2086</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ad6426bee706e8006807ca3ada10ab798</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a733b406b3b30799b8e5cad28ab760922</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a28839ef10217363780785510ed3d2221</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>af5ce964b0b20236588d21418eb85e8c2</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a09072e89582eab5a79526fe930bfe9fd</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a0e4367e42dd9501755664ed98dbba554</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a784daa096c200a249fd967a37d779c0a</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a8dd1688ceb1dfacc6f4a3de5cc15e04b</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a10f37f2adf6e0570df6a389ccf1ef13d</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a2081875c6fad189fc39587c0c7e6f6cd</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a973fbfb948ca891636e0e18108a311b9</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ac182e1c6d62fb388ffa056a77128e475</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a7d1f7a9cb6238e4a16c7e07c2e0a6ff0</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a222c2b0afb8ebed96755d4fb6ca9421d</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>aa3999cd1810a1abd803d3bbc5a76ba48</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a7056dd0fee4a6ae781a21896553df9c5</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a8052013014cdd71ea5048be456cb1d3f</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>aa5a2ec05b2e0f8bbc293097c6157fbf0</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a28878f133f06d25c589d147bd714938b</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::GeneralFad</name>
    <filename>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</filename>
    <templarg>T</templarg>
    <templarg>Storage</templarg>
    <class kind="struct">Sacado::ELRCacheFad::GeneralFad::FastLocalAccumOp</class>
    <class kind="struct">Sacado::ELRCacheFad::GeneralFad::SlowLocalAccumOp</class>
    <member kind="typedef">
      <type>RemoveConst&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a07249aea2146d8e8f9f6e2219b87ad42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a021bb79c7dc6991d1b4063294c5319c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a067e78cf457a175874f8f18ddd1d636a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a9b5e95e98a715e7a9be31c955973aefb</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>aac54d7a34d8f102ef6bb5a0ffd6a131b</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a97eae2436fca373fd9277c4bda7f684e</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ab8701ba528971b101077a41f55c17191</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a6f5c6d217a28333f9423c9973c91106a</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ab1949d6c66a907899511f8f5b53ac178</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a2f8d24b4adaffd04e23219a6c673801a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ab8f7a29d9aa9fcf52a074f916ac396fa</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a5c84d31e5891b1409852baab8912f417</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a289fe088463d1c75608e5730c146773d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a4e95751ff1d8f0358930cea7a44cbe7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, bool &gt;::type</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a837d57836ba15083247f3ee4b30ac141</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>aae7b7596d824535928393a80d815c863</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a18c14473fe995303c156d6c2c6cdbf12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a7fa78084e5b28574b7ce884c758fe295</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ab0675aa01b72d90a0501ee55fab34b2b</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a037b34a348562ef90aedd7d1c134e17a</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a860bbbb562f8b8f685534b715b7f7ce7</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a20602ebc5cf19865ef82e7a6144c379e</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a36547e4a9d58dcdea474f1b4e565463f</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a57dec95ae56124e694404a297bf483a4</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ac5c2bf4c7bd49e29b297cfa7075a1686</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>affac0e1df11ee1d71b6ef7d5fa264b62</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a5dccd1152de25a935febb3eccdc61285</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a9b17447fb2ee2957eda026846ed39b44</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a5df24f3317bbcdece7ef44dbf0606733</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>af7449cdefbc0bc9d196bb5b2c34381c9</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a9f2044c8ea7bffa7d6568053991117fa</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a4b2f2d91f0a062b070b4ab8936af587b</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a9a9365e68dc7c838fa2c5f2ed9568c92</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a59dd6908ac8748ca54d33bd25c7433e7</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a067e78cf457a175874f8f18ddd1d636a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a9b5e95e98a715e7a9be31c955973aefb</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>aac54d7a34d8f102ef6bb5a0ffd6a131b</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a97eae2436fca373fd9277c4bda7f684e</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ab8701ba528971b101077a41f55c17191</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a6f5c6d217a28333f9423c9973c91106a</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ab1949d6c66a907899511f8f5b53ac178</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a2f8d24b4adaffd04e23219a6c673801a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ab8f7a29d9aa9fcf52a074f916ac396fa</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a5c84d31e5891b1409852baab8912f417</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a289fe088463d1c75608e5730c146773d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a4e95751ff1d8f0358930cea7a44cbe7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, bool &gt;::type</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a837d57836ba15083247f3ee4b30ac141</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>aae7b7596d824535928393a80d815c863</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a18c14473fe995303c156d6c2c6cdbf12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a7fa78084e5b28574b7ce884c758fe295</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ab0675aa01b72d90a0501ee55fab34b2b</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a037b34a348562ef90aedd7d1c134e17a</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a860bbbb562f8b8f685534b715b7f7ce7</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a20602ebc5cf19865ef82e7a6144c379e</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a36547e4a9d58dcdea474f1b4e565463f</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a57dec95ae56124e694404a297bf483a4</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ac5c2bf4c7bd49e29b297cfa7075a1686</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>affac0e1df11ee1d71b6ef7d5fa264b62</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a5dccd1152de25a935febb3eccdc61285</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a9b17447fb2ee2957eda026846ed39b44</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a5df24f3317bbcdece7ef44dbf0606733</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>af7449cdefbc0bc9d196bb5b2c34381c9</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a9f2044c8ea7bffa7d6568053991117fa</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a4b2f2d91f0a062b070b4ab8936af587b</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a9a9365e68dc7c838fa2c5f2ed9568c92</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a59dd6908ac8748ca54d33bd25c7433e7</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::GeneralFad</name>
    <filename>classSacado_1_1ELRFad_1_1GeneralFad.html</filename>
    <templarg>T</templarg>
    <templarg>Storage</templarg>
    <class kind="struct">Sacado::ELRFad::GeneralFad::FastLocalAccumOp</class>
    <class kind="struct">Sacado::ELRFad::GeneralFad::SlowLocalAccumOp</class>
    <member kind="typedef">
      <type>RemoveConst&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>aa4878e395dc4c6909ee7db1e5281518c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a55581f192a6f2a0d87e2756fb76d1a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a2c94323402796b7de77d92747088964d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a03636b532d8752778546f9228bd6d6eb</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a1fb5a65f74fb56aa213d05eb94c31400</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a44a6201a36a95273bd310d77a766a304</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a36edb267ec2cb728b5c2c02574f3ff85</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>acddaa7f95fa8b37065484abf5b112949</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>ad010ef91f3b5aea9dfde2433c79119ae</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>ae875c412bf0b3588490eec508c03bf86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a4f4b04215e075c3cafe37fffcbe7e2df</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a3fc20bbf89d866f68a804744245ba6b3</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>af986044f4ef5ee203516a1a60c2a9b74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, bool &gt;::type</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>ae9f3aea40390221b53912fe93100ef8a</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a9271ef246c1a6adf47c9a100a057358b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>aba54c8a14ea40bfbf89ca5feaf2d174c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>aaa1504aa983e079787ec97e1d514885e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a92eb91f325a832d027d37d7e544fb2b9</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a8fe7ea1435a3846dd4cb8f5a1f9384c7</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>ac1576bc0459ec9bf6b0cd3f4dcba6f4b</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>ae105883a8789f677289dd967a5ffd2bd</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>ae64184ab8202f1cf123912300ece668b</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a106303ab840eafb94b38f39647f63332</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a8c027b6d75484a044f88726506aa7eae</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a91399716c05901fc438ae1750147e011</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a69d89067f36322362bff03fb7735349d</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a85953dea94294ced96ad92e0746e6696</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a45f53ad553890a6fda168e1682ac511a</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>ac8bfbc6bfbc9dcc71a696c5e0a05adb4</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a84d251b75633d2bac475f0ef07b74386</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a6a735492bd31b1144416504addb379f2</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>abdc0c47c36e3bfc8614041b4add77b1a</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a7fb1e6e5c04d2acccf1323b893ee4faf</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a2c94323402796b7de77d92747088964d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a03636b532d8752778546f9228bd6d6eb</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a1fb5a65f74fb56aa213d05eb94c31400</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a44a6201a36a95273bd310d77a766a304</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a36edb267ec2cb728b5c2c02574f3ff85</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>acddaa7f95fa8b37065484abf5b112949</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>ad010ef91f3b5aea9dfde2433c79119ae</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>ae875c412bf0b3588490eec508c03bf86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a4f4b04215e075c3cafe37fffcbe7e2df</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a3fc20bbf89d866f68a804744245ba6b3</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>af986044f4ef5ee203516a1a60c2a9b74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, bool &gt;::type</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>ae9f3aea40390221b53912fe93100ef8a</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a9271ef246c1a6adf47c9a100a057358b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>aba54c8a14ea40bfbf89ca5feaf2d174c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>aaa1504aa983e079787ec97e1d514885e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a92eb91f325a832d027d37d7e544fb2b9</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a8fe7ea1435a3846dd4cb8f5a1f9384c7</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>ac1576bc0459ec9bf6b0cd3f4dcba6f4b</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>ae105883a8789f677289dd967a5ffd2bd</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>ae64184ab8202f1cf123912300ece668b</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a106303ab840eafb94b38f39647f63332</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a8c027b6d75484a044f88726506aa7eae</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a91399716c05901fc438ae1750147e011</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a69d89067f36322362bff03fb7735349d</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a85953dea94294ced96ad92e0746e6696</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a45f53ad553890a6fda168e1682ac511a</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>ac8bfbc6bfbc9dcc71a696c5e0a05adb4</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a84d251b75633d2bac475f0ef07b74386</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a6a735492bd31b1144416504addb379f2</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>abdc0c47c36e3bfc8614041b4add77b1a</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a7fb1e6e5c04d2acccf1323b893ee4faf</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GeneralFad&lt; ValueT, DynamicStorage&lt; ValueT &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1GeneralFad.html</filename>
    <base>DynamicStorage&lt; ValueT &gt;</base>
    <member kind="typedef">
      <type>RemoveConst&lt; ValueT &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a02dd8babc9dba28ea0f7d450ad4c66c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ae0dd714c57e8311221add959935869e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a9c18f21da3c1bd412871a7d14c10d63e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ad6d383ab66cba06250dad55810d3ee52</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>af6d22ef8d9e2551bd2b9a6c6962bc32d</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aa3dec190327249af93ec2fa92110e27a</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aae2df8fc86e6a4c8709a961522271de7</anchor>
      <arglist>(const DynamicStorage&lt; ValueT &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a67a09a3c061d49fe9c34480af20372b1</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>adc3c10e1cb5e64802463fbc35ab0612b</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a6ab99e98fffd6b85fee45865bfc3e7fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a116ffb051ab399dd108843330b303366</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a15bc52a94ab998ce9435eb1f7a71323b</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a825bf0d609ea8a3ac26af67193b128c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, bool &gt;::type</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a3d66713e60971bba7be8684708ac313c</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a20dac78b74159085a30b849756970221</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a8f56071102fdbbc1def58c6acb4cacfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a308f0592e7f2890cde8da2b55fa0fc41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a61a1ac39e196829328f9caf3f9976c08</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a21702df106caa2dd9399c79a9c5dbb2b</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a001f828e70695ba8c6ba08fd6b03c8d4</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aca9e08234c5e3a634204bef7440d70b4</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>af338157eee92f6563b50b12fa7e9e7d0</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aee07d9bef5027bb2736825322c045e50</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a9c7cf14ed45ae6776ce1cbb01b581593</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ae455106d04f2fb3a6bf8163de805ef36</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ab0f7dd7a434c7e263d0b1d8e443ef504</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aef76624db18bb21100f899211f6c4609</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a290e983a05f4bfc35c082f1291d330ae</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a8dc27fb9b6f1760c2fbd5b26b2ea5af5</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a08783ba6e8dec56393fd14f68b489255</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a013ea3a54a237496a41d5658cbd8a4d3</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a54e1561f1d306912926f72e70c04819a</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ab3a39c64ddd9e43e5687ab09046d8f98</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a9c18f21da3c1bd412871a7d14c10d63e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ad6d383ab66cba06250dad55810d3ee52</anchor>
      <arglist>(const S &amp;x, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>af6d22ef8d9e2551bd2b9a6c6962bc32d</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aa3dec190327249af93ec2fa92110e27a</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aae2df8fc86e6a4c8709a961522271de7</anchor>
      <arglist>(const DynamicStorage&lt; ValueT &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a67a09a3c061d49fe9c34480af20372b1</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>adc3c10e1cb5e64802463fbc35ab0612b</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, typename mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a6ab99e98fffd6b85fee45865bfc3e7fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a116ffb051ab399dd108843330b303366</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a15bc52a94ab998ce9435eb1f7a71323b</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a825bf0d609ea8a3ac26af67193b128c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, bool &gt;::type</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a3d66713e60971bba7be8684708ac313c</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a20dac78b74159085a30b849756970221</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a8f56071102fdbbc1def58c6acb4cacfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a308f0592e7f2890cde8da2b55fa0fc41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a61a1ac39e196829328f9caf3f9976c08</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a21702df106caa2dd9399c79a9c5dbb2b</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a001f828e70695ba8c6ba08fd6b03c8d4</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aca9e08234c5e3a634204bef7440d70b4</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>af338157eee92f6563b50b12fa7e9e7d0</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aee07d9bef5027bb2736825322c045e50</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a9c7cf14ed45ae6776ce1cbb01b581593</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ae455106d04f2fb3a6bf8163de805ef36</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ab0f7dd7a434c7e263d0b1d8e443ef504</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aef76624db18bb21100f899211f6c4609</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a290e983a05f4bfc35c082f1291d330ae</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a8dc27fb9b6f1760c2fbd5b26b2ea5af5</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a08783ba6e8dec56393fd14f68b489255</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a013ea3a54a237496a41d5658cbd8a4d3</anchor>
      <arglist>(const S &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GeneralFad &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a54e1561f1d306912926f72e70c04819a</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>mpl::enable_if_c&lt; mpl::is_convertible&lt; typename Expr&lt; S &gt;::value_type, value_type &gt;::value &amp;&amp;ExprLevel&lt; typename Expr&lt; S &gt;::value_type &gt;::value==ExprLevel&lt; value_type &gt;::value, GeneralFad &amp; &gt;::type</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ab3a39c64ddd9e43e5687ab09046d8f98</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Handle</name>
    <filename>classSacado_1_1Handle.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>Handle</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a6eaee66950217a6ec6d2bbf3af861d94</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Handle</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>aabf8fd3fb4f1caa5f58ae3a7d363560c</anchor>
      <arglist>(const Handle &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Handle</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>ad759016f98d819a3efa8444a9848f4e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a08a7cc38ef36bb1093d99dffa4cafefe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>get</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a357aae389301cf06fd8ae2468a5b3968</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Assign</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a69f9e88f68a0a1f64a4361f27677ac3c</anchor>
      <arglist>(const Handle &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeOwnCopy</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>aaf510970f14009fc1ececf6bb3e45b48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Handle &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a923e0c6ca4ef03ac6ef328b583167dc9</anchor>
      <arglist>(const Handle &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a45d6de40b48855b443c30fc8efb937d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator*</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a68a50f5bb65a2a8a3cd6b1de8138142f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a325eaf7f066a92b67cf474dea84f6f83</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Handle&lt; Sacado::Tay::Taylor::TaylorData &gt;</name>
    <filename>classSacado_1_1Handle.html</filename>
    <member kind="function">
      <type></type>
      <name>Handle</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a6eaee66950217a6ec6d2bbf3af861d94</anchor>
      <arglist>(Sacado::Tay::Taylor::TaylorData *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Handle</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>aabf8fd3fb4f1caa5f58ae3a7d363560c</anchor>
      <arglist>(const Handle &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Handle</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>ad759016f98d819a3efa8444a9848f4e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Tay::Taylor::TaylorData *</type>
      <name>get</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a08a7cc38ef36bb1093d99dffa4cafefe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Sacado::Tay::Taylor::TaylorData *</type>
      <name>get</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a357aae389301cf06fd8ae2468a5b3968</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Assign</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a69f9e88f68a0a1f64a4361f27677ac3c</anchor>
      <arglist>(const Handle &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeOwnCopy</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>aaf510970f14009fc1ececf6bb3e45b48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Handle &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a923e0c6ca4ef03ac6ef328b583167dc9</anchor>
      <arglist>(const Handle &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Tay::Taylor::TaylorData *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a45d6de40b48855b443c30fc8efb937d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Sacado::Tay::Taylor::TaylorData &amp;</type>
      <name>operator*</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a68a50f5bb65a2a8a3cd6b1de8138142f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Tay::Taylor::TaylorData &amp;</type>
      <name>operator*</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a325eaf7f066a92b67cf474dea84f6f83</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::has_type</name>
    <filename>structSacado_1_1mpl_1_1has__type.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::hk</name>
    <filename>structSacado_1_1mpl_1_1hk.html</filename>
    <templarg>k</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::hk&lt; k, arg&lt; N &gt;, T1, T2, T3, T4, T5 &gt;</name>
    <filename>structSacado_1_1mpl_1_1hk_3_01k_00_01arg_3_01N_01_4_00_01T1_00_01T2_00_01T3_00_01T4_00_01T5_01_4.html</filename>
    <templarg>k</templarg>
    <templarg>N</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap&lt; arg&lt; N &gt;, T1, T2, T3, T4, T5 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::hk&lt; k, arg&lt;-1 &gt;, T1, T2, T3, T4, T5 &gt;</name>
    <filename>structSacado_1_1mpl_1_1hk_3_01k_00_01arg_3-1_01_4_00_01T1_00_01T2_00_01T3_00_01T4_00_01T5_01_4.html</filename>
    <templarg>k</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap&lt; arg&lt; k &gt;, T1, T2, T3, T4, T5 &gt;</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::IndepADvar</name>
    <filename>classSacado_1_1Rad2d_1_1IndepADvar.html</filename>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>ab496904accba58e3f7bd5fc07bf3f15c</anchor>
      <arglist>(double)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::IndepADvar</name>
    <filename>classSacado_1_1Rad2_1_1IndepADvar.html</filename>
    <templarg>Double</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::IndepADvar</name>
    <filename>classSacado_1_1RadVec_1_1IndepADvar.html</filename>
    <templarg>Double</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::IndepADvar</name>
    <filename>classSacado_1_1Rad_1_1IndepADvar.html</filename>
    <templarg>Double</templarg>
    <base protection="protected">Sacado::Rad::IndepADvar_base</base>
    <base>Base&lt; IndepADvar&lt; Double &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::IndepADvar</name>
    <filename>classSacado_1_1Radnt_1_1IndepADvar.html</filename>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>a094b44459f895f52b0c11791a0057c3c</anchor>
      <arglist>(double)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::IndepADvar_base</name>
    <filename>classSacado_1_1Rad_1_1IndepADvar__base.html</filename>
    <templarg></templarg>
    <base>Sacado::Rad::IndepADvar_base0</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::IndepADvar_base0</name>
    <filename>classSacado_1_1Rad_1_1IndepADvar__base0.html</filename>
    <templarg>Double</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::integral_c</name>
    <filename>structSacado_1_1mpl_1_1integral__c.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::integral_nonzero</name>
    <filename>structSacado_1_1integral__nonzero.html</filename>
    <templarg></templarg>
    <templarg>v</templarg>
    <templarg>NonZero</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::integral_nonzero&lt; T, zero, false &gt;</name>
    <filename>structSacado_1_1integral__nonzero_3_01T_00_01zero_00_01false_01_4.html</filename>
    <templarg></templarg>
    <templarg>zero</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::integral_nonzero_constant</name>
    <filename>structSacado_1_1mpl_1_1integral__nonzero__constant.html</filename>
    <templarg>T</templarg>
    <templarg>v</templarg>
    <templarg>NonZero</templarg>
  </compound>
  <compound kind="class">
    <name>integral_nonzero_constant&lt; int, static_length &gt;</name>
    <filename>structSacado_1_1mpl_1_1integral__nonzero__constant.html</filename>
  </compound>
  <compound kind="class">
    <name>integral_nonzero_constant&lt; int, static_stride &gt;</name>
    <filename>structSacado_1_1mpl_1_1integral__nonzero__constant.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::integral_nonzero_constant&lt; T, zero, false &gt;</name>
    <filename>structSacado_1_1mpl_1_1integral__nonzero__constant_3_01T_00_01zero_00_01false_01_4.html</filename>
    <templarg></templarg>
    <templarg>zero</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_convertible</name>
    <filename>structSacado_1_1mpl_1_1is__convertible.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_placeholder</name>
    <filename>structSacado_1_1mpl_1_1is__placeholder.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_placeholder&lt; arg&lt; N &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1is__placeholder_3_01arg_3_01N_01_4_01_4.html</filename>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_placeholder&lt; F&lt; T1 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1is__placeholder_3_01F_3_01T1_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_placeholder&lt; F&lt; T1, T2 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1is__placeholder_3_01F_3_01T1_00_01T2_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_placeholder&lt; F&lt; T1, T2, T3 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1is__placeholder_3_01F_3_01T1_00_01T2_00_01T3_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_placeholder&lt; F&lt; T1, T2, T3, T4 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1is__placeholder_3_01F_3_01T1_00_01T2_00_01T3_00_01T4_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_placeholder&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1is__placeholder_3_01F_3_01T1_00_01T2_00_01T3_00_01T4_00_01T5_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_same</name>
    <filename>structSacado_1_1mpl_1_1is__same.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>std::is_same&lt; Kokkos::LayoutContiguous&lt; Layout &gt;, Layout &gt;</name>
    <filename>structstd_1_1is__same_3_01Kokkos_1_1LayoutContiguous_3_01Layout_01_4_00_01Layout_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>std::is_same&lt; Layout, Kokkos::LayoutContiguous&lt; Layout &gt; &gt;</name>
    <filename>structstd_1_1is__same_3_01Layout_00_01Kokkos_1_1LayoutContiguous_3_01Layout_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_same&lt; T, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1is__same_3_01T_00_01T_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType</name>
    <filename>structSacado_1_1IsADType.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt;  bool &gt;</name>
    <filename>structSacado_1_1IsADType_3_01_01bool_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt;  char &gt;</name>
    <filename>structSacado_1_1IsADType_3_01_01char_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt;  double &gt;</name>
    <filename>structSacado_1_1IsADType_3_01_01double_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt;  float &gt;</name>
    <filename>structSacado_1_1IsADType_3_01_01float_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt;  int &gt;</name>
    <filename>structSacado_1_1IsADType_3_01_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt;  long &gt;</name>
    <filename>structSacado_1_1IsADType_3_01_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt;  unsigned int &gt;</name>
    <filename>structSacado_1_1IsADType_3_01_01unsigned_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt;  unsigned long &gt;</name>
    <filename>structSacado_1_1IsADType_3_01_01unsigned_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; CacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Fad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; LFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Rad2::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Rad2::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Rad2_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Rad::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Rad::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Rad_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; RadVec::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; RadVec::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01RadVec_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Tay::CacheTaylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Tay::Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual</name>
    <filename>structSacado_1_1IsEqual.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt;  bool &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01_01bool_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt;  char &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01_01char_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt;  double &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01_01double_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt;  float &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01_01float_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt;  int &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt;  long &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt;  unsigned int &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01_01unsigned_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt;  unsigned long &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01_01unsigned_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; Tay::CacheTaylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; Tay::Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr</name>
    <filename>structSacado_1_1IsExpr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; CacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; ELRFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; Fad::DMFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01Fad_1_1DMFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; Fad::DVFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01Fad_1_1DVFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; Fad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; FAD_NS::DFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01FAD__NS_1_1DFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; FAD_NS::SFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01FAD__NS_1_1SFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; FAD_NS::SLFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01FAD__NS_1_1SLFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; FAD_NS::ViewFad&lt; T, l, s, U &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01FAD__NS_1_1ViewFad_3_01T_00_01l_00_01s_00_01U_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>l</templarg>
    <templarg>s</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; LFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; LFad::LogicalSparse&lt; T, L &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01LFad_1_1LogicalSparse_3_01T_00_01L_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; Tay::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01Tay_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsFad</name>
    <filename>structSacado_1_1IsFad.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsFad&lt; Fad::DMFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsFad_3_01Fad_1_1DMFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsFad&lt; Fad::DVFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsFad_3_01Fad_1_1DVFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsFad&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsFad_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsFad&lt; FAD_NS::DFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsFad_3_01FAD__NS_1_1DFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsFad&lt; FAD_NS::SFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1IsFad_3_01FAD__NS_1_1SFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsFad&lt; FAD_NS::SLFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1IsFad_3_01FAD__NS_1_1SLFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsFad&lt; FAD_NS::ViewFad&lt; T, l, s, U &gt; &gt;</name>
    <filename>structSacado_1_1IsFad_3_01FAD__NS_1_1ViewFad_3_01T_00_01l_00_01s_00_01U_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>l</templarg>
    <templarg>s</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::IsFadExpr</name>
    <filename>structSacado_1_1ELRCacheFad_1_1IsFadExpr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::IsFadExpr</name>
    <filename>structSacado_1_1Fad_1_1IsFadExpr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::CacheFad::IsFadExpr</name>
    <filename>structSacado_1_1CacheFad_1_1IsFadExpr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::LFad::IsFadExpr</name>
    <filename>structSacado_1_1LFad_1_1IsFadExpr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::IsFadExpr</name>
    <filename>structSacado_1_1ELRFad_1_1IsFadExpr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::IsFadExpr&lt; DFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1IsFadExpr_3_01DFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::IsFadExpr&lt; DMFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1IsFadExpr_3_01DMFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::IsFadExpr&lt; DVFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1IsFadExpr_3_01DVFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ELRCacheFad_1_1IsFadExpr_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1IsFadExpr_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::CacheFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1CacheFad_1_1IsFadExpr_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::LFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1LFad_1_1IsFadExpr_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ELRFad_1_1IsFadExpr_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::IsFadExpr&lt; SFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1IsFadExpr_3_01SFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::IsFadExpr&lt; SLFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1IsFadExpr_3_01SLFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::IsFadExpr&lt; ViewFad&lt; T, l, s, U &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1IsFadExpr_3_01ViewFad_3_01T_00_01l_00_01s_00_01U_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>l</templarg>
    <templarg>s</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType</name>
    <filename>structSacado_1_1IsScalarType.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt;  bool &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01_01bool_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt;  char &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01_01char_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt;  double &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01_01double_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt;  float &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01_01float_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt;  int &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt;  long &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt;  unsigned int &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01_01unsigned_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt;  unsigned long &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01_01unsigned_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; CacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Fad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; LFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Rad2::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Rad2::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Rad2_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Rad::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Rad::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Rad_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; RadVec::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; RadVec::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01RadVec_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Tay::CacheTaylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Tay::Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized</name>
    <filename>structSacado_1_1IsStaticallySized.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt;  bool &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01_01bool_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt;  char &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01_01char_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt;  double &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01_01double_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt;  float &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01_01float_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt;  int &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt;  long &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt;  unsigned int &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01_01unsigned_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt;  unsigned long &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01_01unsigned_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const T &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01T_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; Tay::CacheTaylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; Tay::Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsView</name>
    <filename>structSacado_1_1IsView.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsView&lt; Sacado::FAD_NS::ViewFad&lt; T, l, s, U &gt; &gt;</name>
    <filename>structSacado_1_1IsView_3_01Sacado_1_1FAD__NS_1_1ViewFad_3_01T_00_01l_00_01s_00_01U_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>l</templarg>
    <templarg>s</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lambda</name>
    <filename>structSacado_1_1mpl_1_1lambda.html</filename>
    <templarg></templarg>
    <base>type_wrap&lt; F &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lambda&lt; F&lt; T1 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1lambda_3_01F_3_01T1_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <base>mpl_if&lt; is_placeholder&lt; F&lt; T1 &gt; &gt;, type_wrap&lt; bind1&lt; quote1&lt; F &gt;, lambda&lt; T1 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lambda&lt; F&lt; T1, T2 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1lambda_3_01F_3_01T1_00_01T2_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mpl_if&lt; is_placeholder&lt; F&lt; T1, T2 &gt; &gt;, type_wrap&lt; bind2&lt; quote2&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lambda&lt; F&lt; T1, T2, T3 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1lambda_3_01F_3_01T1_00_01T2_00_01T3_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mpl_if&lt; is_placeholder&lt; F&lt; T1, T2, T3 &gt; &gt;, type_wrap&lt; bind3&lt; quote3&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lambda&lt; F&lt; T1, T2, T3, T4 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1lambda_3_01F_3_01T1_00_01T2_00_01T3_00_01T4_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mpl_if&lt; is_placeholder&lt; F&lt; T1, T2, T3, T4 &gt; &gt;, type_wrap&lt; bind4&lt; quote4&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type, lambda&lt; T4 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3, T4 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lambda&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1lambda_3_01F_3_01T1_00_01T2_00_01T3_00_01T4_00_01T5_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mpl_if&lt; is_placeholder&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;, type_wrap&lt; bind5&lt; quote5&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type, lambda&lt; T4 &gt;::type, lambda&lt; T5 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>Teuchos::LAPACK&lt; OrdinalType, Sacado::Fad::DFad&lt; ScalarType &gt; &gt;</name>
    <filename>classTeuchos_1_1LAPACK_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DFad_3_01ScalarType_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Fad_LAPACK&lt; OrdinalType, Sacado::Fad::DFad&lt; ScalarType &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Kokkos::LayoutContiguous</name>
    <filename>structKokkos_1_1LayoutContiguous.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>LayoutContiguous</type>
      <name>array_layout</name>
      <anchorfile>structKokkos_1_1LayoutContiguous.html</anchorfile>
      <anchor>aed70d60e326512c7227ab11bd2ecedaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lazy_disable_if</name>
    <filename>structSacado_1_1mpl_1_1lazy__disable__if.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>lazy_disable_if_c&lt; Cond::value, T &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lazy_disable_if_c</name>
    <filename>structSacado_1_1mpl_1_1lazy__disable__if__c.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>lazy_disable_if_c&lt; Cond::value, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1lazy__disable__if__c.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lazy_disable_if_c&lt; false, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1lazy__disable__if__c_3_01false_00_01T_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lazy_enable_if</name>
    <filename>structSacado_1_1mpl_1_1lazy__enable__if.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>lazy_enable_if_c&lt; Cond::value, T &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lazy_enable_if_c</name>
    <filename>structSacado_1_1mpl_1_1lazy__enable__if__c.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>lazy_enable_if_c&lt; Cond::value, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1lazy__enable__if__c.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lazy_enable_if_c&lt; true, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1lazy__enable__if__c_3_01true_00_01T_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::MemPool::Link</name>
    <filename>structSacado_1_1Fad_1_1MemPool_1_1Link.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;::LocalAccumOp</name>
    <filename>structSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;::LocalAccumOp</name>
    <filename>structSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::Log10ExprType</name>
    <filename>structSacado_1_1Tay_1_1Log10ExprType.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Log10Op</name>
    <filename>classSacado_1_1CacheFad_1_1Log10Op.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Log10Op</name>
    <filename>classSacado_1_1Fad_1_1Log10Op.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Log10Op</name>
    <filename>classSacado_1_1LFad_1_1Log10Op.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Log10Op</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Log10Op.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Log10Op</name>
    <filename>classSacado_1_1ELRFad_1_1Log10Op.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::LogicalSparse</name>
    <filename>classSacado_1_1LFad_1_1LogicalSparse.html</filename>
    <templarg>ValT</templarg>
    <templarg>LogT</templarg>
    <base>Sacado::LFad::Expr&lt; LogicalSparseImp&lt; ValT, LogT &gt; &gt;</base>
    <class kind="struct">Sacado::LFad::LogicalSparse::apply</class>
    <member kind="typedef">
      <type>LogicalSparseImp&lt; ValT, LogT &gt;</type>
      <name>ImplType</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>a6a28e36bd9bed8d08f0aba1300c466fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>a9d31117a0d766af60987c5919ce3ebd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>ac25bfdf2548b9e56629c8b93ed5580de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>ac7452755d6059a6eb79a8b0373256434</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>ae79ff3f57c49b69c831cc8bdd8d6ab51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>a0d1b50e5414945ef384a18af1094033b</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>ae1921d9416b925932a7b2561165a8f55</anchor>
      <arglist>(const int sz, const ValT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>a232588c952c734902e2f636448dd6348</anchor>
      <arglist>(const int sz, const int i, const ValT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>a54c343792574a53dec07e5ed6f1c42c4</anchor>
      <arglist>(const LogicalSparse &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>ac325c0a710ecff679713137db9c98688</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>ae79ff3f57c49b69c831cc8bdd8d6ab51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>a0d1b50e5414945ef384a18af1094033b</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>ae1921d9416b925932a7b2561165a8f55</anchor>
      <arglist>(const int sz, const ValT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>a232588c952c734902e2f636448dd6348</anchor>
      <arglist>(const int sz, const int i, const ValT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>a54c343792574a53dec07e5ed6f1c42c4</anchor>
      <arglist>(const LogicalSparse &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>ac325c0a710ecff679713137db9c98688</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::LogicalSparseImp</name>
    <filename>classSacado_1_1LFad_1_1LogicalSparseImp.html</filename>
    <templarg>ValT</templarg>
    <templarg>LogT</templarg>
    <base>DynamicStorage&lt; ValT, LogT &gt;</base>
    <member kind="typedef">
      <type>ValT</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a09a93c69885054371341d50ac784510a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a187d2491ba02fda00d8294f93b31477d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LogT</type>
      <name>logical_type</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a153d492b64f527e61107647d1407dc70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>aa0e669a9b63eac8086d65a1677ed0a39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>acd667ffef82aad32b6502adfdaeb32a4</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a791d934f749e039b987e7bdcebc7ffe8</anchor>
      <arglist>(const int sz, const value_type &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a0a2af48d022edd12e0bdde86fdddc1bb</anchor>
      <arglist>(const int sz, const int i, const value_type &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>add3529c396695356a2f9ec58f433da84</anchor>
      <arglist>(const LogicalSparseImp &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a0bb967ea2a45671f374ec3deef36d764</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a526da3b5503a37d71e930346d8287599</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a8fd781d402b6da964fa7316df1aefb40</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SACADO_ENABLE_EXPR_FUNC</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a57e3aa262e77909a8c31770bd1de2969</anchor>
      <arglist>(bool) isEqualTo(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a41172a5fc38b4b2450a8967c915b9c03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>ae93ee02d5fefd8b25087f7ec2185d130</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a14d918cb2f6d208b476170cc79eda2d5</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>aa0e669a9b63eac8086d65a1677ed0a39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>acd667ffef82aad32b6502adfdaeb32a4</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a791d934f749e039b987e7bdcebc7ffe8</anchor>
      <arglist>(const int sz, const value_type &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a0a2af48d022edd12e0bdde86fdddc1bb</anchor>
      <arglist>(const int sz, const int i, const value_type &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>add3529c396695356a2f9ec58f433da84</anchor>
      <arglist>(const LogicalSparseImp &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a0bb967ea2a45671f374ec3deef36d764</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a526da3b5503a37d71e930346d8287599</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a8fd781d402b6da964fa7316df1aefb40</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SACADO_ENABLE_EXPR_FUNC</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a57e3aa262e77909a8c31770bd1de2969</anchor>
      <arglist>(bool) isEqualTo(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a41172a5fc38b4b2450a8967c915b9c03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>ae93ee02d5fefd8b25087f7ec2185d130</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a14d918cb2f6d208b476170cc79eda2d5</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::LogOp</name>
    <filename>classSacado_1_1Tay_1_1LogOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::LogOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1LogOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::LogOp</name>
    <filename>classSacado_1_1Fad_1_1LogOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::LogOp</name>
    <filename>classSacado_1_1CacheFad_1_1LogOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::LogOp</name>
    <filename>classSacado_1_1LFad_1_1LogOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::LogOp</name>
    <filename>classSacado_1_1ELRFad_1_1LogOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::MarkConstant</name>
    <filename>structSacado_1_1MarkConstant.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::MarkConstant&lt; Rad2::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1MarkConstant_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::MarkConstant&lt; Rad2::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1MarkConstant_3_01Rad2_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::MarkConstant&lt; Rad::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1MarkConstant_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::MarkConstant&lt; Rad::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1MarkConstant_3_01Rad_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::MarkConstant&lt; RadVec::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1MarkConstant_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::MarkConstant&lt; RadVec::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1MarkConstant_3_01RadVec_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::MaxOp</name>
    <filename>classSacado_1_1CacheFad_1_1MaxOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::MaxOp</name>
    <filename>classSacado_1_1Tay_1_1MaxOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::MaxOp</name>
    <filename>classSacado_1_1ELRFad_1_1MaxOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::MaxOp</name>
    <filename>classSacado_1_1Fad_1_1MaxOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::MaxOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1MaxOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::MaxOp</name>
    <filename>classSacado_1_1LFad_1_1MaxOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::MaxOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</name>
    <filename>classSacado_1_1Tay_1_1MaxOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::MaxOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</name>
    <filename>classSacado_1_1Tay_1_1MaxOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::MemPool</name>
    <filename>classSacado_1_1Fad_1_1MemPool.html</filename>
    <class kind="struct">Sacado::Fad::MemPool::Chunk</class>
    <class kind="struct">Sacado::Fad::MemPool::Link</class>
    <member kind="function">
      <type></type>
      <name>MemPool</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>abbdde77bb590608bfce15b5b13a724a5</anchor>
      <arglist>(unsigned int elem_size, unsigned int n_elem, unsigned int pre_alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemPool</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>acda1dc8964fea0fbdb04329a29f6df4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>alloc</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>a4154c53ba4a4fc21275c52a6a7b968e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>a4244450d68430b56be7afc830bb7c40d</anchor>
      <arglist>(void *b)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numChunks</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>a45a2d16920130be854dccd76cbc8c24a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const unsigned int</type>
      <name>esize</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>a843be62537d34615a22d5b057673abe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const unsigned int</type>
      <name>n</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>a1a7de07696214c7cdaf839fa7b0e8a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const unsigned int</type>
      <name>csize</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>a5c60e8b17440b197e3aff4c7e319b0bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Chunk *</type>
      <name>chunks</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>a4e6ecabd11be2a8e5e4c68f13e3143db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Link *</type>
      <name>head</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>a9791c569a205bae0a5a218b15630747d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>num_chunks</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>aa33c650222cd06269e2f85621cdf22fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::MemPoolManager</name>
    <filename>classSacado_1_1Fad_1_1MemPoolManager.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>MemPoolManager</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>a38cd19d814c6efbe0d8611d1e6097184</anchor>
      <arglist>(unsigned int nfad)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemPoolManager</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>a3b5c77df1bd6db0b5623d8d6cabf4bf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MemPool *</type>
      <name>getMemoryPool</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>ae26f68fa9264e2af172c9972cb1b045c</anchor>
      <arglist>(unsigned int dim)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; unsigned int, MemPool * &gt;</type>
      <name>MapType</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>a4b6026378803210ee04129e5a23ba950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>num_fad</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>ad242677d3ba6c10b1380da7ac82989cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MapType</type>
      <name>poolMap</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>aab52ed5b9667e07f833e9d770fa9837e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::MemPoolStorage</name>
    <filename>classSacado_1_1Fad_1_1MemPoolStorage.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>MemPoolStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>af37f0af91ba73ef48e3062414c31fc71</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemPoolStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a10d86f2f42801087e79759b3b09d0a0a</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemPoolStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a0785913504f594191ef2ec8cd384946e</anchor>
      <arglist>(const MemPoolStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemPoolStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a003748350976f5a03c26fab23f1d5399</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MemPoolStorage &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a9484cca739516fc6f1d164ce58af72b3</anchor>
      <arglist>(const MemPoolStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>ae61711485d4b7293e11845f95e312cb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a0eb2c4c245844016797d2348fee71669</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeAndZero</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a71f4e9a6f4f1cbfda54a01c5c2ff8abe</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>af1f27f3f11686182b8cfe3fa3ee10d69</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a35102abe46855cacb9e967ab56ec56e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a21cdaab521e015c95524cedcf5a52d8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a03af752964e2d777b72bab896504dc6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>acb81c70af59b2d7474608c84c09a69f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>af161a2e39137bd673e40bb152693472d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a8d8fe679379c5e1bbcecb293fe25942a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>aaad2a52252782d2adc946ab58ad9c5f7</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MemPool *</type>
      <name>defaultPool_</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>aa4859afcf9d54eb0491543658fd8c721</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MemPool *</type>
      <name>myPool_</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a4f1503ac0ac603eb64b0448acf8f3a1e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::MinOp</name>
    <filename>classSacado_1_1CacheFad_1_1MinOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::MinOp</name>
    <filename>classSacado_1_1ELRFad_1_1MinOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::MinOp</name>
    <filename>classSacado_1_1Fad_1_1MinOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::MinOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1MinOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::MinOp</name>
    <filename>classSacado_1_1LFad_1_1MinOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::MinOp</name>
    <filename>classSacado_1_1Tay_1_1MinOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::MinOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</name>
    <filename>classSacado_1_1Tay_1_1MinOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::MinOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</name>
    <filename>classSacado_1_1Tay_1_1MinOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::mp_array</name>
    <filename>structSacado_1_1Fad_1_1mp__array.html</filename>
    <templarg></templarg>
    <templarg>isScalar</templarg>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>get</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array.html</anchorfile>
      <anchor>a2c861a6f13b4fef975a3b4cd3b42ed6f</anchor>
      <arglist>(int sz, MemPool *pool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>get_and_fill</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array.html</anchorfile>
      <anchor>adcd9f94c819d523a2cd412a4c63ed95e</anchor>
      <arglist>(int sz, MemPool *pool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>get_and_fill</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array.html</anchorfile>
      <anchor>aeaa4691260bed71eb2c13a28e5a8fab5</anchor>
      <arglist>(const T *src, int sz, MemPool *pool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array.html</anchorfile>
      <anchor>ae55b84e1a848d4bd42831c50e41893bd</anchor>
      <arglist>(const T *src, T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>zero</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array.html</anchorfile>
      <anchor>ae563a9fbde8d278d5802281d06fb61a9</anchor>
      <arglist>(T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy_and_release</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array.html</anchorfile>
      <anchor>a77766a8703c8ebb324521cb0e7ec5d39</anchor>
      <arglist>(T *m, int sz, MemPool *pool)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::mp_array&lt; T, true &gt;</name>
    <filename>structSacado_1_1Fad_1_1mp__array_3_01T_00_01true_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>get</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a0b3faa964fd5a3f96dfc8bfb12206ca1</anchor>
      <arglist>(int sz, MemPool *pool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>get_and_fill</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>ad6173f703df4ed66775448ad159b8c1c</anchor>
      <arglist>(int sz, MemPool *pool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>get_and_fill</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a13b146fb98b396c00045884f79d9a594</anchor>
      <arglist>(const T *src, int sz, MemPool *pool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a8561e682bb1cca01457addaf8cead243</anchor>
      <arglist>(const T *src, T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>zero</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a3a84ad688e443732f310fc720dab1908</anchor>
      <arglist>(T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy_and_release</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>ae79db0dac2ad2cc76a98dec6aa5ab658</anchor>
      <arglist>(T *m, int sz, MemPool *pool)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::mpl_if</name>
    <filename>structSacado_1_1mpl_1_1mpl__if.html</filename>
    <templarg>C</templarg>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <base>mpl_if_c&lt; C::value, T1, T2 &gt;</base>
  </compound>
  <compound kind="class">
    <name>mpl_if&lt; is_placeholder&lt; F&lt; T1 &gt; &gt;, type_wrap&lt; bind1&lt; quote1&lt; F &gt;, lambda&lt; T1 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if.html</filename>
    <base>mpl_if_c&lt; is_placeholder&lt; F&lt; T1 &gt; &gt;::value, type_wrap&lt; bind1&lt; quote1&lt; F &gt;, lambda&lt; T1 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>mpl_if&lt; is_placeholder&lt; F&lt; T1, T2 &gt; &gt;, type_wrap&lt; bind2&lt; quote2&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if.html</filename>
    <base>mpl_if_c&lt; is_placeholder&lt; F&lt; T1, T2 &gt; &gt;::value, type_wrap&lt; bind2&lt; quote2&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>mpl_if&lt; is_placeholder&lt; F&lt; T1, T2, T3 &gt; &gt;, type_wrap&lt; bind3&lt; quote3&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if.html</filename>
    <base>mpl_if_c&lt; is_placeholder&lt; F&lt; T1, T2, T3 &gt; &gt;::value, type_wrap&lt; bind3&lt; quote3&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>mpl_if&lt; is_placeholder&lt; F&lt; T1, T2, T3, T4 &gt; &gt;, type_wrap&lt; bind4&lt; quote4&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type, lambda&lt; T4 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3, T4 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if.html</filename>
    <base>mpl_if_c&lt; is_placeholder&lt; F&lt; T1, T2, T3, T4 &gt; &gt;::value, type_wrap&lt; bind4&lt; quote4&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type, lambda&lt; T4 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3, T4 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>mpl_if&lt; is_placeholder&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;, type_wrap&lt; bind5&lt; quote5&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type, lambda&lt; T4 &gt;::type, lambda&lt; T5 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if.html</filename>
    <base>mpl_if_c&lt; is_placeholder&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;::value, type_wrap&lt; bind5&lt; quote5&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type, lambda&lt; T4 &gt;::type, lambda&lt; T5 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::mpl_if_c</name>
    <filename>structSacado_1_1mpl_1_1mpl__if__c.html</filename>
    <templarg>cond</templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>mpl_if_c&lt; C::value, T1, T2 &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if__c.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::mpl_if_c&lt; false, T1, T2 &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if__c_3_01false_00_01T1_00_01T2_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>type_wrap&lt; T2 &gt;</base>
  </compound>
  <compound kind="class">
    <name>mpl_if_c&lt; is_placeholder&lt; F&lt; T1 &gt; &gt;::value, type_wrap&lt; bind1&lt; quote1&lt; F &gt;, lambda&lt; T1 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if__c.html</filename>
  </compound>
  <compound kind="class">
    <name>mpl_if_c&lt; is_placeholder&lt; F&lt; T1, T2 &gt; &gt;::value, type_wrap&lt; bind2&lt; quote2&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if__c.html</filename>
  </compound>
  <compound kind="class">
    <name>mpl_if_c&lt; is_placeholder&lt; F&lt; T1, T2, T3 &gt; &gt;::value, type_wrap&lt; bind3&lt; quote3&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if__c.html</filename>
  </compound>
  <compound kind="class">
    <name>mpl_if_c&lt; is_placeholder&lt; F&lt; T1, T2, T3, T4 &gt; &gt;::value, type_wrap&lt; bind4&lt; quote4&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type, lambda&lt; T4 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3, T4 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if__c.html</filename>
  </compound>
  <compound kind="class">
    <name>mpl_if_c&lt; is_placeholder&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;::value, type_wrap&lt; bind5&lt; quote5&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type, lambda&lt; T4 &gt;::type, lambda&lt; T5 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if__c.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::mpl_if_c&lt; true, T1, T2 &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if__c_3_01true_00_01T1_00_01T2_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>type_wrap&lt; T1 &gt;</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::MultiplicationOp</name>
    <filename>classSacado_1_1Tay_1_1MultiplicationOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::MultiplicationOp</name>
    <filename>classSacado_1_1ELRFad_1_1MultiplicationOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::MultiplicationOp</name>
    <filename>classSacado_1_1CacheFad_1_1MultiplicationOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::MultiplicationOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1MultiplicationOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::MultiplicationOp</name>
    <filename>classSacado_1_1Fad_1_1MultiplicationOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::MultiplicationOp</name>
    <filename>classSacado_1_1LFad_1_1MultiplicationOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::MultiplicationOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</name>
    <filename>classSacado_1_1Tay_1_1MultiplicationOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::MultiplicationOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</name>
    <filename>classSacado_1_1Tay_1_1MultiplicationOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::next</name>
    <filename>structSacado_1_1mpl_1_1next.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::next&lt; range_c_iterator&lt; Range, Pos &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1next_3_01range__c__iterator_3_01Range_00_01Pos_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Pos</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::none</name>
    <filename>structSacado_1_1mpl_1_1none.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::OverrideDefaultPromote</name>
    <filename>structSacado_1_1OverrideDefaultPromote.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::OverrideDefaultPromote&lt;  Rad2::ADvari&lt; T &gt; &amp; &gt;</name>
    <filename>structSacado_1_1OverrideDefaultPromote_3_01_01Rad2_1_1ADvari_3_01T_01_4_01_6_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::OverrideDefaultPromote&lt;  Rad::ADvari&lt; T &gt; &amp; &gt;</name>
    <filename>structSacado_1_1OverrideDefaultPromote_3_01_01Rad_1_1ADvari_3_01T_01_4_01_6_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::OverrideDefaultPromote&lt;  RadVec::ADvari&lt; T &gt; &amp; &gt;</name>
    <filename>structSacado_1_1OverrideDefaultPromote_3_01_01RadVec_1_1ADvari_3_01T_01_4_01_6_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ParameterAccessor</name>
    <filename>classSacado_1_1ParameterAccessor.html</filename>
    <templarg>EvalType</templarg>
    <templarg>EvalTypeTraits</templarg>
    <member kind="function" virtualness="pure">
      <type>virtual ScalarT &amp;</type>
      <name>getValue</name>
      <anchorfile>classSacado_1_1ParameterAccessor.html</anchorfile>
      <anchor>a781c5e6678cf4b832cfaa6866648bf50</anchor>
      <arglist>(const std::string &amp;n)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classSacado_1_1ParameterAccessor.html</anchorfile>
      <anchor>aa9439b23e6be8cf4f259ca2de4b75b33</anchor>
      <arglist>(const std::string &amp;n, const ScalarT &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ParameterFamilyBase</name>
    <filename>classSacado_1_1ParameterFamilyBase.html</filename>
    <templarg>EntryBase</templarg>
    <templarg>EntryType</templarg>
    <member kind="function">
      <type></type>
      <name>ParameterFamilyBase</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a54bc1c4f5c8000d06ce81b9ef7903809</anchor>
      <arglist>(const std::string &amp;name, bool supports_ad, bool supports_analytic)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterFamilyBase</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>ad030241b8e25dcfb4012bc68610e78bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a2f2508a34f8171d527b156335c388f1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supportsAD</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a1afeb2a0dc6f7e2a9a7733bb73319abc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supportsAnalytic</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a7e05589647ebd32f4e8d7c1d3ee3e4bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasType</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>adca1f717bba0870f782ae5225308d5ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addEntry</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a9caa3c0ef2a186c8660b098237b78a3e</anchor>
      <arglist>(const Teuchos::RCP&lt; typename Sacado::mpl::apply&lt; EntryType, EvalType &gt;::type &gt; &amp;entry, const bool allow_overwrite=false)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; typename Sacado::mpl::apply&lt; EntryType, EvalType &gt;::type &gt;</type>
      <name>getEntry</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a18fc5ceebf1cbe69e16d7d3ca149a2fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const typename Sacado::mpl::apply&lt; EntryType, EvalType &gt;::type &gt;</type>
      <name>getEntry</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a5db2c9f91c38027e4622caeff23a3597</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a9f4c345384e82ec408d682e6b25a76de</anchor>
      <arglist>(std::ostream &amp;os, bool print_values=false) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, Teuchos::RCP&lt; EntryBase &gt; &gt;</type>
      <name>EvalMap</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a2737b83c238b24ba7842d20cc8b89492</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>EvalMap::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>ab86522e4cdfd7d6ffabad8f91d463c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>EvalMap::iterator</type>
      <name>iterator</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>ae43ebbda119aaeb7c65e0053bc301bc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getTypeName</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>ab3e8de2a225e27d2fcc6cb3a4f978693</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EvalMap</type>
      <name>family</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>aa4eb5b541d2a6473ee9ed8b6947c5430</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::string</type>
      <name>name</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>acfcae6d0c2979ab085703eb0031fc878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>supports_ad</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a3b5dceb70cb1a10b633270e1be38cbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>supports_analytic</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>adb01f0040e00c16555236384060df0f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParameterFamilyBase&lt; AbstractScalarParameterEntry, ScalarParameterEntry&lt; _, EvalTypeTraits &gt; &gt;</name>
    <filename>classSacado_1_1ParameterFamilyBase.html</filename>
    <member kind="function">
      <type></type>
      <name>ParameterFamilyBase</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a54bc1c4f5c8000d06ce81b9ef7903809</anchor>
      <arglist>(const std::string &amp;name, bool supports_ad, bool supports_analytic)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterFamilyBase</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>ad030241b8e25dcfb4012bc68610e78bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a2f2508a34f8171d527b156335c388f1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supportsAD</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a1afeb2a0dc6f7e2a9a7733bb73319abc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supportsAnalytic</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a7e05589647ebd32f4e8d7c1d3ee3e4bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasType</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>adca1f717bba0870f782ae5225308d5ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addEntry</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a9caa3c0ef2a186c8660b098237b78a3e</anchor>
      <arglist>(const Teuchos::RCP&lt; typename Sacado::mpl::apply&lt; ScalarParameterEntry&lt; _, EvalTypeTraits &gt;, EvalType &gt;::type &gt; &amp;entry, const bool allow_overwrite=false)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; typename Sacado::mpl::apply&lt; ScalarParameterEntry&lt; _, EvalTypeTraits &gt;, EvalType &gt;::type &gt;</type>
      <name>getEntry</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a18fc5ceebf1cbe69e16d7d3ca149a2fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const typename Sacado::mpl::apply&lt; ScalarParameterEntry&lt; _, EvalTypeTraits &gt;, EvalType &gt;::type &gt;</type>
      <name>getEntry</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a5db2c9f91c38027e4622caeff23a3597</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a9f4c345384e82ec408d682e6b25a76de</anchor>
      <arglist>(std::ostream &amp;os, bool print_values=false) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, Teuchos::RCP&lt; AbstractScalarParameterEntry &gt; &gt;</type>
      <name>EvalMap</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a2737b83c238b24ba7842d20cc8b89492</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>EvalMap::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>ab86522e4cdfd7d6ffabad8f91d463c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>EvalMap::iterator</type>
      <name>iterator</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>ae43ebbda119aaeb7c65e0053bc301bc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getTypeName</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>ab3e8de2a225e27d2fcc6cb3a4f978693</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EvalMap</type>
      <name>family</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>aa4eb5b541d2a6473ee9ed8b6947c5430</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::string</type>
      <name>name</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>acfcae6d0c2979ab085703eb0031fc878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>supports_ad</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a3b5dceb70cb1a10b633270e1be38cbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>supports_analytic</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>adb01f0040e00c16555236384060df0f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ParameterLibraryBase</name>
    <filename>classSacado_1_1ParameterLibraryBase.html</filename>
    <templarg>FamilyType</templarg>
    <templarg>EntryType</templarg>
    <member kind="typedef">
      <type>FamilyMap::iterator</type>
      <name>iterator</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>af80fda11bb34c1815071c10250c5b78c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FamilyMap::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a524a052cceff33d438da7a227db4dcbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterLibraryBase</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a54db69935f9b75d867b0ff38a4b22c89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterLibraryBase</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a2362b070246ca20d47b70d04d5d0e28f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParameter</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a9bb458de1af374752794f70691df0864</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParameterForType</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>ab647ac107b6c7b37bf4265a737eac36f</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addParameterFamily</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a474243319337de2f82344470ed928861</anchor>
      <arglist>(const std::string &amp;name, bool supports_ad, bool supports_analytic)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addEntry</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a2520269c6505d7290e8ccdf4f816af7c</anchor>
      <arglist>(const std::string &amp;name, const Teuchos::RCP&lt; typename Sacado::mpl::apply&lt; EntryType, EvalType &gt;::type &gt; &amp;entry, const bool allow_overwrite=false)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; typename Sacado::mpl::apply&lt; EntryType, EvalType &gt;::type &gt;</type>
      <name>getEntry</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>acd84836409021859cd17a83f5e82d1b4</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const typename Sacado::mpl::apply&lt; EntryType, EvalType &gt;::type &gt;</type>
      <name>getEntry</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a77e6e4fb66fa16561dc35c435048c2a6</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>addf5d49382fdbcadf0112be41e95e5a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a14e9fad7a4ae6946e086174424a06b79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a3cc1036ebb61ba84625d059cabc39d0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>aa47da37dca38164794cacefa1e3d36e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a581eb5a9ab87e38994219f815ff12482</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillVector</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>af51261f4dc7d0700c21cc30d76aba609</anchor>
      <arglist>(const Teuchos::Array&lt; std::string &gt; &amp;names, const Teuchos::Array&lt; BaseValueType &gt; &amp;values, ParameterVectorBase&lt; FamilyType, BaseValueType &gt; &amp;pv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>aed211bce5ff0b76c7fcec4b4747f7376</anchor>
      <arglist>(std::ostream &amp;os, bool print_values=false) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; string, Teuchos::RCP&lt; FamilyType &gt; &gt;</type>
      <name>FamilyMap</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a9166c1370af4ebe8455b440147e31065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FamilyMap</type>
      <name>library</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a2d65e3804e96e2beb8d6c1109e86b465</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParameterLibraryBase&lt; ScalarParameterFamily&lt; EvalTypeTraits &gt;, ScalarParameterEntry&lt; _, EvalTypeTraits &gt; &gt;</name>
    <filename>classSacado_1_1ParameterLibraryBase.html</filename>
    <member kind="typedef">
      <type>FamilyMap::iterator</type>
      <name>iterator</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>af80fda11bb34c1815071c10250c5b78c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FamilyMap::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a524a052cceff33d438da7a227db4dcbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterLibraryBase</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a54db69935f9b75d867b0ff38a4b22c89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterLibraryBase</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a2362b070246ca20d47b70d04d5d0e28f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParameter</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a9bb458de1af374752794f70691df0864</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParameterForType</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>ab647ac107b6c7b37bf4265a737eac36f</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addParameterFamily</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a474243319337de2f82344470ed928861</anchor>
      <arglist>(const std::string &amp;name, bool supports_ad, bool supports_analytic)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addEntry</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a2520269c6505d7290e8ccdf4f816af7c</anchor>
      <arglist>(const std::string &amp;name, const Teuchos::RCP&lt; typename Sacado::mpl::apply&lt; ScalarParameterEntry&lt; _, EvalTypeTraits &gt;, EvalType &gt;::type &gt; &amp;entry, const bool allow_overwrite=false)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; typename Sacado::mpl::apply&lt; ScalarParameterEntry&lt; _, EvalTypeTraits &gt;, EvalType &gt;::type &gt;</type>
      <name>getEntry</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>acd84836409021859cd17a83f5e82d1b4</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const typename Sacado::mpl::apply&lt; ScalarParameterEntry&lt; _, EvalTypeTraits &gt;, EvalType &gt;::type &gt;</type>
      <name>getEntry</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a77e6e4fb66fa16561dc35c435048c2a6</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>addf5d49382fdbcadf0112be41e95e5a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a14e9fad7a4ae6946e086174424a06b79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a3cc1036ebb61ba84625d059cabc39d0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>aa47da37dca38164794cacefa1e3d36e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a581eb5a9ab87e38994219f815ff12482</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillVector</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>af51261f4dc7d0700c21cc30d76aba609</anchor>
      <arglist>(const Teuchos::Array&lt; std::string &gt; &amp;names, const Teuchos::Array&lt; BaseValueType &gt; &amp;values, ParameterVectorBase&lt; ScalarParameterFamily&lt; EvalTypeTraits &gt;, BaseValueType &gt; &amp;pv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>aed211bce5ff0b76c7fcec4b4747f7376</anchor>
      <arglist>(std::ostream &amp;os, bool print_values=false) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; string, Teuchos::RCP&lt; ScalarParameterFamily&lt; EvalTypeTraits &gt; &gt; &gt;</type>
      <name>FamilyMap</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a9166c1370af4ebe8455b440147e31065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FamilyMap</type>
      <name>library</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a2d65e3804e96e2beb8d6c1109e86b465</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ParameterRegistration</name>
    <filename>classSacado_1_1ParameterRegistration.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::ScalarParameterEntry</base>
    <member kind="function">
      <type></type>
      <name>ParameterRegistration</name>
      <anchorfile>classSacado_1_1ParameterRegistration.html</anchorfile>
      <anchor>a6362ecf98db3eb85255079a047cc8073</anchor>
      <arglist>(const std::string &amp;name_, ParameterAccessor&lt; EvalType, EvalTypeTraits &gt; *access_, ParamLib &amp;paramLib)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterRegistration</name>
      <anchorfile>classSacado_1_1ParameterRegistration.html</anchorfile>
      <anchor>a3c0ce2ada4640b10509ca22538ce007e</anchor>
      <arglist>(const std::string &amp;name_, ParameterAccessor&lt; EvalType, EvalTypeTraits &gt; *access_, const Teuchos::RCP&lt; ParamLib &gt; &amp;paramLib)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterRegistration</name>
      <anchorfile>classSacado_1_1ParameterRegistration.html</anchorfile>
      <anchor>a3cc1215eb44a668965748eb4f4f9142b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRealValue</name>
      <anchorfile>classSacado_1_1ParameterRegistration.html</anchorfile>
      <anchor>a4bb06b9ffaf299fae742b8bec0e4389c</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classSacado_1_1ParameterRegistration.html</anchorfile>
      <anchor>add8ec36c46738d6953c3ed94ced7ac85</anchor>
      <arglist>(const ScalarT &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScalarT &amp;</type>
      <name>getValue</name>
      <anchorfile>classSacado_1_1ParameterRegistration.html</anchorfile>
      <anchor>a9099bc79b57f68f6cd7ea2b58491ae48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParameterAccessor&lt; EvalType, EvalTypeTraits &gt; *</type>
      <name>access</name>
      <anchorfile>classSacado_1_1ParameterRegistration.html</anchorfile>
      <anchor>aa0bcc740cb8d32864b8f4b626e89021b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ParameterVectorBase</name>
    <filename>classSacado_1_1ParameterVectorBase.html</filename>
    <templarg>FamilyType</templarg>
    <templarg>BaseValueType</templarg>
    <class kind="struct">Sacado::ParameterVectorBase::Entry</class>
    <member kind="typedef">
      <type>EntryVector::iterator</type>
      <name>iterator</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>ac50661fb760b188b5e984335ec46b1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntryVector::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>ae10a06d0d0f79402a4ad04f64a3b5f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterVectorBase</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>af4e8b5cc9833f57910fc67f1480c8161</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterVectorBase</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>ab4c7674ff2fd9a33cec2138ebca5b5d2</anchor>
      <arglist>(const ParameterVectorBase &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterVectorBase</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a9c500b87c6b5ae4a613fe2318fa64866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParameterVectorBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>adcecf013ec8e38f475b29e6e34a2451a</anchor>
      <arglist>(const ParameterVectorBase &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParam</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a3209ba60c0bd374f34c737bd7559f5a5</anchor>
      <arglist>(const Teuchos::RCP&lt; FamilyType &gt; &amp;family, BaseValueType baseValue)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a972f9a5484f788a63739676179533ade</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Entry &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>adc6b2094508fa8b3edb28047674a5b0c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const Entry &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a53fcf10868abc690ff3f41c89e626eb2</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>aa9542bfdb2e419bbbe86b98a3ae777eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a07c9ce67e363db570db9948f1afb77a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>ae95835455aeb738b6c23054d18b36bb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a0bb08d36e15b3ebdfb7884ce8f77fbaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterParameters</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a196a6f0528902d5dcd7b8875dff814a5</anchor>
      <arglist>(ParameterVectorBase &amp;ad, ParameterVectorBase &amp;analytic, ParameterVectorBase &amp;other, std::vector&lt; int &gt; &amp;index_ad, std::vector&lt; int &gt; &amp;index_analytic, std::vector&lt; int &gt; &amp;index_other)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Teuchos::Array&lt; Entry &gt;</type>
      <name>EntryVector</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a7188680f3c3361cfa383a56b6d453f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntryVector</type>
      <name>params</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a3d7cedb79e9e31797e0eafe466bb52ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParameterVectorBase&lt; ScalarParameterFamily&lt; EvalTypeTraits &gt;, double &gt;</name>
    <filename>classSacado_1_1ParameterVectorBase.html</filename>
    <member kind="typedef">
      <type>EntryVector::iterator</type>
      <name>iterator</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>ac50661fb760b188b5e984335ec46b1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntryVector::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>ae10a06d0d0f79402a4ad04f64a3b5f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterVectorBase</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>af4e8b5cc9833f57910fc67f1480c8161</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterVectorBase</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>ab4c7674ff2fd9a33cec2138ebca5b5d2</anchor>
      <arglist>(const ParameterVectorBase &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterVectorBase</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a9c500b87c6b5ae4a613fe2318fa64866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParameterVectorBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>adcecf013ec8e38f475b29e6e34a2451a</anchor>
      <arglist>(const ParameterVectorBase &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParam</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a3209ba60c0bd374f34c737bd7559f5a5</anchor>
      <arglist>(const Teuchos::RCP&lt; ScalarParameterFamily&lt; EvalTypeTraits &gt; &gt; &amp;family, double baseValue)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a972f9a5484f788a63739676179533ade</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entry &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>adc6b2094508fa8b3edb28047674a5b0c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const Entry &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a53fcf10868abc690ff3f41c89e626eb2</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>aa9542bfdb2e419bbbe86b98a3ae777eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a07c9ce67e363db570db9948f1afb77a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>ae95835455aeb738b6c23054d18b36bb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a0bb08d36e15b3ebdfb7884ce8f77fbaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterParameters</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a196a6f0528902d5dcd7b8875dff814a5</anchor>
      <arglist>(ParameterVectorBase &amp;ad, ParameterVectorBase &amp;analytic, ParameterVectorBase &amp;other, std::vector&lt; int &gt; &amp;index_ad, std::vector&lt; int &gt; &amp;index_analytic, std::vector&lt; int &gt; &amp;index_other)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Teuchos::Array&lt; Entry &gt;</type>
      <name>EntryVector</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a7188680f3c3361cfa383a56b6d453f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntryVector</type>
      <name>params</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a3d7cedb79e9e31797e0eafe466bb52ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::PowerOp</name>
    <filename>classSacado_1_1LFad_1_1PowerOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::PowerOp</name>
    <filename>classSacado_1_1CacheFad_1_1PowerOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::PowerOp</name>
    <filename>classSacado_1_1ELRFad_1_1PowerOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::PowerOp</name>
    <filename>classSacado_1_1Fad_1_1PowerOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::PowerOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1PowerOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::PowExprType</name>
    <filename>structSacado_1_1Tay_1_1PowExprType.html</filename>
    <templarg>ExprT1</templarg>
    <templarg>ExprT2</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::PowExprType&lt; ExprT1, typename ExprT1::value_type &gt;</name>
    <filename>structSacado_1_1Tay_1_1PowExprType_3_01ExprT1_00_01typename_01ExprT1_1_1value__type_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::PowExprType&lt; typename ExprT2::value_type, ExprT2 &gt;</name>
    <filename>structSacado_1_1Tay_1_1PowExprType_3_01typename_01ExprT2_1_1value__type_00_01ExprT2_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote</name>
    <filename>structSacado_1_1Promote.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  double, float, void &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01double_00_01float_00_01void_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  double, int, void &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01double_00_01int_00_01void_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  double, long, void &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01double_00_01long_00_01void_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  float, double, void &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01float_00_01double_00_01void_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  float, int, void &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01float_00_01int_00_01void_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  float, long, void &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01float_00_01long_00_01void_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  int, double, void &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01int_00_01double_00_01void_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  int, float, void &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01int_00_01float_00_01void_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  long, double, void &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01long_00_01double_00_01void_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  long, float, void &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01long_00_01float_00_01void_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  Rad2::ADvar&lt; T &gt;,           Rad2::ADvari&lt; T &gt; &amp; &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01Rad2_1_1ADvar_3_01T_01_4_00_01_01_01_01_01_01_01_01_01_01_01Rad2_1_1ADvari_3_01T_01_4_01_6_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  Rad2::ADvari&lt; T &gt; &amp;,           Rad2::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01Rad2_1_1ADvari_3_01T_01_4_01_6_00_01_01_01_01_01_01_01_01_01_01_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  Rad2::ADvari&lt; T &gt; &amp;,   typename dummy&lt; typename Rad2::ADvari&lt; T &gt;::value_type,   typename Rad2::ADvari&lt; T &gt;::scalar_type   &gt;::type &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01Rad2_1_1ADvari_3_01T_01_4_01_6_00_01_01_01typename_01dummy_3_01tyc88c1d431b8c26193641733c59cca7a2.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  Rad2::ADvari&lt; T &gt; &amp;,   typename Rad2::ADvari&lt; T &gt;::value_type &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01Rad2_1_1ADvari_3_01T_01_4_01_6_00_01_01_01typename_01Rad2_1_1ADvade5622d8f211c7a22d5d949ce7f532c4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  Rad::ADvar&lt; T &gt;,           Rad::ADvari&lt; T &gt; &amp; &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01Rad_1_1ADvar_3_01T_01_4_00_01_01_01_01_01_01_01_01_01_01_01Rad_1_1ADvari_3_01T_01_4_01_6_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  Rad::ADvari&lt; T &gt; &amp;,           Rad::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01Rad_1_1ADvari_3_01T_01_4_01_6_00_01_01_01_01_01_01_01_01_01_01_01Rad_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  Rad::ADvari&lt; T &gt; &amp;,   typename dummy&lt; typename Rad::ADvari&lt; T &gt;::value_type,   typename Rad::ADvari&lt; T &gt;::scalar_type   &gt;::type &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01Rad_1_1ADvari_3_01T_01_4_01_6_00_01_01_01typename_01dummy_3_01typ34498f213b2da698eb123dd261f60a89.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  Rad::ADvari&lt; T &gt; &amp;,   typename Rad::ADvari&lt; T &gt;::value_type &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01Rad_1_1ADvari_3_01T_01_4_01_6_00_01_01_01typename_01Rad_1_1ADvari_3_01T_01_4_1_1value__type_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  RadVec::ADvar&lt; T &gt;,           RadVec::ADvari&lt; T &gt; &amp; &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01RadVec_1_1ADvar_3_01T_01_4_00_01_01_01_01_01_01_01_01_01_01_01Rad575e277110e90f2348d3ce02e16ad617.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  RadVec::ADvari&lt; T &gt; &amp;,           RadVec::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01RadVec_1_1ADvari_3_01T_01_4_01_6_00_01_01_01_01_01_01_01_01_01_0167e89343c34b333c503adecb13fe73a7.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  RadVec::ADvari&lt; T &gt; &amp;,   typename dummy&lt; typename RadVec::ADvari&lt; T &gt;::value_type,   typename RadVec::ADvari&lt; T &gt;::scalar_type   &gt;::type &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01RadVec_1_1ADvari_3_01T_01_4_01_6_00_01_01_01typename_01dummy_3_018574cb6ebb455220d6e82d99a29d6a99.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt;  RadVec::ADvari&lt; T &gt; &amp;,   typename RadVec::ADvari&lt; T &gt;::value_type &gt;</name>
    <filename>structSacado_1_1Promote_3_01_01RadVec_1_1ADvari_3_01T_01_4_01_6_00_01_01_01typename_01RadVec_1_1cb69303a534df1699635e2e777f2f852.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; A, A,                                                                                                                           typename mpl::enable_if_c&lt; !OverrideDefaultPromote&lt; A &gt;::value &gt;::type &gt;</name>
    <filename>structSacado_1_1Promote_3_01A_00_01A_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01569f54590ad70824d2ab7172c5277749.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; !mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   !mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   IsExpr&lt; A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   IsExpr&lt; B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   mpl::is_same&lt; typename BaseExprType&lt; typename A::value_type &gt;::type,                                                                                                                                                                                                                                                                                                                                                                                                                                                                   typename BaseExprType&lt; typename B::value_type &gt;::type &gt;::value                                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</name>
    <filename>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_010278e8e9602681c7b2e427d90e48239c.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; !mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   !mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   IsExpr&lt; A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   mpl::is_convertible&lt; B, typename BaseExprType&lt; typename A::value_type &gt;::type &gt;::value                                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</name>
    <filename>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_0172513836036ea9f38c44af841c7cc802.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; !mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   !mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   IsExpr&lt; B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                           mpl::is_convertible&lt; A, typename BaseExprType&lt; typename B::value_type &gt;::type &gt;::value                                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</name>
    <filename>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01d560a6d7d561e685e5ea5666ee784693.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !OverrideDefaultPromote&lt; A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !OverrideDefaultPromote&lt; B &gt;::value                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</name>
    <filename>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01fa19777bba2aa1a9dc4173a09dc91886.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !OverrideDefaultPromote&lt; A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !OverrideDefaultPromote&lt; B &gt;::value                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</name>
    <filename>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01328b7bce7de7c35898286b195b912500.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; typename dummy&lt; typename Rad2::ADvari&lt; T &gt;::value_type,   typename Rad2::ADvari&lt; T &gt;::scalar_type   &gt;::type,           Rad2::ADvari&lt; T &gt; &amp; &gt;</name>
    <filename>structSacado_1_1Promote_3_01typename_01dummy_3_01typename_01Rad2_1_1ADvari_3_01T_01_4_1_1value__9bb8b07d246eef81018b321bf8ff2206.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; typename dummy&lt; typename Rad::ADvari&lt; T &gt;::value_type,   typename Rad::ADvari&lt; T &gt;::scalar_type   &gt;::type,           Rad::ADvari&lt; T &gt; &amp; &gt;</name>
    <filename>structSacado_1_1Promote_3_01typename_01dummy_3_01typename_01Rad_1_1ADvari_3_01T_01_4_1_1value__t2ddb79bfae0c5f85da31ef451edd3baa.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; typename dummy&lt; typename RadVec::ADvari&lt; T &gt;::value_type,   typename RadVec::ADvari&lt; T &gt;::scalar_type   &gt;::type,           RadVec::ADvari&lt; T &gt; &amp; &gt;</name>
    <filename>structSacado_1_1Promote_3_01typename_01dummy_3_01typename_01RadVec_1_1ADvari_3_01T_01_4_1_1value92e9c80c7de7e7155a024c7516411825.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; typename Rad2::ADvari&lt; T &gt;::value_type,           Rad2::ADvari&lt; T &gt; &amp; &gt;</name>
    <filename>structSacado_1_1Promote_3_01typename_01Rad2_1_1ADvari_3_01T_01_4_1_1value__type_00_01_01_01_01_0884b68348543e508df5609d9e8972672.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; typename Rad::ADvari&lt; T &gt;::value_type,           Rad::ADvari&lt; T &gt; &amp; &gt;</name>
    <filename>structSacado_1_1Promote_3_01typename_01Rad_1_1ADvari_3_01T_01_4_1_1value__type_00_01_01_01_01_0106b23b9520c6f382578cb94245aeb0eb.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; typename RadVec::ADvari&lt; T &gt;::value_type,           RadVec::ADvari&lt; T &gt; &amp; &gt;</name>
    <filename>structSacado_1_1Promote_3_01typename_01RadVec_1_1ADvari_3_01T_01_4_1_1value__type_00_01_01_01_01961a545666277c007ba929af10799067.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Promote&lt; value_type_1, value_type_2 &gt;</name>
    <filename>structSacado_1_1Promote.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::push_back</name>
    <filename>structSacado_1_1mpl_1_1push__back.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::push_back_impl</name>
    <filename>structSacado_1_1mpl_1_1push__back__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote</name>
    <filename>structSacado_1_1mpl_1_1quote.html</filename>
    <templarg></templarg>
    <base>Sacado::mpl::quote0</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote0</name>
    <filename>structSacado_1_1mpl_1_1quote0.html</filename>
    <templarg></templarg>
    <class kind="struct">Sacado::mpl::quote0::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote1</name>
    <filename>structSacado_1_1mpl_1_1quote1.html</filename>
    <templarg>F</templarg>
    <class kind="struct">Sacado::mpl::quote1::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote2</name>
    <filename>structSacado_1_1mpl_1_1quote2.html</filename>
    <templarg>F</templarg>
    <class kind="struct">Sacado::mpl::quote2::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote3</name>
    <filename>structSacado_1_1mpl_1_1quote3.html</filename>
    <templarg>F</templarg>
    <class kind="struct">Sacado::mpl::quote3::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote4</name>
    <filename>structSacado_1_1mpl_1_1quote4.html</filename>
    <templarg>F</templarg>
    <class kind="struct">Sacado::mpl::quote4::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote5</name>
    <filename>structSacado_1_1mpl_1_1quote5.html</filename>
    <templarg>F</templarg>
    <class kind="struct">Sacado::mpl::quote5::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote&lt; F&lt; T1 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1quote_3_01F_3_01T1_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <base>Sacado::mpl::quote1</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote&lt; F&lt; T1, T2 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1quote_3_01F_3_01T1_00_01T2_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::mpl::quote2</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote&lt; F&lt; T1, T2, T3 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1quote_3_01F_3_01T1_00_01T2_00_01T3_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::mpl::quote3</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote&lt; F&lt; T1, T2, T3, T4 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1quote_3_01F_3_01T1_00_01T2_00_01T3_00_01T4_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::mpl::quote4</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1quote_3_01F_3_01T1_00_01T2_00_01T3_00_01T4_00_01T5_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::mpl::quote5</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::RAD_DoubleIgnore</name>
    <filename>classSacado_1_1Rad_1_1RAD__DoubleIgnore.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::RAD_DoubleIgnore</name>
    <filename>classSacado_1_1Rad2_1_1RAD__DoubleIgnore.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::RAD_DoubleIgnore</name>
    <filename>classSacado_1_1RadVec_1_1RAD__DoubleIgnore.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::range_c</name>
    <filename>structSacado_1_1mpl_1_1range__c.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg>M</templarg>
    <templarg>Delta</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::range_c_iterator</name>
    <filename>structSacado_1_1mpl_1_1range__c__iterator.html</filename>
    <templarg></templarg>
    <templarg>Pos</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::range_c_tag</name>
    <filename>structSacado_1_1mpl_1_1range__c__tag.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::RemoveConst</name>
    <filename>structSacado_1_1RemoveConst.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::RemoveConst&lt; const T &gt;</name>
    <filename>structSacado_1_1RemoveConst_3_01const_01T_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::FlopCounterPack::ScalarFlopCounter</name>
    <filename>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</filename>
    <templarg>T</templarg>
    <base>Base&lt; ScalarFlopCounter&lt; T &gt; &gt;</base>
    <class kind="struct">Sacado::FlopCounterPack::ScalarFlopCounter::apply</class>
    <member kind="typedef">
      <type>RemoveConst&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a38f0441abe5c8808801f615dba0e15e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a2307fa3e82c2f5df62717543bc79327b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarFlopCounter</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>acf3007d9715f7986f6879b30e748b646</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarFlopCounter</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>ab03caaad7f9ad5c070a1e7327f595f6b</anchor>
      <arglist>(const S &amp;v, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a672021afb5bd5645298e9781177e0d73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>val</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a68ab4e2153fa4ce1aec756466e5a612a</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetCounters</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a97dfdbc7fd9e1030ee5936a151260056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>finalizeCounters</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>ae0d9ee66fc5d1cdada68a0e437533fdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FlopCounts</type>
      <name>getCounters</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a612d9e35af02af85278e2d88b6c07b06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printCounters</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a886ad91da1959897f8f945d2275dd220</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>incrCounter</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a609f8c5af22fc60f254f45e80df6c083</anchor>
      <arglist>(const FlopCounts::EFlopType &amp;ft)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetCounters</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a97dfdbc7fd9e1030ee5936a151260056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>finalizeCounters</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>ae0d9ee66fc5d1cdada68a0e437533fdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FlopCounts</type>
      <name>getCounters</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a612d9e35af02af85278e2d88b6c07b06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printCounters</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a886ad91da1959897f8f945d2275dd220</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarFlopCounter</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>acf3007d9715f7986f6879b30e748b646</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarFlopCounter</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>ab03caaad7f9ad5c070a1e7327f595f6b</anchor>
      <arglist>(const S &amp;v, typename Sacado::mpl::enable_if&lt; Sacado::mpl::is_convertible&lt; S, value_type &gt;, void * &gt;::type=0)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a672021afb5bd5645298e9781177e0d73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>val</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a68ab4e2153fa4ce1aec756466e5a612a</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>incrCounter</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a609f8c5af22fc60f254f45e80df6c083</anchor>
      <arglist>(const FlopCounts::EFlopType &amp;ft)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ScalarParameterEntry</name>
    <filename>classSacado_1_1ScalarParameterEntry.html</filename>
    <templarg>EvalType</templarg>
    <templarg>EvalTypeTraits</templarg>
    <base>Sacado::AbstractScalarParameterEntry</base>
    <member kind="function">
      <type></type>
      <name>ScalarParameterEntry</name>
      <anchorfile>classSacado_1_1ScalarParameterEntry.html</anchorfile>
      <anchor>ad3377606fd4f323bd775451ba86af0ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarParameterEntry</name>
      <anchorfile>classSacado_1_1ScalarParameterEntry.html</anchorfile>
      <anchor>a6719591c61b7db2018189df50fe89f18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classSacado_1_1ScalarParameterEntry.html</anchorfile>
      <anchor>a2159dbec8c10b053a6ab31395a6b28b5</anchor>
      <arglist>(const ScalarT &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const ScalarT &amp;</type>
      <name>getValue</name>
      <anchorfile>classSacado_1_1ScalarParameterEntry.html</anchorfile>
      <anchor>a7073d0414aff4da2b34c582db879c1fe</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRealValue</name>
      <anchorfile>classSacado_1_1ScalarParameterEntry.html</anchorfile>
      <anchor>a5fcb2577aafa7e4d81d3243e150ad8fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSacado_1_1ScalarParameterEntry.html</anchorfile>
      <anchor>a4cdcce7d7eeb557f406edc1f83289378</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ScalarParameterFamily</name>
    <filename>classSacado_1_1ScalarParameterFamily.html</filename>
    <templarg>EvalTypeTraits</templarg>
    <base>ParameterFamilyBase&lt; AbstractScalarParameterEntry, ScalarParameterEntry&lt; _, EvalTypeTraits &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>ScalarParameterFamily</name>
      <anchorfile>classSacado_1_1ScalarParameterFamily.html</anchorfile>
      <anchor>a913957118849b9cf1e18d7f97b670e0a</anchor>
      <arglist>(const std::string &amp;name_, bool supports_ad_, bool supports_analytic_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarParameterFamily</name>
      <anchorfile>classSacado_1_1ScalarParameterFamily.html</anchorfile>
      <anchor>adb9bdb3404b6cc591fb2a7248515ae37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRealValueForAllTypes</name>
      <anchorfile>classSacado_1_1ScalarParameterFamily.html</anchorfile>
      <anchor>a767e56ee362f435c77d9eff1ebfd50a5</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRealValue</name>
      <anchorfile>classSacado_1_1ScalarParameterFamily.html</anchorfile>
      <anchor>abe2b752d3a0c505d16bb0705b57e208e</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSacado_1_1ScalarParameterFamily.html</anchorfile>
      <anchor>ad16652b53110e5ffea39144145f7c8ac</anchor>
      <arglist>(const typename EvalTypeTraits::template apply&lt; EvalType &gt;::type &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRealValue</name>
      <anchorfile>classSacado_1_1ScalarParameterFamily.html</anchorfile>
      <anchor>ad39bcff205acf3e28d7426cf40a2e2fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const EvalTypeTraits::template apply&lt; EvalType &gt;::type &amp;</type>
      <name>getValue</name>
      <anchorfile>classSacado_1_1ScalarParameterFamily.html</anchorfile>
      <anchor>a9b3c438aec7d146f3af9ce5612393f23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::ScalarParameterEntry&lt; EvalType &gt;::ScalarT</type>
      <name>getValue</name>
      <anchorfile>classSacado_1_1ScalarParameterFamily.html</anchorfile>
      <anchor>ad8a9bf36b698953c3cc1e7cb30e0d809</anchor>
      <arglist>(const ScalarParameterFamily&lt; EvalTypeTraits &gt; &amp;spf)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ScalarParameterLibrary</name>
    <filename>classSacado_1_1ScalarParameterLibrary.html</filename>
    <templarg></templarg>
    <base>ParameterLibraryBase&lt; ScalarParameterFamily&lt; EvalTypeTraits &gt;, ScalarParameterEntry&lt; _, EvalTypeTraits &gt; &gt;</base>
    <member kind="typedef">
      <type>ParameterLibraryBase&lt; ScalarParameterFamily&lt; EvalTypeTraits &gt;, ScalarParameterEntry&lt; _, EvalTypeTraits &gt; &gt;</type>
      <name>BaseT</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>a42f825db3c42f357d27e5ad14106face</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarParameterLibrary</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>a289fef40bc546c4a26f337c59ded7f72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarParameterLibrary</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>a68017f0ef59fd487a4c81b7ced2c92dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRealValueForAllTypes</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>a6928a021ecd9165173280dc74a4f8e51</anchor>
      <arglist>(const std::string &amp;name, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRealValue</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>a2712d7fa5b82c98084922aeec4c36a37</anchor>
      <arglist>(const std::string &amp;name, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>a5f51dee1446f09f6799c7fa09030ae63</anchor>
      <arglist>(const std::string &amp;name, const typename EvalTypeTraits::template apply&lt; EvalType &gt;::type &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRealValue</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>aa8df116638adf2c3a840f2baf7d5900e</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const EvalTypeTraits::template apply&lt; EvalType &gt;::type &amp;</type>
      <name>getValue</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>a78e450ea012dba35ee0858e4b804f60e</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillVector</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>a584e45496649f87272bb229a6e5f92e9</anchor>
      <arglist>(const Teuchos::Array&lt; std::string &gt; &amp;names, ScalarParameterVector&lt; EvalTypeTraits &gt; &amp;pv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ScalarParameterLibrary &amp;</type>
      <name>getInstance</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>a2d43cddae2fd1f7d3dc9d465aee11e65</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ScalarParameterVector</name>
    <filename>classSacado_1_1ScalarParameterVector.html</filename>
    <templarg>EvalTypeTraits</templarg>
    <base>ParameterVectorBase&lt; ScalarParameterFamily&lt; EvalTypeTraits &gt;, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>ScalarParameterVector</name>
      <anchorfile>classSacado_1_1ScalarParameterVector.html</anchorfile>
      <anchor>a5544f2649d56f5e620717fd3a5d84625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarParameterVector</name>
      <anchorfile>classSacado_1_1ScalarParameterVector.html</anchorfile>
      <anchor>a7a7ddc4c2b1df98159c3399b67695046</anchor>
      <arglist>(const ScalarParameterVector &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarParameterVector</name>
      <anchorfile>classSacado_1_1ScalarParameterVector.html</anchorfile>
      <anchor>a2cd55fb7744ceeabaf9d4850bfbc0b17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScalarParameterVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ScalarParameterVector.html</anchorfile>
      <anchor>a394d784157ddf69ff8853e119a76091a</anchor>
      <arglist>(const ScalarParameterVector &amp;source)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType</name>
    <filename>structSacado_1_1ScalarType.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt;  bool &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01_01bool_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt;  char &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01_01char_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt;  double &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01_01double_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt;  float &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01_01float_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt;  int &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt;  long &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt;  unsigned int &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01_01unsigned_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt;  unsigned long &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01_01unsigned_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; CacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; const T &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01const_01T_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Fad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; LFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Rad2::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Rad2::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Rad2_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Rad::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Rad::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Rad_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; RadVec::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; RadVec::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01RadVec_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Tay::CacheTaylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Tay::Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue</name>
    <filename>structSacado_1_1ScalarValue.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt;  bool &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01_01bool_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt;  char &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01_01char_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt;  double &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01_01double_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt;  float &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01_01float_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt;  int &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt;  long &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt;  unsigned int &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01_01unsigned_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt;  unsigned long &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01_01unsigned_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; CacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Fad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; LFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Rad2::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Rad::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; RadVec::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Tay::CacheTaylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Tay::Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::SFad</name>
    <filename>classSacado_1_1ELRCacheFad_1_1SFad.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::SFad</name>
    <filename>classSacado_1_1CacheFad_1_1SFad.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::SFad</name>
    <filename>classSacado_1_1Fad_1_1SFad.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::FAD_NS::SFad</name>
    <filename>classSacado_1_1FAD__NS_1_1SFad.html</filename>
    <templarg>ValueT</templarg>
    <templarg>Num</templarg>
    <class kind="struct">Sacado::FAD_NS::SFad::apply</class>
    <member kind="typedef">
      <type>Expr&lt; SFadExprTag&lt; ValueT, Num &gt; &gt;</type>
      <name>ExprType</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a590e1f0bf8fb932af51a41cbe30133e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a8f48f7fc04661b78487cab9644ac3b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a1ef9ce7ef968541ba239721d4995afa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ValueT &gt;::type</type>
      <name>ScalarT</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>aa664bc475be713947c72c556403f8502</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a7087eac2f4fb9ffc78d68b85fb31a1e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a0b38d48146518f190428b541c7035d50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a99eb16db54f759cf5e33125fb072d478</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a375be0d3f3d52b772ab3f0baf9e071ca</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a521f3b5f04c4b8cb05ffb9c2592b33ed</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a1a0fbc797535829084419e9442562636</anchor>
      <arglist>(const SFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a3d244ec957945432b6812f29dc1de187</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a0b38d48146518f190428b541c7035d50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a99eb16db54f759cf5e33125fb072d478</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a375be0d3f3d52b772ab3f0baf9e071ca</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a521f3b5f04c4b8cb05ffb9c2592b33ed</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a1a0fbc797535829084419e9442562636</anchor>
      <arglist>(const SFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a3d244ec957945432b6812f29dc1de187</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::SFad</name>
    <filename>classSacado_1_1ELRFad_1_1SFad.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::CacheFad::SFadExprTag</name>
    <filename>structSacado_1_1CacheFad_1_1SFadExprTag.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::SFadExprTag</name>
    <filename>structSacado_1_1ELRFad_1_1SFadExprTag.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::SFadExprTag</name>
    <filename>structSacado_1_1ELRCacheFad_1_1SFadExprTag.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::SFadExprTag</name>
    <filename>structSacado_1_1Fad_1_1SFadExprTag.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::SimpleFad</name>
    <filename>classSacado_1_1Fad_1_1SimpleFad.html</filename>
    <templarg>ValueT</templarg>
    <base>GeneralFad&lt; ValueT, DynamicStorage&lt; ValueT &gt; &gt;</base>
    <class kind="struct">Sacado::Fad::SimpleFad::apply</class>
    <member kind="typedef">
      <type>DynamicStorage&lt; ValueT &gt;</type>
      <name>StorageType</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a30f3ef95946b35e4d3ec2ebebf8e2657</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeneralFadType::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a930a64634152f4df988c1c46bf6b4b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeneralFadType::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a8b767419721823cac398217b64ee736b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ValueT &gt;::type</type>
      <name>ScalarT</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a10e644e3cdf751f081d424d39acc6ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a51fe893e36d90c1bd52b6a8629943e7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a341bdc4adf45529ed0dbf84c833186c3</anchor>
      <arglist>(const SimpleFad &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>ae7d1a202920d6142324192c781b480c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a6894e48ffa223163a7cf606ccf65b5e9</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a1b0ba70cb47c585caacfa6d2ab894f75</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>ab2c314c4c01d14cd6943c85259906d29</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a98613d2688b3867cb470dfaa10f2598b</anchor>
      <arglist>(const SimpleFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a6d5b37610775f53d1161083796d0093a</anchor>
      <arglist>(const SimpleFad &amp;x, const ValueT &amp;v, const ValueT &amp;partial)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>ae7d1a202920d6142324192c781b480c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a6894e48ffa223163a7cf606ccf65b5e9</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a1b0ba70cb47c585caacfa6d2ab894f75</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>ab2c314c4c01d14cd6943c85259906d29</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a98613d2688b3867cb470dfaa10f2598b</anchor>
      <arglist>(const SimpleFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a6d5b37610775f53d1161083796d0093a</anchor>
      <arglist>(const SimpleFad &amp;x, const ValueT &amp;v, const ValueT &amp;partial)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::SinhOp</name>
    <filename>classSacado_1_1CacheFad_1_1SinhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::SinhOp</name>
    <filename>classSacado_1_1Fad_1_1SinhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::SinhOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1SinhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::SinhOp</name>
    <filename>classSacado_1_1ELRFad_1_1SinhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::SinhOp</name>
    <filename>classSacado_1_1Tay_1_1SinhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::SinhOp</name>
    <filename>classSacado_1_1LFad_1_1SinhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::SinOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1SinOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::SinOp</name>
    <filename>classSacado_1_1Fad_1_1SinOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::SinOp</name>
    <filename>classSacado_1_1LFad_1_1SinOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::SinOp</name>
    <filename>classSacado_1_1Tay_1_1SinOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::SinOp</name>
    <filename>classSacado_1_1ELRFad_1_1SinOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::SinOp</name>
    <filename>classSacado_1_1CacheFad_1_1SinOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::size</name>
    <filename>structSacado_1_1mpl_1_1size.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::size_impl</name>
    <filename>structSacado_1_1mpl_1_1size__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::size_impl&lt; range_c_tag &gt;</name>
    <filename>structSacado_1_1mpl_1_1size__impl_3_01range__c__tag_01_4.html</filename>
    <class kind="struct">Sacado::mpl::size_impl&lt; range_c_tag &gt;::apply</class>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::SLFad</name>
    <filename>classSacado_1_1Fad_1_1SLFad.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::SLFad</name>
    <filename>classSacado_1_1ELRFad_1_1SLFad.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::SLFad</name>
    <filename>classSacado_1_1CacheFad_1_1SLFad.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::FAD_NS::SLFad</name>
    <filename>classSacado_1_1FAD__NS_1_1SLFad.html</filename>
    <templarg>ValueT</templarg>
    <templarg>Num</templarg>
    <class kind="struct">Sacado::FAD_NS::SLFad::apply</class>
    <member kind="typedef">
      <type>Fad::StaticStorage&lt; ValueT, Num &gt;</type>
      <name>StorageType</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a3edfe5e286eba7aa9718df202523f880</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a75b687fb03377a0f2aca49ec1b1d8945</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>aa64bb228a6ed12194e83429f9c8aef32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ValueT &gt;::type</type>
      <name>ScalarT</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a8fedc089f1a9c279e39a3693bca9b67e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a193eef9c0f72c80516e1d8c0290d958f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a8c431f10edccf269fba60dfdfa84ed41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a7464e6c49c4c75dd1751d066dd5585bf</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a72e3ea6c3cdb23f19d44193fbdf12c29</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a1e877ae91708911a93e8dee7a13bb4b1</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>aeeab6cad71c51c714a67da411cafefcf</anchor>
      <arglist>(const SLFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a2bed32b9d5011cc7b53214d9c288dc8b</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a8c431f10edccf269fba60dfdfa84ed41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a7464e6c49c4c75dd1751d066dd5585bf</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a72e3ea6c3cdb23f19d44193fbdf12c29</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a1e877ae91708911a93e8dee7a13bb4b1</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>aeeab6cad71c51c714a67da411cafefcf</anchor>
      <arglist>(const SLFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a2bed32b9d5011cc7b53214d9c288dc8b</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::SLFad</name>
    <filename>classSacado_1_1ELRCacheFad_1_1SLFad.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::GeneralFad::SlowLocalAccumOp</name>
    <filename>structSacado_1_1ELRFad_1_1GeneralFad_1_1SlowLocalAccumOp.html</filename>
    <templarg>ExprT</templarg>
    <base>Sacado::ELRFad::GeneralFad::FastLocalAccumOp</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::GeneralFad::SlowLocalAccumOp</name>
    <filename>structSacado_1_1ELRCacheFad_1_1GeneralFad_1_1SlowLocalAccumOp.html</filename>
    <templarg>ExprT</templarg>
    <base>Sacado::ELRCacheFad::GeneralFad::FastLocalAccumOp</base>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::SqrtOp</name>
    <filename>classSacado_1_1ELRFad_1_1SqrtOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::SqrtOp</name>
    <filename>classSacado_1_1CacheFad_1_1SqrtOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::SqrtOp</name>
    <filename>classSacado_1_1Tay_1_1SqrtOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::SqrtOp</name>
    <filename>classSacado_1_1Fad_1_1SqrtOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::SqrtOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1SqrtOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::SqrtOp</name>
    <filename>classSacado_1_1LFad_1_1SqrtOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ss_array</name>
    <filename>structSacado_1_1ss__array.html</filename>
    <templarg></templarg>
    <templarg>isScalar</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>structSacado_1_1ss__array.html</anchorfile>
      <anchor>abe16ffbfbea866bacc3c9488030afb81</anchor>
      <arglist>(const T *src, T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>zero</name>
      <anchorfile>structSacado_1_1ss__array.html</anchorfile>
      <anchor>a0633d364b1484c0977e70e9ba7ee82c0</anchor>
      <arglist>(T *dest, int sz)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ss_array&lt; T, true &gt;</name>
    <filename>structSacado_1_1ss__array_3_01T_00_01true_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>structSacado_1_1ss__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a9a3dcb1d0c43e9f86491d221c8fd4b0c</anchor>
      <arglist>(const T *src, T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>zero</name>
      <anchorfile>structSacado_1_1ss__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>ad04a6b37f37212a68ecc34e703bc6bce</anchor>
      <arglist>(T *dest, int sz)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StaticSize</name>
    <filename>structSacado_1_1StaticSize.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StaticSize&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StaticSize_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StaticSize&lt; const CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StaticSize_3_01const_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StaticSize&lt; const ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StaticSize_3_01const_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StaticSize&lt; const ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StaticSize_3_01const_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StaticSize&lt; const Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StaticSize_3_01const_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StaticSize&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StaticSize_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StaticSize&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StaticSize_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StaticSize&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StaticSize_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::FAD_NS::StaticStorage</name>
    <filename>classSacado_1_1FAD__NS_1_1StaticStorage.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::StaticStorage</name>
    <filename>classSacado_1_1Fad_1_1StaticStorage.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="function">
      <type></type>
      <name>StaticStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a9d8ae82f26a4f06ad006029f2c71a626</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StaticStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a12351da3af36237c70efc2f6e53c8f41</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StaticStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a44ff948f4dba8a949f1e05e8dba30743</anchor>
      <arglist>(const StaticStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StaticStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a1bcaa8664cfda6fdfc4bc57be8eb8f9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StaticStorage &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>aba6dcc0079a64d499bea0fb7b5ff9050</anchor>
      <arglist>(const StaticStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a6ef5eafab8ba51f339580c389eff0f20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a6875f3aae1a184b7c7535470c32ff9ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>afcdb0932aaecc8d4889cf26dfd39260f</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeAndZero</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a273bfe15fee9b605eb239ff130292ca0</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>aeb9f3f9acefd347f3654249351e26392</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>ad196a74619fe6000040b826556358a66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>aa0af94349e71ca4b557093cd28f3a23e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a60e8d8b5ff6283854b3b822546e9ad90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>ae930b79426e41794ade4a3a62bd1d8c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>aed528d01ea039e14a97a6e67cdc75ad4</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>af1043a0df3a7b14ddfd1d0f958fec222</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>ae50ed7295e490e9624c4cd4206fea178</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a4e8ca8455e71fcc7ec50feb5d1c72e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>dx_</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>aa87fc2c24d0879fd5dbb8e71222b52d6</anchor>
      <arglist>[Num]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sz_</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a49ac17da798cbf1acb245ec134b68549</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName</name>
    <filename>structSacado_1_1StringName.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt;  bool &gt;</name>
    <filename>structSacado_1_1StringName_3_01_01bool_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt;  char &gt;</name>
    <filename>structSacado_1_1StringName_3_01_01char_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt;  double &gt;</name>
    <filename>structSacado_1_1StringName_3_01_01double_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt;  float &gt;</name>
    <filename>structSacado_1_1StringName_3_01_01float_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt;  int &gt;</name>
    <filename>structSacado_1_1StringName_3_01_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt;  long &gt;</name>
    <filename>structSacado_1_1StringName_3_01_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt;  unsigned int &gt;</name>
    <filename>structSacado_1_1StringName_3_01_01unsigned_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt;  unsigned long &gt;</name>
    <filename>structSacado_1_1StringName_3_01_01unsigned_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Rad2::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Rad::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; RadVec::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Tay::CacheTaylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Tay::Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::SubtractionOp</name>
    <filename>classSacado_1_1ELRFad_1_1SubtractionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::SubtractionOp</name>
    <filename>classSacado_1_1Tay_1_1SubtractionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::SubtractionOp</name>
    <filename>classSacado_1_1LFad_1_1SubtractionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::SubtractionOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1SubtractionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::SubtractionOp</name>
    <filename>classSacado_1_1Fad_1_1SubtractionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::SubtractionOp</name>
    <filename>classSacado_1_1CacheFad_1_1SubtractionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::SubtractionOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</name>
    <filename>classSacado_1_1Tay_1_1SubtractionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::SubtractionOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</name>
    <filename>classSacado_1_1Tay_1_1SubtractionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::TanExprType</name>
    <filename>structSacado_1_1Tay_1_1TanExprType.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::TanhExprType</name>
    <filename>structSacado_1_1Tay_1_1TanhExprType.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::TanhOp</name>
    <filename>classSacado_1_1ELRFad_1_1TanhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::TanhOp</name>
    <filename>classSacado_1_1Fad_1_1TanhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::TanhOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1TanhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::TanhOp</name>
    <filename>classSacado_1_1CacheFad_1_1TanhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::TanhOp</name>
    <filename>classSacado_1_1LFad_1_1TanhOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::TanOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1TanOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::TanOp</name>
    <filename>classSacado_1_1CacheFad_1_1TanOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::TanOp</name>
    <filename>classSacado_1_1Fad_1_1TanOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::TanOp</name>
    <filename>classSacado_1_1ELRFad_1_1TanOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::TanOp</name>
    <filename>classSacado_1_1LFad_1_1TanOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::Taylor</name>
    <filename>classSacado_1_1Tay_1_1Taylor.html</filename>
    <templarg>T</templarg>
    <base>Base&lt; Taylor&lt; T &gt; &gt;</base>
    <class kind="struct">Sacado::Tay::Taylor::apply</class>
    <class kind="struct">Sacado::Tay::Taylor::TaylorData</class>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a8cbc00caaf4c2a9f1ebd0fb134bb6876</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>ac14eb72df4330ce692db940eebc1b719</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>af49aa8064c7819a6d41645ab9e0c5429</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a6fc9b2d0a2fef082cbea1c4c7062bdd4</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a36e063a53062b20181cc4492cf968ea3</anchor>
      <arglist>(const typename dummy&lt; value_type, scalar_type &gt;::type &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>aae502dadfc4a7455471c93f97272f2a1</anchor>
      <arglist>(int d, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>ad16d8fdf3699d2a1312faaca969670ef</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a30feeb66c816737dd44451281a061b50</anchor>
      <arglist>(const Taylor &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a8c6d81474bbb44d4454fa3886fe756ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>ac469df1ba9c5dd21ebe0648edc07d78c</anchor>
      <arglist>(int d, bool keep_coeffs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a297afd624690da7796c0f006b9ecf9e9</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyForWrite</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a58174f3b485800a17f2e9bda4b9fadac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a7eb251e136e59a420dbc46714e053a7a</anchor>
      <arglist>(const Taylor &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a2f8cea83c7eba99013ff69c8db3e2250</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a2ab6d111bcc4ae9c3fa2dcd5266c2083</anchor>
      <arglist>(const typename dummy&lt; value_type, scalar_type &gt;::type &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>acd216552e11050bee7ebfcce01435618</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>adc3d0d175c6f7188e32ddbdb13043d84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>afadb5739340bf7366613ad1a229fce8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a552a5085d6d145ff4a515fcc5beb20eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>ac5c5f2ccfc476a6d945c3b3af6fd5fee</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>ac6ea85f553d69f79fc7a4ec6c011c9db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a445a3e2ee91a7d8808cf32ad674aefa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a0712abcf96dd3a1138c0c53b5fa24236</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a8da17eb2091f82a191af38c93da35a27</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a36dd8bb4b980794d03b681edc8b0831b</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a555dc23f5e235bcbd079c0bcd893f9d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>aeb25a6d993e5c6bf934c3cc21e90f15c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a4c2e9678bd604178db8fc7052eae3ba8</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a0684f9fd35b2e8c14575ad58b2ac7131</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a55d3f2dbbcc707d969f07f42e2cfeaee</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a0a445670328fa5b784997534129a25ec</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a9a1e588d2cfe0135ff9be5a1885ad566</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a84b7e3aa871bfe3750166b39e170174a</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a41ac82b23e8d019f5c44f2b15c932dd2</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>abf2c417b01ab28ad2a8d2f48136dc7e0</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>length</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>acc10a4bea1d26cda05216560ecb2cee8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resizeCoeffs</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a20d1da29e1c7a8bcff11b338047e26c4</anchor>
      <arglist>(int len)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a2f8cea83c7eba99013ff69c8db3e2250</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a2ab6d111bcc4ae9c3fa2dcd5266c2083</anchor>
      <arglist>(const typename dummy&lt; value_type, scalar_type &gt;::type &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>acd216552e11050bee7ebfcce01435618</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>adc3d0d175c6f7188e32ddbdb13043d84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>afadb5739340bf7366613ad1a229fce8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a552a5085d6d145ff4a515fcc5beb20eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>ac5c5f2ccfc476a6d945c3b3af6fd5fee</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>ac6ea85f553d69f79fc7a4ec6c011c9db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a445a3e2ee91a7d8808cf32ad674aefa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a0712abcf96dd3a1138c0c53b5fa24236</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a8da17eb2091f82a191af38c93da35a27</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a36dd8bb4b980794d03b681edc8b0831b</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a555dc23f5e235bcbd079c0bcd893f9d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>aeb25a6d993e5c6bf934c3cc21e90f15c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a4c2e9678bd604178db8fc7052eae3ba8</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a0684f9fd35b2e8c14575ad58b2ac7131</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a55d3f2dbbcc707d969f07f42e2cfeaee</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a0a445670328fa5b784997534129a25ec</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a9a1e588d2cfe0135ff9be5a1885ad566</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a84b7e3aa871bfe3750166b39e170174a</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a41ac82b23e8d019f5c44f2b15c932dd2</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>abf2c417b01ab28ad2a8d2f48136dc7e0</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::Taylor::TaylorData</name>
    <filename>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</filename>
    <member kind="function">
      <type></type>
      <name>TaylorData</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>ad9dc7d16079276f18436106b69d17bdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaylorData</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>ae10a2c40e6d521f0e77eabbb2099df8b</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaylorData</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>a4f8593a885103c3ae3276a1a81d3c187</anchor>
      <arglist>(int d, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaylorData</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>ab23f4b4f05002b7df642f6af742fd071</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaylorData</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>a134da53d009456add72c732e3dbac577</anchor>
      <arglist>(int d, int l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaylorData</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>acb59e84eb373d91fb83325f41c20cbea</anchor>
      <arglist>(const TaylorData &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TaylorData</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>afafb2441e8b3e90870cf15d417ad1c1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TaylorData &amp;</type>
      <name>operator=</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>a47a91231dbda4ab83f8aca30d705f30f</anchor>
      <arglist>(const TaylorData &amp;x)</arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>coeff_</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>a4570eec2118fbff29bb26bb22d6a9691</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>deg_</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>a888bca6415be9a9bdb6fc7992f982b10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>len_</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>a9167b80a515a65a3ce00acf839909df3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::TemplateIterator</name>
    <filename>classSacado_1_1TemplateIterator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>TemplateIterator</name>
      <anchorfile>classSacado_1_1TemplateIterator.html</anchorfile>
      <anchor>a7a51c588b9226617938ee055b2c40ce6</anchor>
      <arglist>(typename std::vector&lt; Teuchos::RCP&lt; BaseT &gt; &gt;::iterator p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSacado_1_1TemplateIterator.html</anchorfile>
      <anchor>a707092ff16129ff11ca9cf5f3f8eb632</anchor>
      <arglist>(const TemplateIterator &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSacado_1_1TemplateIterator.html</anchorfile>
      <anchor>a10e6e9b59f6a6da1816df7af02141583</anchor>
      <arglist>(const TemplateIterator &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::TemplateIterator&lt; BaseT &gt;::reference</type>
      <name>operator*</name>
      <anchorfile>classSacado_1_1TemplateIterator.html</anchorfile>
      <anchor>a6c36bd698808faf457ea74bb48c39b7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::TemplateIterator&lt; BaseT &gt;::pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classSacado_1_1TemplateIterator.html</anchorfile>
      <anchor>a10447111a82606e0b67d3c7265f5dddc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TemplateIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSacado_1_1TemplateIterator.html</anchorfile>
      <anchor>aae43b536229b2553b28948cf05f1f743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TemplateIterator</type>
      <name>operator++</name>
      <anchorfile>classSacado_1_1TemplateIterator.html</anchorfile>
      <anchor>ae7952b69c0a3cb8995606a4bcc113168</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; BaseT &gt;</type>
      <name>rcp</name>
      <anchorfile>classSacado_1_1TemplateIterator.html</anchorfile>
      <anchor>ae8d40bb5a86ead290b02dc44c275be7e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::TemplateManager</name>
    <filename>classSacado_1_1TemplateManager.html</filename>
    <templarg>TypeSeq</templarg>
    <templarg>BaseT</templarg>
    <templarg>ObjectT</templarg>
    <class kind="struct">Sacado::TemplateManager::DefaultBuilderOp</class>
    <member kind="typedef">
      <type>TemplateIterator&lt; BaseT &gt;</type>
      <name>iterator</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>a6ccc912217f27d5b69bbbaab683438a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstTemplateIterator&lt; BaseT &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>a8d842647171eb568feec8c81b70995b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TemplateManager</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>a29f4db87cd909424153223a2977fd7e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TemplateManager</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>af856bfd47f7d13658fb62d3d5a976b55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildObjects</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>a33ee085b965a371a4f78b49d18b3b4b6</anchor>
      <arglist>(const BuilderOpT &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildObjects</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>af8e494f43691e020ae718f7d645f3a60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; BaseT &gt;</type>
      <name>getAsBase</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>adf8905a9f382563b62f77f41259f555e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const BaseT &gt;</type>
      <name>getAsBase</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>a58b611a03e7a2c0719d715201eb48594</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; typename Sacado::mpl::apply&lt; ObjectT, ScalarT &gt;::type &gt;</type>
      <name>getAsObject</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>a2672debbb70237561da54158b48769e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const typename Sacado::mpl::apply&lt; ObjectT, ScalarT &gt;::type &gt;</type>
      <name>getAsObject</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>af64dcd0dc293e2200e9c8dfd0361e95e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::TemplateManager&lt; TypeSeq, BaseT, ObjectT &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>a679fb3b282c7c5db301c2bb79ba3c540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Sacado::TemplateManager&lt; TypeSeq, BaseT, ObjectT &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>a4ffa3c72475c8c056a220a3b0c6bf45d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::TemplateManager&lt; TypeSeq, BaseT, ObjectT &gt;::iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>a28f21385a07ac6ef55edad76964a2f9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Sacado::TemplateManager&lt; TypeSeq, BaseT, ObjectT &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>ac0f6843af6f8f6c3f800e9fec7fa882f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::type_wrap</name>
    <filename>structSacado_1_1mpl_1_1type__wrap.html</filename>
    <templarg>T</templarg>
    <base>type_wrap_impl&lt; mpl::has_type&lt; T &gt;::value, T &gt;</base>
  </compound>
  <compound kind="class">
    <name>type_wrap&lt; F &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap.html</filename>
    <base>type_wrap_impl&lt; mpl::has_type&lt; F &gt;::value, F &gt;</base>
  </compound>
  <compound kind="class">
    <name>type_wrap&lt; F&lt; T1 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap.html</filename>
    <base>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1 &gt; &gt;::value, F&lt; T1 &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>type_wrap&lt; F&lt; T1, T2 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap.html</filename>
    <base>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1, T2 &gt; &gt;::value, F&lt; T1, T2 &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>type_wrap&lt; F&lt; T1, T2, T3 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap.html</filename>
    <base>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1, T2, T3 &gt; &gt;::value, F&lt; T1, T2, T3 &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>type_wrap&lt; F&lt; T1, T2, T3, T4 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap.html</filename>
    <base>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1, T2, T3, T4 &gt; &gt;::value, F&lt; T1, T2, T3, T4 &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>type_wrap&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap.html</filename>
    <base>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;::value, F&lt; T1, T2, T3, T4, T5 &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>type_wrap&lt; T1 &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap.html</filename>
    <base>type_wrap_impl&lt; mpl::has_type&lt; T1 &gt;::value, T1 &gt;</base>
  </compound>
  <compound kind="class">
    <name>type_wrap&lt; T2 &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap.html</filename>
    <base>type_wrap_impl&lt; mpl::has_type&lt; T2 &gt;::value, T2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::type_wrap_impl</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
    <templarg>cond</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::type_wrap_impl&lt; false, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl_3_01false_00_01T_01_4.html</filename>
    <templarg></templarg>
    <base>Sacado::mpl::add_type</base>
  </compound>
  <compound kind="class">
    <name>type_wrap_impl&lt; mpl::has_type&lt; F &gt;::value, F &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
  </compound>
  <compound kind="class">
    <name>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1 &gt; &gt;::value, F&lt; T1 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
  </compound>
  <compound kind="class">
    <name>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1, T2 &gt; &gt;::value, F&lt; T1, T2 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
  </compound>
  <compound kind="class">
    <name>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1, T2, T3 &gt; &gt;::value, F&lt; T1, T2, T3 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
  </compound>
  <compound kind="class">
    <name>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1, T2, T3, T4 &gt; &gt;::value, F&lt; T1, T2, T3, T4 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
  </compound>
  <compound kind="class">
    <name>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;::value, F&lt; T1, T2, T3, T4, T5 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
  </compound>
  <compound kind="class">
    <name>type_wrap_impl&lt; mpl::has_type&lt; T &gt;::value, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
  </compound>
  <compound kind="class">
    <name>type_wrap_impl&lt; mpl::has_type&lt; T1 &gt;::value, T1 &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
  </compound>
  <compound kind="class">
    <name>type_wrap_impl&lt; mpl::has_type&lt; T2 &gt;::value, T2 &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::type_wrap_impl&lt; true, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl_3_01true_00_01T_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::mpl::TypeSequenceDoesNotContainType</name>
    <filename>classSacado_1_1mpl_1_1TypeSequenceDoesNotContainType.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::UnaryExpr</name>
    <filename>classSacado_1_1Tay_1_1UnaryExpr.html</filename>
    <templarg></templarg>
    <templarg>Op</templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>abd3fc71dc32192921c981e13f19f34c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>a9c2cad0dfff980268c58fca0446c316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>afe9b4e9c491d3cc002eea37d29d5002e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryExpr</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>aedfc395072499cbcba7750f89f0427c8</anchor>
      <arglist>(const ExprT &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>ab7d7f51ee0354ae76040dcd3759374bf</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>a4d1f8f0811bc20631140c1647d19930a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>a52b1273fe70d56cde8f214cb619a87bf</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>a9efc0b88dd7fa8ae1b485797155b223b</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>a8a2bf94c7d151cf4c891bec66f05bcdb</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExprT</type>
      <name>expr_</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>a46a7109ffb23f26f50879ed6973f5de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Op&lt; ExprT &gt;</type>
      <name>op_</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>a9e6e29dce6e9ee11185521ba04acd970</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::UnaryMinusOp</name>
    <filename>classSacado_1_1CacheFad_1_1UnaryMinusOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::UnaryMinusOp</name>
    <filename>classSacado_1_1Fad_1_1UnaryMinusOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::UnaryMinusOp</name>
    <filename>classSacado_1_1LFad_1_1UnaryMinusOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::UnaryMinusOp</name>
    <filename>classSacado_1_1Tay_1_1UnaryMinusOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::UnaryMinusOp</name>
    <filename>classSacado_1_1ELRFad_1_1UnaryMinusOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::UnaryMinusOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1UnaryMinusOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::UnaryPlusOp</name>
    <filename>classSacado_1_1CacheFad_1_1UnaryPlusOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::UnaryPlusOp</name>
    <filename>classSacado_1_1Fad_1_1UnaryPlusOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::UnaryPlusOp</name>
    <filename>classSacado_1_1Tay_1_1UnaryPlusOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::UnaryPlusOp</name>
    <filename>classSacado_1_1ELRFad_1_1UnaryPlusOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::UnaryPlusOp</name>
    <filename>classSacado_1_1LFad_1_1UnaryPlusOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::UnaryPlusOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1UnaryPlusOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; A, B,                                                                                                                                                                                                                                                   typename mpl::enable_if_c&lt; mpl::is_convertible&lt; A, B &gt;::value &amp;&ampmpl::is_convertible&lt; B, A &gt;::value &amp;&ampmpl::is_same&lt; A, B &gt;::value &amp;&ampsExpr&lt; A &gt;::value||sExpr&lt; B &gt;::value</name>
    <filename>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_018106233313dda4b50878621839f73b2c.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value</name>
    <filename>structSacado_1_1Value.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt;  bool &gt;</name>
    <filename>structSacado_1_1Value_3_01_01bool_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt;  char &gt;</name>
    <filename>structSacado_1_1Value_3_01_01char_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt;  double &gt;</name>
    <filename>structSacado_1_1Value_3_01_01double_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt;  float &gt;</name>
    <filename>structSacado_1_1Value_3_01_01float_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt;  int &gt;</name>
    <filename>structSacado_1_1Value_3_01_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt;  long &gt;</name>
    <filename>structSacado_1_1Value_3_01_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt;  unsigned int &gt;</name>
    <filename>structSacado_1_1Value_3_01_01unsigned_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt;  unsigned long &gt;</name>
    <filename>structSacado_1_1Value_3_01_01unsigned_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; CacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Fad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; LFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Rad2::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Rad::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; RadVec::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Tay::CacheTaylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Tay::Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType</name>
    <filename>structSacado_1_1ValueType.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt;  bool &gt;</name>
    <filename>structSacado_1_1ValueType_3_01_01bool_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt;  char &gt;</name>
    <filename>structSacado_1_1ValueType_3_01_01char_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt;  double &gt;</name>
    <filename>structSacado_1_1ValueType_3_01_01double_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt;  float &gt;</name>
    <filename>structSacado_1_1ValueType_3_01_01float_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt;  int &gt;</name>
    <filename>structSacado_1_1ValueType_3_01_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt;  long &gt;</name>
    <filename>structSacado_1_1ValueType_3_01_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt;  unsigned int &gt;</name>
    <filename>structSacado_1_1ValueType_3_01_01unsigned_01int_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt;  unsigned long &gt;</name>
    <filename>structSacado_1_1ValueType_3_01_01unsigned_01long_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; CacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; const T &gt;</name>
    <filename>structSacado_1_1ValueType_3_01const_01T_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Fad::ConstExpr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Fad_1_1ConstExpr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Fad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; LFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Rad2::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Rad2::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Rad2_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Rad::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Rad::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Rad_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; RadVec::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; RadVec::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01RadVec_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Tay::CacheTaylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Tay::Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Vector</name>
    <filename>classSacado_1_1Fad_1_1Vector.html</filename>
    <templarg>OrdinalType</templarg>
    <templarg>FadType</templarg>
    <member kind="typedef">
      <type>Sacado::ValueType&lt; FadType &gt;::type</type>
      <name>ValueType</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>a8d8c3d0934a9e5908d9103b14d609412</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>a7e3651be333d63dd3ebe25871e05a797</anchor>
      <arglist>(OrdinalType vec_size, OrdinalType deriv_sz, VectorDerivOrientation orient=Row)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>ae0ae6f5de7143b10882d89d5df264428</anchor>
      <arglist>(const Vector &amp;fv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Vector</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>a068e70579418a68a0ddd45ceb8c53730</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>ae60cfa7854b9c534c051634a5ee4ec9b</anchor>
      <arglist>(const Vector &amp;fv)</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>a5e5fcdb2e50979592e3a43713cf9e790</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>deriv_size</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>afd6217bf725b87d7f9935503a5dd8e8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>deriv_stride</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>ab131d26f354114aa8811a1a3fa7938e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorDerivOrientation</type>
      <name>deriv_orientation</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>ae3a7c5a31f64a9f8892cec4929825203</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FadType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>a29115e92c155992752109dfcac72d755</anchor>
      <arglist>(OrdinalType i)</arglist>
    </member>
    <member kind="function">
      <type>const FadType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>ad00a6ed82d7e7141ed4f76dd89d85c9d</anchor>
      <arglist>(OrdinalType i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrdinalType</type>
      <name>deriv_size_</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>a9afde922ac5dd792ec1fa1ea2ff6729d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; FadType &gt;</type>
      <name>vec_</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>a65b5ba2b14c609c93fea56b76b4ef4ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Vector&lt; OrdinalType, Sacado::Fad::DVFad&lt; ValueType &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Sacado::Fad::DVFad&lt; ValueType &gt;</type>
      <name>FadType</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a2256a5ed799b990c64d3df0d46fa6551</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a15cac03eeb331ea761183e6123e25c40</anchor>
      <arglist>(OrdinalType vec_size, OrdinalType deriv_size, VectorDerivOrientation orient=Row)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a38cbbc965301f9b0a0865c1303f6b771</anchor>
      <arglist>(const Vector &amp;fv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Vector</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>ac71b25229f1371d0ca956303b5b8eefd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a996df52d033d9b38cc213d3bb97f62f5</anchor>
      <arglist>(const Vector &amp;fv)</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>abe5c10d0a7f921530b30f1d85438e460</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>deriv_size</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>ac6c9309813e997f98488d74c7351918f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>deriv_stride</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a746d9169814f7816f3ecef951f7369fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorDerivOrientation</type>
      <name>deriv_orientation</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a0939128a0a09c31aa619e1ee8cf66af5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FadType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>abab765547e28606c89adcee087412209</anchor>
      <arglist>(OrdinalType i)</arglist>
    </member>
    <member kind="function">
      <type>const FadType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a8210f1ab557a26a32ecfd2fcab31db07</anchor>
      <arglist>(OrdinalType i) const </arglist>
    </member>
    <member kind="function">
      <type>ValueType *</type>
      <name>vals</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>ae3210274f023d43fa3e962ae836b33e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *</type>
      <name>vals</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>ae65c1266916dbf9d210f559c6409bb02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ValueType *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>aca77dbcbaa29198f9f60795434ef7799</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a3afc9ccbb80c2b87b1cb721aff665bab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrdinalType</type>
      <name>deriv_size_</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a12b70f3cddd152290ab6c05e2f031472</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorDerivOrientation</type>
      <name>orient_</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a8ddf33daa0484f49ab8c896cf4889f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrdinalType</type>
      <name>stride_</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a37c4a98d99d91cad6daeec0977e9736c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; FadType &gt;</type>
      <name>vec_</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>ae35bf0a5b26221cf7d0ae49c167af69d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::vector_at</name>
    <filename>structSacado_1_1mpl_1_1vector__at.html</filename>
    <templarg></templarg>
    <templarg>Pos</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::vector_at&lt; mpl::vector&lt; T, Args... &gt;, 0 &gt;</name>
    <filename>structSacado_1_1mpl_1_1vector__at_3_01mpl_1_1vector_3_01T_00_01Args_8_8_8_01_4_00_010_01_4.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::vector_at&lt; mpl::vector&lt; T, Args... &gt;, Pos &gt;</name>
    <filename>structSacado_1_1mpl_1_1vector__at_3_01mpl_1_1vector_3_01T_00_01Args_8_8_8_01_4_00_01Pos_01_4.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
    <templarg>Pos</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::vector_push_back</name>
    <filename>structSacado_1_1mpl_1_1vector__push__back.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::vector_push_back&lt; mpl::vector&lt; Args... &gt;, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1vector__push__back_3_01mpl_1_1vector_3_01Args_8_8_8_01_4_00_01T_01_4.html</filename>
    <templarg>Args</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::vector_size</name>
    <filename>structSacado_1_1mpl_1_1vector__size.html</filename>
    <templarg>Args</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::VectorDynamicStorage</name>
    <filename>classSacado_1_1Fad_1_1VectorDynamicStorage.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>VectorDynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a5cb9afa7ac6fd3c3fdf270c93b1ddfeb</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a348d89dcc08b05b650bef7c317b7b4af</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a66ad264aea7b3d2c04de56e6d29ce42f</anchor>
      <arglist>(const int sz, T *x, U *dx_p, const int stride, bool zero_out)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a97f9471e711354ccad42c343a8e1be50</anchor>
      <arglist>(const VectorDynamicStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VectorDynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a9ee4f4b58aa10e42de3772a1d506a006</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorDynamicStorage &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a5ad415d3e58ac2a62ae59a92c54c272c</anchor>
      <arglist>(const VectorDynamicStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>ad390ded17d973d9bc6d1952d031423b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a1866f7a678af10a874f18aee4dc49dba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>ad98bd935ba1de5c6f1a390158f306ef7</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeAndZero</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>ad05526daa33ffff52de3d4a39d06b12e</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>ab539c4328d3ea015f8be654d035f3e99</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a66238240c6b4cae29625e0ad57a1093a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMemory</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a1773176df35c1a034146ef5c907ac645</anchor>
      <arglist>(int sz, T *x, U *dx_p, int stride)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>aee392435a92c7f027dd37a4827de763b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>af341d9388e583e3a797fcfb0f9fb3348</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const U *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>aa7174c8262bfbee7cee37fc21c461d5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a86a2b2ec58bd23d3955803be73174414</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>U &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a0adf17f5baa05090d107d382362cb31d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const U &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a8e779fcff1892ce906a9e5be4666abc3</anchor>
      <arglist>(int i) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::ViewFad</name>
    <filename>classSacado_1_1Fad_1_1ViewFad.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::FAD_NS::ViewFad</name>
    <filename>classSacado_1_1FAD__NS_1_1ViewFad.html</filename>
    <templarg></templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
    <templarg></templarg>
    <class kind="struct">Sacado::FAD_NS::ViewFad::apply</class>
    <member kind="typedef">
      <type>Fad::ViewStorage&lt; ValueT, length, stride, BaseFadT &gt;</type>
      <name>StorageType</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>acdcf88d02bc95a1a858e5a6dda0367e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>a70d5d64b31e6fde07336b72029f6813f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>a88b6fa1dc8fdac319a5f7e02572a6580</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ValueT &gt;::type</type>
      <name>ScalarT</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>ab7eb2479f23760369b36da8a58a15c2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseFadT</type>
      <name>base_fad_type</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>a85a0c86c52e47897a328f6fed0b6f26a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~ViewFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>ac34c861f736c58b1853b696cee41d200</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>ViewFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>a981df03e4ffe1aae172178435367373e</anchor>
      <arglist>(const StorageType &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>ViewFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>a59c515bc3c45b9aec8ac540b3b747ff7</anchor>
      <arglist>(ValueT *v, const int arg_size=0, const int arg_stride=0)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>ViewFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>a981df03e4ffe1aae172178435367373e</anchor>
      <arglist>(const StorageType &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>ViewFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>a59c515bc3c45b9aec8ac540b3b747ff7</anchor>
      <arglist>(ValueT *v, const int arg_size=0, const int arg_stride=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::ViewFad</name>
    <filename>classSacado_1_1CacheFad_1_1ViewFad.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::ViewFad</name>
    <filename>classSacado_1_1ELRFad_1_1ViewFad.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::ViewFad</name>
    <filename>classSacado_1_1ELRCacheFad_1_1ViewFad.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType</name>
    <filename>structSacado_1_1ViewFadType.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; const Sacado::Fad::DMFad&lt; ValueType &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01const_01Sacado_1_1Fad_1_1DMFad_3_01ValueType_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; const Sacado::Fad::DVFad&lt; ValueType &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01const_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; const Sacado::FAD_NS::DFad&lt; ValueType &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01const_01Sacado_1_1FAD__NS_1_1DFad_3_01ValueType_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; const Sacado::FAD_NS::SFad&lt; ValueType, N &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01const_01Sacado_1_1FAD__NS_1_1SFad_3_01ValueType_00_01N_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; const Sacado::FAD_NS::SLFad&lt; ValueType, N &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01const_01Sacado_1_1FAD__NS_1_1SLFad_3_01ValueType_00_01N_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; Sacado::Fad::DMFad&lt; ValueType &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01Sacado_1_1Fad_1_1DMFad_3_01ValueType_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; Sacado::Fad::DVFad&lt; ValueType &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; Sacado::FAD_NS::DFad&lt; ValueType &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01Sacado_1_1FAD__NS_1_1DFad_3_01ValueType_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; Sacado::FAD_NS::SFad&lt; ValueType, N &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01Sacado_1_1FAD__NS_1_1SFad_3_01ValueType_00_01N_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; Sacado::FAD_NS::SLFad&lt; ValueType, N &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01Sacado_1_1FAD__NS_1_1SLFad_3_01ValueType_00_01N_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::ViewStorage</name>
    <filename>classSacado_1_1Fad_1_1ViewStorage.html</filename>
    <templarg></templarg>
    <templarg>static_length</templarg>
    <templarg>static_stride</templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ViewStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a7670f485c7e78e39427736526b0f3cab</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ViewStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a06bcd8daf2aa4f21cc44c3888c8976bf</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ViewStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a157422d3530baf460786b1c7015a8f35</anchor>
      <arglist>(T *v, const int arg_size=0, const int arg_stride=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ViewStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>ade8e959fbd282c18990ef923017313fd</anchor>
      <arglist>(const ViewStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ViewStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a43c04e0b473549b0cdfe45cc182af347</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ViewStorage &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a5a9bafad4b3d7c13b938d44ef44cd3f0</anchor>
      <arglist>(const ViewStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a9c27fa76c7caaf8ac291cece16539532</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>aa25e06db05eadb1eaf8837312cad870f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a86fe26a19e051967e99c003c867671b5</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeAndZero</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>ac9ce080d56c9e018402de3710cc8d0b9</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>aad02901901e99f8ab1ef6a139e7594c1</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a6cbee43e8d2f0e98ef193c706ef7c665</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a2ff5dffd6decaa86c86ec93e60edc743</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>af6d255ceb61097d2e7d5be61dd2d0c8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>abff08f6a9c97690fd8b57cdb7df75fa5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>aa9ae125d61d28e5d95dff991affbd463</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a0fb5bf119285cb6d648243644b0c300d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>af338794c2aae491d2c285294512105fe</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mpl::integral_nonzero_constant&lt; int, static_length &gt;</type>
      <name>sz_</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a32659ad764d30482a747857e1bf6520b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mpl::integral_nonzero_constant&lt; int, static_stride &gt;</type>
      <name>stride_</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a4c90ced312b75ba9b49bc76890640b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a6fc5f14053287463d82e84c77a279cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>dx_</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a0e87ebaa8a34bf4e7d1d5b172f6782f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Sacado::CacheFad</name>
    <filename>namespaceSacado_1_1CacheFad.html</filename>
    <class kind="class">Sacado::CacheFad::AbsOp</class>
    <class kind="class">Sacado::CacheFad::ACoshOp</class>
    <class kind="class">Sacado::CacheFad::ACosOp</class>
    <class kind="class">Sacado::CacheFad::AdditionOp</class>
    <class kind="class">Sacado::CacheFad::ASinhOp</class>
    <class kind="class">Sacado::CacheFad::ASinOp</class>
    <class kind="class">Sacado::CacheFad::Atan2Op</class>
    <class kind="class">Sacado::CacheFad::ATanhOp</class>
    <class kind="class">Sacado::CacheFad::ATanOp</class>
    <class kind="struct">Sacado::CacheFad::BaseExpr</class>
    <class kind="class">Sacado::CacheFad::ConstExpr</class>
    <class kind="class">Sacado::CacheFad::CoshOp</class>
    <class kind="class">Sacado::CacheFad::CosOp</class>
    <class kind="class">Sacado::CacheFad::DFad</class>
    <class kind="class">Sacado::CacheFad::DivisionOp</class>
    <class kind="class">Sacado::CacheFad::ExpOp</class>
    <class kind="class">Sacado::CacheFad::Expr</class>
    <class kind="class">Sacado::CacheFad::Expr&lt;  ACoshOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt;  ACosOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt;  ASinhOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt;  ASinOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt;  ATanhOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt;  ATanOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt;  CoshOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt;  CosOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt;  ExpOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt;  Log10Op&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt;  LogOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt;  SinhOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt;  SinOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt;  SqrtOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt;  TanhOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt;  TanOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; AbsOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; AdditionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; AdditionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; AdditionOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; Atan2Op&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; Atan2Op&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; Atan2Op&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; DivisionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; DivisionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; DivisionOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; FAbsOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; MaxOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; MaxOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; MaxOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; MinOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; MinOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; MinOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; MultiplicationOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; MultiplicationOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; MultiplicationOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; PowerOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; PowerOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; PowerOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; SubtractionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; SubtractionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; SubtractionOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; UnaryMinusOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; UnaryPlusOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::CacheFad::ExprLevel</class>
    <class kind="struct">Sacado::CacheFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::FAbsOp</class>
    <class kind="class">Sacado::CacheFad::GeneralFad</class>
    <class kind="struct">Sacado::CacheFad::IsFadExpr</class>
    <class kind="struct">Sacado::CacheFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Log10Op</class>
    <class kind="class">Sacado::CacheFad::LogOp</class>
    <class kind="class">Sacado::CacheFad::MaxOp</class>
    <class kind="class">Sacado::CacheFad::MinOp</class>
    <class kind="class">Sacado::CacheFad::MultiplicationOp</class>
    <class kind="class">Sacado::CacheFad::PowerOp</class>
    <class kind="class">Sacado::CacheFad::SFad</class>
    <class kind="struct">Sacado::CacheFad::SFadExprTag</class>
    <class kind="class">Sacado::CacheFad::SinhOp</class>
    <class kind="class">Sacado::CacheFad::SinOp</class>
    <class kind="class">Sacado::CacheFad::SLFad</class>
    <class kind="class">Sacado::CacheFad::SqrtOp</class>
    <class kind="class">Sacado::CacheFad::SubtractionOp</class>
    <class kind="class">Sacado::CacheFad::TanhOp</class>
    <class kind="class">Sacado::CacheFad::TanOp</class>
    <class kind="class">Sacado::CacheFad::UnaryMinusOp</class>
    <class kind="class">Sacado::CacheFad::UnaryPlusOp</class>
    <class kind="class">Sacado::CacheFad::ViewFad</class>
  </compound>
  <compound kind="namespace">
    <name>Sacado::ELRCacheFad</name>
    <filename>namespaceSacado_1_1ELRCacheFad.html</filename>
    <class kind="class">Sacado::ELRCacheFad::AbsOp</class>
    <class kind="class">Sacado::ELRCacheFad::ACoshOp</class>
    <class kind="class">Sacado::ELRCacheFad::ACosOp</class>
    <class kind="class">Sacado::ELRCacheFad::AdditionOp</class>
    <class kind="class">Sacado::ELRCacheFad::ASinhOp</class>
    <class kind="class">Sacado::ELRCacheFad::ASinOp</class>
    <class kind="class">Sacado::ELRCacheFad::Atan2Op</class>
    <class kind="class">Sacado::ELRCacheFad::ATanhOp</class>
    <class kind="class">Sacado::ELRCacheFad::ATanOp</class>
    <class kind="struct">Sacado::ELRCacheFad::BaseExpr</class>
    <class kind="class">Sacado::ELRCacheFad::ConstExpr</class>
    <class kind="class">Sacado::ELRCacheFad::CoshOp</class>
    <class kind="class">Sacado::ELRCacheFad::CosOp</class>
    <class kind="class">Sacado::ELRCacheFad::DFad</class>
    <class kind="class">Sacado::ELRCacheFad::DivisionOp</class>
    <class kind="class">Sacado::ELRCacheFad::ExpOp</class>
    <class kind="class">Sacado::ELRCacheFad::Expr</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt;  ACoshOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt;  ACosOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt;  ASinhOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt;  ASinOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt;  ATanhOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt;  ATanOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt;  CoshOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt;  CosOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt;  ExpOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt;  Log10Op&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt;  LogOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt;  SinhOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt;  SinOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt;  SqrtOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt;  TanhOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt;  TanOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; AbsOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; AdditionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; AdditionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; AdditionOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; Atan2Op&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; Atan2Op&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; Atan2Op&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; DivisionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; DivisionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; DivisionOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; FAbsOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; MaxOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; MaxOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; MaxOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; MinOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; MinOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; MinOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; MultiplicationOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; MultiplicationOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; MultiplicationOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; PowerOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; PowerOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; PowerOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; SubtractionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; SubtractionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; SubtractionOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; UnaryMinusOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; UnaryPlusOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::ELRCacheFad::ExprConstRef</class>
    <class kind="struct">Sacado::ELRCacheFad::ExprConstRef&lt; ConstExpr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ELRCacheFad::ExprLevel</class>
    <class kind="struct">Sacado::ELRCacheFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::FAbsOp</class>
    <class kind="class">Sacado::ELRCacheFad::GeneralFad</class>
    <class kind="struct">Sacado::ELRCacheFad::IsFadExpr</class>
    <class kind="struct">Sacado::ELRCacheFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Log10Op</class>
    <class kind="class">Sacado::ELRCacheFad::LogOp</class>
    <class kind="class">Sacado::ELRCacheFad::MaxOp</class>
    <class kind="class">Sacado::ELRCacheFad::MinOp</class>
    <class kind="class">Sacado::ELRCacheFad::MultiplicationOp</class>
    <class kind="class">Sacado::ELRCacheFad::PowerOp</class>
    <class kind="class">Sacado::ELRCacheFad::SFad</class>
    <class kind="struct">Sacado::ELRCacheFad::SFadExprTag</class>
    <class kind="class">Sacado::ELRCacheFad::SinhOp</class>
    <class kind="class">Sacado::ELRCacheFad::SinOp</class>
    <class kind="class">Sacado::ELRCacheFad::SLFad</class>
    <class kind="class">Sacado::ELRCacheFad::SqrtOp</class>
    <class kind="class">Sacado::ELRCacheFad::SubtractionOp</class>
    <class kind="class">Sacado::ELRCacheFad::TanhOp</class>
    <class kind="class">Sacado::ELRCacheFad::TanOp</class>
    <class kind="class">Sacado::ELRCacheFad::UnaryMinusOp</class>
    <class kind="class">Sacado::ELRCacheFad::UnaryPlusOp</class>
    <class kind="class">Sacado::ELRCacheFad::ViewFad</class>
  </compound>
  <compound kind="namespace">
    <name>Sacado::ELRFad</name>
    <filename>namespaceSacado_1_1ELRFad.html</filename>
    <class kind="class">Sacado::ELRFad::AbsOp</class>
    <class kind="class">Sacado::ELRFad::ACoshOp</class>
    <class kind="class">Sacado::ELRFad::ACosOp</class>
    <class kind="class">Sacado::ELRFad::AdditionOp</class>
    <class kind="class">Sacado::ELRFad::ASinhOp</class>
    <class kind="class">Sacado::ELRFad::ASinOp</class>
    <class kind="class">Sacado::ELRFad::Atan2Op</class>
    <class kind="class">Sacado::ELRFad::ATanhOp</class>
    <class kind="class">Sacado::ELRFad::ATanOp</class>
    <class kind="struct">Sacado::ELRFad::BaseExpr</class>
    <class kind="class">Sacado::ELRFad::ConstExpr</class>
    <class kind="class">Sacado::ELRFad::CoshOp</class>
    <class kind="class">Sacado::ELRFad::CosOp</class>
    <class kind="class">Sacado::ELRFad::DFad</class>
    <class kind="class">Sacado::ELRFad::DivisionOp</class>
    <class kind="class">Sacado::ELRFad::ExpOp</class>
    <class kind="class">Sacado::ELRFad::Expr</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  AbsOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  ACoshOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  ACosOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  AdditionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  AdditionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  AdditionOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  ASinhOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  ASinOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  Atan2Op&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  Atan2Op&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  Atan2Op&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  ATanhOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  ATanOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  CoshOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  CosOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  DivisionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  DivisionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  DivisionOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  ExpOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  FAbsOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  Log10Op&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  LogOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  MaxOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  MaxOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  MaxOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  MinOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  MinOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  MinOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  MultiplicationOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  MultiplicationOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  MultiplicationOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  PowerOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  PowerOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  PowerOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  SinhOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  SinOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  SqrtOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  SubtractionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  SubtractionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  SubtractionOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  TanhOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  TanOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  UnaryMinusOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt;  UnaryPlusOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ELRFad::ExprConstRef</class>
    <class kind="struct">Sacado::ELRFad::ExprConstRef&lt; ConstExpr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ELRFad::ExprLevel</class>
    <class kind="struct">Sacado::ELRFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::FAbsOp</class>
    <class kind="class">Sacado::ELRFad::GeneralFad</class>
    <class kind="struct">Sacado::ELRFad::IsFadExpr</class>
    <class kind="struct">Sacado::ELRFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Log10Op</class>
    <class kind="class">Sacado::ELRFad::LogOp</class>
    <class kind="class">Sacado::ELRFad::MaxOp</class>
    <class kind="class">Sacado::ELRFad::MinOp</class>
    <class kind="class">Sacado::ELRFad::MultiplicationOp</class>
    <class kind="class">Sacado::ELRFad::PowerOp</class>
    <class kind="class">Sacado::ELRFad::SFad</class>
    <class kind="struct">Sacado::ELRFad::SFadExprTag</class>
    <class kind="class">Sacado::ELRFad::SinhOp</class>
    <class kind="class">Sacado::ELRFad::SinOp</class>
    <class kind="class">Sacado::ELRFad::SLFad</class>
    <class kind="class">Sacado::ELRFad::SqrtOp</class>
    <class kind="class">Sacado::ELRFad::SubtractionOp</class>
    <class kind="class">Sacado::ELRFad::TanhOp</class>
    <class kind="class">Sacado::ELRFad::TanOp</class>
    <class kind="class">Sacado::ELRFad::UnaryMinusOp</class>
    <class kind="class">Sacado::ELRFad::UnaryPlusOp</class>
    <class kind="class">Sacado::ELRFad::ViewFad</class>
  </compound>
  <compound kind="namespace">
    <name>Sacado::Fad</name>
    <filename>namespaceSacado_1_1Fad.html</filename>
    <class kind="class">Sacado::Fad::AbsOp</class>
    <class kind="class">Sacado::Fad::ACoshOp</class>
    <class kind="class">Sacado::Fad::ACosOp</class>
    <class kind="class">Sacado::Fad::AdditionOp</class>
    <class kind="class">Sacado::Fad::ArrayTraits</class>
    <class kind="struct">Sacado::Fad::ArrayValueType</class>
    <class kind="struct">Sacado::Fad::ArrayValueType&lt;  Sacado::CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ArrayValueType&lt;  Sacado::ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ArrayValueType&lt;  Sacado::ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ArrayValueType&lt;  Sacado::ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ArrayValueType&lt;  Sacado::Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ArrayValueType&lt;  Sacado::Fad::DMFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ArrayValueType&lt;  Sacado::Fad::DVFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ArrayValueType&lt;  Sacado::Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ArrayValueType&lt;  Sacado::Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="class">Sacado::Fad::ASinhOp</class>
    <class kind="class">Sacado::Fad::ASinOp</class>
    <class kind="class">Sacado::Fad::Atan2Op</class>
    <class kind="class">Sacado::Fad::ATanhOp</class>
    <class kind="class">Sacado::Fad::ATanOp</class>
    <class kind="struct">Sacado::Fad::BaseExpr</class>
    <class kind="struct">Sacado::Fad::BaseExpr&lt; GeneralFad&lt; T, Fad::MemPoolStorage&lt; T &gt; &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::BaseExpr&lt; GeneralFad&lt; T, Fad::VectorDynamicStorage&lt; T &gt; &gt; &gt;</class>
    <class kind="class">Sacado::Fad::BLAS</class>
    <class kind="class">Sacado::Fad::ConstExpr</class>
    <class kind="class">Sacado::Fad::CoshOp</class>
    <class kind="class">Sacado::Fad::CosOp</class>
    <class kind="class">Sacado::Fad::DFad</class>
    <class kind="class">Sacado::Fad::DivisionOp</class>
    <class kind="class">Sacado::Fad::DMFad</class>
    <class kind="class">Sacado::Fad::DVFad</class>
    <class kind="class">Sacado::Fad::DynamicStorage</class>
    <class kind="class">Sacado::Fad::ExpOp</class>
    <class kind="class">Sacado::Fad::Expr</class>
    <class kind="class">Sacado::Fad::Expr&lt;  AbsOp&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  ACoshOp&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  ACosOp&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  AdditionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  AdditionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  AdditionOp&lt; ExprT1, ExprT2 &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  ASinhOp&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  ASinOp&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  Atan2Op&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  Atan2Op&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  Atan2Op&lt; ExprT1, ExprT2 &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  ATanhOp&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  ATanOp&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  CoshOp&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  CosOp&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  DivisionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  DivisionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  DivisionOp&lt; ExprT1, ExprT2 &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  ExpOp&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  FAbsOp&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  Log10Op&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  LogOp&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  MaxOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  MaxOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  MaxOp&lt; ExprT1, ExprT2 &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  MinOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  MinOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  MinOp&lt; ExprT1, ExprT2 &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  PowerOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  PowerOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  PowerOp&lt; ExprT1, ExprT2 &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  SinhOp&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  SinOp&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  SqrtOp&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  SubtractionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  SubtractionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  SubtractionOp&lt; ExprT1, ExprT2 &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  TanhOp&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  TanOp&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  UnaryMinusOp&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt;  UnaryPlusOp&lt; ExprT &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt; MultiplicationOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt; MultiplicationOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt; MultiplicationOp&lt; ExprT1, ExprT2 &gt;, ExprSpecDefault &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt; SFadExprTag&lt; T, Num &gt;, ExprSpecDefault &gt;</class>
    <class kind="struct">Sacado::Fad::ExprLevel</class>
    <class kind="struct">Sacado::Fad::ExprLevel&lt; DMFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprLevel&lt; DVFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprLevel&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  AbsOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  ACoshOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  ACosOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  AdditionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  AdditionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  AdditionOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  ASinhOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  ASinOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  Atan2Op&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  Atan2Op&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  Atan2Op&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  ATanhOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  ATanOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  CoshOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  CosOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  DivisionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  DivisionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  DivisionOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  ExpOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  FAbsOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  Log10Op&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  LogOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  MaxOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  MaxOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  MaxOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  MinOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  MinOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  MinOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  PowerOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  PowerOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  PowerOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  SinhOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  SinOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  SqrtOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  SubtractionOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  SubtractionOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  SubtractionOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  TanhOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  TanOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  UnaryMinusOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt;  UnaryPlusOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt; Expr&lt; ExprT, Spec &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt; MultiplicationOp&lt; ConstExpr&lt; T1 &gt;, ExprT2 &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt; MultiplicationOp&lt; ExprT1, ConstExpr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt; MultiplicationOp&lt; ExprT1, ExprT2 &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpecDefault</class>
    <class kind="class">Sacado::Fad::FAbsOp</class>
    <class kind="class">Sacado::Fad::Fad_LAPACK</class>
    <class kind="class">Sacado::Fad::GeneralFad</class>
    <class kind="struct">Sacado::Fad::IsFadExpr</class>
    <class kind="struct">Sacado::Fad::IsFadExpr&lt; DMFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::IsFadExpr&lt; DVFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::Fad::Log10Op</class>
    <class kind="class">Sacado::Fad::LogOp</class>
    <class kind="class">Sacado::Fad::MaxOp</class>
    <class kind="class">Sacado::Fad::MemPool</class>
    <class kind="class">Sacado::Fad::MemPoolManager</class>
    <class kind="class">Sacado::Fad::MemPoolStorage</class>
    <class kind="class">Sacado::Fad::MinOp</class>
    <class kind="struct">Sacado::Fad::mp_array</class>
    <class kind="struct">Sacado::Fad::mp_array&lt; T, true &gt;</class>
    <class kind="class">Sacado::Fad::MultiplicationOp</class>
    <class kind="class">Sacado::Fad::PowerOp</class>
    <class kind="class">Sacado::Fad::SFad</class>
    <class kind="struct">Sacado::Fad::SFadExprTag</class>
    <class kind="class">Sacado::Fad::SimpleFad</class>
    <class kind="class">Sacado::Fad::SinhOp</class>
    <class kind="class">Sacado::Fad::SinOp</class>
    <class kind="class">Sacado::Fad::SLFad</class>
    <class kind="class">Sacado::Fad::SqrtOp</class>
    <class kind="class">Sacado::Fad::StaticStorage</class>
    <class kind="class">Sacado::Fad::SubtractionOp</class>
    <class kind="class">Sacado::Fad::TanhOp</class>
    <class kind="class">Sacado::Fad::TanOp</class>
    <class kind="class">Sacado::Fad::UnaryMinusOp</class>
    <class kind="class">Sacado::Fad::UnaryPlusOp</class>
    <class kind="class">Sacado::Fad::Vector</class>
    <class kind="class">Sacado::Fad::Vector&lt; OrdinalType, Sacado::Fad::DVFad&lt; ValueType &gt; &gt;</class>
    <class kind="class">Sacado::Fad::VectorDynamicStorage</class>
    <class kind="class">Sacado::Fad::ViewFad</class>
    <class kind="class">Sacado::Fad::ViewStorage</class>
    <member kind="enumeration">
      <type></type>
      <name>VectorDerivOrientation</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a0dd78c50f081900d819c9588e944addf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Column</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a0dd78c50f081900d819c9588e944addfaaa10cbcec904e961ff97edff796f11a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Sacado::LFad</name>
    <filename>namespaceSacado_1_1LFad.html</filename>
    <class kind="class">Sacado::LFad::AbsOp</class>
    <class kind="class">Sacado::LFad::ACoshOp</class>
    <class kind="class">Sacado::LFad::ACosOp</class>
    <class kind="class">Sacado::LFad::AdditionOp</class>
    <class kind="class">Sacado::LFad::ASinhOp</class>
    <class kind="class">Sacado::LFad::ASinOp</class>
    <class kind="class">Sacado::LFad::Atan2Op</class>
    <class kind="class">Sacado::LFad::ATanhOp</class>
    <class kind="class">Sacado::LFad::ATanOp</class>
    <class kind="class">Sacado::LFad::CoshOp</class>
    <class kind="class">Sacado::LFad::CosOp</class>
    <class kind="class">Sacado::LFad::DivisionOp</class>
    <class kind="class">Sacado::LFad::ExpOp</class>
    <class kind="class">Sacado::LFad::Expr</class>
    <class kind="class">Sacado::LFad::Expr&lt;  AbsOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  ACoshOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  ACosOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  AdditionOp&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  AdditionOp&lt; Expr&lt; T1 &gt;, typename Expr&lt; T1 &gt;::value_type &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  AdditionOp&lt; typename Expr&lt; T2 &gt;::value_type, Expr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  ASinhOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  ASinOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  Atan2Op&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  Atan2Op&lt; Expr&lt; T1 &gt;, typename Expr&lt; T1 &gt;::value_type &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  Atan2Op&lt; typename Expr&lt; T2 &gt;::value_type, Expr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  ATanhOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  ATanOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  CoshOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  CosOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  DivisionOp&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  DivisionOp&lt; Expr&lt; T1 &gt;, typename Expr&lt; T1 &gt;::value_type &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  DivisionOp&lt; typename Expr&lt; T2 &gt;::value_type, Expr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  ExpOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  FAbsOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  Log10Op&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  LogOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  MaxOp&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  MaxOp&lt; Expr&lt; T1 &gt;, typename Expr&lt; T1 &gt;::value_type &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  MaxOp&lt; typename Expr&lt; T2 &gt;::value_type, Expr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  MinOp&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  MinOp&lt; Expr&lt; T1 &gt;, typename Expr&lt; T1 &gt;::value_type &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  MinOp&lt; typename Expr&lt; T2 &gt;::value_type, Expr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  MultiplicationOp&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  MultiplicationOp&lt; Expr&lt; T1 &gt;, typename Expr&lt; T1 &gt;::value_type &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  MultiplicationOp&lt; typename Expr&lt; T2 &gt;::value_type, Expr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  PowerOp&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  PowerOp&lt; Expr&lt; T1 &gt;, typename Expr&lt; T1 &gt;::value_type &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  PowerOp&lt; typename Expr&lt; T2 &gt;::value_type, Expr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  SinhOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  SinOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  SqrtOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  SubtractionOp&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  SubtractionOp&lt; Expr&lt; T1 &gt;, typename Expr&lt; T1 &gt;::value_type &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  SubtractionOp&lt; typename Expr&lt; T2 &gt;::value_type, Expr&lt; T2 &gt; &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  TanhOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  TanOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  UnaryMinusOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt;  UnaryPlusOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Expr&lt; LogicalSparseImp&lt; ValT, LogT &gt; &gt;</class>
    <class kind="struct">Sacado::LFad::ExprLevel</class>
    <class kind="struct">Sacado::LFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::LFad::ExprLevel&lt; LogicalSparse&lt; T, L &gt; &gt;</class>
    <class kind="class">Sacado::LFad::FAbsOp</class>
    <class kind="struct">Sacado::LFad::IsFadExpr</class>
    <class kind="struct">Sacado::LFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::LFad::Log10Op</class>
    <class kind="class">Sacado::LFad::LogicalSparse</class>
    <class kind="class">Sacado::LFad::LogicalSparseImp</class>
    <class kind="class">Sacado::LFad::LogOp</class>
    <class kind="class">Sacado::LFad::MaxOp</class>
    <class kind="class">Sacado::LFad::MinOp</class>
    <class kind="class">Sacado::LFad::MultiplicationOp</class>
    <class kind="class">Sacado::LFad::PowerOp</class>
    <class kind="class">Sacado::LFad::SinhOp</class>
    <class kind="class">Sacado::LFad::SinOp</class>
    <class kind="class">Sacado::LFad::SqrtOp</class>
    <class kind="class">Sacado::LFad::SubtractionOp</class>
    <class kind="class">Sacado::LFad::TanhOp</class>
    <class kind="class">Sacado::LFad::TanOp</class>
    <class kind="class">Sacado::LFad::UnaryMinusOp</class>
    <class kind="class">Sacado::LFad::UnaryPlusOp</class>
  </compound>
  <compound kind="namespace">
    <name>Sacado::Rad</name>
    <filename>namespaceSacado_1_1Rad.html</filename>
    <class kind="class">Sacado::Rad::ADcontext</class>
    <class kind="struct">Sacado::Rad::ADmemblock</class>
    <class kind="class">Sacado::Rad::ADvar</class>
    <class kind="class">Sacado::Rad::ADvar1</class>
    <class kind="class">Sacado::Rad::ADvar1s</class>
    <class kind="class">Sacado::Rad::ADvar2</class>
    <class kind="class">Sacado::Rad::ADvar2q</class>
    <class kind="class">Sacado::Rad::ADvari</class>
    <class kind="class">Sacado::Rad::ADvarn</class>
    <class kind="class">Sacado::Rad::CADcontext</class>
    <class kind="class">Sacado::Rad::ConstADvar</class>
    <class kind="class">Sacado::Rad::ConstADvari</class>
    <class kind="class">Sacado::Rad::Derp</class>
    <class kind="class">Sacado::Rad::DoubleAvoid</class>
    <class kind="class">Sacado::Rad::DoubleAvoid&lt; double &gt;</class>
    <class kind="class">Sacado::Rad::DoubleAvoid&lt; int &gt;</class>
    <class kind="class">Sacado::Rad::DoubleAvoid&lt; long &gt;</class>
    <class kind="class">Sacado::Rad::IndepADvar</class>
    <class kind="class">Sacado::Rad::IndepADvar_base</class>
    <class kind="class">Sacado::Rad::IndepADvar_base0</class>
    <class kind="class">Sacado::Rad::RAD_DoubleIgnore</class>
    <member kind="function">
      <type>ADvar&lt; Double &gt; &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>aa9e61a98a00af5b79b9ac365b60dc963</anchor>
      <arglist>(ADvar&lt; Double &gt; *, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Sacado::Rad2</name>
    <filename>namespaceSacado_1_1Rad2.html</filename>
    <class kind="class">Sacado::Rad2::ADcontext</class>
    <class kind="struct">Sacado::Rad2::ADmemblock</class>
    <class kind="class">Sacado::Rad2::ADvar</class>
    <class kind="class">Sacado::Rad2::ADvar1</class>
    <class kind="class">Sacado::Rad2::ADvar1g</class>
    <class kind="class">Sacado::Rad2::ADvar1s</class>
    <class kind="class">Sacado::Rad2::ADvar2</class>
    <class kind="class">Sacado::Rad2::ADvar2g</class>
    <class kind="class">Sacado::Rad2::ADvar2q</class>
    <class kind="class">Sacado::Rad2::ADvari</class>
    <class kind="class">Sacado::Rad2::ADvari_block</class>
    <class kind="class">Sacado::Rad2::ADvarn</class>
    <class kind="class">Sacado::Rad2::CADcontext</class>
    <class kind="class">Sacado::Rad2::ConstADvar</class>
    <class kind="class">Sacado::Rad2::ConstADvari</class>
    <class kind="class">Sacado::Rad2::Derp</class>
    <class kind="class">Sacado::Rad2::DoubleAvoid</class>
    <class kind="class">Sacado::Rad2::DoubleAvoid&lt; double &gt;</class>
    <class kind="class">Sacado::Rad2::IndepADvar</class>
    <class kind="class">Sacado::Rad2::RAD_DoubleIgnore</class>
    <member kind="function">
      <type>ADvar&lt; Double &gt; &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>acb9166f5ca8d6ec40d5bc01782c997ba</anchor>
      <arglist>(ADvar&lt; Double &gt; *, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Sacado::RadVec</name>
    <filename>namespaceSacado_1_1RadVec.html</filename>
    <class kind="class">Sacado::RadVec::ADcontext</class>
    <class kind="struct">Sacado::RadVec::ADmemblock</class>
    <class kind="class">Sacado::RadVec::ADvar</class>
    <class kind="class">Sacado::RadVec::ADvar1</class>
    <class kind="class">Sacado::RadVec::ADvar1s</class>
    <class kind="class">Sacado::RadVec::ADvar2</class>
    <class kind="class">Sacado::RadVec::ADvar2q</class>
    <class kind="class">Sacado::RadVec::ADvari</class>
    <class kind="class">Sacado::RadVec::ADvarn</class>
    <class kind="class">Sacado::RadVec::CADcontext</class>
    <class kind="class">Sacado::RadVec::ConstADvar</class>
    <class kind="class">Sacado::RadVec::ConstADvari</class>
    <class kind="class">Sacado::RadVec::Derp</class>
    <class kind="class">Sacado::RadVec::DoubleAvoid</class>
    <class kind="class">Sacado::RadVec::DoubleAvoid&lt; double &gt;</class>
    <class kind="class">Sacado::RadVec::IndepADvar</class>
    <class kind="class">Sacado::RadVec::RAD_DoubleIgnore</class>
    <member kind="function">
      <type>ADvar&lt; Double &gt; &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a1459471c0e246b87eacc82c016d756bd</anchor>
      <arglist>(ADvar&lt; Double &gt; *, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Sacado::Tay</name>
    <filename>namespaceSacado_1_1Tay.html</filename>
    <class kind="struct">Sacado::Tay::ACosExprType</class>
    <class kind="class">Sacado::Tay::ACosQuadOp</class>
    <class kind="class">Sacado::Tay::AdditionOp</class>
    <class kind="class">Sacado::Tay::AdditionOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::AdditionOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</class>
    <class kind="struct">Sacado::Tay::ASinExprType</class>
    <class kind="class">Sacado::Tay::ASinQuadOp</class>
    <class kind="struct">Sacado::Tay::ATanExprType</class>
    <class kind="class">Sacado::Tay::ATanQuadOp</class>
    <class kind="class">Sacado::Tay::BinaryExpr</class>
    <class kind="class">Sacado::Tay::BinaryExpr&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2, Op &gt;</class>
    <class kind="class">Sacado::Tay::BinaryExpr&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt;, Op &gt;</class>
    <class kind="class">Sacado::Tay::CacheTaylor</class>
    <class kind="class">Sacado::Tay::CacheTaylorImplementation</class>
    <class kind="class">Sacado::Tay::ConstExpr</class>
    <class kind="class">Sacado::Tay::CoshOp</class>
    <class kind="class">Sacado::Tay::CosOp</class>
    <class kind="class">Sacado::Tay::DivisionOp</class>
    <class kind="class">Sacado::Tay::DivisionOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::DivisionOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</class>
    <class kind="class">Sacado::Tay::ExpOp</class>
    <class kind="class">Sacado::Tay::Expr</class>
    <class kind="class">Sacado::Tay::Expr&lt; CacheTaylorImplementation&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::Tay::FAbsOp</class>
    <class kind="struct">Sacado::Tay::Log10ExprType</class>
    <class kind="class">Sacado::Tay::LogOp</class>
    <class kind="class">Sacado::Tay::MaxOp</class>
    <class kind="class">Sacado::Tay::MaxOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::MaxOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</class>
    <class kind="class">Sacado::Tay::MinOp</class>
    <class kind="class">Sacado::Tay::MinOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::MinOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</class>
    <class kind="class">Sacado::Tay::MultiplicationOp</class>
    <class kind="class">Sacado::Tay::MultiplicationOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::MultiplicationOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</class>
    <class kind="struct">Sacado::Tay::PowExprType</class>
    <class kind="struct">Sacado::Tay::PowExprType&lt; ExprT1, typename ExprT1::value_type &gt;</class>
    <class kind="struct">Sacado::Tay::PowExprType&lt; typename ExprT2::value_type, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::SinhOp</class>
    <class kind="class">Sacado::Tay::SinOp</class>
    <class kind="class">Sacado::Tay::SqrtOp</class>
    <class kind="class">Sacado::Tay::SubtractionOp</class>
    <class kind="class">Sacado::Tay::SubtractionOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::SubtractionOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</class>
    <class kind="struct">Sacado::Tay::TanExprType</class>
    <class kind="struct">Sacado::Tay::TanhExprType</class>
    <class kind="class">Sacado::Tay::Taylor</class>
    <class kind="class">Sacado::Tay::UnaryExpr</class>
    <class kind="class">Sacado::Tay::UnaryMinusOp</class>
    <class kind="class">Sacado::Tay::UnaryPlusOp</class>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt;</type>
      <name>diff</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>abf5f500b86c429b7cec135cb0b022850</anchor>
      <arglist>(const CacheTaylor&lt; T &gt; &amp;x, int n=1)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>diff</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a1476cccb465b0b240ef034e558db8d98</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x, int n=1)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Sacado:  Automatic Differentation Tools for C++ Applications</title>
    <filename>index</filename>
    <docanchor file="index" title="Outline">sacado_outline</docanchor>
    <docanchor file="index" title="Introduction">sacado_intro</docanchor>
    <docanchor file="index" title="Overview of sacado">sacado_startup</docanchor>
    <docanchor file="index" title="Browse all of sacado as a single doxygen collection">sacado_browser</docanchor>
  </compound>
</tagfile>
