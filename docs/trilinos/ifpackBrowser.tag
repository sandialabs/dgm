<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>az_ifpack.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>az__ifpack_8h</filename>
    <class kind="struct">AZ_IFPACK_STRUCT</class>
    <member kind="typedef">
      <type>struct AZ_IFPACK_STRUCT</type>
      <name>AZ_IFPACK</name>
      <anchorfile>az__ifpack_8h.html</anchorfile>
      <anchor>a4d18caee354d2b61002088f89cdb2008</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AZ_ifpack_prec_create</name>
      <anchorfile>az__ifpack_8h.html</anchorfile>
      <anchor>aed359761bcc2676824b6c68ce9ba7196</anchor>
      <arglist>(double *x, double *b, int *options, double *params, int *proc_config, AZ_MATRIX *Amat, AZ_PRECOND **Prec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AZ_ifpack_iterate</name>
      <anchorfile>az__ifpack_8h.html</anchorfile>
      <anchor>a6936d9bba8860aa266f9bebcaa078ef1</anchor>
      <arglist>(double *x, double *b, int *options, double *params, double *status, int *proc_config, AZ_MATRIX *Amat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AZ_ifpack_precon</name>
      <anchorfile>az__ifpack_8h.html</anchorfile>
      <anchor>a73eded51e8800853f6314d5104f84aa3</anchor>
      <arglist>(double x[], int *, int *, double *, AZ_MATRIX *Amat, AZ_PRECOND *prec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AZ_ifpack_prec_destroy</name>
      <anchorfile>az__ifpack_8h.html</anchorfile>
      <anchor>a5fa42909f97dbad5958862c2d885ecb9</anchor>
      <arglist>(int *options, double *params, int *proc_config, AZ_MATRIX *Amat, AZ_PRECOND *Prec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>az2ifp_blockmatrix</name>
      <anchorfile>az__ifpack_8h.html</anchorfile>
      <anchor>a04ff44f6cf63f5c8cc067dfdf887e84e</anchor>
      <arglist>(void **bmat, AZ_MATRIX *Amat)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>az_ifpack_iterate.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>az__ifpack__iterate_8c</filename>
    <includes id="az__ifpack_8h" name="az_ifpack.h" local="yes" imported="no">az_ifpack.h</includes>
    <member kind="function">
      <type>void</type>
      <name>AZ_ifpack_iterate</name>
      <anchorfile>az__ifpack__iterate_8c.html</anchorfile>
      <anchor>a6936d9bba8860aa266f9bebcaa078ef1</anchor>
      <arglist>(double *x, double *b, int *options, double *params, double *status, int *proc_config, AZ_MATRIX *Amat)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>az_ifpack_prec_create.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>az__ifpack__prec__create_8c</filename>
    <includes id="az__ifpack_8h" name="az_ifpack.h" local="yes" imported="no">az_ifpack.h</includes>
    <member kind="function">
      <type>void</type>
      <name>AZ_ifpack_prec_create</name>
      <anchorfile>az__ifpack__prec__create_8c.html</anchorfile>
      <anchor>aed359761bcc2676824b6c68ce9ba7196</anchor>
      <arglist>(double *x, double *b, int *options, double *params, int *proc_config, AZ_MATRIX *Amat, AZ_PRECOND **Prec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>az_ifpack_prec_destroy.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>az__ifpack__prec__destroy_8c</filename>
    <includes id="az__ifpack_8h" name="az_ifpack.h" local="yes" imported="no">az_ifpack.h</includes>
    <member kind="function">
      <type>void</type>
      <name>AZ_ifpack_prec_destroy</name>
      <anchorfile>az__ifpack__prec__destroy_8c.html</anchorfile>
      <anchor>a5fa42909f97dbad5958862c2d885ecb9</anchor>
      <arglist>(int *options, double *params, int *proc_config, AZ_MATRIX *Amat, AZ_PRECOND *Prec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>az_ifpack_precon.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>az__ifpack__precon_8c</filename>
    <includes id="az__ifpack_8h" name="az_ifpack.h" local="yes" imported="no">az_ifpack.h</includes>
    <member kind="function">
      <type>void</type>
      <name>AZ_ifpack_precon</name>
      <anchorfile>az__ifpack__precon_8c.html</anchorfile>
      <anchor>a2c807e249b939cb6aa62554f77523e06</anchor>
      <arglist>(double x[], int options[], int proc_config[], double params[], AZ_MATRIX *Amat, AZ_PRECOND *Prec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>az_ifpack_solve.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>az__ifpack__solve_8c</filename>
    <includes id="az__ifpack_8h" name="az_ifpack.h" local="yes" imported="no">az_ifpack.h</includes>
    <member kind="function">
      <type>void</type>
      <name>AZ_ifpack_solve</name>
      <anchorfile>az__ifpack__solve_8c.html</anchorfile>
      <anchor>a1957cae6ae9854717673c5ede468733e</anchor>
      <arglist>(double x[], double b[], int options[], double params[], int indx[], int bindx[], int rpntr[], int cpntr[], int bpntr[], double val[], int data_org[], double status[], int proc_config[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>aztecoo_solve.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/AztecOO/</path>
    <filename>aztecoo__solve_8cpp</filename>
    <includes id="ParameterHelper_8hpp" name="ParameterHelper.hpp" local="yes" imported="no">ParameterHelper.hpp</includes>
    <includes id="build__problem_8hpp" name="build_problem.hpp" local="yes" imported="no">build_problem.hpp</includes>
    <includes id="build__solver_8hpp" name="build_solver.hpp" local="yes" imported="no">build_solver.hpp</includes>
    <member kind="function">
      <type>void</type>
      <name>process_command_line</name>
      <anchorfile>aztecoo__solve_8cpp.html</anchorfile>
      <anchor>a4d9a728483f96f34803995c3efe0cbf0</anchor>
      <arglist>(int argc, char *argv[], std::string &amp;xml_file)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>aztecoo__solve_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LL/aztecoo_solve.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/AztecOO_LL/</path>
    <filename>LL_2aztecoo__solve_8cpp</filename>
    <includes id="LL_2ParameterHelper_8hpp" name="LL/ParameterHelper.hpp" local="yes" imported="no">ParameterHelper.hpp</includes>
    <includes id="LL_2build__problem_8hpp" name="LL/build_problem.hpp" local="yes" imported="no">build_problem.hpp</includes>
    <includes id="LL_2build__solver_8hpp" name="LL/build_solver.hpp" local="yes" imported="no">build_solver.hpp</includes>
    <member kind="function">
      <type>void</type>
      <name>process_command_line</name>
      <anchorfile>LL_2aztecoo__solve_8cpp.html</anchorfile>
      <anchor>a4d9a728483f96f34803995c3efe0cbf0</anchor>
      <arglist>(int argc, char *argv[], std::string &amp;xml_file)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>LL_2aztecoo__solve_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>blas_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>blas__dh_8c</filename>
    <includes id="blas__dh_8h" name="blas_dh.h" local="yes" imported="no">blas_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>blas__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>blas__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>blas__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>blas__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>blas__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>blas__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matvec_euclid_seq</name>
      <anchorfile>blas__dh_8c.html</anchorfile>
      <anchor>ae43ea677794e98728a86c6ad7e83701c</anchor>
      <arglist>(int n, int *rp, int *cval, double *aval, double *x, double *y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Axpy</name>
      <anchorfile>blas__dh_8c.html</anchorfile>
      <anchor>ae8e33d65446e88c637cd215c24e6a264</anchor>
      <arglist>(int n, double alpha, double *x, double *y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyVec</name>
      <anchorfile>blas__dh_8c.html</anchorfile>
      <anchor>acd067e1467c26cd8bbb348d39b62e546</anchor>
      <arglist>(int n, double *xIN, double *yOUT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ScaleVec</name>
      <anchorfile>blas__dh_8c.html</anchorfile>
      <anchor>a68e408f868d6adb51ee5280a86c8949b</anchor>
      <arglist>(int n, double alpha, double *x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>InnerProd</name>
      <anchorfile>blas__dh_8c.html</anchorfile>
      <anchor>ae8380b49659eeca42df2c01971c327b4</anchor>
      <arglist>(int n, double *x, double *y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Norm2</name>
      <anchorfile>blas__dh_8c.html</anchorfile>
      <anchor>aa746c8a9d1f09eb9720a20b1f572e0df</anchor>
      <arglist>(int n, double *x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>blas_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>blas__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <member kind="function">
      <type>void</type>
      <name>matvec_euclid_seq</name>
      <anchorfile>blas__dh_8h.html</anchorfile>
      <anchor>ae43ea677794e98728a86c6ad7e83701c</anchor>
      <arglist>(int n, int *rp, int *cval, double *aval, double *x, double *y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>InnerProd</name>
      <anchorfile>blas__dh_8h.html</anchorfile>
      <anchor>ae1325c4d1151570c825f2bc97e75b0e0</anchor>
      <arglist>(int local_n, double *x, double *y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Norm2</name>
      <anchorfile>blas__dh_8h.html</anchorfile>
      <anchor>a73173acc36d30a24b3a33498a2c4f78c</anchor>
      <arglist>(int local_n, double *x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Axpy</name>
      <anchorfile>blas__dh_8h.html</anchorfile>
      <anchor>ae8e33d65446e88c637cd215c24e6a264</anchor>
      <arglist>(int n, double alpha, double *x, double *y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyVec</name>
      <anchorfile>blas__dh_8h.html</anchorfile>
      <anchor>acd067e1467c26cd8bbb348d39b62e546</anchor>
      <arglist>(int n, double *xIN, double *yOUT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ScaleVec</name>
      <anchorfile>blas__dh_8h.html</anchorfile>
      <anchor>a68e408f868d6adb51ee5280a86c8949b</anchor>
      <arglist>(int n, double alpha, double *x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>build_problem.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/AztecOO/</path>
    <filename>build__problem_8cpp</filename>
    <includes id="ParameterHelper_8hpp" name="ParameterHelper.hpp" local="yes" imported="no">ParameterHelper.hpp</includes>
    <includes id="read__matrix_8hpp" name="read_matrix.hpp" local="yes" imported="no">read_matrix.hpp</includes>
    <member kind="function">
      <type>Teuchos::RCP&lt; Epetra_LinearProblem &gt;</type>
      <name>build_problem_mm</name>
      <anchorfile>build__problem_8cpp.html</anchorfile>
      <anchor>ae3d1e1e19c977346f5bbd72c109b1d06</anchor>
      <arglist>(Teuchos::ParameterList &amp;test_params, Epetra_CrsMatrix *A, Epetra_MultiVector *b)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Epetra_LinearProblem &gt;</type>
      <name>build_problem</name>
      <anchorfile>build__problem_8cpp.html</anchorfile>
      <anchor>ad80699aa7055f976fd01811d6e11ac20</anchor>
      <arglist>(Teuchos::ParameterList &amp;test_params, const Epetra_Comm &amp;comm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LL/build_problem.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/AztecOO_LL/</path>
    <filename>LL_2build__problem_8cpp</filename>
    <includes id="LL_2ParameterHelper_8hpp" name="LL/ParameterHelper.hpp" local="yes" imported="no">ParameterHelper.hpp</includes>
    <includes id="LL_2read__matrix_8hpp" name="LL/read_matrix.hpp" local="yes" imported="no">read_matrix.hpp</includes>
    <member kind="function">
      <type>Teuchos::RCP&lt; Epetra_LinearProblem &gt;</type>
      <name>build_problem_mm</name>
      <anchorfile>LL_2build__problem_8cpp.html</anchorfile>
      <anchor>ae3d1e1e19c977346f5bbd72c109b1d06</anchor>
      <arglist>(Teuchos::ParameterList &amp;test_params, Epetra_CrsMatrix *A, Epetra_MultiVector *b)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Epetra_LinearProblem &gt;</type>
      <name>build_problem</name>
      <anchorfile>LL_2build__problem_8cpp.html</anchorfile>
      <anchor>ad80699aa7055f976fd01811d6e11ac20</anchor>
      <arglist>(Teuchos::ParameterList &amp;test_params, const Epetra_Comm &amp;comm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>build_problem.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/AztecOO/</path>
    <filename>build__problem_8hpp</filename>
    <member kind="function">
      <type>Teuchos::RCP&lt; Epetra_LinearProblem &gt;</type>
      <name>build_problem_mm</name>
      <anchorfile>build__problem_8hpp.html</anchorfile>
      <anchor>a1116ebb956c4c9a7709f0032d218129e</anchor>
      <arglist>(Teuchos::ParameterList &amp;test_params, const Epetra_CrsMatrix *A, Epetra_MultiVector *b)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Epetra_LinearProblem &gt;</type>
      <name>build_problem</name>
      <anchorfile>build__problem_8hpp.html</anchorfile>
      <anchor>ad80699aa7055f976fd01811d6e11ac20</anchor>
      <arglist>(Teuchos::ParameterList &amp;test_params, const Epetra_Comm &amp;comm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LL/build_problem.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/AztecOO_LL/</path>
    <filename>LL_2build__problem_8hpp</filename>
    <member kind="function">
      <type>Teuchos::RCP&lt; Epetra_LinearProblem &gt;</type>
      <name>build_problem_mm</name>
      <anchorfile>LL_2build__problem_8hpp.html</anchorfile>
      <anchor>a1116ebb956c4c9a7709f0032d218129e</anchor>
      <arglist>(Teuchos::ParameterList &amp;test_params, const Epetra_CrsMatrix *A, Epetra_MultiVector *b)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Epetra_LinearProblem &gt;</type>
      <name>build_problem</name>
      <anchorfile>LL_2build__problem_8hpp.html</anchorfile>
      <anchor>ad80699aa7055f976fd01811d6e11ac20</anchor>
      <arglist>(Teuchos::ParameterList &amp;test_params, const Epetra_Comm &amp;comm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>build_solver.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/AztecOO/</path>
    <filename>build__solver_8cpp</filename>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <includes id="ParameterHelper_8hpp" name="ParameterHelper.hpp" local="yes" imported="no">ParameterHelper.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>_build_solver_hpp_</name>
      <anchorfile>build__solver_8cpp.html</anchorfile>
      <anchor>a68ee1c463671bf5619eb60ba0836fbbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; AztecOO &gt;</type>
      <name>build_solver</name>
      <anchorfile>build__solver_8cpp.html</anchorfile>
      <anchor>adce713522b71a2a0c59f31daf71cfd25</anchor>
      <arglist>(Teuchos::ParameterList &amp;test_params, Teuchos::RCP&lt; Epetra_LinearProblem &gt; problem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LL/build_solver.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/AztecOO_LL/</path>
    <filename>LL_2build__solver_8cpp</filename>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <includes id="LL_2ParameterHelper_8hpp" name="LL/ParameterHelper.hpp" local="yes" imported="no">ParameterHelper.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>_build_solver_hpp_</name>
      <anchorfile>LL_2build__solver_8cpp.html</anchorfile>
      <anchor>a68ee1c463671bf5619eb60ba0836fbbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; AztecOO &gt;</type>
      <name>build_solver</name>
      <anchorfile>LL_2build__solver_8cpp.html</anchorfile>
      <anchor>adce713522b71a2a0c59f31daf71cfd25</anchor>
      <arglist>(Teuchos::ParameterList &amp;test_params, Teuchos::RCP&lt; Epetra_LinearProblem &gt; problem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>build_solver.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/AztecOO/</path>
    <filename>build__solver_8hpp</filename>
    <member kind="function">
      <type>Teuchos::RCP&lt; AztecOO &gt;</type>
      <name>build_solver</name>
      <anchorfile>build__solver_8hpp.html</anchorfile>
      <anchor>adce713522b71a2a0c59f31daf71cfd25</anchor>
      <arglist>(Teuchos::ParameterList &amp;test_params, Teuchos::RCP&lt; Epetra_LinearProblem &gt; problem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LL/build_solver.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/AztecOO_LL/</path>
    <filename>LL_2build__solver_8hpp</filename>
    <member kind="function">
      <type>Teuchos::RCP&lt; AztecOO &gt;</type>
      <name>build_solver</name>
      <anchorfile>LL_2build__solver_8hpp.html</anchorfile>
      <anchor>adce713522b71a2a0c59f31daf71cfd25</anchor>
      <arglist>(Teuchos::ParameterList &amp;test_params, Teuchos::RCP&lt; Epetra_LinearProblem &gt; problem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>call_epetra.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>call__epetra_8cpp</filename>
    <includes id="call__epetra_8h" name="call_epetra.h" local="yes" imported="no">call_epetra.h</includes>
    <member kind="function">
      <type>int</type>
      <name>ExtractIndicesView</name>
      <anchorfile>call__epetra_8cpp.html</anchorfile>
      <anchor>a9b60b3f49d66c24899edd5727064f02a</anchor>
      <arglist>(void *A, int GlobalRow, int *NumEntries, int **Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractValuesView</name>
      <anchorfile>call__epetra_8cpp.html</anchorfile>
      <anchor>ae8bd9745aa9cceaae5636a877a50a986</anchor>
      <arglist>(void *A, int GlobalRow, int *NumEntries, double **Values)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinMaxMyGID</name>
      <anchorfile>call__epetra_8cpp.html</anchorfile>
      <anchor>a164e521b807f5c9eced1e0793479536a</anchor>
      <arglist>(void *A, bool Row, bool min)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalRowCol</name>
      <anchorfile>call__epetra_8cpp.html</anchorfile>
      <anchor>a988f344aba10bfbac43cd2b45c3f8159</anchor>
      <arglist>(void *A, bool Row)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyRowEntries</name>
      <anchorfile>call__epetra_8cpp.html</anchorfile>
      <anchor>a22342b87492625eac9e3780f47ff2510</anchor>
      <arglist>(void *A, int Row, int *numEntries)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>call_epetra.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>call__epetra_8h</filename>
    <member kind="function">
      <type>int</type>
      <name>ExtractIndicesView</name>
      <anchorfile>call__epetra_8h.html</anchorfile>
      <anchor>a9b60b3f49d66c24899edd5727064f02a</anchor>
      <arglist>(void *A, int GlobalRow, int *NumEntries, int **Indices)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractValuesView</name>
      <anchorfile>call__epetra_8h.html</anchorfile>
      <anchor>ae8bd9745aa9cceaae5636a877a50a986</anchor>
      <arglist>(void *A, int GlobalRow, int *NumEntries, double **Values)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinMaxMyGID</name>
      <anchorfile>call__epetra_8h.html</anchorfile>
      <anchor>a164e521b807f5c9eced1e0793479536a</anchor>
      <arglist>(void *A, bool Row, bool min)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalRowCol</name>
      <anchorfile>call__epetra_8h.html</anchorfile>
      <anchor>a988f344aba10bfbac43cd2b45c3f8159</anchor>
      <arglist>(void *A, bool Row)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyRowEntries</name>
      <anchorfile>call__epetra_8h.html</anchorfile>
      <anchor>a22342b87492625eac9e3780f47ff2510</anchor>
      <arglist>(void *A, int Row, int *numEntries)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cc_main.cc</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/ifpack_threaded_hb/</path>
    <filename>cc__main_8cc</filename>
    <includes id="prototypes_8h" name="prototypes.h" local="yes" imported="no">prototypes.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__cplusplus</name>
      <anchorfile>cc__main_8cc.html</anchorfile>
      <anchor>a1b391bc7ed92f79666c4a5d840aa1edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>perror</name>
      <anchorfile>cc__main_8cc.html</anchorfile>
      <anchor>a30bf1bf7a49ff7f70724408f99145b41</anchor>
      <arglist>(str)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>perror1</name>
      <anchorfile>cc__main_8cc.html</anchorfile>
      <anchor>a7403d97211b7071e3e0dffe6c4af8f4b</anchor>
      <arglist>(str, ierr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>double_quote</name>
      <anchorfile>cc__main_8cc.html</anchorfile>
      <anchor>a6fcb9c567947fa1968bf337b5e93c9ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BiCGSTAB</name>
      <anchorfile>cc__main_8cc.html</anchorfile>
      <anchor>a1f4a22713cd41cf00bcf76b4f4d3a7d0</anchor>
      <arglist>(Petra_RDP_CRS_Matrix &amp;A, Petra_RDP_Vector &amp;x, Petra_RDP_Vector &amp;b, Ifpack_RDP_CRS_RILUK *M, int Maxiter, double Tolerance, double *residual, double &amp;FLOPS, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>cc__main_8cc.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>create_vbr.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/ifpack_threaded_hb/</path>
    <filename>create__vbr_8c</filename>
    <member kind="function">
      <type>void</type>
      <name>create_vbr</name>
      <anchorfile>create__vbr_8c.html</anchorfile>
      <anchor>a0925b08d9aa4b4d38ce933d34827f819</anchor>
      <arglist>(char *partition_file, int *proc_config, int *N_global, int *N_blk_global, int *n_nonzeros, int *n_blk_nonzeros, int *N_update, int **update, int *bindx_msr, double *val_msr, double **val, int **indx, int **rpntr, int **cpntr, int **bpntr, int **bindx)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/ifpack_hb/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/ifpack_hb/</path>
    <filename>example_2ifpack__hb_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__IlukGraph_8h" name="Ifpack_IlukGraph.h" local="yes" imported="no">Ifpack_IlukGraph.h</includes>
    <includes id="Ifpack__CrsRiluk_8h" name="Ifpack_CrsRiluk.h" local="yes" imported="no">Ifpack_CrsRiluk.h</includes>
    <member kind="function">
      <type>void</type>
      <name>BiCGSTAB</name>
      <anchorfile>example_2ifpack__hb_2cxx__main_8cpp.html</anchorfile>
      <anchor>a134ad1757c6e0536b479a6a5a01b8a00</anchor>
      <arglist>(Epetra_CrsMatrix &amp;A, Epetra_Vector &amp;x, Epetra_Vector &amp;b, Ifpack_CrsRiluk *M, int Maxiter, double Tolerance, double *residual, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example_2ifpack__hb_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/BlockCheby/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/BlockCheby/</path>
    <filename>test_2BlockCheby_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2BlockCheby_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/BlockCheby_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/BlockCheby_LL/</path>
    <filename>test_2BlockCheby__LL_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2BlockCheby__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/CompareWithAztecOO/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/CompareWithAztecOO/</path>
    <filename>test_2CompareWithAztecOO_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__AdditiveSchwarz_8h" name="Ifpack_AdditiveSchwarz.h" local="yes" imported="no">Ifpack_AdditiveSchwarz.h</includes>
    <includes id="Ifpack__Graph__Epetra__RowMatrix_8h" name="Ifpack_Graph_Epetra_RowMatrix.h" local="yes" imported="no">Ifpack_Graph_Epetra_RowMatrix.h</includes>
    <includes id="Ifpack__PointRelaxation_8h" name="Ifpack_PointRelaxation.h" local="yes" imported="no">Ifpack_PointRelaxation.h</includes>
    <includes id="Ifpack__IC_8h" name="Ifpack_IC.h" local="yes" imported="no">Ifpack_IC.h</includes>
    <includes id="Ifpack__ILU_8h" name="Ifpack_ILU.h" local="yes" imported="no">Ifpack_ILU.h</includes>
    <includes id="Ifpack__Amesos_8h" name="Ifpack_Amesos.h" local="yes" imported="no">Ifpack_Amesos.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>CompareWithAztecOO</name>
      <anchorfile>test_2CompareWithAztecOO_2cxx__main_8cpp.html</anchorfile>
      <anchor>a47a686aa12f2b1a1647765568a084cdd</anchor>
      <arglist>(Epetra_LinearProblem &amp;Problem, const std::string what, int Overlap, int ival)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2CompareWithAztecOO_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>test_2CompareWithAztecOO_2cxx__main_8cpp.html</anchorfile>
      <anchor>ab3f078684998b83967d507d0f453f454</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/CompareWithAztecOO_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/CompareWithAztecOO_LL/</path>
    <filename>test_2CompareWithAztecOO__LL_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__AdditiveSchwarz_8h" name="Ifpack_AdditiveSchwarz.h" local="yes" imported="no">Ifpack_AdditiveSchwarz.h</includes>
    <includes id="Ifpack__Graph__Epetra__RowMatrix_8h" name="Ifpack_Graph_Epetra_RowMatrix.h" local="yes" imported="no">Ifpack_Graph_Epetra_RowMatrix.h</includes>
    <includes id="Ifpack__PointRelaxation_8h" name="Ifpack_PointRelaxation.h" local="yes" imported="no">Ifpack_PointRelaxation.h</includes>
    <includes id="Ifpack__IC_8h" name="Ifpack_IC.h" local="yes" imported="no">Ifpack_IC.h</includes>
    <includes id="Ifpack__ILU_8h" name="Ifpack_ILU.h" local="yes" imported="no">Ifpack_ILU.h</includes>
    <includes id="Ifpack__Amesos_8h" name="Ifpack_Amesos.h" local="yes" imported="no">Ifpack_Amesos.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>CompareWithAztecOO</name>
      <anchorfile>test_2CompareWithAztecOO__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a47a686aa12f2b1a1647765568a084cdd</anchor>
      <arglist>(Epetra_LinearProblem &amp;Problem, const std::string what, int Overlap, int ival)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2CompareWithAztecOO__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>test_2CompareWithAztecOO__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>ab3f078684998b83967d507d0f453f454</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Container/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/Container/</path>
    <filename>test_2Container_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__DenseContainer_8h" name="Ifpack_DenseContainer.h" local="yes" imported="no">Ifpack_DenseContainer.h</includes>
    <includes id="Ifpack__SparseContainer_8h" name="Ifpack_SparseContainer.h" local="yes" imported="no">Ifpack_SparseContainer.h</includes>
    <includes id="Ifpack__Amesos_8h" name="Ifpack_Amesos.h" local="yes" imported="no">Ifpack_Amesos.h</includes>
    <includes id="Ifpack__LocalFilter_8h" name="Ifpack_LocalFilter.h" local="yes" imported="no">Ifpack_LocalFilter.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>TestContainer</name>
      <anchorfile>test_2Container_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0a956ce3f135d801f173bc3fec6e6c66</anchor>
      <arglist>(std::string Type, const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Container_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>verbose</name>
      <anchorfile>test_2Container_2cxx__main_8cpp.html</anchorfile>
      <anchor>ab3f078684998b83967d507d0f453f454</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Container_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/Container_LL/</path>
    <filename>test_2Container__LL_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__DenseContainer_8h" name="Ifpack_DenseContainer.h" local="yes" imported="no">Ifpack_DenseContainer.h</includes>
    <includes id="Ifpack__SparseContainer_8h" name="Ifpack_SparseContainer.h" local="yes" imported="no">Ifpack_SparseContainer.h</includes>
    <includes id="Ifpack__Amesos_8h" name="Ifpack_Amesos.h" local="yes" imported="no">Ifpack_Amesos.h</includes>
    <includes id="Ifpack__LocalFilter_8h" name="Ifpack_LocalFilter.h" local="yes" imported="no">Ifpack_LocalFilter.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>TestContainer</name>
      <anchorfile>test_2Container__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0a956ce3f135d801f173bc3fec6e6c66</anchor>
      <arglist>(std::string Type, const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Container__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>verbose</name>
      <anchorfile>test_2Container__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>ab3f078684998b83967d507d0f453f454</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/CrsRiluk/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/CrsRiluk/</path>
    <filename>test_2CrsRiluk_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Version_8h" name="Ifpack_Version.h" local="yes" imported="no">Ifpack_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>power_method</name>
      <anchorfile>test_2CrsRiluk_2cxx__main_8cpp.html</anchorfile>
      <anchor>ab4bbb16f162785d1b51ddde77133808a</anchor>
      <arglist>(Epetra_CrsMatrix &amp;A, Epetra_Vector &amp;q, Epetra_Vector &amp;z, Epetra_Vector &amp;resid, double *lambda, int niters, double tolerance, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2CrsRiluk_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/CrsRiluk_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/CrsRiluk_LL/</path>
    <filename>test_2CrsRiluk__LL_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Version_8h" name="Ifpack_Version.h" local="yes" imported="no">Ifpack_Version.h</includes>
    <member kind="function">
      <type>int</type>
      <name>power_method</name>
      <anchorfile>test_2CrsRiluk__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>ab4bbb16f162785d1b51ddde77133808a</anchor>
      <arglist>(Epetra_CrsMatrix &amp;A, Epetra_Vector &amp;q, Epetra_Vector &amp;z, Epetra_Vector &amp;resid, double *lambda, int niters, double tolerance, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2CrsRiluk__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/HIPS/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/HIPS/</path>
    <filename>test_2HIPS_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__CrsRiluk_8h" name="Ifpack_CrsRiluk.h" local="yes" imported="no">Ifpack_CrsRiluk.h</includes>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <includes id="Ifpack__HIPS_8h" name="Ifpack_HIPS.h" local="yes" imported="no">Ifpack_HIPS.h</includes>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>test_2HIPS_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1dd6005de36f355b29624917cbb7177b</anchor>
      <arglist>(const int &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>test_2HIPS_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae16632783527462a506193e25549b156</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2HIPS_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/IC/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/IC/</path>
    <filename>test_2IC_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <includes id="Ifpack__DiagPreconditioner_8h" name="Ifpack_DiagPreconditioner.h" local="yes" imported="no">Ifpack_DiagPreconditioner.h</includes>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>test_2IC_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1dd6005de36f355b29624917cbb7177b</anchor>
      <arglist>(const int &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>test_2IC_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae16632783527462a506193e25549b156</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2IC_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/IC_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/IC_LL/</path>
    <filename>test_2IC__LL_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <includes id="Ifpack__DiagPreconditioner_8h" name="Ifpack_DiagPreconditioner.h" local="yes" imported="no">Ifpack_DiagPreconditioner.h</includes>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>test_2IC__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1dd6005de36f355b29624917cbb7177b</anchor>
      <arglist>(const int &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>test_2IC__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae16632783527462a506193e25549b156</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2IC__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/IHSS-SORa/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/IHSS-SORa/</path>
    <filename>test_2IHSS-SORa_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__IHSS_8h" name="Ifpack_IHSS.h" local="yes" imported="no">Ifpack_IHSS.h</includes>
    <includes id="Ifpack__SORa_8h" name="Ifpack_SORa.h" local="yes" imported="no">Ifpack_SORa.h</includes>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>test_2IHSS-SORa_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1dd6005de36f355b29624917cbb7177b</anchor>
      <arglist>(const int &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>test_2IHSS-SORa_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae16632783527462a506193e25549b156</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2IHSS-SORa_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/IHSS-SORa_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/IHSS-SORa_LL/</path>
    <filename>test_2IHSS-SORa__LL_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__IHSS_8h" name="Ifpack_IHSS.h" local="yes" imported="no">Ifpack_IHSS.h</includes>
    <includes id="Ifpack__SORa_8h" name="Ifpack_SORa.h" local="yes" imported="no">Ifpack_SORa.h</includes>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>test_2IHSS-SORa__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1dd6005de36f355b29624917cbb7177b</anchor>
      <arglist>(const int &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>test_2IHSS-SORa__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae16632783527462a506193e25549b156</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2IHSS-SORa__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/ILU/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/ILU/</path>
    <filename>test_2ILU_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__CrsRiluk_8h" name="Ifpack_CrsRiluk.h" local="yes" imported="no">Ifpack_CrsRiluk.h</includes>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>test_2ILU_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1dd6005de36f355b29624917cbb7177b</anchor>
      <arglist>(const int &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>test_2ILU_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae16632783527462a506193e25549b156</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2ILU_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/ILU_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/ILU_LL/</path>
    <filename>test_2ILU__LL_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__CrsRiluk_8h" name="Ifpack_CrsRiluk.h" local="yes" imported="no">Ifpack_CrsRiluk.h</includes>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>test_2ILU__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1dd6005de36f355b29624917cbb7177b</anchor>
      <arglist>(const int &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>test_2ILU__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae16632783527462a506193e25549b156</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2ILU__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/IlukGraph/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/IlukGraph/</path>
    <filename>test_2IlukGraph_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Version_8h" name="Ifpack_Version.h" local="yes" imported="no">Ifpack_Version.h</includes>
    <includes id="Ifpack__IlukGraph_8h" name="Ifpack_IlukGraph.h" local="yes" imported="no">Ifpack_IlukGraph.h</includes>
    <member kind="function">
      <type>int</type>
      <name>check</name>
      <anchorfile>test_2IlukGraph_2cxx__main_8cpp.html</anchorfile>
      <anchor>aa66c48d7d9da6260713c87d461193250</anchor>
      <arglist>(Epetra_CrsGraph &amp;L, Epetra_CrsGraph &amp;U, Ifpack_IlukGraph &amp;LU, int NumGlobalRows1, int NumMyRows1, int LevelFill1, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2IlukGraph_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/IlukGraph_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/IlukGraph_LL/</path>
    <filename>test_2IlukGraph__LL_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Version_8h" name="Ifpack_Version.h" local="yes" imported="no">Ifpack_Version.h</includes>
    <includes id="Ifpack__IlukGraph_8h" name="Ifpack_IlukGraph.h" local="yes" imported="no">Ifpack_IlukGraph.h</includes>
    <member kind="function">
      <type>int</type>
      <name>check</name>
      <anchorfile>test_2IlukGraph__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a248bc9a90285aabff9c0864e0fcb6bb9</anchor>
      <arglist>(Epetra_CrsGraph &amp;L, Epetra_CrsGraph &amp;U, Ifpack_IlukGraph &amp;LU, long long NumGlobalRows1, int NumMyRows1, int LevelFill1, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2IlukGraph__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/OverlappingRowMatrix/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/OverlappingRowMatrix/</path>
    <filename>test_2OverlappingRowMatrix_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__OverlappingRowMatrix_8h" name="Ifpack_OverlappingRowMatrix.h" local="yes" imported="no">Ifpack_OverlappingRowMatrix.h</includes>
    <includes id="Ifpack__LocalFilter_8h" name="Ifpack_LocalFilter.h" local="yes" imported="no">Ifpack_LocalFilter.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2OverlappingRowMatrix_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/OverlappingRowMatrix_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/OverlappingRowMatrix_LL/</path>
    <filename>test_2OverlappingRowMatrix__LL_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__OverlappingRowMatrix_8h" name="Ifpack_OverlappingRowMatrix.h" local="yes" imported="no">Ifpack_OverlappingRowMatrix.h</includes>
    <includes id="Ifpack__LocalFilter_8h" name="Ifpack_LocalFilter.h" local="yes" imported="no">Ifpack_LocalFilter.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2OverlappingRowMatrix__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/PointPreconditioner/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/PointPreconditioner/</path>
    <filename>test_2PointPreconditioner_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2PointPreconditioner_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/PreconditionerFactory/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/PreconditionerFactory/</path>
    <filename>test_2PreconditionerFactory_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2PreconditionerFactory_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/PreconditionerFactory_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/PreconditionerFactory_LL/</path>
    <filename>test_2PreconditionerFactory__LL_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2PreconditionerFactory__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Relaxation/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/Relaxation/</path>
    <filename>test_2Relaxation_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__PointRelaxation_8h" name="Ifpack_PointRelaxation.h" local="yes" imported="no">Ifpack_PointRelaxation.h</includes>
    <includes id="Ifpack__BlockRelaxation_8h" name="Ifpack_BlockRelaxation.h" local="yes" imported="no">Ifpack_BlockRelaxation.h</includes>
    <includes id="Ifpack__SparseContainer_8h" name="Ifpack_SparseContainer.h" local="yes" imported="no">Ifpack_SparseContainer.h</includes>
    <includes id="Ifpack__TriDiContainer_8h" name="Ifpack_TriDiContainer.h" local="yes" imported="no">Ifpack_TriDiContainer.h</includes>
    <includes id="Ifpack__Amesos_8h" name="Ifpack_Amesos.h" local="yes" imported="no">Ifpack_Amesos.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>TestTriDiVariableBlocking</name>
      <anchorfile>test_2Relaxation_2cxx__main_8cpp.html</anchorfile>
      <anchor>aa63a7f44203d2b0df456aeb5dd01689e</anchor>
      <arglist>(const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestVariableBlocking</name>
      <anchorfile>test_2Relaxation_2cxx__main_8cpp.html</anchorfile>
      <anchor>a800491c841727a47b6e876e09a5950fb</anchor>
      <arglist>(const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CompareLineSmoother</name>
      <anchorfile>test_2Relaxation_2cxx__main_8cpp.html</anchorfile>
      <anchor>a2f815694ae7047c1f705bdda172ef34e</anchor>
      <arglist>(const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;A, Teuchos::RCP&lt; Epetra_MultiVector &gt; coord)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CompareLineSmootherEntries</name>
      <anchorfile>test_2Relaxation_2cxx__main_8cpp.html</anchorfile>
      <anchor>a7f5abe2c758b6ebab7e61779ba144d38</anchor>
      <arglist>(const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AllSingle</name>
      <anchorfile>test_2Relaxation_2cxx__main_8cpp.html</anchorfile>
      <anchor>a48c9a5ea8642352f61681bf53756af53</anchor>
      <arglist>(const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;A, Teuchos::RCP&lt; Epetra_MultiVector &gt; coord)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CompareBlockOverlap</name>
      <anchorfile>test_2Relaxation_2cxx__main_8cpp.html</anchorfile>
      <anchor>a233d154d80148b634222be1487554829</anchor>
      <arglist>(const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;A, int Overlap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CompareBlockSizes</name>
      <anchorfile>test_2Relaxation_2cxx__main_8cpp.html</anchorfile>
      <anchor>a70e43b666a4b83a505b18b750c2f3193</anchor>
      <arglist>(std::string PrecType, const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;A, int NumParts)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComparePointAndBlock</name>
      <anchorfile>test_2Relaxation_2cxx__main_8cpp.html</anchorfile>
      <anchor>aca040d988e802381936870ccb2990a47</anchor>
      <arglist>(std::string PrecType, const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;A, int sweeps)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>KrylovTest</name>
      <anchorfile>test_2Relaxation_2cxx__main_8cpp.html</anchorfile>
      <anchor>a8ced86148a8ab7aad414cfd0ae134bd0</anchor>
      <arglist>(std::string PrecType, const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;A, bool backward, bool reorder=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BasicTest</name>
      <anchorfile>test_2Relaxation_2cxx__main_8cpp.html</anchorfile>
      <anchor>ab557d21fb9fd21ba916ebfaca8c09940</anchor>
      <arglist>(std::string PrecType, const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;A, bool backward, bool reorder=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Relaxation_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>verbose</name>
      <anchorfile>test_2Relaxation_2cxx__main_8cpp.html</anchorfile>
      <anchor>ab3f078684998b83967d507d0f453f454</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>SymmetricGallery</name>
      <anchorfile>test_2Relaxation_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae7008ae907ccfb76c457feca8b0e3d63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>Solver</name>
      <anchorfile>test_2Relaxation_2cxx__main_8cpp.html</anchorfile>
      <anchor>a81e6f54ff1d0b70b4474d28f0701aed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>NumVectors</name>
      <anchorfile>test_2Relaxation_2cxx__main_8cpp.html</anchorfile>
      <anchor>aae4f3402139f5c29f5f4dc46178be79c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/Relaxation_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/Relaxation_LL/</path>
    <filename>test_2Relaxation__LL_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__PointRelaxation_8h" name="Ifpack_PointRelaxation.h" local="yes" imported="no">Ifpack_PointRelaxation.h</includes>
    <includes id="Ifpack__BlockRelaxation_8h" name="Ifpack_BlockRelaxation.h" local="yes" imported="no">Ifpack_BlockRelaxation.h</includes>
    <includes id="Ifpack__SparseContainer_8h" name="Ifpack_SparseContainer.h" local="yes" imported="no">Ifpack_SparseContainer.h</includes>
    <includes id="Ifpack__Amesos_8h" name="Ifpack_Amesos.h" local="yes" imported="no">Ifpack_Amesos.h</includes>
    <member kind="function">
      <type>int</type>
      <name>CompareBlockOverlap</name>
      <anchorfile>test_2Relaxation__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a233d154d80148b634222be1487554829</anchor>
      <arglist>(const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;A, int Overlap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CompareBlockSizes</name>
      <anchorfile>test_2Relaxation__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a70e43b666a4b83a505b18b750c2f3193</anchor>
      <arglist>(std::string PrecType, const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;A, int NumParts)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComparePointAndBlock</name>
      <anchorfile>test_2Relaxation__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>aca040d988e802381936870ccb2990a47</anchor>
      <arglist>(std::string PrecType, const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;A, int sweeps)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>KrylovTest</name>
      <anchorfile>test_2Relaxation__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>af7fa2b2908148ba9cfc96773c918b8dc</anchor>
      <arglist>(std::string PrecType, const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;A, bool backward)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BasicTest</name>
      <anchorfile>test_2Relaxation__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>ab39a353b6edd96da5b4cc45857e5c642</anchor>
      <arglist>(std::string PrecType, const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;A, bool backward)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2Relaxation__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>verbose</name>
      <anchorfile>test_2Relaxation__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>ab3f078684998b83967d507d0f453f454</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>SymmetricGallery</name>
      <anchorfile>test_2Relaxation__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae7008ae907ccfb76c457feca8b0e3d63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>Solver</name>
      <anchorfile>test_2Relaxation__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a81e6f54ff1d0b70b4474d28f0701aed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>NumVectors</name>
      <anchorfile>test_2Relaxation__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>aae4f3402139f5c29f5f4dc46178be79c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/SetParameters/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/SetParameters/</path>
    <filename>test_2SetParameters_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="no" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__IlukGraph_8h" name="Ifpack_IlukGraph.h" local="no" imported="no">Ifpack_IlukGraph.h</includes>
    <includes id="Ifpack__CrsRiluk_8h" name="Ifpack_CrsRiluk.h" local="no" imported="no">Ifpack_CrsRiluk.h</includes>
    <includes id="Ifpack__OverlapGraph_8h" name="Ifpack_OverlapGraph.h" local="no" imported="no">Ifpack_OverlapGraph.h</includes>
    <includes id="ifp__parameters_8h" name="ifp_parameters.h" local="no" imported="no">ifp_parameters.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2SetParameters_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/SetParameters_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/SetParameters_LL/</path>
    <filename>test_2SetParameters__LL_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="no" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__IlukGraph_8h" name="Ifpack_IlukGraph.h" local="no" imported="no">Ifpack_IlukGraph.h</includes>
    <includes id="Ifpack__CrsRiluk_8h" name="Ifpack_CrsRiluk.h" local="no" imported="no">Ifpack_CrsRiluk.h</includes>
    <includes id="Ifpack__OverlapGraph_8h" name="Ifpack_OverlapGraph.h" local="no" imported="no">Ifpack_OverlapGraph.h</includes>
    <includes id="ifp__parameters_8h" name="ifp_parameters.h" local="no" imported="no">ifp_parameters.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2SetParameters__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/SupportGraph/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/SupportGraph/</path>
    <filename>test_2SupportGraph_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>test_2SupportGraph_2cxx__main_8cpp.html</anchorfile>
      <anchor>a1dd6005de36f355b29624917cbb7177b</anchor>
      <arglist>(const int &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>test_2SupportGraph_2cxx__main_8cpp.html</anchorfile>
      <anchor>ae16632783527462a506193e25549b156</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2SupportGraph_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/TestAll/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/TestAll/</path>
    <filename>test_2TestAll_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__AdditiveSchwarz_8h" name="Ifpack_AdditiveSchwarz.h" local="yes" imported="no">Ifpack_AdditiveSchwarz.h</includes>
    <includes id="Ifpack__PointRelaxation_8h" name="Ifpack_PointRelaxation.h" local="yes" imported="no">Ifpack_PointRelaxation.h</includes>
    <includes id="Ifpack__BlockRelaxation_8h" name="Ifpack_BlockRelaxation.h" local="yes" imported="no">Ifpack_BlockRelaxation.h</includes>
    <includes id="Ifpack__DenseContainer_8h" name="Ifpack_DenseContainer.h" local="yes" imported="no">Ifpack_DenseContainer.h</includes>
    <includes id="Ifpack__SparseContainer_8h" name="Ifpack_SparseContainer.h" local="yes" imported="no">Ifpack_SparseContainer.h</includes>
    <includes id="Ifpack__Amesos_8h" name="Ifpack_Amesos.h" local="yes" imported="no">Ifpack_Amesos.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
    <includes id="Ifpack__Chebyshev_8h" name="Ifpack_Chebyshev.h" local="yes" imported="no">Ifpack_Chebyshev.h</includes>
    <includes id="Ifpack__Polynomial_8h" name="Ifpack_Polynomial.h" local="yes" imported="no">Ifpack_Polynomial.h</includes>
    <includes id="Ifpack__Krylov_8h" name="Ifpack_Krylov.h" local="yes" imported="no">Ifpack_Krylov.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>Test</name>
      <anchorfile>test_2TestAll_2cxx__main_8cpp.html</anchorfile>
      <anchor>a95d7de7b1f3b8480842e20ebfb582672</anchor>
      <arglist>(const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;Matrix, Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2TestAll_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/TestAll_LL/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/TestAll_LL/</path>
    <filename>test_2TestAll__LL_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__AdditiveSchwarz_8h" name="Ifpack_AdditiveSchwarz.h" local="yes" imported="no">Ifpack_AdditiveSchwarz.h</includes>
    <includes id="Ifpack__PointRelaxation_8h" name="Ifpack_PointRelaxation.h" local="yes" imported="no">Ifpack_PointRelaxation.h</includes>
    <includes id="Ifpack__BlockRelaxation_8h" name="Ifpack_BlockRelaxation.h" local="yes" imported="no">Ifpack_BlockRelaxation.h</includes>
    <includes id="Ifpack__DenseContainer_8h" name="Ifpack_DenseContainer.h" local="yes" imported="no">Ifpack_DenseContainer.h</includes>
    <includes id="Ifpack__SparseContainer_8h" name="Ifpack_SparseContainer.h" local="yes" imported="no">Ifpack_SparseContainer.h</includes>
    <includes id="Ifpack__Amesos_8h" name="Ifpack_Amesos.h" local="yes" imported="no">Ifpack_Amesos.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
    <includes id="Ifpack__Chebyshev_8h" name="Ifpack_Chebyshev.h" local="yes" imported="no">Ifpack_Chebyshev.h</includes>
    <includes id="Ifpack__Polynomial_8h" name="Ifpack_Polynomial.h" local="yes" imported="no">Ifpack_Polynomial.h</includes>
    <includes id="Ifpack__Krylov_8h" name="Ifpack_Krylov.h" local="yes" imported="no">Ifpack_Krylov.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>Test</name>
      <anchorfile>test_2TestAll__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a95d7de7b1f3b8480842e20ebfb582672</anchor>
      <arglist>(const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;Matrix, Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2TestAll__LL_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/UseTranspose/cxx_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/UseTranspose/</path>
    <filename>test_2UseTranspose_2cxx__main_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__ILU_8h" name="Ifpack_ILU.h" local="yes" imported="no">Ifpack_ILU.h</includes>
    <includes id="Ifpack__ILUT_8h" name="Ifpack_ILUT.h" local="yes" imported="no">Ifpack_ILUT.h</includes>
    <includes id="Ifpack__AdditiveSchwarz_8h" name="Ifpack_AdditiveSchwarz.h" local="yes" imported="no">Ifpack_AdditiveSchwarz.h</includes>
    <member kind="function">
      <type>void</type>
      <name>Test</name>
      <anchorfile>test_2UseTranspose_2cxx__main_8cpp.html</anchorfile>
      <anchor>a7962194cb6a9a0a7b87373a3cc8399d4</anchor>
      <arglist>(const std::string what, Epetra_RowMatrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test_2UseTranspose_2cxx__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>distrib_msr_matrix.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/ifpack_threaded_hb/</path>
    <filename>distrib__msr__matrix_8c</filename>
    <includes id="prototypes_8h" name="prototypes.h" local="yes" imported="no">prototypes.h</includes>
    <member kind="function">
      <type>void</type>
      <name>distrib_msr_matrix</name>
      <anchorfile>distrib__msr__matrix_8c.html</anchorfile>
      <anchor>a6ffd5a5766a587c189a8ddec510d130c</anchor>
      <arglist>(int *proc_config, int *N_global, int *n_nonzeros, int *N_update, int **update, double **val, int **bindx, double **x, double **b, double **bt, double **xexact)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>distrib_vbr_matrix.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/ifpack_threaded_hb/</path>
    <filename>distrib__vbr__matrix_8c</filename>
    <includes id="prototypes_8h" name="prototypes.h" local="yes" imported="no">prototypes.h</includes>
    <member kind="function">
      <type>void</type>
      <name>distrib_vbr_matrix</name>
      <anchorfile>distrib__vbr__matrix_8c.html</anchorfile>
      <anchor>adfb7047668d57fb9c774c062f4b4fe5c</anchor>
      <arglist>(int *proc_config, int *N_global, int *N_blk_global, int *n_nonzeros, int *n_blk_nonzeros, int *N_update, int **update, double **val, int **indx, int **rpntr, int **cpntr, int **bpntr, int **bindx, double **x, double **b, double **bt, double **xexact)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>euclid.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>euclid_8h</filename>
    <includes id="Euclid__dh_8h" name="Euclid_dh.h" local="yes" imported="no">Euclid_dh.h</includes>
    <includes id="SubdomainGraph__dh_8h" name="SubdomainGraph_dh.h" local="yes" imported="no">SubdomainGraph_dh.h</includes>
    <includes id="Mat__dh_8h" name="Mat_dh.h" local="yes" imported="no">Mat_dh.h</includes>
    <includes id="Factor__dh_8h" name="Factor_dh.h" local="yes" imported="no">Factor_dh.h</includes>
    <includes id="MatGenFD_8h" name="MatGenFD.h" local="yes" imported="no">MatGenFD.h</includes>
    <includes id="Vec__dh_8h" name="Vec_dh.h" local="yes" imported="no">Vec_dh.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <includes id="Timer__dh_8h" name="Timer_dh.h" local="yes" imported="no">Timer_dh.h</includes>
    <includes id="TimeLog__dh_8h" name="TimeLog_dh.h" local="yes" imported="no">TimeLog_dh.h</includes>
    <includes id="guards__dh_8h" name="guards_dh.h" local="yes" imported="no">guards_dh.h</includes>
    <includes id="krylov__dh_8h" name="krylov_dh.h" local="yes" imported="no">krylov_dh.h</includes>
    <includes id="io__dh_8h" name="io_dh.h" local="yes" imported="no">io_dh.h</includes>
    <includes id="mat__dh__private_8h" name="mat_dh_private.h" local="yes" imported="no">mat_dh_private.h</includes>
  </compound>
  <compound kind="file">
    <name>Euclid_apply.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Euclid__apply_8c</filename>
    <includes id="Euclid__dh_8h" name="Euclid_dh.h" local="yes" imported="no">Euclid_dh.h</includes>
    <includes id="Mat__dh_8h" name="Mat_dh.h" local="yes" imported="no">Mat_dh.h</includes>
    <includes id="Factor__dh_8h" name="Factor_dh.h" local="yes" imported="no">Factor_dh.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="TimeLog__dh_8h" name="TimeLog_dh.h" local="yes" imported="no">TimeLog_dh.h</includes>
    <includes id="SubdomainGraph__dh_8h" name="SubdomainGraph_dh.h" local="yes" imported="no">SubdomainGraph_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Euclid__apply_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Euclid__apply_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Euclid__apply_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Euclid__apply_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scale_rhs_private</name>
      <anchorfile>Euclid__apply_8c.html</anchorfile>
      <anchor>ae5d65ce37a9294d0c70d10f68a2a648c</anchor>
      <arglist>(Euclid_dh ctx, double *rhs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>permute_vec_n2o_private</name>
      <anchorfile>Euclid__apply_8c.html</anchorfile>
      <anchor>aac89c1f42f8da4846658ee1d2b50328d</anchor>
      <arglist>(Euclid_dh ctx, double *xIN, double *xOUT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>permute_vec_o2n_private</name>
      <anchorfile>Euclid__apply_8c.html</anchorfile>
      <anchor>aa2a9dc35693fc066ed84bd699b8a47db</anchor>
      <arglist>(Euclid_dh ctx, double *xIN, double *xOUT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhApply</name>
      <anchorfile>Euclid__apply_8c.html</anchorfile>
      <anchor>a7cee2c2353930c8ea668a861808c7e9c</anchor>
      <arglist>(Euclid_dh ctx, double *rhs, double *lhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>euclid_common.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>euclid__common_8h</filename>
    <includes id="euclid__config_8h" name="euclid_config.h" local="yes" imported="no">euclid_config.h</includes>
    <includes id="macros__dh_8h" name="macros_dh.h" local="yes" imported="no">macros_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>REAL_DH</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a8b30ad1a4c5fdf4f8c306129d925e4a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>true</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a41f9c5fb8b08eb5dc3edce4dcb37fee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>false</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a65e9886d74aaee76545e83dd09011727</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MPI_MAX_ERROR_STRING</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>aecbc3eab345ce4eceaadf5111f4847f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSG_BUF_SIZE_DH</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a7c13a2a850758cf3a672af57ba659383</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _matgenfd *</type>
      <name>MatGenFD</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a67b84be273c2d9f4c40905b0ee150630</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _subdomain_dh *</type>
      <name>SubdomainGraph_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a79897f087b0502df56cba2f6c99d8be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _timer_dh *</type>
      <name>Timer_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>aaf71d324c18cdef9807ecee4af8b83f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _parser_dh *</type>
      <name>Parser_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>add2e63e2975e901df45116c3cdd3c948</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _timeLog_dh *</type>
      <name>TimeLog_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a3d9b4e4eabd55a404c9464960273995e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _mem_dh *</type>
      <name>Mem_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a8d67912ead0bf8572c81b6e5f04c6359</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _mat_dh *</type>
      <name>Mat_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>aa8a22119e3c98c1ca1eb96dbb11ef5e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _factor_dh *</type>
      <name>Factor_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>aef80c1f9e656faf6d3876ff520547395</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _vec_dh *</type>
      <name>Vec_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a1938c09b5c4384cd9014c2c2db2fa5e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _numbering_dh *</type>
      <name>Numbering_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>ab69f0055e609a10495be5e32a5cb3c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _hash_dh *</type>
      <name>Hash_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>aa331f47af01e7cda68cf81e0de8e0dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _hash_i_dh *</type>
      <name>Hash_i_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>afb885fa90c0a4bdaa57cfcf5f13ada04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _mpi_interface_dh *</type>
      <name>Euclid_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a08ade512791c70604df169adcbf879b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _sortedList_dh *</type>
      <name>SortedList_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a5243397b82661d9584a2af9e1fbf233a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _extrows_dh *</type>
      <name>ExternalRows_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a42c63d30029c23d5e8ab6d4e5a1dda11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _stack_dh *</type>
      <name>Stack_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a193617601a4ccb68ef07f7c96e5a7e51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _queue_dh *</type>
      <name>Queue_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a19cf182a5f5771ec3cbc6df020b22e37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _sortedset_dh *</type>
      <name>SortedSet_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>aec107dddd3eb20cd5b9c0ff781a02a6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>bool</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a1062901a7428fdd9c7f180f5e01ea056</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInfo_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a76ea135161f2cd6c43602172685cae4e</anchor>
      <arglist>(char *msg, char *function, char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setError_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a207a4a191fde96de5ba87e12c25727ba</anchor>
      <arglist>(char *msg, char *function, char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printErrorMsg</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a39cf038589f4eb3215515c95ed8014c0</anchor>
      <arglist>(FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>openLogfile_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>ae83dfd830e601aa856b20c7089fd253e</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeLogfile_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>aa47442116bcf6a3ee89d8015162c04fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Error_dhStartFunc</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a2fd7051586c1c3b1182bb57dd83c48df</anchor>
      <arglist>(char *function, char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Error_dhEndFunc</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a9e5fa95ebb3ace20fe00c41ee12c6f48</anchor>
      <arglist>(char *function)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dh_StartFunc</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>aec364843878da08ca84cc37401e81a2c</anchor>
      <arglist>(char *function, char *file, int line, int priority)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dh_EndFunc</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a6f1faab977f92341778574cc86abff07</anchor>
      <arglist>(char *function, int priority)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printFunctionStack</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a61709b28471d4e40f1fcac9e40a3df44</anchor>
      <arglist>(FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EuclidInitialize</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>afb6519dd0ab9bf3927a3b5674b7a1887</anchor>
      <arglist>(int argc, char *argv[], char *help)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EuclidFinalize</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>ae641b423922f3df5255976c578e910cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>EuclidIsInitialized</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>ac3ea2d4ca831d66252e28b24c9482999</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printf_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a495c6cda5f33d7988214c4ba7c2e9f02</anchor>
      <arglist>(char *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fprintf_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a6c165a9d4dab0a391c7b7300620d2789</anchor>
      <arglist>(FILE *fp, char *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>echoInvocation_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a5221d9a03e80f49a08ae0a2a89a5aa47</anchor>
      <arglist>(MPI_Comm comm, char *prefix, int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>Parser_dh</type>
      <name>parser_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a3bd8d0f863b435ddce0fba94a9b27c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimeLog_dh</type>
      <name>tlog_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a69d7b72adb4f03161adc438d6a669f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mem_dh</type>
      <name>mem_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a668b963fdd5538a860b9648fa0b0489e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>logFile</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>ad3f38c395cc7cf9574b09ffe96a09364</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>np_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a2fd174797f8132f4382ac49624a48d7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myid_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a2f4e0a602a7424672ae577ec35a6effb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPI_Comm</type>
      <name>comm_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a925a7279fa4859dca23c7bc5e7b73bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ignoreMe</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a2a9b38b6121347f0a110986f2e89cd89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ref_counter</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a5e93b6ff1241a8ea952f207d5fbc5eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>errFlag_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a322a6f87c3d317c26aa957d75070438f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>msgBuf_dh</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a871aa6b89f4d743925ab179e0e1d0975</anchor>
      <arglist>[MSG_BUF_SIZE_DH]</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>logInfoToStderr</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a75385093a0a01166ff52f97b77cfded1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>logInfoToFile</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a253f258568f1da00d846aa5cd66ef28c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>logFuncsToStderr</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>a9a47fd08c4c945694050c4143e6a87d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>logFuncsToFile</name>
      <anchorfile>euclid__common_8h.html</anchorfile>
      <anchor>aff2814560e40f53ef510e5001a29d10b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>euclid_config.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>euclid__config_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>MAX_MPI_TASKS</name>
      <anchorfile>euclid__config_8h.html</anchorfile>
      <anchor>a8646f2b442713d2496e9bcb1c8a6ac5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRIPLES_FORMAT</name>
      <anchorfile>euclid__config_8h.html</anchorfile>
      <anchor>add7afb12c3cde18f56ef88cbbbd15acb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EUCLID_EXIT</name>
      <anchorfile>euclid__config_8h.html</anchorfile>
      <anchor>a4329b725f01f1d07a0c80c41568b314e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXIT_NOW</name>
      <anchorfile>euclid__config_8h.html</anchorfile>
      <anchor>a33920755712e28d8f7f2adcf198f6baf</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ERRCHKA</name>
      <anchorfile>euclid__config_8h.html</anchorfile>
      <anchor>a9759c1db3de6e755716715fdf187c81b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ERRCHKA_CHKERRA</name>
      <anchorfile>euclid__config_8h.html</anchorfile>
      <anchor>aa41efc0d83cd7b5a0ed70e9940827d29</anchor>
      <arglist>(ierr)  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_SUBDOMAINS</name>
      <anchorfile>euclid__config_8h.html</anchorfile>
      <anchor>a342a1b1e5be9bbeaa2ca201bb06fad3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIVOT_FIX_DEFAULT</name>
      <anchorfile>euclid__config_8h.html</anchorfile>
      <anchor>a22b4dd7580f1be44eb888728b67f35b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALLOC_DH</name>
      <anchorfile>euclid__config_8h.html</anchorfile>
      <anchor>a105cfbe34e6e6668e256b2caa7629c8b</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FREE_DH</name>
      <anchorfile>euclid__config_8h.html</anchorfile>
      <anchor>ad29822c12624a4252434f89798e50586</anchor>
      <arglist>(p)    </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PRIVATE_MALLOC</name>
      <anchorfile>euclid__config_8h.html</anchorfile>
      <anchor>a970abc42e4040010f2decc4221af6665</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PRIVATE_FREE</name>
      <anchorfile>euclid__config_8h.html</anchorfile>
      <anchor>a01ba94c44e2bea381b19c0c24a0ca69d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Euclid_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Euclid__dh_8c</filename>
    <includes id="Euclid__dh_8h" name="Euclid_dh.h" local="yes" imported="no">Euclid_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <includes id="Mat__dh_8h" name="Mat_dh.h" local="yes" imported="no">Mat_dh.h</includes>
    <includes id="Vec__dh_8h" name="Vec_dh.h" local="yes" imported="no">Vec_dh.h</includes>
    <includes id="Factor__dh_8h" name="Factor_dh.h" local="yes" imported="no">Factor_dh.h</includes>
    <includes id="getRow__dh_8h" name="getRow_dh.h" local="yes" imported="no">getRow_dh.h</includes>
    <includes id="ilu__dh_8h" name="ilu_dh.h" local="yes" imported="no">ilu_dh.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="SortedList__dh_8h" name="SortedList_dh.h" local="yes" imported="no">SortedList_dh.h</includes>
    <includes id="SubdomainGraph__dh_8h" name="SubdomainGraph_dh.h" local="yes" imported="no">SubdomainGraph_dh.h</includes>
    <includes id="ExternalRows__dh_8h" name="ExternalRows_dh.h" local="yes" imported="no">ExternalRows_dh.h</includes>
    <includes id="krylov__dh_8h" name="krylov_dh.h" local="yes" imported="no">krylov_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>get_runtime_params_private</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>ad7fa6770cab902f86307ed9646d71acd</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>invert_diagonals_private</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>abd2c4c351244a4fb9b9cdbcb92f4b091</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>compute_rho_private</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>ad0a9c3e390aaa245dec69f595fc9c825</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>factor_private</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a60caf939d02c6a9c31d349d345382389</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>reduce_timings_private</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a1dcd3e1b3ee5c43692b84e304620083e</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhCreate</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a6aa3e99e4c53a5315fb8b981649eb16e</anchor>
      <arglist>(Euclid_dh *ctxOUT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhDestroy</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a3ed39d147118d72d2b818515d38276a0</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhSetup</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a67c7814e30c39ee155b5428c57955310</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhSolve</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a1fd757c57347878fbaea96bab76ae40b</anchor>
      <arglist>(Euclid_dh ctx, Vec_dh x, Vec_dh b, int *its)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhPrintStats</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a0929b52cb94d03bb35ef67b35c3d629b</anchor>
      <arglist>(Euclid_dh ctx, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhPrintStatsShort</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>aa6c464fad54913b8cd30d45821371fd2</anchor>
      <arglist>(Euclid_dh ctx, double setup, double solve, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhPrintStatsShorter</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>acbc87c4bd1b4274e630b712679ee2997</anchor>
      <arglist>(Euclid_dh ctx, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhPrintScaling</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>abe0ebe9aeb4a4348ffc9a973a660870c</anchor>
      <arglist>(Euclid_dh ctx, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhPrintHypreReport</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>ab6c533bbb4461bf748396c742c0db629</anchor>
      <arglist>(Euclid_dh ctx, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhPrintTestData</name>
      <anchorfile>Euclid__dh_8c.html</anchorfile>
      <anchor>a1caed43929bb416e21493e3ce2e6aa22</anchor>
      <arglist>(Euclid_dh ctx, FILE *fp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Euclid_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Euclid__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <class kind="struct">_mpi_interface_dh</class>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_DROP_TOL</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a038bb81d7d6309cfc2ac8ab6b288e221</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_OPT_LEN</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a1cb572f41287222d7126a56b819f7b6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TIMING_BINS</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a2472569eff788115be72fb103835f806</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STATS_BINS</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a094efa7d064c0a3366627521a527f6c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOLVE_START_T</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba647a8d6dbe9186babf7a80b7f1f71555</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRI_SOLVE_T</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba32b0a0a18a1c41b4ca1f233ede68cfff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETUP_T</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bad83794d5d3b6afd257e1664bbe29d5b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUB_GRAPH_T</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba314f0eff443eadf93beade5849b4947a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FACTOR_T</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baa8c27b5ed96953aae67565a227d0ee69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOLVE_SETUP_T</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baed2afff88bae8df359871a529894a217</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPUTE_RHO_T</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba0a243c9273e8c9b02e79171165d4749e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOTAL_SOLVE_TEMP_T</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bab47672e44f0c845b6638f0d1ce047291</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOTAL_SOLVE_T</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baa865d6e3e4aea72a4f0271aee49a61fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NZA_STATS</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a0a1df660bab581f913e320ba87d0e0a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NZF_STATS</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a21bb1905f3a04f083961e76e2d33bf7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NZA_USED_STATS</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a5bb0a5f94d576d8b89e8230c935fee71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NZA_RATIO_STATS</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a6034fe0c4cb420880f6c05deab16e295</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhCreate</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a6aa3e99e4c53a5315fb8b981649eb16e</anchor>
      <arglist>(Euclid_dh *ctxOUT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhDestroy</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a3ed39d147118d72d2b818515d38276a0</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhSetup</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a67c7814e30c39ee155b5428c57955310</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhSolve</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a0b0c9c70a564fcc2285beb50decf3c04</anchor>
      <arglist>(Euclid_dh ctx, Vec_dh lhs, Vec_dh rhs, int *its)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhApply</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a9e628f41c43c6c6d22a61fdbe5f1b1ec</anchor>
      <arglist>(Euclid_dh ctx, double *lhs, double *rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhPrintTestData</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a1caed43929bb416e21493e3ce2e6aa22</anchor>
      <arglist>(Euclid_dh ctx, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhPrintScaling</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>abe0ebe9aeb4a4348ffc9a973a660870c</anchor>
      <arglist>(Euclid_dh ctx, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhPrintStatsShort</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>aa6c464fad54913b8cd30d45821371fd2</anchor>
      <arglist>(Euclid_dh ctx, double setup, double solve, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhPrintStatsShorter</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>acbc87c4bd1b4274e630b712679ee2997</anchor>
      <arglist>(Euclid_dh ctx, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhPrintHypreReport</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>ab6c533bbb4461bf748396c742c0db629</anchor>
      <arglist>(Euclid_dh ctx, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Euclid_dhPrintStats</name>
      <anchorfile>Euclid__dh_8h.html</anchorfile>
      <anchor>a0929b52cb94d03bb35ef67b35c3d629b</anchor>
      <arglist>(Euclid_dh ctx, FILE *fp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExternalRows_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>ExternalRows__dh_8c</filename>
    <includes id="ExternalRows__dh_8h" name="ExternalRows_dh.h" local="yes" imported="no">ExternalRows_dh.h</includes>
    <includes id="Factor__dh_8h" name="Factor_dh.h" local="yes" imported="no">Factor_dh.h</includes>
    <includes id="Euclid__dh_8h" name="Euclid_dh.h" local="yes" imported="no">Euclid_dh.h</includes>
    <includes id="SubdomainGraph__dh_8h" name="SubdomainGraph_dh.h" local="yes" imported="no">SubdomainGraph_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="Hash__dh_8h" name="Hash_dh.h" local="yes" imported="no">Hash_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROW_CT_TAG</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a99fb83031ce9923c84392b4e92f956b5ad0abd46a8900de74b39ff6986f748b33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NZ_CT_TAG</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a99fb83031ce9923c84392b4e92f956b5a6f1881e0c9fef5971e75f437e8e78f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROW_LENGTH_TAG</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a99fb83031ce9923c84392b4e92f956b5a576d6e910c92e395879bc0a2d8969070</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROW_NUMBER_TAG</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a99fb83031ce9923c84392b4e92f956b5a8e5c422a8bb2cb33f9cd319292062aa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CVAL_TAG</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a99fb83031ce9923c84392b4e92f956b5a9f2c33eeb9289e38e10266bc5b39a14b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILL_TAG</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a99fb83031ce9923c84392b4e92f956b5ac7e10b302cdc744517fd989f9015c35c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AVAL_TAG</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a99fb83031ce9923c84392b4e92f956b5a6ef80ae9cd4f858fcb9bf3b0890d277c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExternalRows_dhCreate</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a69a439e2abdf04dded9ba6f814afd30a</anchor>
      <arglist>(ExternalRows_dh *er)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExternalRows_dhDestroy</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>aabf2b8e1a0fc4a7b4b66743b90a86177</anchor>
      <arglist>(ExternalRows_dh er)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExternalRows_dhInit</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a2178f54c51f020d8b385859e33381c0a</anchor>
      <arglist>(ExternalRows_dh er, Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExternalRows_dhGetRow</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a2f73fa93f4d539805e4dc16a556d8e1c</anchor>
      <arglist>(ExternalRows_dh er, int globalRow, int *len, int **cval, int **fill, REAL_DH **aval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>rcv_ext_storage_private</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a2e0d2ef2970f1aca3dd4b7a3df0a9f58</anchor>
      <arglist>(ExternalRows_dh extRows)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>build_hash_table_private</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a73638f855ed89148576ab90a45b91f1e</anchor>
      <arglist>(ExternalRows_dh er)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>rcv_external_rows_private</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>ac09d0bda0d6d7b91e70500493aad68db</anchor>
      <arglist>(ExternalRows_dh er)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>allocate_ext_row_storage_private</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a961d21be417e3c598daf5045c474bd7b</anchor>
      <arglist>(ExternalRows_dh er)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print_received_rows_private</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a8d7e20c6749298d85aa110f85c82e5e6</anchor>
      <arglist>(ExternalRows_dh er)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExternalRows_dhRecvRows</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>ad5ca32527175b82405537fb2f935994a</anchor>
      <arglist>(ExternalRows_dh er)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>send_ext_storage_private</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a1b4152ab95c8b536f8bf41a715c4b4b6</anchor>
      <arglist>(ExternalRows_dh er)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>send_external_rows_private</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a55435ad8d475fcb270242fa19e4b2251</anchor>
      <arglist>(ExternalRows_dh er)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>waitfor_sends_private</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>ae70c7f69b3438733a6db912cae7d0f1e</anchor>
      <arglist>(ExternalRows_dh er)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExternalRows_dhSendRows</name>
      <anchorfile>ExternalRows__dh_8c.html</anchorfile>
      <anchor>a8a567bbd50a27807fc9396d75607540b</anchor>
      <arglist>(ExternalRows_dh er)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExternalRows_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>ExternalRows__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <class kind="struct">_extrows_dh</class>
    <member kind="function">
      <type>void</type>
      <name>ExternalRows_dhCreate</name>
      <anchorfile>ExternalRows__dh_8h.html</anchorfile>
      <anchor>a69a439e2abdf04dded9ba6f814afd30a</anchor>
      <arglist>(ExternalRows_dh *er)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExternalRows_dhDestroy</name>
      <anchorfile>ExternalRows__dh_8h.html</anchorfile>
      <anchor>aabf2b8e1a0fc4a7b4b66743b90a86177</anchor>
      <arglist>(ExternalRows_dh er)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExternalRows_dhInit</name>
      <anchorfile>ExternalRows__dh_8h.html</anchorfile>
      <anchor>a2178f54c51f020d8b385859e33381c0a</anchor>
      <arglist>(ExternalRows_dh er, Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExternalRows_dhRecvRows</name>
      <anchorfile>ExternalRows__dh_8h.html</anchorfile>
      <anchor>a639d3645f1c2f69caebaef5603917a3a</anchor>
      <arglist>(ExternalRows_dh extRows)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExternalRows_dhSendRows</name>
      <anchorfile>ExternalRows__dh_8h.html</anchorfile>
      <anchor>a81afc3f00d18fbc2d9fccdae0c1ad874</anchor>
      <arglist>(ExternalRows_dh extRows)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExternalRows_dhGetRow</name>
      <anchorfile>ExternalRows__dh_8h.html</anchorfile>
      <anchor>a2f73fa93f4d539805e4dc16a556d8e1c</anchor>
      <arglist>(ExternalRows_dh er, int globalRow, int *len, int **cval, int **fill, REAL_DH **aval)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Factor_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Factor__dh_8c</filename>
    <includes id="Factor__dh_8h" name="Factor_dh.h" local="yes" imported="no">Factor_dh.h</includes>
    <includes id="Vec__dh_8h" name="Vec_dh.h" local="yes" imported="no">Vec_dh.h</includes>
    <includes id="Mat__dh_8h" name="Mat_dh.h" local="yes" imported="no">Mat_dh.h</includes>
    <includes id="SubdomainGraph__dh_8h" name="SubdomainGraph_dh.h" local="yes" imported="no">SubdomainGraph_dh.h</includes>
    <includes id="TimeLog__dh_8h" name="TimeLog_dh.h" local="yes" imported="no">TimeLog_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <includes id="Numbering__dh_8h" name="Numbering_dh.h" local="yes" imported="no">Numbering_dh.h</includes>
    <includes id="Hash__i__dh_8h" name="Hash_i_dh.h" local="yes" imported="no">Hash_i_dh.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="mat__dh__private_8h" name="mat_dh_private.h" local="yes" imported="no">mat_dh_private.h</includes>
    <includes id="getRow__dh_8h" name="getRow_dh.h" local="yes" imported="no">getRow_dh.h</includes>
    <includes id="Euclid__dh_8h" name="Euclid_dh.h" local="yes" imported="no">Euclid_dh.h</includes>
    <includes id="io__dh_8h" name="io_dh.h" local="yes" imported="no">io_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dh_junk</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a28b207bff743558628c9aa1318d3cd27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>adjust_bj_private</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a9c00153daeb447e07b7cdde9bc6ecd06</anchor>
      <arglist>(Factor_dh mat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unadjust_bj_private</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>ad1776b65686408dbf1237116f81300c5</anchor>
      <arglist>(Factor_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhCreate</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a2ab79de8d0157c26b543cec7785f4bd6</anchor>
      <arglist>(Factor_dh *mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhDestroy</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a79d3d874a4913e250a56564deaadae3e</anchor>
      <arglist>(Factor_dh mat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create_fake_mat_private</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a8592f6b249a8bb0f7eb2cab7a64a65e4</anchor>
      <arglist>(Factor_dh mat, Mat_dh *matFakeIN)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy_fake_mat_private</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a9d6669c5a7c394f0d2851b4500c17e97</anchor>
      <arglist>(Mat_dh matFake)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Factor_dhReadNz</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a82ad6b1871695dfee290b7964e0c42aa</anchor>
      <arglist>(Factor_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhPrintRows</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>ab49741d300eb31555057bc2e4da80f78</anchor>
      <arglist>(Factor_dh mat, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhPrintDiags</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>abcdfb1e43f98f418d37931b629e420f1</anchor>
      <arglist>(Factor_dh mat, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhPrintGraph</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>ad963cc35c3226c5a910f61fc531d2081</anchor>
      <arglist>(Factor_dh mat, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhPrintTriples</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a05fceaaa02fe512b6647c3fd9da4bb1c</anchor>
      <arglist>(Factor_dh mat, char *filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>setup_receives_private</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>af50369214e601897b8958bd75146396a</anchor>
      <arglist>(Factor_dh mat, int *beg_rows, int *end_rows, double *recvBuf, MPI_Request *req, int *reqind, int reqlen, int *outlist, bool debug)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setup_sends_private</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a3effe47b4ece11fb17329b7e84bf3d88</anchor>
      <arglist>(Factor_dh mat, int *inlist, int *o2n_subdomain, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhSolveSetup</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a775fda2d4f0dd30f46c6d15481bd8186</anchor>
      <arglist>(Factor_dh mat, SubdomainGraph_dh sg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>forward_solve_private</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>ac8428448cfe2924b06985b94eb8250f1</anchor>
      <arglist>(int m, int from, int to, int *rp, int *cval, int *diag, double *aval, double *rhs, double *work_y, bool debug)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>backward_solve_private</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>ae6e6a7e7173e26368942be176127a3c8</anchor>
      <arglist>(int m, int from, int to, int *rp, int *cval, int *diag, double *aval, double *work_y, double *work_x, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhSolve</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>af4a364d05d6dd9a9a22d9f7710e947aa</anchor>
      <arglist>(double *rhs, double *lhs, Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhInit</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a44018a1a286f2a2938e7da8d3707920a</anchor>
      <arglist>(void *A, bool fillFlag, bool avalFlag, double rho, int id, int beg_rowP, Factor_dh *Fout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhReallocate</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>ae239cd0c784db1046eb157f3bbe586be</anchor>
      <arglist>(Factor_dh F, int used, int additional)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhTranspose</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>aa49731789fb41c103165f0256773fed7</anchor>
      <arglist>(Factor_dh A, Factor_dh *Bout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhSolveSeq</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>ad50164ab283e3c3c4870087d5c483aa8</anchor>
      <arglist>(double *rhs, double *lhs, Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Factor_dhMaxPivotInverse</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>a499f7b6110b7989cbb47463096022dc8</anchor>
      <arglist>(Factor_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Factor_dhMaxValue</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>ad748883314d74bf65e7b48df5a1cf317</anchor>
      <arglist>(Factor_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Factor_dhCondEst</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>aa070152259c081e2acefcc385f914baa</anchor>
      <arglist>(Factor_dh mat, Euclid_dh ctx)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>beg_rowG</name>
      <anchorfile>Factor__dh_8c.html</anchorfile>
      <anchor>ad7d8c931b2ab0ee6bf8f678b7bb2a261</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Factor_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Factor__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <class kind="struct">_factor_dh</class>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhCreate</name>
      <anchorfile>Factor__dh_8h.html</anchorfile>
      <anchor>a2ab79de8d0157c26b543cec7785f4bd6</anchor>
      <arglist>(Factor_dh *mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhDestroy</name>
      <anchorfile>Factor__dh_8h.html</anchorfile>
      <anchor>a79d3d874a4913e250a56564deaadae3e</anchor>
      <arglist>(Factor_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhTranspose</name>
      <anchorfile>Factor__dh_8h.html</anchorfile>
      <anchor>aec1f9882d1f2f55b5a786167a82a5146</anchor>
      <arglist>(Factor_dh matIN, Factor_dh *matOUT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhInit</name>
      <anchorfile>Factor__dh_8h.html</anchorfile>
      <anchor>a27af73ab700f0c34366298f9eebc8572</anchor>
      <arglist>(void *A, bool fillFlag, bool avalFlag, double rho, int id, int beg_rowP, Factor_dh *F)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhReallocate</name>
      <anchorfile>Factor__dh_8h.html</anchorfile>
      <anchor>ae239cd0c784db1046eb157f3bbe586be</anchor>
      <arglist>(Factor_dh F, int used, int additional)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhSolveSetup</name>
      <anchorfile>Factor__dh_8h.html</anchorfile>
      <anchor>a775fda2d4f0dd30f46c6d15481bd8186</anchor>
      <arglist>(Factor_dh mat, SubdomainGraph_dh sg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhSolve</name>
      <anchorfile>Factor__dh_8h.html</anchorfile>
      <anchor>af4a364d05d6dd9a9a22d9f7710e947aa</anchor>
      <arglist>(double *rhs, double *lhs, Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhSolveSeq</name>
      <anchorfile>Factor__dh_8h.html</anchorfile>
      <anchor>ad50164ab283e3c3c4870087d5c483aa8</anchor>
      <arglist>(double *rhs, double *lhs, Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Factor_dhCondEst</name>
      <anchorfile>Factor__dh_8h.html</anchorfile>
      <anchor>aa070152259c081e2acefcc385f914baa</anchor>
      <arglist>(Factor_dh mat, Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Factor_dhMaxValue</name>
      <anchorfile>Factor__dh_8h.html</anchorfile>
      <anchor>ad748883314d74bf65e7b48df5a1cf317</anchor>
      <arglist>(Factor_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Factor_dhMaxPivotInverse</name>
      <anchorfile>Factor__dh_8h.html</anchorfile>
      <anchor>a499f7b6110b7989cbb47463096022dc8</anchor>
      <arglist>(Factor_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Factor_dhReadNz</name>
      <anchorfile>Factor__dh_8h.html</anchorfile>
      <anchor>a82ad6b1871695dfee290b7964e0c42aa</anchor>
      <arglist>(Factor_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhPrintTriples</name>
      <anchorfile>Factor__dh_8h.html</anchorfile>
      <anchor>a05fceaaa02fe512b6647c3fd9da4bb1c</anchor>
      <arglist>(Factor_dh mat, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhPrintGraph</name>
      <anchorfile>Factor__dh_8h.html</anchorfile>
      <anchor>ad963cc35c3226c5a910f61fc531d2081</anchor>
      <arglist>(Factor_dh mat, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhPrintDiags</name>
      <anchorfile>Factor__dh_8h.html</anchorfile>
      <anchor>abcdfb1e43f98f418d37931b629e420f1</anchor>
      <arglist>(Factor_dh mat, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Factor_dhPrintRows</name>
      <anchorfile>Factor__dh_8h.html</anchorfile>
      <anchor>ab49741d300eb31555057bc2e4da80f78</anchor>
      <arglist>(Factor_dh mat, FILE *fp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>getRow_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>getRow__dh_8c</filename>
    <includes id="getRow__dh_8h" name="getRow_dh.h" local="yes" imported="no">getRow_dh.h</includes>
    <includes id="Mat__dh_8h" name="Mat_dh.h" local="yes" imported="no">Mat_dh.h</includes>
    <includes id="Euclid__dh_8h" name="Euclid_dh.h" local="yes" imported="no">Euclid_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>getRow__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>getRow__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>getRow__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>getRow__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EuclidGetRow</name>
      <anchorfile>getRow__dh_8c.html</anchorfile>
      <anchor>a527f5314206bc74e411f3ce93aa9f5da</anchor>
      <arglist>(void *A, int row, int *len, int **ind, double **val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EuclidRestoreRow</name>
      <anchorfile>getRow__dh_8c.html</anchorfile>
      <anchor>a7bc9432d5662a3f4adb016961e8420aa</anchor>
      <arglist>(void *A, int row, int *len, int **ind, double **val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EuclidGetDimensions</name>
      <anchorfile>getRow__dh_8c.html</anchorfile>
      <anchor>ac2bd228be5393a5eba2a07e5efd8299b</anchor>
      <arglist>(void *A, int *beg_row, int *rowsLocal, int *rowsGlobal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintMatUsingGetRow</name>
      <anchorfile>getRow__dh_8c.html</anchorfile>
      <anchor>a8aea4414d8f9946aa91b40b56bf5c34c</anchor>
      <arglist>(void *A, int beg_row, int m, int *n2o_row, int *n2o_col, char *filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>getRow_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>getRow__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <includes id="call__epetra_8h" name="call_epetra.h" local="yes" imported="no">call_epetra.h</includes>
    <member kind="function">
      <type>void</type>
      <name>EuclidGetDimensions</name>
      <anchorfile>getRow__dh_8h.html</anchorfile>
      <anchor>ac2bd228be5393a5eba2a07e5efd8299b</anchor>
      <arglist>(void *A, int *beg_row, int *rowsLocal, int *rowsGlobal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EuclidGetRow</name>
      <anchorfile>getRow__dh_8h.html</anchorfile>
      <anchor>a527f5314206bc74e411f3ce93aa9f5da</anchor>
      <arglist>(void *A, int row, int *len, int **ind, double **val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EuclidRestoreRow</name>
      <anchorfile>getRow__dh_8h.html</anchorfile>
      <anchor>a7bc9432d5662a3f4adb016961e8420aa</anchor>
      <arglist>(void *A, int row, int *len, int **ind, double **val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EuclidReadLocalNz</name>
      <anchorfile>getRow__dh_8h.html</anchorfile>
      <anchor>a0c638f3e7e778f55bfec3d47bcf9adb4</anchor>
      <arglist>(void *A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintMatUsingGetRow</name>
      <anchorfile>getRow__dh_8h.html</anchorfile>
      <anchor>a8aea4414d8f9946aa91b40b56bf5c34c</anchor>
      <arglist>(void *A, int beg_row, int m, int *n2o_row, int *n2o_col, char *filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>globalObjects.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>globalObjects_8c</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <includes id="TimeLog__dh_8h" name="TimeLog_dh.h" local="yes" imported="no">TimeLog_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MAX_MSG_SIZE</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a17e333794ae761cd55ec6fd6fc0f1bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_STACK_SIZE</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>accbb358028675c83675d8b34c386268d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_ERROR_SPACES</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>af3760668d356490d4308282a1b0140ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INDENT_DH</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a79de10838c58b011e50dbccd5bd76f7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sigRegister_dh</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a53153d42a243b32819c68f190d36e52c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>openLogfile_dh</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>ae83dfd830e601aa856b20c7089fd253e</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeLogfile_dh</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>aa47442116bcf6a3ee89d8015162c04fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInfo_dh</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a76ea135161f2cd6c43602172685cae4e</anchor>
      <arglist>(char *msg, char *function, char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dh_StartFunc</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>aec364843878da08ca84cc37401e81a2c</anchor>
      <arglist>(char *function, char *file, int line, int priority)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dh_EndFunc</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a6f1faab977f92341778574cc86abff07</anchor>
      <arglist>(char *function, int priority)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setError_dh</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a207a4a191fde96de5ba87e12c25727ba</anchor>
      <arglist>(char *msg, char *function, char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printErrorMsg</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a39cf038589f4eb3215515c95ed8014c0</anchor>
      <arglist>(FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printFunctionStack</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a61709b28471d4e40f1fcac9e40a3df44</anchor>
      <arglist>(FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Error_dhStartFunc</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a2fd7051586c1c3b1182bb57dd83c48df</anchor>
      <arglist>(char *function, char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Error_dhEndFunc</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a9e5fa95ebb3ace20fe00c41ee12c6f48</anchor>
      <arglist>(char *function)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>EuclidIsInitialized</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>ac3ea2d4ca831d66252e28b24c9482999</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EuclidInitialize</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>afb6519dd0ab9bf3927a3b5674b7a1887</anchor>
      <arglist>(int argc, char *argv[], char *help)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EuclidFinalize</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>ae641b423922f3df5255976c578e910cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printf_dh</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a495c6cda5f33d7988214c4ba7c2e9f02</anchor>
      <arglist>(char *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fprintf_dh</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a6c165a9d4dab0a391c7b7300620d2789</anchor>
      <arglist>(FILE *fp, char *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>echoInvocation_dh</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a5221d9a03e80f49a08ae0a2a89a5aa47</anchor>
      <arglist>(MPI_Comm comm, char *prefix, int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>errFlag_dh</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a322a6f87c3d317c26aa957d75070438f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Parser_dh</type>
      <name>parser_dh</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a3bd8d0f863b435ddce0fba94a9b27c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimeLog_dh</type>
      <name>tlog_dh</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a69d7b72adb4f03161adc438d6a669f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mem_dh</type>
      <name>mem_dh</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a668b963fdd5538a860b9648fa0b0489e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>logFile</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a3c4a30fb69c55f449605ba662e0cf5c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>msgBuf_dh</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a871aa6b89f4d743925ab179e0e1d0975</anchor>
      <arglist>[MSG_BUF_SIZE_DH]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>np_dh</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a2fd174797f8132f4382ac49624a48d7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myid_dh</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a2f4e0a602a7424672ae577ec35a6effb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPI_Comm</type>
      <name>comm_dh</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a925a7279fa4859dca23c7bc5e7b73bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>logInfoToStderr</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a75385093a0a01166ff52f97b77cfded1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>logInfoToFile</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a253f258568f1da00d846aa5cd66ef28c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>logFuncsToStderr</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a9a47fd08c4c945694050c4143e6a87d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>logFuncsToFile</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>aff2814560e40f53ef510e5001a29d10b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ignoreMe</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a2a9b38b6121347f0a110986f2e89cd89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ref_counter</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a5e93b6ff1241a8ea952f207d5fbc5eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static char</type>
      <name>errMsg_private</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>aa35c5cfade8ad4b6992d19ee2ac491b3</anchor>
      <arglist>[MAX_STACK_SIZE][MAX_MSG_SIZE]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>errCount_private</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a7a61c5f035ac3e4691eebadee738df75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static char</type>
      <name>calling_stack</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a4d628ed7055ac085c5bd887ea9b56a59</anchor>
      <arglist>[MAX_STACK_SIZE][MAX_MSG_SIZE]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>calling_stack_count</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a1c76a2abc2ab3740b3268d90e199833e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static char</type>
      <name>spaces</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a132e5b33948d5435d439e200cd8b2191</anchor>
      <arglist>[MAX_ERROR_SPACES]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>nesting</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a37e0f72aa876d090c0ab7df5b2c175ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>initSpaces</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>ac2e3dea85ec5366624518326d3fb1e57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>EuclidIsActive</name>
      <anchorfile>globalObjects_8c.html</anchorfile>
      <anchor>a1ce490a5da58e925844dc248cef8abc4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>guards_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>guards__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>INITIALIZE_DH</name>
      <anchorfile>guards__dh_8h.html</anchorfile>
      <anchor>a332820f942a428b034e069e355ac227f</anchor>
      <arglist>(argc, argv, help)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FINALIZE_DH</name>
      <anchorfile>guards__dh_8h.html</anchorfile>
      <anchor>a0f9159209ae217d7dee0eb99b8bb2c28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Hash_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Hash__dh_8c</filename>
    <includes id="Hash__dh_8h" name="Hash_dh.h" local="yes" imported="no">Hash_dh.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <class kind="struct">_hash_node_private</class>
    <member kind="define">
      <type>#define</type>
      <name>CUR_MARK_INIT</name>
      <anchorfile>Hash__dh_8c.html</anchorfile>
      <anchor>a3a054aee59e7b84a12d0fcc4659a28b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Hash__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Hash__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Hash__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Hash__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Hash__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Hash__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Hash__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Hash_dhInit_private</name>
      <anchorfile>Hash__dh_8c.html</anchorfile>
      <anchor>a39cc919b3681c586301db44820865731</anchor>
      <arglist>(Hash_dh h, int s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Hash_dhCreate</name>
      <anchorfile>Hash__dh_8c.html</anchorfile>
      <anchor>a8e2e3f3ec8a285f9aa7aa2327d103e2f</anchor>
      <arglist>(Hash_dh *h, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Hash_dhDestroy</name>
      <anchorfile>Hash__dh_8c.html</anchorfile>
      <anchor>a0e13fcfb456978df28a2e376c6e5fcc5</anchor>
      <arglist>(Hash_dh h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Hash_dhReset</name>
      <anchorfile>Hash__dh_8c.html</anchorfile>
      <anchor>ad83c340d4aa0b6463aefae7a766a49f0</anchor>
      <arglist>(Hash_dh h)</arglist>
    </member>
    <member kind="function">
      <type>HashData *</type>
      <name>Hash_dhLookup</name>
      <anchorfile>Hash__dh_8c.html</anchorfile>
      <anchor>a1de9996b127bbf743176956eebdb44ac</anchor>
      <arglist>(Hash_dh h, int key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Hash_dhInsert</name>
      <anchorfile>Hash__dh_8c.html</anchorfile>
      <anchor>ad20b72909f5b47f614fb201d6b7e29fe</anchor>
      <arglist>(Hash_dh h, int key, HashData *dataIN)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Hash_dhPrint</name>
      <anchorfile>Hash__dh_8c.html</anchorfile>
      <anchor>a4a7797009b5da169ed0bb7003973a5ce</anchor>
      <arglist>(Hash_dh h, FILE *fp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Hash_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Hash__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <class kind="struct">_hash_node</class>
    <class kind="struct">_hash_dh</class>
    <member kind="define">
      <type>#define</type>
      <name>HASH_1</name>
      <anchorfile>Hash__dh_8h.html</anchorfile>
      <anchor>a5b187d8f7797e2b9b1455f7c96d0c525</anchor>
      <arglist>(k, size, idxOut)    </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HASH_2</name>
      <anchorfile>Hash__dh_8h.html</anchorfile>
      <anchor>acbde4d2c068314849241f494d860e075</anchor>
      <arglist>(k, size, idxOut)        </arglist>
    </member>
    <member kind="typedef">
      <type>struct _hash_node</type>
      <name>HashData</name>
      <anchorfile>Hash__dh_8h.html</anchorfile>
      <anchor>a0069bf221b970d03f49aea462dafd656</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _hash_node_private</type>
      <name>HashRecord</name>
      <anchorfile>Hash__dh_8h.html</anchorfile>
      <anchor>a60d3539afcb9fb7b3e91091a837f419e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Hash_dhCreate</name>
      <anchorfile>Hash__dh_8h.html</anchorfile>
      <anchor>a8e2e3f3ec8a285f9aa7aa2327d103e2f</anchor>
      <arglist>(Hash_dh *h, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Hash_dhDestroy</name>
      <anchorfile>Hash__dh_8h.html</anchorfile>
      <anchor>a0e13fcfb456978df28a2e376c6e5fcc5</anchor>
      <arglist>(Hash_dh h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Hash_dhInsert</name>
      <anchorfile>Hash__dh_8h.html</anchorfile>
      <anchor>aa6912f90c5c472c77df4e6051ed48178</anchor>
      <arglist>(Hash_dh h, int key, HashData *data)</arglist>
    </member>
    <member kind="function">
      <type>HashData *</type>
      <name>Hash_dhLookup</name>
      <anchorfile>Hash__dh_8h.html</anchorfile>
      <anchor>a1de9996b127bbf743176956eebdb44ac</anchor>
      <arglist>(Hash_dh h, int key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Hash_dhReset</name>
      <anchorfile>Hash__dh_8h.html</anchorfile>
      <anchor>ad83c340d4aa0b6463aefae7a766a49f0</anchor>
      <arglist>(Hash_dh h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Hash_dhPrint</name>
      <anchorfile>Hash__dh_8h.html</anchorfile>
      <anchor>a4a7797009b5da169ed0bb7003973a5ce</anchor>
      <arglist>(Hash_dh h, FILE *fp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Hash_i_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Hash__i__dh_8c</filename>
    <includes id="Hash__i__dh_8h" name="Hash_i_dh.h" local="yes" imported="no">Hash_i_dh.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <class kind="struct">_hash_i_node_private</class>
    <class kind="struct">_hash_i_dh</class>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_TABLE_SIZE</name>
      <anchorfile>Hash__i__dh_8c.html</anchorfile>
      <anchor>af357bce55e0f2b7882ed496d2476f5ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HASH_1</name>
      <anchorfile>Hash__i__dh_8c.html</anchorfile>
      <anchor>a5b187d8f7797e2b9b1455f7c96d0c525</anchor>
      <arglist>(k, size, idxOut)    </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HASH_2</name>
      <anchorfile>Hash__i__dh_8c.html</anchorfile>
      <anchor>acbde4d2c068314849241f494d860e075</anchor>
      <arglist>(k, size, idxOut)        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Hash__i__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Hash__i__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Hash__i__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Hash__i__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Hash__i__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Hash__i__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _hash_i_node_private</type>
      <name>Hash_i_Record</name>
      <anchorfile>Hash__i__dh_8c.html</anchorfile>
      <anchor>a9171dc477970a60852a879ca35250c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>rehash_private</name>
      <anchorfile>Hash__i__dh_8c.html</anchorfile>
      <anchor>a0a43dce014adcacc4002af4e328be8fc</anchor>
      <arglist>(Hash_i_dh h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Hash_i_dhCreate</name>
      <anchorfile>Hash__i__dh_8c.html</anchorfile>
      <anchor>a05a7672c3f327afa5a9cf41a6c00046c</anchor>
      <arglist>(Hash_i_dh *h, int sizeIN)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Hash_i_dhDestroy</name>
      <anchorfile>Hash__i__dh_8c.html</anchorfile>
      <anchor>a68e447d94b294f6150ce11f637755022</anchor>
      <arglist>(Hash_i_dh h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Hash_i_dhReset</name>
      <anchorfile>Hash__i__dh_8c.html</anchorfile>
      <anchor>a2951141f59d4c811cb02ec4cb87519f0</anchor>
      <arglist>(Hash_i_dh h)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Hash_i_dhLookup</name>
      <anchorfile>Hash__i__dh_8c.html</anchorfile>
      <anchor>aafc3c48fe8ac4b23a33cefe3730e4245</anchor>
      <arglist>(Hash_i_dh h, int key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Hash_i_dhInsert</name>
      <anchorfile>Hash__i__dh_8c.html</anchorfile>
      <anchor>a464f1fd5a58a49e1e93738102df94d76</anchor>
      <arglist>(Hash_i_dh h, int key, int dataIN)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Hash_i_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Hash__i__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <member kind="function">
      <type>void</type>
      <name>Hash_i_dhCreate</name>
      <anchorfile>Hash__i__dh_8h.html</anchorfile>
      <anchor>a26d17941b45f8a89d021de70c4548a34</anchor>
      <arglist>(Hash_i_dh *h, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Hash_i_dhDestroy</name>
      <anchorfile>Hash__i__dh_8h.html</anchorfile>
      <anchor>a68e447d94b294f6150ce11f637755022</anchor>
      <arglist>(Hash_i_dh h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Hash_i_dhReset</name>
      <anchorfile>Hash__i__dh_8h.html</anchorfile>
      <anchor>a2951141f59d4c811cb02ec4cb87519f0</anchor>
      <arglist>(Hash_i_dh h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Hash_i_dhInsert</name>
      <anchorfile>Hash__i__dh_8h.html</anchorfile>
      <anchor>a2098904e473e0624de8f31b25f7463e1</anchor>
      <arglist>(Hash_i_dh h, int key, int data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Hash_i_dhLookup</name>
      <anchorfile>Hash__i__dh_8h.html</anchorfile>
      <anchor>aafc3c48fe8ac4b23a33cefe3730e4245</anchor>
      <arglist>(Hash_i_dh h, int key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hypre_Helpers.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/Hypre/</path>
    <filename>hypre__Helpers_8cpp</filename>
    <includes id="hypre__Helpers_8hpp" name="hypre_Helpers.hpp" local="yes" imported="no">hypre_Helpers.hpp</includes>
    <includes id="Ifpack__Hypre_8h" name="Ifpack_Hypre.h" local="yes" imported="no">Ifpack_Hypre.h</includes>
    <member kind="function">
      <type>EpetraExt_HypreIJMatrix *</type>
      <name>newHypreMatrix</name>
      <anchorfile>hypre__Helpers_8cpp.html</anchorfile>
      <anchor>acead7857f27e7af3803ab94421d696ce</anchor>
      <arglist>(const int N)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_CrsMatrix *</type>
      <name>newCrsMatrix</name>
      <anchorfile>hypre__Helpers_8cpp.html</anchorfile>
      <anchor>a5bb05709df67f813f048a5537babbef1</anchor>
      <arglist>(int N)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_CrsMatrix *</type>
      <name>GetCrsMatrix</name>
      <anchorfile>hypre__Helpers_8cpp.html</anchorfile>
      <anchor>a56196c327d97777444ed534a0908b768</anchor>
      <arglist>(EpetraExt_HypreIJMatrix *Matrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>EquivalentVectors</name>
      <anchorfile>hypre__Helpers_8cpp.html</anchorfile>
      <anchor>a5abe836dfe6eac6a439b6f3a04e90018</anchor>
      <arglist>(Epetra_MultiVector &amp;Y1, Epetra_MultiVector &amp;Y2, const double tol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>EquivalentMatrices</name>
      <anchorfile>hypre__Helpers_8cpp.html</anchorfile>
      <anchor>aeee417ed96380e746c7ec9fda63857ff</anchor>
      <arglist>(Epetra_RowMatrix &amp;HypreMatrix, Epetra_RowMatrix &amp;CrsMatrix, const double tol)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hypre_Helpers.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/Hypre/</path>
    <filename>hypre__Helpers_8hpp</filename>
    <member kind="function">
      <type>EpetraExt_HypreIJMatrix *</type>
      <name>newHypreMatrix</name>
      <anchorfile>hypre__Helpers_8hpp.html</anchorfile>
      <anchor>a96bfe8cf5474b684123c7446bc8e7f11</anchor>
      <arglist>(int N)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_CrsMatrix *</type>
      <name>newCrsMatrix</name>
      <anchorfile>hypre__Helpers_8hpp.html</anchorfile>
      <anchor>a5bb05709df67f813f048a5537babbef1</anchor>
      <arglist>(int N)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_CrsMatrix *</type>
      <name>GetCrsMatrix</name>
      <anchorfile>hypre__Helpers_8hpp.html</anchorfile>
      <anchor>a009dd6b28f475d1b21941883ba6155c9</anchor>
      <arglist>(EpetraExt_HypreIJMatrix &amp;Matrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>EquivalentVectors</name>
      <anchorfile>hypre__Helpers_8hpp.html</anchorfile>
      <anchor>a92f2561245f3c2e9bc88861c8658b9af</anchor>
      <arglist>(Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y, double tol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>EquivalentMatrices</name>
      <anchorfile>hypre__Helpers_8hpp.html</anchorfile>
      <anchor>a07521613933f186dab89bff262a0be9c</anchor>
      <arglist>(Epetra_RowMatrix &amp;HypreMatrix, Epetra_RowMatrix &amp;CrsMatrix, double tol)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hypre_UnitTest.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/Hypre/</path>
    <filename>hypre__UnitTest_8cpp</filename>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <includes id="Ifpack__Hypre_8h" name="Ifpack_Hypre.h" local="yes" imported="no">Ifpack_Hypre.h</includes>
    <includes id="hypre__Helpers_8hpp" name="hypre_Helpers.hpp" local="yes" imported="no">hypre_Helpers.hpp</includes>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST</name>
      <anchorfile>hypre__UnitTest_8cpp.html</anchorfile>
      <anchor>a768aa69d2381bc94432010ab3050d7b9</anchor>
      <arglist>(Ifpack_Hypre, Construct)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST</name>
      <anchorfile>hypre__UnitTest_8cpp.html</anchorfile>
      <anchor>ad10f109aaad1034111f532f3b101ae72</anchor>
      <arglist>(Ifpack_Hypre, ParameterList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST</name>
      <anchorfile>hypre__UnitTest_8cpp.html</anchorfile>
      <anchor>ad649b6547bdb041d83ddb86e0e69c215</anchor>
      <arglist>(Ifpack_Hypre, Ifpack)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST</name>
      <anchorfile>hypre__UnitTest_8cpp.html</anchorfile>
      <anchor>a47543895db541bc15d4af0352286cc3f</anchor>
      <arglist>(Ifpack_Hypre, DiagonalMatrixInOrder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST</name>
      <anchorfile>hypre__UnitTest_8cpp.html</anchorfile>
      <anchor>a9e625296386003180ebb2307028f9da6</anchor>
      <arglist>(Ifpack_Hypre, DiagonalMatrixOutOfOrder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST</name>
      <anchorfile>hypre__UnitTest_8cpp.html</anchorfile>
      <anchor>a623957040fe4c5f9549ff05f26c9b3e4</anchor>
      <arglist>(Ifpack_Hypre, NonContiguousRowMap)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LL/hypre_UnitTest.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/Hypre_LL/</path>
    <filename>LL_2hypre__UnitTest_8cpp</filename>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST</name>
      <anchorfile>LL_2hypre__UnitTest_8cpp.html</anchorfile>
      <anchor>a768aa69d2381bc94432010ab3050d7b9</anchor>
      <arglist>(Ifpack_Hypre, Construct)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST</name>
      <anchorfile>LL_2hypre__UnitTest_8cpp.html</anchorfile>
      <anchor>ad10f109aaad1034111f532f3b101ae72</anchor>
      <arglist>(Ifpack_Hypre, ParameterList)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>N</name>
      <anchorfile>LL_2hypre__UnitTest_8cpp.html</anchorfile>
      <anchor>ab2b6b0c222cd1ce70d6a831f57241e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MatType</name>
      <anchorfile>LL_2hypre__UnitTest_8cpp.html</anchorfile>
      <anchor>a3eff8b0124525913afb5eca6212433c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>LL_2hypre__UnitTest_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ifp_parameters.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>ifp__parameters_8cpp</filename>
    <includes id="ifp__parameters_8h" name="ifp_parameters.h" local="no" imported="no">ifp_parameters.h</includes>
    <namespace>Ifpack</namespace>
    <member kind="function">
      <type>Teuchos::map&lt; std::string, parameter &gt; &amp;</type>
      <name>key_map</name>
      <anchorfile>namespaceIfpack.html</anchorfile>
      <anchor>a138b475b051a467d1b2e92308f56cc51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize_string_map</name>
      <anchorfile>namespaceIfpack.html</anchorfile>
      <anchor>a6efacf1036331f9bf43e5290e09d21af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>upper_case</name>
      <anchorfile>namespaceIfpack.html</anchorfile>
      <anchor>a71ec33ea04409c32fbd11d3055a33e45</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_parameters</name>
      <anchorfile>namespaceIfpack.html</anchorfile>
      <anchor>a929690bd471b9a3ba6d5cb94a7f79f4d</anchor>
      <arglist>(const Teuchos::ParameterList &amp;parameterlist, param_struct &amp;params, bool cerr_warning_if_unused)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ifp_parameters.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>ifp__parameters_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="no" imported="no">Ifpack_ConfigDefs.h</includes>
    <class kind="struct">Ifpack::param_struct</class>
    <namespace>Ifpack</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FIRST_INT_PARAM</name>
      <anchorfile>ifp__parameters_8h.html</anchorfile>
      <anchor>a27417beb990e0c7f11246537fb9acfcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAST_INT_PARAM</name>
      <anchorfile>ifp__parameters_8h.html</anchorfile>
      <anchor>a4a26681fdefe5ee18bd17571163fa445</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Teuchos::map&lt; std::string, parameter &gt; &amp;</type>
      <name>key_map</name>
      <anchorfile>namespaceIfpack.html</anchorfile>
      <anchor>a138b475b051a467d1b2e92308f56cc51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize_string_map</name>
      <anchorfile>namespaceIfpack.html</anchorfile>
      <anchor>a6efacf1036331f9bf43e5290e09d21af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>upper_case</name>
      <anchorfile>namespaceIfpack.html</anchorfile>
      <anchor>a71ec33ea04409c32fbd11d3055a33e45</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_parameters</name>
      <anchorfile>namespaceIfpack.html</anchorfile>
      <anchor>a929690bd471b9a3ba6d5cb94a7f79f4d</anchor>
      <arglist>(const Teuchos::ParameterList &amp;parameterlist, param_struct &amp;params, bool cerr_warning_if_unused)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <includes id="Ifpack__PointRelaxation_8h" name="Ifpack_PointRelaxation.h" local="yes" imported="no">Ifpack_PointRelaxation.h</includes>
    <includes id="Ifpack__BlockRelaxation_8h" name="Ifpack_BlockRelaxation.h" local="yes" imported="no">Ifpack_BlockRelaxation.h</includes>
    <includes id="Ifpack__IC_8h" name="Ifpack_IC.h" local="yes" imported="no">Ifpack_IC.h</includes>
    <includes id="Ifpack__ICT_8h" name="Ifpack_ICT.h" local="yes" imported="no">Ifpack_ICT.h</includes>
    <includes id="Ifpack__ILU_8h" name="Ifpack_ILU.h" local="yes" imported="no">Ifpack_ILU.h</includes>
    <includes id="Ifpack__SILU_8h" name="Ifpack_SILU.h" local="yes" imported="no">Ifpack_SILU.h</includes>
    <includes id="Ifpack__ILUT_8h" name="Ifpack_ILUT.h" local="yes" imported="no">Ifpack_ILUT.h</includes>
    <includes id="Ifpack__SPARSKIT_8h" name="Ifpack_SPARSKIT.h" local="yes" imported="no">Ifpack_SPARSKIT.h</includes>
    <includes id="Ifpack__AdditiveSchwarz_8h" name="Ifpack_AdditiveSchwarz.h" local="yes" imported="no">Ifpack_AdditiveSchwarz.h</includes>
    <includes id="Ifpack__DenseContainer_8h" name="Ifpack_DenseContainer.h" local="yes" imported="no">Ifpack_DenseContainer.h</includes>
    <includes id="Ifpack__TriDiContainer_8h" name="Ifpack_TriDiContainer.h" local="yes" imported="no">Ifpack_TriDiContainer.h</includes>
    <includes id="Ifpack__SparseContainer_8h" name="Ifpack_SparseContainer.h" local="yes" imported="no">Ifpack_SparseContainer.h</includes>
    <includes id="Ifpack__Chebyshev_8h" name="Ifpack_Chebyshev.h" local="yes" imported="no">Ifpack_Chebyshev.h</includes>
    <includes id="Ifpack__Polynomial_8h" name="Ifpack_Polynomial.h" local="yes" imported="no">Ifpack_Polynomial.h</includes>
    <includes id="Ifpack__Krylov_8h" name="Ifpack_Krylov.h" local="yes" imported="no">Ifpack_Krylov.h</includes>
    <includes id="Ifpack__IHSS_8h" name="Ifpack_IHSS.h" local="yes" imported="no">Ifpack_IHSS.h</includes>
    <includes id="Ifpack__SORa_8h" name="Ifpack_SORa.h" local="yes" imported="no">Ifpack_SORa.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <class kind="class">Ifpack</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_AdditiveSchwarz.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__AdditiveSchwarz_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <includes id="Ifpack__Reordering_8h" name="Ifpack_Reordering.h" local="yes" imported="no">Ifpack_Reordering.h</includes>
    <includes id="Ifpack__RCMReordering_8h" name="Ifpack_RCMReordering.h" local="yes" imported="no">Ifpack_RCMReordering.h</includes>
    <includes id="Ifpack__METISReordering_8h" name="Ifpack_METISReordering.h" local="yes" imported="no">Ifpack_METISReordering.h</includes>
    <includes id="Ifpack__LocalFilter_8h" name="Ifpack_LocalFilter.h" local="yes" imported="no">Ifpack_LocalFilter.h</includes>
    <includes id="Ifpack__NodeFilter_8h" name="Ifpack_NodeFilter.h" local="yes" imported="no">Ifpack_NodeFilter.h</includes>
    <includes id="Ifpack__SingletonFilter_8h" name="Ifpack_SingletonFilter.h" local="yes" imported="no">Ifpack_SingletonFilter.h</includes>
    <includes id="Ifpack__ReorderFilter_8h" name="Ifpack_ReorderFilter.h" local="yes" imported="no">Ifpack_ReorderFilter.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
    <includes id="Ifpack__OverlappingRowMatrix_8h" name="Ifpack_OverlappingRowMatrix.h" local="yes" imported="no">Ifpack_OverlappingRowMatrix.h</includes>
    <includes id="Ifpack__Condest_8h" name="Ifpack_Condest.h" local="yes" imported="no">Ifpack_Condest.h</includes>
    <class kind="class">Ifpack_AdditiveSchwarz</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_AMDReordering.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__AMDReordering_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Graph_8h" name="Ifpack_Graph.h" local="yes" imported="no">Ifpack_Graph.h</includes>
    <includes id="Ifpack__Graph__Epetra__RowMatrix_8h" name="Ifpack_Graph_Epetra_RowMatrix.h" local="yes" imported="no">Ifpack_Graph_Epetra_RowMatrix.h</includes>
    <includes id="Ifpack__AMDReordering_8h" name="Ifpack_AMDReordering.h" local="yes" imported="no">Ifpack_AMDReordering.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_AMDReordering.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__AMDReordering_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Reordering_8h" name="Ifpack_Reordering.h" local="yes" imported="no">Ifpack_Reordering.h</includes>
    <class kind="class">Ifpack_AMDReordering</class>
    <namespace>Teuchos</namespace>
  </compound>
  <compound kind="file">
    <name>Ifpack_Amesos.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Amesos_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <includes id="Ifpack__Amesos_8h" name="Ifpack_Amesos.h" local="yes" imported="no">Ifpack_Amesos.h</includes>
    <includes id="Ifpack__Condest_8h" name="Ifpack_Condest.h" local="yes" imported="no">Ifpack_Condest.h</includes>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>FirstTime</name>
      <anchorfile>Ifpack__Amesos_8cpp.html</anchorfile>
      <anchor>af1d18579862309ebb383f534ece9efc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_Amesos.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Amesos_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <class kind="class">Ifpack_Amesos</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_BlockRelaxation.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__BlockRelaxation_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <includes id="Ifpack__Partitioner_8h" name="Ifpack_Partitioner.h" local="yes" imported="no">Ifpack_Partitioner.h</includes>
    <includes id="Ifpack__LinePartitioner_8h" name="Ifpack_LinePartitioner.h" local="yes" imported="no">Ifpack_LinePartitioner.h</includes>
    <includes id="Ifpack__LinearPartitioner_8h" name="Ifpack_LinearPartitioner.h" local="yes" imported="no">Ifpack_LinearPartitioner.h</includes>
    <includes id="Ifpack__GreedyPartitioner_8h" name="Ifpack_GreedyPartitioner.h" local="yes" imported="no">Ifpack_GreedyPartitioner.h</includes>
    <includes id="Ifpack__METISPartitioner_8h" name="Ifpack_METISPartitioner.h" local="yes" imported="no">Ifpack_METISPartitioner.h</includes>
    <includes id="Ifpack__EquationPartitioner_8h" name="Ifpack_EquationPartitioner.h" local="yes" imported="no">Ifpack_EquationPartitioner.h</includes>
    <includes id="Ifpack__UserPartitioner_8h" name="Ifpack_UserPartitioner.h" local="yes" imported="no">Ifpack_UserPartitioner.h</includes>
    <includes id="Ifpack__Graph__Epetra__RowMatrix_8h" name="Ifpack_Graph_Epetra_RowMatrix.h" local="yes" imported="no">Ifpack_Graph_Epetra_RowMatrix.h</includes>
    <includes id="Ifpack__DenseContainer_8h" name="Ifpack_DenseContainer.h" local="yes" imported="no">Ifpack_DenseContainer.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
    <class kind="class">Ifpack_BlockRelaxation</class>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>IFPACK_JACOBI</name>
      <anchorfile>Ifpack__BlockRelaxation_8h.html</anchorfile>
      <anchor>a2912011f202a5678d2732d87172de9bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>IFPACK_GS</name>
      <anchorfile>Ifpack__BlockRelaxation_8h.html</anchorfile>
      <anchor>a3ab5a9e4bf0d18f58cde1b941372421c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>IFPACK_SGS</name>
      <anchorfile>Ifpack__BlockRelaxation_8h.html</anchorfile>
      <anchor>a6f4d1fbf6067c14798f2080e9312b038</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_Chebyshev.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Chebyshev_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Chebyshev_8h" name="Ifpack_Chebyshev.h" local="yes" imported="no">Ifpack_Chebyshev.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
    <includes id="Ifpack__Condest_8h" name="Ifpack_Condest.h" local="yes" imported="no">Ifpack_Condest.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ABS</name>
      <anchorfile>Ifpack__Chebyshev_8cpp.html</anchorfile>
      <anchor>a996f7be338ccb40d1a2a5abc1ad61759</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Apply_Transpose</name>
      <anchorfile>Ifpack__Chebyshev_8cpp.html</anchorfile>
      <anchor>ae96b03ebb92316c80be0364fcafb5b65</anchor>
      <arglist>(Teuchos::RCP&lt; const Epetra_Operator &gt; Operator_, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_Chebyshev.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Chebyshev_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <class kind="class">Ifpack_Chebyshev</class>
    <namespace>Teuchos</namespace>
  </compound>
  <compound kind="file">
    <name>Ifpack_Condest.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Condest_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Condest_8h" name="Ifpack_Condest.h" local="yes" imported="no">Ifpack_Condest.h</includes>
    <includes id="Ifpack__CondestType_8h" name="Ifpack_CondestType.h" local="yes" imported="no">Ifpack_CondestType.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <member kind="function">
      <type>double</type>
      <name>Ifpack_Condest</name>
      <anchorfile>Ifpack__Condest_8cpp.html</anchorfile>
      <anchor>a89936c84c7f0abd7ff9e88d634e70227</anchor>
      <arglist>(const Ifpack_Preconditioner &amp;IFP, const Ifpack_CondestType CT, const int MaxIters, const double Tol, Epetra_RowMatrix *Matrix)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_Condest.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Condest_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__CondestType_8h" name="Ifpack_CondestType.h" local="yes" imported="no">Ifpack_CondestType.h</includes>
    <member kind="function">
      <type>double</type>
      <name>Ifpack_Condest</name>
      <anchorfile>Ifpack__Condest_8h.html</anchorfile>
      <anchor>aec2ad2d4d5871eaa956bf86220725138</anchor>
      <arglist>(const Ifpack_Preconditioner &amp;IFP, const Ifpack_CondestType CT, const int MaxIters=1550, const double Tol=1e-9, Epetra_RowMatrix *Matrix=0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_CondestType.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__CondestType_8h</filename>
    <member kind="enumeration">
      <type></type>
      <name>Ifpack_CondestType</name>
      <anchorfile>Ifpack__CondestType_8h.html</anchorfile>
      <anchor>a7d5484aef1a1c5bcbcc669f6338650db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ifpack_Cheap</name>
      <anchorfile>Ifpack__CondestType_8h.html</anchorfile>
      <anchor>a7d5484aef1a1c5bcbcc669f6338650dba2af77883506442796c938f609da53420</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ifpack_CG</name>
      <anchorfile>Ifpack__CondestType_8h.html</anchorfile>
      <anchor>a7d5484aef1a1c5bcbcc669f6338650dbad6782810be950b8d8ad58d6cecffba27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ifpack_GMRES</name>
      <anchorfile>Ifpack__CondestType_8h.html</anchorfile>
      <anchor>a7d5484aef1a1c5bcbcc669f6338650dbac55eb61a3fd814105f6862e1623e1f81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ConfigDefs.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__ConfigDefs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>IFPACK_CHK_ERR</name>
      <anchorfile>Ifpack__ConfigDefs_8h.html</anchorfile>
      <anchor>ad0e7e880a6429d5ec30fec8df7dc76a4</anchor>
      <arglist>(ifpack_err)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IFPACK_CHK_ERRV</name>
      <anchorfile>Ifpack__ConfigDefs_8h.html</anchorfile>
      <anchor>af954c50d6feabbc6f1e86d6fe53dc73a</anchor>
      <arglist>(ifpack_err)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IFPACK_RETURN</name>
      <anchorfile>Ifpack__ConfigDefs_8h.html</anchorfile>
      <anchor>a32e23126be88d3d50ea6ba82a95de27f</anchor>
      <arglist>(ifpack_err)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IFPACK_SGN</name>
      <anchorfile>Ifpack__ConfigDefs_8h.html</anchorfile>
      <anchor>a3ec96edf91fe249e5350ae147974a56d</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IFPACK_ABS</name>
      <anchorfile>Ifpack__ConfigDefs_8h.html</anchorfile>
      <anchor>aed3555adfe18264da17f2dc00cdf1212</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_Container.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Container_8h</filename>
    <class kind="class">Ifpack_Container</class>
    <namespace>Teuchos</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>Ifpack__Container_8h.html</anchorfile>
      <anchor>afa24cbac51485874a5091e43f1aae212</anchor>
      <arglist>(std::ostream &amp;os, const Ifpack_Container &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_CrsGraph.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__CrsGraph_8h</filename>
    <class kind="class">Ifpack_CrsGraph</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_CrsIlut.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__CrsIlut_8cpp</filename>
    <includes id="Ifpack__CrsIlut_8h" name="Ifpack_CrsIlut.h" local="yes" imported="no">Ifpack_CrsIlut.h</includes>
    <includes id="ifp__parameters_8h" name="ifp_parameters.h" local="no" imported="no">ifp_parameters.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_CrsIlut.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__CrsIlut_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__ScalingType_8h" name="Ifpack_ScalingType.h" local="yes" imported="no">Ifpack_ScalingType.h</includes>
    <includes id="Ifpack__OverlapGraph_8h" name="Ifpack_OverlapGraph.h" local="yes" imported="no">Ifpack_OverlapGraph.h</includes>
    <includes id="Ifpack__OverlapFactorObject_8h" name="Ifpack_OverlapFactorObject.h" local="yes" imported="no">Ifpack_OverlapFactorObject.h</includes>
    <includes id="Ifpack__OverlapSolveObject_8h" name="Ifpack_OverlapSolveObject.h" local="yes" imported="no">Ifpack_OverlapSolveObject.h</includes>
    <class kind="class">Ifpack_CrsIlut</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_CrsRick.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__CrsRick_8cpp</filename>
    <includes id="Ifpack__CrsRick_8h" name="Ifpack_CrsRick.h" local="yes" imported="no">Ifpack_CrsRick.h</includes>
    <includes id="ifp__parameters_8h" name="ifp_parameters.h" local="no" imported="no">ifp_parameters.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>Ifpack__CrsRick_8cpp.html</anchorfile>
      <anchor>af20b8bcf1931be6472b2c6761c1bea31</anchor>
      <arglist>(std::ostream &amp;os, const Ifpack_CrsRick &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_CrsRick.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__CrsRick_8h</filename>
    <includes id="Ifpack__ScalingType_8h" name="Ifpack_ScalingType.h" local="yes" imported="no">Ifpack_ScalingType.h</includes>
    <includes id="Ifpack__IlukGraph_8h" name="Ifpack_IlukGraph.h" local="yes" imported="no">Ifpack_IlukGraph.h</includes>
    <class kind="class">Ifpack_CrsRick</class>
    <namespace>Teuchos</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>Ifpack__CrsRick_8h.html</anchorfile>
      <anchor>af20b8bcf1931be6472b2c6761c1bea31</anchor>
      <arglist>(std::ostream &amp;os, const Ifpack_CrsRick &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_CrsRiluk.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__CrsRiluk_8cpp</filename>
    <includes id="Ifpack__CrsRiluk_8h" name="Ifpack_CrsRiluk.h" local="yes" imported="no">Ifpack_CrsRiluk.h</includes>
    <includes id="ifp__parameters_8h" name="ifp_parameters.h" local="no" imported="no">ifp_parameters.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>Ifpack__CrsRiluk_8cpp.html</anchorfile>
      <anchor>a4ee46751ae4526c97e31afc7a321a8bf</anchor>
      <arglist>(std::ostream &amp;os, const Ifpack_CrsRiluk &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_CrsRiluk.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__CrsRiluk_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__ScalingType_8h" name="Ifpack_ScalingType.h" local="yes" imported="no">Ifpack_ScalingType.h</includes>
    <includes id="Ifpack__IlukGraph_8h" name="Ifpack_IlukGraph.h" local="yes" imported="no">Ifpack_IlukGraph.h</includes>
    <class kind="class">Ifpack_CrsRiluk</class>
    <namespace>Teuchos</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>Ifpack__CrsRiluk_8h.html</anchorfile>
      <anchor>a4ee46751ae4526c97e31afc7a321a8bf</anchor>
      <arglist>(std::ostream &amp;os, const Ifpack_CrsRiluk &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_DenseContainer.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__DenseContainer_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__DenseContainer_8h" name="Ifpack_DenseContainer.h" local="yes" imported="no">Ifpack_DenseContainer.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_DenseContainer.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__DenseContainer_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Container_8h" name="Ifpack_Container.h" local="yes" imported="no">Ifpack_Container.h</includes>
    <class kind="class">Ifpack_DenseContainer</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_DiagonalFilter.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__DiagonalFilter_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__DiagonalFilter_8h" name="Ifpack_DiagonalFilter.h" local="yes" imported="no">Ifpack_DiagonalFilter.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_DiagonalFilter.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__DiagonalFilter_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <class kind="class">Ifpack_DiagonalFilter</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_DiagPreconditioner.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__DiagPreconditioner_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__DiagPreconditioner_8h" name="Ifpack_DiagPreconditioner.h" local="yes" imported="no">Ifpack_DiagPreconditioner.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_DiagPreconditioner.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__DiagPreconditioner_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <class kind="class">Ifpack_DiagPreconditioner</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_DropFilter.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__DropFilter_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__DropFilter_8h" name="Ifpack_DropFilter.h" local="yes" imported="no">Ifpack_DropFilter.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_DropFilter.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__DropFilter_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <class kind="class">Ifpack_DropFilter</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_DynamicFactory.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__DynamicFactory_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__DynamicFactory_8h" name="Ifpack_DynamicFactory.h" local="yes" imported="no">Ifpack_DynamicFactory.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <includes id="Ifpack__PointRelaxation_8h" name="Ifpack_PointRelaxation.h" local="yes" imported="no">Ifpack_PointRelaxation.h</includes>
    <includes id="Ifpack__BlockRelaxation_8h" name="Ifpack_BlockRelaxation.h" local="yes" imported="no">Ifpack_BlockRelaxation.h</includes>
    <includes id="Ifpack__IC_8h" name="Ifpack_IC.h" local="yes" imported="no">Ifpack_IC.h</includes>
    <includes id="Ifpack__ICT_8h" name="Ifpack_ICT.h" local="yes" imported="no">Ifpack_ICT.h</includes>
    <includes id="Ifpack__ILU_8h" name="Ifpack_ILU.h" local="yes" imported="no">Ifpack_ILU.h</includes>
    <includes id="Ifpack__ILUT_8h" name="Ifpack_ILUT.h" local="yes" imported="no">Ifpack_ILUT.h</includes>
    <includes id="Ifpack__SPARSKIT_8h" name="Ifpack_SPARSKIT.h" local="yes" imported="no">Ifpack_SPARSKIT.h</includes>
    <includes id="Ifpack__AdditiveSchwarz_8h" name="Ifpack_AdditiveSchwarz.h" local="yes" imported="no">Ifpack_AdditiveSchwarz.h</includes>
    <includes id="Ifpack__DenseContainer_8h" name="Ifpack_DenseContainer.h" local="yes" imported="no">Ifpack_DenseContainer.h</includes>
    <includes id="Ifpack__SparseContainer_8h" name="Ifpack_SparseContainer.h" local="yes" imported="no">Ifpack_SparseContainer.h</includes>
    <includes id="Ifpack__Chebyshev_8h" name="Ifpack_Chebyshev.h" local="yes" imported="no">Ifpack_Chebyshev.h</includes>
    <includes id="Ifpack__IHSS_8h" name="Ifpack_IHSS.h" local="yes" imported="no">Ifpack_IHSS.h</includes>
    <includes id="Ifpack__SORa_8h" name="Ifpack_SORa.h" local="yes" imported="no">Ifpack_SORa.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_DynamicFactory.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__DynamicFactory_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <includes id="Ifpack__AdditiveSchwarz_8h" name="Ifpack_AdditiveSchwarz.h" local="yes" imported="no">Ifpack_AdditiveSchwarz.h</includes>
    <class kind="class">Ifpack_DynamicFactory</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_EquationPartitioner.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__EquationPartitioner_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Partitioner_8h" name="Ifpack_Partitioner.h" local="yes" imported="no">Ifpack_Partitioner.h</includes>
    <includes id="Ifpack__OverlappingPartitioner_8h" name="Ifpack_OverlappingPartitioner.h" local="yes" imported="no">Ifpack_OverlappingPartitioner.h</includes>
    <includes id="Ifpack__EquationPartitioner_8h" name="Ifpack_EquationPartitioner.h" local="yes" imported="no">Ifpack_EquationPartitioner.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_EquationPartitioner.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__EquationPartitioner_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Partitioner_8h" name="Ifpack_Partitioner.h" local="yes" imported="no">Ifpack_Partitioner.h</includes>
    <includes id="Ifpack__OverlappingPartitioner_8h" name="Ifpack_OverlappingPartitioner.h" local="yes" imported="no">Ifpack_OverlappingPartitioner.h</includes>
    <class kind="class">Ifpack_EquationPartitioner</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_Euclid.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Euclid_8cpp</filename>
    <includes id="Ifpack__Euclid_8h" name="Ifpack_Euclid.h" local="yes" imported="no">Ifpack_Euclid.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_Euclid.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Euclid_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_ex_Amesos.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/</path>
    <filename>Ifpack__ex__Amesos_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Ifpack__ex__Amesos_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ex_Amesos_LL.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/</path>
    <filename>Ifpack__ex__Amesos__LL_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Ifpack__ex__Amesos__LL_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ex_BlockRelaxation.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/</path>
    <filename>Ifpack__ex__BlockRelaxation_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__AdditiveSchwarz_8h" name="Ifpack_AdditiveSchwarz.h" local="yes" imported="no">Ifpack_AdditiveSchwarz.h</includes>
    <includes id="Ifpack__PointRelaxation_8h" name="Ifpack_PointRelaxation.h" local="yes" imported="no">Ifpack_PointRelaxation.h</includes>
    <includes id="Ifpack__BlockRelaxation_8h" name="Ifpack_BlockRelaxation.h" local="yes" imported="no">Ifpack_BlockRelaxation.h</includes>
    <includes id="Ifpack__SparseContainer_8h" name="Ifpack_SparseContainer.h" local="yes" imported="no">Ifpack_SparseContainer.h</includes>
    <includes id="Ifpack__Amesos_8h" name="Ifpack_Amesos.h" local="yes" imported="no">Ifpack_Amesos.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Ifpack__ex__BlockRelaxation_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ex_BlockRelaxation_LL.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/</path>
    <filename>Ifpack__ex__BlockRelaxation__LL_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__AdditiveSchwarz_8h" name="Ifpack_AdditiveSchwarz.h" local="yes" imported="no">Ifpack_AdditiveSchwarz.h</includes>
    <includes id="Ifpack__PointRelaxation_8h" name="Ifpack_PointRelaxation.h" local="yes" imported="no">Ifpack_PointRelaxation.h</includes>
    <includes id="Ifpack__BlockRelaxation_8h" name="Ifpack_BlockRelaxation.h" local="yes" imported="no">Ifpack_BlockRelaxation.h</includes>
    <includes id="Ifpack__SparseContainer_8h" name="Ifpack_SparseContainer.h" local="yes" imported="no">Ifpack_SparseContainer.h</includes>
    <includes id="Ifpack__Amesos_8h" name="Ifpack_Amesos.h" local="yes" imported="no">Ifpack_Amesos.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Ifpack__ex__BlockRelaxation__LL_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ex_Factory.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/</path>
    <filename>Ifpack__ex__Factory_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <includes id="Ifpack__AdditiveSchwarz_8h" name="Ifpack_AdditiveSchwarz.h" local="yes" imported="no">Ifpack_AdditiveSchwarz.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Ifpack__ex__Factory_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ex_Factory_LL.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/</path>
    <filename>Ifpack__ex__Factory__LL_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <includes id="Ifpack__AdditiveSchwarz_8h" name="Ifpack_AdditiveSchwarz.h" local="yes" imported="no">Ifpack_AdditiveSchwarz.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Ifpack__ex__Factory__LL_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ex_Filtering.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/</path>
    <filename>Ifpack__ex__Filtering_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__DropFilter_8h" name="Ifpack_DropFilter.h" local="yes" imported="no">Ifpack_DropFilter.h</includes>
    <includes id="Ifpack__SparsityFilter_8h" name="Ifpack_SparsityFilter.h" local="yes" imported="no">Ifpack_SparsityFilter.h</includes>
    <includes id="Ifpack__SingletonFilter_8h" name="Ifpack_SingletonFilter.h" local="yes" imported="no">Ifpack_SingletonFilter.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Ifpack__ex__Filtering_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ex_Filtering_LL.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/</path>
    <filename>Ifpack__ex__Filtering__LL_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__DropFilter_8h" name="Ifpack_DropFilter.h" local="yes" imported="no">Ifpack_DropFilter.h</includes>
    <includes id="Ifpack__SparsityFilter_8h" name="Ifpack_SparsityFilter.h" local="yes" imported="no">Ifpack_SparsityFilter.h</includes>
    <includes id="Ifpack__SingletonFilter_8h" name="Ifpack_SingletonFilter.h" local="yes" imported="no">Ifpack_SingletonFilter.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Ifpack__ex__Filtering__LL_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ex_ICT.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/</path>
    <filename>Ifpack__ex__ICT_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__AdditiveSchwarz_8h" name="Ifpack_AdditiveSchwarz.h" local="yes" imported="no">Ifpack_AdditiveSchwarz.h</includes>
    <includes id="Ifpack__ICT_8h" name="Ifpack_ICT.h" local="yes" imported="no">Ifpack_ICT.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Ifpack__ex__ICT_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ex_ICT_LL.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/</path>
    <filename>Ifpack__ex__ICT__LL_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__AdditiveSchwarz_8h" name="Ifpack_AdditiveSchwarz.h" local="yes" imported="no">Ifpack_AdditiveSchwarz.h</includes>
    <includes id="Ifpack__ICT_8h" name="Ifpack_ICT.h" local="yes" imported="no">Ifpack_ICT.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Ifpack__ex__ICT__LL_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ex_Reordering.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/</path>
    <filename>Ifpack__ex__Reordering_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Reordering_8h" name="Ifpack_Reordering.h" local="yes" imported="no">Ifpack_Reordering.h</includes>
    <includes id="Ifpack__RCMReordering_8h" name="Ifpack_RCMReordering.h" local="yes" imported="no">Ifpack_RCMReordering.h</includes>
    <includes id="Ifpack__ReorderFilter_8h" name="Ifpack_ReorderFilter.h" local="yes" imported="no">Ifpack_ReorderFilter.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Ifpack__ex__Reordering_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ex_Reordering_LL.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/</path>
    <filename>Ifpack__ex__Reordering__LL_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Reordering_8h" name="Ifpack_Reordering.h" local="yes" imported="no">Ifpack_Reordering.h</includes>
    <includes id="Ifpack__RCMReordering_8h" name="Ifpack_RCMReordering.h" local="yes" imported="no">Ifpack_RCMReordering.h</includes>
    <includes id="Ifpack__ReorderFilter_8h" name="Ifpack_ReorderFilter.h" local="yes" imported="no">Ifpack_ReorderFilter.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Ifpack__ex__Reordering__LL_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ex_ScalarLaplacian_FEM.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/</path>
    <filename>Ifpack__ex__ScalarLaplacian__FEM_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <includes id="Ifpack__AdditiveSchwarz_8h" name="Ifpack_AdditiveSchwarz.h" local="yes" imported="no">Ifpack_AdditiveSchwarz.h</includes>
    <class kind="class">Laplacian</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Ifpack__ex__ScalarLaplacian__FEM_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ex_VectorLaplacian_FEM.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/</path>
    <filename>Ifpack__ex__VectorLaplacian__FEM_8cpp</filename>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <includes id="Ifpack__AdditiveSchwarz_8h" name="Ifpack_AdditiveSchwarz.h" local="yes" imported="no">Ifpack_AdditiveSchwarz.h</includes>
    <class kind="class">MyVectorLaplacian</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Ifpack__ex__VectorLaplacian__FEM_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_Graph.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Graph_8h</filename>
    <class kind="class">Ifpack_Graph</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>Ifpack__Graph_8h.html</anchorfile>
      <anchor>a675fd6675a9afbd2e1866e5c8283aab1</anchor>
      <arglist>(std::ostream &amp;os, const Ifpack_Graph &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_Graph_Epetra_CrsGraph.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Graph__Epetra__CrsGraph_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Graph_8h" name="Ifpack_Graph.h" local="yes" imported="no">Ifpack_Graph.h</includes>
    <includes id="Ifpack__Graph__Epetra__CrsGraph_8h" name="Ifpack_Graph_Epetra_CrsGraph.h" local="yes" imported="no">Ifpack_Graph_Epetra_CrsGraph.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_Graph_Epetra_CrsGraph.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Graph__Epetra__CrsGraph_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Graph_8h" name="Ifpack_Graph.h" local="yes" imported="no">Ifpack_Graph.h</includes>
    <class kind="class">Ifpack_Graph_Epetra_CrsGraph</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_Graph_Epetra_RowMatrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Graph__Epetra__RowMatrix_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Graph_8h" name="Ifpack_Graph.h" local="yes" imported="no">Ifpack_Graph.h</includes>
    <includes id="Ifpack__Graph__Epetra__RowMatrix_8h" name="Ifpack_Graph_Epetra_RowMatrix.h" local="yes" imported="no">Ifpack_Graph_Epetra_RowMatrix.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_Graph_Epetra_RowMatrix.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Graph__Epetra__RowMatrix_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Graph_8h" name="Ifpack_Graph.h" local="yes" imported="no">Ifpack_Graph.h</includes>
    <class kind="class">Ifpack_Graph_Epetra_RowMatrix</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_GreedyPartitioner.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__GreedyPartitioner_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Partitioner_8h" name="Ifpack_Partitioner.h" local="yes" imported="no">Ifpack_Partitioner.h</includes>
    <includes id="Ifpack__OverlappingPartitioner_8h" name="Ifpack_OverlappingPartitioner.h" local="yes" imported="no">Ifpack_OverlappingPartitioner.h</includes>
    <includes id="Ifpack__GreedyPartitioner_8h" name="Ifpack_GreedyPartitioner.h" local="yes" imported="no">Ifpack_GreedyPartitioner.h</includes>
    <includes id="Ifpack__Graph_8h" name="Ifpack_Graph.h" local="yes" imported="no">Ifpack_Graph.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_GreedyPartitioner.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__GreedyPartitioner_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Partitioner_8h" name="Ifpack_Partitioner.h" local="yes" imported="no">Ifpack_Partitioner.h</includes>
    <includes id="Ifpack__OverlappingPartitioner_8h" name="Ifpack_OverlappingPartitioner.h" local="yes" imported="no">Ifpack_OverlappingPartitioner.h</includes>
    <class kind="class">Ifpack_GreedyPartitioner</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_HashTable.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__HashTable_8cpp</filename>
    <includes id="Ifpack__HashTable_8h" name="Ifpack_HashTable.h" local="yes" imported="no">Ifpack_HashTable.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_HashTable.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__HashTable_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <class kind="class">TIfpack_HashTable</class>
    <class kind="class">Ifpack_HashTable</class>
    <class kind="class">Ifpack_HashTable64</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_HIPS.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__HIPS_8cpp</filename>
    <includes id="Ifpack__HIPS_8h" name="Ifpack_HIPS.h" local="yes" imported="no">Ifpack_HIPS.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_HIPS.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__HIPS_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_Hypre.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Hypre_8cpp</filename>
    <includes id="Ifpack__Hypre_8h" name="Ifpack_Hypre.h" local="yes" imported="no">Ifpack_Hypre.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_Hypre.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Hypre_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>IFPACK_Hypre_UnitTest.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/Hypre/</path>
    <filename>IFPACK__Hypre__UnitTest_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>IFPACK__Hypre__UnitTest_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LL/IFPACK_Hypre_UnitTest.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/Hypre_LL/</path>
    <filename>LL_2IFPACK__Hypre__UnitTest_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>LL_2IFPACK__Hypre__UnitTest_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_IC.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__IC_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <includes id="Ifpack__IC_8h" name="Ifpack_IC.h" local="yes" imported="no">Ifpack_IC.h</includes>
    <includes id="Ifpack__IC__Utils_8h" name="Ifpack_IC_Utils.h" local="yes" imported="no">Ifpack_IC_Utils.h</includes>
    <includes id="Ifpack__Condest_8h" name="Ifpack_Condest.h" local="yes" imported="no">Ifpack_Condest.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_IC.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__IC_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__CondestType_8h" name="Ifpack_CondestType.h" local="yes" imported="no">Ifpack_CondestType.h</includes>
    <includes id="Ifpack__ScalingType_8h" name="Ifpack_ScalingType.h" local="yes" imported="no">Ifpack_ScalingType.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <class kind="class">Ifpack_IC</class>
    <namespace>Teuchos</namespace>
  </compound>
  <compound kind="file">
    <name>Ifpack_IC_Utils.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__IC__Utils_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__IC__Utils_8h" name="Ifpack_IC_Utils.h" local="yes" imported="no">Ifpack_IC_Utils.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>SYMSTR</name>
      <anchorfile>Ifpack__IC__Utils_8cpp.html</anchorfile>
      <anchor>a2573738daab2a048818c77c6aa719c84</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN</name>
      <anchorfile>Ifpack__IC__Utils_8cpp.html</anchorfile>
      <anchor>a3acffbd305ee72dcd4593c0d8af64a4f</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX</name>
      <anchorfile>Ifpack__IC__Utils_8cpp.html</anchorfile>
      <anchor>afa99ec4acc4ecb2dc3c2d05da15d0e3f</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ABS</name>
      <anchorfile>Ifpack__IC__Utils_8cpp.html</anchorfile>
      <anchor>ae2f08dc603ae93c402abd918ba4e23e1</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SHORTCUT</name>
      <anchorfile>Ifpack__IC__Utils_8cpp.html</anchorfile>
      <anchor>aaeb2168a241dc4e8660258eec82da8b8</anchor>
      <arglist>(p, a, ja, ia)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MATNULL</name>
      <anchorfile>Ifpack__IC__Utils_8cpp.html</anchorfile>
      <anchor>a118196c8b61eea4b50fb8ca4b7787020</anchor>
      <arglist>(p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Ifpack_AIJMatrix_alloc</name>
      <anchorfile>Ifpack__IC__Utils_8cpp.html</anchorfile>
      <anchor>adb7d7efe40676c101fb7a6edcab22963</anchor>
      <arglist>(Ifpack_AIJMatrix *a, int n, int nnz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Ifpack_AIJMatrix_dealloc</name>
      <anchorfile>Ifpack__IC__Utils_8cpp.html</anchorfile>
      <anchor>a9bd7a892ac76d59fc15fe16510b54325</anchor>
      <arglist>(Ifpack_AIJMatrix *a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>qsplit</name>
      <anchorfile>Ifpack__IC__Utils_8cpp.html</anchorfile>
      <anchor>a85b81cb8e9769e509477c321d1798cd5</anchor>
      <arglist>(double *a, int *ind, int n, int ncut)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>update_column</name>
      <anchorfile>Ifpack__IC__Utils_8cpp.html</anchorfile>
      <anchor>a928fad449f11ceb8e7479ca5924a163e</anchor>
      <arglist>(int k, const int *ia, const int *ja, const double *a, const int *ifirst, const int *ifirst2, const int *list2, const double *multipliers, const double *d, int *marker, double *ta, int *itcol, int *ptalen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>update_lists</name>
      <anchorfile>Ifpack__IC__Utils_8cpp.html</anchorfile>
      <anchor>abd2bc929864d7fa1491af23ab5a5d51b</anchor>
      <arglist>(int k, const int *ia, const int *ja, int *ifirst, int *list)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>update_lists_newcol</name>
      <anchorfile>Ifpack__IC__Utils_8cpp.html</anchorfile>
      <anchor>a9c08ed306a29d68e0ed46774a0156b99</anchor>
      <arglist>(int k, int isk, int iptr, int *ifirst, int *list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>crout_ict</name>
      <anchorfile>Ifpack__IC__Utils_8cpp.html</anchorfile>
      <anchor>ae9f6040a4dccd5b2126e353c737fd9b3</anchor>
      <arglist>(int n, const Ifpack_AIJMatrix *AL, const double *Adiag, double droptol, int lfil, Ifpack_AIJMatrix *L, double **pdiag)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_IC_Utils.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__IC__Utils_8h</filename>
    <class kind="struct">Ifpack_AIJMatrix</class>
    <member kind="function">
      <type>void</type>
      <name>ifpack_multilist_sort</name>
      <anchorfile>Ifpack__IC__Utils_8h.html</anchorfile>
      <anchor>af1e730179eb9f57b7b51c709e7f6a42d</anchor>
      <arglist>(int *const pbase, double *const daux, int total_elems)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Ifpack_AIJMatrix_dealloc</name>
      <anchorfile>Ifpack__IC__Utils_8h.html</anchorfile>
      <anchor>a9bd7a892ac76d59fc15fe16510b54325</anchor>
      <arglist>(Ifpack_AIJMatrix *a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>crout_ict</name>
      <anchorfile>Ifpack__IC__Utils_8h.html</anchorfile>
      <anchor>ae9f6040a4dccd5b2126e353c737fd9b3</anchor>
      <arglist>(int n, const Ifpack_AIJMatrix *AL, const double *Adiag, double droptol, int lfil, Ifpack_AIJMatrix *L, double **pdiag)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ICT.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__ICT_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <includes id="Ifpack__ICT_8h" name="Ifpack_ICT.h" local="yes" imported="no">Ifpack_ICT.h</includes>
    <includes id="Ifpack__Condest_8h" name="Ifpack_Condest.h" local="yes" imported="no">Ifpack_Condest.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
    <includes id="Ifpack__HashTable_8h" name="Ifpack_HashTable.h" local="yes" imported="no">Ifpack_HashTable.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_ICT.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__ICT_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__CondestType_8h" name="Ifpack_CondestType.h" local="yes" imported="no">Ifpack_CondestType.h</includes>
    <includes id="Ifpack__ScalingType_8h" name="Ifpack_ScalingType.h" local="yes" imported="no">Ifpack_ScalingType.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <class kind="class">Ifpack_ICT</class>
    <namespace>Teuchos</namespace>
  </compound>
  <compound kind="file">
    <name>Ifpack_IHSS.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__IHSS_8cpp</filename>
    <includes id="Ifpack__IHSS_8h" name="Ifpack_IHSS.h" local="yes" imported="no">Ifpack_IHSS.h</includes>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_IHSS.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__IHSS_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_IKLU.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__IKLU_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <includes id="Ifpack__IKLU_8h" name="Ifpack_IKLU.h" local="yes" imported="no">Ifpack_IKLU.h</includes>
    <includes id="Ifpack__Condest_8h" name="Ifpack_Condest.h" local="yes" imported="no">Ifpack_Condest.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
    <includes id="Ifpack__HashTable_8h" name="Ifpack_HashTable.h" local="yes" imported="no">Ifpack_HashTable.h</includes>
    <class kind="class">Ifpack_AbsComp</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_IKLU.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__IKLU_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__CondestType_8h" name="Ifpack_CondestType.h" local="yes" imported="no">Ifpack_CondestType.h</includes>
    <includes id="Ifpack__ScalingType_8h" name="Ifpack_ScalingType.h" local="yes" imported="no">Ifpack_ScalingType.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <includes id="Ifpack__IKLU__Utils_8h" name="Ifpack_IKLU_Utils.h" local="yes" imported="no">Ifpack_IKLU_Utils.h</includes>
    <class kind="class">Ifpack_IKLU</class>
    <namespace>Teuchos</namespace>
  </compound>
  <compound kind="file">
    <name>Ifpack_IKLU_Utils.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__IKLU__Utils_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__IKLU__Utils_8h" name="Ifpack_IKLU_Utils.h" local="yes" imported="no">Ifpack_IKLU_Utils.h</includes>
    <member kind="function">
      <type>csr *</type>
      <name>csr_spalloc</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>a01957faae2c610f933abf987cb83dbee</anchor>
      <arglist>(int m, int n, int nzmax, int values, int triplet)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_sprealloc</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>a5b286a6e3850ad7b7e7a6be52bfda1c1</anchor>
      <arglist>(csr *A, int nzmax)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>csr_realloc</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>a8a3081bf62bc0a23696fdd1b9384113f</anchor>
      <arglist>(void *p, int n, size_t size, int *ok)</arglist>
    </member>
    <member kind="function">
      <type>csr *</type>
      <name>csr_spfree</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>a1ccf68e96b754691e20ddb70cf79788f</anchor>
      <arglist>(csr *A)</arglist>
    </member>
    <member kind="function">
      <type>css *</type>
      <name>csr_sfree</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>a0738edda62c7276e99fa82d5cbc05cef</anchor>
      <arglist>(css *S)</arglist>
    </member>
    <member kind="function">
      <type>csrn *</type>
      <name>csr_nfree</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>a57bdf372be5c104fc11d7704a1abfcd6</anchor>
      <arglist>(csrn *N)</arglist>
    </member>
    <member kind="function">
      <type>csr *</type>
      <name>csr_done</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>ac821e0c6083c7ad9d71687239291c0af</anchor>
      <arglist>(csr *C, void *w, void *x, int ok)</arglist>
    </member>
    <member kind="function">
      <type>csrn *</type>
      <name>csr_ndone</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>abcd8c4e96a4ec083b2a42bb89b1b75b2</anchor>
      <arglist>(csrn *N, csr *C, void *w, void *x, int ok)</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>csr_idone</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>ab686f9d9042899227e3776930d516d86</anchor>
      <arglist>(int *p, csr *C, void *w, int ok)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>csr_cumsum</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>a1d8917d28b627c10262473e586dd7eab</anchor>
      <arglist>(int *p, int *c, int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_scatter</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>ab00a5134cb9c6fcbe1c0035524c9e206</anchor>
      <arglist>(const csr *B, int i, double alpha, int *w, double *x, int mark, csr *C, int nz)</arglist>
    </member>
    <member kind="function">
      <type>csr *</type>
      <name>csr_add</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>a4d39338facc133f7081c03286a5c0911</anchor>
      <arglist>(const csr *A, const csr *B, double alpha, double beta)</arglist>
    </member>
    <member kind="function">
      <type>csr *</type>
      <name>csr_transpose</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>afe26f84b1c5b794e6477775737e34b7c</anchor>
      <arglist>(const csr *A, int values)</arglist>
    </member>
    <member kind="function">
      <type>csr *</type>
      <name>csr_multiply</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>a910927ed9685b5f97cf9f7ff0ddc451f</anchor>
      <arglist>(const csr *A, const csr *B)</arglist>
    </member>
    <member kind="function">
      <type>css *</type>
      <name>csr_sqr</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>a698f989d0b96d933a5e8becf919888af</anchor>
      <arglist>(int order, const csr *A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_reach</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>a836ce1b6f5cf1529478ee5ecb345f2f1</anchor>
      <arglist>(csr *G, const csr *B, int k, int *xi, const int *pinv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_dfs</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>a2e777907935e40c661e31dcb38a600cc</anchor>
      <arglist>(int j, csr *G, int top, int *xi, int *pstack, const int *pinv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_tdfs</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>a424edb577c26b1458fd2a5c411b28798</anchor>
      <arglist>(int j, int k, int *head, const int *next, int *post, int *stack)</arglist>
    </member>
    <member kind="function">
      <type>csrn *</type>
      <name>csr_lu</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>aba7cb3b4928674aa6ae3d2c9deeb41a5</anchor>
      <arglist>(const csr *A, const css *S, double tol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_spsolve</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>a14944846a0793520849dc568b442a9df</anchor>
      <arglist>(csr *G, const csr *B, int k, int *xi, double *x, const int *pinv, int up)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>csr_wclear</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>abd53f0414a541a9eed954db2946464fd</anchor>
      <arglist>(int mark, int lemax, int *w, int n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>csr_diag</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>ab8b82724dbc5e9081fce619773ebd6e4</anchor>
      <arglist>(int i, int j, double aij, void *other)</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>csr_amd</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>ad5401ce253861d01dd6c0ccad839dc3c</anchor>
      <arglist>(int order, const csr *A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_print</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>ad40bc67e2a71aabf1eb933dae72bb6bd</anchor>
      <arglist>(const csr *A, int brief)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>csr_norm</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>aee09dfe141a01a5e087aba3a40c8e203</anchor>
      <arglist>(const csr *A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_fkeep</name>
      <anchorfile>Ifpack__IKLU__Utils_8cpp.html</anchorfile>
      <anchor>abc7483b34d602e941a69bd04acdd7ef1</anchor>
      <arglist>(csr *A, int(*fkeep)(int, int, double, void *), void *other)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_IKLU_Utils.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__IKLU__Utils_8h</filename>
    <class kind="struct">row_matrix</class>
    <class kind="struct">cs_symbolic</class>
    <class kind="struct">csr_numeric</class>
    <class kind="struct">csr_dmperm_results</class>
    <member kind="define">
      <type>#define</type>
      <name>CS_MAX</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a7447e0bed6bf453743551d158e019e8b</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CS_MIN</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a2635aa5c35f05bb0e4c88be5aabae949</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CS_FLIP</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>aa64f99348d6e0bd00fd5f974199b685a</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CS_UNFLIP</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>ac9ba6b1092f27aeed7f94a418610aff9</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CS_MARKED</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>ad5ef446ddee80d5771be956a23520bf5</anchor>
      <arglist>(w, j)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CS_MARK</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>ad5096d9a8169cff461816575072022f0</anchor>
      <arglist>(w, j)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CS_CSC</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a11fc95c9740a561d409f89b987d8072f</anchor>
      <arglist>(A)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CS_TRIPLET</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a62bab576c9482f6e11c4cee5a1b5a39a</anchor>
      <arglist>(A)</arglist>
    </member>
    <member kind="typedef">
      <type>struct row_matrix</type>
      <name>csr</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>abca0215de9b6656ab25071b43caedf27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct cs_symbolic</type>
      <name>css</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>afdd66916fadd9fd39cd279717aa5c6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct csr_numeric</type>
      <name>csrn</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a926db9b8b177a80eb9769d4a916a37f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct csr_dmperm_results</type>
      <name>csrd</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a3318b4755678bc0fe67de5fec3699d11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>csr *</type>
      <name>csr_add</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a4d39338facc133f7081c03286a5c0911</anchor>
      <arglist>(const csr *A, const csr *B, double alpha, double beta)</arglist>
    </member>
    <member kind="function">
      <type>csr *</type>
      <name>csr_multiply</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a910927ed9685b5f97cf9f7ff0ddc451f</anchor>
      <arglist>(const csr *A, const csr *B)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>csr_norm</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>aee09dfe141a01a5e087aba3a40c8e203</anchor>
      <arglist>(const csr *A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_print</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>ad40bc67e2a71aabf1eb933dae72bb6bd</anchor>
      <arglist>(const csr *A, int brief)</arglist>
    </member>
    <member kind="function">
      <type>csr *</type>
      <name>csr_transpose</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>afe26f84b1c5b794e6477775737e34b7c</anchor>
      <arglist>(const csr *A, int values)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>csr_realloc</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a8a3081bf62bc0a23696fdd1b9384113f</anchor>
      <arglist>(void *p, int n, size_t size, int *ok)</arglist>
    </member>
    <member kind="function">
      <type>csr *</type>
      <name>csr_spalloc</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a01957faae2c610f933abf987cb83dbee</anchor>
      <arglist>(int m, int n, int nzmax, int values, int triplet)</arglist>
    </member>
    <member kind="function">
      <type>csr *</type>
      <name>csr_spfree</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a1ccf68e96b754691e20ddb70cf79788f</anchor>
      <arglist>(csr *A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_sprealloc</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a5b286a6e3850ad7b7e7a6be52bfda1c1</anchor>
      <arglist>(csr *A, int nzmax)</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>csr_amd</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>ad5401ce253861d01dd6c0ccad839dc3c</anchor>
      <arglist>(int order, const csr *A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_droptol</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a7321a11b8c1a7632b63eb455c509b030</anchor>
      <arglist>(csr *A, double tol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_dropzeros</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>acbfac8cc113f526eedf2710769129961</anchor>
      <arglist>(csr *A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_lsolve</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a9f0e42eea1c9ce860dafcabea0dc8aee</anchor>
      <arglist>(const csr *L, double *x)</arglist>
    </member>
    <member kind="function">
      <type>csrn *</type>
      <name>csr_lu</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>aba7cb3b4928674aa6ae3d2c9deeb41a5</anchor>
      <arglist>(const csr *A, const css *S, double tol)</arglist>
    </member>
    <member kind="function">
      <type>csr *</type>
      <name>csr_permute</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>afd833f46e6694ddad3763ff9d2ffbda1</anchor>
      <arglist>(const csr *A, const int *pinv, const int *q, int values)</arglist>
    </member>
    <member kind="function">
      <type>css *</type>
      <name>csr_sqr</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a698f989d0b96d933a5e8becf919888af</anchor>
      <arglist>(int order, const csr *A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_usolve</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a6e244c6ac46f41e716d47b218d408d62</anchor>
      <arglist>(const csr *U, double *x)</arglist>
    </member>
    <member kind="function">
      <type>css *</type>
      <name>csr_sfree</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a0738edda62c7276e99fa82d5cbc05cef</anchor>
      <arglist>(css *S)</arglist>
    </member>
    <member kind="function">
      <type>csrd *</type>
      <name>csr_dfree</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a96fafea55f6c99c173151e954cd413ee</anchor>
      <arglist>(csrd *D)</arglist>
    </member>
    <member kind="function">
      <type>csrn *</type>
      <name>csr_nfree</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a57bdf372be5c104fc11d7704a1abfcd6</anchor>
      <arglist>(csrn *N)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>csr_cumsum</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a1d8917d28b627c10262473e586dd7eab</anchor>
      <arglist>(int *p, int *c, int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_dfs</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a2e777907935e40c661e31dcb38a600cc</anchor>
      <arglist>(int j, csr *G, int top, int *xi, int *pstack, const int *pinv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_reach</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a836ce1b6f5cf1529478ee5ecb345f2f1</anchor>
      <arglist>(csr *G, const csr *B, int k, int *xi, const int *pinv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_scatter</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a21941b615bada2724ab44fa784910c41</anchor>
      <arglist>(const csr *A, int j, double beta, int *w, double *x, int mark, csr *C, int nz)</arglist>
    </member>
    <member kind="function">
      <type>csrd *</type>
      <name>csr_scc</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>ad2a8c7ee28d95a20c2927dac24565c6e</anchor>
      <arglist>(csr *A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_spsolve</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a14944846a0793520849dc568b442a9df</anchor>
      <arglist>(csr *G, const csr *B, int k, int *xi, double *x, const int *pinv, int up)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_tdfs</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a424edb577c26b1458fd2a5c411b28798</anchor>
      <arglist>(int j, int k, int *head, const int *next, int *post, int *stack)</arglist>
    </member>
    <member kind="function">
      <type>csrd *</type>
      <name>csr_dalloc</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>a7c304833c6679427b4e8e9f2c1049e1e</anchor>
      <arglist>(int m, int n)</arglist>
    </member>
    <member kind="function">
      <type>csrd *</type>
      <name>csr_ddone</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>aefe5e57ead903f0f555fd876df575b50</anchor>
      <arglist>(csrd *D, csr *C, void *w, int ok)</arglist>
    </member>
    <member kind="function">
      <type>csr *</type>
      <name>csr_done</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>ac821e0c6083c7ad9d71687239291c0af</anchor>
      <arglist>(csr *C, void *w, void *x, int ok)</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>csr_idone</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>ab686f9d9042899227e3776930d516d86</anchor>
      <arglist>(int *p, csr *C, void *w, int ok)</arglist>
    </member>
    <member kind="function">
      <type>csrn *</type>
      <name>csr_ndone</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>abcd8c4e96a4ec083b2a42bb89b1b75b2</anchor>
      <arglist>(csrn *N, csr *C, void *w, void *x, int ok)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>csr_fkeep</name>
      <anchorfile>Ifpack__IKLU__Utils_8h.html</anchorfile>
      <anchor>abc7483b34d602e941a69bd04acdd7ef1</anchor>
      <arglist>(csr *A, int(*fkeep)(int, int, double, void *), void *other)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ILU.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__ILU_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__CondestType_8h" name="Ifpack_CondestType.h" local="yes" imported="no">Ifpack_CondestType.h</includes>
    <includes id="Ifpack__ILU_8h" name="Ifpack_ILU.h" local="yes" imported="no">Ifpack_ILU.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_ILU.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__ILU_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <includes id="Ifpack__Condest_8h" name="Ifpack_Condest.h" local="yes" imported="no">Ifpack_Condest.h</includes>
    <includes id="Ifpack__ScalingType_8h" name="Ifpack_ScalingType.h" local="yes" imported="no">Ifpack_ScalingType.h</includes>
    <includes id="Ifpack__IlukGraph_8h" name="Ifpack_IlukGraph.h" local="yes" imported="no">Ifpack_IlukGraph.h</includes>
    <class kind="class">Ifpack_ILU</class>
    <namespace>Teuchos</namespace>
  </compound>
  <compound kind="file">
    <name>Ifpack_IlukGraph.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__IlukGraph_8cpp</filename>
    <includes id="Ifpack__IlukGraph_8h" name="Ifpack_IlukGraph.h" local="yes" imported="no">Ifpack_IlukGraph.h</includes>
    <includes id="ifp__parameters_8h" name="ifp_parameters.h" local="no" imported="no">ifp_parameters.h</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>Ifpack__IlukGraph_8cpp.html</anchorfile>
      <anchor>a572a5aa9c58704db4e10438dae5f8938</anchor>
      <arglist>(std::ostream &amp;os, const Ifpack_IlukGraph &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_IlukGraph.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__IlukGraph_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <class kind="class">Ifpack_IlukGraph</class>
    <namespace>Teuchos</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>Ifpack__IlukGraph_8h.html</anchorfile>
      <anchor>a572a5aa9c58704db4e10438dae5f8938</anchor>
      <arglist>(std::ostream &amp;os, const Ifpack_IlukGraph &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ILUT.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__ILUT_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <includes id="Ifpack__ILUT_8h" name="Ifpack_ILUT.h" local="yes" imported="no">Ifpack_ILUT.h</includes>
    <includes id="Ifpack__Condest_8h" name="Ifpack_Condest.h" local="yes" imported="no">Ifpack_Condest.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
    <includes id="Ifpack__HashTable_8h" name="Ifpack_HashTable.h" local="yes" imported="no">Ifpack_HashTable.h</includes>
    <class kind="class">Ifpack_AbsComp</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_ILUT.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__ILUT_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__CondestType_8h" name="Ifpack_CondestType.h" local="yes" imported="no">Ifpack_CondestType.h</includes>
    <includes id="Ifpack__ScalingType_8h" name="Ifpack_ScalingType.h" local="yes" imported="no">Ifpack_ScalingType.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <class kind="class">Ifpack_ILUT</class>
    <namespace>Teuchos</namespace>
  </compound>
  <compound kind="file">
    <name>Ifpack_Krylov.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Krylov_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Krylov_8h" name="Ifpack_Krylov.h" local="yes" imported="no">Ifpack_Krylov.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
    <includes id="Ifpack__Condest_8h" name="Ifpack_Condest.h" local="yes" imported="no">Ifpack_Condest.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_Krylov.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Krylov_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <includes id="Ifpack__PointRelaxation_8h" name="Ifpack_PointRelaxation.h" local="yes" imported="no">Ifpack_PointRelaxation.h</includes>
    <includes id="Ifpack__BlockRelaxation_8h" name="Ifpack_BlockRelaxation.h" local="yes" imported="no">Ifpack_BlockRelaxation.h</includes>
    <includes id="Ifpack__SparseContainer_8h" name="Ifpack_SparseContainer.h" local="yes" imported="no">Ifpack_SparseContainer.h</includes>
    <includes id="Ifpack__DenseContainer_8h" name="Ifpack_DenseContainer.h" local="yes" imported="no">Ifpack_DenseContainer.h</includes>
    <includes id="Ifpack__Amesos_8h" name="Ifpack_Amesos.h" local="yes" imported="no">Ifpack_Amesos.h</includes>
    <class kind="class">Ifpack_Krylov</class>
    <namespace>Teuchos</namespace>
  </compound>
  <compound kind="file">
    <name>Ifpack_LinearPartitioner.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__LinearPartitioner_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Partitioner_8h" name="Ifpack_Partitioner.h" local="yes" imported="no">Ifpack_Partitioner.h</includes>
    <includes id="Ifpack__OverlappingPartitioner_8h" name="Ifpack_OverlappingPartitioner.h" local="yes" imported="no">Ifpack_OverlappingPartitioner.h</includes>
    <includes id="Ifpack__LinearPartitioner_8h" name="Ifpack_LinearPartitioner.h" local="yes" imported="no">Ifpack_LinearPartitioner.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_LinearPartitioner.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__LinearPartitioner_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Partitioner_8h" name="Ifpack_Partitioner.h" local="yes" imported="no">Ifpack_Partitioner.h</includes>
    <includes id="Ifpack__OverlappingPartitioner_8h" name="Ifpack_OverlappingPartitioner.h" local="yes" imported="no">Ifpack_OverlappingPartitioner.h</includes>
    <class kind="class">Ifpack_LinearPartitioner</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_LinePartitioner.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__LinePartitioner_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Partitioner_8h" name="Ifpack_Partitioner.h" local="yes" imported="no">Ifpack_Partitioner.h</includes>
    <includes id="Ifpack__OverlappingPartitioner_8h" name="Ifpack_OverlappingPartitioner.h" local="yes" imported="no">Ifpack_OverlappingPartitioner.h</includes>
    <includes id="Ifpack__LinePartitioner_8h" name="Ifpack_LinePartitioner.h" local="yes" imported="no">Ifpack_LinePartitioner.h</includes>
    <includes id="Ifpack__Graph_8h" name="Ifpack_Graph.h" local="yes" imported="no">Ifpack_Graph.h</includes>
    <member kind="function">
      <type>double</type>
      <name>compute_distance_coordinates</name>
      <anchorfile>Ifpack__LinePartitioner_8cpp.html</anchorfile>
      <anchor>aed757f39afa7cb57c8ae4110b6f418b9</anchor>
      <arglist>(double x0, double y0, double z0, int nn, const double *xvals, const double *yvals, const double *zvals)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>compute_distance_matrix_entries</name>
      <anchorfile>Ifpack__LinePartitioner_8cpp.html</anchorfile>
      <anchor>a797e28892bddb07d28e665c6372e5e53</anchor>
      <arglist>(const double *vals, int id, int NumEqns)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_LinePartitioner.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__LinePartitioner_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Partitioner_8h" name="Ifpack_Partitioner.h" local="yes" imported="no">Ifpack_Partitioner.h</includes>
    <includes id="Ifpack__OverlappingPartitioner_8h" name="Ifpack_OverlappingPartitioner.h" local="yes" imported="no">Ifpack_OverlappingPartitioner.h</includes>
    <includes id="Ifpack__Graph__Epetra__RowMatrix_8h" name="Ifpack_Graph_Epetra_RowMatrix.h" local="yes" imported="no">Ifpack_Graph_Epetra_RowMatrix.h</includes>
    <class kind="class">Ifpack_LinePartitioner</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_LocalFilter.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__LocalFilter_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__LocalFilter_8h" name="Ifpack_LocalFilter.h" local="yes" imported="no">Ifpack_LocalFilter.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_LocalFilter.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__LocalFilter_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <class kind="class">Ifpack_LocalFilter</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_METISPartitioner.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__METISPartitioner_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Partitioner_8h" name="Ifpack_Partitioner.h" local="yes" imported="no">Ifpack_Partitioner.h</includes>
    <includes id="Ifpack__OverlappingPartitioner_8h" name="Ifpack_OverlappingPartitioner.h" local="yes" imported="no">Ifpack_OverlappingPartitioner.h</includes>
    <includes id="Ifpack__METISPartitioner_8h" name="Ifpack_METISPartitioner.h" local="yes" imported="no">Ifpack_METISPartitioner.h</includes>
    <includes id="Ifpack__Graph_8h" name="Ifpack_Graph.h" local="yes" imported="no">Ifpack_Graph.h</includes>
    <includes id="Ifpack__Graph__Epetra__CrsGraph_8h" name="Ifpack_Graph_Epetra_CrsGraph.h" local="yes" imported="no">Ifpack_Graph_Epetra_CrsGraph.h</includes>
    <member kind="typedef">
      <type>int</type>
      <name>idxtype</name>
      <anchorfile>Ifpack__METISPartitioner_8cpp.html</anchorfile>
      <anchor>a09d0d7279a80738c3727be5623954245</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_METISPartitioner.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__METISPartitioner_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Partitioner_8h" name="Ifpack_Partitioner.h" local="yes" imported="no">Ifpack_Partitioner.h</includes>
    <includes id="Ifpack__OverlappingPartitioner_8h" name="Ifpack_OverlappingPartitioner.h" local="yes" imported="no">Ifpack_OverlappingPartitioner.h</includes>
    <class kind="class">Ifpack_METISPartitioner</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_METISReordering.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__METISReordering_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Reordering_8h" name="Ifpack_Reordering.h" local="yes" imported="no">Ifpack_Reordering.h</includes>
    <includes id="Ifpack__METISReordering_8h" name="Ifpack_METISReordering.h" local="yes" imported="no">Ifpack_METISReordering.h</includes>
    <includes id="Ifpack__Graph_8h" name="Ifpack_Graph.h" local="yes" imported="no">Ifpack_Graph.h</includes>
    <includes id="Ifpack__Graph__Epetra__CrsGraph_8h" name="Ifpack_Graph_Epetra_CrsGraph.h" local="yes" imported="no">Ifpack_Graph_Epetra_CrsGraph.h</includes>
    <includes id="Ifpack__Graph__Epetra__RowMatrix_8h" name="Ifpack_Graph_Epetra_RowMatrix.h" local="yes" imported="no">Ifpack_Graph_Epetra_RowMatrix.h</includes>
    <member kind="typedef">
      <type>int</type>
      <name>idxtype</name>
      <anchorfile>Ifpack__METISReordering_8cpp.html</anchorfile>
      <anchor>a09d0d7279a80738c3727be5623954245</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_METISReordering.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__METISReordering_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Reordering_8h" name="Ifpack_Reordering.h" local="yes" imported="no">Ifpack_Reordering.h</includes>
    <class kind="class">Ifpack_METISReordering</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_MultiListSort.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__MultiListSort_8c</filename>
    <class kind="struct">stack_node</class>
    <member kind="define">
      <type>#define</type>
      <name>SWAP</name>
      <anchorfile>Ifpack__MultiListSort_8c.html</anchorfile>
      <anchor>a78957585cbbb25ad40b3de96c4ba09fd</anchor>
      <arglist>(a, b)                          </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_THRESH</name>
      <anchorfile>Ifpack__MultiListSort_8c.html</anchorfile>
      <anchor>a4c76d6ac54df967f4f2d09030fdaa610</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STACK_SIZE</name>
      <anchorfile>Ifpack__MultiListSort_8c.html</anchorfile>
      <anchor>a6423a880df59733d2d9b509c7718d3a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PUSH</name>
      <anchorfile>Ifpack__MultiListSort_8c.html</anchorfile>
      <anchor>a69ef59788a88729c75837e2e31173b40</anchor>
      <arglist>(low, high)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POP</name>
      <anchorfile>Ifpack__MultiListSort_8c.html</anchorfile>
      <anchor>a758f1b86ee730e07c2f60f1aafaf33b3</anchor>
      <arglist>(low, high)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STACK_NOT_EMPTY</name>
      <anchorfile>Ifpack__MultiListSort_8c.html</anchorfile>
      <anchor>afaf5dcd5667fd1b91657bfe7aa4d0788</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>min</name>
      <anchorfile>Ifpack__MultiListSort_8c.html</anchorfile>
      <anchor>abb702d8b501669a23aa0ab3b281b9384</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ifpack_multilist_sort</name>
      <anchorfile>Ifpack__MultiListSort_8c.html</anchorfile>
      <anchor>a1cbc84a4dd451724e00631df41c2f439</anchor>
      <arglist>(int *const pbase, double *const daux, size_t total_elems)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_NodeFilter.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__NodeFilter_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>Ifpack_NodeFilter.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__NodeFilter_8h</filename>
  </compound>
  <compound kind="file">
    <name>Ifpack_OverlapFactor.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__OverlapFactor_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>Ifpack_OverlapFactorObject.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__OverlapFactorObject_8h</filename>
    <class kind="class">Ifpack_OverlapFactorObject</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_OverlapGraph.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__OverlapGraph_8cpp</filename>
    <includes id="Ifpack__OverlapGraph_8h" name="Ifpack_OverlapGraph.h" local="yes" imported="no">Ifpack_OverlapGraph.h</includes>
    <includes id="ifp__parameters_8h" name="ifp_parameters.h" local="no" imported="no">ifp_parameters.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_OverlapGraph.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__OverlapGraph_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <class kind="class">Ifpack_OverlapGraph</class>
    <namespace>Teuchos</namespace>
  </compound>
  <compound kind="file">
    <name>Ifpack_OverlappingPartitioner.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__OverlappingPartitioner_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Partitioner_8h" name="Ifpack_Partitioner.h" local="yes" imported="no">Ifpack_Partitioner.h</includes>
    <includes id="Ifpack__OverlappingPartitioner_8h" name="Ifpack_OverlappingPartitioner.h" local="yes" imported="no">Ifpack_OverlappingPartitioner.h</includes>
    <includes id="Ifpack__Graph_8h" name="Ifpack_Graph.h" local="yes" imported="no">Ifpack_Graph.h</includes>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>PrintMsg_</name>
      <anchorfile>Ifpack__OverlappingPartitioner_8cpp.html</anchorfile>
      <anchor>ae222674ce23bb98b68c491f59b20a120</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_OverlappingPartitioner.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__OverlappingPartitioner_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Partitioner_8h" name="Ifpack_Partitioner.h" local="yes" imported="no">Ifpack_Partitioner.h</includes>
    <class kind="class">Ifpack_OverlappingPartitioner</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_OverlappingRowMatrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__OverlappingRowMatrix_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__OverlappingRowMatrix_8h" name="Ifpack_OverlappingRowMatrix.h" local="yes" imported="no">Ifpack_OverlappingRowMatrix.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_OverlappingRowMatrix.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__OverlappingRowMatrix_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <class kind="class">Ifpack_OverlappingRowMatrix</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_OverlapSolveObject.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__OverlapSolveObject_8cpp</filename>
    <includes id="Ifpack__OverlapSolveObject_8h" name="Ifpack_OverlapSolveObject.h" local="yes" imported="no">Ifpack_OverlapSolveObject.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_OverlapSolveObject.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__OverlapSolveObject_8h</filename>
    <class kind="class">Ifpack_OverlapSolveObject</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_Partitioner.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Partitioner_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <class kind="class">Ifpack_Partitioner</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>Ifpack__Partitioner_8h.html</anchorfile>
      <anchor>adadf0674a8aaad53c218d760a34d3bca</anchor>
      <arglist>(std::ostream &amp;os, const Ifpack_Partitioner &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_PerturbedMatrix.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__PerturbedMatrix_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_PointRelaxation.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__PointRelaxation_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <includes id="Ifpack__PointRelaxation_8h" name="Ifpack_PointRelaxation.h" local="yes" imported="no">Ifpack_PointRelaxation.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
    <includes id="Ifpack__Condest_8h" name="Ifpack_Condest.h" local="yes" imported="no">Ifpack_Condest.h</includes>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>IFPACK_JACOBI</name>
      <anchorfile>Ifpack__PointRelaxation_8cpp.html</anchorfile>
      <anchor>a2912011f202a5678d2732d87172de9bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>IFPACK_GS</name>
      <anchorfile>Ifpack__PointRelaxation_8cpp.html</anchorfile>
      <anchor>a3ab5a9e4bf0d18f58cde1b941372421c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>IFPACK_SGS</name>
      <anchorfile>Ifpack__PointRelaxation_8cpp.html</anchorfile>
      <anchor>a6f4d1fbf6067c14798f2080e9312b038</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_PointRelaxation.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__PointRelaxation_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <class kind="class">Ifpack_PointRelaxation</class>
    <namespace>Teuchos</namespace>
  </compound>
  <compound kind="file">
    <name>Ifpack_Polynomial.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Polynomial_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Polynomial_8h" name="Ifpack_Polynomial.h" local="yes" imported="no">Ifpack_Polynomial.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
    <includes id="Ifpack__Condest_8h" name="Ifpack_Condest.h" local="yes" imported="no">Ifpack_Condest.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ABS</name>
      <anchorfile>Ifpack__Polynomial_8cpp.html</anchorfile>
      <anchor>a996f7be338ccb40d1a2a5abc1ad61759</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Apply_Transpose</name>
      <anchorfile>Ifpack__Polynomial_8cpp.html</anchorfile>
      <anchor>ae96b03ebb92316c80be0364fcafb5b65</anchor>
      <arglist>(Teuchos::RCP&lt; const Epetra_Operator &gt; Operator_, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_Polynomial.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Polynomial_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <class kind="class">Ifpack_Polynomial</class>
    <namespace>Teuchos</namespace>
  </compound>
  <compound kind="file">
    <name>Ifpack_Preconditioner.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Preconditioner_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__CondestType_8h" name="Ifpack_CondestType.h" local="yes" imported="no">Ifpack_CondestType.h</includes>
    <class kind="class">Ifpack_Preconditioner</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>Ifpack__Preconditioner_8h.html</anchorfile>
      <anchor>a3b081a4103ce03aef0887fc53ac4960c</anchor>
      <arglist>(std::ostream &amp;os, const Ifpack_Preconditioner &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_RCMReordering.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__RCMReordering_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Graph_8h" name="Ifpack_Graph.h" local="yes" imported="no">Ifpack_Graph.h</includes>
    <includes id="Ifpack__Graph__Epetra__RowMatrix_8h" name="Ifpack_Graph_Epetra_RowMatrix.h" local="yes" imported="no">Ifpack_Graph_Epetra_RowMatrix.h</includes>
    <includes id="Ifpack__RCMReordering_8h" name="Ifpack_RCMReordering.h" local="yes" imported="no">Ifpack_RCMReordering.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_RCMReordering.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__RCMReordering_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Reordering_8h" name="Ifpack_Reordering.h" local="yes" imported="no">Ifpack_Reordering.h</includes>
    <class kind="class">Ifpack_RCMReordering</class>
    <namespace>Teuchos</namespace>
  </compound>
  <compound kind="file">
    <name>Ifpack_ReorderFilter.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__ReorderFilter_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__ReorderFilter_8h" name="Ifpack_ReorderFilter.h" local="yes" imported="no">Ifpack_ReorderFilter.h</includes>
    <includes id="Ifpack__Reordering_8h" name="Ifpack_Reordering.h" local="yes" imported="no">Ifpack_Reordering.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_ReorderFilter.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__ReorderFilter_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <class kind="class">Ifpack_ReorderFilter</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_Reordering.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Reordering_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <class kind="class">Ifpack_Reordering</class>
    <namespace>Teuchos</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>Ifpack__Reordering_8h.html</anchorfile>
      <anchor>a08398deb33389429ca46d50d8f3727a8</anchor>
      <arglist>(std::ostream &amp;os, const Ifpack_Reordering &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ScalingType.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__ScalingType_8h</filename>
    <member kind="enumeration">
      <type></type>
      <name>Ifpack_ScalingType</name>
      <anchorfile>Ifpack__ScalingType_8h.html</anchorfile>
      <anchor>adbfde5e1e793497c572506e250db144c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>None</name>
      <anchorfile>Ifpack__ScalingType_8h.html</anchorfile>
      <anchor>adbfde5e1e793497c572506e250db144cac9d3e887722f2bc482bcca9d41c512af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LeftDiagonal</name>
      <anchorfile>Ifpack__ScalingType_8h.html</anchorfile>
      <anchor>adbfde5e1e793497c572506e250db144cab35911646266f632679f268fb5256000</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RightDiagonal</name>
      <anchorfile>Ifpack__ScalingType_8h.html</anchorfile>
      <anchor>adbfde5e1e793497c572506e250db144ca855d020cad86202140775128108b0147</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SymmetricDiagonal</name>
      <anchorfile>Ifpack__ScalingType_8h.html</anchorfile>
      <anchor>adbfde5e1e793497c572506e250db144ca0784fb1e9281bcccf57037492cfa30e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowSum</name>
      <anchorfile>Ifpack__ScalingType_8h.html</anchorfile>
      <anchor>adbfde5e1e793497c572506e250db144ca6746eabf558f225f58ec2e0c2fe3fce8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColSum</name>
      <anchorfile>Ifpack__ScalingType_8h.html</anchorfile>
      <anchor>adbfde5e1e793497c572506e250db144cafc2cd6f592300ec9dfcbf84d5607f241</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowAndColSum</name>
      <anchorfile>Ifpack__ScalingType_8h.html</anchorfile>
      <anchor>adbfde5e1e793497c572506e250db144ca504a3877444d498909432eca6ae1a022</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_SerialTriDiMatrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__SerialTriDiMatrix_8cpp</filename>
    <includes id="Ifpack__SerialTriDiMatrix_8h" name="Ifpack_SerialTriDiMatrix.h" local="yes" imported="no">Ifpack_SerialTriDiMatrix.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_SerialTriDiMatrix.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__SerialTriDiMatrix_8h</filename>
    <class kind="class">Ifpack_SerialTriDiMatrix</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_SerialTriDiSolver.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__SerialTriDiSolver_8cpp</filename>
    <includes id="Ifpack__SerialTriDiSolver_8h" name="Ifpack_SerialTriDiSolver.h" local="yes" imported="no">Ifpack_SerialTriDiSolver.h</includes>
    <includes id="Ifpack__SerialTriDiMatrix_8h" name="Ifpack_SerialTriDiMatrix.h" local="yes" imported="no">Ifpack_SerialTriDiMatrix.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_SerialTriDiSolver.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__SerialTriDiSolver_8h</filename>
    <class kind="class">Ifpack_SerialTriDiSolver</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_SILU.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__SILU_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__SILU_8h" name="Ifpack_SILU.h" local="yes" imported="no">Ifpack_SILU.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_SILU.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__SILU_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_SingletonFilter.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__SingletonFilter_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__SingletonFilter_8h" name="Ifpack_SingletonFilter.h" local="yes" imported="no">Ifpack_SingletonFilter.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_SingletonFilter.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__SingletonFilter_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <class kind="class">Ifpack_SingletonFilter</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_SORa.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__SORa_8cpp</filename>
    <includes id="Ifpack__SORa_8h" name="Ifpack_SORa.h" local="yes" imported="no">Ifpack_SORa.h</includes>
    <includes id="Ifpack_8h" name="Ifpack.h" local="yes" imported="no">Ifpack.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_SORa.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__SORa_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_SparseContainer.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__SparseContainer_8h</filename>
    <includes id="Ifpack__Container_8h" name="Ifpack_Container.h" local="yes" imported="no">Ifpack_Container.h</includes>
    <class kind="class">Ifpack_SparseContainer</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_SparsityFilter.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__SparsityFilter_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__SparsityFilter_8h" name="Ifpack_SparsityFilter.h" local="yes" imported="no">Ifpack_SparsityFilter.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_SparsityFilter.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__SparsityFilter_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <class kind="class">Ifpack_SparsityFilter</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_SPARSKIT.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__SPARSKIT_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_SPARSKIT.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__SPARSKIT_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_SubdomainFilter.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__SubdomainFilter_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_SubdomainFilter.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__SubdomainFilter_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_SupportGraph.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/supportgraph/</path>
    <filename>Ifpack__SupportGraph_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Condest_8h" name="Ifpack_Condest.h" local="yes" imported="no">Ifpack_Condest.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <includes id="Ifpack__Amesos_8h" name="Ifpack_Amesos.h" local="yes" imported="no">Ifpack_Amesos.h</includes>
    <class kind="class">Ifpack_SupportGraph</class>
    <member kind="typedef">
      <type>std::pair&lt; int, int &gt;</type>
      <name>E</name>
      <anchorfile>Ifpack__SupportGraph_8h.html</anchorfile>
      <anchor>a15dddb98811d7c91c072a9bce34bdd13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>adjacency_list&lt; vecS, vecS, undirectedS, no_property, property&lt; edge_weight_t, double &gt; &gt;</type>
      <name>Graph</name>
      <anchorfile>Ifpack__SupportGraph_8h.html</anchorfile>
      <anchor>ae99fb83b611ba19a6a9f580ff5854cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>graph_traits&lt; Graph &gt;::edge_descriptor</type>
      <name>Edge</name>
      <anchorfile>Ifpack__SupportGraph_8h.html</anchorfile>
      <anchor>a181e38a286c78900498f6c071f5dd427</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>graph_traits&lt; Graph &gt;::vertex_descriptor</type>
      <name>Vertex</name>
      <anchorfile>Ifpack__SupportGraph_8h.html</anchorfile>
      <anchor>a3e55a630b80b78f82b6b2035df52c07e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_TriDiContainer.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__TriDiContainer_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__TriDiContainer_8h" name="Ifpack_TriDiContainer.h" local="yes" imported="no">Ifpack_TriDiContainer.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_TriDiContainer.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__TriDiContainer_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Container_8h" name="Ifpack_Container.h" local="yes" imported="no">Ifpack_Container.h</includes>
    <includes id="Ifpack__SerialTriDiMatrix_8h" name="Ifpack_SerialTriDiMatrix.h" local="yes" imported="no">Ifpack_SerialTriDiMatrix.h</includes>
    <includes id="Ifpack__SerialTriDiSolver_8h" name="Ifpack_SerialTriDiSolver.h" local="yes" imported="no">Ifpack_SerialTriDiSolver.h</includes>
    <class kind="class">Ifpack_TriDiContainer</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_UserPartitioner.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__UserPartitioner_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Partitioner_8h" name="Ifpack_Partitioner.h" local="yes" imported="no">Ifpack_Partitioner.h</includes>
    <includes id="Ifpack__OverlappingPartitioner_8h" name="Ifpack_OverlappingPartitioner.h" local="yes" imported="no">Ifpack_OverlappingPartitioner.h</includes>
    <includes id="Ifpack__UserPartitioner_8h" name="Ifpack_UserPartitioner.h" local="yes" imported="no">Ifpack_UserPartitioner.h</includes>
  </compound>
  <compound kind="file">
    <name>Ifpack_UserPartitioner.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__UserPartitioner_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Partitioner_8h" name="Ifpack_Partitioner.h" local="yes" imported="no">Ifpack_Partitioner.h</includes>
    <includes id="Ifpack__OverlappingPartitioner_8h" name="Ifpack_OverlappingPartitioner.h" local="yes" imported="no">Ifpack_OverlappingPartitioner.h</includes>
    <class kind="class">Ifpack_UserPartitioner</class>
  </compound>
  <compound kind="file">
    <name>Ifpack_Utils.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Utils_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__Preconditioner_8h" name="Ifpack_Preconditioner.h" local="yes" imported="no">Ifpack_Preconditioner.h</includes>
    <includes id="Ifpack__Utils_8h" name="Ifpack_Utils.h" local="yes" imported="no">Ifpack_Utils.h</includes>
    <member kind="function">
      <type>void</type>
      <name>Ifpack_PrintLine</name>
      <anchorfile>Ifpack__Utils_8cpp.html</anchorfile>
      <anchor>a2b7ec74776934f9a7bc97f0901667662</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Ifpack_BreakForDebugger</name>
      <anchorfile>Ifpack__Utils_8cpp.html</anchorfile>
      <anchor>a044c587c555914596a5274f6bc1bd40c</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_CrsMatrix *</type>
      <name>Ifpack_CreateOverlappingCrsMatrix</name>
      <anchorfile>Ifpack__Utils_8cpp.html</anchorfile>
      <anchor>a5fc52bcda829252f7c89abdf17017e74</anchor>
      <arglist>(const Epetra_RowMatrix *Matrix, const int OverlappingLevel)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_CrsGraph *</type>
      <name>Ifpack_CreateOverlappingCrsMatrix</name>
      <anchorfile>Ifpack__Utils_8cpp.html</anchorfile>
      <anchor>a5f67c3b4971aea0dd3ac0742dc885207</anchor>
      <arglist>(const Epetra_CrsGraph *Graph, const int OverlappingLevel)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Ifpack_toString</name>
      <anchorfile>Ifpack__Utils_8cpp.html</anchorfile>
      <anchor>a6c0fb4927ca31000cc0843281516be3c</anchor>
      <arglist>(const int &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Ifpack_toString</name>
      <anchorfile>Ifpack__Utils_8cpp.html</anchorfile>
      <anchor>acb2fe49fd2bd80fb4ecfba0d2b56b7c6</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Ifpack_PrintResidual</name>
      <anchorfile>Ifpack__Utils_8cpp.html</anchorfile>
      <anchor>a005113f816d7e3d868c3de46f7dc9b43</anchor>
      <arglist>(char *Label, const Epetra_RowMatrix &amp;A, const Epetra_MultiVector &amp;X, const Epetra_MultiVector &amp;Y)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Ifpack_PrintResidual</name>
      <anchorfile>Ifpack__Utils_8cpp.html</anchorfile>
      <anchor>a36411597b92b8faa8de1411f82251aa3</anchor>
      <arglist>(const int iter, const Epetra_RowMatrix &amp;A, const Epetra_MultiVector &amp;X, const Epetra_MultiVector &amp;Y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Ifpack_PrintSparsity_Simple</name>
      <anchorfile>Ifpack__Utils_8cpp.html</anchorfile>
      <anchor>abd91469ed3ffad6953903641427f883a</anchor>
      <arglist>(const Epetra_RowMatrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Ifpack_FrobeniusNorm</name>
      <anchorfile>Ifpack__Utils_8cpp.html</anchorfile>
      <anchor>a74f3ed661894537b05bb493c01f160c2</anchor>
      <arglist>(const Epetra_RowMatrix &amp;A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>Ifpack__Utils_8cpp.html</anchorfile>
      <anchor>a90fc86e52636450bc3604014b83e7384</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>Ifpack__Utils_8cpp.html</anchorfile>
      <anchor>a30cbdf98fa519b9b567a82205b8dbf88</anchor>
      <arglist>(const char str[], T val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>Ifpack__Utils_8cpp.html</anchorfile>
      <anchor>a93f115b43ed0567d36c49144ff1e4daa</anchor>
      <arglist>(const char str[], T val, double percentage)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>Ifpack__Utils_8cpp.html</anchorfile>
      <anchor>a014d155561e077ddd91120ca0838fce0</anchor>
      <arglist>(const char str[], T one, T two, T three, bool equal=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Ifpack_Analyze</name>
      <anchorfile>Ifpack__Utils_8cpp.html</anchorfile>
      <anchor>ad20a8420754b70ab49f8d2862efdd648</anchor>
      <arglist>(const Epetra_RowMatrix &amp;A, const bool Cheap, const int NumPDEEqns)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Ifpack_AnalyzeVectorElements</name>
      <anchorfile>Ifpack__Utils_8cpp.html</anchorfile>
      <anchor>abaf7bdb3dc885e108d10ae9594f811c0</anchor>
      <arglist>(const Epetra_Vector &amp;Diagonal, const bool abs, const int steps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Ifpack_AnalyzeMatrixElements</name>
      <anchorfile>Ifpack__Utils_8cpp.html</anchorfile>
      <anchor>afefc26ba7d71c17294ce12fc0964af08</anchor>
      <arglist>(const Epetra_RowMatrix &amp;A, const bool abs, const int steps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Ifpack_PrintSparsity</name>
      <anchorfile>Ifpack__Utils_8cpp.html</anchorfile>
      <anchor>a9bd648fffa800e2a8b80f0b01dafdcb4</anchor>
      <arglist>(const Epetra_RowMatrix &amp;A, const char *InputFileName, const int NumPDEEqns)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_Utils.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Utils_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <class kind="class">Ifpack_Element</class>
    <member kind="function">
      <type>void</type>
      <name>Ifpack_PrintLine</name>
      <anchorfile>Ifpack__Utils_8h.html</anchorfile>
      <anchor>a2b7ec74776934f9a7bc97f0901667662</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Ifpack_BreakForDebugger</name>
      <anchorfile>Ifpack__Utils_8h.html</anchorfile>
      <anchor>a044c587c555914596a5274f6bc1bd40c</anchor>
      <arglist>(Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_CrsMatrix *</type>
      <name>Ifpack_CreateOverlappingCrsMatrix</name>
      <anchorfile>Ifpack__Utils_8h.html</anchorfile>
      <anchor>a5fc52bcda829252f7c89abdf17017e74</anchor>
      <arglist>(const Epetra_RowMatrix *Matrix, const int OverlappingLevel)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_CrsGraph *</type>
      <name>Ifpack_CreateOverlappingCrsMatrix</name>
      <anchorfile>Ifpack__Utils_8h.html</anchorfile>
      <anchor>a5f67c3b4971aea0dd3ac0742dc885207</anchor>
      <arglist>(const Epetra_CrsGraph *Graph, const int OverlappingLevel)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Ifpack_toString</name>
      <anchorfile>Ifpack__Utils_8h.html</anchorfile>
      <anchor>a6c0fb4927ca31000cc0843281516be3c</anchor>
      <arglist>(const int &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>Ifpack_toString</name>
      <anchorfile>Ifpack__Utils_8h.html</anchorfile>
      <anchor>acb2fe49fd2bd80fb4ecfba0d2b56b7c6</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Ifpack_PrintResidual</name>
      <anchorfile>Ifpack__Utils_8h.html</anchorfile>
      <anchor>a005113f816d7e3d868c3de46f7dc9b43</anchor>
      <arglist>(char *Label, const Epetra_RowMatrix &amp;A, const Epetra_MultiVector &amp;X, const Epetra_MultiVector &amp;Y)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Ifpack_PrintResidual</name>
      <anchorfile>Ifpack__Utils_8h.html</anchorfile>
      <anchor>a36411597b92b8faa8de1411f82251aa3</anchor>
      <arglist>(const int iter, const Epetra_RowMatrix &amp;A, const Epetra_MultiVector &amp;X, const Epetra_MultiVector &amp;Y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Ifpack_PrintSparsity_Simple</name>
      <anchorfile>Ifpack__Utils_8h.html</anchorfile>
      <anchor>abd91469ed3ffad6953903641427f883a</anchor>
      <arglist>(const Epetra_RowMatrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Ifpack_Analyze</name>
      <anchorfile>Ifpack__Utils_8h.html</anchorfile>
      <anchor>a668ef1515c70c7bbb1308716cd1d0cb1</anchor>
      <arglist>(const Epetra_RowMatrix &amp;A, const bool Cheap=false, const int NumPDEEqns=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Ifpack_AnalyzeMatrixElements</name>
      <anchorfile>Ifpack__Utils_8h.html</anchorfile>
      <anchor>a7a35b7a613baac993a902487210d3502</anchor>
      <arglist>(const Epetra_RowMatrix &amp;A, const bool abs=false, const int steps=10)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Ifpack_AnalyzeVectorElements</name>
      <anchorfile>Ifpack__Utils_8h.html</anchorfile>
      <anchor>a9760afa3e0b942931343f95357603ffd</anchor>
      <arglist>(const Epetra_Vector &amp;Diagonal, const bool abs=false, const int steps=10)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Ifpack_PrintSparsity</name>
      <anchorfile>Ifpack__Utils_8h.html</anchorfile>
      <anchor>ac88ea4d142ac88f96dc22a4ea6fb33a0</anchor>
      <arglist>(const Epetra_RowMatrix &amp;A, const char *FileName=0, const int NumPDEEqns=1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ValidParameters.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__ValidParameters_8cpp</filename>
    <includes id="Ifpack__ValidParameters_8h" name="Ifpack_ValidParameters.h" local="yes" imported="no">Ifpack_ValidParameters.h</includes>
    <member kind="function">
      <type>Teuchos::ParameterList</type>
      <name>Ifpack_GetValidParameters</name>
      <anchorfile>Ifpack__ValidParameters_8cpp.html</anchorfile>
      <anchor>af0617dfd343794691eef1663f7b752b2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_ValidParameters.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__ValidParameters_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <member kind="function">
      <type>Teuchos::ParameterList</type>
      <name>Ifpack_GetValidParameters</name>
      <anchorfile>Ifpack__ValidParameters_8h.html</anchorfile>
      <anchor>af0617dfd343794691eef1663f7b752b2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ifpack_Version.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/</path>
    <filename>Ifpack__Version_8h</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <member kind="function">
      <type>std::string</type>
      <name>Ifpack_Version</name>
      <anchorfile>Ifpack__Version_8h.html</anchorfile>
      <anchor>a158b315a11262f4638beb09f928fab61</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ilu_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>ilu__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <member kind="function">
      <type>void</type>
      <name>reallocate_private</name>
      <anchorfile>ilu__dh_8h.html</anchorfile>
      <anchor>ac3f72bcb41cd6142ff551d360b4d32b2</anchor>
      <arglist>(int row, int newEntries, int *nzHave, int **rp, int **cval, float **aval, double **avalD, int **fill)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ilu_mpi_pilu</name>
      <anchorfile>ilu__dh_8h.html</anchorfile>
      <anchor>a20d19e5939af049a1adb2d36a6e14764</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iluk_mpi_pilu</name>
      <anchorfile>ilu__dh_8h.html</anchorfile>
      <anchor>ac73a5a21983b5cf4fca334d68215c381</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_scaling_private</name>
      <anchorfile>ilu__dh_8h.html</anchorfile>
      <anchor>ada0c0c541a34143573ac4cb51563c069</anchor>
      <arglist>(int row, int len, double *AVAL, Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iluk_mpi_bj</name>
      <anchorfile>ilu__dh_8h.html</anchorfile>
      <anchor>a79f16fbff292ed487f70a280dcc5ac71</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iluk_seq</name>
      <anchorfile>ilu__dh_8h.html</anchorfile>
      <anchor>a2c3ee9dd6f1f592601bae4b583c41115</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iluk_seq_block</name>
      <anchorfile>ilu__dh_8h.html</anchorfile>
      <anchor>a39f8311b48157380703f7e6b852a24cf</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ilut_seq</name>
      <anchorfile>ilu__dh_8h.html</anchorfile>
      <anchor>abb47de3ab9d0f23c9f69db2fbb48b8d6</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ilu_mpi_bj.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>ilu__mpi__bj_8c</filename>
    <includes id="ilu__dh_8h" name="ilu_dh.h" local="yes" imported="no">ilu_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="Euclid__dh_8h" name="Euclid_dh.h" local="yes" imported="no">Euclid_dh.h</includes>
    <includes id="getRow__dh_8h" name="getRow_dh.h" local="yes" imported="no">getRow_dh.h</includes>
    <includes id="Factor__dh_8h" name="Factor_dh.h" local="yes" imported="no">Factor_dh.h</includes>
    <includes id="SubdomainGraph__dh_8h" name="SubdomainGraph_dh.h" local="yes" imported="no">SubdomainGraph_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ilu__mpi__bj_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ilu__mpi__bj_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ilu__mpi__bj_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>symbolic_row_private</name>
      <anchorfile>ilu__mpi__bj_8c.html</anchorfile>
      <anchor>a31c8b907c7f393d10dffaa95ba9e25ee</anchor>
      <arglist>(int localRow, int beg_row, int end_row, int *list, int *marker, int *tmpFill, int len, int *CVAL, double *AVAL, int *o2n_col, Euclid_dh ctx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>numeric_row_private</name>
      <anchorfile>ilu__mpi__bj_8c.html</anchorfile>
      <anchor>ac7befa23b1f0f46e46be47dc387fb491</anchor>
      <arglist>(int localRow, int beg_row, int end_row, int len, int *CVAL, double *AVAL, REAL_DH *work, int *o2n_col, Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iluk_mpi_bj</name>
      <anchorfile>ilu__mpi__bj_8c.html</anchorfile>
      <anchor>a79f16fbff292ed487f70a280dcc5ac71</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ilu_mpi_pilu.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>ilu__mpi__pilu_8c</filename>
    <includes id="Euclid__dh_8h" name="Euclid_dh.h" local="yes" imported="no">Euclid_dh.h</includes>
    <includes id="Factor__dh_8h" name="Factor_dh.h" local="yes" imported="no">Factor_dh.h</includes>
    <includes id="Mat__dh_8h" name="Mat_dh.h" local="yes" imported="no">Mat_dh.h</includes>
    <includes id="ilu__dh_8h" name="ilu_dh.h" local="yes" imported="no">ilu_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="Hash__dh_8h" name="Hash_dh.h" local="yes" imported="no">Hash_dh.h</includes>
    <includes id="getRow__dh_8h" name="getRow_dh.h" local="yes" imported="no">getRow_dh.h</includes>
    <includes id="SortedList__dh_8h" name="SortedList_dh.h" local="yes" imported="no">SortedList_dh.h</includes>
    <includes id="ExternalRows__dh_8h" name="ExternalRows_dh.h" local="yes" imported="no">ExternalRows_dh.h</includes>
    <includes id="SubdomainGraph__dh_8h" name="SubdomainGraph_dh.h" local="yes" imported="no">SubdomainGraph_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ilu__mpi__pilu_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ilu__mpi__pilu_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ilu__mpi__pilu_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>iluk_symbolic_row_private</name>
      <anchorfile>ilu__mpi__pilu_8c.html</anchorfile>
      <anchor>acfcfbb80ab0caad597b495cf839a9ec6</anchor>
      <arglist>(int localRow, int len, int *CVAL, double *AVAL, ExternalRows_dh extRows, SortedList_dh sList, Euclid_dh ctx, bool debug)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>iluk_numeric_row_private</name>
      <anchorfile>ilu__mpi__pilu_8c.html</anchorfile>
      <anchor>aed0ba07ac00e0011c8d75131b8c68b40</anchor>
      <arglist>(int new_row, ExternalRows_dh extRows, SortedList_dh slist, Euclid_dh ctx, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iluk_mpi_pilu</name>
      <anchorfile>ilu__mpi__pilu_8c.html</anchorfile>
      <anchor>ac73a5a21983b5cf4fca334d68215c381</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ilu_seq.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>ilu__seq_8c</filename>
    <includes id="ilu__dh_8h" name="ilu_dh.h" local="yes" imported="no">ilu_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="Euclid__dh_8h" name="Euclid_dh.h" local="yes" imported="no">Euclid_dh.h</includes>
    <includes id="getRow__dh_8h" name="getRow_dh.h" local="yes" imported="no">getRow_dh.h</includes>
    <includes id="Factor__dh_8h" name="Factor_dh.h" local="yes" imported="no">Factor_dh.h</includes>
    <includes id="SubdomainGraph__dh_8h" name="SubdomainGraph_dh.h" local="yes" imported="no">SubdomainGraph_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ilu__seq_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ilu__seq_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ilu__seq_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ilu__seq_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ilu__seq_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ilu__seq_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ilu__seq_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>ilu__seq_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>check_constraint_private</name>
      <anchorfile>ilu__seq_8c.html</anchorfile>
      <anchor>a715ce1c5f277169dce78a54465a0f4c3</anchor>
      <arglist>(Euclid_dh ctx, int b, int j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>symbolic_row_private</name>
      <anchorfile>ilu__seq_8c.html</anchorfile>
      <anchor>a0524d448093a4a84d5579e6ec9c91ff8</anchor>
      <arglist>(int localRow, int *list, int *marker, int *tmpFill, int len, int *CVAL, double *AVAL, int *o2n_col, Euclid_dh ctx, bool debug)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>numeric_row_private</name>
      <anchorfile>ilu__seq_8c.html</anchorfile>
      <anchor>a27b512a56e762786c4e362c20bb7e074</anchor>
      <arglist>(int localRow, int len, int *CVAL, double *AVAL, REAL_DH *work, int *o2n_col, Euclid_dh ctx, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_scaling_private</name>
      <anchorfile>ilu__seq_8c.html</anchorfile>
      <anchor>ada0c0c541a34143573ac4cb51563c069</anchor>
      <arglist>(int row, int len, double *AVAL, Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iluk_seq</name>
      <anchorfile>ilu__seq_8c.html</anchorfile>
      <anchor>a2c3ee9dd6f1f592601bae4b583c41115</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iluk_seq_block</name>
      <anchorfile>ilu__seq_8c.html</anchorfile>
      <anchor>a39f8311b48157380703f7e6b852a24cf</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ilut_row_private</name>
      <anchorfile>ilu__seq_8c.html</anchorfile>
      <anchor>abfde64a268bc45ca560a346ec3c9147c</anchor>
      <arglist>(int localRow, int *list, int *o2n_col, int *marker, int len, int *CVAL, double *AVAL, REAL_DH *work, Euclid_dh ctx, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ilut_seq</name>
      <anchorfile>ilu__seq_8c.html</anchorfile>
      <anchor>abb47de3ab9d0f23c9f69db2fbb48b8d6</anchor>
      <arglist>(Euclid_dh ctx)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>index.doc</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/browser/doc/</path>
    <filename>index_8doc</filename>
  </compound>
  <compound kind="file">
    <name>io_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>io__dh_8c</filename>
    <includes id="io__dh_8h" name="io_dh.h" local="yes" imported="no">io_dh.h</includes>
    <includes id="Mat__dh_8h" name="Mat_dh.h" local="yes" imported="no">Mat_dh.h</includes>
    <includes id="Vec__dh_8h" name="Vec_dh.h" local="yes" imported="no">Vec_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <includes id="Timer__dh_8h" name="Timer_dh.h" local="yes" imported="no">Timer_dh.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="mat__dh__private_8h" name="mat_dh_private.h" local="yes" imported="no">mat_dh_private.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>io__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>io__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FILE *</type>
      <name>openFile_dh</name>
      <anchorfile>io__dh_8c.html</anchorfile>
      <anchor>a7d6d4017b1ce2dc25354be4a499e44fb</anchor>
      <arglist>(const char *filenameIN, const char *modeIN)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeFile_dh</name>
      <anchorfile>io__dh_8c.html</anchorfile>
      <anchor>a24eeddb04002a2264d2f9cc50e73a641</anchor>
      <arglist>(FILE *fpIN)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>io_dh_print_ebin_mat_private</name>
      <anchorfile>io__dh_8c.html</anchorfile>
      <anchor>a3fab1cf979d508e37f791a52af0bee5c</anchor>
      <arglist>(int m, int beg_row, int *rp, int *cval, double *aval, int *n2o, int *o2n, Hash_i_dh hash, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>io_dh_read_ebin_mat_private</name>
      <anchorfile>io__dh_8c.html</anchorfile>
      <anchor>a514fa3c704ec1ceeed1f004e78d0bedb</anchor>
      <arglist>(int *m, int **rp, int **cval, double **aval, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>io_dh_print_ebin_vec_private</name>
      <anchorfile>io__dh_8c.html</anchorfile>
      <anchor>a64543638d812f61a0009a0c51212ef70</anchor>
      <arglist>(int n, int beg_row, double *vals, int *n2o, int *o2n, Hash_i_dh hash, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>io_dh_read_ebin_vec_private</name>
      <anchorfile>io__dh_8c.html</anchorfile>
      <anchor>a3c50bb67bd677dd7f78e6dceb3362a3c</anchor>
      <arglist>(int *n, double **vals, char *filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>io_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>io__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <member kind="function">
      <type>FILE *</type>
      <name>openFile_dh</name>
      <anchorfile>io__dh_8h.html</anchorfile>
      <anchor>a7d6d4017b1ce2dc25354be4a499e44fb</anchor>
      <arglist>(const char *filenameIN, const char *modeIN)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeFile_dh</name>
      <anchorfile>io__dh_8h.html</anchorfile>
      <anchor>a24eeddb04002a2264d2f9cc50e73a641</anchor>
      <arglist>(FILE *fpIN)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSmallEndian</name>
      <anchorfile>io__dh_8h.html</anchorfile>
      <anchor>aac81c16cd9f5ccabc19b3da0d5eb0b90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>io_dh_print_ebin_mat_private</name>
      <anchorfile>io__dh_8h.html</anchorfile>
      <anchor>a3fab1cf979d508e37f791a52af0bee5c</anchor>
      <arglist>(int m, int beg_row, int *rp, int *cval, double *aval, int *n2o, int *o2n, Hash_i_dh hash, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>io_dh_read_ebin_mat_private</name>
      <anchorfile>io__dh_8h.html</anchorfile>
      <anchor>a514fa3c704ec1ceeed1f004e78d0bedb</anchor>
      <arglist>(int *m, int **rp, int **cval, double **aval, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>io_dh_print_ebin_vec_private</name>
      <anchorfile>io__dh_8h.html</anchorfile>
      <anchor>a64543638d812f61a0009a0c51212ef70</anchor>
      <arglist>(int n, int beg_row, double *vals, int *n2o, int *o2n, Hash_i_dh hash, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>io_dh_read_ebin_vec_private</name>
      <anchorfile>io__dh_8h.html</anchorfile>
      <anchor>a3c50bb67bd677dd7f78e6dceb3362a3c</anchor>
      <arglist>(int *n, double **vals, char *filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iohb.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/ifpack_threaded_hb/</path>
    <filename>iohb_8c</filename>
    <includes id="iohb_8h" name="iohb.h" local="yes" imported="no">iohb.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>_SP_base</name>
      <anchorfile>iohb_8c.html</anchorfile>
      <anchor>ab0f01139eec5e71bcf0771a630ee20d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>substr</name>
      <anchorfile>iohb_8c.html</anchorfile>
      <anchor>ad6dd6a0619796389a696edd656397509</anchor>
      <arglist>(const char *S, const int pos, const int len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>upcase</name>
      <anchorfile>iohb_8c.html</anchorfile>
      <anchor>a7643cbba1c818f74e4b26ed53b6742f3</anchor>
      <arglist>(char *S)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IOHBTerminate</name>
      <anchorfile>iohb_8c.html</anchorfile>
      <anchor>a88c77ebb1b55ae8b14f5d23130dd00fb</anchor>
      <arglist>(char *message)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readHB_info</name>
      <anchorfile>iohb_8c.html</anchorfile>
      <anchor>a47416463d6ed24dc00c36ac840c6a594</anchor>
      <arglist>(const char *filename, int *M, int *N, int *nz, char **Type, int *Nrhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readHB_header</name>
      <anchorfile>iohb_8c.html</anchorfile>
      <anchor>a018b25866225114d0133bc7db1a582cb</anchor>
      <arglist>(FILE *in_file, char *Title, char *Key, char *Type, int *Nrow, int *Ncol, int *Nnzero, int *Nrhs, char *Ptrfmt, char *Indfmt, char *Valfmt, char *Rhsfmt, int *Ptrcrd, int *Indcrd, int *Valcrd, int *Rhscrd, char *Rhstype)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readHB_mat_double</name>
      <anchorfile>iohb_8c.html</anchorfile>
      <anchor>a88851b95bbb174de15ff2471d5ad5b05</anchor>
      <arglist>(const char *filename, int colptr[], int rowind[], double val[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readHB_newmat_double</name>
      <anchorfile>iohb_8c.html</anchorfile>
      <anchor>ac2a7d7d7bd6bb9402e5922b9f8a13d7a</anchor>
      <arglist>(const char *filename, int *M, int *N, int *nonzeros, int **colptr, int **rowind, double **val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readHB_aux_double</name>
      <anchorfile>iohb_8c.html</anchorfile>
      <anchor>a2d9d6a72375fe17641204aca3aca006e</anchor>
      <arglist>(const char *filename, const char AuxType, double b[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readHB_newaux_double</name>
      <anchorfile>iohb_8c.html</anchorfile>
      <anchor>a776c0c58a4583c1b351fd757dcc03e15</anchor>
      <arglist>(const char *filename, const char AuxType, double **b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeHB_mat_double</name>
      <anchorfile>iohb_8c.html</anchorfile>
      <anchor>acbadc7e68e733a6f631321c041b9e8f2</anchor>
      <arglist>(const char *filename, int M, int N, int nz, const int colptr[], const int rowind[], const double val[], int Nrhs, const double rhs[], const double guess[], const double exact[], const char *Title, const char *Key, const char *Type, char *Ptrfmt, char *Indfmt, char *Valfmt, char *Rhsfmt, const char *Rhstype)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readHB_mat_char</name>
      <anchorfile>iohb_8c.html</anchorfile>
      <anchor>a78f17cd5dfac983aefd586b3ec2cf6c4</anchor>
      <arglist>(const char *filename, int colptr[], int rowind[], char val[], char *Valfmt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readHB_newmat_char</name>
      <anchorfile>iohb_8c.html</anchorfile>
      <anchor>ac224fde77d63cab67086317379b8ce04</anchor>
      <arglist>(const char *filename, int *M, int *N, int *nonzeros, int **colptr, int **rowind, char **val, char **Valfmt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readHB_aux_char</name>
      <anchorfile>iohb_8c.html</anchorfile>
      <anchor>a9590ab0e7d16b150062893fc33786115</anchor>
      <arglist>(const char *filename, const char AuxType, char b[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readHB_newaux_char</name>
      <anchorfile>iohb_8c.html</anchorfile>
      <anchor>a25f7828ba0befb468aecec178e670fc1</anchor>
      <arglist>(const char *filename, const char AuxType, char **b, char **Rhsfmt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeHB_mat_char</name>
      <anchorfile>iohb_8c.html</anchorfile>
      <anchor>a453f9afbd11f3bea15c087338bfc8fe4</anchor>
      <arglist>(const char *filename, int M, int N, int nz, const int colptr[], const int rowind[], const char val[], int Nrhs, const char rhs[], const char guess[], const char exact[], const char *Title, const char *Key, const char *Type, char *Ptrfmt, char *Indfmt, char *Valfmt, char *Rhsfmt, const char *Rhstype)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ParseIfmt</name>
      <anchorfile>iohb_8c.html</anchorfile>
      <anchor>aedcdefc385fa547931686b728942cf8e</anchor>
      <arglist>(char *fmt, int *perline, int *width)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ParseRfmt</name>
      <anchorfile>iohb_8c.html</anchorfile>
      <anchor>a11c8b09bf56665a52bbc8a395d5d6175</anchor>
      <arglist>(char *fmt, int *perline, int *width, int *prec, int *flag)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iohb.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/ifpack_threaded_hb/</path>
    <filename>iohb_8h</filename>
    <member kind="function">
      <type>int</type>
      <name>readHB_info</name>
      <anchorfile>iohb_8h.html</anchorfile>
      <anchor>a47416463d6ed24dc00c36ac840c6a594</anchor>
      <arglist>(const char *filename, int *M, int *N, int *nz, char **Type, int *Nrhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readHB_header</name>
      <anchorfile>iohb_8h.html</anchorfile>
      <anchor>a018b25866225114d0133bc7db1a582cb</anchor>
      <arglist>(FILE *in_file, char *Title, char *Key, char *Type, int *Nrow, int *Ncol, int *Nnzero, int *Nrhs, char *Ptrfmt, char *Indfmt, char *Valfmt, char *Rhsfmt, int *Ptrcrd, int *Indcrd, int *Valcrd, int *Rhscrd, char *Rhstype)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readHB_mat_double</name>
      <anchorfile>iohb_8h.html</anchorfile>
      <anchor>a88851b95bbb174de15ff2471d5ad5b05</anchor>
      <arglist>(const char *filename, int colptr[], int rowind[], double val[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readHB_newmat_double</name>
      <anchorfile>iohb_8h.html</anchorfile>
      <anchor>ac2a7d7d7bd6bb9402e5922b9f8a13d7a</anchor>
      <arglist>(const char *filename, int *M, int *N, int *nonzeros, int **colptr, int **rowind, double **val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readHB_aux_double</name>
      <anchorfile>iohb_8h.html</anchorfile>
      <anchor>a2d9d6a72375fe17641204aca3aca006e</anchor>
      <arglist>(const char *filename, const char AuxType, double b[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readHB_newaux_double</name>
      <anchorfile>iohb_8h.html</anchorfile>
      <anchor>a776c0c58a4583c1b351fd757dcc03e15</anchor>
      <arglist>(const char *filename, const char AuxType, double **b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeHB_mat_double</name>
      <anchorfile>iohb_8h.html</anchorfile>
      <anchor>acbadc7e68e733a6f631321c041b9e8f2</anchor>
      <arglist>(const char *filename, int M, int N, int nz, const int colptr[], const int rowind[], const double val[], int Nrhs, const double rhs[], const double guess[], const double exact[], const char *Title, const char *Key, const char *Type, char *Ptrfmt, char *Indfmt, char *Valfmt, char *Rhsfmt, const char *Rhstype)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readHB_mat_char</name>
      <anchorfile>iohb_8h.html</anchorfile>
      <anchor>a78f17cd5dfac983aefd586b3ec2cf6c4</anchor>
      <arglist>(const char *filename, int colptr[], int rowind[], char val[], char *Valfmt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readHB_newmat_char</name>
      <anchorfile>iohb_8h.html</anchorfile>
      <anchor>ac224fde77d63cab67086317379b8ce04</anchor>
      <arglist>(const char *filename, int *M, int *N, int *nonzeros, int **colptr, int **rowind, char **val, char **Valfmt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readHB_aux_char</name>
      <anchorfile>iohb_8h.html</anchorfile>
      <anchor>a9590ab0e7d16b150062893fc33786115</anchor>
      <arglist>(const char *filename, const char AuxType, char b[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readHB_newaux_char</name>
      <anchorfile>iohb_8h.html</anchorfile>
      <anchor>a25f7828ba0befb468aecec178e670fc1</anchor>
      <arglist>(const char *filename, const char AuxType, char **b, char **Rhsfmt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>writeHB_mat_char</name>
      <anchorfile>iohb_8h.html</anchorfile>
      <anchor>a453f9afbd11f3bea15c087338bfc8fe4</anchor>
      <arglist>(const char *filename, int M, int N, int nz, const int colptr[], const int rowind[], const char val[], int Nrhs, const char rhs[], const char guess[], const char exact[], const char *Title, const char *Key, const char *Type, char *Ptrfmt, char *Indfmt, char *Valfmt, char *Rhsfmt, const char *Rhstype)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ParseIfmt</name>
      <anchorfile>iohb_8h.html</anchorfile>
      <anchor>aedcdefc385fa547931686b728942cf8e</anchor>
      <arglist>(char *fmt, int *perline, int *width)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ParseRfmt</name>
      <anchorfile>iohb_8h.html</anchorfile>
      <anchor>a11c8b09bf56665a52bbc8a395d5d6175</anchor>
      <arglist>(char *fmt, int *perline, int *width, int *prec, int *flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IOHBTerminate</name>
      <anchorfile>iohb_8h.html</anchorfile>
      <anchor>a88c77ebb1b55ae8b14f5d23130dd00fb</anchor>
      <arglist>(char *message)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>krylov_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>krylov__dh_8c</filename>
    <includes id="Euclid__dh_8h" name="Euclid_dh.h" local="yes" imported="no">Euclid_dh.h</includes>
    <includes id="krylov__dh_8h" name="krylov_dh.h" local="yes" imported="no">krylov_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="Mat__dh_8h" name="Mat_dh.h" local="yes" imported="no">Mat_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>krylov__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>krylov__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bicgstab_euclid</name>
      <anchorfile>krylov__dh_8c.html</anchorfile>
      <anchor>a890b3a7f97713077e2a20d84f545d3e5</anchor>
      <arglist>(Mat_dh A, Euclid_dh ctx, double *x, double *b, int *itsOUT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cg_euclid</name>
      <anchorfile>krylov__dh_8c.html</anchorfile>
      <anchor>acf2fe74b346109c8fcf068d7e0a91f15</anchor>
      <arglist>(Mat_dh A, Euclid_dh ctx, double *x, double *b, int *itsOUT)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>krylov_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>krylov__dh_8h</filename>
    <includes id="blas__dh_8h" name="blas_dh.h" local="yes" imported="no">blas_dh.h</includes>
    <member kind="function">
      <type>void</type>
      <name>bicgstab_euclid</name>
      <anchorfile>krylov__dh_8h.html</anchorfile>
      <anchor>a890b3a7f97713077e2a20d84f545d3e5</anchor>
      <arglist>(Mat_dh A, Euclid_dh ctx, double *x, double *b, int *itsOUT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cg_euclid</name>
      <anchorfile>krylov__dh_8h.html</anchorfile>
      <anchor>acf2fe74b346109c8fcf068d7e0a91f15</anchor>
      <arglist>(Mat_dh A, Euclid_dh ctx, double *x, double *b, int *itsOUT)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>macros_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>macros__dh_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>FMAX</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>a985ff4ce447bced94342e89ab3766fdd</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>aba93bd95f52b3ff4f0daa59676022d1e</anchor>
      <arglist>(a, b)  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>a3acffbd305ee72dcd4593c0d8af64a4f</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ABS</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>a996f7be338ccb40d1a2a5abc1ad61759</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FABS</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>a1e3a5e7fcbf1430d6f596571df9d0885</anchor>
      <arglist>(a)    </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MATLAB_ZERO_</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>a95ec00d5047c76905cfde0a979f10948</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_DH</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>ac815cc2cbecb1c2de09dca5d089ec1f7</anchor>
      <arglist>(ptr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CHECK_MPI_V_ERROR</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>ae6dd4c2f6d570159e40e976523d55bf7</anchor>
      <arglist>(errCode)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CHECK_MPI_ERROR</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>a30fe6a776faf5343978e7d9debeea17e</anchor>
      <arglist>(errCode)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SET_V_ERROR</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>a851de021ddee83966006373f52edfa59</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SET_ERROR</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>aff8b8235ad3f0099c0e9ddeb998891e0</anchor>
      <arglist>(retval, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CHECK_V_ERROR</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>aa8382e79ad87d167ca00b2e7122c273e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CHECK_ERROR</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>a72f5d2f26da1ffd2bc0a31d0435a0eb8</anchor>
      <arglist>(retval)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SET_INFO</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>ac5592e3d3a40444b7910a1c703d6d920</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>START_FUNC_DH</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>a8eb2eb30f9f91257fc6531b840ee6454</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>END_FUNC_DH</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>ad03fd1ba4f0e3d2339929ddac9e8e19d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>START_FUNC_DH_2</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>ae72b6580d4860ff4142c788e83da079b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>END_FUNC_DH_2</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>a245c5cb1826b4449e82e996149e236dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>END_FUNC_VAL</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>ae85c96d7c84a2209e00f265eabefe143</anchor>
      <arglist>(retval)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>END_FUNC_VAL_2</name>
      <anchorfile>macros__dh_8h.html</anchorfile>
      <anchor>afe1403abde4a3a635c35654b83835ef0</anchor>
      <arglist>(retval)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Mat_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Mat__dh_8c</filename>
    <includes id="Mat__dh_8h" name="Mat_dh.h" local="yes" imported="no">Mat_dh.h</includes>
    <includes id="getRow__dh_8h" name="getRow_dh.h" local="yes" imported="no">getRow_dh.h</includes>
    <includes id="SubdomainGraph__dh_8h" name="SubdomainGraph_dh.h" local="yes" imported="no">SubdomainGraph_dh.h</includes>
    <includes id="TimeLog__dh_8h" name="TimeLog_dh.h" local="yes" imported="no">TimeLog_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <includes id="Numbering__dh_8h" name="Numbering_dh.h" local="yes" imported="no">Numbering_dh.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="mat__dh__private_8h" name="mat_dh_private.h" local="yes" imported="no">mat_dh_private.h</includes>
    <includes id="io__dh_8h" name="io_dh.h" local="yes" imported="no">io_dh.h</includes>
    <includes id="Hash__i__dh_8h" name="Hash_i_dh.h" local="yes" imported="no">Hash_i_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setup_matvec_sends_private</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>ad5ea468d9732bb632c756ceb5c7c338b</anchor>
      <arglist>(Mat_dh mat, int *inlist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setup_matvec_receives_private</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a762fa2f149240dbf9b5c108e884db741</anchor>
      <arglist>(Mat_dh mat, int *beg_rows, int *end_rows, int reqlen, int *reqind, int *outlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhCreate</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a4072a26ce39f46d3314ca0c1163f352c</anchor>
      <arglist>(Mat_dh *mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhDestroy</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a085be8ea1fe2a9b094381bec325ce376</anchor>
      <arglist>(Mat_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhMatVecSetdown</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>aeaef92e909afe9d53616f96cdd1c8f4c</anchor>
      <arglist>(Mat_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhMatVecSetup</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a79a717a0d53423c7d99d72d4b24b8875</anchor>
      <arglist>(Mat_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhMatVec</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a6c5fdfe9c32506ee2d95c8a60a8e03f0</anchor>
      <arglist>(Mat_dh mat, double *x, double *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhMatVec_omp</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>adbd9d5f3f1e7a00692f0466796dcf5a6</anchor>
      <arglist>(Mat_dh mat, double *x, double *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhMatVec_uni_omp</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>ac8aa7bf4b578916a0bf6dc9204c02dc5</anchor>
      <arglist>(Mat_dh mat, double *x, double *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhMatVec_uni</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a94beaf71eedf7254e8a1675a39069277</anchor>
      <arglist>(Mat_dh mat, double *x, double *b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Mat_dhReadNz</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a1d041b781fb967955191b117fa0d2ce8</anchor>
      <arglist>(Mat_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhZeroTiming</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>aa7cfd2d4a97b72500439999bea18c808</anchor>
      <arglist>(Mat_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhReduceTiming</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a73eaae3a6b298a098968aa2fe474532b</anchor>
      <arglist>(Mat_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhPermute</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a2ebe2136761673d21f5aa9e6b7a1b906</anchor>
      <arglist>(Mat_dh A, int *n2o, Mat_dh *Bout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhPrintGraph</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a0a103c02b5831c15ade0fb149c78ca00</anchor>
      <arglist>(Mat_dh A, SubdomainGraph_dh sg, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhPrintRows</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a5344b893cb46ce429b72611e3818f912</anchor>
      <arglist>(Mat_dh A, SubdomainGraph_dh sg, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhPrintTriples</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a900d8e36db759b8cb6bc050bb7b22afa</anchor>
      <arglist>(Mat_dh A, SubdomainGraph_dh sg, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhPrintCSR</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a22e8d41a3d7d955f93b40ee6fec5c4fb</anchor>
      <arglist>(Mat_dh A, SubdomainGraph_dh sg, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhPrintBIN</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a531401c620ef59fd0c099789680fa954</anchor>
      <arglist>(Mat_dh A, SubdomainGraph_dh sg, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhReadCSR</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>af17cad0c4a2f953389532256949deaa8</anchor>
      <arglist>(Mat_dh *mat, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhReadTriples</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>abc6e8407df3f27fa37c4e629fa048fa0</anchor>
      <arglist>(Mat_dh *mat, int ignore, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhReadBIN</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a102410d8809c3b501a26d377c05ee153</anchor>
      <arglist>(Mat_dh *mat, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhTranspose</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a25102c4d04d5430ae61dcd8d72757526</anchor>
      <arglist>(Mat_dh A, Mat_dh *Bout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhMakeStructurallySymmetric</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>aabf78e8120e6e01db28899a1116be9a6</anchor>
      <arglist>(Mat_dh A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert_diags_private</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a8b4934725e81dfb116a45d9dc99a1b9d</anchor>
      <arglist>(Mat_dh A, int ct)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhFixDiags</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>aa74d54ace196e42e68b21a8a7ffda78d</anchor>
      <arglist>(Mat_dh A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhPrintDiags</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a077b873ec1c907bd137e901379b8cbdf</anchor>
      <arglist>(Mat_dh A, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhGetRow</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>adc98e9f813bb9783cb559451087aafe8</anchor>
      <arglist>(Mat_dh B, int globalRow, int *len, int **ind, double **val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhRestoreRow</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>aa5c4dda0f92473c587b7afef5081fce8</anchor>
      <arglist>(Mat_dh B, int row, int *len, int **ind, double **val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhRowPermute</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a06b52bd0401c3a2a8274dd2d3572d2b3</anchor>
      <arglist>(Mat_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build_adj_lists_private</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>ae1a883a6f7974271978512c7ec1be5cf</anchor>
      <arglist>(Mat_dh mat, int **rpOUT, int **cvalOUT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhPartition</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a1baf7c91791828323799ac12aa47b063</anchor>
      <arglist>(Mat_dh mat, int blocks, int **beg_rowOUT, int **row_countOUT, int **n2oOUT, int **o2nOUT)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>commsOnly</name>
      <anchorfile>Mat__dh_8c.html</anchorfile>
      <anchor>a22cb370d86baf92db55fc1a83a58a4a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Mat_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Mat__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <class kind="struct">_mat_dh</class>
    <member kind="define">
      <type>#define</type>
      <name>MAT_DH_BINS</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>a75e45cfe0e9b64da6a2ec6de9d16d4b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MATVEC_TIME</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>a592681a521a7518f2c68cb79949d1249</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MATVEC_MPI_TIME</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>ae0e2c4fd119e113439e1bdaf935dafe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MATVEC_MPI_TIME2</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>abea03703867da3c561150e57b8d1bfd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MATVEC_TOTAL_TIME</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>a24a20bd5162b5d1b7d8036382acee50b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MATVEC_RATIO</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>abaccc3e9db8a360cb6e39c0575998d86</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MATVEC_WORDS</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>a46ad801eb119269224420458a325092c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhCreate</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>a4072a26ce39f46d3314ca0c1163f352c</anchor>
      <arglist>(Mat_dh *mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhDestroy</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>a085be8ea1fe2a9b094381bec325ce376</anchor>
      <arglist>(Mat_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhTranspose</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>ab6fb8950206480bd36227bcc1331db4b</anchor>
      <arglist>(Mat_dh matIN, Mat_dh *matOUT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhMakeStructurallySymmetric</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>aabf78e8120e6e01db28899a1116be9a6</anchor>
      <arglist>(Mat_dh A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhMatVecSetup</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>a79a717a0d53423c7d99d72d4b24b8875</anchor>
      <arglist>(Mat_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhMatVecSetdown</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>aeaef92e909afe9d53616f96cdd1c8f4c</anchor>
      <arglist>(Mat_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhMatVec</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>ac1d3b850f1a68af6f2de5ea958a555ab</anchor>
      <arglist>(Mat_dh mat, double *lhs, double *rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhMatVec_omp</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>ae4623b05b43fafeea0c4e4c4404fbebf</anchor>
      <arglist>(Mat_dh mat, double *lhs, double *rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhMatVec_uni</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>a5a6e81d13122e272f813cc9ad2f3f630</anchor>
      <arglist>(Mat_dh mat, double *lhs, double *rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhMatVec_uni_omp</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>a70c6357ac93ae53dfd12ca6333903de4</anchor>
      <arglist>(Mat_dh mat, double *lhs, double *rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Mat_dhReadNz</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>a1d041b781fb967955191b117fa0d2ce8</anchor>
      <arglist>(Mat_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhPrintGraph</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>ab918b361d6fd102409feadcc86e61fc7</anchor>
      <arglist>(Mat_dh mat, SubdomainGraph_dh sg, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhPrintRows</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>abc78d3ecb5e172a0f330565ef699468d</anchor>
      <arglist>(Mat_dh mat, SubdomainGraph_dh sg, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhPrintCSR</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>a6f9fbd58fb1dce4f88817f914f33749b</anchor>
      <arglist>(Mat_dh mat, SubdomainGraph_dh sg, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhPrintTriples</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>adf763029d5343d4ca12aeed0ad261b7f</anchor>
      <arglist>(Mat_dh mat, SubdomainGraph_dh sg, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhPrintBIN</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>a5fa098e7a7eec94cbfb4caac97c2d706</anchor>
      <arglist>(Mat_dh mat, SubdomainGraph_dh sg, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhReadCSR</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>af17cad0c4a2f953389532256949deaa8</anchor>
      <arglist>(Mat_dh *mat, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhReadTriples</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>abc6e8407df3f27fa37c4e629fa048fa0</anchor>
      <arglist>(Mat_dh *mat, int ignore, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhReadBIN</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>a102410d8809c3b501a26d377c05ee153</anchor>
      <arglist>(Mat_dh *mat, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhPermute</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>ab1474c10e128537a9f00e23fdaf5c99f</anchor>
      <arglist>(Mat_dh Ain, int *pIN, Mat_dh *Bout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhFixDiags</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>aa74d54ace196e42e68b21a8a7ffda78d</anchor>
      <arglist>(Mat_dh A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhPrintDiags</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>a077b873ec1c907bd137e901379b8cbdf</anchor>
      <arglist>(Mat_dh A, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhGetRow</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>adc98e9f813bb9783cb559451087aafe8</anchor>
      <arglist>(Mat_dh B, int globalRow, int *len, int **ind, double **val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhRestoreRow</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>aa5c4dda0f92473c587b7afef5081fce8</anchor>
      <arglist>(Mat_dh B, int row, int *len, int **ind, double **val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhPartition</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>ae66fe6b73d32733a3d813765c30d6055</anchor>
      <arglist>(Mat_dh mat, int k, int **beg_rowOUT, int **row_countOUT, int **n2oOUT, int **o2nOUT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhZeroTiming</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>aa7cfd2d4a97b72500439999bea18c808</anchor>
      <arglist>(Mat_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhReduceTiming</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>a73eaae3a6b298a098968aa2fe474532b</anchor>
      <arglist>(Mat_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mat_dhRowPermute</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>a11c8372394c691f2e882d5c6fb7ed3aa</anchor>
      <arglist>(Mat_dh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dldperm</name>
      <anchorfile>Mat__dh_8h.html</anchorfile>
      <anchor>aca8183660ea62dca86eb03a62b6f6df1</anchor>
      <arglist>(int job, int n, int nnz, int colptr[], int adjncy[], double nzval[], int *perm, double u[], double v[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mat_dh_private.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>mat__dh__private_8c</filename>
    <includes id="mat__dh__private_8h" name="mat_dh_private.h" local="yes" imported="no">mat_dh_private.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="Hash__i__dh_8h" name="Hash_i_dh.h" local="yes" imported="no">Hash_i_dh.h</includes>
    <includes id="Mat__dh_8h" name="Mat_dh.h" local="yes" imported="no">Mat_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <includes id="Vec__dh_8h" name="Vec_dh.h" local="yes" imported="no">Vec_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IS_UPPER_TRI</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>ae3f76d76b5229052d8d3a45038d796a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_LOWER_TRI</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>aac43f0f82d36d91bad0ed065e1b53ce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_FULL</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a120723ca9f5fb2c1f5926a68b92b35bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_JUNK</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>aa9e8f394f0dccc622ffb81270044952f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AVAL_TAG</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>afb619b2113c1856ee319deddc1cfbb63</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CVAL_TAG</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a43201c3ad6bda0154cafec7e63e72016</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>isTriangular</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>ada337a882138abaae7e2e7c777bca6b6</anchor>
      <arglist>(int m, int *rp, int *cval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mat_par_read_allocate_private</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a509503027ca98a77a3bc86ba2618d1b3</anchor>
      <arglist>(Mat_dh *Aout, int n, int *rowLengths, int *rowToBlock)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mat_partition_private</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>ae71c10bc8a255c3acc13ffd1000fda97</anchor>
      <arglist>(Mat_dh A, int blocks, int *o2n_row, int *rowToBlock)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convert_triples_to_scr_private</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>aedd2398d5fcf407351e2a6b85cf15e37</anchor>
      <arglist>(int m, int nz, int *I, int *J, double *A, int *rp, int *cval, double *aval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mat_dh_print_graph_private</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>ae9f31253056d8f34907af0fe7a327b5c</anchor>
      <arglist>(int m, int beg_row, int *rp, int *cval, double *aval, int *n2o, int *o2n, Hash_i_dh hash, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_nat_ordering_private</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>ab4989fe5b72f06f93b0f891722a70931</anchor>
      <arglist>(int m, int **p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy_nat_ordering_private</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a4b4a0ded100bcf4c350f77beee4d8521</anchor>
      <arglist>(int *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert_perm</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>aa92df6dcce02df9ff74ad4dcae9c694e</anchor>
      <arglist>(int m, int *pIN, int *pOUT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mat_dh_print_csr_private</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>af3b8f29fc103612061952d87ccefc6af</anchor>
      <arglist>(int m, int *rp, int *cval, double *aval, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mat_dh_read_csr_private</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>af5e9f60a70074c0f9e4eaa4e4de95f89</anchor>
      <arglist>(int *mOUT, int **rpOUT, int **cvalOUT, double **avalOUT, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mat_dh_read_triples_private</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a8bff3f380c668e0e3c99626e03457a9c</anchor>
      <arglist>(int ignore, int *mOUT, int **rpOUT, int **cvalOUT, double **avalOUT, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fix_diags_private</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>aa0118e02ea6a3e2117302623c2e4b745</anchor>
      <arglist>(Mat_dh A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert_missing_diags_private</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a7ace289010ee48c7e0a32d330dc1a092</anchor>
      <arglist>(Mat_dh A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMat</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a35d4907811f866552b15d9997f54c9a0</anchor>
      <arglist>(Mat_dh *Aout, char *ft, char *fn, int ignore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readVec</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a26134d52b2bf5d65361a095afa0463da</anchor>
      <arglist>(Vec_dh *bout, char *ft, char *fn, int ignore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMat</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a51d2307bddc5c9445e6615ffa6b45237</anchor>
      <arglist>(Mat_dh Ain, char *ft, char *fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeVec</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>af1ceeaad5170f36c035b1f2e4c716354</anchor>
      <arglist>(Vec_dh bin, char *ft, char *fn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mat_dh_transpose_reuse_private_private</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a2f6b3b75c00eaf1708f496866f917ca4</anchor>
      <arglist>(bool allocateMem, int m, int *rpIN, int *cvalIN, double *avalIN, int **rpOUT, int **cvalOUT, double **avalOUT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mat_dh_transpose_reuse_private</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a53dfbf06b7b17cca935ecf899e138e86</anchor>
      <arglist>(int m, int *rpIN, int *cvalIN, double *avalIN, int *rpOUT, int *cvalOUT, double *avalOUT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mat_dh_transpose_private</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a07a848e99a6fee720b8bb3c40a8e9ae7</anchor>
      <arglist>(int m, int *RP, int **rpOUT, int *CVAL, int **cvalOUT, double *AVAL, double **avalOUT)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mat_find_owner</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a5d54e333216f3eda28035862c03f040a</anchor>
      <arglist>(int *beg_rows, int *end_rows, int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partition_and_distribute_private</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a9f6ca40ae3bddd0b8a2cd611cd8aec7d</anchor>
      <arglist>(Mat_dh A, Mat_dh *Bout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partition_and_distribute_metis_private</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a05a5c70bca1ee2dc9daa40ac3d05b21d</anchor>
      <arglist>(Mat_dh A, Mat_dh *Bout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMat_par</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>ab0ef843af3d327d05a53f8ea19b2efa6</anchor>
      <arglist>(Mat_dh *Aout, char *fileType, char *fileName, int ignore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>make_full_private</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a7d808a9a226d0b84554522797c10c8cb</anchor>
      <arglist>(int m, int **rpIN, int **cvalIN, double **avalIN)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>make_symmetric_private</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>ae1ea9e93d62eb185e7471b9c14d137ba</anchor>
      <arglist>(int m, int **rpIN, int **cvalIN, double **avalIN)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>profileMat</name>
      <anchorfile>mat__dh__private_8c.html</anchorfile>
      <anchor>a084c71798e014e1bb66f732ab1182643</anchor>
      <arglist>(Mat_dh A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mat_dh_private.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>mat__dh__private_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <member kind="function">
      <type>int</type>
      <name>mat_find_owner</name>
      <anchorfile>mat__dh__private_8h.html</anchorfile>
      <anchor>a5d54e333216f3eda28035862c03f040a</anchor>
      <arglist>(int *beg_rows, int *end_rows, int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mat_dh_transpose_private</name>
      <anchorfile>mat__dh__private_8h.html</anchorfile>
      <anchor>aaeae3f472f41a6e3ed57a5864ad08214</anchor>
      <arglist>(int m, int *rpIN, int **rpOUT, int *cvalIN, int **cvalOUT, double *avalIN, double **avalOUT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mat_dh_transpose_reuse_private</name>
      <anchorfile>mat__dh__private_8h.html</anchorfile>
      <anchor>a53dfbf06b7b17cca935ecf899e138e86</anchor>
      <arglist>(int m, int *rpIN, int *cvalIN, double *avalIN, int *rpOUT, int *cvalOUT, double *avalOUT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMat</name>
      <anchorfile>mat__dh__private_8h.html</anchorfile>
      <anchor>aaa3f4d8242fb11bf0abcbbbcee3ecd11</anchor>
      <arglist>(Mat_dh *Aout, char *fileType, char *fileName, int ignore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readVec</name>
      <anchorfile>mat__dh__private_8h.html</anchorfile>
      <anchor>a1f95eac81a4286cf75552025488500a2</anchor>
      <arglist>(Vec_dh *bout, char *fileType, char *fileName, int ignore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMat</name>
      <anchorfile>mat__dh__private_8h.html</anchorfile>
      <anchor>a35cdb6d357ba2eb8fec427eb155a9ca2</anchor>
      <arglist>(Mat_dh Ain, char *fileType, char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeVec</name>
      <anchorfile>mat__dh__private_8h.html</anchorfile>
      <anchor>a086bea94e7babb85745efff869c7beb7</anchor>
      <arglist>(Vec_dh b, char *fileType, char *fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMat_par</name>
      <anchorfile>mat__dh__private_8h.html</anchorfile>
      <anchor>ab0ef843af3d327d05a53f8ea19b2efa6</anchor>
      <arglist>(Mat_dh *Aout, char *fileType, char *fileName, int ignore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>profileMat</name>
      <anchorfile>mat__dh__private_8h.html</anchorfile>
      <anchor>a084c71798e014e1bb66f732ab1182643</anchor>
      <arglist>(Mat_dh A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mat_dh_print_graph_private</name>
      <anchorfile>mat__dh__private_8h.html</anchorfile>
      <anchor>ae9f31253056d8f34907af0fe7a327b5c</anchor>
      <arglist>(int m, int beg_row, int *rp, int *cval, double *aval, int *n2o, int *o2n, Hash_i_dh hash, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mat_dh_print_csr_private</name>
      <anchorfile>mat__dh__private_8h.html</anchorfile>
      <anchor>af3b8f29fc103612061952d87ccefc6af</anchor>
      <arglist>(int m, int *rp, int *cval, double *aval, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mat_dh_read_csr_private</name>
      <anchorfile>mat__dh__private_8h.html</anchorfile>
      <anchor>ab630933f5940ffad7206375c9def8009</anchor>
      <arglist>(int *m, int **rp, int **cval, double **aval, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mat_dh_read_triples_private</name>
      <anchorfile>mat__dh__private_8h.html</anchorfile>
      <anchor>a3a2142a10740082945649299ddb40a05</anchor>
      <arglist>(int ignore, int *m, int **rp, int **cval, double **aval, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_nat_ordering_private</name>
      <anchorfile>mat__dh__private_8h.html</anchorfile>
      <anchor>ab4989fe5b72f06f93b0f891722a70931</anchor>
      <arglist>(int m, int **p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy_nat_ordering_private</name>
      <anchorfile>mat__dh__private_8h.html</anchorfile>
      <anchor>a4b4a0ded100bcf4c350f77beee4d8521</anchor>
      <arglist>(int *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert_perm</name>
      <anchorfile>mat__dh__private_8h.html</anchorfile>
      <anchor>aa92df6dcce02df9ff74ad4dcae9c694e</anchor>
      <arglist>(int m, int *pIN, int *pOUT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>make_full_private</name>
      <anchorfile>mat__dh__private_8h.html</anchorfile>
      <anchor>a5237ae782f42683c06653a58f9252d5e</anchor>
      <arglist>(int m, int **rp, int **cval, double **aval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>make_symmetric_private</name>
      <anchorfile>mat__dh__private_8h.html</anchorfile>
      <anchor>a2535e68e79cefeddef603640404af1fa</anchor>
      <arglist>(int m, int **rp, int **cval, double **aval)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MatGenFD.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>MatGenFD_8c</filename>
    <includes id="MatGenFD_8h" name="MatGenFD.h" local="yes" imported="no">MatGenFD.h</includes>
    <includes id="Mat__dh_8h" name="Mat_dh.h" local="yes" imported="no">Mat_dh.h</includes>
    <includes id="Vec__dh_8h" name="Vec_dh.h" local="yes" imported="no">Vec_dh.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>FRONT</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a6a93e64641b04368f51b256b6569dc49</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SOUTH</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>af95d852cacd1f65a57d01a5614ecbd7a</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WEST</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a4f59f7d35b99eaef347de30fabd9f901</anchor>
      <arglist>(a)  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CENTER</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>aba573fc4e04acc79de61d407847df1ae</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EAST</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a5c4ea67b9b903df84d33ee38213239ca</anchor>
      <arglist>(a)  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NORTH</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a881f39b60aa08e28d234337abecf3e38</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BACK</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a244fc416a01a1e38ca765ce2879e49b0</anchor>
      <arglist>(a)  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RHS</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>afa3792e0bca055c9c24c463e44b59784</anchor>
      <arglist>(a)    </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setBoundary_private</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a1e24c4f8565ec36cc7e49488012926c5</anchor>
      <arglist>(int node, int *cval, double *aval, int len, double *rhs, double bc, double coeff, double ctr, int nabor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>generateStriped</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>aa62bcc520ba9e3b6b37d730e309d989b</anchor>
      <arglist>(MatGenFD mg, int *rp, int *cval, double *aval, Mat_dh A, Vec_dh b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>generateBlocked</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a78fd34b4fd95126f72c25b3714318fde</anchor>
      <arglist>(MatGenFD mg, int *rp, int *cval, double *aval, Mat_dh A, Vec_dh b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getstencil</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a87618e77debfdd342b647d445f1da2a7</anchor>
      <arglist>(MatGenFD g, int ix, int iy, int iz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MatGenFD_Create</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a49eaad18477fb6f3050a839a824e95c4</anchor>
      <arglist>(MatGenFD *mg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MatGenFD_Destroy</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a6d19aeca3f487dcfcc780945d483799e</anchor>
      <arglist>(MatGenFD mg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MatGenFD_Run</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>ad9c5e3581e46c28bfa5579a4bcdd746a</anchor>
      <arglist>(MatGenFD mg, int id, int np, Mat_dh *AOut, Vec_dh *rhsOut)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rownum</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a935241dde026e8dc1596ec0c7ad5c060</anchor>
      <arglist>(const bool threeD, const int x, const int y, const int z, const int nx, const int ny, const int nz, int P, int Q)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>konstant</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>af0fbbce95a5bc8fac4ebb19045fc2ed6</anchor>
      <arglist>(double coeff, double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>e2_xy</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a7fbfcde664cf45c15f6492cc52149ede</anchor>
      <arglist>(double coeff, double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>boxThreeD</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a0fface315afa6ebcc1217a36c1490468</anchor>
      <arglist>(double coeff, double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>box_1</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>a8855ed48440cc1a5e1b88d2d69ae4001</anchor>
      <arglist>(double coeff, double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>box_2</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>adc63a93467a39ea21fc1f246403a706a</anchor>
      <arglist>(double coeff, double x, double y, double z)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>isThreeD</name>
      <anchorfile>MatGenFD_8c.html</anchorfile>
      <anchor>ac7f20f2eec0cc214b7ceb985786c5410</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MatGenFD.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>MatGenFD_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <class kind="struct">_matgenfd</class>
    <member kind="define">
      <type>#define</type>
      <name>BOX1_X1</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>a42e9138a7bb93d9d162fd1995765a46b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOX1_X2</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>abf7939593a17eb41d48ea007491cac89</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOX1_Y1</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>abf495de288abe7c48a356d9aa31df6dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOX1_Y2</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>a675c30b606382b3d997cba1ea957af85</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOX2_X1</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>af66f21bf47ebd5e3dbf6368badb59a6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOX2_X2</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>aaf7676d02ad0c295a8f808a53f131d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOX2_Y1</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>af9e057ba41437814f3d954085099a6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOX2_Y2</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>a6c215ad3126f4f55201a448f9b8b998f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOX3_X1</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>a6238f695a42d798ebb57b217abe5faca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOX3_X2</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>a60b7fea5b10035b0fec005de2eaefebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOX3_Y1</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>aaf8d4c9ece6581be84392da322b413d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOX3_Y2</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>abb9caca6a30a5094052341fae4e97b58</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOX1_DD</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>a9d97dba7eab79eceb15c3cd45902c4f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOX2_DD</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>ad04eb2c9b928f7274d6df9ff59150c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOX3_DD</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>a98f9ff36b25b939cfbf80b2de0a88cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MatGenFD_Create</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>a49eaad18477fb6f3050a839a824e95c4</anchor>
      <arglist>(MatGenFD *mg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MatGenFD_Destroy</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>a6d19aeca3f487dcfcc780945d483799e</anchor>
      <arglist>(MatGenFD mg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MatGenFD_Run</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>a842695ddac8184346fc11c5eb45ccd33</anchor>
      <arglist>(MatGenFD mg, int id, int np, Mat_dh *A, Vec_dh *rhs)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>konstant</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>af0fbbce95a5bc8fac4ebb19045fc2ed6</anchor>
      <arglist>(double coeff, double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>e2_xy</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>a7fbfcde664cf45c15f6492cc52149ede</anchor>
      <arglist>(double coeff, double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>box_1</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>a8855ed48440cc1a5e1b88d2d69ae4001</anchor>
      <arglist>(double coeff, double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>box_2</name>
      <anchorfile>MatGenFD_8h.html</anchorfile>
      <anchor>adc63a93467a39ea21fc1f246403a706a</anchor>
      <arglist>(double coeff, double x, double y, double z)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Mem_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Mem__dh_8c</filename>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <class kind="struct">memRecord_dh</class>
    <class kind="struct">_mem_dh</class>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mem__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mem__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mem__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mem__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Mem__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mem_dhCreate</name>
      <anchorfile>Mem__dh_8c.html</anchorfile>
      <anchor>a236fc012499b1cb59e3efc4a6fb94bb6</anchor>
      <arglist>(Mem_dh *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mem_dhDestroy</name>
      <anchorfile>Mem__dh_8c.html</anchorfile>
      <anchor>adc358f7850b5ff27f0f4d426e8e09bcc</anchor>
      <arglist>(Mem_dh m)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Mem_dhMalloc</name>
      <anchorfile>Mem__dh_8c.html</anchorfile>
      <anchor>aa8c2a1084fd9bdf1818728a26625a96a</anchor>
      <arglist>(Mem_dh m, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mem_dhFree</name>
      <anchorfile>Mem__dh_8c.html</anchorfile>
      <anchor>a6479252654998b44867cc3099007f2cd</anchor>
      <arglist>(Mem_dh m, void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mem_dhPrint</name>
      <anchorfile>Mem__dh_8c.html</anchorfile>
      <anchor>a8a1e3ec1159c2d6b480630aa684830ba</anchor>
      <arglist>(Mem_dh m, FILE *fp, bool allPrint)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Mem_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Mem__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <member kind="function">
      <type>void</type>
      <name>Mem_dhCreate</name>
      <anchorfile>Mem__dh_8h.html</anchorfile>
      <anchor>a236fc012499b1cb59e3efc4a6fb94bb6</anchor>
      <arglist>(Mem_dh *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mem_dhDestroy</name>
      <anchorfile>Mem__dh_8h.html</anchorfile>
      <anchor>adc358f7850b5ff27f0f4d426e8e09bcc</anchor>
      <arglist>(Mem_dh m)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Mem_dhMalloc</name>
      <anchorfile>Mem__dh_8h.html</anchorfile>
      <anchor>aa8c2a1084fd9bdf1818728a26625a96a</anchor>
      <arglist>(Mem_dh m, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mem_dhFree</name>
      <anchorfile>Mem__dh_8h.html</anchorfile>
      <anchor>a6479252654998b44867cc3099007f2cd</anchor>
      <arglist>(Mem_dh m, void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mem_dhPrint</name>
      <anchorfile>Mem__dh_8h.html</anchorfile>
      <anchor>a8a1e3ec1159c2d6b480630aa684830ba</anchor>
      <arglist>(Mem_dh m, FILE *fp, bool allPrint)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Numbering_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Numbering__dh_8c</filename>
    <includes id="Numbering__dh_8h" name="Numbering_dh.h" local="yes" imported="no">Numbering_dh.h</includes>
    <includes id="Mat__dh_8h" name="Mat_dh.h" local="yes" imported="no">Mat_dh.h</includes>
    <includes id="Hash__i__dh_8h" name="Hash_i_dh.h" local="yes" imported="no">Hash_i_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <includes id="shellSort__dh_8h" name="shellSort_dh.h" local="yes" imported="no">shellSort_dh.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Numbering__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Numbering__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Numbering__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Numbering__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Numbering_dhCreate</name>
      <anchorfile>Numbering__dh_8c.html</anchorfile>
      <anchor>a7edb7f44e76ec6298134cc5f380a1640</anchor>
      <arglist>(Numbering_dh *numb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Numbering_dhDestroy</name>
      <anchorfile>Numbering__dh_8c.html</anchorfile>
      <anchor>a762bcf2dd6020199433eb4d9a3604d57</anchor>
      <arglist>(Numbering_dh numb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Numbering_dhSetup</name>
      <anchorfile>Numbering__dh_8c.html</anchorfile>
      <anchor>ae93f8f54c6c11f07c39e83644efad6ad</anchor>
      <arglist>(Numbering_dh numb, Mat_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Numbering_dhGlobalToLocal</name>
      <anchorfile>Numbering__dh_8c.html</anchorfile>
      <anchor>acbee745f4ad9fc763d989e08d396d181</anchor>
      <arglist>(Numbering_dh numb, int len, int *global, int *local)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Numbering_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Numbering__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <class kind="struct">_numbering_dh</class>
    <member kind="function">
      <type>void</type>
      <name>Numbering_dhCreate</name>
      <anchorfile>Numbering__dh_8h.html</anchorfile>
      <anchor>a7edb7f44e76ec6298134cc5f380a1640</anchor>
      <arglist>(Numbering_dh *numb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Numbering_dhDestroy</name>
      <anchorfile>Numbering__dh_8h.html</anchorfile>
      <anchor>a762bcf2dd6020199433eb4d9a3604d57</anchor>
      <arglist>(Numbering_dh numb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Numbering_dhSetup</name>
      <anchorfile>Numbering__dh_8h.html</anchorfile>
      <anchor>ae93f8f54c6c11f07c39e83644efad6ad</anchor>
      <arglist>(Numbering_dh numb, Mat_dh mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Numbering_dhGlobalToLocal</name>
      <anchorfile>Numbering__dh_8h.html</anchorfile>
      <anchor>a2ec67f61f19d0896ec80bf5b62cb295b</anchor>
      <arglist>(Numbering_dh numb, int len, int *global_in, int *local_out)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParameterHelper.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/AztecOO/</path>
    <filename>ParameterHelper_8hpp</filename>
    <namespace>helper</namespace>
    <member kind="function">
      <type>void</type>
      <name>GetParameter</name>
      <anchorfile>namespacehelper.html</anchorfile>
      <anchor>a2d4358ea7adbb129df5c00c3d7922b10</anchor>
      <arglist>(const Teuchos::ParameterList &amp;params, const std::string &amp;name, T &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LL/ParameterHelper.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/AztecOO_LL/</path>
    <filename>LL_2ParameterHelper_8hpp</filename>
    <namespace>helper</namespace>
    <member kind="function">
      <type>void</type>
      <name>GetParameter</name>
      <anchorfile>namespacehelper.html</anchorfile>
      <anchor>a2d4358ea7adbb129df5c00c3d7922b10</anchor>
      <arglist>(const Teuchos::ParameterList &amp;params, const std::string &amp;name, T &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Parser_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Parser__dh_8c</filename>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <class kind="struct">_parser_dh</class>
    <class kind="struct">_optionsNode</class>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _optionsNode</type>
      <name>OptionsNode</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>a437442633a1d0c2b80433670fefa9b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>find</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>ae6e2a6dca83ec76de977df3fca51fefd</anchor>
      <arglist>(Parser_dh p, char *option, OptionsNode **ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init_from_default_settings_private</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>a512b5e388eef2b0238c7370a90ca4b0a</anchor>
      <arglist>(Parser_dh p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Parser_dhCreate</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>abdd9e5b4293e928fc63fd7db931c6b3d</anchor>
      <arglist>(Parser_dh *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Parser_dhDestroy</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>ad814bd653adb2e7448d348d219828bc9</anchor>
      <arglist>(Parser_dh p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Parser_dhUpdateFromFile</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>afa94595e12b08675aeb434a92f7184ad</anchor>
      <arglist>(Parser_dh p, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Parser_dhInit</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>a84fde13fdd394d567da51ea536b406d1</anchor>
      <arglist>(Parser_dh p, int argc, char *argv[])</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Parser_dhHasSwitch</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>a84411a2e8b8f8ef90eba9397b4d536ea</anchor>
      <arglist>(Parser_dh p, char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Parser_dhReadInt</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>a7b228657f7775da6716ab14fb43582e5</anchor>
      <arglist>(Parser_dh p, char *in, int *out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Parser_dhReadDouble</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>aff56dd82208e717d04b3ba41076a88ba</anchor>
      <arglist>(Parser_dh p, char *in, double *out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Parser_dhReadString</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>ab66e4c6794e7bbb1eefdabe7bd2aaedc</anchor>
      <arglist>(Parser_dh p, char *in, char **out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Parser_dhPrint</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>adccb14d6e60bebb03c3af25b6801224f</anchor>
      <arglist>(Parser_dh p, FILE *fp, bool allPrint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Parser_dhInsert</name>
      <anchorfile>Parser__dh_8c.html</anchorfile>
      <anchor>a5d23949772b13e160aa0d7cdb83b90db</anchor>
      <arglist>(Parser_dh p, char *option, char *value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Parser_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Parser__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <member kind="function">
      <type>void</type>
      <name>Parser_dhCreate</name>
      <anchorfile>Parser__dh_8h.html</anchorfile>
      <anchor>abdd9e5b4293e928fc63fd7db931c6b3d</anchor>
      <arglist>(Parser_dh *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Parser_dhDestroy</name>
      <anchorfile>Parser__dh_8h.html</anchorfile>
      <anchor>ad814bd653adb2e7448d348d219828bc9</anchor>
      <arglist>(Parser_dh p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Parser_dhHasSwitch</name>
      <anchorfile>Parser__dh_8h.html</anchorfile>
      <anchor>aab4eecacf03d211fbb7b947db3eae987</anchor>
      <arglist>(Parser_dh p, char *in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Parser_dhReadString</name>
      <anchorfile>Parser__dh_8h.html</anchorfile>
      <anchor>ab66e4c6794e7bbb1eefdabe7bd2aaedc</anchor>
      <arglist>(Parser_dh p, char *in, char **out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Parser_dhReadInt</name>
      <anchorfile>Parser__dh_8h.html</anchorfile>
      <anchor>a7b228657f7775da6716ab14fb43582e5</anchor>
      <arglist>(Parser_dh p, char *in, int *out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Parser_dhReadDouble</name>
      <anchorfile>Parser__dh_8h.html</anchorfile>
      <anchor>aff56dd82208e717d04b3ba41076a88ba</anchor>
      <arglist>(Parser_dh p, char *in, double *out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Parser_dhPrint</name>
      <anchorfile>Parser__dh_8h.html</anchorfile>
      <anchor>adccb14d6e60bebb03c3af25b6801224f</anchor>
      <arglist>(Parser_dh p, FILE *fp, bool allPrint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Parser_dhInsert</name>
      <anchorfile>Parser__dh_8h.html</anchorfile>
      <anchor>a25797263db46e0274af3e78a21640acd</anchor>
      <arglist>(Parser_dh p, char *name, char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Parser_dhUpdateFromFile</name>
      <anchorfile>Parser__dh_8h.html</anchorfile>
      <anchor>a11bc98775c026932744fcfbc82e7ea6b</anchor>
      <arglist>(Parser_dh p, char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Parser_dhInit</name>
      <anchorfile>Parser__dh_8h.html</anchorfile>
      <anchor>a84fde13fdd394d567da51ea536b406d1</anchor>
      <arglist>(Parser_dh p, int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>performance.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/Performance/</path>
    <filename>performance_8cpp</filename>
    <includes id="Ifpack__ConfigDefs_8h" name="Ifpack_ConfigDefs.h" local="yes" imported="no">Ifpack_ConfigDefs.h</includes>
    <includes id="Ifpack__PointRelaxation_8h" name="Ifpack_PointRelaxation.h" local="yes" imported="no">Ifpack_PointRelaxation.h</includes>
    <includes id="Ifpack__BlockRelaxation_8h" name="Ifpack_BlockRelaxation.h" local="yes" imported="no">Ifpack_BlockRelaxation.h</includes>
    <includes id="Ifpack__SparseContainer_8h" name="Ifpack_SparseContainer.h" local="yes" imported="no">Ifpack_SparseContainer.h</includes>
    <includes id="Ifpack__Amesos_8h" name="Ifpack_Amesos.h" local="yes" imported="no">Ifpack_Amesos.h</includes>
    <member kind="function">
      <type>bool</type>
      <name>ComparePointAndBlock</name>
      <anchorfile>performance_8cpp.html</anchorfile>
      <anchor>aca040d988e802381936870ccb2990a47</anchor>
      <arglist>(std::string PrecType, const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;A, int sweeps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>performance_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>verbose</name>
      <anchorfile>performance_8cpp.html</anchorfile>
      <anchor>ab3f078684998b83967d507d0f453f454</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>SymmetricGallery</name>
      <anchorfile>performance_8cpp.html</anchorfile>
      <anchor>ae7008ae907ccfb76c457feca8b0e3d63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>Solver</name>
      <anchorfile>performance_8cpp.html</anchorfile>
      <anchor>a81e6f54ff1d0b70b4474d28f0701aed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>NumVectors</name>
      <anchorfile>performance_8cpp.html</anchorfile>
      <anchor>aae4f3402139f5c29f5f4dc46178be79c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>prototypes.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/ifpack_threaded_hb/</path>
    <filename>prototypes_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>read_hb</name>
      <anchorfile>prototypes_8h.html</anchorfile>
      <anchor>a034cde4982e60e0a26f74ea4fd985804</anchor>
      <arglist>(char *data_file, int *N_global, int *n_nonzeros, double **val, int **bindx, double **x, double **b, double **bt, double **xexact)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_coo</name>
      <anchorfile>prototypes_8h.html</anchorfile>
      <anchor>a9ae12089f01aea33b8491c87d9e4b1b1</anchor>
      <arglist>(char *data_file, int *proc_config, int *N_global, int *n_nonzeros, double **val, int **bindx, double **x, double **b, double **xexact)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distrib_msr_matrix</name>
      <anchorfile>prototypes_8h.html</anchorfile>
      <anchor>a6ffd5a5766a587c189a8ddec510d130c</anchor>
      <arglist>(int *proc_config, int *N_global, int *n_nonzeros, int *N_update, int **update, double **val, int **bindx, double **x, double **b, double **bt, double **xexact)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distrib_vbr_matrix</name>
      <anchorfile>prototypes_8h.html</anchorfile>
      <anchor>adfb7047668d57fb9c774c062f4b4fe5c</anchor>
      <arglist>(int *proc_config, int *N_global, int *N_blk_global, int *n_nonzeros, int *n_blk_nonzeros, int *N_update, int **update, double **val, int **indx, int **rpntr, int **cpntr, int **bpntr, int **bindx, double **x, double **b, double **bt, double **xexact)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_vbr</name>
      <anchorfile>prototypes_8h.html</anchorfile>
      <anchor>a1a1edaf08db4820e3b202a615fb58daa</anchor>
      <arglist>(char *part_file, int *proc_config, int *N_global, int *N_blk_global, int *n_nonzeros, int *n_blk_nonzeros, int *N_update, int **update, int *bindx_msr, double *val_msr, double **val, int **indx, int **rpntr, int **cpntr, int **bpntr, int **bindx)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>smsrres</name>
      <anchorfile>prototypes_8h.html</anchorfile>
      <anchor>a4ade7fe8f58462f5746e34aaf4592603</anchor>
      <arglist>(int m, int n, double *val, int *indx, double *xlocal, double *x, double *b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scscres</name>
      <anchorfile>prototypes_8h.html</anchorfile>
      <anchor>a46d665772a9a9887f3a760d57d0bf680</anchor>
      <arglist>(int isym, int m, int n, double *val, int *indx, int *pntr, double *x, double *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scscmv</name>
      <anchorfile>prototypes_8h.html</anchorfile>
      <anchor>a2eb0d033bcd326882e892d3c08bb98b6</anchor>
      <arglist>(int isym, int indexbase, int m, int n, double *val, int *indx, int *pntr, double *x, double *b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>svbrres</name>
      <anchorfile>prototypes_8h.html</anchorfile>
      <anchor>abcbd7952536b26f2a855faf9cf85d322</anchor>
      <arglist>(int m, int n, int m_blk, double *val, int *indx, int *bindx, int *rpntr, int *cpntr, int *bpntrb, int *bpntre, double *x, double *b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>read_coo.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/ifpack_threaded_hb/</path>
    <filename>read__coo_8c</filename>
    <member kind="function">
      <type>void</type>
      <name>read_coo</name>
      <anchorfile>read__coo_8c.html</anchorfile>
      <anchor>a9ae12089f01aea33b8491c87d9e4b1b1</anchor>
      <arglist>(char *data_file, int *proc_config, int *N_global, int *n_nonzeros, double **val, int **bindx, double **x, double **b, double **xexact)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>read_hb.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/ifpack_threaded_hb/</path>
    <filename>read__hb_8c</filename>
    <includes id="iohb_8h" name="iohb.h" local="yes" imported="no">iohb.h</includes>
    <includes id="prototypes_8h" name="prototypes.h" local="yes" imported="no">prototypes.h</includes>
    <member kind="function">
      <type>void</type>
      <name>read_hb</name>
      <anchorfile>read__hb_8c.html</anchorfile>
      <anchor>a034cde4982e60e0a26f74ea4fd985804</anchor>
      <arglist>(char *data_file, int *N_global, int *n_nonzeros, double **val, int **bindx, double **x, double **b, double **bt, double **xexact)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>read_matrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/AztecOO/</path>
    <filename>read__matrix_8cpp</filename>
    <member kind="function">
      <type>Epetra_CrsMatrix *</type>
      <name>read_matrix_mm</name>
      <anchorfile>read__matrix_8cpp.html</anchorfile>
      <anchor>aadf56ae15d61390027b80b9655f37fce</anchor>
      <arglist>(const std::string &amp;mm_file, const Epetra_Comm &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Vector *</type>
      <name>read_vector_mm</name>
      <anchorfile>read__matrix_8cpp.html</anchorfile>
      <anchor>afd06c3860d936915e5f144efc2955992</anchor>
      <arglist>(const std::string &amp;mm_file, const Epetra_Comm &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_matrix_hb</name>
      <anchorfile>read__matrix_8cpp.html</anchorfile>
      <anchor>a3327d4a053952b9ae3dd46259a92d86f</anchor>
      <arglist>(const std::string &amp;hb_file, const Epetra_Comm &amp;Comm, Epetra_CrsMatrix *&amp;A, Epetra_Vector *&amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LL/read_matrix.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/AztecOO_LL/</path>
    <filename>LL_2read__matrix_8cpp</filename>
    <member kind="function">
      <type>Epetra_CrsMatrix *</type>
      <name>read_matrix_mm</name>
      <anchorfile>LL_2read__matrix_8cpp.html</anchorfile>
      <anchor>aadf56ae15d61390027b80b9655f37fce</anchor>
      <arglist>(const std::string &amp;mm_file, const Epetra_Comm &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Vector *</type>
      <name>read_vector_mm</name>
      <anchorfile>LL_2read__matrix_8cpp.html</anchorfile>
      <anchor>afd06c3860d936915e5f144efc2955992</anchor>
      <arglist>(const std::string &amp;mm_file, const Epetra_Comm &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_matrix_hb</name>
      <anchorfile>LL_2read__matrix_8cpp.html</anchorfile>
      <anchor>a3327d4a053952b9ae3dd46259a92d86f</anchor>
      <arglist>(const std::string &amp;hb_file, const Epetra_Comm &amp;Comm, Epetra_CrsMatrix *&amp;A, Epetra_Vector *&amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>read_matrix.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/AztecOO/</path>
    <filename>read__matrix_8hpp</filename>
    <member kind="function">
      <type>Epetra_CrsMatrix *</type>
      <name>read_matrix_mm</name>
      <anchorfile>read__matrix_8hpp.html</anchorfile>
      <anchor>aadf56ae15d61390027b80b9655f37fce</anchor>
      <arglist>(const std::string &amp;mm_file, const Epetra_Comm &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Vector *</type>
      <name>read_vector_mm</name>
      <anchorfile>read__matrix_8hpp.html</anchorfile>
      <anchor>afd06c3860d936915e5f144efc2955992</anchor>
      <arglist>(const std::string &amp;mm_file, const Epetra_Comm &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_matrix_hb</name>
      <anchorfile>read__matrix_8hpp.html</anchorfile>
      <anchor>a3327d4a053952b9ae3dd46259a92d86f</anchor>
      <arglist>(const std::string &amp;hb_file, const Epetra_Comm &amp;Comm, Epetra_CrsMatrix *&amp;A, Epetra_Vector *&amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LL/read_matrix.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/AztecOO_LL/</path>
    <filename>LL_2read__matrix_8hpp</filename>
    <member kind="function">
      <type>Epetra_CrsMatrix *</type>
      <name>read_matrix_mm</name>
      <anchorfile>LL_2read__matrix_8hpp.html</anchorfile>
      <anchor>aadf56ae15d61390027b80b9655f37fce</anchor>
      <arglist>(const std::string &amp;mm_file, const Epetra_Comm &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>Epetra_Vector *</type>
      <name>read_vector_mm</name>
      <anchorfile>LL_2read__matrix_8hpp.html</anchorfile>
      <anchor>afd06c3860d936915e5f144efc2955992</anchor>
      <arglist>(const std::string &amp;mm_file, const Epetra_Comm &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_matrix_hb</name>
      <anchorfile>LL_2read__matrix_8hpp.html</anchorfile>
      <anchor>a3327d4a053952b9ae3dd46259a92d86f</anchor>
      <arglist>(const std::string &amp;hb_file, const Epetra_Comm &amp;Comm, Epetra_CrsMatrix *&amp;A, Epetra_Vector *&amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scscmv.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/ifpack_threaded_hb/</path>
    <filename>scscmv_8c</filename>
    <member kind="function">
      <type>void</type>
      <name>scscmv</name>
      <anchorfile>scscmv_8c.html</anchorfile>
      <anchor>a1d34af533614397e0a970abcac8ff26c</anchor>
      <arglist>(int isym, int indexbase, int m, int n, double *val, int *indx, int *pntr, double *x, double *y)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scscres.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/ifpack_threaded_hb/</path>
    <filename>scscres_8c</filename>
    <member kind="define">
      <type>#define</type>
      <name>max</name>
      <anchorfile>scscres_8c.html</anchorfile>
      <anchor>ac39d9cef6a5e030ba8d9e11121054268</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scscres</name>
      <anchorfile>scscres_8c.html</anchorfile>
      <anchor>a46d665772a9a9887f3a760d57d0bf680</anchor>
      <arglist>(int isym, int m, int n, double *val, int *indx, int *pntr, double *x, double *b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>shellSort_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>shellSort__dh_8c</filename>
    <includes id="shellSort__dh_8h" name="shellSort_dh.h" local="yes" imported="no">shellSort_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>shellSort__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>shellSort__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shellSort_int</name>
      <anchorfile>shellSort__dh_8c.html</anchorfile>
      <anchor>a6d5090deb64514c12edb4a4cf9839278</anchor>
      <arglist>(const int n, int *x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shellSort_float</name>
      <anchorfile>shellSort__dh_8c.html</anchorfile>
      <anchor>a6ea31d9796119393c29eff036bf6d9e8</anchor>
      <arglist>(const int n, double *x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>shellSort_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>shellSort__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <member kind="function">
      <type>void</type>
      <name>shellSort_int</name>
      <anchorfile>shellSort__dh_8h.html</anchorfile>
      <anchor>a6d5090deb64514c12edb4a4cf9839278</anchor>
      <arglist>(const int n, int *x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shellSort_float</name>
      <anchorfile>shellSort__dh_8h.html</anchorfile>
      <anchor>a4eafcf434fd93a474c3c930fc82f97c5</anchor>
      <arglist>(int n, double *v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sig_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>sig__dh_8c</filename>
    <includes id="sig__dh_8h" name="sig_dh.h" local="yes" imported="no">sig_dh.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>sig__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>sig__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sigHandler_dh</name>
      <anchorfile>sig__dh_8c.html</anchorfile>
      <anchor>a3f635a3d484f8c051fd0e515fe71635f</anchor>
      <arglist>(int sig)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sigRegister_dh</name>
      <anchorfile>sig__dh_8c.html</anchorfile>
      <anchor>a53153d42a243b32819c68f190d36e52c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sig_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>sig__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <member kind="function">
      <type>void</type>
      <name>sigRegister_dh</name>
      <anchorfile>sig__dh_8h.html</anchorfile>
      <anchor>a53153d42a243b32819c68f190d36e52c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sigHandler_dh</name>
      <anchorfile>sig__dh_8h.html</anchorfile>
      <anchor>a3f635a3d484f8c051fd0e515fe71635f</anchor>
      <arglist>(int sig)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>euclid_signals_len</name>
      <anchorfile>sig__dh_8h.html</anchorfile>
      <anchor>aeed2509df6eb3bc07dd87fd0dd4094f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>euclid_signals</name>
      <anchorfile>sig__dh_8h.html</anchorfile>
      <anchor>af912362377d47a38b4a00283822ce201</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static char *</type>
      <name>SIGNAME</name>
      <anchorfile>sig__dh_8h.html</anchorfile>
      <anchor>abff00c409f743abd52168b0557d61367</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>smsrres.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/ifpack_threaded_hb/</path>
    <filename>smsrres_8c</filename>
    <member kind="define">
      <type>#define</type>
      <name>max</name>
      <anchorfile>smsrres_8c.html</anchorfile>
      <anchor>ac39d9cef6a5e030ba8d9e11121054268</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>smsrres</name>
      <anchorfile>smsrres_8c.html</anchorfile>
      <anchor>a4ade7fe8f58462f5746e34aaf4592603</anchor>
      <arglist>(int m, int n, double *val, int *indx, double *xlocal, double *x, double *b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SortedList_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>SortedList__dh_8c</filename>
    <includes id="SortedList__dh_8h" name="SortedList_dh.h" local="yes" imported="no">SortedList_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="Hash__i__dh_8h" name="Hash_i_dh.h" local="yes" imported="no">Hash_i_dh.h</includes>
    <includes id="SubdomainGraph__dh_8h" name="SubdomainGraph_dh.h" local="yes" imported="no">SubdomainGraph_dh.h</includes>
    <class kind="struct">_sortedList_dh</class>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>lengthen_list_private</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a4306ef93fc9695bc37ec5447946f7a36</anchor>
      <arglist>(SortedList_dh sList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedList_dhCreate</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a97cc228157ef3507140d3c60e3d0765f</anchor>
      <arglist>(SortedList_dh *sList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedList_dhDestroy</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>aad5e84df846dc3c782b5bef26f95a00d</anchor>
      <arglist>(SortedList_dh sList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedList_dhInit</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a0075f76d600d129316d3e9b1f7172d5f</anchor>
      <arglist>(SortedList_dh sList, SubdomainGraph_dh sg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedList_dhReset</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a9498b4d0ce4dbf6d748467c6cdc3ac56</anchor>
      <arglist>(SortedList_dh sList, int row)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SortedList_dhReadCount</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a0d676c2cfda4c758277b2c7f31d155b4</anchor>
      <arglist>(SortedList_dh sList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedList_dhResetGetSmallest</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>adf302684d9f989d6231d783d250a5e9e</anchor>
      <arglist>(SortedList_dh sList)</arglist>
    </member>
    <member kind="function">
      <type>SRecord *</type>
      <name>SortedList_dhGetSmallest</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>aada73eb2494feb0124f017ecf086cffa</anchor>
      <arglist>(SortedList_dh sList)</arglist>
    </member>
    <member kind="function">
      <type>SRecord *</type>
      <name>SortedList_dhGetSmallestLowerTri</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a60d388f599fc0d81ad78d05938fcf7df</anchor>
      <arglist>(SortedList_dh sList)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SortedList_dhPermuteAndInsert</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a97c781aafbf9efd0417fa9051c11a6ec</anchor>
      <arglist>(SortedList_dh sList, SRecord *sr, double thresh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedList_dhInsertOrUpdate</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a788d3a78a96f9d87825ef4d9154da71a</anchor>
      <arglist>(SortedList_dh sList, SRecord *sr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedList_dhInsert</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>af7a4c127416e1a5bc4ce7cd946effa7d</anchor>
      <arglist>(SortedList_dh sList, SRecord *sr)</arglist>
    </member>
    <member kind="function">
      <type>SRecord *</type>
      <name>SortedList_dhFind</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>afe06f73831e15d3d8ff60d83948fa9b6</anchor>
      <arglist>(SortedList_dh sList, SRecord *sr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>check_constraint_private</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a80437c6b49ba5533f0bb02b8ec028490</anchor>
      <arglist>(SubdomainGraph_dh sg, int thisSubdomain, int col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delete_private</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a5966a504eaa76b7ced5e7d1978ffcbf6</anchor>
      <arglist>(SortedList_dh sList, int col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedList_dhEnforceConstraint</name>
      <anchorfile>SortedList__dh_8c.html</anchorfile>
      <anchor>a610220cff042915c3ee4037eea0c9fe0</anchor>
      <arglist>(SortedList_dh sList, SubdomainGraph_dh sg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SortedList_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>SortedList__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <class kind="struct">_srecord</class>
    <member kind="typedef">
      <type>struct _srecord</type>
      <name>SRecord</name>
      <anchorfile>SortedList__dh_8h.html</anchorfile>
      <anchor>ae1e41669a639f8c6234aeb4357921294</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedList_dhCreate</name>
      <anchorfile>SortedList__dh_8h.html</anchorfile>
      <anchor>a97cc228157ef3507140d3c60e3d0765f</anchor>
      <arglist>(SortedList_dh *sList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedList_dhDestroy</name>
      <anchorfile>SortedList__dh_8h.html</anchorfile>
      <anchor>aad5e84df846dc3c782b5bef26f95a00d</anchor>
      <arglist>(SortedList_dh sList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedList_dhInit</name>
      <anchorfile>SortedList__dh_8h.html</anchorfile>
      <anchor>a0075f76d600d129316d3e9b1f7172d5f</anchor>
      <arglist>(SortedList_dh sList, SubdomainGraph_dh sg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedList_dhEnforceConstraint</name>
      <anchorfile>SortedList__dh_8h.html</anchorfile>
      <anchor>a610220cff042915c3ee4037eea0c9fe0</anchor>
      <arglist>(SortedList_dh sList, SubdomainGraph_dh sg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedList_dhReset</name>
      <anchorfile>SortedList__dh_8h.html</anchorfile>
      <anchor>a9498b4d0ce4dbf6d748467c6cdc3ac56</anchor>
      <arglist>(SortedList_dh sList, int row)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SortedList_dhReadCount</name>
      <anchorfile>SortedList__dh_8h.html</anchorfile>
      <anchor>a0d676c2cfda4c758277b2c7f31d155b4</anchor>
      <arglist>(SortedList_dh sList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedList_dhResetGetSmallest</name>
      <anchorfile>SortedList__dh_8h.html</anchorfile>
      <anchor>adf302684d9f989d6231d783d250a5e9e</anchor>
      <arglist>(SortedList_dh sList)</arglist>
    </member>
    <member kind="function">
      <type>SRecord *</type>
      <name>SortedList_dhGetSmallest</name>
      <anchorfile>SortedList__dh_8h.html</anchorfile>
      <anchor>aada73eb2494feb0124f017ecf086cffa</anchor>
      <arglist>(SortedList_dh sList)</arglist>
    </member>
    <member kind="function">
      <type>SRecord *</type>
      <name>SortedList_dhGetSmallestLowerTri</name>
      <anchorfile>SortedList__dh_8h.html</anchorfile>
      <anchor>a60d388f599fc0d81ad78d05938fcf7df</anchor>
      <arglist>(SortedList_dh sList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedList_dhInsert</name>
      <anchorfile>SortedList__dh_8h.html</anchorfile>
      <anchor>af7a4c127416e1a5bc4ce7cd946effa7d</anchor>
      <arglist>(SortedList_dh sList, SRecord *sr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedList_dhInsertOrUpdateVal</name>
      <anchorfile>SortedList__dh_8h.html</anchorfile>
      <anchor>a505b0654daf54a85d8dd4a6fb40c4ccc</anchor>
      <arglist>(SortedList_dh sList, SRecord *sr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SortedList_dhPermuteAndInsert</name>
      <anchorfile>SortedList__dh_8h.html</anchorfile>
      <anchor>a97c781aafbf9efd0417fa9051c11a6ec</anchor>
      <arglist>(SortedList_dh sList, SRecord *sr, double thresh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedList_dhInsertOrUpdate</name>
      <anchorfile>SortedList__dh_8h.html</anchorfile>
      <anchor>a788d3a78a96f9d87825ef4d9154da71a</anchor>
      <arglist>(SortedList_dh sList, SRecord *sr)</arglist>
    </member>
    <member kind="function">
      <type>SRecord *</type>
      <name>SortedList_dhFind</name>
      <anchorfile>SortedList__dh_8h.html</anchorfile>
      <anchor>afe06f73831e15d3d8ff60d83948fa9b6</anchor>
      <arglist>(SortedList_dh sList, SRecord *sr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedList_dhUpdateVal</name>
      <anchorfile>SortedList__dh_8h.html</anchorfile>
      <anchor>a8a501b944fece905aa3fe90b215ad11d</anchor>
      <arglist>(SortedList_dh sList, SRecord *sr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SortedSet_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>SortedSet__dh_8c</filename>
    <includes id="SortedSet__dh_8h" name="SortedSet_dh.h" local="yes" imported="no">SortedSet_dh.h</includes>
    <includes id="shellSort__dh_8h" name="shellSort_dh.h" local="yes" imported="no">shellSort_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedSet__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedSet__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedSet__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SortedSet__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedSet_dhCreate</name>
      <anchorfile>SortedSet__dh_8c.html</anchorfile>
      <anchor>addb674dfcd5feb27b460be43b6f5f3a8</anchor>
      <arglist>(SortedSet_dh *ss, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedSet_dhDestroy</name>
      <anchorfile>SortedSet__dh_8c.html</anchorfile>
      <anchor>ab2bc9bf8c9781080430c7b0508028a1b</anchor>
      <arglist>(SortedSet_dh ss)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedSet_dhInsert</name>
      <anchorfile>SortedSet__dh_8c.html</anchorfile>
      <anchor>ab36a09701571e0d36dcf5149424220ed</anchor>
      <arglist>(SortedSet_dh ss, int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedSet_dhGetList</name>
      <anchorfile>SortedSet__dh_8c.html</anchorfile>
      <anchor>a930ef6976f6a46c906ae164608871bec</anchor>
      <arglist>(SortedSet_dh ss, int **list, int *count)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SortedSet_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>SortedSet__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <class kind="struct">_sortedset_dh</class>
    <member kind="function">
      <type>void</type>
      <name>SortedSet_dhCreate</name>
      <anchorfile>SortedSet__dh_8h.html</anchorfile>
      <anchor>a0136289cd1f432034f0b48e5ab8e9669</anchor>
      <arglist>(SortedSet_dh *ss, int initialSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedSet_dhDestroy</name>
      <anchorfile>SortedSet__dh_8h.html</anchorfile>
      <anchor>ab2bc9bf8c9781080430c7b0508028a1b</anchor>
      <arglist>(SortedSet_dh ss)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedSet_dhInsert</name>
      <anchorfile>SortedSet__dh_8h.html</anchorfile>
      <anchor>ab36a09701571e0d36dcf5149424220ed</anchor>
      <arglist>(SortedSet_dh ss, int idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SortedSet_dhGetList</name>
      <anchorfile>SortedSet__dh_8h.html</anchorfile>
      <anchor>a930ef6976f6a46c906ae164608871bec</anchor>
      <arglist>(SortedSet_dh ss, int **list, int *count)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubdomainGraph_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>SubdomainGraph__dh_8c</filename>
    <includes id="SubdomainGraph__dh_8h" name="SubdomainGraph_dh.h" local="yes" imported="no">SubdomainGraph_dh.h</includes>
    <includes id="getRow__dh_8h" name="getRow_dh.h" local="yes" imported="no">getRow_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <includes id="Parser__dh_8h" name="Parser_dh.h" local="yes" imported="no">Parser_dh.h</includes>
    <includes id="Hash__i__dh_8h" name="Hash_i_dh.h" local="yes" imported="no">Hash_i_dh.h</includes>
    <includes id="mat__dh__private_8h" name="mat_dh_private.h" local="yes" imported="no">mat_dh_private.h</includes>
    <includes id="io__dh_8h" name="io_dh.h" local="yes" imported="no">io_dh.h</includes>
    <includes id="SortedSet__dh_8h" name="SortedSet_dh.h" local="yes" imported="no">SortedSet_dh.h</includes>
    <includes id="shellSort__dh_8h" name="shellSort_dh.h" local="yes" imported="no">shellSort_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BDRY_NODE_TAG</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a5a672385c20847b443a723e50f366210</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init_seq_private</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a477d8ad0704760f79b047b78ffbd3772</anchor>
      <arglist>(SubdomainGraph_dh s, int blocks, bool bj, void *A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init_mpi_private</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4bbd60d6961cce77203c9fcd0186f480</anchor>
      <arglist>(SubdomainGraph_dh s, int blocks, bool bj, void *A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>allocate_storage_private</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>ae2f1aa0c02038188ec8fef9df53df7c8</anchor>
      <arglist>(SubdomainGraph_dh s, int blocks, int m, bool bj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>form_subdomaingraph_mpi_private</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a8a45e7a8c873d0340e06982c7f2ad61e</anchor>
      <arglist>(SubdomainGraph_dh s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>form_subdomaingraph_seq_private</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a886955d58a37a142ca67e41f8048272f</anchor>
      <arglist>(SubdomainGraph_dh s, int m, void *A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>find_all_neighbors_sym_private</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a819e86ba98e6e33fb5170f8503967bcb</anchor>
      <arglist>(SubdomainGraph_dh s, int m, void *A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>find_all_neighbors_unsym_private</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a596e95e03bf1946322c6acba45464076</anchor>
      <arglist>(SubdomainGraph_dh s, int m, void *A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>find_bdry_nodes_sym_private</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a47d028b04eebd9a880d6665d00cbf038</anchor>
      <arglist>(SubdomainGraph_dh s, int m, void *A, int *interiorNodes, int *bdryNodes, int *interiorCount, int *bdryCount)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>find_bdry_nodes_unsym_private</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a37c06566d991cbae4b267cb6e4f1f196</anchor>
      <arglist>(SubdomainGraph_dh s, int m, void *A, int *interiorNodes, int *bdryNodes, int *interiorCount, int *bdryCount)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>find_bdry_nodes_seq_private</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a0e1a4b5bcdfb4cc606420297768cc3ee</anchor>
      <arglist>(SubdomainGraph_dh s, int m, void *A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>find_ordered_neighbors_private</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a66b8bd5409fcdfc4a2876e2a86865e92</anchor>
      <arglist>(SubdomainGraph_dh s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>color_subdomain_graph_private</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a25fd4f0847f86e74f41b568db3808708</anchor>
      <arglist>(SubdomainGraph_dh s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>adjust_matrix_perms_private</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>ac11c02612e46ec87343892e217a65f9d</anchor>
      <arglist>(SubdomainGraph_dh s, int m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubdomainGraph_dhCreate</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a241479c44ae7dfcea4584f33ee952bd4</anchor>
      <arglist>(SubdomainGraph_dh *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubdomainGraph_dhDestroy</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a0e46425dcc4bf5973a1bd17a90b9679c</anchor>
      <arglist>(SubdomainGraph_dh s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubdomainGraph_dhInit</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a1a4a7fcbb8db84e23642c2c5201592ba</anchor>
      <arglist>(SubdomainGraph_dh s, int blocks, bool bj, void *A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SubdomainGraph_dhFindOwner</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a626b1c4c612c44daeb38215016d0ba3d</anchor>
      <arglist>(SubdomainGraph_dh s, int idx, bool permuted)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubdomainGraph_dhPrintStatsLong</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a4c3c3238508214751412be5ef6ac4bc5</anchor>
      <arglist>(SubdomainGraph_dh s, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubdomainGraph_dhExchangePerms</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a318ca9e5f46085bdd520f3cb01c243fd</anchor>
      <arglist>(SubdomainGraph_dh s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubdomainGraph_dhDump</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a9f09786266cce67cc6e5e639c2b77531</anchor>
      <arglist>(SubdomainGraph_dh s, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubdomainGraph_dhPrintSubdomainGraph</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>a21e37652c46de58c6ed3442bd3481434</anchor>
      <arglist>(SubdomainGraph_dh s, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubdomainGraph_dhPrintRatios</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>ac3307bab36964bd38bfdd70b76524c8b</anchor>
      <arglist>(SubdomainGraph_dh s, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubdomainGraph_dhPrintStats</name>
      <anchorfile>SubdomainGraph__dh_8c.html</anchorfile>
      <anchor>adc82eb14b6b4f140ae61a65cb7328415</anchor>
      <arglist>(SubdomainGraph_dh sg, FILE *fp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubdomainGraph_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>SubdomainGraph__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <class kind="struct">_subdomain_dh</class>
    <member kind="define">
      <type>#define</type>
      <name>MAX_SUBDOMAIN_COLOR</name>
      <anchorfile>SubdomainGraph__dh_8h.html</anchorfile>
      <anchor>a7e32731f2c9680b800f0c6e834d08b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TIMING_BINS_SG</name>
      <anchorfile>SubdomainGraph__dh_8h.html</anchorfile>
      <anchor>a2cbbd66a5e9ca9196bc6c6e72a85a5f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOTAL_SGT</name>
      <anchorfile>SubdomainGraph__dh_8h.html</anchorfile>
      <anchor>abc6126af1d45847bc59afa0aa3216b04a50c6cd68700e7d9c3439bdaaca4a5929</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FIND_NABORS_SGT</name>
      <anchorfile>SubdomainGraph__dh_8h.html</anchorfile>
      <anchor>abc6126af1d45847bc59afa0aa3216b04ae291a2763f8d92719bf256fa7e26fb78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ORDER_BDRY_SGT</name>
      <anchorfile>SubdomainGraph__dh_8h.html</anchorfile>
      <anchor>abc6126af1d45847bc59afa0aa3216b04a0371f4a66f724d97bf1b89d4c7bebce2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FORM_GRAPH_SGT</name>
      <anchorfile>SubdomainGraph__dh_8h.html</anchorfile>
      <anchor>abc6126af1d45847bc59afa0aa3216b04a889eb99d1e90c61a61a8faf34de5edbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXCHANGE_PERMS_SGT</name>
      <anchorfile>SubdomainGraph__dh_8h.html</anchorfile>
      <anchor>abc6126af1d45847bc59afa0aa3216b04aada717afbe5defeb828d68244a7c80af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubdomainGraph_dhCreate</name>
      <anchorfile>SubdomainGraph__dh_8h.html</anchorfile>
      <anchor>a241479c44ae7dfcea4584f33ee952bd4</anchor>
      <arglist>(SubdomainGraph_dh *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubdomainGraph_dhDestroy</name>
      <anchorfile>SubdomainGraph__dh_8h.html</anchorfile>
      <anchor>a0e46425dcc4bf5973a1bd17a90b9679c</anchor>
      <arglist>(SubdomainGraph_dh s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubdomainGraph_dhInit</name>
      <anchorfile>SubdomainGraph__dh_8h.html</anchorfile>
      <anchor>a1a4a7fcbb8db84e23642c2c5201592ba</anchor>
      <arglist>(SubdomainGraph_dh s, int blocks, bool bj, void *A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubdomainGraph_dhColor</name>
      <anchorfile>SubdomainGraph__dh_8h.html</anchorfile>
      <anchor>a82c22e78c59068d5ce8d9480e90836c8</anchor>
      <arglist>(SubdomainGraph_dh s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SubdomainGraph_dhFindOwner</name>
      <anchorfile>SubdomainGraph__dh_8h.html</anchorfile>
      <anchor>a626b1c4c612c44daeb38215016d0ba3d</anchor>
      <arglist>(SubdomainGraph_dh s, int idx, bool permuted)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubdomainGraph_dhExchangePerms</name>
      <anchorfile>SubdomainGraph__dh_8h.html</anchorfile>
      <anchor>a318ca9e5f46085bdd520f3cb01c243fd</anchor>
      <arglist>(SubdomainGraph_dh s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubdomainGraph_dhPrintSubdomainGraph</name>
      <anchorfile>SubdomainGraph__dh_8h.html</anchorfile>
      <anchor>a21e37652c46de58c6ed3442bd3481434</anchor>
      <arglist>(SubdomainGraph_dh s, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubdomainGraph_dhPrintStatsLong</name>
      <anchorfile>SubdomainGraph__dh_8h.html</anchorfile>
      <anchor>a4c3c3238508214751412be5ef6ac4bc5</anchor>
      <arglist>(SubdomainGraph_dh s, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubdomainGraph_dhDump</name>
      <anchorfile>SubdomainGraph__dh_8h.html</anchorfile>
      <anchor>a9f09786266cce67cc6e5e639c2b77531</anchor>
      <arglist>(SubdomainGraph_dh s, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubdomainGraph_dhPrintRatios</name>
      <anchorfile>SubdomainGraph__dh_8h.html</anchorfile>
      <anchor>ac3307bab36964bd38bfdd70b76524c8b</anchor>
      <arglist>(SubdomainGraph_dh s, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubdomainGraph_dhPrintStats</name>
      <anchorfile>SubdomainGraph__dh_8h.html</anchorfile>
      <anchor>adc82eb14b6b4f140ae61a65cb7328415</anchor>
      <arglist>(SubdomainGraph_dh sg, FILE *fp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>svbrres.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/ifpack_threaded_hb/</path>
    <filename>svbrres_8c</filename>
    <member kind="define">
      <type>#define</type>
      <name>max</name>
      <anchorfile>svbrres_8c.html</anchorfile>
      <anchor>ac39d9cef6a5e030ba8d9e11121054268</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>svbrres</name>
      <anchorfile>svbrres_8c.html</anchorfile>
      <anchor>abcbd7952536b26f2a855faf9cf85d322</anchor>
      <arglist>(int m, int n, int m_blk, double *val, int *indx, int *bindx, int *rpntr, int *cpntr, int *bpntrb, int *bpntre, double *x, double *b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimeLog_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>TimeLog__dh_8c</filename>
    <includes id="TimeLog__dh_8h" name="TimeLog_dh.h" local="yes" imported="no">TimeLog_dh.h</includes>
    <includes id="Timer__dh_8h" name="Timer_dh.h" local="yes" imported="no">Timer_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <class kind="struct">_timeLog_dh</class>
    <member kind="define">
      <type>#define</type>
      <name>MAX_TIME_MARKS</name>
      <anchorfile>TimeLog__dh_8c.html</anchorfile>
      <anchor>a4a4e5147107c7795782b8d56ff615936</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_DESC_LENGTH</name>
      <anchorfile>TimeLog__dh_8c.html</anchorfile>
      <anchor>a2711b29ff61757961638bc0c721e2bc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>TimeLog__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>TimeLog__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>TimeLog__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>TimeLog__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>TimeLog__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>TimeLog__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>TimeLog__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TimeLog_dhCreate</name>
      <anchorfile>TimeLog__dh_8c.html</anchorfile>
      <anchor>a1d2f51132427d2035d43dc2a601dbf91</anchor>
      <arglist>(TimeLog_dh *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TimeLog_dhDestroy</name>
      <anchorfile>TimeLog__dh_8c.html</anchorfile>
      <anchor>a3c7501be5a92d78db86c9f9afdc0d7f7</anchor>
      <arglist>(TimeLog_dh t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TimeLog_dhStart</name>
      <anchorfile>TimeLog__dh_8c.html</anchorfile>
      <anchor>a1748d6a1caa7d8bc2c0ac125d0a475de</anchor>
      <arglist>(TimeLog_dh t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TimeLog_dhStop</name>
      <anchorfile>TimeLog__dh_8c.html</anchorfile>
      <anchor>a2c0c674f897b706c5fa9cdabecb4316a</anchor>
      <arglist>(TimeLog_dh t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TimeLog_dhMark</name>
      <anchorfile>TimeLog__dh_8c.html</anchorfile>
      <anchor>ab94b4bd6ddc40b780ffd11e3c52e4ac1</anchor>
      <arglist>(TimeLog_dh t, char *desc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TimeLog_dhReset</name>
      <anchorfile>TimeLog__dh_8c.html</anchorfile>
      <anchor>af43aecc05ef9d3748c67dae9126ba71a</anchor>
      <arglist>(TimeLog_dh t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TimeLog_dhPrint</name>
      <anchorfile>TimeLog__dh_8c.html</anchorfile>
      <anchor>a72d20585a02ec85f008ce744ac086ff4</anchor>
      <arglist>(TimeLog_dh t, FILE *fp, bool allPrint)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimeLog_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>TimeLog__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <member kind="function">
      <type>void</type>
      <name>TimeLog_dhCreate</name>
      <anchorfile>TimeLog__dh_8h.html</anchorfile>
      <anchor>a1d2f51132427d2035d43dc2a601dbf91</anchor>
      <arglist>(TimeLog_dh *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TimeLog_dhDestroy</name>
      <anchorfile>TimeLog__dh_8h.html</anchorfile>
      <anchor>a3c7501be5a92d78db86c9f9afdc0d7f7</anchor>
      <arglist>(TimeLog_dh t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TimeLog_dhStart</name>
      <anchorfile>TimeLog__dh_8h.html</anchorfile>
      <anchor>a1748d6a1caa7d8bc2c0ac125d0a475de</anchor>
      <arglist>(TimeLog_dh t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TimeLog_dhStop</name>
      <anchorfile>TimeLog__dh_8h.html</anchorfile>
      <anchor>a2c0c674f897b706c5fa9cdabecb4316a</anchor>
      <arglist>(TimeLog_dh t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TimeLog_dhReset</name>
      <anchorfile>TimeLog__dh_8h.html</anchorfile>
      <anchor>af43aecc05ef9d3748c67dae9126ba71a</anchor>
      <arglist>(TimeLog_dh t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TimeLog_dhMark</name>
      <anchorfile>TimeLog__dh_8h.html</anchorfile>
      <anchor>aec21d7d88c8aa45b6cdae05cabf4b1b9</anchor>
      <arglist>(TimeLog_dh t, char *description)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TimeLog_dhPrint</name>
      <anchorfile>TimeLog__dh_8h.html</anchorfile>
      <anchor>a72d20585a02ec85f008ce744ac086ff4</anchor>
      <arglist>(TimeLog_dh t, FILE *fp, bool allPrint)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Timer__dh_8c</filename>
    <includes id="Timer__dh_8h" name="Timer_dh.h" local="yes" imported="no">Timer_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Timer__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Timer__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Timer__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Timer__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Timer__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Timer__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Timer__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Timer_dhCreate</name>
      <anchorfile>Timer__dh_8c.html</anchorfile>
      <anchor>a221227064cae98c4ca9e13e8cd97f990</anchor>
      <arglist>(Timer_dh *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Timer_dhDestroy</name>
      <anchorfile>Timer__dh_8c.html</anchorfile>
      <anchor>ab03267fe9cbf4a8ae4525f17b548540e</anchor>
      <arglist>(Timer_dh t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Timer_dhStart</name>
      <anchorfile>Timer__dh_8c.html</anchorfile>
      <anchor>a921ad0f05ce33e908c6344c7a4332014</anchor>
      <arglist>(Timer_dh t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Timer_dhStop</name>
      <anchorfile>Timer__dh_8c.html</anchorfile>
      <anchor>a4c5564f4223474c46a2d04e86681885c</anchor>
      <arglist>(Timer_dh t)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Timer_dhReadWall</name>
      <anchorfile>Timer__dh_8c.html</anchorfile>
      <anchor>a77f42699ec5deeb673da2a34dde07d71</anchor>
      <arglist>(Timer_dh t)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Timer_dhReadCPU</name>
      <anchorfile>Timer__dh_8c.html</anchorfile>
      <anchor>a55d2cb30f61ee1410267442f931044ab</anchor>
      <arglist>(Timer_dh t)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Timer_dhReadUsage</name>
      <anchorfile>Timer__dh_8c.html</anchorfile>
      <anchor>aac80946eaa909c36d71bc2cb2864893c</anchor>
      <arglist>(Timer_dh t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Timer__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <class kind="struct">_timer_dh</class>
    <member kind="function">
      <type>void</type>
      <name>Timer_dhCreate</name>
      <anchorfile>Timer__dh_8h.html</anchorfile>
      <anchor>a221227064cae98c4ca9e13e8cd97f990</anchor>
      <arglist>(Timer_dh *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Timer_dhDestroy</name>
      <anchorfile>Timer__dh_8h.html</anchorfile>
      <anchor>ab03267fe9cbf4a8ae4525f17b548540e</anchor>
      <arglist>(Timer_dh t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Timer_dhStart</name>
      <anchorfile>Timer__dh_8h.html</anchorfile>
      <anchor>a921ad0f05ce33e908c6344c7a4332014</anchor>
      <arglist>(Timer_dh t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Timer_dhStop</name>
      <anchorfile>Timer__dh_8h.html</anchorfile>
      <anchor>a4c5564f4223474c46a2d04e86681885c</anchor>
      <arglist>(Timer_dh t)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Timer_dhReadCPU</name>
      <anchorfile>Timer__dh_8h.html</anchorfile>
      <anchor>a55d2cb30f61ee1410267442f931044ab</anchor>
      <arglist>(Timer_dh t)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Timer_dhReadWall</name>
      <anchorfile>Timer__dh_8h.html</anchorfile>
      <anchor>a77f42699ec5deeb673da2a34dde07d71</anchor>
      <arglist>(Timer_dh t)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Timer_dhReadUsage</name>
      <anchorfile>Timer__dh_8h.html</anchorfile>
      <anchor>aac80946eaa909c36d71bc2cb2864893c</anchor>
      <arglist>(Timer_dh t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tridi_main.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/test/TriDi/</path>
    <filename>tridi__main_8cpp</filename>
    <includes id="Ifpack__SerialTriDiMatrix_8h" name="Ifpack_SerialTriDiMatrix.h" local="yes" imported="no">Ifpack_SerialTriDiMatrix.h</includes>
    <includes id="Ifpack__SerialTriDiSolver_8h" name="Ifpack_SerialTriDiSolver.h" local="yes" imported="no">Ifpack_SerialTriDiSolver.h</includes>
    <member kind="function">
      <type>int</type>
      <name>check</name>
      <anchorfile>tridi__main_8cpp.html</anchorfile>
      <anchor>a4d45e89b3bae883f4e7bc4aec02c8cb4</anchor>
      <arglist>(Ifpack_SerialTriDiSolver &amp;solver, double *A1, int LDA, int N1, int NRHS1, double OneNorm1, double *B1, int LDB1, double *X1, int LDX1, bool Transpose, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Residual</name>
      <anchorfile>tridi__main_8cpp.html</anchorfile>
      <anchor>ada9f7c36b5c7409de33e1303af503d39</anchor>
      <arglist>(int N, int NRHS, double *A, int LDA, bool Transpose, double *X, int LDX, double *B, int LDB, double *resid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>matrixCpyCtr</name>
      <anchorfile>tridi__main_8cpp.html</anchorfile>
      <anchor>a3062be9f70d351a4e81d3db0c3292139</anchor>
      <arglist>(bool verbose, bool debug)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printHeading</name>
      <anchorfile>tridi__main_8cpp.html</anchorfile>
      <anchor>ac52c0170c02430a3e15cdda5622efec2</anchor>
      <arglist>(const char *heading)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printMat</name>
      <anchorfile>tridi__main_8cpp.html</anchorfile>
      <anchor>a9909394a17ffb9f361ed563915fb3998</anchor>
      <arglist>(const char *name, Ifpack_SerialTriDiMatrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printArray</name>
      <anchorfile>tridi__main_8cpp.html</anchorfile>
      <anchor>a5bac6eec865031fda6661d569821e3e2</anchor>
      <arglist>(double *array, int length)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tridi__main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vec_dh.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Vec__dh_8c</filename>
    <includes id="Vec__dh_8h" name="Vec_dh.h" local="yes" imported="no">Vec_dh.h</includes>
    <includes id="Mem__dh_8h" name="Mem_dh.h" local="yes" imported="no">Mem_dh.h</includes>
    <includes id="SubdomainGraph__dh_8h" name="SubdomainGraph_dh.h" local="yes" imported="no">SubdomainGraph_dh.h</includes>
    <includes id="io__dh_8h" name="io_dh.h" local="yes" imported="no">io_dh.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_JUNK</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>aa9e8f394f0dccc622ffb81270044952f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__FUNC__</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a4e14578a41d311e647f3aee2b628d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhCreate</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a105557f3bb460e34f9101c1988c2df0e</anchor>
      <arglist>(Vec_dh *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhDestroy</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a309d88e783e0c605fea3ac281823c5f2</anchor>
      <arglist>(Vec_dh v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhInit</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a88b2f7f5fca8c459966c0049d3d56d5f</anchor>
      <arglist>(Vec_dh v, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhCopy</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>ac5342c5d5955208179d7018e4e0fce52</anchor>
      <arglist>(Vec_dh x, Vec_dh y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhDuplicate</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a1936374e6f951f4ac12153f0231a9beb</anchor>
      <arglist>(Vec_dh v, Vec_dh *out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhSet</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a4d1ccaab6647acb168d312136e8bbb0e</anchor>
      <arglist>(Vec_dh v, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhSetRand</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>ac76169193ec2e4584c2826b663030748</anchor>
      <arglist>(Vec_dh v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhPrint</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a907a9e5c3ed00346ad0767edd4c89e3c</anchor>
      <arglist>(Vec_dh v, SubdomainGraph_dh sg, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhPrintBIN</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a9e0859af2a3cb8a1126f1670121327de</anchor>
      <arglist>(Vec_dh v, SubdomainGraph_dh sg, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhRead</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a97c4dc26ed715f5dbe05bf10eab96e8f</anchor>
      <arglist>(Vec_dh *vout, int ignore, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhReadBIN</name>
      <anchorfile>Vec__dh_8c.html</anchorfile>
      <anchor>a5f9c5765cfd339ee001a8ebe0aa6c8d1</anchor>
      <arglist>(Vec_dh *vout, char *filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vec_dh.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/src/euclid/</path>
    <filename>Vec__dh_8h</filename>
    <includes id="euclid__common_8h" name="euclid_common.h" local="yes" imported="no">euclid_common.h</includes>
    <class kind="struct">_vec_dh</class>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhCreate</name>
      <anchorfile>Vec__dh_8h.html</anchorfile>
      <anchor>a105557f3bb460e34f9101c1988c2df0e</anchor>
      <arglist>(Vec_dh *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhDestroy</name>
      <anchorfile>Vec__dh_8h.html</anchorfile>
      <anchor>a309d88e783e0c605fea3ac281823c5f2</anchor>
      <arglist>(Vec_dh v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhInit</name>
      <anchorfile>Vec__dh_8h.html</anchorfile>
      <anchor>a88b2f7f5fca8c459966c0049d3d56d5f</anchor>
      <arglist>(Vec_dh v, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhDuplicate</name>
      <anchorfile>Vec__dh_8h.html</anchorfile>
      <anchor>a1936374e6f951f4ac12153f0231a9beb</anchor>
      <arglist>(Vec_dh v, Vec_dh *out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhCopy</name>
      <anchorfile>Vec__dh_8h.html</anchorfile>
      <anchor>ac5342c5d5955208179d7018e4e0fce52</anchor>
      <arglist>(Vec_dh x, Vec_dh y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhSet</name>
      <anchorfile>Vec__dh_8h.html</anchorfile>
      <anchor>a4d1ccaab6647acb168d312136e8bbb0e</anchor>
      <arglist>(Vec_dh v, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhSetRand</name>
      <anchorfile>Vec__dh_8h.html</anchorfile>
      <anchor>ac76169193ec2e4584c2826b663030748</anchor>
      <arglist>(Vec_dh v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhRead</name>
      <anchorfile>Vec__dh_8h.html</anchorfile>
      <anchor>a3cecf59d6ab0c2c8e6022f54ac8b1278</anchor>
      <arglist>(Vec_dh *v, int ignore, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhReadBIN</name>
      <anchorfile>Vec__dh_8h.html</anchorfile>
      <anchor>a9a3377baff240197ba3ffad23860df63</anchor>
      <arglist>(Vec_dh *v, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhPrint</name>
      <anchorfile>Vec__dh_8h.html</anchorfile>
      <anchor>a907a9e5c3ed00346ad0767edd4c89e3c</anchor>
      <arglist>(Vec_dh v, SubdomainGraph_dh sg, char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vec_dhPrintBIN</name>
      <anchorfile>Vec__dh_8h.html</anchorfile>
      <anchor>a9e0859af2a3cb8a1126f1670121327de</anchor>
      <arglist>(Vec_dh v, SubdomainGraph_dh sg, char *filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>write_vec.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/ifpack/example/ifpack_threaded_hb/</path>
    <filename>write__vec_8c</filename>
    <member kind="function">
      <type>void</type>
      <name>write_vec</name>
      <anchorfile>write__vec_8c.html</anchorfile>
      <anchor>ace5141942cf305f814c7bac642ed128b</anchor>
      <arglist>(const char *filename, int n_equations, double *x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_extrows_dh</name>
    <filename>struct__extrows__dh.html</filename>
    <member kind="variable">
      <type>SubdomainGraph_dh</type>
      <name>sg</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>a7badc73aaf0a97840c34b317670ba4ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Factor_dh</type>
      <name>F</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>aba2db4fa896fdccea2a454ca4288a6ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPI_Status</type>
      <name>status</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>acae5b1a5b85f375fa7ec4de4947ce94a</anchor>
      <arglist>[MAX_MPI_TASKS]</arglist>
    </member>
    <member kind="variable">
      <type>MPI_Request</type>
      <name>req1</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>afa5ad9b87564af4f9aebf06338b053e8</anchor>
      <arglist>[MAX_MPI_TASKS]</arglist>
    </member>
    <member kind="variable">
      <type>MPI_Request</type>
      <name>req2</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>a30c8eaaeed3410a95278b382c6d2ec4d</anchor>
      <arglist>[MAX_MPI_TASKS]</arglist>
    </member>
    <member kind="variable">
      <type>MPI_Request</type>
      <name>req3</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>a8efd2f2ee86c1f12f0fa225dfe612d5b</anchor>
      <arglist>[MAX_MPI_TASKS]</arglist>
    </member>
    <member kind="variable">
      <type>MPI_Request</type>
      <name>req4</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>a44190d62c06497b70039eaa9ff19f82a</anchor>
      <arglist>[MAX_MPI_TASKS]</arglist>
    </member>
    <member kind="variable">
      <type>MPI_Request</type>
      <name>cval_req</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>a6d5182fc8c0afdf0aed7a26882152330</anchor>
      <arglist>[MAX_MPI_TASKS]</arglist>
    </member>
    <member kind="variable">
      <type>MPI_Request</type>
      <name>fill_req</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>a0cef3ceeb9624330b162e68d9d517449</anchor>
      <arglist>[MAX_MPI_TASKS]</arglist>
    </member>
    <member kind="variable">
      <type>MPI_Request</type>
      <name>aval_req</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>a95f9dc50543552c4ddb9831cb298022b</anchor>
      <arglist>[MAX_MPI_TASKS]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>rcv_row_counts</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>a7ad79d78f891bff0b2f39c996b9eb076</anchor>
      <arglist>[MAX_MPI_TASKS]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>rcv_nz_counts</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>a82e54feabe6fa0206d379f95530e33ea</anchor>
      <arglist>[MAX_MPI_TASKS]</arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>rcv_row_lengths</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>a403cd86444706a1d5d49f95672ff2bea</anchor>
      <arglist>[MAX_MPI_TASKS]</arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>rcv_row_numbers</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>a14fcd5faf780a51c3da91bfce1bd5de4</anchor>
      <arglist>[MAX_MPI_TASKS]</arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>cvalExt</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>abea70e54588c92ceedde536c4c2a038b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>fillExt</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>af29b1982ff0a919ccf7c436aceb9f181</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>REAL_DH *</type>
      <name>avalExt</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>a310e6809b31f5bf00a35cce05ef3a120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Hash_dh</type>
      <name>rowLookup</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>a4a41f92c63973b2b9eb507942f49cdd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>my_row_counts</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>ac9d4460334dad0648983fccb5b0659d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>my_row_numbers</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>a45c229dc7c7965763d59c73fce0da046</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nzSend</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>ab4769a3b8953755c1df1f20d0a323266</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>cvalSend</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>ad873083c3aba7910a2f3b69bb7a6dd46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>fillSend</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>aa672a39077c7ec83f7d0c3b837f15c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>REAL_DH *</type>
      <name>avalSend</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>a4d26f75feaff072a84fa655764bcbcf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>struct__extrows__dh.html</anchorfile>
      <anchor>a1d3599f6475c1333834c599faa9940ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_factor_dh</name>
    <filename>struct__factor__dh.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>m</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a6248091e1d277716540f2644fe3cea22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a85b5f30c82be18878035f910d6b335c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>id</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a73f6c5074c135c5f66ea4e812b7f0f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>beg_row</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a2949eb7dfdeea1f400c1e2c0085cac68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>first_bdry</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>ad89a643ce8157ddc48c97d1adc8966db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bdry_count</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>adaa25e89caa335afc3f92090094708ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>blockJacobi</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>ab8da640c6938f317baf2b7ceb413b047</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>rp</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>ac01177d7950ff12b16f89d683c751afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>cval</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a846c9dbc066fa6c357253962dda85fa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>REAL_DH *</type>
      <name>aval</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>ae4196e03d2197dba74b6b9da56a5dfce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>fill</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a4e36cdddb7917b6c4813d28d8f53c615</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>diag</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a854a663937979b8d6ece52d63e08a2c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>alloc</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a1a9d20a0d006c20307ca6790ba5ffa1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_recvLo</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a11ee9f11ea7e41d287617cf8eae15784</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_recvHi</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a14b5829c13db21aede776113a5ed9f29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_sendLo</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>ac05fe87bce8c04a327e7e1172fb1deae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_sendHi</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a3fcc5e048ab27678a959ac0483d0013e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>work_y_lo</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a43aeada35d17900bbfd9ae08f4b95e9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>work_x_hi</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a7196e4c4819ceba6e7acf5933aa4591e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>sendbufLo</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a156eec734dea93a1cf2da2b8c50e2341</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>sendbufHi</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>ae7be9054dbafbfaacca10b96ca7c0b7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>sendindLo</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a3f24a450500578d5c8368ce3c83d9c00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>sendindHi</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>aeb7d078edd244221a2cb8e8fe6777cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sendlenLo</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>ad5178b5c98e56ad6c8b1d41c73b3ecea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sendlenHi</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>aa277cc92e3590757d4c8d32768922a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>solveIsSetup</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a4911e5686043d4227dacf1e14a944a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Numbering_dh</type>
      <name>numbSolve</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a90cbc29a0a3ac5008ecb9ae234f45562</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPI_Request</type>
      <name>recv_reqLo</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>ae5c769a8bcb9cde28fadd6173b60edde</anchor>
      <arglist>[MAX_MPI_TASKS]</arglist>
    </member>
    <member kind="variable">
      <type>MPI_Request</type>
      <name>recv_reqHi</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>ae07e7afc83b5ac8e40b026e5f20998db</anchor>
      <arglist>[MAX_MPI_TASKS]</arglist>
    </member>
    <member kind="variable">
      <type>MPI_Request</type>
      <name>send_reqLo</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a68cc886ded152137f686bc8e0d47d57e</anchor>
      <arglist>[MAX_MPI_TASKS]</arglist>
    </member>
    <member kind="variable">
      <type>MPI_Request</type>
      <name>send_reqHi</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>abe92363958db60d1031396f45656cf84</anchor>
      <arglist>[MAX_MPI_TASKS]</arglist>
    </member>
    <member kind="variable">
      <type>MPI_Request</type>
      <name>requests</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a4a91071fa526c02f4d999d9703aeec87</anchor>
      <arglist>[MAX_MPI_TASKS]</arglist>
    </member>
    <member kind="variable">
      <type>MPI_Status</type>
      <name>status</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>a5db99030d2f6c3a424ef61838e31f84e</anchor>
      <arglist>[MAX_MPI_TASKS]</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>struct__factor__dh.html</anchorfile>
      <anchor>afc04acc86693f8dc44ed5245c188271c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_hash_dh</name>
    <filename>struct__hash__dh.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>size</name>
      <anchorfile>struct__hash__dh.html</anchorfile>
      <anchor>a2aadf82a9c3a316686e80d4420fbc095</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>count</name>
      <anchorfile>struct__hash__dh.html</anchorfile>
      <anchor>a14008beeec8ebb9d346c2cf2107104ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>curMark</name>
      <anchorfile>struct__hash__dh.html</anchorfile>
      <anchor>a0d112bf3e0c949ae348d4b4809419f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HashRecord *</type>
      <name>data</name>
      <anchorfile>struct__hash__dh.html</anchorfile>
      <anchor>a76a2d149cb8ee4539a5347278347057e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_hash_i_dh</name>
    <filename>struct__hash__i__dh.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>size</name>
      <anchorfile>struct__hash__i__dh.html</anchorfile>
      <anchor>aaa14ce0e67ce550665d2a2596b0b360d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>count</name>
      <anchorfile>struct__hash__i__dh.html</anchorfile>
      <anchor>a9108e602d3b19e2e9f0d4ca37b6cae4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>curMark</name>
      <anchorfile>struct__hash__i__dh.html</anchorfile>
      <anchor>a86fda00b094838c94aaaf457b601afa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Hash_i_Record *</type>
      <name>data</name>
      <anchorfile>struct__hash__i__dh.html</anchorfile>
      <anchor>aced8dacd872a7f64f8f683e64e3d5ce4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_hash_i_node_private</name>
    <filename>struct__hash__i__node__private.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>key</name>
      <anchorfile>struct__hash__i__node__private.html</anchorfile>
      <anchor>a904b0bd83e2ffe76258873f94217041c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mark</name>
      <anchorfile>struct__hash__i__node__private.html</anchorfile>
      <anchor>aae5b487fbcc4f9f4336d808bf7d20774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>data</name>
      <anchorfile>struct__hash__i__node__private.html</anchorfile>
      <anchor>a949021ea56cab74c2dcdfdcef8a23861</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_hash_node</name>
    <filename>struct__hash__node.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>iData</name>
      <anchorfile>struct__hash__node.html</anchorfile>
      <anchor>af436abb497c351ec0fc8992aeecbd406</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>fData</name>
      <anchorfile>struct__hash__node.html</anchorfile>
      <anchor>a67e96bde0572345661dad26075a8a5f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>iDataPtr</name>
      <anchorfile>struct__hash__node.html</anchorfile>
      <anchor>a8e3e96eacea33e1d2386645eef73281e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>iDataPtr2</name>
      <anchorfile>struct__hash__node.html</anchorfile>
      <anchor>aac36f0b957d4fa41962ad402ff3bb85d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>fDataPtr</name>
      <anchorfile>struct__hash__node.html</anchorfile>
      <anchor>a50271e82df34087f11bc966219a1518c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_hash_node_private</name>
    <filename>struct__hash__node__private.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>key</name>
      <anchorfile>struct__hash__node__private.html</anchorfile>
      <anchor>a38220f8125008580bd3791c8f5235545</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mark</name>
      <anchorfile>struct__hash__node__private.html</anchorfile>
      <anchor>a0da97a716242f3eb522543587c628154</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HashData</type>
      <name>data</name>
      <anchorfile>struct__hash__node__private.html</anchorfile>
      <anchor>aec471de044a0206ca12ab9d9aeead3a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_mat_dh</name>
    <filename>struct__mat__dh.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>m</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>a3a2c808fe828fbe646dbc9b2e4cce65c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>a52988561fa0a811cd4c14798269761f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>beg_row</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>a7f33d8780e6c42ffb6e53d67ef00682d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bs</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>aafde175dd25bf06567dc262ba05e9e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>rp</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>a52cc33fea4b3b20590fa0ff8bd8a890c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>len</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>ae79739c335ad18cfb4788bd2c52aa69b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>cval</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>a08a684ed077eabc278df94cd70c9e716</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>fill</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>adbbd273550474cca6333302049616049</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>diag</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>a7924fcd6a773181f2705af81a3e17f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>aval</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>ae42d0ed1a62baa46ef18e513d2d914a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>owner</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>a7331fe559260d8ffdf700d2f2575ab89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>len_private</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>adeab9ce9de05399d793157c037d2f716</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>rowCheckedOut</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>a9a2a7b0886ca52ab58f11f8c3334c3b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>cval_private</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>a2e1d47091787aa7d95c42e5965ce1670</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>aval_private</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>a4fd00b205c7f22f13b012b884facd751</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>row_perm</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>ae076fda9e1737ba744482ed02e79f5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>time</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>a52c6dbd1b78f2a63c261d22f2919ba30</anchor>
      <arglist>[MAT_DH_BINS]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>time_max</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>aa1b81a0619879e9e341a1d04bedc0d80</anchor>
      <arglist>[MAT_DH_BINS]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>time_min</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>ade217a27582443dd0261a71619400743</anchor>
      <arglist>[MAT_DH_BINS]</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>matvec_timing</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>a0d685d779dd11b6ca6c9441c3c507513</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_recv</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>ae1224150446cad0391f232277958cf64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_send</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>a9e029a20bd359b9d6a5c7c7aad77873d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPI_Request *</type>
      <name>recv_req</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>a18f3ddf6c791ace14b506b972929ecba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPI_Request *</type>
      <name>send_req</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>aba42ab010cd3b7f758ffe251f8214910</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>recvbuf</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>a1c8a9f6821288be0f3fe73b59ee74013</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>sendbuf</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>afdb2db7e1a4bc7defdd25538d00db603</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>sendind</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>ad826ac15f5f77086df19249b11c8e249</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sendlen</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>a06ec44b422460bafa748d8b81045a156</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>recvlen</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>aec1b13e03d7dc92803f42899bac38922</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>matvecIsSetup</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>aee32d0062735ea6b3774e59aa216e04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Numbering_dh</type>
      <name>numb</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>a0ff92e9a2775c5be75cf747ce17421c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPI_Status *</type>
      <name>status</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>ab1aa00858d833726600c9fe375c9ab18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>struct__mat__dh.html</anchorfile>
      <anchor>aa41e677ad5bce028ef363614e2b11871</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_matgenfd</name>
    <filename>struct__matgenfd.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>allocateMem</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>aa8c7df34697a3c1d54c14901931984f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>px</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a27d7f46688ff94b6772f035999c4438b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>py</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>ab05bde013cb76f533b0c8b16ac517f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>pz</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>ad4fecc464b4feee3310469618298583c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>threeD</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a78119489dd01de830617e65ec4999d9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a16ef9366a64acbc8fa4df3909481bd77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>cc</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a206de85520a7decd52246dfa06fad0f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>hh</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a5f86a6ce07f012349d8d446b7d3e6c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>id</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a7d90752953016c81b1565ee31c406343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>np</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a7f7cb6e337c8fa727031bdb4e677ecca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>stencil</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a256b8d6be1aa92781465ca590c2e3585</anchor>
      <arglist>[8]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>a</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>aec4ad2bd785c4ee1e2b04030f642108e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>b</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>aec8deccb24738b85971316b9d6ef4276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>c</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>aaaf9b74d10b51313e81568d6413900ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>d</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a5331619f8bb4ea77b7cff42cf95bf6f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>e</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>ace95d034ee5c980004feae7cb404085e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>f</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a439f3ee31ed7457e4492a96494ff9f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>g</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a3ca1a1c0a312a0b01fe5d31720cecd6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>h</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a4bb70849d43e456f669c6e102940dce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>first</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>af1b5cc1209d3ff7547118bdb10225a7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a218261566ff6e71ee56ae64306759742</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>bcX1</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>ae2b70d3a22f655ed442294f81adabcc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>bcX2</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a95be69cfb87525fa505ddf4987b6eae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>bcY1</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a57815e06c9b7f3144af76446100e2fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>bcY2</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>afe21a7c9e618c216798ff95d71f940b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>bcZ1</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a5b0ceb81ae1532995f64b05a9ddfe848</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>bcZ2</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>af154afea93e44c3a733307da71c8367a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double(*</type>
      <name>A</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a0f000de4d708ede037bbec086faae1cd</anchor>
      <arglist>)(double coeff, double x, double y, double z)</arglist>
    </member>
    <member kind="variable">
      <type>double(*</type>
      <name>B</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a6db3c847e057a54c46292a8fa3c3320a</anchor>
      <arglist>)(double coeff, double x, double y, double z)</arglist>
    </member>
    <member kind="variable">
      <type>double(*</type>
      <name>C</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>abb4158e79edc7a30b5f1c104d8d9de61</anchor>
      <arglist>)(double coeff, double x, double y, double z)</arglist>
    </member>
    <member kind="variable">
      <type>double(*</type>
      <name>D</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>ab33e2631f755088b5ad6ec167999332e</anchor>
      <arglist>)(double coeff, double x, double y, double z)</arglist>
    </member>
    <member kind="variable">
      <type>double(*</type>
      <name>E</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a63540906b71ac07f36804ffc89703366</anchor>
      <arglist>)(double coeff, double x, double y, double z)</arglist>
    </member>
    <member kind="variable">
      <type>double(*</type>
      <name>F</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a8a498b1886fc937010496f6e465b1c45</anchor>
      <arglist>)(double coeff, double x, double y, double z)</arglist>
    </member>
    <member kind="variable">
      <type>double(*</type>
      <name>G</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a43848a8198a88b924052e92642d5adcb</anchor>
      <arglist>)(double coeff, double x, double y, double z)</arglist>
    </member>
    <member kind="variable">
      <type>double(*</type>
      <name>H</name>
      <anchorfile>struct__matgenfd.html</anchorfile>
      <anchor>a5922df1c8c295ca629846d16318a1f71</anchor>
      <arglist>)(double coeff, double x, double y, double z)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_mem_dh</name>
    <filename>struct__mem__dh.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>maxMem</name>
      <anchorfile>struct__mem__dh.html</anchorfile>
      <anchor>aa67c90f7cd2de2610eef3ef3da283a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>curMem</name>
      <anchorfile>struct__mem__dh.html</anchorfile>
      <anchor>a7aaf1fbc255473efac5b3f2f6ec24b70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>totalMem</name>
      <anchorfile>struct__mem__dh.html</anchorfile>
      <anchor>ad37b6d150be9984ebf3df6e8da557835</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mallocCount</name>
      <anchorfile>struct__mem__dh.html</anchorfile>
      <anchor>aeea8feec64d6320af11d1cc399a475a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>freeCount</name>
      <anchorfile>struct__mem__dh.html</anchorfile>
      <anchor>a5c94d9e86cc2f0fecfd1ace0707fba11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_mpi_interface_dh</name>
    <filename>struct__mpi__interface__dh.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>isSetup</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>ad6801f0c805ab7ee1566ed6af7662fe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rho_init</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a4c47cc1a49639cda98021636aaeebd30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rho_final</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a7dcbc5ee474f6efa417e6a1f40b0a261</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a202aca5da63df085d45d85082ef436cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a20569ee583c6a8e6efd62a60440715bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>rhs</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a89dbba6537bd5f6137ec02fdc7cffa9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>A</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>af6b1fcf62c411f9afa71fc019571a2a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Factor_dh</type>
      <name>F</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a121e980af7693797403984adc03d0396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SubdomainGraph_dh</type>
      <name>sg</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a233e0c4c69a21be42ba13b860af939f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>REAL_DH *</type>
      <name>scale</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a6c3892b9dc37d33068df86420ca92ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isScaled</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a4db31d5a163e23514326597315acbd83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>work</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a03ef2afbbafc1e695fa15f09a1e571d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>work2</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a4b462499969480249b7d2acb4d07433a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>from</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a81c450418915003dacec6e29e0a1cfe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>to</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a499133066c4a5a702033d57a973ccf8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>algo_par</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a4c052775eccdad533dc74d4dcf81c482</anchor>
      <arglist>[MAX_OPT_LEN]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>algo_ilu</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a9cd4860d0538588a0b6c949e7bb7cea7</anchor>
      <arglist>[MAX_OPT_LEN]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>level</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>ab616f5504d8356d500a50a08fd25e0f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>droptol</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a20659c3cea9609a309e569c5a33f33dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sparseTolA</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>aa221ce98a1e9ead582b316e40f05ab6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sparseTolF</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a3c11629e2fe8f2e2dba58db6468cf8db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pivotMin</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>afd726beae76ffbbe0968237c11175118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pivotFix</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a5adbf6fcd898bb38d65de46041208cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxVal</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a48f9b10ea2f6facc60dda71cdd59d934</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SortedList_dh</type>
      <name>slist</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a335de2406df617096bc5cace3bdf8dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ExternalRows_dh</type>
      <name>extRows</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>af8514bbd6d533e929de32e28a16825ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>krylovMethod</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a43906eb62d73f71fa223bd445b785000</anchor>
      <arglist>[MAX_OPT_LEN]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>maxIts</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a28097bca41a5ae5afd959bcdf754092c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rtol</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a3aa057b05720f639efba180c9ce291e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>atol</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a13c349fb74306843bc4b41c32eec5df9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>its</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>aa943d6b488beefb42d12b800bf2004e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>itsTotal</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a12b5af5c7b7bd82fb311be4540a34be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>setupCount</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>af3e8e2013a96543426f3ff0c4b8cfb74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>logging</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a188e6da8a3267ad8aade5c029942b150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>timing</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a519bcdb402292386f20f669547149831</anchor>
      <arglist>[TIMING_BINS]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>stats</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>ac73f014a6d4fcf1c4cbf8cee3823092d</anchor>
      <arglist>[STATS_BINS]</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>timingsWereReduced</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a04d0b50b2dbb38616f290afcfd5e709f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>printStats</name>
      <anchorfile>struct__mpi__interface__dh.html</anchorfile>
      <anchor>a02054c9f37fbef82799922910ce423f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_numbering_dh</name>
    <filename>struct__numbering__dh.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>size</name>
      <anchorfile>struct__numbering__dh.html</anchorfile>
      <anchor>ac95cc6a2d377d898a896ece036b3209d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>first</name>
      <anchorfile>struct__numbering__dh.html</anchorfile>
      <anchor>a5e12d57f3a9208f1193c819cc8e5f1ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m</name>
      <anchorfile>struct__numbering__dh.html</anchorfile>
      <anchor>a5c35abc68070f27ba73108f9ce0f8025</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>idx_ext</name>
      <anchorfile>struct__numbering__dh.html</anchorfile>
      <anchor>a900b88b3d152215ae6e3950fdd2cd1ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>idx_extLo</name>
      <anchorfile>struct__numbering__dh.html</anchorfile>
      <anchor>a8ef7df2ffcc71ac709cf91573e7b426e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>idx_extHi</name>
      <anchorfile>struct__numbering__dh.html</anchorfile>
      <anchor>a9f21f031d3d42766809fea9bccea281a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_ext</name>
      <anchorfile>struct__numbering__dh.html</anchorfile>
      <anchor>a35eb4c2784c7fb5503952357aa3ca79d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_extLo</name>
      <anchorfile>struct__numbering__dh.html</anchorfile>
      <anchor>a674ac13968aa68ff5673d41e385ae5d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_extHi</name>
      <anchorfile>struct__numbering__dh.html</anchorfile>
      <anchor>a3617d724143a7e0fd4785d0f76c5ceff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Hash_i_dh</type>
      <name>global_to_local</name>
      <anchorfile>struct__numbering__dh.html</anchorfile>
      <anchor>a4408694b1bf89fb398113784a6f9a1e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>struct__numbering__dh.html</anchorfile>
      <anchor>a0e82861d8aaf3f63545592998420a583</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_optionsNode</name>
    <filename>struct__optionsNode.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>struct__optionsNode.html</anchorfile>
      <anchor>a370ca96dabae904dc95a18a0e130b595</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>value</name>
      <anchorfile>struct__optionsNode.html</anchorfile>
      <anchor>a3dd088d6d5e202593f77da3d9ca4dd10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OptionsNode *</type>
      <name>next</name>
      <anchorfile>struct__optionsNode.html</anchorfile>
      <anchor>a7a33a98d9fbb644a3f759d650042a15d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_parser_dh</name>
    <filename>struct__parser__dh.html</filename>
    <member kind="variable">
      <type>OptionsNode *</type>
      <name>head</name>
      <anchorfile>struct__parser__dh.html</anchorfile>
      <anchor>a98b163bafe1122865c86364a42a78f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OptionsNode *</type>
      <name>tail</name>
      <anchorfile>struct__parser__dh.html</anchorfile>
      <anchor>a6f6fc0c65b2ffe5a39896b9a06f9c742</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_sortedList_dh</name>
    <filename>struct__sortedList__dh.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>m</name>
      <anchorfile>struct__sortedList__dh.html</anchorfile>
      <anchor>a257f3a73a7478a9b0467344df1d05aee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>row</name>
      <anchorfile>struct__sortedList__dh.html</anchorfile>
      <anchor>a026b25158f89467fa11533afbc2ecf72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>beg_row</name>
      <anchorfile>struct__sortedList__dh.html</anchorfile>
      <anchor>aec89198897e12c3b4203fed5e8c73b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>beg_rowP</name>
      <anchorfile>struct__sortedList__dh.html</anchorfile>
      <anchor>a02b59803b71dea2d735f50ca1274d98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>count</name>
      <anchorfile>struct__sortedList__dh.html</anchorfile>
      <anchor>a9153c61e14d27e7f1629bdd16dfe0f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>countMax</name>
      <anchorfile>struct__sortedList__dh.html</anchorfile>
      <anchor>a94738b03db08a93139ea4ac1395af36c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>o2n_local</name>
      <anchorfile>struct__sortedList__dh.html</anchorfile>
      <anchor>af656abc486b8b9a456cee013bf908cfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Hash_i_dh</type>
      <name>o2n_external</name>
      <anchorfile>struct__sortedList__dh.html</anchorfile>
      <anchor>aa5d711f2131ac498b4dee86616a7ae55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SRecord *</type>
      <name>list</name>
      <anchorfile>struct__sortedList__dh.html</anchorfile>
      <anchor>a1ba543204856140bf0b328ce199a52a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>alloc</name>
      <anchorfile>struct__sortedList__dh.html</anchorfile>
      <anchor>a9aab449ffbb6c09889361132cd676b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>getLower</name>
      <anchorfile>struct__sortedList__dh.html</anchorfile>
      <anchor>a14ede73884294aa6250b9e6ef7780894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>get</name>
      <anchorfile>struct__sortedList__dh.html</anchorfile>
      <anchor>adfc4b1ea07113045887f1bb9b70bb176</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>struct__sortedList__dh.html</anchorfile>
      <anchor>a6ef1cd2fc75c5e5543ec52b90a9804e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_sortedset_dh</name>
    <filename>struct__sortedset__dh.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>n</name>
      <anchorfile>struct__sortedset__dh.html</anchorfile>
      <anchor>a53808ad680ab3813f2a35df3177c0f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>list</name>
      <anchorfile>struct__sortedset__dh.html</anchorfile>
      <anchor>a66ac0a5e35adf2987908fb93d21d4ce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>count</name>
      <anchorfile>struct__sortedset__dh.html</anchorfile>
      <anchor>a6fb54341be95bcdc1b59a1d2b5000580</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_srecord</name>
    <filename>struct__srecord.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>col</name>
      <anchorfile>struct__srecord.html</anchorfile>
      <anchor>abe2df068ef73d1b1bbeac80632c3d075</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>level</name>
      <anchorfile>struct__srecord.html</anchorfile>
      <anchor>a2e6e217b4288ea67f2cab71e95f60150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>val</name>
      <anchorfile>struct__srecord.html</anchorfile>
      <anchor>a35910ced58c0768b155fe00c509a4c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>next</name>
      <anchorfile>struct__srecord.html</anchorfile>
      <anchor>a9372a50d09419946ae46e77992cf15af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_subdomain_dh</name>
    <filename>struct__subdomain__dh.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>blocks</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>a16863369ad0bf1e15b6296146300fa2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>ptrs</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>a25ea842328cb59790f3cffd7087f9f3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>adj</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>a2e53e551cee39b3d9eaea60a2995ec41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>o2n_sub</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>aa6e5e3de2fbb425b78bb8b455242a570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>n2o_sub</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>a23a9da113a1593ec2e2294b520b73e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>colors</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>a51aa0b5a0a211c349788350ece4e8862</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>doNotColor</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>a80b3e38ed8c6859eb2f7d6ee3b8ef728</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>colorVec</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>a34df2a1e4f00e09908c04f2326d77986</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>beg_row</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>a4eb7cc410b964de911f01d59603ebbfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>beg_rowP</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>a60caa9e1d635efb6a6b8a405ca56bb3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>row_count</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>af5a84f52c141d95811d0cd3301938612</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>bdry_count</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>aaf4ab158a2850e1794dd087fc9c02908</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>loNabors</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>a912326ed25bac05c21c451ed2e11ac40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>loCount</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>af72381ca243bac0b66ab117ef1d06e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>hiNabors</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>a4d3ee2cb00ecee60664e3c12677397af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>hiCount</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>a263dc1c519ec4f01f816321997a43d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>allNabors</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>a70f8503f40861b0a53a91fc6b853aac3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>allCount</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>a9f90c1504b5b6cda06a604eefbd1ad31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>ad28a375957a11709939cb3f9d59ec7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>n2o_row</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>a34307224a7b30492efc76169a7d6b1ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>o2n_col</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>ab10f8f48693d2f3d25a3b6c7197abe39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Hash_i_dh</type>
      <name>o2n_ext</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>a5325ceef3703c2b08e2cdf49fa878f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Hash_i_dh</type>
      <name>n2o_ext</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>a1026d1227c6cb6199859268a743c63f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>timing</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>a9d9e8aec866bfa486c7f952ee895632a</anchor>
      <arglist>[TIMING_BINS_SG]</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>struct__subdomain__dh.html</anchorfile>
      <anchor>ae041d4c60f375e18e17f3f85fb4e5014</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_timeLog_dh</name>
    <filename>struct__timeLog__dh.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>first</name>
      <anchorfile>struct__timeLog__dh.html</anchorfile>
      <anchor>a7fe286abe9e63cf599685c3dff2d5f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last</name>
      <anchorfile>struct__timeLog__dh.html</anchorfile>
      <anchor>a9a9803d2330079b485f6623ddce78aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>time</name>
      <anchorfile>struct__timeLog__dh.html</anchorfile>
      <anchor>a2189fd04be1b4bf96114fd33105251bc</anchor>
      <arglist>[MAX_TIME_MARKS]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>desc</name>
      <anchorfile>struct__timeLog__dh.html</anchorfile>
      <anchor>ab325fa94e9a8b1d30b885826f3937283</anchor>
      <arglist>[MAX_TIME_MARKS][MAX_DESC_LENGTH]</arglist>
    </member>
    <member kind="variable">
      <type>Timer_dh</type>
      <name>timer</name>
      <anchorfile>struct__timeLog__dh.html</anchorfile>
      <anchor>a75583c25562c4d06a50776cfb22efd5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_timer_dh</name>
    <filename>struct__timer__dh.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>isRunning</name>
      <anchorfile>struct__timer__dh.html</anchorfile>
      <anchor>ad5b2f663cbb3c3cd3661222c32e4fc38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long int</type>
      <name>sc_clk_tck</name>
      <anchorfile>struct__timer__dh.html</anchorfile>
      <anchor>ad6698b558bdfb8ea87aaae20751c122a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>begin_wall</name>
      <anchorfile>struct__timer__dh.html</anchorfile>
      <anchor>aa3b911cc3f2bf10bdd2ba5e7730aa102</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>end_wall</name>
      <anchorfile>struct__timer__dh.html</anchorfile>
      <anchor>aa78dba6b36fb43a0c34b2c33f16ff2bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_vec_dh</name>
    <filename>struct__vec__dh.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>n</name>
      <anchorfile>struct__vec__dh.html</anchorfile>
      <anchor>a22bb738d0a0b3da54dc19117ba0cab3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>vals</name>
      <anchorfile>struct__vec__dh.html</anchorfile>
      <anchor>a64738180d76f2e9b91e24c2e2c1c11ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AZ_IFPACK_STRUCT</name>
    <filename>structAZ__IFPACK__STRUCT.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>nr</name>
      <anchorfile>structAZ__IFPACK__STRUCT.html</anchorfile>
      <anchor>a8b3d9f3f164ba92b9a2323a00cdfa251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nc</name>
      <anchorfile>structAZ__IFPACK__STRUCT.html</anchorfile>
      <anchor>a23fca37f26316d0692071ef22453cbcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>precon</name>
      <anchorfile>structAZ__IFPACK__STRUCT.html</anchorfile>
      <anchor>ad35fb69c30d27cbf6c6a26cfa840c5c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>bmat</name>
      <anchorfile>structAZ__IFPACK__STRUCT.html</anchorfile>
      <anchor>a2397c78ce90838f67e2fe1ff7f308055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>input_vector</name>
      <anchorfile>structAZ__IFPACK__STRUCT.html</anchorfile>
      <anchor>ae3f2370175fbd915867d9a37482c75a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>user_precon</name>
      <anchorfile>structAZ__IFPACK__STRUCT.html</anchorfile>
      <anchor>af68e0c2588f492edc0712c94281b2cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>user_aux_ptr</name>
      <anchorfile>structAZ__IFPACK__STRUCT.html</anchorfile>
      <anchor>a894c63dcabd80b48d6e1c11dcd31a086</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cs_symbolic</name>
    <filename>structcs__symbolic.html</filename>
    <member kind="variable">
      <type>int *</type>
      <name>pinv</name>
      <anchorfile>structcs__symbolic.html</anchorfile>
      <anchor>a4724390fc87ae2fb8f82a93ce1ddf55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>q</name>
      <anchorfile>structcs__symbolic.html</anchorfile>
      <anchor>aecc57aadbdfe0598bf00fb3648fcf098</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>parent</name>
      <anchorfile>structcs__symbolic.html</anchorfile>
      <anchor>aefc6fc6ae59f5c51b225c93a549b6838</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>cp</name>
      <anchorfile>structcs__symbolic.html</anchorfile>
      <anchor>a85eed6fd134282ada142ebaae0fe2403</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>leftmost</name>
      <anchorfile>structcs__symbolic.html</anchorfile>
      <anchor>a232f0ac2071e80cf1feed5f63b7d02b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m2</name>
      <anchorfile>structcs__symbolic.html</anchorfile>
      <anchor>a6e76dde6232a98e3b5d96d942c08b12e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>lnz</name>
      <anchorfile>structcs__symbolic.html</anchorfile>
      <anchor>a4f723af5f9ae0047f678a82a146d17b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>unz</name>
      <anchorfile>structcs__symbolic.html</anchorfile>
      <anchor>a75ba99f8c206d85c4936e11053e7f5e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>csr_dmperm_results</name>
    <filename>structcsr__dmperm__results.html</filename>
    <member kind="variable">
      <type>int *</type>
      <name>p</name>
      <anchorfile>structcsr__dmperm__results.html</anchorfile>
      <anchor>ac0dc1aa4d8fb2c5437f90cbcf99d61ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>q</name>
      <anchorfile>structcsr__dmperm__results.html</anchorfile>
      <anchor>a7913d6cbb34942ef558b1f3071b9abd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>r</name>
      <anchorfile>structcsr__dmperm__results.html</anchorfile>
      <anchor>aaab33b6c3c41eb96a4e2b5e479442373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>s</name>
      <anchorfile>structcsr__dmperm__results.html</anchorfile>
      <anchor>adac08fda4140af00dbf581959ee00e41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nb</name>
      <anchorfile>structcsr__dmperm__results.html</anchorfile>
      <anchor>af3b11341b2d8a48f21d739287b695f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>rr</name>
      <anchorfile>structcsr__dmperm__results.html</anchorfile>
      <anchor>a857e7c55e26859434810c5c9ab0dd0d1</anchor>
      <arglist>[5]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>cc</name>
      <anchorfile>structcsr__dmperm__results.html</anchorfile>
      <anchor>ad73d7f591305f16e4a8ebe926f158aa9</anchor>
      <arglist>[5]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>csr_numeric</name>
    <filename>structcsr__numeric.html</filename>
    <member kind="variable">
      <type>csr *</type>
      <name>L</name>
      <anchorfile>structcsr__numeric.html</anchorfile>
      <anchor>a89272c90349f1a653056576f46a2cd6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>csr *</type>
      <name>U</name>
      <anchorfile>structcsr__numeric.html</anchorfile>
      <anchor>ac0549f54752bd33b0a12637812890077</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>pinv</name>
      <anchorfile>structcsr__numeric.html</anchorfile>
      <anchor>a7a39e0d249bbc75412b19a481f38d6b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>perm</name>
      <anchorfile>structcsr__numeric.html</anchorfile>
      <anchor>a0fdb6bc2db359ff314282c7af4f88b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>B</name>
      <anchorfile>structcsr__numeric.html</anchorfile>
      <anchor>ac1c4f556705d643fd39bd5da88993b71</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack</name>
    <filename>classIfpack.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>parameter</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>absolute_threshold</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04ca1cb1205979d3105eb54d4b854577599c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>relative_threshold</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04ca28ec7ebacbe6b7f1518e4161f412ea82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>drop_tolerance</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04ca373f58648349a1f5389d065cb496a905</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fill_tolerance</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04ca4574d676f3f19dd8c1ba9f2b52099497</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>relax_value</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04ca002bb939c397f8d7c2b7cbeca790c470</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>level_fill</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04caadac51ae51a45aa5b2680ef9aca79e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>level_overlap</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04ca1d48c6870e8911a925fb8ec8b1910a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>num_steps</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04caf3a24e08d7e2cdd345aee22859b398be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>use_reciprocal</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04cacca6be69ea8b8cd24a1b55dacfdd0c6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>overlap_mode</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04ca088f8293294381e7e9ec1f77866153d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EPrecType</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_RELAXATION</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba169677b57a11f24a634205167bf08f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_RELAXATION_STAND_ALONE</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2abae3b63fbbbb132f4b3e760cdca58277e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BLOCK_RELAXATION</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2abae2626763316ac02d1c2293bf5d4483e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BLOCK_RELAXATION_STAND_ALONE</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba4e1d502bedaa154205f68ad20c9eef43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BLOCK_RELAXATION_STAND_ALONE_ILU</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2abac48b6cf7f4e4739fd79cd833cc62f532</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BLOCK_RELAXATION_STAND_ALONE_ILUT</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2abae4c106d0c7911a4efdab9a3a549a2e2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BLOCK_RELAXATION_STAND_ALONE_IC</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba3a7447be149163822ab86c5412c6718c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IC</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba02563c33ffca3e221966b2c6eb5ad047</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IC_STAND_ALONE</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba40c7a77f5dd6f56a8909b749d16db392</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICT</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2abacc9918546cd4cc8f925431bb3765405d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICT_STAND_ALONE</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2abab33df1543384a54e710fa665d5763e68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ILU</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba5913719d0f33c241e1ea70b2be1ce599</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ILU_STAND_ALONE</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba64d12a96b12cf8c11c732022c148026f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ILUT</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba8f3c6083410d078246f8392301840b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ILUT_STAND_ALONE</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba717f1817b03059eef995b30a4cf01a09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHEBYSHEV</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2abaed5de96514bb09aa01c1e54e399213aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POLYNOMIAL</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba4d2bcd7393b117ef0e8b12819a5c76c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KRYLOV</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2abae028c73ba9a7650a5e28735e8701f77a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IHSS</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba2f211dc7d58495e62ef42f2ccd6db596</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SORA</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba5ba1314bf3dff485062a2dfdb64abaaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRIDI_RELAXATION</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba6bea8d03c8a7b3236c6e31c721321703</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRIDI_RELAXATION_STAND_ALONE</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba5d6b74ec8886c036b7706249fd46b65f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>absolute_threshold</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04ca1cb1205979d3105eb54d4b854577599c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>relative_threshold</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04ca28ec7ebacbe6b7f1518e4161f412ea82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>drop_tolerance</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04ca373f58648349a1f5389d065cb496a905</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fill_tolerance</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04ca4574d676f3f19dd8c1ba9f2b52099497</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>relax_value</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04ca002bb939c397f8d7c2b7cbeca790c470</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>level_fill</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04caadac51ae51a45aa5b2680ef9aca79e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>level_overlap</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04ca1d48c6870e8911a925fb8ec8b1910a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>num_steps</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04caf3a24e08d7e2cdd345aee22859b398be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>use_reciprocal</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04cacca6be69ea8b8cd24a1b55dacfdd0c6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>overlap_mode</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33215615382456e4882d52df0a44e04ca088f8293294381e7e9ec1f77866153d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_RELAXATION</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba169677b57a11f24a634205167bf08f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_RELAXATION_STAND_ALONE</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2abae3b63fbbbb132f4b3e760cdca58277e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BLOCK_RELAXATION</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2abae2626763316ac02d1c2293bf5d4483e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BLOCK_RELAXATION_STAND_ALONE</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba4e1d502bedaa154205f68ad20c9eef43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BLOCK_RELAXATION_STAND_ALONE_ILU</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2abac48b6cf7f4e4739fd79cd833cc62f532</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BLOCK_RELAXATION_STAND_ALONE_ILUT</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2abae4c106d0c7911a4efdab9a3a549a2e2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BLOCK_RELAXATION_STAND_ALONE_IC</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba3a7447be149163822ab86c5412c6718c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IC</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba02563c33ffca3e221966b2c6eb5ad047</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IC_STAND_ALONE</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba40c7a77f5dd6f56a8909b749d16db392</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICT</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2abacc9918546cd4cc8f925431bb3765405d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ICT_STAND_ALONE</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2abab33df1543384a54e710fa665d5763e68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ILU</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba5913719d0f33c241e1ea70b2be1ce599</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ILU_STAND_ALONE</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba64d12a96b12cf8c11c732022c148026f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ILUT</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba8f3c6083410d078246f8392301840b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ILUT_STAND_ALONE</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba717f1817b03059eef995b30a4cf01a09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHEBYSHEV</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2abaed5de96514bb09aa01c1e54e399213aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POLYNOMIAL</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba4d2bcd7393b117ef0e8b12819a5c76c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KRYLOV</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2abae028c73ba9a7650a5e28735e8701f77a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IHSS</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba2f211dc7d58495e62ef42f2ccd6db596</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SORA</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba5ba1314bf3dff485062a2dfdb64abaaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRIDI_RELAXATION</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba6bea8d03c8a7b3236c6e31c721321703</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRIDI_RELAXATION_STAND_ALONE</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a24bbe88a7a8709989fd37a43ff8ad2aba5d6b74ec8886c036b7706249fd46b65f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Ifpack_Preconditioner *</type>
      <name>Create</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>af43e5144704f54295eccf24a33f9cc8f</anchor>
      <arglist>(const std::string PrecType, Epetra_RowMatrix *Matrix, const int overlap=0, bool overrideSerialDefault=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a761e9f851d4f77cc87553d67e689ae80</anchor>
      <arglist>(int argc, char *argv[], Teuchos::ParameterList &amp;List, std::string &amp;PrecType, int &amp;Overlap)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>toString</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a33710656f0636290d3628b3e772d1c72</anchor>
      <arglist>(const EPrecType precType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ifpack_Preconditioner *</type>
      <name>Create</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a03a44332365fc78e64397c8a919cd3f8</anchor>
      <arglist>(EPrecType PrecType, Epetra_RowMatrix *Matrix, const int overlap=0, bool overrideSerialDefault=false)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numPrecTypes</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a1bf46bf3295a240b2504a23306b28cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const EPrecType</type>
      <name>precTypeValues</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>afc92531e3c530b93ca353c907c6678e7</anchor>
      <arglist>[numPrecTypes]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>precTypeNames</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>aa9418410b0fbc2e05458ecd289caf39a</anchor>
      <arglist>[numPrecTypes]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>supportsUnsymmetric</name>
      <anchorfile>classIfpack.html</anchorfile>
      <anchor>a66d813c1bbca2c79b857d033a58a462d</anchor>
      <arglist>[numPrecTypes]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_AbsComp</name>
    <filename>classIfpack__AbsComp.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classIfpack__AbsComp.html</anchorfile>
      <anchor>a0e94996d94922dd918549ccbeaac99c6</anchor>
      <arglist>(const double &amp;x, const double &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classIfpack__AbsComp.html</anchorfile>
      <anchor>a0e94996d94922dd918549ccbeaac99c6</anchor>
      <arglist>(const double &amp;x, const double &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_AdditiveSchwarz</name>
    <filename>classIfpack__AdditiveSchwarz.html</filename>
    <templarg>T</templarg>
    <base virtualness="virtual">Ifpack_Preconditioner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsInitialized</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a409223e360dfb9152accaad2182c9063</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a3f928ded3d8b566e60206515c79dc768</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a581de13dbc942c49e3e3737512de9a00</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_AdditiveSchwarz</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a11d1f7993a7ae4cb9847705d000e9569</anchor>
      <arglist>(Epetra_RowMatrix *Matrix_in, int OverlapLevel_in=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_AdditiveSchwarz</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>ae48adee5f172d549170d46cf2d2168da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a28bee1e2c03f0fdb042cfa47f5a2f2a9</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a75b13a3362609fa9c481ddc918cb0647</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a474d52113dad6cdea8c0d69444ee5c72</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>abf5aed560569701c73c3c34ce1904c7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>adb1e5fab4b74cd7d0caf5d0af8621e6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a326fabb6974833417199d61de52c1793</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>afc5b148f6cbd723d75ece67e6b2eeb7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>aa536be972c4e910fa0c5245729dcca5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>ae60fe0084c3ec9ac03129120b39cdca4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>acf693735f54c0baca0925a29eb43b843</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Initialize</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a8649441d6bf63778acca9d78dee71413</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a84d50a0009b5fe826f05cfe50b42c72e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a3bd69dabef55a40d03913cf421b38ff5</anchor>
      <arglist>(const Ifpack_CondestType CT=Ifpack_Cheap, const int MaxIters=1550, const double Tol=1e-9, Epetra_RowMatrix *Matrix_in=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>abc504d07fc15cdb9e07d9e38af878607</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_RowMatrix &amp;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a26c39df9ba5373c847eda723ac60ea7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsOverlapping</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a24a733ef717eb6a9a0673c09b512db35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a856f47d9ad94aaa399e8a6f54a5f05fa</anchor>
      <arglist>(std::ostream &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const T *</type>
      <name>Inverse</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>aff6fce6ba3f97b083571fa7998cf193d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumInitialize</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a4e33fc97327a91095a0fa51a209df379</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumCompute</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>af4ce5296584cfb93e731d4b241ea6f3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumApplyInverse</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a492b232bac7fc360d9382b4b7e48a9fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeTime</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a17d1c454b2342148fe2bba7a07a56f89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeTime</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a6b2bd3b07a897359c03f7a1259d343fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseTime</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a38bd38a79c7d3397b328cfa80ef0003b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeFlops</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a04e004b8b7794662868b62ca4aa53495</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeFlops</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a023eabf79d6c0de182404eacdbf4dd6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseFlops</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>abf3e567ce34bba9bcfd8aa9126e604e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>OverlapLevel</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>aed1f7f305cd631f85645c68122c3d925</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Teuchos::ParameterList &amp;</type>
      <name>List</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>aaef9bccea83cbb908a284c0aabc68125</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Ifpack_AdditiveSchwarz</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a46b930b156bb60a7eb40455320592568</anchor>
      <arglist>(const Ifpack_AdditiveSchwarz &amp;RHS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>Setup</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>aecd194460f0a7752cae9aef853554fad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RefCountPtr&lt; const Epetra_RowMatrix &gt;</type>
      <name>Matrix_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>af525c8d656049ec6e40c85c7d4d0a8c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RefCountPtr&lt; Ifpack_OverlappingRowMatrix &gt;</type>
      <name>OverlappingMatrix_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a5997e39d2955d90bdf8cb3f555ed0aad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RefCountPtr&lt; Ifpack_LocalFilter &gt;</type>
      <name>LocalizedMatrix_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>ad42a1018d53fc368b77c628d09e6e812</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>Label_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a568db68c592d9a37d0d484c0717cb4f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>IsInitialized_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>ad89a772066516cdbef21046e7a800a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a45a78fdfda50c4d41a1226c5035ae9b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a8c4037ba6dff61e32988ee1ecc6eabb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>IsOverlapping_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>ae7eb929415b3dc3f130f6a2afe80391b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>OverlapLevel_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a5c0e5ba371051182fbb0c0ada94b35f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::ParameterList</type>
      <name>List_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a650e96936ee12fd6b9014ada08adba13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_CombineMode</type>
      <name>CombineMode_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a55dd7b621442a9cca8c5e1a48e698e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>Condest_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>abd00a36f35fae47c1edec7d339196558</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ComputeCondest_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a35bdf271d87fd5b917c8c2d6ac0c402e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>UseReordering_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>aeb44ead3932ff63c5a4ff782adb5b68f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>ReorderingType_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a6bba04dc2de4d3a314a4b3c5bcef9391</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RefCountPtr&lt; Ifpack_Reordering &gt;</type>
      <name>Reordering_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a173848a58bdee4b3c843b9dce91d4560</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RefCountPtr&lt; Ifpack_ReorderFilter &gt;</type>
      <name>ReorderedLocalizedMatrix_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a83df2b9d24b6ab41b79d2bcc72ba95f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>FilterSingletons_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a19ce05a72568584e9ad8734412ddde37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RefCountPtr&lt; Ifpack_SingletonFilter &gt;</type>
      <name>SingletonFilter_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a8de6a64e19b6692fbd607ba33ee76574</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumInitialize_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a5439b2fd548ce56b3ee30e2dced75629</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumCompute_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a0348ef057cc7c3136d14dd5fa8826f07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumApplyInverse_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a757056cbb6a6f636e44ee8af9857b4cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>InitializeTime_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a5da7cbf41068ad70ff315e21077f524a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ComputeTime_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>ac09ef6217143b1dd905f462ea7b4c1be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ApplyInverseTime_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>ab06bd14b8cb50307ef0788f9345978c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>InitializeFlops_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a3e1d40b81135d09ed3c84785069e5469</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ComputeFlops_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a7a55f85760669991da7ca5775ccef244</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ApplyInverseFlops_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a864682c1a63d447f9d72ab75669df71b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RefCountPtr&lt; Epetra_Time &gt;</type>
      <name>Time_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a893c9fcb05aceafba4ed8b06f2118ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RefCountPtr&lt; T &gt;</type>
      <name>Inverse_</name>
      <anchorfile>classIfpack__AdditiveSchwarz.html</anchorfile>
      <anchor>a9d9a3769df13768752e13d19c1735ecf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ifpack_AIJMatrix</name>
    <filename>structIfpack__AIJMatrix.html</filename>
    <member kind="variable">
      <type>double *</type>
      <name>val</name>
      <anchorfile>structIfpack__AIJMatrix.html</anchorfile>
      <anchor>a23248510c5dac34ee4244de438cb4cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>col</name>
      <anchorfile>structIfpack__AIJMatrix.html</anchorfile>
      <anchor>ac57bbe2819bef36b10d63611419b62da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>ptr</name>
      <anchorfile>structIfpack__AIJMatrix.html</anchorfile>
      <anchor>a2cb48dd6e77f93242dd6ad3e32254061</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_AMDReordering</name>
    <filename>classIfpack__AMDReordering.html</filename>
    <base>Ifpack_Reordering</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_AMDReordering</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>a4faabe6a907052f94a28979a17fbfb49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_AMDReordering</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>a86195ce9325abd88a3a76c6fcc30f29d</anchor>
      <arglist>(const Ifpack_AMDReordering &amp;RHS)</arglist>
    </member>
    <member kind="function">
      <type>Ifpack_AMDReordering &amp;</type>
      <name>operator=</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>a9ed79369862f14f9564e826f3ee8e5f3</anchor>
      <arglist>(const Ifpack_AMDReordering &amp;RHS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_AMDReordering</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>ab44a5ad149c38e0a77ff3b444c80d2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetParameter</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>a826dbd2a300264e05c89998b7664322b</anchor>
      <arglist>(const std::string Name, const int Value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetParameter</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>aacebc4ace6b48035805c7c2f429c3194</anchor>
      <arglist>(const std::string Name, const double Value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>a004991d621f2de43b00fa667bbebd847</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>a1f475e09c31855a208feb16757d145fc</anchor>
      <arglist>(const Ifpack_Graph &amp;Graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>a2bfdcb1128c54621688031bd87d87670</anchor>
      <arglist>(const Epetra_RowMatrix &amp;Matrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>ac90dcdd3702e2b2b44c5ed8af106218b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Reorder</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>a9b5df1a207b27b0cd8d12f4e11338094</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InvReorder</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>ac2bd0f021e14fcd033a3228d7aefcabb</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>P</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>a10fcc4c2ac69d3b6a903806c56f5893d</anchor>
      <arglist>(const Epetra_MultiVector &amp;Xorig, Epetra_MultiVector &amp;Xreord) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Pinv</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>a6adade48ef491cc599b0932ba28945fe</anchor>
      <arglist>(const Epetra_MultiVector &amp;Xorig, Epetra_MultiVector &amp;Xinvreord) const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>a041258aeb0e0e76e5012d1beb226e070</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyRows</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>a17701ce80a9017ec88b0d4ed531c0d58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>a6a1ef0885d987e8303d38cf5af543dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>a352bf88a793e9ccd45d09554f8a4a8c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>Reorder_</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>a3d028bf403d6e34042be1e280eb4c0f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>InvReorder_</name>
      <anchorfile>classIfpack__AMDReordering.html</anchorfile>
      <anchor>a50ab92e37d6ffb4754569685a34579d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_Amesos</name>
    <filename>classIfpack__Amesos.html</filename>
    <base>Ifpack_Preconditioner</base>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; const Epetra_RowMatrix &gt;</type>
      <name>Matrix_</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>adeca4a6bc97bbcb78800ea58560fc651</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_LinearProblem &gt;</type>
      <name>Problem_</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>aa2200b7392c18da7c7c01371ca5e3fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Amesos_BaseSolver &gt;</type>
      <name>Solver_</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a033e9646a61d7933e2e0aee692455fc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::ParameterList</type>
      <name>List_</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a2e1b3ee7d531b9a713aa5b5c75914ece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>Label_</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a75b587b8cfe466742138476cc758a5eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsEmpty_</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a97d1087f59e98881684c8657b3a15c64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsInitialized_</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>ab744bdac203427c63cfb64eab607f319</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>ac15d2429c49cdbd8733fe86758eb46de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>ad20d9b5f42873cf9827009d720637e2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumInitialize_</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a1a80cb548d5bd7b9178dcfa6a2986dee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumCompute_</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a4a7ccd59b77735c4c492eefb396fbb71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumApplyInverse_</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>ae195244edaca6418af16f7a5f56c04fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>InitializeTime_</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a43e8c57d594fb0d489196cfd9b2c90e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeTime_</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a40dc4fc2b02a896bff97f2735b1adde5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseTime_</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a9d7a72cb4408820e64c9f66cd47a25d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Time &gt;</type>
      <name>Time_</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a14d4732848ddf43079602a86b13c5e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeFlops_</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a15a7574a99f2fce0a38d847bd633cfe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseFlops_</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>ac9fa79a3307c660c2aa210c0b07472ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Condest_</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a1b4f176b4194a583c30206ca72c38ba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_Amesos</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>abc185a08df57a9f75e65614b0d7e5cd9</anchor>
      <arglist>(Epetra_RowMatrix *Matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_Amesos</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>adf7fbc2c3d708066b221d041adf99e8f</anchor>
      <arglist>(const Ifpack_Amesos &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Ifpack_Amesos &amp;</type>
      <name>operator=</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a2eca8db102b914cc5e175c6cb0966587</anchor>
      <arglist>(const Ifpack_Amesos &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_Amesos</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>aaf0a58f73abbff828c5e6b28d93c02fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a915913b962f879a2b0c2f225f63b3e1d</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>aa6b8be5dcd0446248b62cae053829700</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>ac3d9e97da7a72a65bb8c82f9d47119c0</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a68b69ccfccc669eb6d245697917723d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>ac1c9be129644e3bf3926d659fe8c540c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a03f11abb9c12ca8546b61b20b37e353c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a492729dc30797e977cbadebc5c619ded</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a417ecb46a21a3032cee2a654da3a252d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a7faef63302c436eab1ed93ea04906a4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a2f15f91f249cbae0a5dffd6104abe3a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsInitialized</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a55d3a449e53728bf73b40cf760bbf9e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Initialize</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a60067b5eec7871b695ebe24106b22a8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a2db4bce035e5417ebe3383be716d4604</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a66d7072c0d8a2fa71f2cb412f3fe8d1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a983c3525a45fc8a094a707162dc44429</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_RowMatrix &amp;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a2a683475db08bed2f56e49592405a651</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a5960b090fc12d48bb972bfa320414dd6</anchor>
      <arglist>(const Ifpack_CondestType CT=Ifpack_Cheap, const int MaxIters=1550, const double Tol=1e-9, Epetra_RowMatrix *Matrix_in=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>ab4ff58efe2c566868ecce37d1cf0e737</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumInitialize</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a6a769fd1f2baa401c06cbb9070494506</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumCompute</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>af372434af561aa74986e5a3faa59f67d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumApplyInverse</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a775e21ec83b0a1fa4c50c0579a739e69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeTime</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>ac681e749ae0e4d4d14968037b594853a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeTime</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>aaaa5ac83fc7bebd522448f7c0593169e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseTime</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>add73793853488be6a3abca997d0aaf0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeFlops</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a345ed9cc79713243043b8831377edd74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeFlops</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a72233e45dda3cc46f96d3241bc5a43d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseFlops</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>aaa97bb44c3a31cfaffdc4389bf25ed2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Teuchos::ParameterList &amp;</type>
      <name>List</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a56601e0da214a21e2d4acb777d55504b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>aa1cf94e9486471fdc6fc990677f9d81f</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetLabel</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a507b8afa7088d69c3c5bb35feed1777d</anchor>
      <arglist>(const char *Label_in)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetIsInitialized</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a0cb1c1ef5b9cff7d541de33876a5b5e0</anchor>
      <arglist>(const bool IsInitialized_in)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetIsComputed</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a86bcee3010c92cf6afb1bf1b35337d46</anchor>
      <arglist>(const int IsComputed_in)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNumInitialize</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>afdf6d4f9a967b534d514c4a83cbd3fd7</anchor>
      <arglist>(const int NumInitialize_in)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNumCompute</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>ac0c3dd05d4895b8af2fba5709ceef3c5</anchor>
      <arglist>(const int NumCompute_in)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetNumApplyInverse</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a32c28b37bbe16991b930771b0c798c95</anchor>
      <arglist>(const int NumApplyInverse_in)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetInitializeTime</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>ae6b751ec92311df22fc46cd942874406</anchor>
      <arglist>(const double InitializeTime_in)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetComputeTime</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>ae6739d0c3dd9a9428fe347378bce02a7</anchor>
      <arglist>(const double ComputeTime_in)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetApplyInverseTime</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a95ef510ce67a1ffd900115842f790e84</anchor>
      <arglist>(const double ApplyInverseTime_in)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetComputeFlops</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a84ff82851f84cb41091991461262c7c7</anchor>
      <arglist>(const double ComputeFlops_in)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetApplyInverseFlops</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a60a359a155cf5cbf3ef7f2288b8562ab</anchor>
      <arglist>(const double ApplyInverseFlops_in)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetList</name>
      <anchorfile>classIfpack__Amesos.html</anchorfile>
      <anchor>a4f2e81d08102bedbf7da3e263d4cf38c</anchor>
      <arglist>(const Teuchos::ParameterList &amp;List_in)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_BlockRelaxation</name>
    <filename>classIfpack__BlockRelaxation.html</filename>
    <templarg>T</templarg>
    <base>Ifpack_Preconditioner</base>
    <member kind="function">
      <type>int</type>
      <name>NumLocalBlocks</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a2172ef778ada17618b5de82713f72ee1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsInitialized</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>acac9a6b0f1d333713f038a512eb25440</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a44e41503dd97657bbccc7de7ad541ac1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a46e294e9e396c51f1f7385639186c5fa</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Initialize</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a928a910c8aff0d6d5a49dd155f19ca7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>afc790b5b0cac2809f1bc2158f8fcd844</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_RowMatrix &amp;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a900623146fa907f396929deca9f495f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a4fb028d99cf428ab820253ed31edb517</anchor>
      <arglist>(const Ifpack_CondestType CT=Ifpack_Cheap, const int MaxIters=1550, const double Tol=1e-9, Epetra_RowMatrix *Matrix_in=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a941a5aaae60a8a9f9ca13955dc15f9a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a741a876acf9af1d7c1a3a92863f788a9</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumInitialize</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>ab9b2593e46f2e39188b4bc09b91600b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumCompute</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a91c04d2f683d17c597dba497f5c35059</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumApplyInverse</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a16e1fd46dd063a72ece79fedec1180d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeTime</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>ae971749bacb265769c17d202b0efb7e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeTime</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>abfee9c20eb19ae721a05f21cf308b154</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseTime</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>af3341656de51c54403a583253d91469c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeFlops</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>afdca75b73e1f8a9a1737dfc88e33f811</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeFlops</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>ac70e940b93d11b2a89be1bec17d94985</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseFlops</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>ab65a9ac81d4ddc75cce8299938912c27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Ifpack_BlockRelaxation</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a4d48599c318831330c40ba2e8e08320f</anchor>
      <arglist>(const Ifpack_BlockRelaxation &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Ifpack_BlockRelaxation &amp;</type>
      <name>operator=</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>ab7f01a6d558d609ca289713de62d2a8b</anchor>
      <arglist>(const Ifpack_BlockRelaxation &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverseJacobi</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>ab7f146b9a86da6a73a1e8735dcea1e67</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>DoJacobi</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>ae465f0c13d978ea9215db3c6510b9699</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverseGS</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a2debc28f7d9e376f1b4ad5eb78b05e38</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>DoGaussSeidel</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a2b7471ae7b206db80b5f00d3ffc4b32a</anchor>
      <arglist>(Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverseSGS</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>aaa79a0ee106cf8d9e79bbf9b189bb5bf</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>DoSGS</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a7f9ee1c10914e010e436ac8041f9e93f</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Xtmp, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>ExtractSubmatrices</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a52b5370800f129955a28f55a2e3b22ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_BlockRelaxation</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a2983cc569efe70152107d98d69e1dbf2</anchor>
      <arglist>(const Epetra_RowMatrix *Matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_BlockRelaxation</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>abfd638b6a8fb48debd58b765e9ed1301</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a1006a1be801a3ca5dddabf49531c0fac</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>afa4e3a5ebeb137c3aed03f2aea63cb0d</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>ac31e35380bd644c048309e488d174155</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a5a4405572292336a4416a0a0ce7378b0</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>aea4f52d3bd7cb804d2666eed075435f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a83f0bf0888eea729ef8daf92d16c6432</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>af4b23ed0398847a9f26745d115174aef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a326ad712013dbcd1a068b66df7971a5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a08e192369b83ec16fd51ab75a1911c85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a32bdf2306b5963b0629d1ac2ae4b3c12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsInitialized_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a1e6e7523648366aa6cf47660c439b2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a2e80397beeb6dec213d880fab33516ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumInitialize_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>ae2dbb506602379f1cae009ee640ddab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumCompute_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>aa63ffa85416135f05d42df5e847c2bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumApplyInverse_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a3abdd5289f2687be436352554b1a12c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>InitializeTime_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a7e8afe851035ea728cf6b228446afac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeTime_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a43720e8d908f9814b459ebc09071efdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseTime_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a1c8a96e1e00537b46fb6f2b26b6d7d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>InitializeFlops_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a21f121da427c1d48f4db4e15b3113be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeFlops_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>ada548a6f9802e418842c73b28c1dd918</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseFlops_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a7235bc4df4bd3e0aaaefa97cfa8414d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumSweeps_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>ae07784eb7b507223320ecf93b7152c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>DampingFactor_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a64a9ee89c31a2bef3d2d422407a53f9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumLocalBlocks_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>aaad7ee21310cfa91ee24b2c95214051c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::ParameterList</type>
      <name>List_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>ae2df775c3814fa0710dfc9eddcbd8309</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; const Epetra_RowMatrix &gt;</type>
      <name>Matrix_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>af5909c82b7c5f66e8a0eb7ce82a009ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RefCountPtr&lt; T &gt; &gt;</type>
      <name>Containers_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>ab2b96b622c425f9298363051b35b0973</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Vector</type>
      <name>Diagonal_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a120c280b5ae3c8aed4c1d0209a4cda6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Ifpack_Partitioner &gt;</type>
      <name>Partitioner_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>acdde6009fea36555a7529d6082c7b0c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>PartitionerType_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>afd3635d93a826bbc2423fa68decdc8cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>PrecType_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>ad4aaaa759f5a8b28fc6ac8a52ea3bba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>Label_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>ac842577395da7b612e547b7dedb44734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ZeroStartingSolution_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>aaafbe480e4757e1100056ae928ef87be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Ifpack_Graph &gt;</type>
      <name>Graph_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a69fe96ee48e2d861f2ccf5b6920a3bd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Vector &gt;</type>
      <name>W_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>ae27837452d25cc7d902ec4c0b26d4a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>OverlapLevel_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a2dd3a7825b04611edd866a19ee6c3235</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Time</type>
      <name>Time_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a5d9da2f463f991529a1fdd47325337a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsParallel_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>ade06c2adbc60949ccfaeb87d80a44cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Import &gt;</type>
      <name>Importer_</name>
      <anchorfile>classIfpack__BlockRelaxation.html</anchorfile>
      <anchor>a67667b8bd7613b3b04021df8b75ed897</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_Chebyshev</name>
    <filename>classIfpack__Chebyshev.html</filename>
    <base>Ifpack_Preconditioner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a7180f1af00793316debfb8d3e032eec4</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_Chebyshev</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>aa725d6029f1bcc20d51b7d01c58fde32</anchor>
      <arglist>(const Epetra_Operator *Matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_Chebyshev</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a4d8d811279f5eb2d72315e1804c82484</anchor>
      <arglist>(const Epetra_RowMatrix *Matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_Chebyshev</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>af4036de22e4c07928983b1915f5f1cfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a771c5f6fd48a55fadc637dc071d3fb3f</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a01d09c530b03700d3a90a51eb9ae5e2b</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a0a772898b3bbb31e8be028e1209ae6b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>abb99d27659ce56658e153c163eb29828</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>ae967a1f405a4ecc4fadba979d66fca2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>ad81e3d9aa22d04d012798b0705816a29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a19f07d02eaf7c426d5ca41d4401074f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a31c8317a43c70b9d8dc0a9c6491f8757</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a7dfcd74d527ef67b9a307a23b56669c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Initialize</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>acf7defd7c78748e95d29e9b7ab1f3559</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsInitialized</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a42cc04d266d88acad5524be86c1a45ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a3300d66a1c6ad653a085d16cec158375</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>aac531bce77f950c9e77fe1d9f5b118ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetLambdaMax</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a94df18b3990bc10eb1cde1e8bb475e4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetLambdaMin</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a9a9755012a508a4281e8d7158c57979e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_RowMatrix &amp;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a3c93dfe554642f4ef3dbbe5b810e290d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>aedf0286d177d63cb4dddcf22ec996f50</anchor>
      <arglist>(const Ifpack_CondestType CT=Ifpack_Cheap, const int MaxIters=1550, const double Tol=1e-9, Epetra_RowMatrix *Matrix_in=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a5a9ea4bd33de842cc38aa8eb46af7735</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a31a8a51525daf5ad97649019e0e7a0e3</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a65ffe613be7d148e9d3988290e107538</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumInitialize</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a1902f2b3c42f7d7ab61a62bf25e09546</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumCompute</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>afa6663104c28336e36cc49101fc1dec5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumApplyInverse</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>ae72de483a50d61a3ddce65d0841aaf30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeTime</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>aa9b0e9d6980bacfbf345d27c079a7aee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeTime</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>ad13c2482de184ebd0cd6e5838b64ed47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseTime</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a6723c1b9523cc22bf82013e61ee190bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeFlops</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>af434cda82382f2466f8fe1c9f2680cdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeFlops</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>acae91d5bb478f06c8d5c517f3432858d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseFlops</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a58991706dd563bcd391fcede78c9219c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>PowerMethod</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a67dfb09356c7d85f8a7e687a1462ae0b</anchor>
      <arglist>(const Epetra_Operator &amp;Operator, const Epetra_Vector &amp;InvPointDiagonal, const int MaximumIterations, double &amp;LambdaMax, const unsigned int *RngSeed=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>CG</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>ab254af8b10466ec3afad994947e1c55c</anchor>
      <arglist>(const Epetra_Operator &amp;Operator, const Epetra_Vector &amp;InvPointDiagonal, const int MaximumIterations, double &amp;lambda_min, double &amp;lambda_max, const unsigned int *RngSeed=0)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsInitialized_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a0fc598d7ae51c0012205dde595c20c78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>af929752194d4f82f9504b13c16408910</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumInitialize_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>af13a2cdd2d613ae2f686091b3d26b56c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumCompute_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a1f433f22e5092594cedfd3d268679c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumApplyInverse_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>acc30a398b93f06f6d2081613739d280c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>InitializeTime_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a5e023d55a82dd8079b1fb3422b0137f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeTime_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>ad34eb5b31c07e34baa2ac2cb9a035333</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseTime_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a66bab7d92f6a90ccd425312b26f40060</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeFlops_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>abcf63614702b3eef5d92fa440d7bc3a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseFlops_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a08ae7b27f6c9ee69285f78afe48fe7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>SetLabel</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>ad1080868bf1c669f5b9a236eda33289c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Ifpack_Chebyshev</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a924d2a93d402cd35a89bffe56a5319fb</anchor>
      <arglist>(const Ifpack_Chebyshev &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Ifpack_Chebyshev &amp;</type>
      <name>operator=</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a48633f0e01956f20aee24c2d7968029e</anchor>
      <arglist>(const Ifpack_Chebyshev &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>PolyDegree_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a5d2922cd9ecdaf679e5e6cd977769a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>ab9e8abf1bc6c7cd32b133abb42f02c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Condest_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a710f839428fd5b92b9c21a355fb4b808</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>EigRatio_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>ad9009c21b7d0766a4fd0f735a6d8cb3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>EigMaxIters_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a2ddc112391a5f1e92864801483d51d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>Label_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a8c61bf877f22844a13e7ea6897ff18ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>LambdaMin_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a243452433fc34818966f3ac21d52e92c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>LambdaMax_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>ac0fac8247d5e09793e80511d272f4505</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>MinDiagonalValue_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a8f372c25dba84dd727a4984f95375c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a6d307539487cf712bdf42c93b68a148f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyNonzeros_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a050c8ae72a9d5fb6adf8d56acd8b0765</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalRows_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a809e5ade88c9961c13d6dc237147b690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalNonzeros_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a9ab77dafabb64dbc87c530161bb11369</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; const Epetra_Operator &gt;</type>
      <name>Operator_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a50009ea0fc9338b75946aefd17135fc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; const Epetra_RowMatrix &gt;</type>
      <name>Matrix_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>ad4551cfe6c9176da06eb5f816c4171bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Vector &gt;</type>
      <name>InvDiagonal_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>aa34fa465a022156f8add2dcbb43a64cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseBlockMode_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>af99c99b21405f12358a4734d7276938b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>SolveNormalEquations_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a6a483a381236a170f779251d015c01ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsRowMatrix_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a8f200dbe4633cbf6b30561047d993c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Time &gt;</type>
      <name>Time_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>a64d5b270b7f388d8f4f94482bfb5c9da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ZeroStartingSolution_</name>
      <anchorfile>classIfpack__Chebyshev.html</anchorfile>
      <anchor>aac1c88300a0ea4066ac013a0f415728e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_Container</name>
    <filename>classIfpack__Container.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_Container</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>a40a0f794a11664295ab02af091bdcfed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumRows</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>a757225707ad5e0a88714387ec2437056</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumVectors</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>aed6535e0684b37ee50d68020cd579222</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>SetNumVectors</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>a52aaea9f8234dcc7d3a76f815cbaa587</anchor>
      <arglist>(const int i)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double &amp;</type>
      <name>LHS</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>a0d11e7346ab5879f1e8b7b47c2af4e46</anchor>
      <arglist>(const int i, const int Vector=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double &amp;</type>
      <name>RHS</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>a23663af0923a2b6ec0b0fac169eb9b24</anchor>
      <arglist>(const int i, const int Vector=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int &amp;</type>
      <name>ID</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>a2c862da176d53c1ba8fe379c07f75767</anchor>
      <arglist>(const int i)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>SetMatrixElement</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>ae2308762c2c07a994946783cc5acc57c</anchor>
      <arglist>(const int row, const int col, const double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Initialize</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>a02110e6dd3d6de425661e8c868ff7905</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>acd7957f8f7dc5323ac0810fb664d5314</anchor>
      <arglist>(const Epetra_RowMatrix &amp;A)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>accebfc1a5bff917dfa5a415e15f33fab</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>IsInitialized</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>a9a630690e46c971ff865a3abe364fe6d</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>af0ae023968c41da40894f6a69049444d</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>a5f2ab124fad60b79710d72308f1fef50</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>a138916747f33f916f60c272153d2658b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>ab7a3dc21646bf632dbf15d3af3f15a37</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>InitializeFlops</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>a4916d21f8b0e318eff413c4ddd2293fa</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>ComputeFlops</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>a50bf772208addabce61ba3e119037bbc</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>ApplyFlops</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>a8656ff2440502093b9eb0f5d9bf04472</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>ApplyInverseFlops</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>a152c811eeafe5beb6b44e4d39e3cd96b</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__Container.html</anchorfile>
      <anchor>acaf43f021c5dd6688c9e9912e3ddade1</anchor>
      <arglist>(std::ostream &amp;os) const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_CrsGraph</name>
    <filename>classIfpack__CrsGraph.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_CrsGraph</name>
      <anchorfile>classIfpack__CrsGraph.html</anchorfile>
      <anchor>a79313f84c657e405b91d903457c722d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumRows</name>
      <anchorfile>classIfpack__CrsGraph.html</anchorfile>
      <anchor>ae914db7b1db3b1c55307813ddeda2e86</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumCols</name>
      <anchorfile>classIfpack__CrsGraph.html</anchorfile>
      <anchor>ad720966429a463e2d9700d0d1d60c263</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>IndexBase</name>
      <anchorfile>classIfpack__CrsGraph.html</anchorfile>
      <anchor>a0b4090e94ff17a6a93a364198a775f2e</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumIndices</name>
      <anchorfile>classIfpack__CrsGraph.html</anchorfile>
      <anchor>aaf8c5e1201d4a3f22125e9a45649f530</anchor>
      <arglist>(int Row) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int *</type>
      <name>ExtractRowCopy</name>
      <anchorfile>classIfpack__CrsGraph.html</anchorfile>
      <anchor>ad67f2d70a5af95e2d742e4af39d92256</anchor>
      <arglist>(int Row, int LenOfIndices, int &amp;NumIndices, int *&amp;Indices) const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_CrsIlut</name>
    <filename>classIfpack__CrsIlut.html</filename>
    <base>Epetra_Object</base>
    <base>Epetra_CompObject</base>
    <base>Ifpack_OverlapFactorObject</base>
    <base>Ifpack_OverlapSolveObject</base>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>DropTol_</name>
      <anchorfile>classIfpack__CrsIlut.html</anchorfile>
      <anchor>a770f6b076df9d42d2e5cf630950a15a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>FillTol_</name>
      <anchorfile>classIfpack__CrsIlut.html</anchorfile>
      <anchor>a00f73d39729bec93ac98124bd1095723</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_CrsIlut</name>
      <anchorfile>classIfpack__CrsIlut.html</anchorfile>
      <anchor>ab2e869c5b1d8350e546b186db93f686f</anchor>
      <arglist>(const Ifpack_OverlapGraph *OverlapGraph, double DropTol=1.0E-4, double FillTol=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_CrsIlut</name>
      <anchorfile>classIfpack__CrsIlut.html</anchorfile>
      <anchor>ae45f70c28131ef5602cecd82ad63f6e6</anchor>
      <arglist>(const Epetra_RowMatrix *UserMatrix, double DropTol=1.0E-4, double FillTol=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_CrsIlut</name>
      <anchorfile>classIfpack__CrsIlut.html</anchorfile>
      <anchor>aa0422d923d883ec012b05dad909e0f74</anchor>
      <arglist>(const Ifpack_CrsIlut &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_CrsIlut</name>
      <anchorfile>classIfpack__CrsIlut.html</anchorfile>
      <anchor>aeb916ab4969f67e88fc93fd4f43e1135</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetDropTol</name>
      <anchorfile>classIfpack__CrsIlut.html</anchorfile>
      <anchor>ae73e66000890243d731d5c9d96ee120f</anchor>
      <arglist>(double DropTol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetFillTol</name>
      <anchorfile>classIfpack__CrsIlut.html</anchorfile>
      <anchor>a06f84b0cd2d4ef1f587a49006c98b849</anchor>
      <arglist>(double FillTol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__CrsIlut.html</anchorfile>
      <anchor>ad9d3873e80dc367d1d079e6f5629f5dc</anchor>
      <arglist>(const Teuchos::ParameterList &amp;parameterlist, bool cerr_warning_if_unused=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DropTol</name>
      <anchorfile>classIfpack__CrsIlut.html</anchorfile>
      <anchor>a74f54680616694b4a463bf2f2376bc16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>FillTol</name>
      <anchorfile>classIfpack__CrsIlut.html</anchorfile>
      <anchor>a70de3f3c6d826b890fd9a3bf2a1c9cf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>ProcessOverlapMatrix</name>
      <anchorfile>classIfpack__CrsIlut.html</anchorfile>
      <anchor>a171bb3c214328db7548e681cbef22fc3</anchor>
      <arglist>(const Epetra_RowMatrix &amp;A)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>DerivedFactor</name>
      <anchorfile>classIfpack__CrsIlut.html</anchorfile>
      <anchor>af2ac35fe6aabda29706af10a506bdf3b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_CrsRick</name>
    <filename>classIfpack__CrsRick.html</filename>
    <base>Epetra_Object</base>
    <base>Epetra_CompObject</base>
    <base virtualness="virtual">Epetra_Operator</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_CrsRick</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a1be1de4fb80dbb8a54844c723ff34782</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;A, const Ifpack_IlukGraph &amp;Graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_CrsRick</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>ac37b87d32fd978e438e3273f9bb7ec86</anchor>
      <arglist>(const Ifpack_CrsRick &amp;Matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_CrsRick</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a7fe0404062630ba3ea1b67bd3012e62c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InitValues</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a73c7e421c9d195a7fae1ef5f0d39f87d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValuesInitialized</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a798dc678113c4e956ade9ba9562b57ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRelaxValue</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>aac79309c6be9e89455a827129dd5602b</anchor>
      <arglist>(double RelaxValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAbsoluteThreshold</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a27c0ef841e6b7d0071270826a4ce2f42</anchor>
      <arglist>(double Athresh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRelativeThreshold</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>aad9b858c1e191006121128cbf3e4e763</anchor>
      <arglist>(double Rthresh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOverlapMode</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>ac24d4c738ca92532a90cab0db968e20f</anchor>
      <arglist>(Epetra_CombineMode OverlapMode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a343570237ca8ab67d30a5daecd196c78</anchor>
      <arglist>(const Teuchos::ParameterList &amp;parameterlist, bool cerr_warning_if_unused=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Factor</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a4a8bc66351d3840ac26a0a70589e01e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Factored</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a13a00ca1cdefd82d4090c05c99b37af4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Solve</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a0f07bb4c9aee89b1b9fae8bb37239e0b</anchor>
      <arglist>(bool Trans, const Epetra_Vector &amp;x, Epetra_Vector &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Solve</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a37f7d9077430acaaca0e4c6033bde01c</anchor>
      <arglist>(bool Trans, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>af3b8d213abe3f1cec92819fe486770c1</anchor>
      <arglist>(bool Trans, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Condest</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a0592abc31c6dc14717fb93749141a022</anchor>
      <arglist>(bool Trans, double &amp;ConditionNumberEstimate) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetRelaxValue</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a58217076a7489bfa11910b617c3853be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetAbsoluteThreshold</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a3ce1cee581b7ef714b2cd3e4cdfcc409</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetRelativeThreshold</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>aa38f6204f6c973945831071ed139fa69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Epetra_CombineMode</type>
      <name>GetOverlapMode</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a00a8627cb6ec4f3a895a7dcc2eb2d44c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a9d62a720165f62a32ec6b3c2edf49921</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalCols</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a95d8fad588290668587cf9549226be38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a8a8db4e71740f8c8a99f1f8b6d13e18e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalDiagonals</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a772e193d58580ffbefc5c41e3ada99ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyRows</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a866a9798062b08956a62d19f01831a50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyCols</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>abfe51a1efaff4fc537e11cbeae2537e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a0948551d0bd0e242176e3348b072ec20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyDiagonals</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>acc8761a7b0dd1eb16daf0ca913b3b4bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>IndexBase</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a743deade92d711df1cb2280f3bf1d67e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Ifpack_IlukGraph &amp;</type>
      <name>Graph</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>ae0463fef3c7cba8bf9fd7d3bb27bd992</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Vector &amp;</type>
      <name>D</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a5fd033716455c323b7cbb69a7e67d8a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_CrsMatrix &amp;</type>
      <name>U</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a88cee5d1a3a2d6ad892a8609bb0b7f2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetFactored</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a85edce45e1dff300a697767def8dec7b</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValuesInitialized</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>aff2c15aa93c1c8da221212812c2f6706</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Allocated</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a0cc78f20f63a322ae2da3f1bb190a13d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>SetAllocated</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>ab4e011bbe262721a6c8fa3a192eed43c</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>Allocate</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>ac6d805e9d61d97de1dc1cac02403b002</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_CrsMatrix &amp;</type>
      <name>A_</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a1034f708b874cfae236f1805fa08759c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Ifpack_IlukGraph &amp;</type>
      <name>Graph_</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a166a846c3421c834a886b862ecfd94ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_CrsMatrix *</type>
      <name>U_</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>aa900f4d71619490c82f353610a505cc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Vector *</type>
      <name>D_</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a41f4ffcb3c4118d5a5bb5ddd6d39094b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>afd914efc6b032ba8674a7d7a763b7560</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Allocated_</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>ae1728395f5b6df75f4064be8b20ffe39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ValuesInitialized_</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a3bf95263de2eae0ff0ae7e136388dd46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Factored_</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a47d67cc219c9a99b3c76645476df7593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>RelaxValue_</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>ae1d81aede76bfe16eb058abfd81eb1d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Athresh_</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a270d1ce49816135393b619699b3153ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Rthresh_</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a589af2673bb20572f8d8f2182d04ffe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Condest_</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>adccfd0cf5102f7dd96ffce5a91dd5ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_MultiVector *</type>
      <name>OverlapX_</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a2712c37df7d548babbcce7884568cc89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_MultiVector *</type>
      <name>OverlapY_</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a5bf8093b7f5296707c0d1e4f42498d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_CombineMode</type>
      <name>OverlapMode_</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a2abae9940dccc799d0467a0805dc79b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>af20b8bcf1931be6472b2c6761c1bea31</anchor>
      <arglist>(std::ostream &amp;os, const Ifpack_CrsRick &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a334806aed72035f49f8ef623b9db5ff5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a87d2f17de1d2b6166be279ff45d8a5ae</anchor>
      <arglist>(bool UseTranspose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a4155371e8aae7a431e59bb2ead077a5d</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a624a16b172ad594b37b8f0eafdfccd27</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a58e1384b3b9f6ba2b0978f13c10e2fe5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a25b34b0b1fa3eaf502db8c9cb5ff5b2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>addc8cd7310133de6c8cdd37a7ac9debc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>ade0d6975acfd89c123e9015827909b9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__CrsRick.html</anchorfile>
      <anchor>a10081afa4564d16ebb4d75617ebe0ea1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_CrsRiluk</name>
    <filename>classIfpack__CrsRiluk.html</filename>
    <base>Epetra_Object</base>
    <base>Epetra_CompObject</base>
    <base virtualness="virtual">Epetra_Operator</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_CrsRiluk</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a7967ff646f8f3469a8634aaa3d64f106</anchor>
      <arglist>(const Ifpack_IlukGraph &amp;Graph_in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_CrsRiluk</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a80a735eba74f68db6fd58abe22a348a3</anchor>
      <arglist>(const Ifpack_CrsRiluk &amp;Matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_CrsRiluk</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a13324543ac17d9ea4454870620054779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InitValues</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a607b935a5ad54901efe2b335d0f9711e</anchor>
      <arglist>(const Epetra_CrsMatrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>InitValues</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>ad1db1ce7bc3f9d6c52bac55fa7419651</anchor>
      <arglist>(const Epetra_VbrMatrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValuesInitialized</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>aaae3ac61e2280d1b30d0abad9f8a8cd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRelaxValue</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a3284e5235e8396bf7e17556c99898db5</anchor>
      <arglist>(double RelaxValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAbsoluteThreshold</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a5e214fd9a9f559d4141063f9c12f3f28</anchor>
      <arglist>(double Athresh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRelativeThreshold</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a9b25419d8d4b9621e4d60bf21e3d30cf</anchor>
      <arglist>(double Rthresh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOverlapMode</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>ad7c836113484d8de9af7525cea71d6c9</anchor>
      <arglist>(Epetra_CombineMode OverlapMode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a31420167878281506677057f3337bcfd</anchor>
      <arglist>(const Teuchos::ParameterList &amp;parameterlist, bool cerr_warning_if_unused=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Factor</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a2f6c1a6e3749aa42d78e87817521a765</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Factored</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a0a0d1b24012a1ba5f7cfd33828ea507b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Solve</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a75c06055bea37bd69cea43f5d30c17d1</anchor>
      <arglist>(bool Trans, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a737e7743102681d54cee4e5049b35697</anchor>
      <arglist>(bool Trans, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Condest</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a74754d8e4a76ed796b9efbc270a4d3eb</anchor>
      <arglist>(bool Trans, double &amp;ConditionNumberEstimate) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetRelaxValue</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a67c5b8a9dfdd5fc492489ffc05afe91e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetAbsoluteThreshold</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>ab7ff2c145255a4cde9b0f8535b43603a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetRelativeThreshold</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>ace9a6910deca5bab2f12ed082cb57cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Epetra_CombineMode</type>
      <name>GetOverlapMode</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a45239b9b6778ae875bac08c77716f85f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>ad08bf671e9226d816519ccbdd4c8f366</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalCols</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>afbba55ae4e0c878238669cf0771a22b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>aa085a08547b33dce8fde67780341a70e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalBlockDiagonals</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a9ef876d4209d6eb3a523879c378d1594</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalRows64</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a9f629fe6aede553971b762eec0ded726</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalCols64</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>adb8bc3166f5f682d3458f66d4599238d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalNonzeros64</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a13c0814eaf93f57302cff5bffd2fea17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalBlockDiagonals64</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a143cda75fbfd925c241b71aa9736ef64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyRows</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>ab873fb16dd55a9748c00200e8d8ca2fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyCols</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>ab8502656b19ba5abfc01d397eef3cb82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a2e18fe8537a51dda7618d7272b9b6ff1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyBlockDiagonals</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a1fd022e7254fa477f4080bb006ecf890</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyDiagonals</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a1e1f1d253deb9a01622cfde6ad9a4a70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>IndexBase</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a163af67ae74307f2e055e68bb64400e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>IndexBase64</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a106862f26b1cafd0ee564f3fa4df82d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Ifpack_IlukGraph &amp;</type>
      <name>Graph</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a0abba5795191eabe20def01bd53ee1f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_CrsMatrix &amp;</type>
      <name>L</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a891a2f571e11052f45a2a63d6a94c8e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Vector &amp;</type>
      <name>D</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a3c621e6917bfbd8f090a5db6b43d5445</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_CrsMatrix &amp;</type>
      <name>U</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>af2dd652996a73c974a876065968fd172</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetFactored</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a808ad2fc30cf1665aa83608edcb0ba5b</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValuesInitialized</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a85916784496b1a94ee35a28170f311ec</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Allocated</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>af92e75ab5e03fa58643030bb2879a68b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>SetAllocated</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>aeeaaef876dd0a2ea6b9ff5f69eb03775</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>BlockGraph2PointGraph</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a043bc49269e5415411818336a8283d31</anchor>
      <arglist>(const Epetra_CrsGraph &amp;BG, Epetra_CrsGraph &amp;PG, bool Upper)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>AllocateCrs</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>ae1dc5bdff1a42ab2a9db067efbe0f4ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>AllocateVbr</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>aa27475eb1fe3793f7674bcb2a0cace32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>InitAllValues</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a6f0e8743fa8125bf08fef4d3cd055c61</anchor>
      <arglist>(const Epetra_RowMatrix &amp;A, int MaxNumEntries)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>BlockMap2PointMap</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>abb068426180305e0a4c6ec296bc17627</anchor>
      <arglist>(const Epetra_BlockMap &amp;BlockMap, Teuchos::RefCountPtr&lt; Epetra_Map &gt; *PointMap)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>GenerateXY</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a84e2d468baf50c8571363545686c6892</anchor>
      <arglist>(bool Trans, const Epetra_MultiVector &amp;Xin, const Epetra_MultiVector &amp;Yin, Teuchos::RefCountPtr&lt; Epetra_MultiVector &gt; *Xout, Teuchos::RefCountPtr&lt; Epetra_MultiVector &gt; *Yout) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UserMatrixIsVbr_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>ace7db1e12541af152532c0da71e6fb15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UserMatrixIsCrs_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>ab4b4efa93517ffe489b2374d2ee9bfd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsOverlapped_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a90a4643027d719f28862e04706aa406b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Ifpack_IlukGraph &amp;</type>
      <name>Graph_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a0f57866dd14bad2becd852b94445040d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Map &gt;</type>
      <name>IlukRowMap_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a2231c96c58c4f354a843d649ed6d9814</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Map &gt;</type>
      <name>IlukDomainMap_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a702eba9b50c4d0c2b21e6a7ea1a11eae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Map &gt;</type>
      <name>IlukRangeMap_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>abf6d4f30f72f49b7eb7dbb8833d75ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; const Epetra_Map &gt;</type>
      <name>U_DomainMap_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a72527e94ea3adb5b2638f32cb61dc3bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; const Epetra_Map &gt;</type>
      <name>L_RangeMap_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a5002ea15a815f06d0adfa8333399179e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a38be4bfd1f1e0042c6280c2134bcda7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsMatrix &gt;</type>
      <name>L_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a7bd7a40fbd0b068fe92477e1fcbe72c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsMatrix &gt;</type>
      <name>U_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>aca5e960aeac9aa7727d8ea46d72e4bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsGraph &gt;</type>
      <name>L_Graph_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a866c8eb44778c5ed4364afaf57424352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsGraph &gt;</type>
      <name>U_Graph_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a917b588412fec7d9aadc42512c705cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Vector &gt;</type>
      <name>D_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a84c10952cf700e03a33e6e13e8c60046</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a8cf9e02376d5d169f2ebe84a6a9ad0e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyDiagonals_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>ac531cf09aad099fc1c7e7870b58406ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Allocated_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a78043671ad70e797756542d4e26d175c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ValuesInitialized_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a382893bd02a53c9e6178d782f831bc40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Factored_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a1d50e2d644e3f520cbb24954680078c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>RelaxValue_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a70d420e1cc1619bb480f8b363a5ddbb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Athresh_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>ac40737b704718304e9f4c7fa2a309c35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Rthresh_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>ad4cb2953ab0ee97af04932ec6d1f1d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Condest_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a2951bdad061fc73c52429917646258df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_MultiVector &gt;</type>
      <name>OverlapX_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a6d0e5635fdd8ded69579a12b372ebe0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_MultiVector &gt;</type>
      <name>OverlapY_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a38726e53e1f2a9560627ac761deb7742</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_MultiVector &gt;</type>
      <name>VbrX_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a228c611624404d3630844a6a878f09cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_MultiVector &gt;</type>
      <name>VbrY_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>aa8870b864f86db6d95b1ea65ed23453c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_CombineMode</type>
      <name>OverlapMode_</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a93cde50d7f733c07d26bb135bea53535</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a4ee46751ae4526c97e31afc7a321a8bf</anchor>
      <arglist>(std::ostream &amp;os, const Ifpack_CrsRiluk &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a2bb2e543dd0933765ad8bca3966227f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a3d857b61d3573b8759cc76027c124402</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a3b94f5869536c8cedc61a92a97832bf5</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a45c8b782f9ae1a7d0af53f814c0eb45a</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>aa5c0b06c2d271c73479e826cf3f7292e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>aea23e89c556ed7bb6fc347e9e74a1a1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a8ef1e905b80a8e0d7b77965cc5168a8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>a19c0e4e6ecf34cae58d63f4f1794117f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>ad13cf9a5c5bcbdcdcc152706c76906a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__CrsRiluk.html</anchorfile>
      <anchor>ade7b4fd7cd1892b34c1cc25f9fd2e6fb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_DenseContainer</name>
    <filename>classIfpack__DenseContainer.html</filename>
    <base>Ifpack_Container</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeFlops</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>aaba2becf7bc5fbf930b1333c558495d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeFlops</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a947fc6ee0b94b8a814a62fac08625508</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyFlops</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a08d8016e0642e472be1ce0f6eff4354e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseFlops</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a26401a5e5c2f99ab951bff9520676e4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>abb8a6e7700808cc9708d217b73371855</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>Extract</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a882324e4cd15297d9cc065d2930f8e79</anchor>
      <arglist>(const Epetra_RowMatrix &amp;Matrix_in)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumRows_</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a05281d9934ff6619709b1655e27591bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumVectors_</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>aa0e00680ccb5cd55d961440525c57e3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_SerialDenseMatrix</type>
      <name>NonFactoredMatrix_</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>ac1b6b2580ec3042f321f94b137b7ce37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_SerialDenseMatrix</type>
      <name>Matrix_</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a4000a11492484baa09cc3d0a3d7f3c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_SerialDenseMatrix</type>
      <name>LHS_</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a866a7f2b9f80acc8295dde26123c2aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_SerialDenseMatrix</type>
      <name>RHS_</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>ab2a7d5bca1765f0e670b2e9b1c0e7dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_SerialDenseSolver</type>
      <name>Solver_</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>aaefdca3697715e6537186a50270ee14b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_IntSerialDenseVector</type>
      <name>ID_</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>aaebfd015bd21add889bf9aedc2a46a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>KeepNonFactoredMatrix_</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a5f1b5864beb1818ce17360b96c630792</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsInitialized_</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a9d36dc3df31bfe4d3c4020589b531de1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a4c89d8243ef369aa171367f4d0ce0e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>Label_</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a0eafb36ed07a1931aa5776c97d7a51f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeFlops_</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>abbcb7259e5f9e73917f29ac8582402ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyFlops_</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a82ee14944ec2bba715bc05c13aaec989</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseFlops_</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>ac428be3bc00166f33d61e56f83ac97e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_DenseContainer</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a7d5bc9288cfbdba3212e82629f97767d</anchor>
      <arglist>(const int NumRows_in, const int NumVectors_in=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_DenseContainer</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a01f91d4a760c2e44508b85e2737bbc1a</anchor>
      <arglist>(const Ifpack_DenseContainer &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_DenseContainer</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>ae0db0d3a7497226b9d082a64886d29d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ifpack_DenseContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a45a115d3d4fb5baa1d77aca65ab64965</anchor>
      <arglist>(const Ifpack_DenseContainer &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumRows</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a378b1290d52c2b92bc9ba74c8c74c494</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumVectors</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>ad7549b3e0aee1b265e50bfd3058ae17b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetNumVectors</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a32650fa8dff692020030be92207dc8a4</anchor>
      <arglist>(const int NumVectors_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double &amp;</type>
      <name>LHS</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a688048c0044586220bd25e8e01a0467f</anchor>
      <arglist>(const int i, const int Vector=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double &amp;</type>
      <name>RHS</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a3e3ec541c04643d37dcf484f9c3e877c</anchor>
      <arglist>(const int i, const int Vector=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int &amp;</type>
      <name>ID</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>aae784c43ced9d418f504ea55ec8063e6</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMatrixElement</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a3c00e79a5f22d2195a66ea368804f017</anchor>
      <arglist>(const int row, const int col, const double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>ab2c51abbbb303ef94af9ac5ffa44588a</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsInitialized</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a7c1b4b712488670b87a766f775087bbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a4315c74692df2ba0ed3c0505d1591da2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>aa4af154618d750ce928cfb7804f90727</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetKeepNonFactoredMatrix</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a03c77addf9c4b95a18f80e4b6e1f7830</anchor>
      <arglist>(const bool flag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>KeepNonFactoredMatrix</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>adddba851b248b55abc00bf8fba989531</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_SerialDenseMatrix &amp;</type>
      <name>LHS</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a5284dae19e02fa9266042becd83884e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_SerialDenseMatrix &amp;</type>
      <name>RHS</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>ac23a578cd659e50fbc21b2b690787e30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_SerialDenseMatrix &amp;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a0bb25d436645a3f60e9dfc9035062cbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_SerialDenseMatrix &amp;</type>
      <name>NonFactoredMatrix</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a40b20eefc75c7d1290bdafe6f8af9539</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_IntSerialDenseVector &amp;</type>
      <name>ID</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a7db2397bceec6472fe9d445b9e5d4797</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Initialize</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a866c9a46dbe57bb6f80a5feeec67bf8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a7090a95555795098f48dad427a7b1620</anchor>
      <arglist>(const Epetra_RowMatrix &amp;Matrix_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a38ff05fcf81e26d45c4bd71dad56e02b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__DenseContainer.html</anchorfile>
      <anchor>a1c7a4f079be6a326066a2684cc638a42</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_DiagonalFilter</name>
    <filename>classIfpack__DiagonalFilter.html</filename>
    <base virtualness="virtual">Epetra_RowMatrix</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_DiagonalFilter</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a72056131385991aeb7c707048d13bacd</anchor>
      <arglist>(const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;Matrix, double AbsoluteThreshold, double RelativeThreshold)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_DiagonalFilter</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a87156e8a3fd1c858720f92111f994859</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyRowEntries</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a9485c75014d05af8a26b70f32ff3152a</anchor>
      <arglist>(int MyRow, int &amp;NumEntries) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>MaxNumEntries</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a74efb2fffbc8167d7ac2ea256926738f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ExtractMyRowCopy</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>afdc6c9c579ba4e1e780ba03532f9e4fc</anchor>
      <arglist>(int MyRow, int Length, int &amp;NumEntries, double *Values, int *Indices) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ExtractDiagonalCopy</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>ae4a49c0a52a15c564f796dc9c467c97b</anchor>
      <arglist>(Epetra_Vector &amp;Diagonal) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Multiply</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>af81a3708b2b34a431d9d5e49511d2b79</anchor>
      <arglist>(bool TransA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Solve</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>ac71693be9c313ecd3a781810dc92d235</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a57a199035f208232a5ac21853c845a58</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a3232349063445c82820d753424073279</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InvRowSums</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>ab593b7d08ec2cf5c68ae6d151a0c2dc7</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>LeftScale</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a338eafb3f8c88cf41fb4e23dba71ecdd</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InvColSums</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>affbb2fa9bfd422ad10918b92e260889b</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>RightScale</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a6d6e21e6c33e71c8d01f5d373e400a04</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Filled</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>aef04ed7f0408e76e7bdabe9b7ac6340d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>ae3082511916a59a17d01ad4fda31590d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormOne</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>ac6aa6b96707f75fcc98f4b77305364e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a3d91db156063aceee5e24771ef5de2c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a1865115887f98c237d2fc5a17085aa87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalCols</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a4295865a17d284523a326d4afe2ea0d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalDiagonals</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a2854eefc89c6e65d55ebe533b92ec396</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalNonzeros64</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>ae8d849bc46af10310325afdcc774da15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalRows64</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a9c109c70185ab2020b70133abd8fac8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalCols64</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>ab5f9be1152799255fb4e51fe3dc08753</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalDiagonals64</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a689e1324d425dd9d84cc95c9126ec9f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a2413efceac1de58e6c0eeac1e43b6461</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyRows</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a23cb66e4d0eea3f7d16c5a8cc414c942</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyCols</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a3968f17d7941b60a692ec430d55804ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyDiagonals</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a13e11f10b91f9df8d7a655f36cc1b03b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LowerTriangular</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a781f292d6cfe667cdf60e642471e19cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UpperTriangular</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>aebb31deb7879de379a520a8491c73d95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>RowMatrixRowMap</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a0ce07f18dcbdb9e4d5c96201425b5250</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>RowMatrixColMap</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a5107551938ef96c7d885ee37eca42f7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Import *</type>
      <name>RowMatrixImporter</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a6be03e624241003a0ce8fe2ae0f33dee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a749a6f8698085198791929c35313450e</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a4a7c8855014357141d37d28e138edf5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>ae72bd61fe20a1efcbaf9cfa27dfc00ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>ad8226ae2396802ddf8bb34ebf8b89215</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a49d0602015b05f2ec90a19af30b13481</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>acc6a3b14c897e246a15c25033af9f1a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>Map</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>ae7a1dbe05ad0cf42e55334225943b454</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>abd0af637d387c9754bf7d80f6fe39496</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt;</type>
      <name>A_</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a962c8c72a3bacaacb550d14bebacc4da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>AbsoluteThreshold_</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>abe123f44a37fd0129e7456859d2e917d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>RelativeThreshold_</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a34387637d7d47a0d712e544fcfd71f04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>pos_</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a691e0debb850101dd94cdfd330eaddd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>val_</name>
      <anchorfile>classIfpack__DiagonalFilter.html</anchorfile>
      <anchor>a2328f4b2c21a4e33e9e4e8b2f7c17a4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_DiagPreconditioner</name>
    <filename>classIfpack__DiagPreconditioner.html</filename>
    <base>Epetra_Operator</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_DiagPreconditioner</name>
      <anchorfile>classIfpack__DiagPreconditioner.html</anchorfile>
      <anchor>ab6fc551f3018cc36cb59976de7205d1c</anchor>
      <arglist>(const Epetra_Map &amp;DomainMap, const Epetra_Map &amp;RangeMap, const Epetra_Vector &amp;diag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Ifpack_DiagPreconditioner</name>
      <anchorfile>classIfpack__DiagPreconditioner.html</anchorfile>
      <anchor>a710b8bd1659686847de1efecb4992ec4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__DiagPreconditioner.html</anchorfile>
      <anchor>a25226de6a3a77ce7ba62da6871d74ec1</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__DiagPreconditioner.html</anchorfile>
      <anchor>a5b4e06417653b90eb906e888b4b7433d</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__DiagPreconditioner.html</anchorfile>
      <anchor>ae6f1f7e91f5fbaf8364a62f3a417caa0</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__DiagPreconditioner.html</anchorfile>
      <anchor>add93b92de5088fefe9d55236e8218dcb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__DiagPreconditioner.html</anchorfile>
      <anchor>a3f19ece20bef37e9ef1edf3cbfcbd1f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__DiagPreconditioner.html</anchorfile>
      <anchor>a33459d70ddf333b1b1956498ed39fcb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__DiagPreconditioner.html</anchorfile>
      <anchor>a43365546b95ab467b54dd398dcd41a1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__DiagPreconditioner.html</anchorfile>
      <anchor>a0f276795dd7f81cf50ced7c903bf2723</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__DiagPreconditioner.html</anchorfile>
      <anchor>a0fd954f7f757b630c96626cb4839e8f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__DiagPreconditioner.html</anchorfile>
      <anchor>af714f7b3296fb39cc4392ff74213eaf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>Map</name>
      <anchorfile>classIfpack__DiagPreconditioner.html</anchorfile>
      <anchor>a61935c3e0cbf3a4e404a4ef56c223a5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classIfpack__DiagPreconditioner.html</anchorfile>
      <anchor>af9959900b7361584d7dd61a807d69cef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_Map &amp;</type>
      <name>DomainMap_</name>
      <anchorfile>classIfpack__DiagPreconditioner.html</anchorfile>
      <anchor>a4d5686a61f861b69955a868e95f14b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_Map &amp;</type>
      <name>RangeMap_</name>
      <anchorfile>classIfpack__DiagPreconditioner.html</anchorfile>
      <anchor>a6553f5f376cc49ea94b8ffa5bbacc7b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_Vector &amp;</type>
      <name>diag_</name>
      <anchorfile>classIfpack__DiagPreconditioner.html</anchorfile>
      <anchor>a2c941f46cc9ac78bdd291a0500576b0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_DropFilter</name>
    <filename>classIfpack__DropFilter.html</filename>
    <base virtualness="virtual">Epetra_RowMatrix</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_DropFilter</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>abcd7b4db153459198de4119f372a8bcf</anchor>
      <arglist>(const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;Matrix, double DropTol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_DropFilter</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>abc9854dfc4160448a5d3bb68d701c9d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyRowEntries</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>adeffa8e4c22b374dcdc0ba0f5a64c948</anchor>
      <arglist>(int MyRow, int &amp;NumEntries) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>MaxNumEntries</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a25e30dd3fa658de844cc60118c3bd420</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ExtractMyRowCopy</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a4bca5bfcf360d3c5113c9d6403d023c2</anchor>
      <arglist>(int MyRow, int Length, int &amp;NumEntries, double *Values, int *Indices) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ExtractDiagonalCopy</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>ae2dbabc928fdf6724d8864724273629d</anchor>
      <arglist>(Epetra_Vector &amp;Diagonal) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Multiply</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>aa8369a731b6a4f024750b4267e959f92</anchor>
      <arglist>(bool TransA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Solve</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a8c7a198e25e3a466b75cd910cfe18724</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a36332eb32800048f89975b665e41b666</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a8f2eeb4d63a5754a2aa03126488f0931</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InvRowSums</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a220585a1c609179cb60e686e340f2470</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>LeftScale</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a0bc80bbb7cb6559183d3fdff6681985d</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InvColSums</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a3d90ebf58bd8588d37cb97cc97124613</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>RightScale</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a8f606e80453e03e7ee3bba07bd054d57</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Filled</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>ac452d4b6dc6d3582c74a727c26add977</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a9ef831e48bd705624e675c46c6eb58fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormOne</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>ae4bf07749814fefce8fe68dbfa58aa38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a8ee61bb826758fc4aa459c1cd1c69ae8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a349fe9e71b2ed9bd28dd205fb5f1440e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalCols</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a7a68c9dd9ea3484cba8a638dbf1fd281</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalDiagonals</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>ae30b6520d1fab62de935da9c643e7b2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalNonzeros64</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a95cb408ac28623702470f8902273675e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalRows64</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a44bad83a2d59a6c61005ca8ed18afc53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalCols64</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>afda9c00873ddae048f847939d1c882fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalDiagonals64</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a5b371acea307ccdc3a837404e44462da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a69d20d2ff8f3ff0755d5e60d0b4a0507</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyRows</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a9bf1d0584a58183a661652267f999a70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyCols</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a3e2ab2bbaacc25396a4ad749daa32632</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyDiagonals</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a7059f15b67765dd09ffa671429ffa198</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LowerTriangular</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>ac5f3d1f9d475db68d859998044b7d88d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UpperTriangular</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>aba8c550266dae9409c3e28c56f74aecf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>RowMatrixRowMap</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a4d2851928c6047422e735385bf41c215</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>RowMatrixColMap</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a1fd597e18a280dd4f36fd9e644f9c5f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Import *</type>
      <name>RowMatrixImporter</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a87b99a48decd091f6c6d6849f236d3bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>aba45932a31af454bc3494f22d85a4cc2</anchor>
      <arglist>(bool useTranspose)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a6c75e3865d834235a27c986342de4ca4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a533644d0703d1f8103d5b2d236e7a325</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>ad156727da1f7a0a73d93e416e8d8f684</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a0fe21cd34ebe71a5dcaedcea69543b7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>abdd46aa60a4fe8bfb340932f93e007b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>Map</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a273afeb3bfae8785361cc7870d6ecda8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a216dd2871764a355ee3ea84c76fb962a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt;</type>
      <name>A_</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>ab6f1dc1f3403ceeee1c47ac5ce470cc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>DropTol_</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a836cf09bbc3df66b131d275013561b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxNumEntries_</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a871965c1ea2d4da6ba7055d558932365</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxNumEntriesA_</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>acf303e7d96e1f5e0e02a3a1df0ddcb2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumRows_</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>ad9c6bfb163bfc46d9e116b77549731ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumNonzeros_</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a157bdae1002e7c583c7117ab8997878a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>Indices_</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a36cb9943598be0c3a00c54429bc1eb4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>Values_</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>a9ee1752af483eebd3fcc74a1c0675cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>Label_</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>ae7311e795946773c8729c8779bf71191</anchor>
      <arglist>[80]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>NumEntries_</name>
      <anchorfile>classIfpack__DropFilter.html</anchorfile>
      <anchor>ac0d51af1f6a5f2fe1db4376d90b29117</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_DynamicFactory</name>
    <filename>classIfpack__DynamicFactory.html</filename>
    <member kind="typedef">
      <type>Ifpack_Preconditioner *(*</type>
      <name>builderFunction</name>
      <anchorfile>classIfpack__DynamicFactory.html</anchorfile>
      <anchor>a93fb873de76cbe7cdec5e21dd10622cf</anchor>
      <arglist>)(Epetra_RowMatrix *, int, bool, bool)</arglist>
    </member>
    <member kind="function">
      <type>Ifpack_Preconditioner *</type>
      <name>Create</name>
      <anchorfile>classIfpack__DynamicFactory.html</anchorfile>
      <anchor>ad7cbd5ea968c897e2893d2ab5f549cd5</anchor>
      <arglist>(const std::string PrecType, Epetra_RowMatrix *Matrix, const int overlap=0, bool overrideSerialDefault=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Initialize</name>
      <anchorfile>classIfpack__DynamicFactory.html</anchorfile>
      <anchor>ab710745f187cb2257efeceadc7085085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>RegisterPreconditioner</name>
      <anchorfile>classIfpack__DynamicFactory.html</anchorfile>
      <anchor>a6ba45bea0904e0a59286edb628e1c1d9</anchor>
      <arglist>(const std::string PrecName, builderFunction PrecBuilder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Print</name>
      <anchorfile>classIfpack__DynamicFactory.html</anchorfile>
      <anchor>aacf63ad30c31ab527e509cfdf487b636</anchor>
      <arglist>(std::ostream &amp;os=std::cout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ifpack_Preconditioner *</type>
      <name>buildPreconditioner</name>
      <anchorfile>classIfpack__DynamicFactory.html</anchorfile>
      <anchor>abfabb1da671cd4f6cfc95936eff5cd38</anchor>
      <arglist>(Epetra_RowMatrix *Matrix, int Overlap, bool Serial, bool OverrideSerialDefault)</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static std::map&lt; std::string, builderFunction &gt;</type>
      <name>PreconditionerMap_</name>
      <anchorfile>classIfpack__DynamicFactory.html</anchorfile>
      <anchor>a76e41cc54dbbed41fa0534a5035fde00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static int</type>
      <name>NumPreconditioners_</name>
      <anchorfile>classIfpack__DynamicFactory.html</anchorfile>
      <anchor>a4d0e9608320b4d68cdac11ac1f70134a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static bool</type>
      <name>Initialized_</name>
      <anchorfile>classIfpack__DynamicFactory.html</anchorfile>
      <anchor>af1445cfb0020b67f73db98ef69b3568a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_Element</name>
    <filename>classIfpack__Element.html</filename>
    <member kind="function">
      <type></type>
      <name>Ifpack_Element</name>
      <anchorfile>classIfpack__Element.html</anchorfile>
      <anchor>af44771abc13abbc11c8722beedc8e1e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_Element</name>
      <anchorfile>classIfpack__Element.html</anchorfile>
      <anchor>a1a72c48ddfb94a7a4c2f67cd5602d77e</anchor>
      <arglist>(const Ifpack_Element &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Index</name>
      <anchorfile>classIfpack__Element.html</anchorfile>
      <anchor>ab67a44785d224a6966dee13fdb784aa1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classIfpack__Element.html</anchorfile>
      <anchor>a377cf04d4d1950a76192e5f198cf3718</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>AbsValue</name>
      <anchorfile>classIfpack__Element.html</anchorfile>
      <anchor>aedf772bd0d039a4baee6e45936098ddb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIndex</name>
      <anchorfile>classIfpack__Element.html</anchorfile>
      <anchor>a7a57bde96e657c23d7c1ac400285d9af</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValue</name>
      <anchorfile>classIfpack__Element.html</anchorfile>
      <anchor>a987968b38b7a469fe070dcbfb6da73a4</anchor>
      <arglist>(const double val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classIfpack__Element.html</anchorfile>
      <anchor>adc347f6d90d733288609709d60b0df33</anchor>
      <arglist>(const Ifpack_Element &amp;rhs) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>i_</name>
      <anchorfile>classIfpack__Element.html</anchorfile>
      <anchor>a70531f31525114147f71b6c096cab256</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>val_</name>
      <anchorfile>classIfpack__Element.html</anchorfile>
      <anchor>a5c5f6b0aae990c58e8c411fdb3cf2384</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>aval_</name>
      <anchorfile>classIfpack__Element.html</anchorfile>
      <anchor>a633332e607f626f780d3c7b9ddb65a9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_EquationPartitioner</name>
    <filename>classIfpack__EquationPartitioner.html</filename>
    <base>Ifpack_OverlappingPartitioner</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_EquationPartitioner</name>
      <anchorfile>classIfpack__EquationPartitioner.html</anchorfile>
      <anchor>a090493a036047496c37acdd2726ed2cf</anchor>
      <arglist>(const Ifpack_Graph *Graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_EquationPartitioner</name>
      <anchorfile>classIfpack__EquationPartitioner.html</anchorfile>
      <anchor>a5fed990c1fc239621b4598a819d1de9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPartitionParameters</name>
      <anchorfile>classIfpack__EquationPartitioner.html</anchorfile>
      <anchor>a3c137c55268a892bd11266a440ea2ffb</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ComputePartitions</name>
      <anchorfile>classIfpack__EquationPartitioner.html</anchorfile>
      <anchor>ae89eb9e7aa3a6997045b1dab38e94daa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_Graph</name>
    <filename>classIfpack__Graph.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_Graph</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>ac26519ce93fe5a01b673a56375437525</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumMyRows</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>a10aed88889ac0a51d010e66073b8eb7a</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumMyCols</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>afb452f7451e37d9dd6ecf837cce9e765</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>ad64fc7635a973caa14b24a6391df8718</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumGlobalCols</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>a94b2c71e02fd5ec36c73ad185d355e49</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>NumGlobalRows64</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>aad37a5979c0f6c4794e78066054e3ec9</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>NumGlobalCols64</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>af63478f9b26a4915f5edcffb0eadfc6c</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>MaxMyNumEntries</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>a179b87b4363e8ec0d73b81a0e7ec4ca3</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>afabab52248125879af9d72e92ca8701a</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Filled</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>aef1364b1771497bd80ef0c81407fb84d</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>GRID</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>a380fb31541274164d5fcc6d7daa4115e</anchor>
      <arglist>(int) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>GCID</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>a95db9fc627cb7836270b8ec6812d684e</anchor>
      <arglist>(int) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>GRID64</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>aa9d59eaef05863d8b8a78a05e94cbc8a</anchor>
      <arglist>(int) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long long</type>
      <name>GCID64</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>ae0b3e904b9e89a97fcd79cfa05d31df5</anchor>
      <arglist>(int) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>LRID</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>adc035d0a1845d980c81ec4c775c03107</anchor>
      <arglist>(int) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>LCID</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>a9b57df5293cd6d575e26c7229b5d450a</anchor>
      <arglist>(int) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>LRID</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>a30316300990e4c479c4d0737f59a4485</anchor>
      <arglist>(long long) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>LCID</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>a3aa5067c83a69997b0022ee173f1c8ab</anchor>
      <arglist>(long long) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ExtractMyRowCopy</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>a00f956aa51f3e6defe6cc8dc12bafc3e</anchor>
      <arglist>(int MyRow, int LenOfIndices, int &amp;NumIndices, int *Indices) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>a56fa08e40f8a754fff7146894a57f75e</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__Graph.html</anchorfile>
      <anchor>a49f060ff7cecb38118cba522114bf137</anchor>
      <arglist>(std::ostream &amp;os) const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_Graph_Epetra_CrsGraph</name>
    <filename>classIfpack__Graph__Epetra__CrsGraph.html</filename>
    <base>Ifpack_Graph</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_Graph_Epetra_CrsGraph</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>a1e2b4460846abd303eb3cd642b927854</anchor>
      <arglist>(const Teuchos::RefCountPtr&lt; const Epetra_CrsGraph &gt; &amp;CrsGraph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_Graph_Epetra_CrsGraph</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>a950e4bc77da06afa1054cf337ccbd52d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyRows</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>a36116d5ba4744365385818be3d54a690</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyCols</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>a398ac60351c35fb991b05337a14ee242</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>a2b9d5401756f9cc40090abdf0a9c81f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalRows64</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>a7f8d221ad74c344915e7b46ad7e93bd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalCols</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>a1e91e776b2fba5168dc0c15245d65931</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalCols64</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>ad9dc96c81e1492bc5669dd10836733c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxMyNumEntries</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>a94097b47620140a05dca06fc80b8f12b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>abf2296eeef346d3dc5638e0c8cbf6750</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Filled</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>ad5c96f98dc9d1cf37a4e87c58f73374e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GRID</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>a049e05a464bcb12723f6923663b384af</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>GRID64</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>a7c46ea450a51c348b4569fc55920995a</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GCID</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>af4b8f52be89d5785897d7d8cacf6e9e9</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>GCID64</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>ae0fa06e30787331fb8ff319cb5f9d70b</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LRID</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>a2a4097822464ab329be174acfddb6169</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LCID</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>a6310e16d7277cfd1395d253d081be734</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LRID</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>a447200d514df84e516b44c7f2a90fb5d</anchor>
      <arglist>(long long) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LCID</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>a790be893b0477fdf2b11b9f641622087</anchor>
      <arglist>(long long) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractMyRowCopy</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>aa72f1ed3f781f8623fee79fbbf65fdbc</anchor>
      <arglist>(int GlobalRow, int LenOfIndices, int &amp;NumIndices, int *Indices) const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>aeb24205f1f8525af0cd03ad7abdc702f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>a7dbd3eee6a67cb9b632151e90d613214</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>a3a05d86b445bcc05a2c220704e0a8d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyCols_</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>a4815fc756ce989fe89f5316350fa6bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalRows_</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>a681d4ecb52d827c1f3d741a25fdc0b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalCols_</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>ad694dc39b471ac8f5b9ec40e1d202b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxNumIndices_</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>a5af37978ee6244a0e16c59460ea7014d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; const Epetra_CrsGraph &gt;</type>
      <name>CrsGraph_</name>
      <anchorfile>classIfpack__Graph__Epetra__CrsGraph.html</anchorfile>
      <anchor>aff7203a326fc0075fbdea20dab23e13c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_Graph_Epetra_RowMatrix</name>
    <filename>classIfpack__Graph__Epetra__RowMatrix.html</filename>
    <base>Ifpack_Graph</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_Graph_Epetra_RowMatrix</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>ab2bc55d81242a22ff547ec0df081045d</anchor>
      <arglist>(const Teuchos::RefCountPtr&lt; const Epetra_RowMatrix &gt; &amp;RowMatrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_Graph_Epetra_RowMatrix</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>a5b7f89948e6386c3b0e22bccb82e9c21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyRows</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>aad258e3065266afa4409de0a19d90b0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyCols</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>af06831a6da13f0f3fd0edd7c68388d49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>a122b2a58f7dd0b2a3b0b13ac62f5bcab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalRows64</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>a676cf79147cae963f59e787f097a5900</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalCols</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>a866589cd3fbc59c37741df96bec12256</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalCols64</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>a247abcb6a8552f7f222a97f279f3db3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxMyNumEntries</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>a3ac9ff5e02f94579266a3f7e04a00e56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>aaccb24570ae18daf251e246d650c48b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Filled</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>a8fd64debe152184b72b090765dc7c9bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GRID</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>a40a737ce0ff0ec9fec34493abbf6d084</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>GRID64</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>a6fbd7804d7977cb3bd1a3a1e7ebfcd73</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GCID</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>ae0587fb366c05f2f69ce2301a29c49d2</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>GCID64</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>a2dbd48318f48304d4036a96c674ae78f</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LRID</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>a5448f62ed986b0db138b2b92b5657360</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LCID</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>a0d2d295dd4279c031b0b902149d5d711</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LRID</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>aa199b9ee406e9fd8f2493a520afa77c0</anchor>
      <arglist>(long long) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LCID</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>a2082493e4a6e3a593286e8e9850539e1</anchor>
      <arglist>(long long) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExtractMyRowCopy</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>a540ed097530294e69dc9a0f67b333e2d</anchor>
      <arglist>(int GlobalRow, int LenOfIndices, int &amp;NumIndices, int *Indices) const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>ad4a9a8845bb284fad01132e342be48f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>a4ee49974edc57f8835e3023823c96c31</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>a7cce88218def2a37742e35ab7395062b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyCols_</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>a412b4a8f67ab70f1a6cec91cf117bc26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalRows_</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>aac40ea5601d0a7244bd6c0acb1e478f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalCols_</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>aa490cd91e7dd6f9074acabf0eb6a9227</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxNumIndices_</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>ab9060d656e17608361cb9811fd827e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; const Epetra_RowMatrix &gt;</type>
      <name>RowMatrix_</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>ab8c43a3edc5306fb4f4319efdca8b82a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>Values_</name>
      <anchorfile>classIfpack__Graph__Epetra__RowMatrix.html</anchorfile>
      <anchor>a56fcca24342a78b677520ade09f58691</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_GreedyPartitioner</name>
    <filename>classIfpack__GreedyPartitioner.html</filename>
    <base>Ifpack_OverlappingPartitioner</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_GreedyPartitioner</name>
      <anchorfile>classIfpack__GreedyPartitioner.html</anchorfile>
      <anchor>ac55a702e88483f0c5477389fcbf86598</anchor>
      <arglist>(const Ifpack_Graph *Graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_GreedyPartitioner</name>
      <anchorfile>classIfpack__GreedyPartitioner.html</anchorfile>
      <anchor>add4553a38674654a21b35d91d79f4ccb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPartitionParameters</name>
      <anchorfile>classIfpack__GreedyPartitioner.html</anchorfile>
      <anchor>a015ffa00844cf1a4d4acd5c1bf4987af</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ComputePartitions</name>
      <anchorfile>classIfpack__GreedyPartitioner.html</anchorfile>
      <anchor>ab62a6047bcf33d34afb3231685e2d385</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>RootNode_</name>
      <anchorfile>classIfpack__GreedyPartitioner.html</anchorfile>
      <anchor>abb2a53801f2cede512ff5fc40cc31a10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_HashTable</name>
    <filename>classIfpack__HashTable.html</filename>
    <base>TIfpack_HashTable&lt; int &gt;</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_HashTable</name>
      <anchorfile>classIfpack__HashTable.html</anchorfile>
      <anchor>a1b59c647193c80c27a726a22ea033d8c</anchor>
      <arglist>(const int n_keys=1031, const int n_sets=1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_HashTable64</name>
    <filename>classIfpack__HashTable64.html</filename>
    <base>TIfpack_HashTable&lt; long long &gt;</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_HashTable64</name>
      <anchorfile>classIfpack__HashTable64.html</anchorfile>
      <anchor>ad5debf3c88618e17e43e6a947029097f</anchor>
      <arglist>(const int n_keys=1031, const int n_sets=1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_IC</name>
    <filename>classIfpack__IC.html</filename>
    <base>Ifpack_Preconditioner</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_IC</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a46ef9e892781cb66d548be1fbe9416e8</anchor>
      <arglist>(Epetra_RowMatrix *A)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_IC</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a9c9ced198738f2b65f4f85f72b74133e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAbsoluteThreshold</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a2320be3a80acdf9d36b52a24df0f7a52</anchor>
      <arglist>(double Athresh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRelativeThreshold</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a523198eafeff0d3ebb64d506d3a3b85c</anchor>
      <arglist>(double Rthresh)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a191d41e158c045a4438d11f16eb0716e</anchor>
      <arglist>(Teuchos::ParameterList &amp;parameterlis)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetParameter</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a83995f7ac6dd195ba9f690772a3cfab2</anchor>
      <arglist>(const std::string Name, const int Value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetParameter</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a03243788e6358894f71716a2e3177fb4</anchor>
      <arglist>(const std::string Name, const double Value)</arglist>
    </member>
    <member kind="function">
      <type>const Epetra_RowMatrix &amp;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>acbf03d71e835624e4c7580f568dcd1c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_RowMatrix &amp;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a5c5f735e524142ddadde4ac251bbd5e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a0825d9b67befda75b2f143418d19f7fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Initialize</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a15cf44d2c0b7b2722f3c6118fd94475c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a35247d221418af32a30629e7e6b676c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ComputeSetup</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a235787bf90bcd7d87d5e721161bd74c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a4a0023b956f98e37a5b285ed53f17b08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a5e610d543533ad6830077d37f2a4d286</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>ab33ab5da5b1c7ab2bb7cc216aacf2bd2</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a17ca49d345cf06fd4a394b794c948287</anchor>
      <arglist>(const Ifpack_CondestType CT=Ifpack_Cheap, const int MaxIters=1550, const double Tol=1e-9, Epetra_RowMatrix *Matrix_in=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a1b8971125617535f945189affcdaa924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetAbsoluteThreshold</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a9ef82a0721340c7951d91b449be2a9cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetRelativeThreshold</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a0b5108f8bfcf6d5b13ef599bfa823f76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a82b1a6edc927d0926b9637bd373835d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalNonzeros64</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a840171bd2e9d36636ab4d6b5610efd52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a73c386e796d1d35c5f35252db19e1b9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Vector &amp;</type>
      <name>D</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>afdbaef9a9a3fed1e65d61bb6e2463b17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_CrsMatrix &amp;</type>
      <name>U</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a872ee1643a25bef5b3b670d3de590b5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a8f71ea4bd44cc31b3f0d76ebc4db8548</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetLabel</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>afa5203b157bd596a9522888416a04662</anchor>
      <arglist>(const char *Label_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a68cf068b48475e0cff42a3a9cef921aa</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumInitialize</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>ac05c5f4abf4444cd4554aacbdfebd2ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumCompute</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a856486e17d64496a5eaf354df0a7299c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumApplyInverse</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a67994b510eb9857ab793bf87f68ef60e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeTime</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a4e42542a4a5fef0c88ba1552eae393cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeTime</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a7d57e78b948d6a2c54e75c6ff753a376</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseTime</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a427b0fb42c985ff152861a853a2fc72c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeFlops</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>ac3afea7dcee35b7a2b2249c17c25d67b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeFlops</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a1a4ec94d041b5e74d9648a455b855697</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseFlops</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a9a3f44bb5e992a230214b3f788588993</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>LevelOfFill</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>aecf8f7d3695e0afbaf4e9d467a08dc61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>AbsoluteThreshold</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>aa9b6680261a633966dc6241409a52c76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>RelativeThreshold</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a236001190fa13a9469846945b030368a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>DropTolerance</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a64c7905f8daf7523a675f6274cfb0c71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt;</type>
      <name>A_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a95b0ea1aba2283e33fcc3d9ebbba4e6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a358266a845fe200f34a4c19313fe5e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsMatrix &gt;</type>
      <name>U_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>af81aa480f1a029ab61a84e77d96589db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Vector &gt;</type>
      <name>D_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>ac4b18fe766da850fdaf3d3f498487177</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>aaeb0a1ec7526414ac3b037a21c0ac566</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Condest_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>aacc4bb37a4b17866247a972978218f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Athresh_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>ae92259b9f14ebbb83c115f58595a5731</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Rthresh_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a797bcbba6c3b8502c0b026e4680e25e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Droptol_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a39ecb568338e329e693772a221e38b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Lfil_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>aad143312e87647754f62c57dff1f4cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>void *</type>
      <name>Aict_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>ae076ca910d3d0d36c5abeecc8424ccda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>void *</type>
      <name>Lict_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a161557c6b16c997405e051450d1cc145</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>Ldiag_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>ae40ff5cb5f594cba7b3b414435c6ddc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>Label_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a4d13d4e0c921c18ef67487e387778246</anchor>
      <arglist>[160]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsInitialized_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a257fd303d22d0f68dc0eed79c12634e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>afc88590226bb8847133805cf155c0dc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumInitialize_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>af691d166b677077f81aaf5bad2f02f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumCompute_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>afbf76e04a72809843f7c549922284ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumApplyInverse_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a536bbb6ffa33100d544d420a4e010bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>InitializeTime_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a4fd0f6e9a4da4787c2193ff5489e1f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeTime_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a92283ee8257df7f095cd84e9c55e1adf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseTime_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>adb2bbce2205c79fb056d3cecc059bf5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Time</type>
      <name>Time_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a665a1877198c58d3d33f2dd5ac91e519</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeFlops_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a5fbe45b91083c030fc0c36b84c7084e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseFlops_</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a887626bb25dfd58051a8af980a6b7b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a7c81cf4a4fdf0f9f36b9e5eb2b8b548f</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>ab488924f9b6417da30e6b001a1c76a2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>aa12cb30f35a4b4ecfc66ac88b8937aaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a6f270b7cbc42e3a6d0bbc84b66f0df3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>abf49bff56ffd1fd3be0e6ee373784fa4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a59bf17ebecac84007e237a6fb9f02aa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__IC.html</anchorfile>
      <anchor>a6bd3e88c9ba034a7db8b7a09968864b3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_ICT</name>
    <filename>classIfpack__ICT.html</filename>
    <base>Ifpack_Preconditioner</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_ICT</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a4840ecf4a305ab3dcb8eeaec07f4b25a</anchor>
      <arglist>(const Epetra_RowMatrix *A)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_ICT</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>abbe8e2c13164d8cccdeb46204cf52fa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>aad24358726906e64858f216c6465ed7e</anchor>
      <arglist>(Teuchos::ParameterList &amp;parameterlis)</arglist>
    </member>
    <member kind="function">
      <type>const Epetra_RowMatrix &amp;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a761108e688ec4dab17ff320001c5a3d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>aa8afcc3bf4e4e9f3bca0a0607407de61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Initialize</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>ab9b79f5976dbe6d6e454bcb80fe4ddaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>aef7483e6a77f3a31cdefbd714febf7f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a9581da3863feca9355f3a55d4f10bb96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a4e7777ad65f3d75f65a8357601499a1f</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a41118385122442889c2e4573246e7c7b</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a4cf620984126c384aab70e2f19fe66c0</anchor>
      <arglist>(const Ifpack_CondestType CT=Ifpack_Cheap, const int MaxIters=1550, const double Tol=1e-9, Epetra_RowMatrix *Matrix_in=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a7259ebb60d27c764b5bb071720942253</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a1841621f4b792133563d6a4eea1d3a7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalNonzeros64</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a13eeb9b87ecb6a32124ebc5048560005</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a90118822503a22aa6bd8e37b7f6f00a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_CrsMatrix &amp;</type>
      <name>H</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>aa0855785806272bf30f92f3385f1171e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a394bc3a475ceb5c44d1b363fa3cf33b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetLabel</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>af2d631176e9495c4fd01718502302602</anchor>
      <arglist>(const char *Label_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>aa4cf382d7a48e7f816f54b9136cb6080</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumInitialize</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>ae3aa53e0362b84f187138a6688ae1711</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumCompute</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a63a6b59d0785edf41cef2513d039067c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumApplyInverse</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>aa186b34572c9a2d448f4a288bb1f609d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeTime</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>af9717a19a0c69367a2a86176fcc4d259</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeTime</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>adb6bcb92f65d712385ecc43dc29f960c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseTime</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>adf8d7cffce8f8c7413b258a4281a6665</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeFlops</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a48d548eeb8c747c7090bf47ff7ae78c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeFlops</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a37de1b2307acb0c5e383a4a5e6539852</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseFlops</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a4da9e06fb04afd63c5a23feea41731a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>LevelOfFill</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>ada1d1d039cf4664df7d6e259fb3ba2a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>AbsoluteThreshold</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a06931c0623f13ce2b58efba842851ff1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RelativeThreshold</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a23e57cfc6fc5eae1e8116efd661602fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RelaxValue</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>af8090fc5b118d00e8fce98761b9c8161</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DropTolerance</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a53d5f8711c5c8b0aa89f51ed805849e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Ifpack_ICT</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>aa21ca01b2a848ae8edfb1d089779205f</anchor>
      <arglist>(const Ifpack_ICT &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Ifpack_ICT &amp;</type>
      <name>operator=</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>afb0d8cf778737cec15e8b5bd888d2910</anchor>
      <arglist>(const Ifpack_ICT &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a6bddd4e88db68acc2ab8172b4eed2629</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>TCompute</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a5d2b5fbabc9c06fb59e1f131c805184a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_RowMatrix &amp;</type>
      <name>A_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a0600952da0a1289a55b4f0b1f1e9e9ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a110546926f896c18c270d78c79748970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsMatrix &gt;</type>
      <name>H_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>af3b0d94b6cd110cf5088d4b1feb96def</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Condest_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a5d65096caa58d8365e629122398cfbb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Athresh_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a6c3bd34b7a05eb7adccb3c1c95c91098</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Rthresh_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a0199a71656e452c5bdf6108c009c1382</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>LevelOfFill_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>ac00831bee173d41d633ae348a0ab47cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>DropTolerance_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a11dea5272358c085e9a5c00b93e997e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Relax_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a20bb4a41ebc566b1ed40a4d573fb754d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>Label_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>afbf7d4016a17fd6334e8da9b3c488920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsInitialized_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>affe86daf7f8a781b4a1cc8b4703a6b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>abcb5ef27069bea3bc80eda290373b47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a20df1dab08b05ea6e33a86f7ff63ab6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>ac22d3368c7e70676d2075ec59bc6dcb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumInitialize_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a649b3220861ed70a9b42de87faa55ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumCompute_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>ae5d821b346a68ec7277cc62432b75a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumApplyInverse_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>ad60333b49baf3e738adbb79980e59f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>InitializeTime_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>aaa450ae55be39b0a10513a30e2e6cd1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeTime_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a882121047cd306f4afedef6f023baa6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseTime_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a96b58921efa1a5d080c4434f1623142f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeFlops_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a0f8fdd9ac9a06b30d4827f10d67886b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseFlops_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>afe4e19a2bab5e6ae7a1c8c3f76f4dd94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Time</type>
      <name>Time_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>adad971a89012f6f51750352d2fec638d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>GlobalNonzeros_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>aa4aac882693541bbd22498c1af8e1d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_SerialComm &gt;</type>
      <name>SerialComm_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a862bc53c7e39fff3e288f4708f87a28c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Map &gt;</type>
      <name>SerialMap_</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>abf8878390f4f6e1edb26a1cdb2d44af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a231c3884ad1d5cd02b572fe459052e8b</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a2dbdb644e8c84c68e38f7571e1411c86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a505841583a27287cda8098bc0ec1a4e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>ae7e64b8662a28fe2e7f3eba57b1ce656</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>a38713b42d4e1b3b746480561c41f6e5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>af41e5a52a913f481bc921d12ff4d9f2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__ICT.html</anchorfile>
      <anchor>ac8f0a16056b2877b6792f1d3c9209831</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_IKLU</name>
    <filename>classIfpack__IKLU.html</filename>
    <base>Ifpack_Preconditioner</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_IKLU</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a7053500687dfb1de10ac605c30aa50bb</anchor>
      <arglist>(const Epetra_RowMatrix *A)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_IKLU</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a27a8e2ef3e44c3d656c6aa596dcdd91c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a38556e66152071a32045b442d9079b25</anchor>
      <arglist>(Teuchos::ParameterList &amp;parameterlis)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Initialize</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a9e960690df024bb8ba47ad266fc93605</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a627e85e0a5d84e4cb3a68c18b894fa6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a30c09053315ceb9fe50635eb19adc802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>ab6c429808fd0835b024d7774cd7b3271</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a95a9fd9251854e5411f405bb7ce7b803</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a0d2754b37273612c43325327f9261374</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a50502ddbdb56667673741159998699a6</anchor>
      <arglist>(const Ifpack_CondestType CT=Ifpack_Cheap, const int MaxIters=1550, const double Tol=1e-9, Epetra_RowMatrix *Matrix_in=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a22d3c5f307a3fd1a5d88344fed724d50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a291af71c0e1699d86190feed63fe0fc9</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a6035272abe4090254407ce7175c2c87d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>adda62dd619ed87348ecbf5d788877932</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a93484b17e66bf7f2664e465ae4b39394</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a5f695ccccb329fe9f659e9aa2c6bebfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>abea9d69711af3d4df621ac56af5968a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>ad7d8c29c086c36af990d76760a49012d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_RowMatrix &amp;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a0a0d35ecd3318352bf59fb22f9e2bb6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_CrsMatrix &amp;</type>
      <name>L</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>ab3576de5b10e96b571f257b40628b98a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_CrsMatrix &amp;</type>
      <name>U</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a84a54d9be5acf36be50b7e50f183028c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a54c5ff5ecc5c306ff637728563614e1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetLabel</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>af0832f087f9c7666885a4b22e495a0da</anchor>
      <arglist>(const char *Label_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>ad1ab27c7e8990d3c4897182c7380bfb9</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumInitialize</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a26a807899e9b73f57da21118bc06cd0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumCompute</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a58e93794cc0658d0269c897422ae0028</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumApplyInverse</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>aada77363ab506c0838843d2dcac712e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeTime</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a484a753b48beb887d0442e517ad422c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeTime</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a31efa02320c77b42894915db9f772f31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseTime</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a38287182dbbf2deef0b580ed55013e0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeFlops</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>af00be58fd2420771a87b7ff5d38e5015</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeFlops</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a6c442cfac0b75f60046996185b05f99f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseFlops</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>af25ab52f579c008fe02054863d6d79c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>LevelOfFill</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>ae2af3d8f37ad9644b898a1a3a6a89537</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RelaxValue</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a402c6ccb1f5745bb8eecdbdfe0a49eed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>AbsoluteThreshold</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a2fffda0a5e2330885b8c47c0d0f6de2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RelativeThreshold</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>ac72dcb3368846bea8725128c18325fba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DropTolerance</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>aab0240d92bed2cfbb83fad5460af5daf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a1a3e4b2f0cc633f65c8b4452d89957b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalNonzeros64</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a0fad38d1bb3899f147c17c85ae3f491e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a104c8b0f724500d63750a9a148954fb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Ifpack_IKLU</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a205a3606aee577edd4c9f7fdb14766db</anchor>
      <arglist>(const Ifpack_IKLU &amp;RHS)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Ifpack_IKLU &amp;</type>
      <name>operator=</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a21dbec2fb265944a97d2cde3db3a7bc0</anchor>
      <arglist>(const Ifpack_IKLU &amp;RHS)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a72e315c4dbf51607687ffd0dd2d4a338</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_RowMatrix &amp;</type>
      <name>A_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a2b51815e70b37378064b22c62bad1dca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>abddb3599b6acbb6f06446cc0840233c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsMatrix &gt;</type>
      <name>L_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>aaa3739196e959bb9be6fe65d9127278d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsMatrix &gt;</type>
      <name>U_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a153664188a069286cdbbc6fac8a5ec86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Condest_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a0a0b9845dc0532e59714238eaa07ef74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Relax_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a9c806e7b8ecce030bc6f5b5626d19137</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Athresh_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a6b138c1d2aa3251f5adb6bc44ff24942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Rthresh_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>af064cbfcd00efafc83f8da41624be788</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>LevelOfFill_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>adcf42085de65db33bd8149bdee774a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>DropTolerance_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a0dfbcc5a14cdb0cf8ca9f5f3a8a48cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>Label_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>aa2a04774426396f595f8fdd9e90c4a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsInitialized_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a5d7a36008d6dc6c948358e9c42efb490</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a47a639dc183e404189389825802595c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a85326fedbed33d52a45689e32377ab8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a059da9ae6498dd9e7c6ebe69f4080f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyNonzeros_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a075edb572ca76984f4b9d372da9b3643</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumInitialize_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a67c434a80e748920fce3d7d9a3d5198a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumCompute_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a43b881c4e2b9500ef6f6e1320c6ed04b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumApplyInverse_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a35207f37eda71bc960c4896fc531dfba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>InitializeTime_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>aa0447ae04d74e19b6050a03c2a6b17bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeTime_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a5c1681b246fb0ce814a91c25ca773ed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseTime_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>acd2345af216269d3cf1181d3b3ba59a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeFlops_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a41725120f6c72d8ef9b8c3cd72e0176b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseFlops_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>adbf386e0e2adecb378a7312c4ee4b8aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Time</type>
      <name>Time_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a55d9e26cded11d391db132afca6e02d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>GlobalNonzeros_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>ad58a7a4a1fe1b242e3cf48de6ab65471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_SerialComm &gt;</type>
      <name>SerialComm_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a8817470830c3889da42d659cf4109446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Map &gt;</type>
      <name>SerialMap_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a86e4fb95ae5c60f7d6316a859abca396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>csr *</type>
      <name>csrA_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a305f6ceba0a32fc4b9b02646855616e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>css *</type>
      <name>cssS_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a8c8d71d398e03cd7e447ea1d2000cb19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>csrn *</type>
      <name>csrnN_</name>
      <anchorfile>classIfpack__IKLU.html</anchorfile>
      <anchor>a1ef31973e6c98132413b17fd4566f9f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_ILU</name>
    <filename>classIfpack__ILU.html</filename>
    <base>Ifpack_Preconditioner</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_ILU</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>ad47ea44f74c2409c713ec8eb40ffa0af</anchor>
      <arglist>(Epetra_RowMatrix *A)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Ifpack_ILU</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>ac816a13a687e2fc42b001e2449225a8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Initialize</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>abe33cf6354ad45c9c9d915a064c6a305</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a34efa2789dbc936e777415c5ada1b170</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a4e2c35ad10197ae996290eac82fcdc77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a681db6eb0bd2a76da6ac705df8a7ed5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a47a1aad8ae6dd2de66c7a49964ff1457</anchor>
      <arglist>(Teuchos::ParameterList &amp;parameterlist)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>ab3fa53c106ddf03b70f2a6f4936114fc</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a95f9b66b823447270a31b2636a135533</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a7ff1e04f57831e00a2743bb1b6644175</anchor>
      <arglist>(bool Trans, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a795d0015e34912ea25f2a031a85f8421</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a50a5b48ce658686f21e8ef48146086a0</anchor>
      <arglist>(const Ifpack_CondestType CT=Ifpack_Cheap, const int MaxIters=1550, const double Tol=1e-9, Epetra_RowMatrix *Matrix_in=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a18d190c63dd5a2d0d554c84ffdb758c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_CrsMatrix &amp;</type>
      <name>L</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a5f19b346c9cc7738df9be311f9adcfa4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Vector &amp;</type>
      <name>D</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a3f1510ab89491dfaec8e1122351daf48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_CrsMatrix &amp;</type>
      <name>U</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>ab2e716905f53358652dfac6f5d9a147a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a13e0aaf287cd472a19f2e4c75129d8de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetLabel</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a1c5cd7b4dafa8006ffa9932176b96d6d</anchor>
      <arglist>(const char *Label_in)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a9065c5150996dbfa8cbce38d18d1386b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a902a6ca6b965d3355819c83ac785089c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a994b37acf3fec5845b60f3c2268356a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>aaf946464f8305e9ed1e8f2de48e77e4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a0a753f5555b6e309732bdf5b3c477f5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a787d96ca6c45ae18bdd19f0dc9752e45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_RowMatrix &amp;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a82941998f5b31bb2b986ad0a27d9fc2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>ae3264bfb762916e6bc69e83f988a365f</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumInitialize</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>aeff3e062400a1edac777bfe89e3c90ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumCompute</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a2f6460b2b095a5975d20999a1a14b214</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumApplyInverse</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>abd9e3ddc605f672f59c12942cd83da5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeTime</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a13c102aa716c4b4692b4302fd0f87b5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeTime</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a45b77a387bf81bd2140b1260752ce0db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseTime</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a641fc3767e1156c0823c4a409feefaa8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeFlops</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a98ce6b8843a49f48f63567f379c6ee2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeFlops</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a0ce66d5339627f149d591c4a4d684cd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseFlops</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a50af33d0e99e4f0941a276a75e1162c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Ifpack_ILU</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a502dd963623bc4bcf84f6c6f28a86b81</anchor>
      <arglist>(const Ifpack_ILU &amp;RHS)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Ifpack_ILU &amp;</type>
      <name>operator=</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a2c6dba0527a2004dea801f2a18194136</anchor>
      <arglist>(const Ifpack_ILU &amp;RHS)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>ab290a1efeddcda2964d4616d910eff58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>Solve</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>abcb0c9e68d948fc98aa757dd673960ca</anchor>
      <arglist>(bool Trans, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>ComputeSetup</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a65cb5409b59e84173490380ac034d532</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>InitAllValues</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a74e771a6a4236ef8116dc6d6d835fbc5</anchor>
      <arglist>(const Epetra_RowMatrix &amp;A, int MaxNumEntries)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>LevelOfFill</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a5f4e428962e20720873c7bed3240ac56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>RelaxValue</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a83d36cd232e6e67714381e464ba743c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>AbsoluteThreshold</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a396fc441ad7d903c0d31d722989038fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>RelativeThreshold</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>aafa9b3f9dbad79d106aedee01b3adce2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>ad132164da2906e6e0faa7f32008f01c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>NumGlobalCols</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a681b042af9a5b63d0a4bac97af750036</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>aebbe4683665be5219682806087360b13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalBlockDiagonals</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a0c221c478a9cc5c5a423c8768465b7c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>long long</type>
      <name>NumGlobalRows64</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>aad085297637232a24b3fa79bee53fdc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>long long</type>
      <name>NumGlobalCols64</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a04b60173c673ce68cf5ebb4d414d074f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>long long</type>
      <name>NumGlobalNonzeros64</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a338d3c66e9e32597899f5b55fd104dd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalBlockDiagonals64</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a919d518253eb2d1feb28fa63a5dbfe40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>NumMyRows</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a9fef94308c07816e01227009d27d1cec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>NumMyCols</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a143b95f44d1a5416f7b57c39d175f01a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>afc7832b6ec7e5ef38760c03c7fbf34fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyBlockDiagonals</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>ae2956e08f22e5aaf9c1f6ad7882b539d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyDiagonals</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a8b06949ca856155ee7d11d79f5e5969a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>IndexBase</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>ab02a338f1f9139c5e607cdbf808ab0f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>long long</type>
      <name>IndexBase64</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a20bcc9b0206baf967dbb39a085e69267</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>const Ifpack_IlukGraph &amp;</type>
      <name>Graph</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>ab7cc72e29be843738162f7ddac374a67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_RowMatrix &amp;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>ae7033d0e63fdd796eeb43fd39d4c9490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt;</type>
      <name>A_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a5cbdc8a175032dc225d43e54c3a2216e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Ifpack_IlukGraph &gt;</type>
      <name>Graph_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a41d699e6a6704b1016b8e992bcb38c0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsGraph &gt;</type>
      <name>CrsGraph_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a9c62b9dc597765230148fc46c5b1f9e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Map &gt;</type>
      <name>IlukRowMap_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a9ae63700d85ca8041e2eb7d7d5950da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Map &gt;</type>
      <name>IlukDomainMap_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a6f80ec74cae10ab01769e441b656d176</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Map &gt;</type>
      <name>IlukRangeMap_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a1caffa069abf8bb072f172b0ed7f3a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_Map *</type>
      <name>U_DomainMap_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a4d184303ddf1f46d87678a82630d558a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_Map *</type>
      <name>L_RangeMap_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a110eb620a516400b3ef5b19b36f10255</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a5b122e1add60b001db5f6eb01e9a9260</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsMatrix &gt;</type>
      <name>L_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a634876a884b5558a53a311eaf456888c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsMatrix &gt;</type>
      <name>U_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a2da22801111e5ced11c4b381ffa1aa6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsGraph &gt;</type>
      <name>L_Graph_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>ae43625cf6ffdfc8af69a23bbc1a22be3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsGraph &gt;</type>
      <name>U_Graph_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>ad40b4aa5636c1be0bce20d372535216f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Vector &gt;</type>
      <name>D_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>ab072ba7700ac40ab3ca7e0b75720d01b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a2c358e764e3d34bb6bf91e2bfca57e0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyDiagonals_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>aeb90909fdba13613e45902098353ac19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Allocated_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a7507a258fa754323d4d7f0c172a2238f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ValuesInitialized_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a21f6e551d4b50e712d28ea1005eb7394</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Factored_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a588c2a53ba9ce7b82f470b473bfd3951</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>RelaxValue_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a3d01c75f9edcf754481d81ff7970c2b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Athresh_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a12736b5b238c9c58cc69dd47563a742e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Rthresh_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>aa675d551723d1889cba56e8932f5447c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Condest_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>abeccae08dd997920676c233adb66fe61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>LevelOfFill_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>aa4e179df2ef4bb32a1b75304a2465647</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsInitialized_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>aea75ae950d0098e982724172e0a081bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a6b2a67b7e70be862a0b3823ea00ca500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>Label_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>ac592ede2d52ee1caa7fbe3ba0f6de993</anchor>
      <arglist>[160]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumInitialize_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>ae986e5a8bbd530bc6b012a00fcca6287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumCompute_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a7e7a12d9b7f5d820957f222e1562429c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumApplyInverse_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a5fc00b3d64cc7c2bcc78ac5ffe7778bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>InitializeTime_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>ad089a14352752524367b57eb68348a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeTime_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a26b8e7ee472097c33b25500ef8e544c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseTime_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>ae8b782c14c10dc1078f20c998a65d30b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeFlops_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>a0757434bee33c505f74f911a5157fcdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseFlops_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>af6af6b5f4223ccf836d0abf38d63d679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Time</type>
      <name>Time_</name>
      <anchorfile>classIfpack__ILU.html</anchorfile>
      <anchor>ac7f125108f93f3c0f99ecdacecbc8778</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_IlukGraph</name>
    <filename>classIfpack__IlukGraph.html</filename>
    <member kind="function">
      <type></type>
      <name>Ifpack_IlukGraph</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a1a989f5a4a3653809b2095efeba9022d</anchor>
      <arglist>(const Epetra_CrsGraph &amp;Graph_in, int LevelFill_in, int LevelOverlap_in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_IlukGraph</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>aa3e143fa7ab14a7ff07e99579f8f2223</anchor>
      <arglist>(const Ifpack_IlukGraph &amp;Graph_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_IlukGraph</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a1f5e5624e9ca3d88389c6f9e00cbaef9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a1927d2604332ff507d38dde38b1b25cd</anchor>
      <arglist>(const Teuchos::ParameterList &amp;parameterlist, bool cerr_warning_if_unused=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ConstructFilledGraph</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>ae7dae4f75dda7b172ed944be7ac93d79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ConstructOverlapGraph</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a57b45eeb4cb7dbc16160dc2f33a4900b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>LevelFill</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>abbf9faa333f1bd2bcfdb39e3d2038259</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>LevelOverlap</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>aa49c288b1d9fb7ff4bce5360c74a0db6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalBlockRows</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>abf7f483747b4e93a423d7ee44e658461</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalBlockCols</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a12e64f12f0e9af7b0efdbd81cce78287</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a328f96b248c3a3d17c98b823aabce57e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalCols</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a490018a08482015ef75cf30c2d1b7aef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>ace7cef21418ba69ebfda7c68770d9a40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalBlockDiagonals</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a4406f0171ef8adcaf8988365ec11f006</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalBlockRows64</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>ab7ccdecdca917530154602cbd539e52e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalBlockCols64</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a810ea8d1785f5c1f150372d5ffcc871b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalRows64</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a71a9e20f9144e295b15669d7a95dc9a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalCols64</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>adb0e954c7e76f5d339b58ce5da81faa9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalNonzeros64</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a7b5af61e06c5838a7a9b4d6ecc968874</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalBlockDiagonals64</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>addce631eefc2f75949be290f72c261b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyBlockRows</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>abf8b45c4dfbf50752490feba00c89c11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyBlockCols</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a56c23f50ce4a0a6e7ef7ea2e64706140</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyRows</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a32e92aa4bb093428efab98cc05f13cd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyCols</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>ab11eb03ced0535a018305a14a51bf268</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a0fd6ce5717811d35e385e1730eba4b76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyBlockDiagonals</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>af4b92b4fb773c1f8058a1f8f1bc4fdf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>IndexBase</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a87394f39e7460ff961dfb09a21c199cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>IndexBase64</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>ad25980b84649d305abd44172294765cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Epetra_CrsGraph &amp;</type>
      <name>L_Graph</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>adf4bd566acc361d8be7715ad99be9ce3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Epetra_CrsGraph &amp;</type>
      <name>U_Graph</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a28f7e56fb0c6d4d139ff9e23b745d57e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Epetra_CrsGraph &amp;</type>
      <name>L_Graph</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a4b87fd89c2b0deca7c2f6b7c891dc074</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Epetra_CrsGraph &amp;</type>
      <name>U_Graph</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a6aed2a94495b16bc2d613dddf6d93be4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Epetra_Import *</type>
      <name>OverlapImporter</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a9c5a064cc9fa9c56ee035c9e95dd4862</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Epetra_CrsGraph *</type>
      <name>OverlapGraph</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a82d263416c0f45f8797fbb1f93f2402d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_BlockMap &amp;</type>
      <name>DomainMap</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a465f08bc6f772e1285e92533de0aa32b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_BlockMap &amp;</type>
      <name>RangeMap</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a621f9971082651d98dc3f436752c6207</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a63150e7f1915a897538d55964e561857</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_CrsGraph &amp;</type>
      <name>Graph_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a616496545145ca6233c246708220395b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_BlockMap &amp;</type>
      <name>DomainMap_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a3faa8dba1b2d13d812f8b6463fbed6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_BlockMap &amp;</type>
      <name>RangeMap_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>ab3c256ad8cd5f90cd3baf0694ab37453</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a5f2aa69580a7b3244bdaac160b5d9070</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsGraph &gt;</type>
      <name>OverlapGraph_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a6d1c340ffa8f7e73610d05867af018cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_BlockMap &gt;</type>
      <name>OverlapRowMap_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a2566a2558194b7dc5fde2520df4535d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Import &gt;</type>
      <name>OverlapImporter_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a6a395c00f54ec08a03370435e37ce152</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>LevelFill_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a7738d2dcf782d80e67b8227422e9d9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>LevelOverlap_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>ab0b0d978d09d2eca14c0430c5ae3e158</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsGraph &gt;</type>
      <name>L_Graph_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a809dbfaedc4495c38610c8fcc2d88476</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsGraph &gt;</type>
      <name>U_Graph_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a985389f0c3c4e12070d502bf536eceec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>IndexBase_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a7236e442c95e03c47974ab51153f9955</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalRows_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a38c46b32107d07980b4b25e1bdf2559d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalCols_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a170f3018e6efc4d1ff4c2c034daa9ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalBlockRows_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>ac03eb80b4ee21ab82dfc0ff2c91bbd6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalBlockCols_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>af7cc036ebb12ddc9cdc73e88506df4f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalBlockDiagonals_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>af6e8fe6b7b2363eb0abeb865c8416686</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalNonzeros_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a2f241be649921a4b03d76d220839ed89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalEntries_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a581d0b1c21dde09671cd3948f16527ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyBlockRows_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a19c2c160b3f2725e43e273660cb1d7bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyBlockCols_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>af69b465cea1daf502b0a5e966ff4c4b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>ac0f14ddb38497b7124f9f0b368ea75b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyCols_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>acc0c6047123f0c7351aae4bec1d3bf87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyBlockDiagonals_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>ad5757409582d42e4884d4f7bb66a7cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyNonzeros_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>acc781cc83037c9b0a748f495cb6918a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyEntries_</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>ab9101e3d3c5a9f0ca2a4b65e3ab0824d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classIfpack__IlukGraph.html</anchorfile>
      <anchor>a572a5aa9c58704db4e10438dae5f8938</anchor>
      <arglist>(std::ostream &amp;os, const Ifpack_IlukGraph &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_ILUT</name>
    <filename>classIfpack__ILUT.html</filename>
    <base>Ifpack_Preconditioner</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_ILUT</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a621a5bc9045e0cdb889547754b597ea6</anchor>
      <arglist>(const Epetra_RowMatrix *A)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_ILUT</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>aa0b2f5c5f1ef70592467ab882a3f9beb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a045c79384f0b4077bb39fd7174a0ebb5</anchor>
      <arglist>(Teuchos::ParameterList &amp;parameterlis)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Initialize</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a8f90b31054536d51e5da6f6a9ec7452c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>ace863a8df1dae1d25d549ee4c90bfa1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a0307b6d5e2de80ab2e671b32e7b08f2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a61c3504ea591ce91b4fe4ea690220f4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a692c762369f6ec943d9f68fe375b370b</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>aec181cfc91ee5eeb36d71f5723f1d63b</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>afec0654baabaac880103d580adc61dfa</anchor>
      <arglist>(const Ifpack_CondestType CT=Ifpack_Cheap, const int MaxIters=1550, const double Tol=1e-9, Epetra_RowMatrix *Matrix_in=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a2268025d4218062b2c760304ee2a0a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>aacd9d7823ee625813d91d6c8f9712916</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a637bdf61b5e081c06033cb581409c53e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a31f0e3cbc5adbc399faeb06e00d05bba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a5d2d79412508bd939d988f4c7d416524</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a2de19adcb1ba7f4bc7fdeffba65dedf9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a715a27148c169d2a57c154fe030b88f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>abda84920715882e6c44b76266151581f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_RowMatrix &amp;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a7aabfe9b66e76f126a48815c07b38dcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_CrsMatrix &amp;</type>
      <name>L</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a139c607bee78742f69e0b9b28e50b9f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_CrsMatrix &amp;</type>
      <name>U</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>ac557ee521691a08a3a8544510cfe1cea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a710adf97db37c710439cc81baed0114b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetLabel</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a4915769dd5ae87b8ec105c0f69ff30bf</anchor>
      <arglist>(const char *Label_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>aedbdf9d2f51b9e35f7fe0c4a504aefe4</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumInitialize</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>ac9dc51f15aeec30a521184e5d64cd53c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumCompute</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a3c1a366c55fe579e6952ec20d3961254</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumApplyInverse</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a4c28eb1ace971a9682f3bb7f9bc99719</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeTime</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a4acbf02317787ee1702b4abebffbb2ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeTime</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a97023ac8658d4e75907e8f4aacf6437d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseTime</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a413ee8e67594cb5e88e54a5f87cff630</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeFlops</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a458cc650aec89ca0f680b9081d7d3da0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeFlops</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a08d8638bf89174b5cfa6673700702bb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseFlops</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a17b06b0d5c03cd38ecc6b3e79f8d5941</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>LevelOfFill</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a1b264be67ceea217ac4c8fcb6dc2a186</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RelaxValue</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>af6b9e20494a6d35698e77a8f706727fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>AbsoluteThreshold</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a0957fffe199d999db414311d086d9ffb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RelativeThreshold</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a3cc30f30357570c4aa22a473211dffee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DropTolerance</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a3e9e6093b409d5efec78557453405fa0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a6557448f745031d87d838d2fd6d27a3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>NumGlobalNonzeros64</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a5ab06b5fe9811fcbe4ded1a1c7d90076</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a2af62ff0b9c7e5d85586dea9be52a41d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Ifpack_ILUT</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a4b2bed2b8913a89f0092212f7df283ef</anchor>
      <arglist>(const Ifpack_ILUT &amp;RHS)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Ifpack_ILUT &amp;</type>
      <name>operator=</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a951b79a87c58cd1411449583339cd3a4</anchor>
      <arglist>(const Ifpack_ILUT &amp;RHS)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>TCompute</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>adcb36f2a684381bb0637a4f30ba0f7ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a9a79b23e10e676c53cd1dc255ce6b93f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_RowMatrix &amp;</type>
      <name>A_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a317f55ad2eb7c5f6a35e75026b98add1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a3938f4ff9d2ef06112a4ffc656c508b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsMatrix &gt;</type>
      <name>L_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>ae4b88b5ec204621dda034d186856f36c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsMatrix &gt;</type>
      <name>U_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a6f535aed7df7ee7c2269ab44366b044d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Condest_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>ab6fcfde2381d91d7c916a95f9e34d10f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Relax_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>aa794edd14faa549411f67899a32c0dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Athresh_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a18ccc9153bccefc7eb1bb4b18558b8b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Rthresh_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>ad92228395b53821ec1a87431fd250eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>LevelOfFill_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a069875ad84a9670442ad47a172be3ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>DropTolerance_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a5ea89897f5c10ee0221393fbdd6c220a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>Label_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>af68c99f834eca30571c176fb82839e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsInitialized_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a0a84b7148968042bad60242cb08dca8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>adb4cfc1229284f3920ecbfef0b7da428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>af5528fec07e172cd270d0b2285dbacc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a85ac3340471ddbf0bbc1600baec9c364</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumInitialize_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>ab07afd4f73a931006d7587f336a1b755</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumCompute_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>abdad93f5f3197d1159522c9ab6975379</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumApplyInverse_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a369217ecf64659a6179f10695418a8fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>InitializeTime_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>aba5fba3cb56a38bd24c136bb78760135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeTime_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a82c0fb4132b4626cbdad5eab5a3c5b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseTime_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a8c42c635d6a361617f040ecfb5066c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeFlops_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>aa76b4df9f69b0c23029d2c3508e5057a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseFlops_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a5fdeff03dc77d565984d144043ffbed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Time</type>
      <name>Time_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>ad73af33a95e78a02ae53c35b449a5936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>GlobalNonzeros_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>aca01a2837e7b75c6cfd5123c6e5a51b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_SerialComm &gt;</type>
      <name>SerialComm_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a5be72a91b047925663fb2e87c5ea2e92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Map &gt;</type>
      <name>SerialMap_</name>
      <anchorfile>classIfpack__ILUT.html</anchorfile>
      <anchor>a4cd019e21e91dd3a8f0bbec2d0147afd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_Krylov</name>
    <filename>classIfpack__Krylov.html</filename>
    <base>Ifpack_Preconditioner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a89f03d5e5cd65f2ed6a8a73d52c978fc</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>double</type>
      <name>SC</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a1a382d02c3c8b7b6b61a51b571336250</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Epetra_MultiVector</type>
      <name>MV</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a0182b90ca08d9d7061ecc7ed8fc35124</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Epetra_Operator</type>
      <name>OP</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a69da4dd09a6a8eade41589ad0e3034d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Epetra_RowMatrix</type>
      <name>RM</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>ada42e9e05d15d0d07a2ea0254009de0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_Krylov</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a28528cb2637c7228bd28c8265be7d43e</anchor>
      <arglist>(Epetra_Operator *Matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_Krylov</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a1fe15f8b75d366c6a74e70e0652c035c</anchor>
      <arglist>(Epetra_RowMatrix *Matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_Krylov</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a54a3f306ac7bb515cb1409aca39d2bcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a79a6bfccdc91541cc251d810276b4958</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a1003daaeafd2e196c6b70655e7c3a235</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a610f7048e4a3d814bcd709aaf38c7013</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>aca1be463f45a2d3f70222d486afa7a7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a3a61e48ec2fedf1c39df2aaae83f33be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a39db0cab3fa7549f8f8c5db2afba3565</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a9952a8c323489506dff34541e678df00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a889f301333be766280e47d7ed93885c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a90d90590838d4c195f7a61f3ab1da9f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Initialize</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>aba9f6cff55fa4d4701ff4921682fc732</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsInitialized</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a76a7d53b611cefde44083fbb005a6f06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a3cbc1416f8e3fd76a689c9213138c3ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a2c7c7d564b54a8ee48741c66a80c855f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_RowMatrix &amp;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>acbfea4ebbf94b94fe16798efda4c1cbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a1dcc48851d15fc6225dadc8bd65451db</anchor>
      <arglist>(const Ifpack_CondestType CT=Ifpack_Cheap, const int MaxIters=1550, const double Tol=1e-9, Epetra_RowMatrix *Matrix_in=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a7d75261f111c2259f398965aca0a9ac4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a4da9c894084359f7ed7430d4cb48ed2c</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a6ff4f4f17dfad977c668bda33501589d</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumInitialize</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>aa6f2d3e7d1f61222f9aedcb819d973a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumCompute</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a5ba124b4c1b6a301257e8ed5c0af9940</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumApplyInverse</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>acdb6a1066cd82665784fbbf743b10561</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeTime</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a2e949f2b6132e98d89872090f7c1f8d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeTime</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>ac4d6faf88214f2f508b66dfd0b70b2f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseTime</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a64abcfb9fdd1bdf9a4b6fcbd2d25c26d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeFlops</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>ad4e9f27a540d51ce480317201eaf15c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeFlops</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a77136c720d0a89659eac3f47a8aac75b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseFlops</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a543c2457f30b34c11c0546f114f1bcbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsInitialized_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>aafc513346973585cc04e58d5658440ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a40df08b1a9bcb311457ab10bedb1e270</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumInitialize_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a9102c08826113f7a9b3f34f639fe6a3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumCompute_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a528aad50e943f0b00ceb406e6b97b771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumApplyInverse_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>adbc860389bd8da1aef80e5a3bb0f4b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>InitializeTime_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>acf04d528bb8078836f74b53e65c3a02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeTime_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a3e0891c66527c7c019f26613bb65ebac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseTime_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>ac0a76dcf120939c8b092e470239e99f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeFlops_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a0e438df2e40f9438aa18af3bce6059ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseFlops_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>aa72fe499419a1c8ca6c53fa0483f8f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>SetLabel</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>ae3386519fcacad8f821afffff23fcac8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Ifpack_Krylov</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a50237134b9a70dbed867bb909b056ef1</anchor>
      <arglist>(const Ifpack_Krylov &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Ifpack_Krylov &amp;</type>
      <name>operator=</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>ab0bc19fac78c3dd08289924d3ad79d6e</anchor>
      <arglist>(const Ifpack_Krylov &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Iterations_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a59ed11ddd4b6b27cd75d443c2259ff20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Tolerance_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a2b0c59280f1592fc6c51c78165508348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>SolverType_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a3a3407227043845eed0efc2f0fd21dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>PreconditionerType_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>afa7b028ef62852628c3f1851c826a5f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumSweeps_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>af656237e016a9ac17b0d1c423baddad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>BlockSize_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a7dc9f75abdec4008e42b800b8a07f8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>DampingParameter_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a4aa5e492e031b22b25f7580d8bfe9033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a56d8e33b79eaa3aac97a320a5e919d81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Condest_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>ae43a31ded7f46557302021022a3efdfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>Label_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>ad191e0b368f077b0e8d95b8198c00b1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a7c01ccfb06b0d50c4151ee828a410172</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyNonzeros_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>ae0cc8e2db181117442531486fd9d576e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalRows_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a67ba1c36925bb9afd306a01cbe4883ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalNonzeros_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>aba0b0eb22a4297e1fcb02b78a745b3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Operator &gt;</type>
      <name>Operator_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a024ce653a8bf4208dfc4260f9e197a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt;</type>
      <name>Matrix_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a0d76bfbbe9f2e7d7b5edbc25a6a9389f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsRowMatrix_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a326c829f9b5b703967893d61f0711a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Time &gt;</type>
      <name>Time_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a25e270a61726ef6e7a2bfa091f84fabe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ZeroStartingSolution_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a46e80062e175002a296014207de8d455</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Ifpack_Preconditioner &gt;</type>
      <name>IfpackPrec_</name>
      <anchorfile>classIfpack__Krylov.html</anchorfile>
      <anchor>a7e4d8b9057d7f1d86ca4b4104d369479</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_LinearPartitioner</name>
    <filename>classIfpack__LinearPartitioner.html</filename>
    <base>Ifpack_OverlappingPartitioner</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_LinearPartitioner</name>
      <anchorfile>classIfpack__LinearPartitioner.html</anchorfile>
      <anchor>a9efa546f64459a6c1b4eacb3c5cea72b</anchor>
      <arglist>(const Ifpack_Graph *Graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_LinearPartitioner</name>
      <anchorfile>classIfpack__LinearPartitioner.html</anchorfile>
      <anchor>aa8983fcdf8a9f4af51a40d4690f24587</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPartitionParameters</name>
      <anchorfile>classIfpack__LinearPartitioner.html</anchorfile>
      <anchor>aa73a70ba0ae3982a75bffa3780edd6a6</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ComputePartitions</name>
      <anchorfile>classIfpack__LinearPartitioner.html</anchorfile>
      <anchor>ab9a1b89bdd484e76a1cdef717da70fc7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_LinePartitioner</name>
    <filename>classIfpack__LinePartitioner.html</filename>
    <base>Ifpack_OverlappingPartitioner</base>
    <member kind="enumeration">
      <type></type>
      <name>LINE_MODE</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>a69c36ec63115dc6f8da0f355d99d632e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COORDINATES</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>a69c36ec63115dc6f8da0f355d99d632ea951055712a475c4436b4ce6c7a7c8dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MATRIX_ENTRIES</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>a69c36ec63115dc6f8da0f355d99d632ea7922d194db4753c24d37eda9a765e0d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COORDINATES</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>a69c36ec63115dc6f8da0f355d99d632ea951055712a475c4436b4ce6c7a7c8dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MATRIX_ENTRIES</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>a69c36ec63115dc6f8da0f355d99d632ea7922d194db4753c24d37eda9a765e0d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_LinePartitioner</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>a98b6ed13aa4189bac374d9d996017bcf</anchor>
      <arglist>(const Ifpack_Graph *Graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_LinePartitioner</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>a502dff09f64ebfd2b391bd5971cc25d5</anchor>
      <arglist>(const Epetra_RowMatrix *Matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_LinePartitioner</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>ae351f86020ced22800ab76f068727acc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPartitionParameters</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>a2cbdb13fdd560daa7d3bb04db72629c5</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ComputePartitions</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>a33d79a4b6f8f255cdff316a44c0c043f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>Compute_Blocks_AutoLine</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>a1bede0737690fbe7284259e64ede6299</anchor>
      <arglist>(int *blockIndices) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>local_automatic_line_search</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>a0aa04b726421fc5fd744006349213725</anchor>
      <arglist>(int NumEqns, int *blockIndices, int last, int next, int LineID, double tol, int *itemp, double *dtemp) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; const Ifpack_Graph &gt;</type>
      <name>GraphWrapper_</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>a188bf50a0e2cb7b83b576572c9407e08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_RowMatrix *</type>
      <name>Matrix_</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>a03e3428b9804c5c721d7abbd4057b0e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LINE_MODE</type>
      <name>mode_</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>a0ba669ea035a79c6d6ea3d3f59c0c208</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumEqns_</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>a1a4669f24de124fc9cf8b32d54201930</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>xcoord_</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>a070337444c4e205dd7564d106807c523</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>ycoord_</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>ad69acc4d9dab704f196f7d8232ffcf52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>zcoord_</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>ae387f397e547358d252cced826b984eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>threshold_</name>
      <anchorfile>classIfpack__LinePartitioner.html</anchorfile>
      <anchor>a21edda04db3f3419986133c8ac5df404</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_LocalFilter</name>
    <filename>classIfpack__LocalFilter.html</filename>
    <base virtualness="virtual">Epetra_RowMatrix</base>
    <member kind="function">
      <type>int</type>
      <name>SetOwnership</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>ac3eea19f542328f2076fc6fe5d3a198d</anchor>
      <arglist>(bool ownership)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a6aa477fb576a3e9232b6afe86ddb1586</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>ac18a7ffa3e0a465b022cf015f6e8623e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a79fccdefdf501a2b4fcd2e818cada420</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a5abae82291798cea31658598b7076453</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a8badafec78bef91caad550be868df500</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a96456283ad8ee051abaa72eabf3911c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>Map</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>ab768ffb732a3db299c58379e629bd2ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>af91b80ac5f5b6da70a9623c02fe06f50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; const Epetra_RowMatrix &gt;</type>
      <name>Matrix_</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a339933b98b53a95b8af877419f5ce69f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_SerialComm &gt;</type>
      <name>SerialComm_</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a13e1ed9fbeb637a174bb246b78ed0a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Map &gt;</type>
      <name>Map_</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a8e1571bde95e578969001203ce082437</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumRows_</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>ab04cb4daf57ffb618dc6847bca70d537</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumNonzeros_</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a6ac01a358ed28158b8a9eb88d9b49687</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxNumEntries_</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>ad59df3cb8444ccc06abe4c3f26e7f27d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxNumEntriesA_</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a90acaa41b1dbb06bf3ff829b99f3e0be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>NumEntries_</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a1a4bf86a373270046372e3b05ee4c50e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>Indices_</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a373dea29ddb8fc942463f5dc9f35e00f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>Values_</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>acaad121ccbe7b4cbf93aed375c9b7670</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a1ae9982756512e3cedf69577990df45e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>Label_</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a8f9503872010293e91d666f42e572174</anchor>
      <arglist>[80]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Vector &gt;</type>
      <name>Diagonal_</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>afe6cbd7dbd1ffaf2b6e235e2f31e261d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_LocalFilter</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a4c40fa88e81061c7baa24c18cbc89f8f</anchor>
      <arglist>(const Teuchos::RefCountPtr&lt; const Epetra_RowMatrix &gt; &amp;Matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_LocalFilter</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>adebe49bf88051f1efa0a02bbca00a478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyRowEntries</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a550af226dd4fb21d29f3d0e8592ddc3f</anchor>
      <arglist>(int MyRow, int &amp;NumEntries) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>MaxNumEntries</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a994babae35311222161646f82a0bd1ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ExtractMyRowCopy</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a4098e94f1cd3f0b9e97669278ae3aa24</anchor>
      <arglist>(int MyRow, int Length, int &amp;NumEntries, double *Values, int *Indices) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ExtractDiagonalCopy</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>af192e7cd396e0596369ca47abba433f5</anchor>
      <arglist>(Epetra_Vector &amp;Diagonal) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Multiply</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a4935d1b0cacca0ce4acfc38d852495a3</anchor>
      <arglist>(bool TransA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Solve</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a4dd0f8be1b4de61d29c4f46e8194c7cb</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a0d2fee73d9bceaaaaeda38d5e81aaf7e</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>ae60689509a328f638733f15dfbb079f0</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InvRowSums</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a4639fa715e443671f9f5a5456031bead</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>LeftScale</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a86e8238cf74800b927a664c189f5407b</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InvColSums</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>ad7bc3bb4d8be95a897559c58169c8758</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>RightScale</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a841bbe4fb76ae015d84bdecc9347b301</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Filled</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>afae696a7625ee97331a885ec684a7268</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a307d71ecfeb41a70b16895fef7668212</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormOne</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a2261c7154d5de4754087a13728539f0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a2961b85517528b11199a87de119193b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a7ef475f3ee3c49b2dee0b4b055bb6ae2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalCols</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a29d643fa1b36c73d66eb8018a9cf6f8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalDiagonals</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>ab420fbf2b9ba0c06ec77e7c47732b0e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalNonzeros64</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a06ed4acf7e2d32b304429c855af594b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalRows64</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>acae026ff5d08cd7d31a5069924150ca0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalCols64</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a9a37eceac7383ad75d62f08dcdfc4d5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalDiagonals64</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a2a4d4f75e1e3e4e3c3480ec149eb3232</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>ab69066a11775a372ad2be4b6e1615769</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyRows</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a26827cc045637e5356c0802297e4456d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyCols</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>ac6c3344bee4b275a740326b4de0ce7c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyDiagonals</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>aa4f45f605b7cf2a5da25548987b14afc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LowerTriangular</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a4414de9f077f5aeb0a3a31c57610745b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UpperTriangular</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>ac810ab60934857645856c77ee5b309b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>RowMatrixRowMap</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a22d8ee78dca04b33d387be2dd77b3eec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>RowMatrixColMap</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>a70727be0fc47c7dd61d55352430934f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Import *</type>
      <name>RowMatrixImporter</name>
      <anchorfile>classIfpack__LocalFilter.html</anchorfile>
      <anchor>aea0d846856ce8585e9e6dc66f9d07886</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_METISPartitioner</name>
    <filename>classIfpack__METISPartitioner.html</filename>
    <base>Ifpack_OverlappingPartitioner</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_METISPartitioner</name>
      <anchorfile>classIfpack__METISPartitioner.html</anchorfile>
      <anchor>a7d456a7b80b71c48f90be8ac0a23ac75</anchor>
      <arglist>(const Ifpack_Graph *Graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_METISPartitioner</name>
      <anchorfile>classIfpack__METISPartitioner.html</anchorfile>
      <anchor>a15d93ba6223757dbd1395a1f6ce19da9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPartitionParameters</name>
      <anchorfile>classIfpack__METISPartitioner.html</anchorfile>
      <anchor>ae0ef26b458afa93ac977cd8469e4bb39</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ComputePartitions</name>
      <anchorfile>classIfpack__METISPartitioner.html</anchorfile>
      <anchor>a76e277c7e72132c5d8b1be27e985e390</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseSymmetricGraph_</name>
      <anchorfile>classIfpack__METISPartitioner.html</anchorfile>
      <anchor>a1d24ab1fdd2c5beb944230d4490d5b00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_METISReordering</name>
    <filename>classIfpack__METISReordering.html</filename>
    <base>Ifpack_Reordering</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_METISReordering</name>
      <anchorfile>classIfpack__METISReordering.html</anchorfile>
      <anchor>a27ea9c6b6bbfd4c0a1e20eef3f67b85a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_METISReordering</name>
      <anchorfile>classIfpack__METISReordering.html</anchorfile>
      <anchor>a90ef490ab4b8484d0fe9d0f1c8b11428</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetParameter</name>
      <anchorfile>classIfpack__METISReordering.html</anchorfile>
      <anchor>aa4d7b79ed601835c64aca6b9c989db40</anchor>
      <arglist>(const std::string Name, const int Value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetParameter</name>
      <anchorfile>classIfpack__METISReordering.html</anchorfile>
      <anchor>adf31ca39062380cb15a817578a942522</anchor>
      <arglist>(const std::string Name, const double Value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__METISReordering.html</anchorfile>
      <anchor>ae6a4bb7c2802afe990e49cb773dd4384</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__METISReordering.html</anchorfile>
      <anchor>ab58c18696c8b132f16ec2218173b6eea</anchor>
      <arglist>(const Ifpack_Graph &amp;Graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__METISReordering.html</anchorfile>
      <anchor>af8a526ea803e3c7120e5b491738894c4</anchor>
      <arglist>(const Epetra_RowMatrix &amp;Matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__METISReordering.html</anchorfile>
      <anchor>a0743d786fac75bea6b25c0ff2e991e6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Reorder</name>
      <anchorfile>classIfpack__METISReordering.html</anchorfile>
      <anchor>ab84318651bc6eaff1ac61665219a980e</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InvReorder</name>
      <anchorfile>classIfpack__METISReordering.html</anchorfile>
      <anchor>aaf2ced42f23ff904f1fdc81e90e76a2b</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>P</name>
      <anchorfile>classIfpack__METISReordering.html</anchorfile>
      <anchor>a05d33e90de1c66bb9048de577608c0b2</anchor>
      <arglist>(const Epetra_MultiVector &amp;Xorig, Epetra_MultiVector &amp;X) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pinv</name>
      <anchorfile>classIfpack__METISReordering.html</anchorfile>
      <anchor>a18b0a4c860e93015b5460e0f86d46bf4</anchor>
      <arglist>(const Epetra_MultiVector &amp;Xorig, Epetra_MultiVector &amp;X) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__METISReordering.html</anchorfile>
      <anchor>aa65c26bc2657e2162b04296fd6ec825a</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseSymmetricGraph_</name>
      <anchorfile>classIfpack__METISReordering.html</anchorfile>
      <anchor>a7d385f29fc12e6e5628a121b9d09fa9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classIfpack__METISReordering.html</anchorfile>
      <anchor>ad29510e251cd59161e608f147d49e6b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__METISReordering.html</anchorfile>
      <anchor>a58655d71ec432f2b08132ef9b801fbcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>Reorder_</name>
      <anchorfile>classIfpack__METISReordering.html</anchorfile>
      <anchor>ac8542adcea7ee95965ad81bbb4287b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>InvReorder_</name>
      <anchorfile>classIfpack__METISReordering.html</anchorfile>
      <anchor>ae9071b43c772d42a24d2fe7b4ad238b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_OverlapFactorObject</name>
    <filename>classIfpack__OverlapFactorObject.html</filename>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetAllocated</name>
      <anchorfile>classIfpack__OverlapFactorObject.html</anchorfile>
      <anchor>a7cb62de089eda2f043ac936b41ffce24</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetFactored</name>
      <anchorfile>classIfpack__OverlapFactorObject.html</anchorfile>
      <anchor>ac797c2b1ec781cf26dff5154df1bc5b7</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SetValuesInitialized</name>
      <anchorfile>classIfpack__OverlapFactorObject.html</anchorfile>
      <anchor>a633db22556f49bbb088bfbedacd908c1</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>Factored_</name>
      <anchorfile>classIfpack__OverlapFactorObject.html</anchorfile>
      <anchor>ae4fb46ad1df520a471e9cea90f49968b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>Allocated_</name>
      <anchorfile>classIfpack__OverlapFactorObject.html</anchorfile>
      <anchor>a6025c870a7d39f86caeda3161a762cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ValuesInitialized_</name>
      <anchorfile>classIfpack__OverlapFactorObject.html</anchorfile>
      <anchor>a211455fe936b2860259326bb34e49229</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ifpack_OverlapGraph *</type>
      <name>OverlapGraph_</name>
      <anchorfile>classIfpack__OverlapFactorObject.html</anchorfile>
      <anchor>a19e344a7bab2a1df17579014102dcabb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_RowMatrix *</type>
      <name>UserMatrix_</name>
      <anchorfile>classIfpack__OverlapFactorObject.html</anchorfile>
      <anchor>aa9a5ee03185037889685df26b4ae7e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_OverlapFactorObject</name>
      <anchorfile>classIfpack__OverlapFactorObject.html</anchorfile>
      <anchor>aafac484bd637195ec0cdaa4cfd367df1</anchor>
      <arglist>(const Ifpack_OverlapGraph *OverlapGraph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_OverlapFactorObject</name>
      <anchorfile>classIfpack__OverlapFactorObject.html</anchorfile>
      <anchor>af500d7bdef1c62fdcf3edce9adb1298d</anchor>
      <arglist>(const Epetra_RowMatrix *UserMatrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_OverlapFactorObject</name>
      <anchorfile>classIfpack__OverlapFactorObject.html</anchorfile>
      <anchor>adfb200a41235fc15c9204c2578686d24</anchor>
      <arglist>(const Ifpack_OverlapFactorObject &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_OverlapFactorObject</name>
      <anchorfile>classIfpack__OverlapFactorObject.html</anchorfile>
      <anchor>af5ccf88f6b32151b73192a2fd404d7f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InitValues</name>
      <anchorfile>classIfpack__OverlapFactorObject.html</anchorfile>
      <anchor>a62ff112f43586ea64932eb8c0b1eadaa</anchor>
      <arglist>(const Epetra_RowMatrix *UserMatrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Factor</name>
      <anchorfile>classIfpack__OverlapFactorObject.html</anchorfile>
      <anchor>a0611b192e62c380d90e4e6b0986ffa45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Allocated</name>
      <anchorfile>classIfpack__OverlapFactorObject.html</anchorfile>
      <anchor>ab47e70a0e0eab811df37e78d5ce920b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValuesInitialized</name>
      <anchorfile>classIfpack__OverlapFactorObject.html</anchorfile>
      <anchor>a46cca34b3f9c1ef75402369ef22f8a35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Factored</name>
      <anchorfile>classIfpack__OverlapFactorObject.html</anchorfile>
      <anchor>a21194101200f9957a4a4d7a7fae01ad1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>ProcessOverlapMatrix</name>
      <anchorfile>classIfpack__OverlapFactorObject.html</anchorfile>
      <anchor>a15db9e680369c48bb62ea5f76bb5a622</anchor>
      <arglist>(const Epetra_RowMatrix &amp;A)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>DerivedFactor</name>
      <anchorfile>classIfpack__OverlapFactorObject.html</anchorfile>
      <anchor>a65b5696b7ed5ca5dd81e404d367a93a5</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_OverlapGraph</name>
    <filename>classIfpack__OverlapGraph.html</filename>
    <base>Epetra_Object</base>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>ConstructOverlapGraph</name>
      <anchorfile>classIfpack__OverlapGraph.html</anchorfile>
      <anchor>afdd16f250f3220add7d0b58f7a83c93e</anchor>
      <arglist>(const Teuchos::RefCountPtr&lt; const Epetra_CrsGraph &gt; &amp;UserMatrixGraph)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsGraph &gt;</type>
      <name>OverlapGraph_</name>
      <anchorfile>classIfpack__OverlapGraph.html</anchorfile>
      <anchor>a4434b56a93496707bd15e98f5076a13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RefCountPtr&lt; const Epetra_CrsGraph &gt;</type>
      <name>UserMatrixGraph_</name>
      <anchorfile>classIfpack__OverlapGraph.html</anchorfile>
      <anchor>a593f56d5487630ec5328db156fcaa854</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RefCountPtr&lt; const Epetra_RowMatrix &gt;</type>
      <name>UserMatrix_</name>
      <anchorfile>classIfpack__OverlapGraph.html</anchorfile>
      <anchor>a134cbd396d020a61bfcfad84b3d4e53c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RefCountPtr&lt; Epetra_BlockMap &gt;</type>
      <name>OverlapRowMap_</name>
      <anchorfile>classIfpack__OverlapGraph.html</anchorfile>
      <anchor>a50da336d7dd626558c1d6d85006b37a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RefCountPtr&lt; Epetra_Import &gt;</type>
      <name>OverlapImporter_</name>
      <anchorfile>classIfpack__OverlapGraph.html</anchorfile>
      <anchor>a7f2c4f41b5e917a26c95dc337b7d5051</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>OverlapLevel_</name>
      <anchorfile>classIfpack__OverlapGraph.html</anchorfile>
      <anchor>a8be3ef4a241240fe9e9eaf4c2421c9a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>IsOverlapped_</name>
      <anchorfile>classIfpack__OverlapGraph.html</anchorfile>
      <anchor>a19c7d8d395241c9c60034172b420a23e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_OverlapGraph</name>
      <anchorfile>classIfpack__OverlapGraph.html</anchorfile>
      <anchor>a1998540486606b1eb25b157a5c99fb89</anchor>
      <arglist>(const Teuchos::RefCountPtr&lt; const Epetra_CrsGraph &gt; &amp;UserMatrixGraph_in, int OverlapLevel_in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_OverlapGraph</name>
      <anchorfile>classIfpack__OverlapGraph.html</anchorfile>
      <anchor>a0214ee7b4b29702804a06f3a4e3d8619</anchor>
      <arglist>(const Teuchos::RefCountPtr&lt; const Epetra_RowMatrix &gt; &amp;UserMatrix_in, int OverlapLevel_in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_OverlapGraph</name>
      <anchorfile>classIfpack__OverlapGraph.html</anchorfile>
      <anchor>aca9002960b30f7d2849c578a96df555d</anchor>
      <arglist>(const Ifpack_OverlapGraph &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_OverlapGraph</name>
      <anchorfile>classIfpack__OverlapGraph.html</anchorfile>
      <anchor>a5900ae8c202cabb498f73ca6213ba37a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__OverlapGraph.html</anchorfile>
      <anchor>a1f2a09e7f106e2c8da9a0b23875aca04</anchor>
      <arglist>(const Teuchos::ParameterList &amp;parameterlist, bool cerr_warning_if_unused=false)</arglist>
    </member>
    <member kind="function">
      <type>const Epetra_CrsGraph &amp;</type>
      <name>OverlapGraph</name>
      <anchorfile>classIfpack__OverlapGraph.html</anchorfile>
      <anchor>a53c48895b41582f0729e2e1a9835265c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>OverlapRowMap</name>
      <anchorfile>classIfpack__OverlapGraph.html</anchorfile>
      <anchor>a805b2e03c80cc103882452b1ea9153af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Import &amp;</type>
      <name>OverlapImporter</name>
      <anchorfile>classIfpack__OverlapGraph.html</anchorfile>
      <anchor>a616f6b5d4eb995962384e15a788d8aff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>OverlapLevel</name>
      <anchorfile>classIfpack__OverlapGraph.html</anchorfile>
      <anchor>a053408ffb058968dcab99516e6d3643e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classIfpack__OverlapGraph.html</anchorfile>
      <anchor>a916ad8e53ae439681875237fd3203178</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_OverlappingPartitioner</name>
    <filename>classIfpack__OverlappingPartitioner.html</filename>
    <base>Ifpack_Partitioner</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_OverlappingPartitioner</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a49d30028aea08c54d2f93bfae3931672</anchor>
      <arglist>(const Ifpack_Graph *Graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_OverlappingPartitioner</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a6a563fb7ef820eb61755068339395122</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumLocalParts</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>ab9fc01fe27b2483439e5de44527d4bd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>OverlappingLevel</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a9476664f40bca0ee2e80de8ef7638502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>aca3f66d65da30fd00e849633bff9f8e0</anchor>
      <arglist>(int MyRow) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a42dc311d43910be2755ac1c5087a5631</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumRowsInPart</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>aa30cabdc357269f25a913e0383c273c6</anchor>
      <arglist>(const int Part) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RowsInPart</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a4125a8b57e57ac7e5e5bed5749d93562</anchor>
      <arglist>(const int Part, int *List) const </arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>NonOverlappingPartition</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a62841e3b720848d6e89267b07c5b2fc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>aba523f02ad9ad66337920e8305df89bb</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>SetPartitionParameters</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a7c0728747caa7029e9dff05430270741</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a981a6d15346b63158e27480f0df7b412</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ComputePartitions</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>afd08fd48ec43ad4fa15d0e25e2e5d6d4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ComputeOverlappingPartitions</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>ac276448db2e1e6209fb085b9f1b378e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a25567de0bc68e7439e7f44131eb71a95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a590fe255c90696c16011153729b0aca3</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>NumMyRows</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a136208dffc2b214ab5526a9316061334</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>aa76b32cd312cb14a7290d31cb9be5316</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a62e47be8bcb69cabfa1f5241bd43be39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>long long</type>
      <name>NumGlobalRows64</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a3f9ed2c57430bc3fe5b1479cbb655531</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>MaxNumEntries</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a79d3d54a6951a031344cbc7d079cc52e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a547ba0f3bf67293c255d63d90790ef6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumLocalParts_</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a57f8c58301deaa022bbbd634f8389188</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>Partition_</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a7146cb29fcc0584fe287acd73fd4ad73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; int &gt; &gt;</type>
      <name>Parts_</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a0897f95cf433d0e87e8432e79e37b4cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Ifpack_Graph *</type>
      <name>Graph_</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>aeb47ba8c3f928940a3281a51d2f8b049</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>OverlappingLevel_</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a27a92b7a3439733367e153a9b75a592e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>aab57061a40998f802d02ac352d019bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verbose_</name>
      <anchorfile>classIfpack__OverlappingPartitioner.html</anchorfile>
      <anchor>a851711ebd0a7313e2e45f845c173c3fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_OverlappingRowMatrix</name>
    <filename>classIfpack__OverlappingRowMatrix.html</filename>
    <base virtualness="virtual">Epetra_RowMatrix</base>
    <member kind="function">
      <type>int</type>
      <name>SetOwnership</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a13823f6c91a2864e6c4b81c3a977a18a</anchor>
      <arglist>(bool ownership)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>af77e594c8b462801f8017fa2044d1b15</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>abb0a4856dc8a50786245b6e687a04dfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>ad8e10444586b8f89a5e5eeeb83a3ffc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a80af620b8a4cada40fef713c8384b6ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>adcc809d9ee15d81d89e0e54e44750918</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a09bcbf91d0a815492c2e173e49c94525</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>Map</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>acb02c90506af0f312e1a124b4693185c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a249f4f38405b247fe4df901d97992b6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>OverlapLevel</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a79183d98b3d43b41d944df93057ef2ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ImportMultiVector</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a0ae0191733949b7b84a12ffb18e585a3</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;OvX, Epetra_CombineMode CM=Insert)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ExportMultiVector</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a03eba1e3b26b9086564931556e8da74a</anchor>
      <arglist>(const Epetra_MultiVector &amp;OvX, Epetra_MultiVector &amp;X, Epetra_CombineMode CM=Add)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>const Epetra_RowMatrix &amp;</type>
      <name>A</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a04aacc7402033f742d67a91cb89cc7cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Epetra_RowMatrix &amp;</type>
      <name>B</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a115fd18731ddd47ae9100e77b2f76124</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>BuildMap</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a252a376976391a10864d0fff6867d853</anchor>
      <arglist>(int OverlapLevel_in)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a96a75c1ecee0e23c5e9271895f40e1ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyCols_</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a0eb3beb8c14c4f90d4f73d570e703573</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyDiagonals_</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a0cfe563d51cee2e91ddfb50e66c62c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyNonzeros_</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>acba2323408afcf2117ff0a31f4803459</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalNonzeros_</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>ade97f162151526aeb2832e45dece0db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxNumEntries_</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a73334c9a2b862f0e774f9591a32d65a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyRowsA_</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a1d8a53240f7ed181c667225f61b839fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyRowsB_</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a8195c3cd46fdf5c6c144fb74dee9260b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>ace1d9e9f8be60b7a2f98d2df55ffc3de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; const Epetra_Map &gt;</type>
      <name>Map_</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>aee819e7d5375dd8a1161adff4909c9a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; const Epetra_Import &gt;</type>
      <name>Importer_</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>ae7dd15f14a56dbe38a2713b576ddbd95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; const Epetra_RowMatrix &gt;</type>
      <name>Matrix_</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>aa0126341db5a0cbbe2beccebb0e1adb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsMatrix &gt;</type>
      <name>ExtMatrix_</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a9b4ee71db803bee12ef87d1ac03e2080</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Map &gt;</type>
      <name>ExtMap_</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>aecc3682468efbf8cbbbdbfe997ff9daf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Import &gt;</type>
      <name>ExtImporter_</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>aff528f4efe2110d1d0a1b3b59029c0ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>OverlapLevel_</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a712f03b1ae058ccb914bc8d54287ce58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>Label_</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a93a91a4750c735899b3278c285ae8b6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_OverlappingRowMatrix</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a65ec6ed5d9129df157dc15d787c3a398</anchor>
      <arglist>(const Teuchos::RefCountPtr&lt; const Epetra_RowMatrix &gt; &amp;Matrix_in, int OverlapLevel_in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Ifpack_OverlappingRowMatrix</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a4ecf5fd26d8e35b35a1c961538bffd21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyRowEntries</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a8eb35c4d2efd68ca2b53e60b7b032584</anchor>
      <arglist>(int MyRow, int &amp;NumEntries) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>MaxNumEntries</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a12408eb8766f541870e9b491f980e7f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ExtractMyRowCopy</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>af515bca9e52da908aa3803578fc2637b</anchor>
      <arglist>(int MyRow, int Length, int &amp;NumEntries, double *Values, int *Indices) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ExtractDiagonalCopy</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a341565484adeafc218d5cd19152692fb</anchor>
      <arglist>(Epetra_Vector &amp;Diagonal) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Multiply</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a3f74e2960dfb867235d930e71cd46bd3</anchor>
      <arglist>(bool TransA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Solve</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>ae2bba11dd4cd975a122bc8661d7a6575</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>af593594a4bb96b94e2dc665956b09e9b</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>aee70a1da22b95fb6080222a44ff3a0dd</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InvRowSums</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a6a1b0eeb04a274a322f9b57b2271c58c</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>LeftScale</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a98c480c8b6427951752d1e90c28e2e38</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InvColSums</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>aa7ec32b18dca9ff537111adedd59d493</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>RightScale</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a3320d470e2b5de1f93ac28a726f2b8b1</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Filled</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a09a0989474acbaeb979ba48b89f5ad04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>adedf29baa52d3f34118e2fe75bdee19f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormOne</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>ada662d85185dd1bcce6e2bc0c214048e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>ac301e041f7424922fb4e4670d45c06fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a49444d5884a4c3feb818e2bcb374ef4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalCols</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a2f05ff244ac3d4fd7c07855c3c097ef8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalDiagonals</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a023408c0cf6d9de4aa6c826cc8c069ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalNonzeros64</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a2ccbec714d77e62d30754f8ef76ce2b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalRows64</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>afd9323c9bd9ccf43a7beded1557309cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalCols64</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a42c7e7f494353f564c61214acdaa9db2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalDiagonals64</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a2705c5d0cd9f4cd11f160e88b84bfbc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>aab2ab00653bff0f3322cec978fe1aaf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyRows</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a8d41794fd8ec88d7f79ecfc69feea197</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyCols</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a998eea16ffab8c1db601ff5e4b2ec322</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyDiagonals</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a8d3477b5d32f02dc1855faef19327a26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LowerTriangular</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>aab38c64d322ff20fb6a8d3d9620c0c5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UpperTriangular</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a5bfdacdb8793c6602387cf4d9bf428be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>RowMatrixRowMap</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a4790ac4b202b5d6e2b055131f5a21925</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>RowMatrixColMap</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>a05019f63b7bac1937b53f5ea5ab61554</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Import *</type>
      <name>RowMatrixImporter</name>
      <anchorfile>classIfpack__OverlappingRowMatrix.html</anchorfile>
      <anchor>ad1e31f61e363cebe6c6db2dbe330b90c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_OverlapSolveObject</name>
    <filename>classIfpack__OverlapSolveObject.html</filename>
    <base virtualness="virtual">Epetra_Operator</base>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>SetupXY</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>ab5b443ad3574f7f7e14449779cd06a1b</anchor>
      <arglist>(bool Trans, const Epetra_MultiVector &amp;Xin, const Epetra_MultiVector &amp;Yin, Epetra_MultiVector *&amp;Xout, Epetra_MultiVector *&amp;Yout) const  =0</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>Label_</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a685c916d1364e252dd1ae5df46180444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_CrsMatrix *</type>
      <name>L_</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a186c84a369874135b472b9dbf91e1a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseLTrans_</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>afb350e7fe379920e44da45638555ea95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Vector *</type>
      <name>D_</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a59745ea2e4129d2dd747b83caed7700e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseDInv_</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a1de2c8574340dc6f1bf63e3062df2585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_CrsMatrix *</type>
      <name>U_</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a2f24da34739d0c383a6ddc19efc7d58a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseUTrans_</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>aa5dcda71cf105b02b18a02171f3fcc9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a86254a24ce9ce1d5634bb7a1ce271af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm_</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a55d75e786eb237dea1c3ff087a2970df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Condest_</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a2ce2efb6a16d276bbd668d0ff18508bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_Flops *</type>
      <name>Counter_</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>aba7b74799c15522b0473c15e1172847d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_CombineMode</type>
      <name>OverlapMode_</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>ab0a889ffbfb22f97cfc0c31c59855fc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_OverlapSolveObject</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a0073503f177f2185e68a982d2ce8564f</anchor>
      <arglist>(char *Label, const Epetra_Comm &amp;Comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_OverlapSolveObject</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>ab1d9acf9b4f5a5e739a80e9c63ef9631</anchor>
      <arglist>(const Ifpack_OverlapSolveObject &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_OverlapSolveObject</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>ad2c8ac6c5fbfac1617b631eff5a47ad9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOverlapMode</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a50e511053d5c9ce8f80176a55c4aa830</anchor>
      <arglist>(Epetra_CombineMode OverlapMode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetLowerOperator</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>ad9dcf89e30bf30f08798f5686767e9b1</anchor>
      <arglist>(Epetra_CrsMatrix *L, bool UseLTrans)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetDiagonal</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>af63b3c71d58bf23807f41713d07d743e</anchor>
      <arglist>(Epetra_Vector *D, bool UseDInv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUpperOperator</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>af093fb181dcb98a93d2488858813501d</anchor>
      <arglist>(Epetra_CrsMatrix *U, bool UseUTrans)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Solve</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>ab5182eace59a62def8bfba5655bde9db</anchor>
      <arglist>(bool Trans, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>aa6c8ff569495d4f392677f4fb6a17f6d</anchor>
      <arglist>(bool Trans, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Condest</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a3227d27f83f9a6d0782055850f9652df</anchor>
      <arglist>(bool Trans, double &amp;ConditionNumberEstimate) const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_CombineMode</type>
      <name>OverlapMode</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>ae3e61df53d3ab1abe2663332390da15b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>afcaab5b176e2b7c12e90981656f80132</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a6246a736df91e88cfbe52e69c8272feb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_CrsMatrix &amp;</type>
      <name>L</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a06fc9a7256f702a884f348ed2871fc8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Vector &amp;</type>
      <name>D</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a4e054e90e29a5b828c406121a55124d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_CrsMatrix &amp;</type>
      <name>U</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a015637ca3638ca05e5c3a36ffe07bb0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>ac68e6d6bdcc9a59732cd9a69293cf12f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a8ddec2e17ef402dca1d08e84c15ceaa0</anchor>
      <arglist>(bool UseTranspose)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a27ccb1ee051d8597ae95b78feb8e0a20</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a8cc6f572ad89db7cde42c75295c18a2c</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a08c60935e0d8f806970a0bb6f6056dcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>ace905d137faa3bdd3492ba4df6733a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>ac41d705e0bcc87e7cf7cef6459ba01a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>ad954d5e893fd6d5b0dbbffd97b8f32ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a81efd111b5adece47bce2569f689bbc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__OverlapSolveObject.html</anchorfile>
      <anchor>a1eb454b38eb38f335ec665391ee954ff</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_Partitioner</name>
    <filename>classIfpack__Partitioner.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_Partitioner</name>
      <anchorfile>classIfpack__Partitioner.html</anchorfile>
      <anchor>a10ec8424967de00b711569e561d61d1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumLocalParts</name>
      <anchorfile>classIfpack__Partitioner.html</anchorfile>
      <anchor>a3972c6d979f9ad0e2de7b3b8f54c22c1</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>OverlappingLevel</name>
      <anchorfile>classIfpack__Partitioner.html</anchorfile>
      <anchor>ae7fb3731ed5dfb3e35c0fac6948c32cd</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>operator()</name>
      <anchorfile>classIfpack__Partitioner.html</anchorfile>
      <anchor>a194ff6423d290da146b389060a8d50de</anchor>
      <arglist>(int MyRow) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>operator()</name>
      <anchorfile>classIfpack__Partitioner.html</anchorfile>
      <anchor>a21b64a1a94542f3128099dfc85445062</anchor>
      <arglist>(int i, int j) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumRowsInPart</name>
      <anchorfile>classIfpack__Partitioner.html</anchorfile>
      <anchor>ada6870b7044f3576ea4bb3086f6d8c69</anchor>
      <arglist>(const int Part) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>RowsInPart</name>
      <anchorfile>classIfpack__Partitioner.html</anchorfile>
      <anchor>a5bc1df004b56b1e6fbb364b237bc2994</anchor>
      <arglist>(const int Part, int *List) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const int *</type>
      <name>NonOverlappingPartition</name>
      <anchorfile>classIfpack__Partitioner.html</anchorfile>
      <anchor>a5861019cc4e72a94e1295702713836f8</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__Partitioner.html</anchorfile>
      <anchor>af2cd9fe99711fc4ce9b7c0d530a8c6c2</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__Partitioner.html</anchorfile>
      <anchor>a598d2ff620d995eba16ceb8dbe38e16c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__Partitioner.html</anchorfile>
      <anchor>a370177cc840d83d5e602de859c6830c3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__Partitioner.html</anchorfile>
      <anchor>ab416e11350c2491c636d8759517317b1</anchor>
      <arglist>(std::ostream &amp;os) const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_PointRelaxation</name>
    <filename>classIfpack__PointRelaxation.html</filename>
    <base>Ifpack_Preconditioner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>ae41dbb189bb8627e428c6a1541ac983b</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>SetLabel</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>aa80ed57e55ed0e48f2492bf1f8dee59a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Ifpack_PointRelaxation</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>aeef431e55f3ab37d429a3a25ddace5af</anchor>
      <arglist>(const Ifpack_PointRelaxation &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Ifpack_PointRelaxation &amp;</type>
      <name>operator=</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a368b2314fa53cdd508e03f68eb19948a</anchor>
      <arglist>(const Ifpack_PointRelaxation &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_PointRelaxation</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a8bb8396decf8a3ac0847d5227aa166bf</anchor>
      <arglist>(const Epetra_RowMatrix *Matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_PointRelaxation</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>aaad10f32334f816410936f3565c2d997</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a3c42dc255394d937cda3167948533df2</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a73b4e4ce2f27a542cff686fde0b1ec67</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a158420cf72262d2620cf432f9286e6b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>abf0f463156bcab774e466fdc350e905c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>ab2c2c3d12d60d06ef3fab5c9ad01c410</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>aaa75851327b419e872d706ee141d035f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a584ad55554c3f2eaf0e5ed1294e1e40a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>aed8ec256a716d0dd55ad67cb6fbcabd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>afd93df219d2482804e65dd1f906b48a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Initialize</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>af157d5ea1bf6e72b3e86457d84b8b38e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsInitialized</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>aa5516d9c1a077c344ea04f931c64fb01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a74a54f49cb707327decb3f200257e8fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a0f7b1a45a2170f58b511a51e46d73b43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_RowMatrix &amp;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>acb9118b0d9e5714c241b510cf80640ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>ae8924e0b0e905234375648a1ad9f6402</anchor>
      <arglist>(const Ifpack_CondestType CT=Ifpack_Cheap, const int MaxIters=1550, const double Tol=1e-9, Epetra_RowMatrix *Matrix=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a5ab9fd41c8b33cceb1b5baf4f42b226b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a4b65acb700f5eb115b081a23f15377e3</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>aabebffb8efa54994e1fccae7dde945d7</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumInitialize</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a79d31671ea36e1c375719cdde7094a96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumCompute</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>acc8f4f086de4d31465a0da765d50f213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumApplyInverse</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>ae6642eae5c466937d1a229aceb8d7eb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeTime</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a134a0649e6dd21d2f647565be683136f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeTime</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a5db59acd806541474f1614a188858475</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseTime</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a8c6f260a725438fc7654bbd29f9af616</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeFlops</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a397bef26ce583de046662d91d1a18a91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeFlops</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>ac40d3b6ded3aa1c82a1732c83c412948</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseFlops</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>ab8756951a6ea9f41db0c307e08e953fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverseJacobi</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>ace1831ac3d2c578dc4cf7c7c1adcbd6a</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverseGS</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a48e6ff145d285826a14256c511d36f72</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverseGS_RowMatrix</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>abb547e355d332d4823f9aa8705252e60</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverseGS_CrsMatrix</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a27e5817a9ceefd3369211b3e6c119244</anchor>
      <arglist>(const Epetra_CrsMatrix *A, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverseGS_FastCrsMatrix</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a24a49417cc02a8b4e71b88a06804bdc0</anchor>
      <arglist>(const Epetra_CrsMatrix *A, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverseGS_LocalFastCrsMatrix</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>aec553fa17095aef8e82cc77be67dbb0c</anchor>
      <arglist>(const Epetra_CrsMatrix *A, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverseSGS</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>ab6a4f792503e954d1a88bc4c6e490a9c</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverseSGS_RowMatrix</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a21e82699d6af334b7413e6b47c3d88dd</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverseSGS_CrsMatrix</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>ae122c12887ac2128fea5af7e623a7e19</anchor>
      <arglist>(const Epetra_CrsMatrix *A, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverseSGS_FastCrsMatrix</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a6324564ba063da1a2b7e1adaff83cb24</anchor>
      <arglist>(const Epetra_CrsMatrix *A, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverseSGS_LocalFastCrsMatrix</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a20ca471023b5cda9ddbc669f13526f0f</anchor>
      <arglist>(const Epetra_CrsMatrix *A, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsInitialized_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>af55dec033d312619f75f8423c03b26a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a4aec2cb9ecb25cdf5ea031aff00d4b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumInitialize_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a2588154f3bdd99913baa0b130b628f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumCompute_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>af102d907eb32ef8e7e2c202ef52e61ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumApplyInverse_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a8264aa78dce175a1c6420ac21b6883c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>InitializeTime_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a62ce4a73a499a49f706bd8a339b1f0be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeTime_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a05c3100d2dff963b275c5ec9f4917741</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseTime_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a840659d8b76b41f6fd17f8ebb4e482eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeFlops_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>ab40685adee882b42dd17326d387a54a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseFlops_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>af31ea88a9afdb46594cccc02b45fb03e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumSweeps_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a6d6dc1e8bf7c0b163b0d45e709294a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>DampingFactor_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a58dd8273f0de3a948a21df716acd45ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a0aa64af68ba35afd0bfbeeb5fccb6398</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Condest_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>abf6f6eefcfa2a747245541e88a0466b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>Label_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>adfa53702b37441175e78bb0f8e8ddef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>PrecType_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a6fb72232606fcec7192ca7343a82b41d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>MinDiagonalValue_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>aaf6e37823c2f9126febc60fc5167bedb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>ae880a6be302098c8003d1f8a2fd13ba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyNonzeros_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a2c6a2b52a97acf1a0752a89c79494e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalRows_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a465d21b7009666dac545b2a177948eee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalNonzeros_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>ac387cfdce98968326e50ed044b8b7243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; const Epetra_RowMatrix &gt;</type>
      <name>Matrix_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a6f5695907d535b3e8f52511a90cef51b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Import &gt;</type>
      <name>Importer_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a1fc5dd56ec6642c0d701bb23d4201ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Vector &gt;</type>
      <name>Diagonal_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>aae502fd03487b568546326170055bc4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Time &gt;</type>
      <name>Time_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>aa98b88cc29c69e76d01aee1cb7c21864</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsParallel_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a07d7b405de306705b31793fe0266ea86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ZeroStartingSolution_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>aa6632179da16e35101faa76612357215</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>DoBackwardGS_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a4665990710ac0ce235b2e7d6c34d46f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>DoL1Method_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a1a71bbc9e65a0106d9b307d321aa2d66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>L1Eta_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>af87f18f749a87f901b94f4ef835c9373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumLocalSmoothingIndices_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>a69afd03a659bfa9f5a027399d91e9c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>LocalSmoothingIndices_</name>
      <anchorfile>classIfpack__PointRelaxation.html</anchorfile>
      <anchor>aa5f04d91bd8931dd89e6d16149a3fc42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_Polynomial</name>
    <filename>classIfpack__Polynomial.html</filename>
    <base>Ifpack_Preconditioner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>aad8823fb1dd0e88a95a2714d2310e644</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_Polynomial</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a11b96fe4255b42991653e8db7d47b418</anchor>
      <arglist>(const Epetra_Operator *Matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_Polynomial</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a569c8d76b6ed3f667de443d803ef5bde</anchor>
      <arglist>(const Epetra_RowMatrix *Matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_Polynomial</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>afeba306718ea380d9503692f3297d164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>aa2c50a09481ee814ee099277528caf55</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>ae2fecc6682a2aa3ff4e9c9a9e31c87ff</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a1ae116849efbbb556f856220f46ebcd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a0f0f066215cfc64078de20f45bec84c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>ac125f39b72fa7b268e6b1c089a3625ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a90cc718b36f5f2ff786d704bd8e75610</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a353dfd9c7766c15f9121ca2caa0c0d1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>aeef13c049d4ce480fe7aeafd3b4f3c33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>ab60dfdc483a688329ccea5f7c12ed068</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Initialize</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a5f1fe2fde29d762ce52bd7557f8b0c76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsInitialized</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a74aa61efb4f479c079dea6ef32c7073c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a0085fb40d6a938178f2d353edc877dbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a3429993ab63053b5951b01657d09176f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_RowMatrix &amp;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a6dcf982eaf4669a8ee9ff9834fda6d60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a9ae1c26257b2d5b0de33de9be71d352a</anchor>
      <arglist>(const Ifpack_CondestType CT=Ifpack_Cheap, const int MaxIters=1550, const double Tol=1e-9, Epetra_RowMatrix *Matrix_in=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>ac23ae7839cb47b543fc4d56003d179d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a2e7e99111e2682df288e81073ce09537</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>aaef7bc0cee396886957e7f4727451a28</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumInitialize</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a3198c99db5e4b0d686f11cd18cd9f24e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumCompute</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>acda36c7d047bf7799c663d45683f5332</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumApplyInverse</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a162cd794ed321e0cbdbe708fc80c9be8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeTime</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a5a91f03f8e1650d144b3ce7a5b093020</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeTime</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a99bcab1ebf84ab950f106e97b1c4dc8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseTime</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>afa7882cc1f94d8aa926901dfbd27dfd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeFlops</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a92e225eb0affd99c43b79713d6868ffc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeFlops</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a00a7176f5d0a08e370827c0a0d34e953</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseFlops</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>aac167bc5292f34eab2f378de72f5879b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GMRES</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a70b084dce323de41db4545246354cac2</anchor>
      <arglist>(const Epetra_Operator &amp;Operator, const Epetra_Vector &amp;InvPointDiagonal, const int MaximumIterations, double &amp;lambda_real_min, double &amp;lambda_real_max, double &amp;lambda_imag_min, double &amp;lambda_imag_max)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>PowerMethod</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a71fed3c0c9ee5c9c0f6f77bd9f30498a</anchor>
      <arglist>(const Epetra_Operator &amp;Operator, const Epetra_Vector &amp;InvPointDiagonal, const int MaximumIterations, double &amp;LambdaMax)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>CG</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a579dab343cc4430132b7043976ae6397</anchor>
      <arglist>(const Epetra_Operator &amp;Operator, const Epetra_Vector &amp;InvPointDiagonal, const int MaximumIterations, double &amp;lambda_min, double &amp;lambda_max)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsInitialized_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a9e81b0c1bfaae91d5dd4285924fccd0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a184dfb15d96a36840670987cdf418869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsIndefinite_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a81f834be9ebc4bfc22646e49f257277f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsComplex_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>af7d69d08bf69bd88427afba3f6fc34c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumInitialize_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a61fe6c1940e66416d5c1a53bc5e84b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumCompute_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a4c8d91f796d44164e9eaf2666aeb8f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumApplyInverse_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a94f91c174aa0e118b5c78f434f7f6754</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>InitializeTime_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>ab6aecf06c6ce5ddfb51839941310f30c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeTime_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>aadc156cc69211e8df76ad8f12b1ce4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseTime_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>ac98085cc577375c87073fd795ef04e68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeFlops_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>abc059795c4c250e445641347e5fc3235</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseFlops_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>ab68a90d7c2e872e9aeed04608c46a7fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>SetLabel</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a48c1b0d1f9beb8cd819bb1f2a7d096ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Ifpack_Polynomial</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a2e99a6b6ddebf9ad98023685f6bc5c0c</anchor>
      <arglist>(const Ifpack_Polynomial &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Ifpack_Polynomial &amp;</type>
      <name>operator=</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>aecef64ba92f40b2de6f19915b5febd86</anchor>
      <arglist>(const Ifpack_Polynomial &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>PolyDegree_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a5a055782758cbe6727b2ea068c307051</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>LSPointsReal_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a0e9cf7cc71fb817acd12aba03cdf7d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>LSPointsImag_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a2c28ff0ee96699e3faf42fae67ba9b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a1b83431f7ee6905d83aa137291cd4266</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Condest_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a75f81a710e70e7c035c5b2fe457454f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>RealEigRatio_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>adef430e083e77e60a52c52d78b815368</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ImagEigRatio_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>af050cc7c3aa71d126e69f9a2d3cbde98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>EigMaxIters_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a44f5bb9dde598681b5f3720f9992f84c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>Label_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>ab08c02431e153a7d39fc72d41ffedd2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>LambdaRealMin_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>abfa064244206aad273dd7429b87738d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>LambdaRealMax_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a928883685a2ee17c1e7879c1d3124232</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>LambdaImagMin_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>ae329444d86c992db4136097c48a6c236</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>LambdaImagMax_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a82587d5f8668ba4aeaddfd4cf72d469b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>MinDiagonalValue_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a9d9eaa230b0fcd51c6a54cc55d1adbf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>coeff_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>abb56438fed38fe2b34bdc1e7632f5dc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a528ef90ab1167e35a5ec9fd67e4ecf8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyNonzeros_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a3ae3257e50dc9a8639fa9a6f93d652a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalRows_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a6d945096781baed23d4c915dddb4b8b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long long</type>
      <name>NumGlobalNonzeros_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>aa7475027c603e34b98686d5d7de440ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; const Epetra_Operator &gt;</type>
      <name>Operator_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a93ed45d3f81974c922b260145b338b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; const Epetra_RowMatrix &gt;</type>
      <name>Matrix_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a54aef6fc0ec763d7e4a199430bbeaa50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Vector &gt;</type>
      <name>InvDiagonal_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>ad119f8c68aede8c8273a825c4bb2b908</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseBlockMode_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a5c1ff0f599e31eca8f531c615c7af82f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>SolveNormalEquations_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a0e625c48ac43c9047716eb27497343db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsRowMatrix_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>ace79d609eac442a28d4abd7f65693836</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Time &gt;</type>
      <name>Time_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a7b8fc4f10de6d03246d6f77157f75f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>ZeroStartingSolution_</name>
      <anchorfile>classIfpack__Polynomial.html</anchorfile>
      <anchor>a04f3565ae0235ece5100d3ddf5c112d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_Preconditioner</name>
    <filename>classIfpack__Preconditioner.html</filename>
    <base>Epetra_Operator</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__Preconditioner.html</anchorfile>
      <anchor>aa7a00ade2cbd8b77e545cf1acb132df6</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Initialize</name>
      <anchorfile>classIfpack__Preconditioner.html</anchorfile>
      <anchor>afcc3a9d1bf622ce8264074aa2066f7c3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>IsInitialized</name>
      <anchorfile>classIfpack__Preconditioner.html</anchorfile>
      <anchor>a7ea7d23586c17f7c76fff78c14711216</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__Preconditioner.html</anchorfile>
      <anchor>a245b11b9f09575682b7d9584e5ddb67f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__Preconditioner.html</anchorfile>
      <anchor>a9af7c4690bc0ab0c0eec5df9238148d5</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__Preconditioner.html</anchorfile>
      <anchor>a9f11e0ebe1656ecbc6898c5d44e1ad9c</anchor>
      <arglist>(const Ifpack_CondestType CT=Ifpack_Cheap, const int MaxIters=1550, const double Tol=1e-9, Epetra_RowMatrix *Matrix=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__Preconditioner.html</anchorfile>
      <anchor>a32eafc0063511b92a534c7664c19d278</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__Preconditioner.html</anchorfile>
      <anchor>a49a01414c2b2318625ea3a8fc8165748</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Epetra_RowMatrix &amp;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__Preconditioner.html</anchorfile>
      <anchor>a6a9d983a18adf02de60e9057c611494d</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumInitialize</name>
      <anchorfile>classIfpack__Preconditioner.html</anchorfile>
      <anchor>a306528112c9cf960f69fb33fbc3e676a</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumCompute</name>
      <anchorfile>classIfpack__Preconditioner.html</anchorfile>
      <anchor>aa8b9cbf272e39f23f647acb421222d2a</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumApplyInverse</name>
      <anchorfile>classIfpack__Preconditioner.html</anchorfile>
      <anchor>a0bfeff5851a29371d278363066f6771e</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>InitializeTime</name>
      <anchorfile>classIfpack__Preconditioner.html</anchorfile>
      <anchor>ad7291f37efd0cfb2499c994b65e1c998</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>ComputeTime</name>
      <anchorfile>classIfpack__Preconditioner.html</anchorfile>
      <anchor>acf1e21235da16ca9f74812345a409d10</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>ApplyInverseTime</name>
      <anchorfile>classIfpack__Preconditioner.html</anchorfile>
      <anchor>a2fd66bbe4878c97470d31d072d0eced9</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>InitializeFlops</name>
      <anchorfile>classIfpack__Preconditioner.html</anchorfile>
      <anchor>a67bd8ed3da90a16ec2fa144c0ea6c715</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>ComputeFlops</name>
      <anchorfile>classIfpack__Preconditioner.html</anchorfile>
      <anchor>a816325ad950e284986317bdb71811738</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>ApplyInverseFlops</name>
      <anchorfile>classIfpack__Preconditioner.html</anchorfile>
      <anchor>a9d60c73ce79a45c02fddc526d3aa4eb9</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__Preconditioner.html</anchorfile>
      <anchor>aafe405cc5e8a74b5952b8c62e9921939</anchor>
      <arglist>(std::ostream &amp;os) const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_RCMReordering</name>
    <filename>classIfpack__RCMReordering.html</filename>
    <base>Ifpack_Reordering</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_RCMReordering</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>a65d1141c6bbe2cc2f6831d49645fb24c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_RCMReordering</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>a60e8b6d8a82aad15fcf95b2bbc9e19cc</anchor>
      <arglist>(const Ifpack_RCMReordering &amp;RHS)</arglist>
    </member>
    <member kind="function">
      <type>Ifpack_RCMReordering &amp;</type>
      <name>operator=</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>a491828b6becf72443870902f8ddbcca3</anchor>
      <arglist>(const Ifpack_RCMReordering &amp;RHS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_RCMReordering</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>a610fd41d2801e39689f988d273cdf376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetParameter</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>a302512b936705a2eaf1751bf67492756</anchor>
      <arglist>(const std::string Name, const int Value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetParameter</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>a6b1677a92af24187c2f42f30c57fd072</anchor>
      <arglist>(const std::string Name, const double Value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>a1f687ee84ad40815a204fbb4ad34c163</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>add0a930a6c668290d11c9231d932a8ab</anchor>
      <arglist>(const Ifpack_Graph &amp;Graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>a7d03b8cf2137aaf75b9bc57b997f9d62</anchor>
      <arglist>(const Epetra_RowMatrix &amp;Matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>a828d9de230544b8b7ab63b8423ee48b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Reorder</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>a95efb3e0e1a0c76edc32b62085aa29d6</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InvReorder</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>ae399a9d90c62ac3c9883e8c3a0567bc9</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>P</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>ac023bd19bcd10721932f87a7e4dd5d2f</anchor>
      <arglist>(const Epetra_MultiVector &amp;Xorig, Epetra_MultiVector &amp;Xreord) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Pinv</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>a896477655e616e66b5858473813dfa8e</anchor>
      <arglist>(const Epetra_MultiVector &amp;Xorig, Epetra_MultiVector &amp;Xinvreord) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>a0b25f78ccd808bb15aa2d97ec1ae2637</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyRows</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>acc2b1b83d0c22c1323741241ac2eff5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>RootNode</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>ae6d69fcb3bd258ea738a1a4a77bde702</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>RootNode_</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>a2266a8b0e0844103741fab176e44cfff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>afafeaf5f1a290d6b9b33b0a4870f6872</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>a994b47f01ad51d57caa91987d0a52a08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>Reorder_</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>a4a10486a525782046426301c35f85d1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>InvReorder_</name>
      <anchorfile>classIfpack__RCMReordering.html</anchorfile>
      <anchor>add848f1a54afc976d0f1c0cb0685a711</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_ReorderFilter</name>
    <filename>classIfpack__ReorderFilter.html</filename>
    <base virtualness="virtual">Epetra_RowMatrix</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_ReorderFilter</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a38256ae52cb20bc23b33c695bc54c9e5</anchor>
      <arglist>(const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;Matrix_in, const Teuchos::RefCountPtr&lt; Ifpack_Reordering &gt; &amp;Reordering_in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_ReorderFilter</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>ab151459f5874718776498f1cedc21639</anchor>
      <arglist>(const Ifpack_ReorderFilter &amp;RHS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_ReorderFilter</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>ae41fa3220b406af48302e11651cee1cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ifpack_ReorderFilter &amp;</type>
      <name>operator=</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>ab9fbf89ce6f0f0942aaa737e7aed0d85</anchor>
      <arglist>(const Ifpack_ReorderFilter &amp;RHS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyRowEntries</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a5bc9f8364a4d9515bc4ba1b0b678ba64</anchor>
      <arglist>(int MyRow, int &amp;NumEntries) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>MaxNumEntries</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a2b527c6549d2284b2ffcd76e6f56778d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ExtractMyRowCopy</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a8bdf07e5ba138f91ab74b2605cec13a2</anchor>
      <arglist>(int MyRow, int Length, int &amp;NumEntries, double *Values, int *Indices) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ExtractDiagonalCopy</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a52c39b402681280faa3ff3cd9ebf214e</anchor>
      <arglist>(Epetra_Vector &amp;Diagonal) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Multiply</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>af9098058a98417c96493f1b90721827e</anchor>
      <arglist>(bool TransA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Solve</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a60d8d52b88704a2fc2b79f34152ba494</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>aa6db54b0095181902c79059cd7448a22</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a196a1c07a3598fcd1d1a92efdee826eb</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InvRowSums</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a1e319efd76954502a8903f7b138b9811</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>LeftScale</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a3d34324da4973005d12536469d721382</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InvColSums</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a7f05eced556a5df2cbf640fa874e3aa9</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>RightScale</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a58fcd909b071684b29f2a10fb83419aa</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Filled</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a7c19b386733f4709da9d3b0b42b24ce7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>ae75a46516543c1762171d7efacaf95d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormOne</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>aba7fcc04aa250aebd71733367aa526b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>aa2a48bac92081b89b67fef44845dd842</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a363f1d293776bbb265920a288e83c0a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalCols</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a4340825f29bc8bd9131bf9c4b651ad6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalDiagonals</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a4932d996f99b7e160a2f8613444b7340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalNonzeros64</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a374ef24e94f4b1fdb86086ec78ac68dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalRows64</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>ab0be60d6d6efb3c91d39fcd8ce574e39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalCols64</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a63e7a7f2854b502f10f7a368de667236</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalDiagonals64</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a4bccb3ee1cbbec715ebc81042bfb50d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a38aa13ffc8cedc07d3e824e2caec1693</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyRows</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a9fe1a28fc71f2aa4dc5a632bdc084688</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyCols</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a31171974de4d7cecf6ac34d5e51f7fcb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyDiagonals</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a687e2dfe870e425a04699bb32c57d281</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LowerTriangular</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a672b12a48e926378a11b2ccb202fd7ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UpperTriangular</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a1eaab4903e9ef91697d1504eb7c39d7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>RowMatrixRowMap</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>aa666f82d9e018e003fb150a7afc3bfd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>RowMatrixColMap</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>aef800b30b24e89fafd2320cd7b5d2748</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Import *</type>
      <name>RowMatrixImporter</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>afe4f9be3ce1f38cde423fb97eec5ee70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a651763bd51ff39dd61698f6a29dba7fc</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a8f9b9e8cd6d7c02be949ddb6bc26efa8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>aaafcd8e0d0544183bb993693db7a70e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a6c5d2ba9a8260493f815bf3f4e987f1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>ae14edfa9da72c3c220b4b22a1558ff04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a18fd49fb05de3e28a90ebfde3c9fca3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>Map</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a22dc37b530b99263b4b0e642a8c3a1bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a9172b11409232f5989614d7933b8b541</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a6698926774e1282a9e17d75bea3b00f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RefCountPtr&lt; Ifpack_Reordering &gt;</type>
      <name>Reordering</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>ac128a677f92316d3a21458f96b17018a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt;</type>
      <name>A_</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a703990c114c15b95e6c39c5104cc00ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Ifpack_Reordering &gt;</type>
      <name>Reordering_</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a846f6abb0bd264286f6791b6a284ee99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumMyRows_</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a7862deb9f97c1590d8b4a76dd5310cdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxNumEntries_</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a513b3198f3e25cd52b88d0225166ff84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>Label_</name>
      <anchorfile>classIfpack__ReorderFilter.html</anchorfile>
      <anchor>a8b948a4b7c10504b4ef81de20f8850ba</anchor>
      <arglist>[80]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_Reordering</name>
    <filename>classIfpack__Reordering.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_Reordering</name>
      <anchorfile>classIfpack__Reordering.html</anchorfile>
      <anchor>a7751e68e7fe7b50bba6ad93fcf26b888</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>SetParameter</name>
      <anchorfile>classIfpack__Reordering.html</anchorfile>
      <anchor>a1054ca8d8d2e8ae8c36ae168a23486e7</anchor>
      <arglist>(const std::string Name, const int Value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>SetParameter</name>
      <anchorfile>classIfpack__Reordering.html</anchorfile>
      <anchor>ad5dcee90e1651e4abf039b815cf9b49a</anchor>
      <arglist>(const std::string Name, const double Value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__Reordering.html</anchorfile>
      <anchor>a7f4d1794ff713fb0e8c1336e59b95724</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__Reordering.html</anchorfile>
      <anchor>a71fc856e0a25d4d7b73da27c808ddea3</anchor>
      <arglist>(const Ifpack_Graph &amp;Graph)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__Reordering.html</anchorfile>
      <anchor>a1e9f408c670860ef84d6fd94ceaac518</anchor>
      <arglist>(const Epetra_RowMatrix &amp;Matrix)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__Reordering.html</anchorfile>
      <anchor>a23d6ea49f58bc6d2750a5bd09e3361c5</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Reorder</name>
      <anchorfile>classIfpack__Reordering.html</anchorfile>
      <anchor>ac7461d63edd7971a4bb66270548a2286</anchor>
      <arglist>(const int i) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>InvReorder</name>
      <anchorfile>classIfpack__Reordering.html</anchorfile>
      <anchor>aab7799ec1bba206fec486b8bd463691c</anchor>
      <arglist>(const int i) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>P</name>
      <anchorfile>classIfpack__Reordering.html</anchorfile>
      <anchor>acf064e924f281efe4ef36fb4c81e10b5</anchor>
      <arglist>(const Epetra_MultiVector &amp;Xorig, Epetra_MultiVector &amp;X) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>Pinv</name>
      <anchorfile>classIfpack__Reordering.html</anchorfile>
      <anchor>a886bad66eef4551d239999b55d3da77f</anchor>
      <arglist>(const Epetra_MultiVector &amp;Xorig, Epetra_MultiVector &amp;X) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__Reordering.html</anchorfile>
      <anchor>a52c6e259c0f0e3d04c7f01920b286831</anchor>
      <arglist>(std::ostream &amp;os) const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_SerialTriDiMatrix</name>
    <filename>classIfpack__SerialTriDiMatrix.html</filename>
    <base>Epetra_CompObject</base>
    <base>Epetra_Object</base>
    <base>Epetra_BLAS</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyMat</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a39cea1c8d2bfaeb79dbf5a929c42bf04</anchor>
      <arglist>(const double *Source, int NumRowCol, double *Target, int NRC2, bool add=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CleanupData</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a6050ecb47e6426fdc2f5bbb8f3dc28c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>N_</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a77d24b831b0576b4978bfb1b690208d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LDA_</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a50640ca30646493a56a0c3e507fa0519</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>A_Copied_</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a95ad9f7f030eeca96ed939c028cdd9af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_DataAccess</type>
      <name>CV_</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a1ff521c9e17266bf23bd419264aff816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>A_</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a0452ce6a16e228e173261c322c3d7d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>DL_</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a2bfeb33c31407094fb0e39c5caad3bed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>D_</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a6437e475b9550f5a77d990da56a17638</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>DU_</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a74e79ddd932a22fff33e16e8870d7e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>DU2_</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a5ebd3d8ce54b11195e4a7ab0b63a3dc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a04ba0158ec0b6db0ed28ad671a79076c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Epetra_VbrMatrix</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>aed04a04165ad30553cafe5060cda02db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_SerialTriDiMatrix</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>aef78c231dd2f23590895ae6a242084ee</anchor>
      <arglist>(bool set_object_label=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_SerialTriDiMatrix</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>ade0fc8d215c62ed363106e3df646f91f</anchor>
      <arglist>(int NumRowCol, bool set_object_label=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_SerialTriDiMatrix</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a96de676d5794763c23ccadc69af6bb75</anchor>
      <arglist>(Epetra_DataAccess CV, double *A_in, int NumRowCol, bool set_object_label=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_SerialTriDiMatrix</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a544ac96354423ac4dfac35f40065ee64</anchor>
      <arglist>(const Ifpack_SerialTriDiMatrix &amp;Source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_SerialTriDiMatrix</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a8f8884c6e9eef6fa1632e8b54a9b1fee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Shape</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a42eae7614b8d13b8fd94475727df8865</anchor>
      <arglist>(int NumRowCol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Reshape</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a261ee12016d1d9015849b0542385e18e</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Multiply</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>ad969e79e1a3998b06bab2fa6752ca06f</anchor>
      <arglist>(char TransA, char TransB, double ScalarAB, const Ifpack_SerialTriDiMatrix &amp;A, const Ifpack_SerialTriDiMatrix &amp;B, double ScalarThis)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Scale</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>ac39e63575d4531c92530eb5d1a3dc52b</anchor>
      <arglist>(double ScalarA)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormOne</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a5c9346ab531f1bed493686c0f031b962</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a676c3109655accdcaa173796389a4ef5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Ifpack_SerialTriDiMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>ad5e8954e276600ed78f8f6a547850f02</anchor>
      <arglist>(const Ifpack_SerialTriDiMatrix &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a063d06c1502e3ab6be1aca95512e32a1</anchor>
      <arglist>(const Ifpack_SerialTriDiMatrix &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a7f1e340ec8466936c6fd3dbe582dd1fd</anchor>
      <arglist>(const Ifpack_SerialTriDiMatrix &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Ifpack_SerialTriDiMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>afe7cddb6bd1d8b6876c71c5862dc8166</anchor>
      <arglist>(const Ifpack_SerialTriDiMatrix &amp;Source)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a924fb3f4eabbc7b08ad8d38108b7dc0d</anchor>
      <arglist>(int RowIndex, int ColIndex)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>ae744d643a0fced6be9310b9429dc48fb</anchor>
      <arglist>(int RowIndex, int ColIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Random</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>ac368d9c9ccdb75e98992ebcbec698ffd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a5746ee15d95511a7d97040935be5fd84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LDA</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>ae3223f1f35e7397d1c1b975f86e76cf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>A</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a1e65c0b29397275c8d43926a31f04e7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>DL</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a0dc0f0ecdf38bfc2057dacd7862fc857</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>DL</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>ad0302502e9e2e040f965b479840f77d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>D</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a296c0dde9e538e3d419ab085dde2dd44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>D</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a21c87a1afc1634d73768ff9975892d24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>DU</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>ae3ba26429a06d80821e67bdefa67e324</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>DU</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a6c85bd61b11143468073c3fd73a9ff6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>DU2</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a892c9e2eb6cb71686cd1d47475fb8fc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>DU2</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a70cd47d3331964623253554d3e79c0ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_DataAccess</type>
      <name>CV</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a9fd459541b5647c7c23c2a50419e0bb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a8fd2914a502072e2371be977aa9739d1</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>OneNorm</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a9ba78b28d94fae8156adfcb45b8c148e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InfNorm</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a0ebe448c4b3a9ff1032dd81801e8c473</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>aa40342dd4d95b55c7fa901f78250f3d9</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>ac48447adfb6f57b147561cbe1ecb8e5e</anchor>
      <arglist>(const Ifpack_SerialTriDiMatrix &amp;X, Ifpack_SerialTriDiMatrix &amp;Y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a64c1dcf26f091fc8651e02e913013521</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a2dabb76c9d41f0b8db58d851ba903c07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a21a22af6ecfc13123a66064cd046f233</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>RowColDim</name>
      <anchorfile>classIfpack__SerialTriDiMatrix.html</anchorfile>
      <anchor>a954706b707e192d9fd921d721f31b370</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_SerialTriDiSolver</name>
    <filename>classIfpack__SerialTriDiSolver.html</filename>
    <base>Epetra_CompObject</base>
    <base>Epetra_BLAS</base>
    <base>Epetra_Object</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateWORK</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a7be3b7edffb5fae782862f91b45c795f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateIWORK</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a287225c8ba9656967981c959d044edfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitPointers</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a36633b020e8af470b04971cb196a24f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeleteArrays</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>afe3533c10555b5a7b7b136fdac8e8ff5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetMatrix</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a8f775ba8f008f70ac5de01105ac0b108</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ResetVectors</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>ae3b73cf21795c44ca7be6c15f769189c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>Transpose_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>acc31519631c059ce8a723f4dd10d0572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>Factored_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a1940db6d19496657e8471cfd8ed87cd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>EstimateSolutionErrors_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a24f3d3aa6c55ddb1391b8c5bb9a0955d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>SolutionErrorsEstimated_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>aef5a3702f68f2a570b04a62eb5349d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>Solved_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a6794e84880b696a126a562f1d9f32179</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>Inverted_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>ae2321ae191788737d69225bda8aa7026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ReciprocalConditionEstimated_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>acb063b0f303419a015b59906afc46cf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>RefineSolution_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a430ab6155cc37936586ddede32e8e2cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>SolutionRefined_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a2a823fc3ab64d0cf7256fd287362d12b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>TRANS_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a4449ab97691f575fa6dab8986d8341af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>N_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a7dccff8721c8f3b949c4367286044934</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Min_MN_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a5b3797f01b519b97a9a266dcc9e7ce97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NRHS_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>af22a2a6666de362241abfc4924caefed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LDA_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>ae3b9de132d7cf4248da960a7c1ee88f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LDAF_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>ac70ac29b83a0c6ca88370c054c9b8dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LDB_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a68b8e628bd8d1ee1b65c221623c35820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LDX_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>abbfc05f32a027207f69b76678bc2f118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>INFO_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a97140c3db6552cdcbe9a2ce577992654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LWORK_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a195b23642e7365c55deba485fd70fb43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>IPIV_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>ae9ccde23f71a51cd5cf00c375f9a5727</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>IWORK_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>af7e4465996334123e3fe1b0002e2d979</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ANORM_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>aff685130783f0f554f3968ced5601ba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>RCOND_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a0c28a13cc34a0f6ad24e2fbd4f2ac88f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ROWCND_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>aab2e5f01ad95d2f232cae0c6553efe44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>COLCND_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a84cd01f4074e3d18f0f60f4450207977</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>AMAX_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a455fd849f2dfd93afe3b18f4235680b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ifpack_SerialTriDiMatrix *</type>
      <name>Matrix_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a8758f89ee0a03271e63902f448d1fef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>LHS_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a4861bed229aa1854ee2d5c2b3ed68d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>RHS_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a8d0f5c5d4ca719c9d57abc6aec1376bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ifpack_SerialTriDiMatrix *</type>
      <name>Factor_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>ac34197622e35e60c890c6c20cc4f551f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>A_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a26b47cb0914bc54f25a8ff0e3aacc284</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>FERR_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a5684dc191822dc0e52b37413cef25afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>BERR_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a4e6bf855145afe25f6c3fc27503d8769</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>AF_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a64877620ce13a6fa8fd3b4b49d8c9acb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>WORK_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>af464f7a6d0f71e6b0293ae2c427a2d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>B_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a1fea04ea244480e485e60f76461a69e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>X_</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>aef64fea11c431d5dffa5a7c9405a0819</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Ifpack_SerialTriDiSolver</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>abc8102148d80dd49ae18828a5e2b08d5</anchor>
      <arglist>(const Ifpack_SerialTriDiSolver &amp;Source)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Ifpack_SerialTriDiSolver &amp;</type>
      <name>operator=</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a081bd592e305ef56a77b04409214be89</anchor>
      <arglist>(const Ifpack_SerialTriDiSolver &amp;Source)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::LAPACK&lt; int, double &gt;</type>
      <name>lapack</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a8d38ea7bcd1488ab76d59a7c67d84942</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_SerialTriDiSolver</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>aab905fe50d266c070e174bf2db941a0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_SerialTriDiSolver</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>aafa4d5fa3daf607c00fc3dd512357b05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetMatrix</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a5981e55a8c90156843ed18ee22e98c6b</anchor>
      <arglist>(Ifpack_SerialTriDiMatrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetVectors</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>aa7e14de0f1fa7f55cd20920cf28deb3c</anchor>
      <arglist>(Epetra_SerialDenseMatrix &amp;X, Epetra_SerialDenseMatrix &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SolveWithTranspose</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>ac8df05074a6be0b6404818f1df123c5c</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SolveToRefinedSolution</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>ab42db9f3fda722cdb47ce4f4d5576e98</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EstimateSolutionErrors</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a20288e00266f661c67e81ef780899efd</anchor>
      <arglist>(bool Flag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Factor</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a7f42bda7dd4a65deed04c243ddf06b65</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Solve</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a6480748211c30deaebf1dcd034dce54c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Invert</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a567da79b53f9e3b56890cd4717d36a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyRefinement</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a2ac32c4764483c8d0ad8bfee55a8e53f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ReciprocalConditionEstimate</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a95aa75ba2fe455def4dc7344e87a89d5</anchor>
      <arglist>(double &amp;Value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Transpose</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a695cff6c6952fb7944d5636653ba55b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Factored</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a547b60957edb4e6206682a4df83105fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolutionErrorsEstimated</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>ace681cc289284b0855a9c0f4f81048e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Inverted</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a1add8ebac18fb7006d2e21677d44e8a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReciprocalConditionEstimated</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a00eb5b9b495d4fa89a950be74a966166</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Solved</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a1b246cb72b59ebf5fdcf669c45df76f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolutionRefined</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>af222f482204ba6cacd5fbddc1324d47a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ifpack_SerialTriDiMatrix *</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a6ca76d0ef6b4a8252c31ab0e1eb07c1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Ifpack_SerialTriDiMatrix *</type>
      <name>FactoredMatrix</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a80f2928e32ba07bb81e87b056df8e80c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>LHS</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a3ecca3110399100167f2aad441a42d21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Epetra_SerialDenseMatrix *</type>
      <name>RHS</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a38d3dc9d7d4d477f26852c11b3397656</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a84d59206c7699dfac48ff6794f6b3977</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>A</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a2acf511a7e673b8984f3b55d579d3697</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LDA</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a3a1cfd496d9e5a1d91aeeaa8fb52e40b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>B</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a534ed1a8573d36c5f909e4e73f16e57a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LDB</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>ad63d9e702c1c707cadac2242e42a2f95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NRHS</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>ad86dedc3c11b406a1b71d05e39b67a68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>X</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>ac793f543a29af248160703799a1a8b49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LDX</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>ae3612fa25238f5dad1a242e097e6f063</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>AF</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a7768cb12dd1c8ffe3fd65c8f8c7931e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LDAF</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a9ac1f81f438c4513c44891df4ca0a5fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>IPIV</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>ab959de8471cab2319628ba606af0542e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ANORM</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>adb9e531ef33ed2871c77ec1a34d1778c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RCOND</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a986698c401a04b93117c53b2cf290ae6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ROWCND</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a1f0b6072f69b9b076c039503185691f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>COLCND</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>aaf615f6fafa6aeb709badf4bf85621a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>AMAX</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>abf57fe1a77a7aa352019d1f524de8408</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>FERR</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a972303e51ba4e677cc99ebed5de284f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>BERR</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>aad1f52002b3aae1294209bf1f136322f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classIfpack__SerialTriDiSolver.html</anchorfile>
      <anchor>a8770076e6addb1aec48f9160aed24a1f</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_SingletonFilter</name>
    <filename>classIfpack__SingletonFilter.html</filename>
    <base virtualness="virtual">Epetra_RowMatrix</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_SingletonFilter</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a24187ef1966c749323f78a90df7eef5e</anchor>
      <arglist>(const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;Matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_SingletonFilter</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a30daf2524f630141e148fa90749132ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyRowEntries</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a7d51942dd5cb3913ec0cff2075984b2d</anchor>
      <arglist>(int MyRow, int &amp;NumEntries) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>MaxNumEntries</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a4245a303268fb9cffb32f7c905b7e4e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ExtractMyRowCopy</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a5fc22a1ec052c11fcef505b6ecc1cbc9</anchor>
      <arglist>(int MyRow, int Length, int &amp;NumEntries, double *Values, int *Indices) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ExtractDiagonalCopy</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a6727a7874babd9938bf3ad956843cb0e</anchor>
      <arglist>(Epetra_Vector &amp;Diagonal) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Multiply</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a86b7057d5a86ce3e2857995d8bc85def</anchor>
      <arglist>(bool TransA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Solve</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>ad0b976d58b70dde5488ff1b54429baf4</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a5077cd61339a24a07c409027d985aafd</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>ab3e9a888b912327d8a9005af3de58efd</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InvRowSums</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a9f1d61d586bce67972e980ea18158867</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>LeftScale</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a0e3bd3e2e75e3762e2530068a774fd5d</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InvColSums</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a9f50ce71f759e5c1e02b4784a5579701</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>RightScale</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a9f8d94446c49f13c21c277a86566c916</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Filled</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a04c4854f1a9287bbeba927fe3718c529</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a64dba3e5c997b472c1d5fd7430892834</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormOne</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a86149240b74f20bdaaaa7d36b76bd52b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a7220f86361b658ada33530ab1e324a6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a7467b95c26734307a4a475f0a56e6062</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalCols</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a30817da0d5676e4c5e167edda0fc9855</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalDiagonals</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>aec9e469e3d149f9a38d274f57736c329</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalNonzeros64</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>af2994703d7281692412cb4d034f144c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalRows64</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a88aff979fe93fa37f8404e56933fb151</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalCols64</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a536659258594cb5f9e2d8ca6ec3e024e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalDiagonals64</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a6d7bfbdf034245dcbf9e6de5b9fc1954</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a32e3d45341399a9e881ff8e25ba42b6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyRows</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>ab61b6fd0e4d831079e165fdb209465e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyCols</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a608719b3e66e985d10e5f5c4d10ecace</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyDiagonals</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a28c9114cbbe00c9a838bf77723b4018a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LowerTriangular</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>aac62208fa13a914bb70a81781c4acc7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UpperTriangular</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a7213dc3b6ef820c2eb6e8e9749e70338</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>RowMatrixRowMap</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a0f3ad4e160fd0e2cf362432a28c68905</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>RowMatrixColMap</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>ad7062ebea0858cc61f52704a63bc7208</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Import *</type>
      <name>RowMatrixImporter</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a4438f673010bc13828ce99b8edac7ad7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a7936e1ba28f7ceca2dc6af3ab219214d</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a7fa2d4d56e3f4bc0fcf9d85e3822f00e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a86384f4fba2f63b83a2f460b304c212c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a5ad492bc459bd2208ee5c09be5b0fb3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a3e551def7fde5487027c3a0c94db5940</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a2ced95dd823ffc6643600fec5eae42ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>Map</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>ab2048de4e429cf45cdc062761426f542</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>aaa87e58cb2524f1ef9a7333c3a5ecb4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SolveSingletons</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>aa2b0cddce26d6bfff52453cdc09ef033</anchor>
      <arglist>(const Epetra_MultiVector &amp;RHS, Epetra_MultiVector &amp;LHS)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CreateReducedRHS</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>ae11e86d811a915f59ee082e8381f9435</anchor>
      <arglist>(const Epetra_MultiVector &amp;LHS, const Epetra_MultiVector &amp;RHS, Epetra_MultiVector &amp;ReducedRHS)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>UpdateLHS</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>abd1be6f1b2f5192a72fa14bd2b9a3056</anchor>
      <arglist>(const Epetra_MultiVector &amp;ReducedLHS, Epetra_MultiVector &amp;LHS)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt;</type>
      <name>A_</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>abd21e8d015ac161733a22e30603da2db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>Indices_</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a196279588ea5bab89e850f93c0e4a19f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>Values_</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>af916e00e75ab374c2ce47f4818e1b236</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>Label_</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a4c5d2ed7c2017ddb7e233dcec78c95ad</anchor>
      <arglist>[80]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumSingletons_</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>aa29b873a1a63a85f0b070b97359784c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>SingletonIndex_</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a45818bcca71bad403b80be65b5cf6091</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>Reorder_</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a93599f1bade1bc889e2497f8d880fd2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>InvReorder_</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a3cd7a28da25dc2ba5f3a15b615d8d63e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>NumEntries_</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a1359d1d8923aae44ff43c5889dce631a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumRows_</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>add282aa5849df07b2687bef70b527058</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumRowsA_</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>ab7c9859188a9618afd4503c516491d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxNumEntries_</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a8be11d165e108f83f09597de3b77cd0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxNumEntriesA_</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>ad114bb4eb654f7666154605199228368</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumNonzeros_</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a5f78df74cf42e049c0e9903bd54af787</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Map &gt;</type>
      <name>Map_</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>a265cd87bcfe8af04a038891e3bb8967c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Vector &gt;</type>
      <name>Diagonal_</name>
      <anchorfile>classIfpack__SingletonFilter.html</anchorfile>
      <anchor>ae225b03a3d232b2d69a7a76e8e2543e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_SparseContainer</name>
    <filename>classIfpack__SparseContainer.html</filename>
    <templarg>T</templarg>
    <base>Ifpack_Container</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeFlops</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>afd3e33e108957e63b2189b564b991983</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeFlops</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a27cc89df55e3ece34fbb5b523d56b97d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyFlops</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a5c849cfbf826dc8194a546773c125a08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseFlops</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a202e8674bfb0acc88ae89ff098db2574</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a3252b6f865149ba3e1807ce7cc2c046f</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>Extract</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>ac6718b0c3e71c363e82627595e235929</anchor>
      <arglist>(const Epetra_RowMatrix &amp;Matrix_in)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumRows_</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a866d97be397afcf23824f0ea06ccaa93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumVectors_</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a2fd20bff9074e3969a4c43c29693fb0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Map &gt;</type>
      <name>Map_</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>ad3bedf0fe55ad7186a2228e48157210c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsMatrix &gt;</type>
      <name>Matrix_</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a070db7e63da0dd983bef77153e74b646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_MultiVector &gt;</type>
      <name>LHS_</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>ad45aaade2192eb5f2a53b3e0c964d607</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_MultiVector &gt;</type>
      <name>RHS_</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a1eb2c5e235b2e241274ca4f2618453f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_IntSerialDenseVector</type>
      <name>GID_</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>adc02a831ea937d7ccbc44597f3bbf456</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsInitialized_</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>af87a4ec1d7ec4b88d0941551f5282e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a73677e1394b4640f1362321076ab9b96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_Comm &gt;</type>
      <name>SerialComm_</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a2928a488c12db93ad8fa750112026a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; T &gt;</type>
      <name>Inverse_</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a0dda9b02451632a89e26dcaa56505527</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>Label_</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a0ff26eb28a0aec58b0d4539121df5f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::ParameterList</type>
      <name>List_</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a5a06539d175afa8f3a04cae0fad80355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyFlops_</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a3a884241b38351e071a4786538709359</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_SparseContainer</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>ad01d0253522628683e40f7eff65bff7f</anchor>
      <arglist>(const int NumRows, const int NumVectors=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_SparseContainer</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a289e0f5e38292e3aad7b0bcde1c18b5f</anchor>
      <arglist>(const Ifpack_SparseContainer&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_SparseContainer</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a76f392377646905d52934781d45b6a5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ifpack_SparseContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a8b8a9cddbc534850b54c462bdda726c5</anchor>
      <arglist>(const Ifpack_SparseContainer&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumRows</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a915587e51ac7c6ddf7c2183a93fdb164</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumVectors</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a12d4b338ed258f53bd78601a5cac6fa1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetNumVectors</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a2ada68b65964fd0d5fbe1503e65889ac</anchor>
      <arglist>(const int NumVectors_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double &amp;</type>
      <name>LHS</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a5a3bc66291496299f6ab4e2014dc8c80</anchor>
      <arglist>(const int i, const int Vector=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double &amp;</type>
      <name>RHS</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>aea91d1026891d972e2218d04ad9f3c95</anchor>
      <arglist>(const int i, const int Vector=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int &amp;</type>
      <name>ID</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>aec3c96c657c5abc4f4a3ba08acc32f69</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMatrixElement</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a4519e990e97001bde7d484110de83419</anchor>
      <arglist>(const int row, const int col, const double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsInitialized</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a2897bf59fe32fdc08f762104999d5543</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a8be325abcdaf35cab5c3285c8e7f3e69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>aa5ce25cee6a8ff7da28dacf8805095da</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a2b8483a8b24d6e9622c9006dfcf9afdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Epetra_Map &gt;</type>
      <name>Map</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a3ea3b5022d442f3479ac93147648cb05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Epetra_MultiVector &gt;</type>
      <name>LHS</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>acb81b2828b606f626fce89c08825eecc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Epetra_MultiVector &gt;</type>
      <name>RHS</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>afefdb884c7b2f415c1c5e3ace0d8038f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Epetra_CrsMatrix &gt;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>afa46a9f756651ba8a7f1bcd57556475c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_IntSerialDenseVector &amp;</type>
      <name>ID</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a38ff12a646208d4bbb63306691a42b95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const T &gt;</type>
      <name>Inverse</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>aaae3832b192e9187c40d6dffcfd73c57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Initialize</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a55eba787d566ae9c85be6079189e7902</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a7a09ba605a4cc02444e80bde10b05d3b</anchor>
      <arglist>(const Epetra_RowMatrix &amp;Matrix_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a1e72879ea7dc80a7e19f4b9860f6d170</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>aaf9ccc09d8d5ed844e4e8c4f9d7a0242</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Destroy</name>
      <anchorfile>classIfpack__SparseContainer.html</anchorfile>
      <anchor>a60b1566b0f9a3ea39be955fa385e6ae3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_SparsityFilter</name>
    <filename>classIfpack__SparsityFilter.html</filename>
    <base virtualness="virtual">Epetra_RowMatrix</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_SparsityFilter</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a2a5e8c743322b527a1c93ba58daf316f</anchor>
      <arglist>(const Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt; &amp;Matrix, int AllowedNumEntries, int AllowedBandwidth=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_SparsityFilter</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a1f742f228f47a08a29dd01599d842c82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyRowEntries</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a49a43ebfa90860f6b477114c96b3dd19</anchor>
      <arglist>(int MyRow, int &amp;NumEntries) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>MaxNumEntries</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a0be12a6073a6dffb76530cec02f411da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ExtractMyRowCopy</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a7df24f4d6964cc165cf0374e06c9c9ed</anchor>
      <arglist>(int MyRow, int Length, int &amp;NumEntries, double *Values, int *Indices) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ExtractDiagonalCopy</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a2504501ff06718eb35a66e0da790a28f</anchor>
      <arglist>(Epetra_Vector &amp;Diagonal) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Multiply</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a8ac0572737be7b44a0028afc9bcd8308</anchor>
      <arglist>(bool TransA, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Solve</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a309b75858c82b1690297e4d67d2ab38f</anchor>
      <arglist>(bool Upper, bool Trans, bool UnitDiagonal, const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>ac1a5e222675f94ac49e77b08bc57f1ff</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a89739defebf57558b4d621a814f23f01</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InvRowSums</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>ae738f20a4003873ee99412ff5eb6d1b7</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>LeftScale</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>aa78aa2eb603b8becfba436fb6dafbad6</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InvColSums</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>ad34f841a72e21c645b1a43ec942bb10e</anchor>
      <arglist>(Epetra_Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>RightScale</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>ab0517f51e6552adf11e138d933845053</anchor>
      <arglist>(const Epetra_Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Filled</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>adb0aa5aa9f8b504378ed096835ff9971</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a411b7abe3f628c176bb28a9e7effc9bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormOne</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a890d7bcbeb0f9d511aff5c6020f06ca1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalNonzeros</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a4627ecb615110eb63570414054e825e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalRows</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>ae43f2a8c83a7b19aba070935a8755079</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalCols</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a11dfdb9b4dceef5517c8a411766fa698</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumGlobalDiagonals</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a0f939a21b55263daa2334e9e64d0a461</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalNonzeros64</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a31b8986edc571a9be7b7ef692ad102a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalRows64</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>aff0b7e39e7f8dff7800c884fd2c49095</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalCols64</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>ac8a5db6ade921de3534765cff9066e7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long long</type>
      <name>NumGlobalDiagonals64</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a4052c1f38bc5923a2f5bb1ae87ac7f32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyNonzeros</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a9a21550120385eb1f2aa12fb2d03bb46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyRows</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>ac8f854804bd801bb2d1a1f7cf99f1384</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyCols</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a39d6f3b5ef197a541338095560ca0c49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumMyDiagonals</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>aa6a9c943e42f19f668ef7ead03178de2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LowerTriangular</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a5fa31abc3ecc0af38e380813b0e105c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UpperTriangular</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a49fed08d6492a5be55f4b22962698645</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>RowMatrixRowMap</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>ac350eb626a229c2a22bed0eade30c2f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>RowMatrixColMap</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a6cae7705a8e53f23134033f783403507</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Import *</type>
      <name>RowMatrixImporter</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a2eca0eb40c49fc9b96e489dcfc5f2a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a6a84c79785eb99f86bfd15d9434c98ab</anchor>
      <arglist>(bool useTranspose)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a2572ee1c8cd51134e2294ce618197ada</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a20d2e2fa26c652931686aeb3918f6939</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a3a643474751c09fe3727016d46b689d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a242edb0d3458c2c6183f9e56954fabb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>ab8575ee45569b7e963047101b46d72c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Epetra_BlockMap &amp;</type>
      <name>Map</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>aa24cccd9b9fcafcdc454915f670df0a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a8765065cfbcff18826eedda10098e0ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RefCountPtr&lt; Epetra_RowMatrix &gt;</type>
      <name>A_</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a33a27b71aa6a1b75aab9713e5d446e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxNumEntries_</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a0478feb2688b36aa240ddfc44d188727</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>MaxNumEntriesA_</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a93a5d5352de9d5625586a86948ae5953</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>AllowedBandwidth_</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>af9501a18f4833f2b67ab6ebf779f94f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>AllowedEntries_</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>ad9a7e843d96974ca26739751e2e7d5ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumNonzeros_</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a4b56b07badcdad2244b1edd048839416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>Indices_</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>ad9f2d78bc7d2a64a5b9563bcbdc65862</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>Values_</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a779b7ff5e323249f9b9d251d3e5fff80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>Label_</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a141da40b0387b1b5588ded5353b36770</anchor>
      <arglist>[80]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumRows_</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>af932ecb35712619441a0c3729f75e9ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>NumEntries_</name>
      <anchorfile>classIfpack__SparsityFilter.html</anchorfile>
      <anchor>a8ba669700dbe04c3fc3fb97512f17cad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_SupportGraph</name>
    <filename>classIfpack__SupportGraph.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">Ifpack_Preconditioner</base>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>FindSupport</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>aaba6abb28ec9b3d7e7e40ef3963c3701</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RefCountPtr&lt; const Epetra_RowMatrix &gt;</type>
      <name>Matrix_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>af9b7973d5712f32f30a9752f6e18c28f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RefCountPtr&lt; Epetra_CrsMatrix &gt;</type>
      <name>Support_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a24e657955287c046fa0c4f0124f88387</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>Label_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a3fb577b39b12cb85cf4fe2ccaba3bb04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>IsInitialized_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a1a311e7610490ba4d06c7a311376e284</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>abd91588e672a90ba9c761987e684f704</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>UseTranspose_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>af935266354fbb9ba542869b73d1beb02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::ParameterList</type>
      <name>List_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>add6966f74d5c5baae17165686129a104</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>Condest_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a1e50b1b77202c3b1a884a9d28f60b1da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumInitialize_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a38361066b3e2f2c0a539ab0d76535968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumCompute_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a3be09f76b241f2966f6226369dd6b0c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumApplyInverse_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a13531d5972749d4e5ec5f15e45408667</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>InitializeTime_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>ada9e22cdada009cf5c1c0a444616e19d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ComputeTime_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>af01ed682fa9528f2b754f9978f38b2a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ApplyInverseTime_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>ae455951bf971ccc04d535657b3c62835</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>InitializeFlops_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a6ccb158c36482be8ff5aba225c16c164</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ComputeFlops_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>ab264fad767d78616a54c1bf12c564e16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ApplyInverseFlops_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>acc1bb939a815cc4594789aebf8f8527d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RefCountPtr&lt; Epetra_Time &gt;</type>
      <name>Time_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a7aa096b78b86b381ed00a9bdda360f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RefCountPtr&lt; T &gt;</type>
      <name>Inverse_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a4a5858a2cada34c7cdc28836964f5630</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumForests_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a1cf1853af3e54bd66a18b8594331bdd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>DiagPertRel_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a0b198d6749e20aa3efb3cf954d08ea54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>DiagPertAbs_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>ab9a8f555c35f0c50c40ce0c582d0fe59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>KeepDiag_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a3ceeab270722ed94a52fb06296eb39a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Randomize_</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>aab28b24c1d3230cd0aa25584a431cd8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_SupportGraph</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a1ac628c91ad1ddb265cad399cf974f1b</anchor>
      <arglist>(Epetra_RowMatrix *Matrix_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetUseTranspose</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a16fecd46f0a8fcac04447e64a7b76603</anchor>
      <arglist>(bool UseTranspose_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a8efb5c8ed12c251a43d70d9238852dc0</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>af92fa782c2b0060b1f11649fd15a9950</anchor>
      <arglist>(const Epetra_MultiVector &amp;X, Epetra_MultiVector &amp;Y) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>NormInf</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a8b2c7f52546b2bce6b3a98d14b6c7f5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a636b355ea7521a7e7ed820299b4dac8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>UseTranspose</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>aebd3aef8582ebc223cf8b5750bb250fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasNormInf</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a57015d27d36c5c2fc12063bcb6204329</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Comm &amp;</type>
      <name>Comm</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>ac287914e056a5f97f7a5136a5aab0e03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorDomainMap</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a7b238de07d45addd6de88ff615c7880c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_Map &amp;</type>
      <name>OperatorRangeMap</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a40fc2a362b9d0b5787beb4ee7a747bd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsInitialized</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a512240346fd2d0ed5c85e2ae7dcd3748</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a2c236f88eb47b8e88c79eb6598663560</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>aaa24f840b682ede12761a3a7e04fc4e0</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Initialize</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a552f68c40e23422ffc177b294d1ddca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>ab81dbb90d91f4f566d80734fc704fdd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a98a40d0851ebee2fcdb695d6e638d318</anchor>
      <arglist>(const Ifpack_CondestType CT=Ifpack_Cheap, const int MaxIters=1550, const double Tol=1e-9, Epetra_RowMatrix *Matrix_in=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Condest</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a75d8e7e65851566003e86a4ffd28d115</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_RowMatrix &amp;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a2676137eab4830d7da2d9f816b251823</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a65151f8b604a3fb6784237267ef96703</anchor>
      <arglist>(std::ostream &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumInitialize</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a15ac241a7a51bbea2538fb4aec7582b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumCompute</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>ab59958a58ebfe5cb55c5da0dd996e6b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumApplyInverse</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a67e6ff7e498d5376e21462e9cd5c60fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeTime</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>af5846b0b7eb135b3a9102a08cd30d1f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeTime</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>ae5186bbee7b9213898bd3650402b2750</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseTime</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a1389b3c880bdd64f5788e92b29718750</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeFlops</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>accb725d47b2b19cfe29eddeed22fcd34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeFlops</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a3a77aeb2a2c1cea404f0b39024d63127</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseFlops</name>
      <anchorfile>classIfpack__SupportGraph.html</anchorfile>
      <anchor>a8b52047312711d6505b08a8343e738d7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_TriDiContainer</name>
    <filename>classIfpack__TriDiContainer.html</filename>
    <base>Ifpack_Container</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>InitializeFlops</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a1c505137a67c33936f83e525a3f58941</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ComputeFlops</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a78d97a5cd0e1b755f38aa8ce7cb53cea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyFlops</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a9700d0c84e7180d4f1063814ece19029</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApplyInverseFlops</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a1a9f688d63dff35b867f47ada2913501</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a763a5d3b0cac47fee069e9021f45414e</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>Extract</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>ab3ad160b3fd31cf90e3a5733f4da7b74</anchor>
      <arglist>(const Epetra_RowMatrix &amp;Matrix_in)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumRows_</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a57f2221b88e17db2e0a34928a5573f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumVectors_</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>adb7366c944e4060bab91d36155bb6cc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Ifpack_SerialTriDiMatrix</type>
      <name>NonFactoredMatrix_</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a6bd2ffe0a9ad4a7e6d53eed37416e764</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Ifpack_SerialTriDiMatrix</type>
      <name>Matrix_</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a7c1bb16f9734289c95f2a1c1e5082eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_SerialDenseMatrix</type>
      <name>LHS_</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a5e1a31ef1f7e4e85ff0e19913c0fa221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_SerialDenseMatrix</type>
      <name>RHS_</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a5f2087c00a2219296b7a0d21873faecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Ifpack_SerialTriDiSolver</type>
      <name>Solver_</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>aabc7fba50efe96c8fd6fa7fc9923170d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Epetra_IntSerialDenseVector</type>
      <name>ID_</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a7b9f29c73002b1acb9b327e3c35cd0f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>KeepNonFactoredMatrix_</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>ada20422bfe53fd652ff5178b6919d8bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsInitialized_</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>ab202a9990d51a92659cb9e37f0d3f149</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>IsComputed_</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a9c29b7e647ba154563f8e37e218165ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>Label_</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>abc5e774603c99acb66159a18880ef89e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ComputeFlops_</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>acefffcb00e4f9d0e65cd99e25bbb3361</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyFlops_</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a207503cebef455368977dbb6db54253f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ApplyInverseFlops_</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a7944e19059cf9870b130503ace680ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_TriDiContainer</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a7438048740246af745e5826d05bd1c96</anchor>
      <arglist>(const int NumRows_in, const int NumVectors_in=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ifpack_TriDiContainer</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a5d2807555379191c32ef02b3d87af4c5</anchor>
      <arglist>(const Ifpack_TriDiContainer &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_TriDiContainer</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>ad82693fc274f6a08ce9e1b9c96c96ca5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ifpack_TriDiContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>af011b4a792e8e850a4053599ec54b462</anchor>
      <arglist>(const Ifpack_TriDiContainer &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumRows</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a8d4a2a2ab085a02b27b734d3ffe2f0df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumVectors</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a6f482755db659fb2d74b23361839631c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetNumVectors</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>ab839df99e0c140bfa8d7d64ee662fe8e</anchor>
      <arglist>(const int NumVectors_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double &amp;</type>
      <name>LHS</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a3adc2f6f79cfb4ffbd797d2b991f2e88</anchor>
      <arglist>(const int i, const int Vector=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double &amp;</type>
      <name>RHS</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a4e02c11a6dcb9c90bc0c5f0f8b923e1a</anchor>
      <arglist>(const int i, const int Vector=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int &amp;</type>
      <name>ID</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>ac24d6b74243c4ab129dcd272a2d99e7c</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetMatrixElement</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a7b248f920dc5f2003ef974287ff1b888</anchor>
      <arglist>(const int row, const int col, const double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetParameters</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>aee1be93e0c3b8fcc30ac82b8ca10f78b</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsInitialized</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a04ac2f8f04ae38e2609564ab396dcaa0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsComputed</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a2ccf120e25ba0362e60ea3a52760a7f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>Label</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a08e9995155a066433059a2a95fc01134</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>SetKeepNonFactoredMatrix</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a72710d6806c67341ac3542d5bb8a0b3f</anchor>
      <arglist>(const bool flag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>KeepNonFactoredMatrix</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a463e342a84ed4c8e9de76329ba2a9a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_SerialDenseMatrix &amp;</type>
      <name>LHS</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a43b428e1a9751c2caedf34835c821b4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_SerialDenseMatrix &amp;</type>
      <name>RHS</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a780da3d8256165cb6728c71d88aa2328</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ifpack_SerialTriDiMatrix &amp;</type>
      <name>Matrix</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>aa97e4e662f05f54377cfc1524c55d4a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Ifpack_SerialTriDiMatrix &amp;</type>
      <name>NonFactoredMatrix</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a9fdbe8a6f896df5ec4de673a410dd199</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Epetra_IntSerialDenseVector &amp;</type>
      <name>ID</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>af6abf9536be8e97fb96d70d77f620a35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Initialize</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a55f33bba6ec390a24ccd5ed4f95a5431</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Compute</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a1a13e0196711831b204224b0a303532b</anchor>
      <arglist>(const Epetra_RowMatrix &amp;Matrix_in)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Apply</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a5d4846d88eb66a36ef5ffa9155160c18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>ApplyInverse</name>
      <anchorfile>classIfpack__TriDiContainer.html</anchorfile>
      <anchor>a27bbda9cac1f672690c84142b8c8247b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ifpack_UserPartitioner</name>
    <filename>classIfpack__UserPartitioner.html</filename>
    <base>Ifpack_OverlappingPartitioner</base>
    <member kind="function">
      <type></type>
      <name>Ifpack_UserPartitioner</name>
      <anchorfile>classIfpack__UserPartitioner.html</anchorfile>
      <anchor>a69af7df566871935058a9b34e69de3e9</anchor>
      <arglist>(const Ifpack_Graph *Graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Ifpack_UserPartitioner</name>
      <anchorfile>classIfpack__UserPartitioner.html</anchorfile>
      <anchor>af97400487e75704a779983a2b61fe8de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SetPartitionParameters</name>
      <anchorfile>classIfpack__UserPartitioner.html</anchorfile>
      <anchor>af4a835b268a8694c637b7634929633df</anchor>
      <arglist>(Teuchos::ParameterList &amp;List)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ComputePartitions</name>
      <anchorfile>classIfpack__UserPartitioner.html</anchorfile>
      <anchor>a219a93f2778787ca0afcb0e22e453435</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>Map_</name>
      <anchorfile>classIfpack__UserPartitioner.html</anchorfile>
      <anchor>a2b123926fc57329b6fb3f952af470410</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Laplacian</name>
    <filename>classLaplacian.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getElementLHS</name>
      <anchorfile>classLaplacian.html</anchorfile>
      <anchor>af1b9780265ee89b3cb013ac49b41e6df</anchor>
      <arglist>(const double &amp;x, const double &amp;y, const double &amp;z, const double &amp;phi_i, const double &amp;phi_i_derx, const double &amp;phi_i_dery, const double &amp;phi_i_derz, const double &amp;phi_j, const double &amp;phi_j_derx, const double &amp;phi_j_dery, const double &amp;phi_j_derz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getElementRHS</name>
      <anchorfile>classLaplacian.html</anchorfile>
      <anchor>a1c130766108e848aaf8287ee98454a3b</anchor>
      <arglist>(const double &amp;x, const double &amp;y, const double &amp;z, const double &amp;phi_i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getBoundaryValue</name>
      <anchorfile>classLaplacian.html</anchorfile>
      <anchor>a8ee1d55319bb2f5a8162fb734ba9929b</anchor>
      <arglist>(const double &amp;x, const double &amp;y, const double &amp;z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>getBoundaryType</name>
      <anchorfile>classLaplacian.html</anchorfile>
      <anchor>a95008200275ae5bfc9c9ce3eb6950ee5</anchor>
      <arglist>(const int ID, const double &amp;x, const double &amp;y, const double &amp;z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getExactSolution</name>
      <anchorfile>classLaplacian.html</anchorfile>
      <anchor>a42e4b70b88ffccf02f14dea3b65ace70</anchor>
      <arglist>(const char &amp;what, const double &amp;x, const double &amp;y, const double &amp;z)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>memRecord_dh</name>
    <filename>structmemRecord__dh.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>size</name>
      <anchorfile>structmemRecord__dh.html</anchorfile>
      <anchor>ad12aa1a1fd81ed7fb6d8c5e085cf61e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>cookie</name>
      <anchorfile>structmemRecord__dh.html</anchorfile>
      <anchor>a2c7bfff9dab38e3f8d84fc8bc453b8a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MyVectorLaplacian</name>
    <filename>classMyVectorLaplacian.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getElementLHS</name>
      <anchorfile>classMyVectorLaplacian.html</anchorfile>
      <anchor>a042d23e1dc83914762836e9bbe1cd3dd</anchor>
      <arglist>(const double &amp;x, const double &amp;y, const double &amp;z, const int &amp;ieq, const int &amp;jeq, const double &amp;phi_i, const double &amp;phi_i_derx, const double &amp;phi_i_dery, const double &amp;phi_i_derz, const double &amp;phi_j, const double &amp;phi_j_derx, const double &amp;phi_j_dery, const double &amp;phi_j_derz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getElementRHS</name>
      <anchorfile>classMyVectorLaplacian.html</anchorfile>
      <anchor>a7b9a4e5512dcb353f62a9073f625bfb8</anchor>
      <arglist>(const double &amp;x, const double &amp;y, const double &amp;z, const int &amp;eq, const double &amp;phi_i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getBoundaryValue</name>
      <anchorfile>classMyVectorLaplacian.html</anchorfile>
      <anchor>aee214dc23bb277bad5f4bf447c2540e1</anchor>
      <arglist>(const double &amp;x, const double &amp;y, const double &amp;z, const int &amp;eq)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>getBoundaryType</name>
      <anchorfile>classMyVectorLaplacian.html</anchorfile>
      <anchor>a91314d907e704d7ccaa426ca4ad98809</anchor>
      <arglist>(const int ID, const double &amp;x, const double &amp;y, const double &amp;z, const int &amp;eq)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getExactSolution</name>
      <anchorfile>classMyVectorLaplacian.html</anchorfile>
      <anchor>a5c0bae3c023cbe4c802508d361595a0c</anchor>
      <arglist>(const char &amp;what, const double &amp;x, const double &amp;y, const double &amp;z, const int eq=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getEpsilon</name>
      <anchorfile>classMyVectorLaplacian.html</anchorfile>
      <anchor>a155d0a9fe74db0492bc0f081c085c18e</anchor>
      <arglist>(const double &amp;x, const double &amp;y, const double &amp;z, const int &amp;eq)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Ifpack::param_struct</name>
    <filename>structIfpack_1_1param__struct.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>int_params</name>
      <anchorfile>structIfpack_1_1param__struct.html</anchorfile>
      <anchor>abe716071b602cf117706906d1d27825d</anchor>
      <arglist>[LAST_INT_PARAM-FIRST_INT_PARAM+1]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>double_params</name>
      <anchorfile>structIfpack_1_1param__struct.html</anchorfile>
      <anchor>a9a99d07a5914833e89204541e390df8a</anchor>
      <arglist>[FIRST_INT_PARAM]</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_reciprocal</name>
      <anchorfile>structIfpack_1_1param__struct.html</anchorfile>
      <anchor>ab157c4dea15d399843d4e78f49dcfecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Epetra_CombineMode</type>
      <name>overlap_mode</name>
      <anchorfile>structIfpack_1_1param__struct.html</anchorfile>
      <anchor>a53915d1f06f3e4fa8b53d71343f77c65</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>row_matrix</name>
    <filename>structrow__matrix.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>nzmax</name>
      <anchorfile>structrow__matrix.html</anchorfile>
      <anchor>ad80d0e28152d6895d149ef73f76a82b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m</name>
      <anchorfile>structrow__matrix.html</anchorfile>
      <anchor>afbc8113adf108c3918d6cb1170827315</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n</name>
      <anchorfile>structrow__matrix.html</anchorfile>
      <anchor>a9717fb94f466f5a8a1508a2317170206</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>p</name>
      <anchorfile>structrow__matrix.html</anchorfile>
      <anchor>af1ad18d692e5dce6180a4a0faa574a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>j</name>
      <anchorfile>structrow__matrix.html</anchorfile>
      <anchor>a72b76e3748bc9dd89a83d4acbfedba6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>x</name>
      <anchorfile>structrow__matrix.html</anchorfile>
      <anchor>aa0ac8a28bb19d958ba7f3cfa1414ac34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nz</name>
      <anchorfile>structrow__matrix.html</anchorfile>
      <anchor>a6d7773dd59ae2b636cad519295bf839c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stack_node</name>
    <filename>structstack__node.html</filename>
    <member kind="variable">
      <type>int *</type>
      <name>lo</name>
      <anchorfile>structstack__node.html</anchorfile>
      <anchor>a18d8f354f5ec9df8996c1eec40847e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>hi</name>
      <anchorfile>structstack__node.html</anchorfile>
      <anchor>a499b4614643f0311274361c074e0aa07</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TIfpack_HashTable</name>
    <filename>classTIfpack__HashTable.html</filename>
    <templarg>key_type</templarg>
    <member kind="function">
      <type></type>
      <name>TIfpack_HashTable</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>aed38d206783662eb8dc58f73a7313e31</anchor>
      <arglist>(const int n_keys=1031, const int n_sets=1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a23e6859775d7a41483aa96f8c3d43532</anchor>
      <arglist>(const key_type key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a780a49fec4f4827fc8ae3fa115275f3e</anchor>
      <arglist>(const key_type key, const double value, const bool addToValue=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>ab1ea73b4f97468db9c0bd43dc4bfeed3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEntries</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a511fd456990f5ae434ea96a7ebedec68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arrayify</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a28672a430328d2eadb73272f38bd8001</anchor>
      <arglist>(key_type *key_array, double *val_array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a4196305e173375fd0c833864c6322ecc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRecommendedHashSize</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a9d6d068d778daa71da8d807838d0031c</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>doHash</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>ae92b8af41b29b2b8c339bd79d46848cf</anchor>
      <arglist>(const key_type key)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>n_keys_</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>ac91327c5279e09ddbbc1354043832866</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>n_sets_</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>ad050c14ffb0b642f028e662cac21ff3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>vals_</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a74ed00f78cc81c011f266b8d2d6919d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; key_type &gt; &gt;</type>
      <name>keys_</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>ab7b0c313cab5613e4ceab77d85275f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>counter_</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a94ad6c5889296bdabaf158959e2c9512</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>seed_</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a160ead86e05f337131faaf56be399f0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TIfpack_HashTable&lt; int &gt;</name>
    <filename>classTIfpack__HashTable.html</filename>
    <member kind="function">
      <type></type>
      <name>TIfpack_HashTable</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>aed38d206783662eb8dc58f73a7313e31</anchor>
      <arglist>(const int n_keys=1031, const int n_sets=1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a23e6859775d7a41483aa96f8c3d43532</anchor>
      <arglist>(const int key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a780a49fec4f4827fc8ae3fa115275f3e</anchor>
      <arglist>(const int key, const double value, const bool addToValue=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>ab1ea73b4f97468db9c0bd43dc4bfeed3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEntries</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a511fd456990f5ae434ea96a7ebedec68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arrayify</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a28672a430328d2eadb73272f38bd8001</anchor>
      <arglist>(int *key_array, double *val_array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a4196305e173375fd0c833864c6322ecc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRecommendedHashSize</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a9d6d068d778daa71da8d807838d0031c</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>doHash</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>ae92b8af41b29b2b8c339bd79d46848cf</anchor>
      <arglist>(const int key)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>n_keys_</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>ac91327c5279e09ddbbc1354043832866</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>n_sets_</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>ad050c14ffb0b642f028e662cac21ff3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>vals_</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a74ed00f78cc81c011f266b8d2d6919d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; int &gt; &gt;</type>
      <name>keys_</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>ab7b0c313cab5613e4ceab77d85275f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>counter_</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a94ad6c5889296bdabaf158959e2c9512</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>seed_</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a160ead86e05f337131faaf56be399f0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TIfpack_HashTable&lt; long long &gt;</name>
    <filename>classTIfpack__HashTable.html</filename>
    <member kind="function">
      <type></type>
      <name>TIfpack_HashTable</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>aed38d206783662eb8dc58f73a7313e31</anchor>
      <arglist>(const int n_keys=1031, const int n_sets=1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a23e6859775d7a41483aa96f8c3d43532</anchor>
      <arglist>(const long long key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a780a49fec4f4827fc8ae3fa115275f3e</anchor>
      <arglist>(const long long key, const double value, const bool addToValue=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>ab1ea73b4f97468db9c0bd43dc4bfeed3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEntries</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a511fd456990f5ae434ea96a7ebedec68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arrayify</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a28672a430328d2eadb73272f38bd8001</anchor>
      <arglist>(long long *key_array, double *val_array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a4196305e173375fd0c833864c6322ecc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRecommendedHashSize</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a9d6d068d778daa71da8d807838d0031c</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>doHash</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>ae92b8af41b29b2b8c339bd79d46848cf</anchor>
      <arglist>(const long long key)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>n_keys_</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>ac91327c5279e09ddbbc1354043832866</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>n_sets_</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>ad050c14ffb0b642f028e662cac21ff3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>vals_</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a74ed00f78cc81c011f266b8d2d6919d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; long long &gt; &gt;</type>
      <name>keys_</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>ab7b0c313cab5613e4ceab77d85275f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>counter_</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a94ad6c5889296bdabaf158959e2c9512</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>seed_</name>
      <anchorfile>classTIfpack__HashTable.html</anchorfile>
      <anchor>a160ead86e05f337131faaf56be399f0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>helper</name>
    <filename>namespacehelper.html</filename>
    <member kind="function">
      <type>void</type>
      <name>GetParameter</name>
      <anchorfile>namespacehelper.html</anchorfile>
      <anchor>a2d4358ea7adbb129df5c00c3d7922b10</anchor>
      <arglist>(const Teuchos::ParameterList &amp;params, const std::string &amp;name, T &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Ifpack</name>
    <filename>namespaceIfpack.html</filename>
    <class kind="struct">Ifpack::param_struct</class>
    <member kind="function">
      <type>Teuchos::map&lt; std::string, parameter &gt; &amp;</type>
      <name>key_map</name>
      <anchorfile>namespaceIfpack.html</anchorfile>
      <anchor>a138b475b051a467d1b2e92308f56cc51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize_string_map</name>
      <anchorfile>namespaceIfpack.html</anchorfile>
      <anchor>a6efacf1036331f9bf43e5290e09d21af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>upper_case</name>
      <anchorfile>namespaceIfpack.html</anchorfile>
      <anchor>a71ec33ea04409c32fbd11d3055a33e45</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_parameters</name>
      <anchorfile>namespaceIfpack.html</anchorfile>
      <anchor>a929690bd471b9a3ba6d5cb94a7f79f4d</anchor>
      <arglist>(const Teuchos::ParameterList &amp;parameterlist, param_struct &amp;params, bool cerr_warning_if_unused)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Teuchos</name>
    <filename>namespaceTeuchos.html</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Ifpack Package Browser (Single Doxygen Collection)</title>
    <filename>index</filename>
  </compound>
</tagfile>
