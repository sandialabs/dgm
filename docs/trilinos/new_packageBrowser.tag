<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>ad_deriv.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/</path>
    <filename>ad__deriv_8h</filename>
    <class kind="struct">DERIV_TYPE</class>
    <member kind="define">
      <type>#define</type>
      <name>ad_GRAD_PTR</name>
      <anchorfile>ad__deriv_8h.html</anchorfile>
      <anchor>a112aec48dfbc07611fe6e48d6f373f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ad_GRAD_MAX</name>
      <anchorfile>ad__deriv_8h.html</anchorfile>
      <anchor>a3e5bcd1c0e1ff6609e47c2c752eb5cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AD_INIT_MAP</name>
      <anchorfile>ad__deriv_8h.html</anchorfile>
      <anchor>a3c2fd2b29575ce8664ff0f20468f6093</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AD_CLEANUP_MAP</name>
      <anchorfile>ad__deriv_8h.html</anchorfile>
      <anchor>a86acdacec3606da8260639f9f5efb373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AD_GET_DERIV_OBJ</name>
      <anchorfile>ad__deriv_8h.html</anchorfile>
      <anchor>a36b440be2a273fb78411e0169f3c6e7b</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AD_FREE_DERIV_OBJ</name>
      <anchorfile>ad__deriv_8h.html</anchorfile>
      <anchor>a01d617400c8c3afc56a7f488402c3af9</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DERIV_val</name>
      <anchorfile>ad__deriv_8h.html</anchorfile>
      <anchor>a26f58a4f0f9bf04c90d049a50ab010aa</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DERIV_grad</name>
      <anchorfile>ad__deriv_8h.html</anchorfile>
      <anchor>aa970ade75bd524b786bd179971f8c0fc</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_FLOAT_INITIALIZER_</name>
      <anchorfile>ad__deriv_8h.html</anchorfile>
      <anchor>a56a99ae6ab69890f4976caa056976d25</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>nullFunc</name>
      <anchorfile>ad__deriv_8h.html</anchorfile>
      <anchor>a2179135dd4c51c5507d6b01355c6340f</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>InactiveDouble</name>
      <anchorfile>ad__deriv_8h.html</anchorfile>
      <anchor>a8b7002b03ff58278782a183e8c39bd53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>InactiveFloat</name>
      <anchorfile>ad__deriv_8h.html</anchorfile>
      <anchor>a43fc55ada0748d5be5042377f84c7a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Init</name>
      <anchorfile>ad__deriv_8h.html</anchorfile>
      <anchor>a7eb45ef082a556f8c86b67af069bc18b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Final</name>
      <anchorfile>ad__deriv_8h.html</anchorfile>
      <anchor>a0981d5fbd978b086d6d60cf9a3a21c02</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ad_example.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/example/</path>
    <filename>ad__example_8cpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="no" imported="no">Sacado_No_Kokkos.hpp</includes>
    <member kind="typedef">
      <type>Sacado::Fad::DFad&lt; double &gt;</type>
      <name>F</name>
      <anchorfile>ad__example_8cpp.html</anchorfile>
      <anchor>a0c8da9685b6d2fda2c76febe384050af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SFad&lt; double, 2 &gt;</type>
      <name>F2</name>
      <anchorfile>ad__example_8cpp.html</anchorfile>
      <anchor>afa4a830a2d474d3bf884d9a314111f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Rad::ADvar&lt; double &gt;</type>
      <name>R</name>
      <anchorfile>ad__example_8cpp.html</anchorfile>
      <anchor>a3e507e724c3932963a4705991024e237</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>func2</name>
      <anchorfile>ad__example_8cpp.html</anchorfile>
      <anchor>adf64d98ea5e12e4967c728f69bbcd839</anchor>
      <arglist>(T &amp;a, T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>func</name>
      <anchorfile>ad__example_8cpp.html</anchorfile>
      <anchor>af560b9f5f2de543f4bf51d4e61878d23</anchor>
      <arglist>(int n, T *x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Fad_demo</name>
      <anchorfile>ad__example_8cpp.html</anchorfile>
      <anchor>aa00c8160c04acfb65d54f3ca64bcdb85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Fad2_demo</name>
      <anchorfile>ad__example_8cpp.html</anchorfile>
      <anchor>a2e3c8d7ddd8dc363ee346416b245f7ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Fad3_demo</name>
      <anchorfile>ad__example_8cpp.html</anchorfile>
      <anchor>af8212dfca9a433719a755c112c145cda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rad_demo</name>
      <anchorfile>ad__example_8cpp.html</anchorfile>
      <anchor>af27842a7068f468853743b6e65bbda50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ad__example_8cpp.html</anchorfile>
      <anchor>ae66f6b31b5ad750f1fe042a706a4e3d4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>adic_element_fill.ad.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/</path>
    <filename>adic__element__fill_8ad_8c</filename>
    <includes id="ad__deriv_8h" name="ad_deriv.h" local="yes" imported="no">ad_deriv.h</includes>
    <class kind="struct">ElemData</class>
    <member kind="function">
      <type>void</type>
      <name>adic_element_fill</name>
      <anchorfile>adic__element__fill_8ad_8c.html</anchorfile>
      <anchor>a781fcfa0c0a453053f8b1ccbd7d8af52</anchor>
      <arglist>(ElemData *e, unsigned int neqn, const DERIV_TYPE *x, DERIV_TYPE *u, DERIV_TYPE *du, DERIV_TYPE *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Init</name>
      <anchorfile>adic__element__fill_8ad_8c.html</anchorfile>
      <anchor>adfc21b6393cea54d665e0bc894143e2c</anchor>
      <arglist>(int arg0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Final</name>
      <anchorfile>adic__element__fill_8ad_8c.html</anchorfile>
      <anchor>a0981d5fbd978b086d6d60cf9a3a21c02</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>adic_element_fill.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/</path>
    <filename>adic__element__fill_8c</filename>
    <class kind="struct">ElemData</class>
    <member kind="function">
      <type>void</type>
      <name>adic_element_fill</name>
      <anchorfile>adic__element__fill_8c.html</anchorfile>
      <anchor>ae6ae88bb623f09cc51f8d3215d45eae9</anchor>
      <arglist>(ElemData *e, unsigned int neqn, const double *x, double *u, double *du, double *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>blas_example.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/example/</path>
    <filename>blas__example_8cpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__Fad__BLAS_8hpp" name="Sacado_Fad_BLAS.hpp" local="yes" imported="no">Sacado_Fad_BLAS.hpp</includes>
    <member kind="typedef">
      <type>Sacado::Fad::DFad&lt; double &gt;</type>
      <name>FadType</name>
      <anchorfile>blas__example_8cpp.html</anchorfile>
      <anchor>acc76163b91d21201abaad569f8e692b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>blas__example_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoxElemFixture.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/fenl_assembly/</path>
    <filename>BoxElemFixture_8hpp</filename>
    <includes id="HexElement_8hpp" name="HexElement.hpp" local="no" imported="no">HexElement.hpp</includes>
    <includes id="BoxElemPart_8hpp" name="BoxElemPart.hpp" local="no" imported="no">BoxElemPart.hpp</includes>
    <class kind="struct">Kokkos::Example::MapGridUnitCube</class>
    <class kind="class">Kokkos::Example::BoxElemFixture</class>
    <namespace>Kokkos</namespace>
    <namespace>Kokkos::Example</namespace>
  </compound>
  <compound kind="file">
    <name>view/BoxElemFixture.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/fenl_assembly_view/</path>
    <filename>view_2BoxElemFixture_8hpp</filename>
    <includes id="view_2HexElement_8hpp" name="view/HexElement.hpp" local="no" imported="no">HexElement.hpp</includes>
    <includes id="view_2BoxElemPart_8hpp" name="view/BoxElemPart.hpp" local="no" imported="no">BoxElemPart.hpp</includes>
    <class kind="struct">Kokkos::Example::MapGridUnitCube</class>
    <class kind="class">Kokkos::Example::BoxElemFixture</class>
    <namespace>Kokkos</namespace>
    <namespace>Kokkos::Example</namespace>
  </compound>
  <compound kind="file">
    <name>BoxElemPart.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/fenl_assembly/</path>
    <filename>BoxElemPart_8cpp</filename>
    <includes id="BoxElemPart_8hpp" name="BoxElemPart.hpp" local="no" imported="no">BoxElemPart.hpp</includes>
    <namespace>Kokkos</namespace>
    <namespace>Kokkos::Example</namespace>
    <member kind="function">
      <type>void</type>
      <name>box_partition</name>
      <anchorfile>namespaceKokkos_1_1Example.html</anchorfile>
      <anchor>a36dc6cb93aab2f39efbd99f535d2b83e</anchor>
      <arglist>(const unsigned global_size, const unsigned global_rank, const unsigned global_box[][2], unsigned box[][2])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>view/BoxElemPart.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/fenl_assembly_view/</path>
    <filename>view_2BoxElemPart_8cpp</filename>
    <includes id="view_2BoxElemPart_8hpp" name="view/BoxElemPart.hpp" local="no" imported="no">BoxElemPart.hpp</includes>
    <namespace>Kokkos</namespace>
    <namespace>Kokkos::Example</namespace>
    <member kind="function">
      <type>void</type>
      <name>box_partition</name>
      <anchorfile>namespaceKokkos_1_1Example.html</anchorfile>
      <anchor>a36dc6cb93aab2f39efbd99f535d2b83e</anchor>
      <arglist>(const unsigned global_size, const unsigned global_rank, const unsigned global_box[][2], unsigned box[][2])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoxElemPart.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/fenl_assembly/</path>
    <filename>BoxElemPart_8hpp</filename>
    <class kind="class">Kokkos::Example::BoxElemPart</class>
    <namespace>Kokkos</namespace>
    <namespace>Kokkos::Example</namespace>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>box_intersect</name>
      <anchorfile>namespaceKokkos_1_1Example.html</anchorfile>
      <anchor>a00ef0b96b35ecfb10194aea04772577d</anchor>
      <arglist>(unsigned box[][2], const unsigned boxA[][2], const unsigned boxB[][2])</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION size_t</type>
      <name>box_count</name>
      <anchorfile>namespaceKokkos_1_1Example.html</anchorfile>
      <anchor>a33f503b93ff8e28a27fb61f0df40ab1e</anchor>
      <arglist>(const unsigned box[][2])</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>box_ghost_layer</name>
      <anchorfile>namespaceKokkos_1_1Example.html</anchorfile>
      <anchor>a5663ac4d1e306a110062cfdec84a2a2e</anchor>
      <arglist>(const unsigned global_box[][2], const unsigned local_box[][2], const unsigned ghost_layer, unsigned ghost_box[][2])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>box_partition</name>
      <anchorfile>namespaceKokkos_1_1Example.html</anchorfile>
      <anchor>a36dc6cb93aab2f39efbd99f535d2b83e</anchor>
      <arglist>(const unsigned global_size, const unsigned global_rank, const unsigned global_box[][2], unsigned box[][2])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>view/BoxElemPart.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/fenl_assembly_view/</path>
    <filename>view_2BoxElemPart_8hpp</filename>
    <class kind="class">Kokkos::Example::BoxElemPart</class>
    <namespace>Kokkos</namespace>
    <namespace>Kokkos::Example</namespace>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>box_intersect</name>
      <anchorfile>namespaceKokkos_1_1Example.html</anchorfile>
      <anchor>a00ef0b96b35ecfb10194aea04772577d</anchor>
      <arglist>(unsigned box[][2], const unsigned boxA[][2], const unsigned boxB[][2])</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION size_t</type>
      <name>box_count</name>
      <anchorfile>namespaceKokkos_1_1Example.html</anchorfile>
      <anchor>a33f503b93ff8e28a27fb61f0df40ab1e</anchor>
      <arglist>(const unsigned box[][2])</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>box_ghost_layer</name>
      <anchorfile>namespaceKokkos_1_1Example.html</anchorfile>
      <anchor>a5663ac4d1e306a110062cfdec84a2a2e</anchor>
      <arglist>(const unsigned global_box[][2], const unsigned local_box[][2], const unsigned ghost_layer, unsigned ghost_box[][2])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>box_partition</name>
      <anchorfile>namespaceKokkos_1_1Example.html</anchorfile>
      <anchor>a36dc6cb93aab2f39efbd99f535d2b83e</anchor>
      <arglist>(const unsigned global_size, const unsigned global_rank, const unsigned global_box[][2], unsigned box[][2])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CacheFad_CommTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>CacheFad__CommTests_8cpp</filename>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <includes id="Fad__CommTests_8hpp" name="Fad_CommTests.hpp" local="yes" imported="no">Fad_CommTests.hpp</includes>
    <member kind="typedef">
      <type>int</type>
      <name>Ordinal</name>
      <anchorfile>CacheFad__CommTests_8cpp.html</anchorfile>
      <anchor>ad6064b63db46a0ca2d0c6f9c163340b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::DFad&lt; double &gt;</type>
      <name>Fad_DFadType</name>
      <anchorfile>CacheFad__CommTests_8cpp.html</anchorfile>
      <anchor>a86c90c653d1400cb02c587ffa2c76d22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::SLFad&lt; double, 10 &gt;</type>
      <name>Fad_SLFadType</name>
      <anchorfile>CacheFad__CommTests_8cpp.html</anchorfile>
      <anchor>a1609afedcc153d1f6421f18e97105030</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::SFad&lt; double, 5 &gt;</type>
      <name>Fad_SFadType</name>
      <anchorfile>CacheFad__CommTests_8cpp.html</anchorfile>
      <anchor>a58fe44633bea21bc66e0d49659992065</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>CacheFad__CommTests_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>Sacado::Random&lt; double &gt;</type>
      <name>rnd</name>
      <anchorfile>CacheFad__CommTests_8cpp.html</anchorfile>
      <anchor>a980e90e2ce0057c35e89f15417a7739d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CacheFadUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>CacheFadUnitTests_8cpp</filename>
    <includes id="FadUnitTests_8hpp" name="FadUnitTests.hpp" local="yes" imported="no">FadUnitTests.hpp</includes>
    <includes id="Sacado__CacheFad__DFad_8hpp" name="Sacado_CacheFad_DFad.hpp" local="yes" imported="no">Sacado_CacheFad_DFad.hpp</includes>
    <includes id="Sacado__CacheFad__SFad_8hpp" name="Sacado_CacheFad_SFad.hpp" local="yes" imported="no">Sacado_CacheFad_SFad.hpp</includes>
    <includes id="Sacado__CacheFad__SLFad_8hpp" name="Sacado_CacheFad_SLFad.hpp" local="yes" imported="no">Sacado_CacheFad_SLFad.hpp</includes>
    <member kind="typedef">
      <type>FadOpsUnitTest&lt; Sacado::CacheFad::DFad&lt; double &gt;, double &gt;</type>
      <name>DFadDoubleTest</name>
      <anchorfile>CacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>afce1e17af680c8cc9e428d73518c8e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FadOpsUnitTest&lt; Sacado::CacheFad::SFad&lt; double, 5 &gt;, double &gt;</type>
      <name>SFadDoubleTest</name>
      <anchorfile>CacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>a4f4afd252a928610087573bdbeacb36e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FadOpsUnitTest&lt; Sacado::CacheFad::SLFad&lt; double, 10 &gt;, double &gt;</type>
      <name>SLFadDoubleTest</name>
      <anchorfile>CacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>ad9515614eb10d672f675feec34abc93e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>CacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>aea90ba433400cfce16ba9ebab8b7af3f</anchor>
      <arglist>(DFadDoubleTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>CacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>a4e6cf0c349dd9c35aa0007923d3a7b7c</anchor>
      <arglist>(SFadDoubleTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>CacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>a1ab1a2c6cd3d294400d0df54994ea6d7</anchor>
      <arglist>(SLFadDoubleTest)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ComplexCacheFadUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>ComplexCacheFadUnitTests_8cpp</filename>
    <includes id="FadUnitTests2_8hpp" name="FadUnitTests2.hpp" local="yes" imported="no">FadUnitTests2.hpp</includes>
    <includes id="Sacado__CacheFad__DFad_8hpp" name="Sacado_CacheFad_DFad.hpp" local="yes" imported="no">Sacado_CacheFad_DFad.hpp</includes>
    <includes id="Sacado__CacheFad__SFad_8hpp" name="Sacado_CacheFad_SFad.hpp" local="yes" imported="no">Sacado_CacheFad_SFad.hpp</includes>
    <includes id="Sacado__CacheFad__SLFad_8hpp" name="Sacado_CacheFad_SLFad.hpp" local="yes" imported="no">Sacado_CacheFad_SLFad.hpp</includes>
  </compound>
  <compound kind="file">
    <name>ComplexDFadBLASUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>ComplexDFadBLASUnitTests_8cpp</filename>
    <includes id="FadBLASUnitTests_8hpp" name="FadBLASUnitTests.hpp" local="yes" imported="no">FadBLASUnitTests.hpp</includes>
  </compound>
  <compound kind="file">
    <name>ComplexDVFadBLASUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>ComplexDVFadBLASUnitTests_8cpp</filename>
    <includes id="FadBLASUnitTests_8hpp" name="FadBLASUnitTests.hpp" local="yes" imported="no">FadBLASUnitTests.hpp</includes>
  </compound>
  <compound kind="file">
    <name>ComplexELRCacheFadUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>ComplexELRCacheFadUnitTests_8cpp</filename>
    <includes id="FadUnitTests2_8hpp" name="FadUnitTests2.hpp" local="yes" imported="no">FadUnitTests2.hpp</includes>
  </compound>
  <compound kind="file">
    <name>ComplexELRFadUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>ComplexELRFadUnitTests_8cpp</filename>
    <includes id="FadUnitTests2_8hpp" name="FadUnitTests2.hpp" local="yes" imported="no">FadUnitTests2.hpp</includes>
  </compound>
  <compound kind="file">
    <name>ComplexFadUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>ComplexFadUnitTests_8cpp</filename>
    <includes id="FadUnitTests2_8hpp" name="FadUnitTests2.hpp" local="yes" imported="no">FadUnitTests2.hpp</includes>
    <includes id="Sacado__Fad__SimpleFad_8hpp" name="Sacado_Fad_SimpleFad.hpp" local="yes" imported="no">Sacado_Fad_SimpleFad.hpp</includes>
  </compound>
  <compound kind="file">
    <name>ConversionTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>ConversionTests_8cpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__Fad__SimpleFad_8hpp" name="Sacado_Fad_SimpleFad.hpp" local="yes" imported="no">Sacado_Fad_SimpleFad.hpp</includes>
    <includes id="Sacado__Tay__CacheTaylor_8hpp" name="Sacado_Tay_CacheTaylor.hpp" local="yes" imported="no">Sacado_Tay_CacheTaylor.hpp</includes>
    <includes id="Sacado__mpl__apply_8hpp" name="Sacado_mpl_apply.hpp" local="yes" imported="no">Sacado_mpl_apply.hpp</includes>
    <includes id="Sacado__mpl__is__convertible_8hpp" name="Sacado_mpl_is_convertible.hpp" local="yes" imported="no">Sacado_mpl_is_convertible.hpp</includes>
    <class kind="struct">A</class>
    <class kind="struct">B</class>
    <class kind="struct">C</class>
    <member kind="typedef">
      <type>Sacado::Fad::DFad&lt; double &gt;</type>
      <name>Fad_DFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a415685edbd608fa5f157606f7e88a9ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SLFad&lt; double, global_fad_size &gt;</type>
      <name>Fad_SLFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a01aa1cc1fad0707490ac8839ce031a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SFad&lt; double, global_fad_size &gt;</type>
      <name>Fad_SFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a614ec81916fd1a613e233add5d617496</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::DMFad&lt; double &gt;</type>
      <name>Fad_DMFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a9bf43365a71469c253170c488cf35143</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::DVFad&lt; double &gt;</type>
      <name>Fad_DVFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a54e7576dafee6b4fae94141262c59eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SimpleFad&lt; double &gt;</type>
      <name>Fad_SimpleFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>ab566201c5db671e5b3739443e28e5860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::ViewFad&lt; double, global_fad_size, 1, Fad_DFadType &gt;</type>
      <name>Fad_VFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a1283df8c28ace1b0c12e5d4eca5ca683</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::DFad&lt; double &gt;</type>
      <name>ELRFad_DFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a2625c727ffad9272419a65c82ad14252</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::SLFad&lt; double, global_fad_size &gt;</type>
      <name>ELRFad_SLFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a094556e811a964d715dcb125d1ac08b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::SFad&lt; double, global_fad_size &gt;</type>
      <name>ELRFad_SFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a48e7bcc54ea940f8e6b74ed916c2b40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::ViewFad&lt; double, global_fad_size, 1, ELRFad_DFadType &gt;</type>
      <name>ELRFad_VFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>ad77de7f025c53fa0117ab4b99f9eccff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::DFad&lt; double &gt;</type>
      <name>CacheFad_DFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a3942d53d0c08d0f474b51f444d9c0785</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::SLFad&lt; double, global_fad_size &gt;</type>
      <name>CacheFad_SLFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a643ad271c0688059f33a67bbc941967f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::SFad&lt; double, global_fad_size &gt;</type>
      <name>CacheFad_SFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>ac0f997949cb9e2fd9c84c82214a091e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::ViewFad&lt; double, global_fad_size, 1, CacheFad_DFadType &gt;</type>
      <name>CacheFad_VFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a36c11419df68c9854b82830805ea26fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::DFad&lt; double &gt;</type>
      <name>ELRCacheFad_DFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a6d88e5885c36b30355eb4abbd625d598</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::SLFad&lt; double, global_fad_size &gt;</type>
      <name>ELRCacheFad_SLFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a1dad0a799a962affa0d842cfba00da11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::SFad&lt; double, global_fad_size &gt;</type>
      <name>ELRCacheFad_SFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>abcd755d71779c30fc26d629454e86112</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::ViewFad&lt; double, global_fad_size, 1, ELRCacheFad_DFadType &gt;</type>
      <name>ELRCacheFad_VFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a097042deac19241f0749cdebaac90e98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::LFad::LogicalSparse&lt; double, bool &gt;</type>
      <name>LFadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a90496f8364599f300b102df602161665</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::FlopCounterPack::ScalarFlopCounter&lt; double &gt;</type>
      <name>SFCType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>aad361bb5021d3ce891a183cc6aea0299</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Tay::Taylor&lt; double &gt;</type>
      <name>TaylorType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a05d827db8a34f99b9fcf1a72bbe07c47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Tay::CacheTaylor&lt; double &gt;</type>
      <name>CacheTaylorType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a4a3d065caa71b62d9aa2c18542344b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Rad::ADvar&lt; double &gt;</type>
      <name>RadType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>af269f09b6d8fe185d4be19ccc2f04e97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Rad2::ADvar&lt; double &gt;</type>
      <name>Rad2Type</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a7cd45d68c1235c7a3545f7747f4657e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::RadVec::ADvar&lt; double &gt;</type>
      <name>RadVecType</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a55d20233b121cd729f274b322453f3cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>af9331bacd073d749fd48741d050729c8</anchor>
      <arglist>(Conversion, IsConvertible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test_ad_conversions</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a07e7b2c11724affb749d995ab8188cee</anchor>
      <arglist>(Teuchos::FancyOStream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_1_DECL</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a957944591e537f604f1efa9e7ad74c45</anchor>
      <arglist>(Conversion, ADConversions, AD)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_1_DECL</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a61c1bf3b960238b4dc920762b38aaa67</anchor>
      <arglist>(Conversion, ViewConversions, AD)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_1_DECL</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a6ded36c78ff3f3503c6d2a5177010b88</anchor>
      <arglist>(Conversion, OtherConversions, AD)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>global_fad_size</name>
      <anchorfile>ConversionTests_8cpp.html</anchorfile>
      <anchor>aba06c6d63d86b58f1aef274a9f576813</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>copyright.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/example/</path>
    <filename>copyright_8h</filename>
  </compound>
  <compound kind="file">
    <name>dfad_dfad_example.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/example/</path>
    <filename>dfad__dfad__example_8cpp</filename>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <member kind="function">
      <type>ScalarT</type>
      <name>func</name>
      <anchorfile>dfad__dfad__example_8cpp.html</anchorfile>
      <anchor>a6605336badbe85da3826f2eb6b52c187</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b, const ScalarT &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>func_deriv</name>
      <anchorfile>dfad__dfad__example_8cpp.html</anchorfile>
      <anchor>a33f1577b10d8a67dc57e03b259337301</anchor>
      <arglist>(double a, double b, double c, double &amp;drda, double &amp;drdb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>func_deriv2</name>
      <anchorfile>dfad__dfad__example_8cpp.html</anchorfile>
      <anchor>a3a571ab32996f91fb6d9f94631bdd391</anchor>
      <arglist>(double a, double b, double c, double &amp;d2rda2, double &amp;d2rdb2, double &amp;d2rdadb)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>dfad__dfad__example_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dfad_example.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/example/</path>
    <filename>dfad__example_8cpp</filename>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <member kind="function">
      <type>ScalarT</type>
      <name>func</name>
      <anchorfile>dfad__example_8cpp.html</anchorfile>
      <anchor>a6605336badbe85da3826f2eb6b52c187</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b, const ScalarT &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>func_deriv</name>
      <anchorfile>dfad__example_8cpp.html</anchorfile>
      <anchor>a33f1577b10d8a67dc57e03b259337301</anchor>
      <arglist>(double a, double b, double c, double &amp;drda, double &amp;drdb)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>dfad__example_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dfad_sfad_example.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/example/</path>
    <filename>dfad__sfad__example_8cpp</filename>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <member kind="function">
      <type>ScalarT</type>
      <name>func</name>
      <anchorfile>dfad__sfad__example_8cpp.html</anchorfile>
      <anchor>a6605336badbe85da3826f2eb6b52c187</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b, const ScalarT &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analytic_deriv</name>
      <anchorfile>dfad__sfad__example_8cpp.html</anchorfile>
      <anchor>aeab8178298326bb974cf358214110377</anchor>
      <arglist>(double a, double b, double c, double &amp;drda, double &amp;drdb, double &amp;d2rda2, double &amp;d2rdb2, double &amp;d2rdadb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>func_and_deriv</name>
      <anchorfile>dfad__sfad__example_8cpp.html</anchorfile>
      <anchor>ad01e58c548565e719d32caf5699bad4b</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b, const ScalarT &amp;c, ScalarT &amp;r, ScalarT &amp;drda, ScalarT &amp;drdb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>func_and_deriv2</name>
      <anchorfile>dfad__sfad__example_8cpp.html</anchorfile>
      <anchor>a757e4a28de0395c5f95a9faefa826c19</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b, const ScalarT &amp;c, const ScalarT &amp;v_a, const ScalarT &amp;v_b, ScalarT &amp;r, ScalarT &amp;drda, ScalarT &amp;drdb, ScalarT &amp;z_a, ScalarT &amp;z_b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>dfad__sfad__example_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dfad_sfc_example.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/example/</path>
    <filename>dfad__sfc__example_8cpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <member kind="typedef">
      <type>Sacado::FlopCounterPack::ScalarFlopCounter&lt; double &gt;</type>
      <name>SFC</name>
      <anchorfile>dfad__sfc__example_8cpp.html</anchorfile>
      <anchor>a574e83583f5a68b85db033215bcd7d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::DFad&lt; SFC &gt;</type>
      <name>FAD_SFC</name>
      <anchorfile>dfad__sfc__example_8cpp.html</anchorfile>
      <anchor>aeda6bba6ea78a648dd6897944c4f886b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ScalarT</type>
      <name>func</name>
      <anchorfile>dfad__sfc__example_8cpp.html</anchorfile>
      <anchor>a6605336badbe85da3826f2eb6b52c187</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b, const ScalarT &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>func_deriv</name>
      <anchorfile>dfad__sfc__example_8cpp.html</anchorfile>
      <anchor>a5a2bc1fcfff3e9bc59a94630f7af2fcf</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b, const ScalarT &amp;c, ScalarT &amp;drda, ScalarT &amp;drdb)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>dfad__sfc__example_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dfad_taylor_example.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/example/</path>
    <filename>dfad__taylor__example_8cpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <member kind="function">
      <type>void</type>
      <name>func</name>
      <anchorfile>dfad__taylor__example_8cpp.html</anchorfile>
      <anchor>a0012f5c37abaac210fd41c8b20e5af1a</anchor>
      <arglist>(ScalarT &amp;f, const ScalarT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>dfad__taylor__example_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dmfad_example.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/example/</path>
    <filename>dmfad__example_8cpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <member kind="function">
      <type>ScalarT</type>
      <name>func</name>
      <anchorfile>dmfad__example_8cpp.html</anchorfile>
      <anchor>a6605336badbe85da3826f2eb6b52c187</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b, const ScalarT &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>func_deriv</name>
      <anchorfile>dmfad__example_8cpp.html</anchorfile>
      <anchor>a33f1577b10d8a67dc57e03b259337301</anchor>
      <arglist>(double a, double b, double c, double &amp;drda, double &amp;drdb)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>dmfad__example_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ELRCacheFad_CommTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>ELRCacheFad__CommTests_8cpp</filename>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <includes id="Fad__CommTests_8hpp" name="Fad_CommTests.hpp" local="yes" imported="no">Fad_CommTests.hpp</includes>
    <member kind="typedef">
      <type>int</type>
      <name>Ordinal</name>
      <anchorfile>ELRCacheFad__CommTests_8cpp.html</anchorfile>
      <anchor>ad6064b63db46a0ca2d0c6f9c163340b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::DFad&lt; double &gt;</type>
      <name>Fad_DFadType</name>
      <anchorfile>ELRCacheFad__CommTests_8cpp.html</anchorfile>
      <anchor>a36e1ac735f1a8c1dd55edae681151db3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::SLFad&lt; double, 10 &gt;</type>
      <name>Fad_SLFadType</name>
      <anchorfile>ELRCacheFad__CommTests_8cpp.html</anchorfile>
      <anchor>a8c631021a0a6ad17fb8177ca56504923</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::SFad&lt; double, 5 &gt;</type>
      <name>Fad_SFadType</name>
      <anchorfile>ELRCacheFad__CommTests_8cpp.html</anchorfile>
      <anchor>a182a105be981008c269472b58383bb7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ELRCacheFad__CommTests_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>Sacado::Random&lt; double &gt;</type>
      <name>rnd</name>
      <anchorfile>ELRCacheFad__CommTests_8cpp.html</anchorfile>
      <anchor>a980e90e2ce0057c35e89f15417a7739d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ELRCacheFadUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>ELRCacheFadUnitTests_8cpp</filename>
    <includes id="FadUnitTests_8hpp" name="FadUnitTests.hpp" local="yes" imported="no">FadUnitTests.hpp</includes>
    <member kind="typedef">
      <type>FadOpsUnitTest&lt; Sacado::ELRCacheFad::DFad&lt; double &gt;, double &gt;</type>
      <name>DFadDoubleTest</name>
      <anchorfile>ELRCacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>a21918890d7c312eca7615d02f5c483d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FadOpsUnitTest&lt; Sacado::ELRCacheFad::SFad&lt; double, 5 &gt;, double &gt;</type>
      <name>SFadDoubleTest</name>
      <anchorfile>ELRCacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>a8f0d588e864a3fa25f71d5e5781c73cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FadOpsUnitTest&lt; Sacado::ELRCacheFad::SLFad&lt; double, 10 &gt;, double &gt;</type>
      <name>SLFadDoubleTest</name>
      <anchorfile>ELRCacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>af2aaeec9299526396c64c74003501e1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>ELRCacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>aea90ba433400cfce16ba9ebab8b7af3f</anchor>
      <arglist>(DFadDoubleTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>ELRCacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>a4e6cf0c349dd9c35aa0007923d3a7b7c</anchor>
      <arglist>(SFadDoubleTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>ELRCacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>a1ab1a2c6cd3d294400d0df54994ea6d7</anchor>
      <arglist>(SLFadDoubleTest)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ELRFad_CommTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>ELRFad__CommTests_8cpp</filename>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <includes id="Fad__CommTests_8hpp" name="Fad_CommTests.hpp" local="yes" imported="no">Fad_CommTests.hpp</includes>
    <member kind="typedef">
      <type>int</type>
      <name>Ordinal</name>
      <anchorfile>ELRFad__CommTests_8cpp.html</anchorfile>
      <anchor>ad6064b63db46a0ca2d0c6f9c163340b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::DFad&lt; double &gt;</type>
      <name>Fad_DFadType</name>
      <anchorfile>ELRFad__CommTests_8cpp.html</anchorfile>
      <anchor>a0f49a64ab4f1958dfd47ea5c6858042f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::SLFad&lt; double, 10 &gt;</type>
      <name>Fad_SLFadType</name>
      <anchorfile>ELRFad__CommTests_8cpp.html</anchorfile>
      <anchor>af1e90121e30ca3c2dbba464927376e0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::SFad&lt; double, 5 &gt;</type>
      <name>Fad_SFadType</name>
      <anchorfile>ELRFad__CommTests_8cpp.html</anchorfile>
      <anchor>a80fece13ac27627c5871904c32307387</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ELRFad__CommTests_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>Sacado::Random&lt; double &gt;</type>
      <name>rnd</name>
      <anchorfile>ELRFad__CommTests_8cpp.html</anchorfile>
      <anchor>a980e90e2ce0057c35e89f15417a7739d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ELRFadUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>ELRFadUnitTests_8cpp</filename>
    <includes id="FadUnitTests_8hpp" name="FadUnitTests.hpp" local="yes" imported="no">FadUnitTests.hpp</includes>
    <member kind="typedef">
      <type>FadOpsUnitTest&lt; Sacado::ELRFad::DFad&lt; double &gt;, double &gt;</type>
      <name>DFadDoubleTest</name>
      <anchorfile>ELRFadUnitTests_8cpp.html</anchorfile>
      <anchor>a28eb54885242eeaaa96136a3eaae7ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FadOpsUnitTest&lt; Sacado::ELRFad::SFad&lt; double, 5 &gt;, double &gt;</type>
      <name>SFadDoubleTest</name>
      <anchorfile>ELRFadUnitTests_8cpp.html</anchorfile>
      <anchor>a223932afdd3c344d40301a65c2dd69c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FadOpsUnitTest&lt; Sacado::ELRFad::SLFad&lt; double, 10 &gt;, double &gt;</type>
      <name>SLFadDoubleTest</name>
      <anchorfile>ELRFadUnitTests_8cpp.html</anchorfile>
      <anchor>adc8ef2f95a3cf346caab773558ac9fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>ELRFadUnitTests_8cpp.html</anchorfile>
      <anchor>aea90ba433400cfce16ba9ebab8b7af3f</anchor>
      <arglist>(DFadDoubleTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>ELRFadUnitTests_8cpp.html</anchorfile>
      <anchor>a4e6cf0c349dd9c35aa0007923d3a7b7c</anchor>
      <arglist>(SFadDoubleTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>ELRFadUnitTests_8cpp.html</anchorfile>
      <anchor>a1ab1a2c6cd3d294400d0df54994ea6d7</anchor>
      <arglist>(SLFadDoubleTest)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fad_blas.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/</path>
    <filename>fad__blas_8cpp</filename>
    <includes id="Sacado__Random_8hpp" name="Sacado_Random.hpp" local="yes" imported="no">Sacado_Random.hpp</includes>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__Fad__BLAS_8hpp" name="Sacado_Fad_BLAS.hpp" local="yes" imported="no">Sacado_Fad_BLAS.hpp</includes>
    <member kind="function">
      <type>double</type>
      <name>do_time_teuchos_double_gemm</name>
      <anchorfile>fad__blas_8cpp.html</anchorfile>
      <anchor>a19ddef2c754139028a6f73eb906ed5d9</anchor>
      <arglist>(unsigned int m, unsigned int n, unsigned int k, unsigned int nloop)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>do_time_teuchos_double_gemv</name>
      <anchorfile>fad__blas_8cpp.html</anchorfile>
      <anchor>a54569abd95e48f366a0ca81986188ce3</anchor>
      <arglist>(unsigned int m, unsigned int n, unsigned int nloop)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>do_time_teuchos_double_dot</name>
      <anchorfile>fad__blas_8cpp.html</anchorfile>
      <anchor>af4041498df3074e947cf8cbe01b48c20</anchor>
      <arglist>(unsigned int m, unsigned int nloop)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>do_time_teuchos_fad_gemm</name>
      <anchorfile>fad__blas_8cpp.html</anchorfile>
      <anchor>aed4e80c911aba4a1a5e29a87d50b1370</anchor>
      <arglist>(unsigned int m, unsigned int n, unsigned int k, unsigned int ndot, unsigned int nloop)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>do_time_teuchos_fad_gemv</name>
      <anchorfile>fad__blas_8cpp.html</anchorfile>
      <anchor>aac25f79c9e263818135a6e396304c341</anchor>
      <arglist>(unsigned int m, unsigned int n, unsigned int ndot, unsigned int nloop)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>do_time_teuchos_fad_dot</name>
      <anchorfile>fad__blas_8cpp.html</anchorfile>
      <anchor>ad07e90f4b7d659adb708df144ded1d3e</anchor>
      <arglist>(unsigned int m, unsigned int ndot, unsigned int nloop)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>do_time_sacado_fad_gemm</name>
      <anchorfile>fad__blas_8cpp.html</anchorfile>
      <anchor>a062594eda69ebc64d5786fb22093c4ad</anchor>
      <arglist>(unsigned int m, unsigned int n, unsigned int k, unsigned int ndot, unsigned int nloop, bool use_dynamic)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>do_time_sacado_fad_gemv</name>
      <anchorfile>fad__blas_8cpp.html</anchorfile>
      <anchor>a5d041a52f70523dd2a37a826eb2468cb</anchor>
      <arglist>(unsigned int m, unsigned int n, unsigned int ndot, unsigned int nloop, bool use_dynamic)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>do_time_sacado_fad_dot</name>
      <anchorfile>fad__blas_8cpp.html</anchorfile>
      <anchor>a9d93274332583d6d809bc22f958d1a25</anchor>
      <arglist>(unsigned int m, unsigned int ndot, unsigned int nloop, bool use_dynamic)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fad__blas_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_CommTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__CommTests_8cpp</filename>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <includes id="Fad__CommTests_8hpp" name="Fad_CommTests.hpp" local="yes" imported="no">Fad_CommTests.hpp</includes>
    <member kind="typedef">
      <type>int</type>
      <name>Ordinal</name>
      <anchorfile>Fad__CommTests_8cpp.html</anchorfile>
      <anchor>ad6064b63db46a0ca2d0c6f9c163340b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::DFad&lt; double &gt;</type>
      <name>Fad_DFadType</name>
      <anchorfile>Fad__CommTests_8cpp.html</anchorfile>
      <anchor>a415685edbd608fa5f157606f7e88a9ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SLFad&lt; double, 10 &gt;</type>
      <name>Fad_SLFadType</name>
      <anchorfile>Fad__CommTests_8cpp.html</anchorfile>
      <anchor>a3c6143caff08aa0d66f1388b39d88975</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SFad&lt; double, 5 &gt;</type>
      <name>Fad_SFadType</name>
      <anchorfile>Fad__CommTests_8cpp.html</anchorfile>
      <anchor>a289eb43dc979a645f88f5601ed5f655e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Fad__CommTests_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>Sacado::Random&lt; double &gt;</type>
      <name>rnd</name>
      <anchorfile>Fad__CommTests_8cpp.html</anchorfile>
      <anchor>a980e90e2ce0057c35e89f15417a7739d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_CommTests.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__CommTests_8hpp</filename>
    <includes id="Sacado__mpl__apply_8hpp" name="Sacado_mpl_apply.hpp" local="yes" imported="no">Sacado_mpl_apply.hpp</includes>
    <includes id="Sacado__Random_8hpp" name="Sacado_Random.hpp" local="yes" imported="no">Sacado_Random.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FAD_BASE_COMM_TESTS</name>
      <anchorfile>Fad__CommTests_8hpp.html</anchorfile>
      <anchor>ad9d70179ef8a9946ae3cefbe6b8229f3</anchor>
      <arglist>(FadType, FAD)                                                          </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAD_KOKKOS_COMM_TESTS</name>
      <anchorfile>Fad__CommTests_8hpp.html</anchorfile>
      <anchor>a2ea341a8d067651a0fa9d7f3d187d4a5</anchor>
      <arglist>(FadType, FAD)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAD_COMM_TESTS</name>
      <anchorfile>Fad__CommTests_8hpp.html</anchorfile>
      <anchor>ac7cc624cf53ffd0ccece323937de078f</anchor>
      <arglist>(FadType, FAD)            </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFadArrays</name>
      <anchorfile>Fad__CommTests_8hpp.html</anchorfile>
      <anchor>ac9c468e8ed50142a305e6bff0f74a663</anchor>
      <arglist>(const ArrayType &amp;x, const ArrayType &amp;x2, const std::string &amp;tag, Teuchos::FancyOStream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkResultOnAllProcs</name>
      <anchorfile>Fad__CommTests_8hpp.html</anchorfile>
      <anchor>a0eb45c712ac3bb536bf62879b19be709</anchor>
      <arglist>(const Teuchos::Comm&lt; Ordinal &gt; &amp;comm, Teuchos::FancyOStream &amp;out, const bool result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fad_expr.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/</path>
    <filename>fad__expr_8cpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__Random_8hpp" name="Sacado_Random.hpp" local="yes" imported="no">Sacado_Random.hpp</includes>
    <includes id="Sacado__CacheFad__DFad_8hpp" name="Sacado_CacheFad_DFad.hpp" local="yes" imported="no">Sacado_CacheFad_DFad.hpp</includes>
    <includes id="Sacado__Fad__SimpleFad_8hpp" name="Sacado_Fad_SimpleFad.hpp" local="yes" imported="no">Sacado_Fad_SimpleFad.hpp</includes>
    <member kind="function">
      <type>void</type>
      <name>func1</name>
      <anchorfile>fad__expr_8cpp.html</anchorfile>
      <anchor>ab6952a88163b3a67ff772ca6e8f51d91</anchor>
      <arglist>(const T &amp;x1, const T &amp;x2, T &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>func1_and_deriv</name>
      <anchorfile>fad__expr_8cpp.html</anchorfile>
      <anchor>a99f2f41b4c1ed58fe71b5183634fc5a9</anchor>
      <arglist>(int n, double x1, double x2, double *x1dot, double *x2dot, double &amp;y, double *ydot)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>do_time</name>
      <anchorfile>fad__expr_8cpp.html</anchorfile>
      <anchor>a2c8b768d54592fbff7b95dbad0f52434</anchor>
      <arglist>(int nderiv, int nloop)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>do_time_analytic</name>
      <anchorfile>fad__expr_8cpp.html</anchorfile>
      <anchor>a8c3b786236d632044967cc5b80ce7ac9</anchor>
      <arglist>(int nderiv, int nloop)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fad__expr_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fad_expr_depth.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/</path>
    <filename>fad__expr__depth_8cpp</filename>
    <includes id="Sacado__Random_8hpp" name="Sacado_Random.hpp" local="yes" imported="no">Sacado_Random.hpp</includes>
    <includes id="fad__expr__funcs_8hpp" name="fad_expr_funcs.hpp" local="yes" imported="no">fad_expr_funcs.hpp</includes>
    <member kind="function">
      <type>double</type>
      <name>do_time</name>
      <anchorfile>fad__expr__depth_8cpp.html</anchorfile>
      <anchor>a686ba4804be3785c06e6c0e301828a05</anchor>
      <arglist>(const T x[], int nloop, const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_times</name>
      <anchorfile>fad__expr__depth_8cpp.html</anchorfile>
      <anchor>a4b2ab75cc0d0086d2a66ba3c2c74425c</anchor>
      <arglist>(const T x[], int nloop, Teuchos::Array&lt; double &gt; &amp;times)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_times</name>
      <anchorfile>fad__expr__depth_8cpp.html</anchorfile>
      <anchor>ab1c27d17d99a12e44dfacaf1261b6bd7</anchor>
      <arglist>(const std::string &amp;screen_name, const std::string &amp;file_name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fad__expr__depth_8cpp.html</anchorfile>
      <anchor>ae66f6b31b5ad750f1fe042a706a4e3d4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fad_expr_funcs.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/</path>
    <filename>fad__expr__funcs_8cpp</filename>
    <includes id="fad__expr__funcs_8hpp" name="fad_expr_funcs.hpp" local="yes" imported="no">fad_expr_funcs.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>INSTANTIATE_FUNCS</name>
      <anchorfile>fad__expr__funcs_8cpp.html</anchorfile>
      <anchor>a399e0149b7e218caa49e0e2793977362</anchor>
      <arglist>(TYPE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fad_expr_funcs.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/</path>
    <filename>fad__expr__funcs_8hpp</filename>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <includes id="Sacado__Fad__SimpleFad_8hpp" name="Sacado_Fad_SimpleFad.hpp" local="yes" imported="no">Sacado_Fad_SimpleFad.hpp</includes>
    <class kind="struct">ExprFuncs</class>
    <class kind="struct">ExprFuncs::mult</class>
    <class kind="struct">ExprFuncs::mult_base</class>
    <class kind="struct">ExprFuncs::add</class>
    <class kind="struct">ExprFuncs::add_base</class>
    <class kind="struct">ExprFuncs::nest</class>
    <class kind="struct">ExprFuncs::nest_base</class>
    <class kind="struct">ExprFuncs::mult&lt; T, 1 &gt;</class>
    <class kind="struct">ExprFuncs::mult&lt; T, 2 &gt;</class>
    <class kind="struct">ExprFuncs::mult&lt; T, 3 &gt;</class>
    <class kind="struct">ExprFuncs::mult&lt; T, 4 &gt;</class>
    <class kind="struct">ExprFuncs::mult&lt; T, 5 &gt;</class>
    <class kind="struct">ExprFuncs::mult&lt; T, 10 &gt;</class>
    <class kind="struct">ExprFuncs::mult&lt; T, 15 &gt;</class>
    <class kind="struct">ExprFuncs::mult&lt; T, 20 &gt;</class>
    <class kind="struct">ExprFuncs::add&lt; T, 1 &gt;</class>
    <class kind="struct">ExprFuncs::add&lt; T, 2 &gt;</class>
    <class kind="struct">ExprFuncs::add&lt; T, 3 &gt;</class>
    <class kind="struct">ExprFuncs::add&lt; T, 4 &gt;</class>
    <class kind="struct">ExprFuncs::add&lt; T, 5 &gt;</class>
    <class kind="struct">ExprFuncs::add&lt; T, 10 &gt;</class>
    <class kind="struct">ExprFuncs::add&lt; T, 15 &gt;</class>
    <class kind="struct">ExprFuncs::add&lt; T, 20 &gt;</class>
    <class kind="struct">ExprFuncs::nest&lt; T, 1 &gt;</class>
    <class kind="struct">ExprFuncs::nest&lt; T, 2 &gt;</class>
    <class kind="struct">ExprFuncs::nest&lt; T, 3 &gt;</class>
    <class kind="struct">ExprFuncs::nest&lt; T, 4 &gt;</class>
    <class kind="struct">ExprFuncs::nest&lt; T, 5 &gt;</class>
    <class kind="struct">ExprFuncs::nest&lt; T, 10 &gt;</class>
    <class kind="struct">ExprFuncs::nest&lt; T, 15 &gt;</class>
    <class kind="struct">ExprFuncs::nest&lt; T, 20 &gt;</class>
  </compound>
  <compound kind="file">
    <name>Fad_Fad_KokkosTests.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__Fad__KokkosTests_8hpp</filename>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <includes id="Kokkos__DynRankView__Fad_8hpp" name="Kokkos_DynRankView_Fad.hpp" local="yes" imported="no">Kokkos_DynRankView_Fad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>VIEW_FAD_TESTS_FLD</name>
      <anchorfile>Fad__Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a339d41659b047379854c96fdb42c6355</anchor>
      <arglist>(F, L, D)                                                                  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VIEW_FAD_TESTS_FD</name>
      <anchorfile>Fad__Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>aee2f359a17fbe2815ac0df7201fe6820</anchor>
      <arglist>(F, D)                                                                          </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VIEW_FAD_TESTS_D</name>
      <anchorfile>Fad__Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a8db825731513192f106b19e2ccc509d5</anchor>
      <arglist>(D)</arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SFad&lt; double, global_inner_fad_size &gt;</type>
      <name>InnerFadType</name>
      <anchorfile>Fad__Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>ac7d14fbaff4a93f3255def70aa42df18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::DFad&lt; InnerFadType &gt;</type>
      <name>DFadType</name>
      <anchorfile>Fad__Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a25775878e5ae75fcc75d6a182d963e92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SLFad&lt; InnerFadType, 2 *global_outer_fad_size &gt;</type>
      <name>SLFadType</name>
      <anchorfile>Fad__Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>ac3e6b3849d5834dc837f8efd14574de1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SFad&lt; InnerFadType, global_outer_fad_size &gt;</type>
      <name>SFadType</name>
      <anchorfile>Fad__Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a1237d757929a6c52d6657935f77e1f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFads</name>
      <anchorfile>Fad__Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a08727508cefc8ebf3ed8decfa7ae2d1b</anchor>
      <arglist>(const FadType1 &amp;x, const FadType2 &amp;x2, Teuchos::FancyOStream &amp;out, double tol=1.0e-15)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkNestedFads</name>
      <anchorfile>Fad__Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a136223c0f7661cbca88b678435b314e6</anchor>
      <arglist>(const FadType1 &amp;x, const FadType2 &amp;x2, Teuchos::FancyOStream &amp;out, double tol=1.0e-15)</arglist>
    </member>
    <member kind="function">
      <type>fadfadtype</type>
      <name>generate_nested_fad</name>
      <anchorfile>Fad__Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a1425c8495f34571c1e285872555023d8</anchor>
      <arglist>(const ordinal num_rows, const ordinal num_cols, const ordinal outer_fad_size, const ordinal inner_fad_size, const ordinal row, const ordinal col)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>ad122e70ec12b2563265bcf17327129ba</anchor>
      <arglist>(Kokkos_View_FadFad, DeepCopy, FadFadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a144f5f89f469fb101d9fa2b6005ecd57</anchor>
      <arglist>(Kokkos_DynRankView_FadFad, DeepCopy, FadFadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a6d3b90ded4c696c577b543160c48e72e</anchor>
      <arglist>(Kokkos_DynRankView_FadFad, Interop, FadFadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>ad5a143922a94d11a53859999da9b0101</anchor>
      <arglist>(Kokkos_DynRankView_FadFad, Interop2, FadFadType, Layout, Device)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>global_num_rows</name>
      <anchorfile>Fad__Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a19925247318f4054f3b738d8fda6e932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>global_num_cols</name>
      <anchorfile>Fad__Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a520f878deeaa78336aa688a71cb2b459</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>global_outer_fad_size</name>
      <anchorfile>Fad__Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a3d4d8339ef573893e12dec33481446b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>global_inner_fad_size</name>
      <anchorfile>Fad__Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>aee8769b84643fcd60ca73806b098aa0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_Fad_KokkosTests_Cuda.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__Fad__KokkosTests__Cuda_8cpp</filename>
    <includes id="Fad__Fad__KokkosTests_8hpp" name="Fad_Fad_KokkosTests.hpp" local="yes" imported="no">Fad_Fad_KokkosTests.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Fad__Fad__KokkosTests__Cuda_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_Fad_KokkosTests_OpenMP.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__Fad__KokkosTests__OpenMP_8cpp</filename>
    <includes id="Fad__Fad__KokkosTests_8hpp" name="Fad_Fad_KokkosTests.hpp" local="yes" imported="no">Fad_Fad_KokkosTests.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Fad__Fad__KokkosTests__OpenMP_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_Fad_KokkosTests_Serial.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__Fad__KokkosTests__Serial_8cpp</filename>
    <includes id="Fad__Fad__KokkosTests_8hpp" name="Fad_Fad_KokkosTests.hpp" local="yes" imported="no">Fad_Fad_KokkosTests.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Fad__Fad__KokkosTests__Serial_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_Fad_KokkosTests_Threads.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__Fad__KokkosTests__Threads_8cpp</filename>
    <includes id="Fad__Fad__KokkosTests_8hpp" name="Fad_Fad_KokkosTests.hpp" local="yes" imported="no">Fad_Fad_KokkosTests.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Fad__Fad__KokkosTests__Threads_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fad_fe_jac_fill.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/</path>
    <filename>fad__fe__jac__fill_8cpp</filename>
    <includes id="fe__jac__fill__funcs_8hpp" name="fe_jac_fill_funcs.hpp" local="yes" imported="no">fe_jac_fill_funcs.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fad__fe__jac__fill_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fad_fe_jac_fill_range.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/</path>
    <filename>fad__fe__jac__fill__range_8cpp</filename>
    <includes id="fe__jac__fill__funcs_8hpp" name="fe_jac_fill_funcs.hpp" local="yes" imported="no">fe_jac_fill_funcs.hpp</includes>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>do_times</name>
      <anchorfile>fad__fe__jac__fill__range_8cpp.html</anchorfile>
      <anchor>a5b1ddfdb35a0d752ed30b3c1345ae5ce</anchor>
      <arglist>(int work_count, int num_eqns_begin, int num_eqns_end, int num_eqns_delta, double(*func)(unsigned int, unsigned int, double))</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>do_times_fad</name>
      <anchorfile>fad__fe__jac__fill__range_8cpp.html</anchorfile>
      <anchor>a390663c66cd5bfbb0fd185dc619104a4</anchor>
      <arglist>(int work_count, int num_eqns_begin, int num_eqns_end, int num_eqns_delta)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>do_times_slfad</name>
      <anchorfile>fad__fe__jac__fill__range_8cpp.html</anchorfile>
      <anchor>a072ffbba5153394f8204ae15935248ab</anchor>
      <arglist>(int work_count, int num_eqns_begin, int num_eqns_end, int num_eqns_delta)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>do_times_sfad</name>
      <anchorfile>fad__fe__jac__fill__range_8cpp.html</anchorfile>
      <anchor>acf0592774a701b9a50b0902eca895a4e</anchor>
      <arglist>(int work_count, int num_eqns_begin, int num_eqns_end, int num_eqns_delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_times</name>
      <anchorfile>fad__fe__jac__fill__range_8cpp.html</anchorfile>
      <anchor>aae20b5c4dc062b0a9603716a0b436614</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;times, const std::vector&lt; double &gt; &amp;base, const std::string &amp;name, int p, int w, int w_name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fad__fe__jac__fill__range_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_Kokkos_CommTests_Cuda.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__Kokkos__CommTests__Cuda_8cpp</filename>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <includes id="Fad__CommTests_8hpp" name="Fad_CommTests.hpp" local="yes" imported="no">Fad_CommTests.hpp</includes>
    <member kind="typedef">
      <type>int</type>
      <name>Ordinal</name>
      <anchorfile>Fad__Kokkos__CommTests__Cuda_8cpp.html</anchorfile>
      <anchor>ad6064b63db46a0ca2d0c6f9c163340b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::DFad&lt; double &gt;</type>
      <name>Fad_DFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Cuda_8cpp.html</anchorfile>
      <anchor>a415685edbd608fa5f157606f7e88a9ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SLFad&lt; double, 10 &gt;</type>
      <name>Fad_SLFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Cuda_8cpp.html</anchorfile>
      <anchor>a3c6143caff08aa0d66f1388b39d88975</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SFad&lt; double, 5 &gt;</type>
      <name>Fad_SFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Cuda_8cpp.html</anchorfile>
      <anchor>a289eb43dc979a645f88f5601ed5f655e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::DFad&lt; double &gt;</type>
      <name>CacheFad_DFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Cuda_8cpp.html</anchorfile>
      <anchor>a3942d53d0c08d0f474b51f444d9c0785</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::SLFad&lt; double, 10 &gt;</type>
      <name>CacheFad_SLFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Cuda_8cpp.html</anchorfile>
      <anchor>a3ba398e88c363bb30dfad3590b648e15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::SFad&lt; double, 5 &gt;</type>
      <name>CacheFad_SFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Cuda_8cpp.html</anchorfile>
      <anchor>a04eafe898de84f91e07ed628d3af611b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::DFad&lt; double &gt;</type>
      <name>ELRFad_DFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Cuda_8cpp.html</anchorfile>
      <anchor>a2625c727ffad9272419a65c82ad14252</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::SLFad&lt; double, 10 &gt;</type>
      <name>ELRFad_SLFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Cuda_8cpp.html</anchorfile>
      <anchor>ae82bcc6d7a56f1e160ac6eeb630bbc68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::SFad&lt; double, 5 &gt;</type>
      <name>ELRFad_SFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Cuda_8cpp.html</anchorfile>
      <anchor>aacb28c3610e4193434a06b8c6b8d0e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::DFad&lt; double &gt;</type>
      <name>ELRCacheFad_DFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Cuda_8cpp.html</anchorfile>
      <anchor>a6d88e5885c36b30355eb4abbd625d598</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::SLFad&lt; double, 10 &gt;</type>
      <name>ELRCacheFad_SLFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Cuda_8cpp.html</anchorfile>
      <anchor>a580cb23aaba1c9246f1da5eab8d2e33f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::SFad&lt; double, 5 &gt;</type>
      <name>ELRCacheFad_SFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Cuda_8cpp.html</anchorfile>
      <anchor>a0ca087908094ec461287ef7a4e955994</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Fad__Kokkos__CommTests__Cuda_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>Sacado::Random&lt; double &gt;</type>
      <name>rnd</name>
      <anchorfile>Fad__Kokkos__CommTests__Cuda_8cpp.html</anchorfile>
      <anchor>a980e90e2ce0057c35e89f15417a7739d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_Kokkos_CommTests_OpenMP.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__Kokkos__CommTests__OpenMP_8cpp</filename>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <includes id="Fad__CommTests_8hpp" name="Fad_CommTests.hpp" local="yes" imported="no">Fad_CommTests.hpp</includes>
    <member kind="typedef">
      <type>int</type>
      <name>Ordinal</name>
      <anchorfile>Fad__Kokkos__CommTests__OpenMP_8cpp.html</anchorfile>
      <anchor>ad6064b63db46a0ca2d0c6f9c163340b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::DFad&lt; double &gt;</type>
      <name>Fad_DFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__OpenMP_8cpp.html</anchorfile>
      <anchor>a415685edbd608fa5f157606f7e88a9ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SLFad&lt; double, 10 &gt;</type>
      <name>Fad_SLFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__OpenMP_8cpp.html</anchorfile>
      <anchor>a3c6143caff08aa0d66f1388b39d88975</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SFad&lt; double, 5 &gt;</type>
      <name>Fad_SFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__OpenMP_8cpp.html</anchorfile>
      <anchor>a289eb43dc979a645f88f5601ed5f655e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::DFad&lt; double &gt;</type>
      <name>CacheFad_DFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__OpenMP_8cpp.html</anchorfile>
      <anchor>a3942d53d0c08d0f474b51f444d9c0785</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::SLFad&lt; double, 10 &gt;</type>
      <name>CacheFad_SLFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__OpenMP_8cpp.html</anchorfile>
      <anchor>a3ba398e88c363bb30dfad3590b648e15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::SFad&lt; double, 5 &gt;</type>
      <name>CacheFad_SFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__OpenMP_8cpp.html</anchorfile>
      <anchor>a04eafe898de84f91e07ed628d3af611b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::DFad&lt; double &gt;</type>
      <name>ELRFad_DFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__OpenMP_8cpp.html</anchorfile>
      <anchor>a2625c727ffad9272419a65c82ad14252</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::SLFad&lt; double, 10 &gt;</type>
      <name>ELRFad_SLFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__OpenMP_8cpp.html</anchorfile>
      <anchor>ae82bcc6d7a56f1e160ac6eeb630bbc68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::SFad&lt; double, 5 &gt;</type>
      <name>ELRFad_SFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__OpenMP_8cpp.html</anchorfile>
      <anchor>aacb28c3610e4193434a06b8c6b8d0e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::DFad&lt; double &gt;</type>
      <name>ELRCacheFad_DFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__OpenMP_8cpp.html</anchorfile>
      <anchor>a6d88e5885c36b30355eb4abbd625d598</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::SLFad&lt; double, 10 &gt;</type>
      <name>ELRCacheFad_SLFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__OpenMP_8cpp.html</anchorfile>
      <anchor>a580cb23aaba1c9246f1da5eab8d2e33f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::SFad&lt; double, 5 &gt;</type>
      <name>ELRCacheFad_SFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__OpenMP_8cpp.html</anchorfile>
      <anchor>a0ca087908094ec461287ef7a4e955994</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Fad__Kokkos__CommTests__OpenMP_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>Sacado::Random&lt; double &gt;</type>
      <name>rnd</name>
      <anchorfile>Fad__Kokkos__CommTests__OpenMP_8cpp.html</anchorfile>
      <anchor>a980e90e2ce0057c35e89f15417a7739d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_Kokkos_CommTests_Serial.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__Kokkos__CommTests__Serial_8cpp</filename>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <includes id="Fad__CommTests_8hpp" name="Fad_CommTests.hpp" local="yes" imported="no">Fad_CommTests.hpp</includes>
    <member kind="typedef">
      <type>int</type>
      <name>Ordinal</name>
      <anchorfile>Fad__Kokkos__CommTests__Serial_8cpp.html</anchorfile>
      <anchor>ad6064b63db46a0ca2d0c6f9c163340b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::DFad&lt; double &gt;</type>
      <name>Fad_DFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Serial_8cpp.html</anchorfile>
      <anchor>a415685edbd608fa5f157606f7e88a9ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SLFad&lt; double, 10 &gt;</type>
      <name>Fad_SLFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Serial_8cpp.html</anchorfile>
      <anchor>a3c6143caff08aa0d66f1388b39d88975</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SFad&lt; double, 5 &gt;</type>
      <name>Fad_SFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Serial_8cpp.html</anchorfile>
      <anchor>a289eb43dc979a645f88f5601ed5f655e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::DFad&lt; double &gt;</type>
      <name>CacheFad_DFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Serial_8cpp.html</anchorfile>
      <anchor>a3942d53d0c08d0f474b51f444d9c0785</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::SLFad&lt; double, 10 &gt;</type>
      <name>CacheFad_SLFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Serial_8cpp.html</anchorfile>
      <anchor>a3ba398e88c363bb30dfad3590b648e15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::SFad&lt; double, 5 &gt;</type>
      <name>CacheFad_SFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Serial_8cpp.html</anchorfile>
      <anchor>a04eafe898de84f91e07ed628d3af611b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::DFad&lt; double &gt;</type>
      <name>ELRFad_DFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Serial_8cpp.html</anchorfile>
      <anchor>a2625c727ffad9272419a65c82ad14252</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::SLFad&lt; double, 10 &gt;</type>
      <name>ELRFad_SLFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Serial_8cpp.html</anchorfile>
      <anchor>ae82bcc6d7a56f1e160ac6eeb630bbc68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::SFad&lt; double, 5 &gt;</type>
      <name>ELRFad_SFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Serial_8cpp.html</anchorfile>
      <anchor>aacb28c3610e4193434a06b8c6b8d0e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::DFad&lt; double &gt;</type>
      <name>ELRCacheFad_DFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Serial_8cpp.html</anchorfile>
      <anchor>a6d88e5885c36b30355eb4abbd625d598</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::SLFad&lt; double, 10 &gt;</type>
      <name>ELRCacheFad_SLFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Serial_8cpp.html</anchorfile>
      <anchor>a580cb23aaba1c9246f1da5eab8d2e33f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::SFad&lt; double, 5 &gt;</type>
      <name>ELRCacheFad_SFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Serial_8cpp.html</anchorfile>
      <anchor>a0ca087908094ec461287ef7a4e955994</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Fad__Kokkos__CommTests__Serial_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>Sacado::Random&lt; double &gt;</type>
      <name>rnd</name>
      <anchorfile>Fad__Kokkos__CommTests__Serial_8cpp.html</anchorfile>
      <anchor>a980e90e2ce0057c35e89f15417a7739d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_Kokkos_CommTests_Threads.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__Kokkos__CommTests__Threads_8cpp</filename>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <includes id="Fad__CommTests_8hpp" name="Fad_CommTests.hpp" local="yes" imported="no">Fad_CommTests.hpp</includes>
    <member kind="typedef">
      <type>int</type>
      <name>Ordinal</name>
      <anchorfile>Fad__Kokkos__CommTests__Threads_8cpp.html</anchorfile>
      <anchor>ad6064b63db46a0ca2d0c6f9c163340b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::DFad&lt; double &gt;</type>
      <name>Fad_DFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Threads_8cpp.html</anchorfile>
      <anchor>a415685edbd608fa5f157606f7e88a9ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SLFad&lt; double, 10 &gt;</type>
      <name>Fad_SLFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Threads_8cpp.html</anchorfile>
      <anchor>a3c6143caff08aa0d66f1388b39d88975</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SFad&lt; double, 5 &gt;</type>
      <name>Fad_SFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Threads_8cpp.html</anchorfile>
      <anchor>a289eb43dc979a645f88f5601ed5f655e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::DFad&lt; double &gt;</type>
      <name>CacheFad_DFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Threads_8cpp.html</anchorfile>
      <anchor>a3942d53d0c08d0f474b51f444d9c0785</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::SLFad&lt; double, 10 &gt;</type>
      <name>CacheFad_SLFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Threads_8cpp.html</anchorfile>
      <anchor>a3ba398e88c363bb30dfad3590b648e15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::SFad&lt; double, 5 &gt;</type>
      <name>CacheFad_SFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Threads_8cpp.html</anchorfile>
      <anchor>a04eafe898de84f91e07ed628d3af611b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::DFad&lt; double &gt;</type>
      <name>ELRFad_DFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Threads_8cpp.html</anchorfile>
      <anchor>a2625c727ffad9272419a65c82ad14252</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::SLFad&lt; double, 10 &gt;</type>
      <name>ELRFad_SLFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Threads_8cpp.html</anchorfile>
      <anchor>ae82bcc6d7a56f1e160ac6eeb630bbc68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::SFad&lt; double, 5 &gt;</type>
      <name>ELRFad_SFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Threads_8cpp.html</anchorfile>
      <anchor>aacb28c3610e4193434a06b8c6b8d0e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::DFad&lt; double &gt;</type>
      <name>ELRCacheFad_DFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Threads_8cpp.html</anchorfile>
      <anchor>a6d88e5885c36b30355eb4abbd625d598</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::SLFad&lt; double, 10 &gt;</type>
      <name>ELRCacheFad_SLFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Threads_8cpp.html</anchorfile>
      <anchor>a580cb23aaba1c9246f1da5eab8d2e33f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::SFad&lt; double, 5 &gt;</type>
      <name>ELRCacheFad_SFadType</name>
      <anchorfile>Fad__Kokkos__CommTests__Threads_8cpp.html</anchorfile>
      <anchor>a0ca087908094ec461287ef7a4e955994</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Fad__Kokkos__CommTests__Threads_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>Sacado::Random&lt; double &gt;</type>
      <name>rnd</name>
      <anchorfile>Fad__Kokkos__CommTests__Threads_8cpp.html</anchorfile>
      <anchor>a980e90e2ce0057c35e89f15417a7739d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fad_kokkos_view.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/</path>
    <filename>fad__kokkos__view_8cpp</filename>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <class kind="struct">MatVecFunctor</class>
    <class kind="struct">MatVecDerivFunctor</class>
    <class kind="struct">SLMatVecDerivFunctor</class>
    <class kind="struct">SMatVecDerivFunctor</class>
    <class kind="struct">Perf</class>
    <member kind="enumeration">
      <type></type>
      <name>LayoutType</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>aaf71c596602a7233419387100afbd329</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAYOUT_LEFT</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>aaf71c596602a7233419387100afbd329aa859633b3bfd7e16b86a8ebcf501b46c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAYOUT_RIGHT</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>aaf71c596602a7233419387100afbd329a5db229c49ccd6d16ca2e081f448a5e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAYOUT_DEFAULT</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>aaf71c596602a7233419387100afbd329a797697df5bb08432024e6baad4d32948</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run_mat_vec</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>a4ad882a4199f3c085e9d64262f14f453</anchor>
      <arglist>(const ViewTypeA &amp;A, const ViewTypeB &amp;b, const ViewTypeC &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run_mat_vec_deriv</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>ad912cfbb2ff84b8574f917cc956423ba</anchor>
      <arglist>(const ViewTypeA &amp;A, const ViewTypeB &amp;b, const ViewTypeC &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run_mat_vec_deriv_sl</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>a903359ca08212cec58a92541b8987400</anchor>
      <arglist>(const ViewTypeA &amp;A, const ViewTypeB &amp;b, const ViewTypeC &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run_mat_vec_deriv_s</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>a691ac2df788c1969e69a1827eb7ca05c</anchor>
      <arglist>(const ViewTypeA &amp;A, const ViewTypeB &amp;b, const ViewTypeC &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_val</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>a4ef9aa16bf5b29f297de554186b04b1d</anchor>
      <arglist>(const ViewTypeA &amp;A, const ViewTypeB &amp;b, const ViewTypeC &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_deriv</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>a5f11b15ed5b86419319fc47a4a1c523b</anchor>
      <arglist>(const ViewTypeA &amp;A, const ViewTypeB &amp;b, const ViewTypeC &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Perf</type>
      <name>do_time_fad</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>a70744ecf4285889822ee51e80474ed22</anchor>
      <arglist>(const size_t m, const size_t n, const size_t p, const size_t nloop, const bool check)</arglist>
    </member>
    <member kind="function">
      <type>Perf</type>
      <name>do_time_analytic</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>a3b587fb7cb293f8a40f3ce250dee664a</anchor>
      <arglist>(const size_t m, const size_t n, const size_t p, const size_t nloop, const bool check)</arglist>
    </member>
    <member kind="function">
      <type>Perf</type>
      <name>do_time_analytic_sl</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>adebf8c45661b79c51f87f5142d5e48cc</anchor>
      <arglist>(const size_t m, const size_t n, const size_t p, const size_t nloop, const bool check)</arglist>
    </member>
    <member kind="function">
      <type>Perf</type>
      <name>do_time_analytic_s</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>a195cfc88e2cf7a7642d0eff994b8c989</anchor>
      <arglist>(const size_t m, const size_t n, const size_t nloop, const bool check)</arglist>
    </member>
    <member kind="function">
      <type>Perf</type>
      <name>do_time_val</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>a101ae2fd79afb08fbdb1b06e3f3f6659</anchor>
      <arglist>(const size_t m, const size_t n, const size_t nloop, const bool check)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_perf</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>a408bf10a62e43346591f1904587e3098</anchor>
      <arglist>(const Perf &amp;perf, const Perf &amp;perf_base, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_times</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>adcbdb49384e8a19f1dffe3488c08fa5d</anchor>
      <arglist>(const size_t m, const size_t n, const size_t p, const size_t nloop, const bool value, const bool analytic, const bool sfad, const bool slfad, const bool dfad, const bool check)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_times_layout</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>ab0abe61120da3987521b0aa495f6ea35</anchor>
      <arglist>(const size_t m, const size_t n, const size_t p, const size_t nloop, const bool value, const bool analytic, const bool sfad, const bool slfad, const bool dfad, const bool check, const LayoutType &amp;layout, const std::string &amp;device)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_vtune</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>a63de9009391e91a8e4bb7079e413d817</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>num_layout_types</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>a67938d95d84cf5e86ad4f5c821b9a88d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const LayoutType</type>
      <name>layout_values</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>a37e6b7ee81eabda9febd771d2e0ee6c3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>layout_names</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>a40bab9b94d486e14cb6e4642c2173480</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SFadSize</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>a6e7d2b497684c8f28dc901881a6f7fec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SLFadSize</name>
      <anchorfile>fad__kokkos__view_8cpp.html</anchorfile>
      <anchor>abab4be7dad75e7795080719d70c4d3d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_KokkosTests.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__KokkosTests_8hpp</filename>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <includes id="Kokkos__DynRankView__Fad_8hpp" name="Kokkos_DynRankView_Fad.hpp" local="yes" imported="no">Kokkos_DynRankView_Fad.hpp</includes>
    <class kind="struct">MultiplyKernel</class>
    <class kind="struct">ScalarAssignKernel</class>
    <class kind="struct">AssignRank2Rank1Kernel</class>
    <member kind="define">
      <type>#define</type>
      <name>VIEW_FAD_TESTS_FLD</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a339d41659b047379854c96fdb42c6355</anchor>
      <arglist>(F, L, D)                                                                  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VIEW_FAD_TESTS_SFLD</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>aa0f88687dd1f1751cca72f2f22ffd584</anchor>
      <arglist>(F, L, D)                                                                  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VIEW_FAD_TESTS_FD</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>aee2f359a17fbe2815ac0df7201fe6820</anchor>
      <arglist>(F, D)                                                                          </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VIEW_FAD_TESTS_SFD</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>ae5a7f154669230fc5341037d458e38ef</anchor>
      <arglist>(F, D)                                                                        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VIEW_FAD_TESTS_D</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>af5064ea9bc3584fa80d59aa617fde466</anchor>
      <arglist>(D)                                            </arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::DFad&lt; double &gt;</type>
      <name>DFadType</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a7e0893207b87dad05c66a34baac8ed2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SLFad&lt; double, 2 *global_fad_size &gt;</type>
      <name>SLFadType</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a735063b1577b7fd82ab174833c9aaffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SFad&lt; double, global_fad_size &gt;</type>
      <name>SFadType</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>ac03c5201fd879631f884b7c222646d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFads</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a08727508cefc8ebf3ed8decfa7ae2d1b</anchor>
      <arglist>(const FadType1 &amp;x, const FadType2 &amp;x2, Teuchos::FancyOStream &amp;out, double tol=1.0e-15)</arglist>
    </member>
    <member kind="function">
      <type>fadtype</type>
      <name>generate_fad</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a3836fe2604d5145711c2406b03f0d4dc</anchor>
      <arglist>(const ordinal num_rows, const ordinal num_cols, const ordinal fad_size, const ordinal row, const ordinal col)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a73b28b11d2f0e7f08cf3c72cef1a25e7</anchor>
      <arglist>(Kokkos_View_Fad, Size, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a2345747eff8a54d0fcc0ac10beac1021</anchor>
      <arglist>(Kokkos_View_Fad, DeepCopy, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a912a5d7b11307e233d8cecd5d368e9c2</anchor>
      <arglist>(Kokkos_View_Fad, DeepCopy_ConstantScalar, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>aa1eafddc36929811f47e2e9b8caa587b</anchor>
      <arglist>(Kokkos_View_Fad, DeepCopy_ConstantZero, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a174b936b459959c8e91e9d150b725cd1</anchor>
      <arglist>(Kokkos_View_Fad, DeepCopy_ConstantFad, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a4e4dcd2f76e5ae0cafab1a7b3318d479</anchor>
      <arglist>(Kokkos_View_Fad, DeepCopy_ConstantFadFull, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a88b55a7eef13483458c3efbec93532df</anchor>
      <arglist>(Kokkos_View_Fad, ScalarAssign, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>aabac2f3b30d73336e1057639c0edf60d</anchor>
      <arglist>(Kokkos_View_Fad, Multiply, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a8022a62e4c473dfa4abae8dd1ea785e5</anchor>
      <arglist>(Kokkos_View_Fad, MultiplyUpdate, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a0bbbeb4b0b83cf574ee2612f956bc736</anchor>
      <arglist>(Kokkos_View_Fad, MultiplyConst, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>ae0ba646c5c9d3984d3de303d82439880</anchor>
      <arglist>(Kokkos_View_Fad, MultiplyMixed, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a53dbfa770783e347dad1618935618ef4</anchor>
      <arglist>(Kokkos_View_Fad, Rank8, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>ae3884e268c124b08e9cf29bcd5c4f1ab</anchor>
      <arglist>(Kokkos_View_Fad, Roger, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a99ca4ea61078d5cf92d9bff76320e21a</anchor>
      <arglist>(Kokkos_View_Fad, AssignDifferentStrides, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a26f2d57f39e4b7074ce8e48b6828d6ab</anchor>
      <arglist>(Kokkos_View_Fad, DynRankDimensionScalar, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a3dad754689691c132dfe052713b5206c</anchor>
      <arglist>(Kokkos_View_Fad, DynRankMultiply, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a3d73085de93a4b0219ba3827c9c684f8</anchor>
      <arglist>(Kokkos_View_Fad, SubdynrankviewCol, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>ad13ff9ec917b8273556a73f8d4f5266a</anchor>
      <arglist>(Kokkos_View_Fad, SubdynrankviewRow, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a47e7fe15ec6c14d1f26bdeeb3e816c63</anchor>
      <arglist>(Kokkos_View_Fad, SubdynrankviewScalar, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a6c3413afa19618b731aeb10c5f747672</anchor>
      <arglist>(Kokkos_View_Fad, Subview, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a1bed977374603a1b149797ad9f188d51</anchor>
      <arglist>(Kokkos_View_Fad, ShmemSize, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>ab63927287357b72bd1d780b73352039f</anchor>
      <arglist>(Kokkos_View_Fad, Unmanaged, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a7c2dd927b1abd4ec6660f76d04895cb8</anchor>
      <arglist>(Kokkos_View_Fad, Unmanaged2, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>aed7d3b5dd032f3050f4c65455bdb9a16</anchor>
      <arglist>(Kokkos_View_Fad, UnmanagedConst, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a65a79c071354d308d0dd57f356163c36</anchor>
      <arglist>(Kokkos_View_Fad, UnmanagedConst2, FadType, Layout, Device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_3_DECL</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a459f78c5e11f5d387ee58067bdc1537d</anchor>
      <arglist>(Kokkos_View_Fad, SFadNoSizeArg, FadType, Layout, Device)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>global_num_rows</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a19925247318f4054f3b738d8fda6e932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>global_num_cols</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>a520f878deeaa78336aa688a71cb2b459</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>global_fad_size</name>
      <anchorfile>Fad__KokkosTests_8hpp.html</anchorfile>
      <anchor>aba06c6d63d86b58f1aef274a9f576813</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_KokkosTests_Cuda.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__KokkosTests__Cuda_8cpp</filename>
    <includes id="Fad__KokkosTests_8hpp" name="Fad_KokkosTests.hpp" local="yes" imported="no">Fad_KokkosTests.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Fad__KokkosTests__Cuda_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_KokkosTests_NoViewSpec_Cuda.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__KokkosTests__NoViewSpec__Cuda_8cpp</filename>
    <includes id="Fad__KokkosTests_8hpp" name="Fad_KokkosTests.hpp" local="yes" imported="no">Fad_KokkosTests.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_DISABLE_FAD_VIEW_SPEC</name>
      <anchorfile>Fad__KokkosTests__NoViewSpec__Cuda_8cpp.html</anchorfile>
      <anchor>af8fc22d3e3a911874093e32a88141505</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Fad__KokkosTests__NoViewSpec__Cuda_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_KokkosTests_NoViewSpec_OpenMP.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__KokkosTests__NoViewSpec__OpenMP_8cpp</filename>
    <includes id="Fad__KokkosTests_8hpp" name="Fad_KokkosTests.hpp" local="yes" imported="no">Fad_KokkosTests.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_DISABLE_FAD_VIEW_SPEC</name>
      <anchorfile>Fad__KokkosTests__NoViewSpec__OpenMP_8cpp.html</anchorfile>
      <anchor>af8fc22d3e3a911874093e32a88141505</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Fad__KokkosTests__NoViewSpec__OpenMP_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_KokkosTests_NoViewSpec_Serial.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__KokkosTests__NoViewSpec__Serial_8cpp</filename>
    <includes id="Fad__KokkosTests_8hpp" name="Fad_KokkosTests.hpp" local="yes" imported="no">Fad_KokkosTests.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_DISABLE_FAD_VIEW_SPEC</name>
      <anchorfile>Fad__KokkosTests__NoViewSpec__Serial_8cpp.html</anchorfile>
      <anchor>af8fc22d3e3a911874093e32a88141505</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Fad__KokkosTests__NoViewSpec__Serial_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_KokkosTests_NoViewSpec_Threads.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__KokkosTests__NoViewSpec__Threads_8cpp</filename>
    <includes id="Fad__KokkosTests_8hpp" name="Fad_KokkosTests.hpp" local="yes" imported="no">Fad_KokkosTests.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_DISABLE_FAD_VIEW_SPEC</name>
      <anchorfile>Fad__KokkosTests__NoViewSpec__Threads_8cpp.html</anchorfile>
      <anchor>af8fc22d3e3a911874093e32a88141505</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Fad__KokkosTests__NoViewSpec__Threads_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_KokkosTests_OpenMP.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__KokkosTests__OpenMP_8cpp</filename>
    <includes id="Fad__KokkosTests_8hpp" name="Fad_KokkosTests.hpp" local="yes" imported="no">Fad_KokkosTests.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Fad__KokkosTests__OpenMP_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_KokkosTests_Serial.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__KokkosTests__Serial_8cpp</filename>
    <includes id="Fad__KokkosTests_8hpp" name="Fad_KokkosTests.hpp" local="yes" imported="no">Fad_KokkosTests.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Fad__KokkosTests__Serial_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_KokkosTests_Threads.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__KokkosTests__Threads_8cpp</filename>
    <includes id="Fad__KokkosTests_8hpp" name="Fad_KokkosTests.hpp" local="yes" imported="no">Fad_KokkosTests.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Fad__KokkosTests__Threads_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fad_lj_grad.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/</path>
    <filename>fad__lj__grad_8cpp</filename>
    <includes id="Sacado__Random_8hpp" name="Sacado_Random.hpp" local="yes" imported="no">Sacado_Random.hpp</includes>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__CacheFad__DFad_8hpp" name="Sacado_CacheFad_DFad.hpp" local="yes" imported="no">Sacado_CacheFad_DFad.hpp</includes>
    <member kind="function">
      <type>T</type>
      <name>vec3_distsq</name>
      <anchorfile>fad__lj__grad_8cpp.html</anchorfile>
      <anchor>a21bacca0f8a4625b2c59272289d3feb4</anchor>
      <arglist>(const T xi[], const double xj[])</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vec3_distsq</name>
      <anchorfile>fad__lj__grad_8cpp.html</anchorfile>
      <anchor>a59e9ef574fda0da62fcabb7461c5e506</anchor>
      <arglist>(const T xi[], const double xj[], T delr[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lj</name>
      <anchorfile>fad__lj__grad_8cpp.html</anchorfile>
      <anchor>a0eb2d3230953f59369cd8e5ed9f2faa1</anchor>
      <arglist>(const T xi[], const double xj[], T &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lj_and_grad</name>
      <anchorfile>fad__lj__grad_8cpp.html</anchorfile>
      <anchor>a239a04cd33e67bb24ce25e75341b8687</anchor>
      <arglist>(const double xi[], const double xj[], double &amp;energy, double f[])</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>do_time</name>
      <anchorfile>fad__lj__grad_8cpp.html</anchorfile>
      <anchor>a2857c0c06b5f620fb4aa7f8a90d4af4c</anchor>
      <arglist>(int nloop)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>do_time_analytic</name>
      <anchorfile>fad__lj__grad_8cpp.html</anchorfile>
      <anchor>ab178d5eda0dafa64b15f56207c52902f</anchor>
      <arglist>(int nloop)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>fad__lj__grad_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fad_SerializationTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Fad__SerializationTests_8cpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__Fad__SimpleFad_8hpp" name="Sacado_Fad_SimpleFad.hpp" local="yes" imported="no">Sacado_Fad_SimpleFad.hpp</includes>
    <includes id="Sacado__CacheFad__DFad_8hpp" name="Sacado_CacheFad_DFad.hpp" local="yes" imported="no">Sacado_CacheFad_DFad.hpp</includes>
    <includes id="Sacado__CacheFad__SFad_8hpp" name="Sacado_CacheFad_SFad.hpp" local="yes" imported="no">Sacado_CacheFad_SFad.hpp</includes>
    <includes id="Sacado__CacheFad__SLFad_8hpp" name="Sacado_CacheFad_SLFad.hpp" local="yes" imported="no">Sacado_CacheFad_SLFad.hpp</includes>
    <includes id="Sacado__mpl__apply_8hpp" name="Sacado_mpl_apply.hpp" local="yes" imported="no">Sacado_mpl_apply.hpp</includes>
    <includes id="Sacado__Random_8hpp" name="Sacado_Random.hpp" local="yes" imported="no">Sacado_Random.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FAD_SERIALIZATION_TESTS</name>
      <anchorfile>Fad__SerializationTests_8cpp.html</anchorfile>
      <anchor>ae032878fcd0766c3daaaeb75515f64cf</anchor>
      <arglist>(FadType, FAD)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SFAD_SERIALIZATION_TESTS</name>
      <anchorfile>Fad__SerializationTests_8cpp.html</anchorfile>
      <anchor>aaa1e3e712ec8b47e232e36b331270b32</anchor>
      <arglist>(FadType, FAD)</arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SLFad&lt; double, 10 &gt;</type>
      <name>Fad_SLFadType</name>
      <anchorfile>Fad__SerializationTests_8cpp.html</anchorfile>
      <anchor>a3c6143caff08aa0d66f1388b39d88975</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::SLFad&lt; double, 10 &gt;</type>
      <name>ELRFad_SLFadType</name>
      <anchorfile>Fad__SerializationTests_8cpp.html</anchorfile>
      <anchor>ae82bcc6d7a56f1e160ac6eeb630bbc68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::SLFad&lt; double, 10 &gt;</type>
      <name>ELRCacheFad_SLFadType</name>
      <anchorfile>Fad__SerializationTests_8cpp.html</anchorfile>
      <anchor>a580cb23aaba1c9246f1da5eab8d2e33f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::SLFad&lt; double, 10 &gt;</type>
      <name>CacheFad_SLFadType</name>
      <anchorfile>Fad__SerializationTests_8cpp.html</anchorfile>
      <anchor>a3ba398e88c363bb30dfad3590b648e15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SFad&lt; double, 5 &gt;</type>
      <name>Fad_SFadType</name>
      <anchorfile>Fad__SerializationTests_8cpp.html</anchorfile>
      <anchor>a289eb43dc979a645f88f5601ed5f655e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::SFad&lt; double, 5 &gt;</type>
      <name>ELRFad_SFadType</name>
      <anchorfile>Fad__SerializationTests_8cpp.html</anchorfile>
      <anchor>aacb28c3610e4193434a06b8c6b8d0e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::SFad&lt; double, 5 &gt;</type>
      <name>ELRCacheFad_SFadType</name>
      <anchorfile>Fad__SerializationTests_8cpp.html</anchorfile>
      <anchor>a0ca087908094ec461287ef7a4e955994</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::SFad&lt; double, 5 &gt;</type>
      <name>CacheFad_SFadType</name>
      <anchorfile>Fad__SerializationTests_8cpp.html</anchorfile>
      <anchor>a04eafe898de84f91e07ed628d3af611b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testSerialization</name>
      <anchorfile>Fad__SerializationTests_8cpp.html</anchorfile>
      <anchor>a30ff838da1c3e6411d4dd4a76be5b4f7</anchor>
      <arglist>(const Teuchos::Array&lt; FadType &gt; &amp;x, const std::string &amp;tag, Teuchos::FancyOStream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testSerializationObject</name>
      <anchorfile>Fad__SerializationTests_8cpp.html</anchorfile>
      <anchor>a7f7d59d137e97541d8753aed84db24e7</anchor>
      <arglist>(const Serializer &amp;serializer, Teuchos::Array&lt; FadType &gt; &amp;x, const std::string &amp;tag, Teuchos::FancyOStream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testNestedSerializationObject</name>
      <anchorfile>Fad__SerializationTests_8cpp.html</anchorfile>
      <anchor>adb4ae40faf592630345584828b1bd388</anchor>
      <arglist>(const Serializer &amp;serializer, Teuchos::Array&lt; FadType &gt; &amp;x, const std::string &amp;tag, Teuchos::FancyOStream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Fad__SerializationTests_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>Sacado::Random&lt; double &gt;</type>
      <name>rnd</name>
      <anchorfile>Fad__SerializationTests_8cpp.html</anchorfile>
      <anchor>a980e90e2ce0057c35e89f15417a7739d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FadBLASUnitTests.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>FadBLASUnitTests_8hpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__Fad__BLAS_8hpp" name="Sacado_Fad_BLAS.hpp" local="yes" imported="no">Sacado_Fad_BLAS.hpp</includes>
    <includes id="Sacado__Random_8hpp" name="Sacado_Random.hpp" local="yes" imported="no">Sacado_Random.hpp</includes>
    <class kind="class">FadBLASUnitTests</class>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_VALUES</name>
      <anchorfile>FadBLASUnitTests_8hpp.html</anchorfile>
      <anchor>a80c88e5aa4caaef9e2d75ec3a050b80f</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_FADS</name>
      <anchorfile>FadBLASUnitTests_8hpp.html</anchorfile>
      <anchor>a66fe2dd6d8d45301293471eab0756be9</anchor>
      <arglist>(a, b)                                                        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_FAD_VECTORS</name>
      <anchorfile>FadBLASUnitTests_8hpp.html</anchorfile>
      <anchor>a67db599a72ba0b0c8015f5c35aad83b5</anchor>
      <arglist>(X1, X2, n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FadLAPACKUnitTests.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>FadLAPACKUnitTests_8hpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__Fad__LAPACK_8hpp" name="Sacado_Fad_LAPACK.hpp" local="yes" imported="no">Sacado_Fad_LAPACK.hpp</includes>
    <includes id="Sacado__Random_8hpp" name="Sacado_Random.hpp" local="yes" imported="no">Sacado_Random.hpp</includes>
    <class kind="class">FadLAPACKUnitTests</class>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_VALUES</name>
      <anchorfile>FadLAPACKUnitTests_8hpp.html</anchorfile>
      <anchor>a80c88e5aa4caaef9e2d75ec3a050b80f</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_FADS</name>
      <anchorfile>FadLAPACKUnitTests_8hpp.html</anchorfile>
      <anchor>a66fe2dd6d8d45301293471eab0756be9</anchor>
      <arglist>(a, b)                                                        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_FAD_VECTORS</name>
      <anchorfile>FadLAPACKUnitTests_8hpp.html</anchorfile>
      <anchor>a67db599a72ba0b0c8015f5c35aad83b5</anchor>
      <arglist>(X1, X2, n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FadUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>FadUnitTests_8cpp</filename>
    <includes id="FadUnitTests_8hpp" name="FadUnitTests.hpp" local="yes" imported="no">FadUnitTests.hpp</includes>
    <includes id="Sacado__Fad__SimpleFad_8hpp" name="Sacado_Fad_SimpleFad.hpp" local="yes" imported="no">Sacado_Fad_SimpleFad.hpp</includes>
    <member kind="typedef">
      <type>FadOpsUnitTest&lt; Sacado::Fad::DFad&lt; double &gt;, double &gt;</type>
      <name>DFadDoubleTest</name>
      <anchorfile>FadUnitTests_8cpp.html</anchorfile>
      <anchor>aa7ac7a4bf5650bf644c6b80ad8112afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FadOpsUnitTest&lt; Sacado::Fad::SFad&lt; double, 5 &gt;, double &gt;</type>
      <name>SFadDoubleTest</name>
      <anchorfile>FadUnitTests_8cpp.html</anchorfile>
      <anchor>ad1132f9ac3da1b1a43a5c034712660b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FadOpsUnitTest&lt; Sacado::Fad::SLFad&lt; double, 10 &gt;, double &gt;</type>
      <name>SLFadDoubleTest</name>
      <anchorfile>FadUnitTests_8cpp.html</anchorfile>
      <anchor>aa0e2f877b4216536a7b359ad72319382</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FadOpsUnitTest&lt; Sacado::Fad::SimpleFad&lt; double &gt;, double &gt;</type>
      <name>SimpleFadDoubleTest</name>
      <anchorfile>FadUnitTests_8cpp.html</anchorfile>
      <anchor>a82a835a1765ae4cb684a509fe84287dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FadOpsUnitTest&lt; Sacado::Fad::DVFad&lt; double &gt;, double &gt;</type>
      <name>DVFadDoubleTest</name>
      <anchorfile>FadUnitTests_8cpp.html</anchorfile>
      <anchor>a9a37665ace53a43a4e09dea621f052ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>FadUnitTests_8cpp.html</anchorfile>
      <anchor>aea90ba433400cfce16ba9ebab8b7af3f</anchor>
      <arglist>(DFadDoubleTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>FadUnitTests_8cpp.html</anchorfile>
      <anchor>a4e6cf0c349dd9c35aa0007923d3a7b7c</anchor>
      <arglist>(SFadDoubleTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>FadUnitTests_8cpp.html</anchorfile>
      <anchor>a1ab1a2c6cd3d294400d0df54994ea6d7</anchor>
      <arglist>(SLFadDoubleTest)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FadUnitTests.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>FadUnitTests_8hpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__Random_8hpp" name="Sacado_Random.hpp" local="yes" imported="no">Sacado_Random.hpp</includes>
    <class kind="class">FadOpsUnitTest</class>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_VALUES</name>
      <anchorfile>FadUnitTests_8hpp.html</anchorfile>
      <anchor>a80c88e5aa4caaef9e2d75ec3a050b80f</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_FADS</name>
      <anchorfile>FadUnitTests_8hpp.html</anchorfile>
      <anchor>a66fe2dd6d8d45301293471eab0756be9</anchor>
      <arglist>(a, b)                                                        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>FadUnitTests_8hpp.html</anchorfile>
      <anchor>a40d53b2930b256c6f9975f3b1152ccf1</anchor>
      <arglist>(TESTNAME, OP)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RELOP_TEST</name>
      <anchorfile>FadUnitTests_8hpp.html</anchorfile>
      <anchor>ad90148e7924ea4f6e6086f7fdbc4579e</anchor>
      <arglist>(TESTNAME, OP)      </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BINARY_FUNC_TEST</name>
      <anchorfile>FadUnitTests_8hpp.html</anchorfile>
      <anchor>a7db161e3d44d7b4a466c36643deef86c</anchor>
      <arglist>(TESTNAME, FUNC)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNARY_OP_TEST</name>
      <anchorfile>FadUnitTests_8hpp.html</anchorfile>
      <anchor>a7ad2a80d4da48694fa40adb079ffd9b7</anchor>
      <arglist>(TESTNAME, OP)    </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>FadUnitTests_8hpp.html</anchorfile>
      <anchor>ac43f8ba38bfc51d3d5be0b9a0f2ca8b4</anchor>
      <arglist>(TESTNAME, FUNC)    </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>FadUnitTests_8hpp.html</anchorfile>
      <anchor>a471678cbf23623326fdae0f6b04f792a</anchor>
      <arglist>(TESTNAME, OP)    </arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FadUnitTests2.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>FadUnitTests2_8hpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__Random_8hpp" name="Sacado_Random.hpp" local="yes" imported="no">Sacado_Random.hpp</includes>
    <class kind="class">FadOpsUnitTest2</class>
    <class kind="class">RealFadOpsUnitTest2</class>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_VALUES</name>
      <anchorfile>FadUnitTests2_8hpp.html</anchorfile>
      <anchor>a80c88e5aa4caaef9e2d75ec3a050b80f</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_FADS</name>
      <anchorfile>FadUnitTests2_8hpp.html</anchorfile>
      <anchor>a66fe2dd6d8d45301293471eab0756be9</anchor>
      <arglist>(a, b)                                                        </arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fe_jac_fill_funcs.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/</path>
    <filename>fe__jac__fill__funcs_8cpp</filename>
    <includes id="fe__jac__fill__funcs_8hpp" name="fe_jac_fill_funcs.hpp" local="yes" imported="no">fe_jac_fill_funcs.hpp</includes>
    <member kind="function">
      <type>void</type>
      <name>analytic_init_fill</name>
      <anchorfile>fe__jac__fill__funcs_8cpp.html</anchorfile>
      <anchor>a899dce0586ecbd867183123664967601</anchor>
      <arglist>(const ElemData &amp;e, unsigned int neqn, const std::vector&lt; double &gt; &amp;x, std::vector&lt; double &gt; &amp;x_local)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analytic_element_fill</name>
      <anchorfile>fe__jac__fill__funcs_8cpp.html</anchorfile>
      <anchor>a1619bd001845f3edc9cee91b906adf2a</anchor>
      <arglist>(const ElemData &amp;e, unsigned int neqn, const std::vector&lt; double &gt; &amp;x, std::vector&lt; double &gt; &amp;u, std::vector&lt; double &gt; &amp;du, std::vector&lt; double &gt; &amp;f, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;jac)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analytic_process_fill</name>
      <anchorfile>fe__jac__fill__funcs_8cpp.html</anchorfile>
      <anchor>acde4b9ecc61f64654fd4df2dc090efc9</anchor>
      <arglist>(const ElemData &amp;e, unsigned int neqn, const std::vector&lt; double &gt; &amp;f_local, const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;jac_local, std::vector&lt; double &gt; &amp;f, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;jac)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>analytic_jac_fill</name>
      <anchorfile>fe__jac__fill__funcs_8cpp.html</anchorfile>
      <anchor>aa7415605619b88d94d7a464477fdbf6e</anchor>
      <arglist>(unsigned int num_nodes, unsigned int num_eqns, double mesh_spacing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>residual_process_fill</name>
      <anchorfile>fe__jac__fill__funcs_8cpp.html</anchorfile>
      <anchor>aefe553c1c13e3607c1796d5eb2951e55</anchor>
      <arglist>(const ElemData &amp;e, unsigned int neqn, const std::vector&lt; double &gt; &amp;f_local, std::vector&lt; double &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>residual_fill</name>
      <anchorfile>fe__jac__fill__funcs_8cpp.html</anchorfile>
      <anchor>a45dc5d5f773626c772ffac12c6c3c4da</anchor>
      <arglist>(unsigned int num_nodes, unsigned int num_eqns, double mesh_spacing)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fe_jac_fill_funcs.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/</path>
    <filename>fe__jac__fill__funcs_8hpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__Fad__SimpleFad_8hpp" name="Sacado_Fad_SimpleFad.hpp" local="yes" imported="no">Sacado_Fad_SimpleFad.hpp</includes>
    <includes id="Sacado__CacheFad__DFad_8hpp" name="Sacado_CacheFad_DFad.hpp" local="yes" imported="no">Sacado_CacheFad_DFad.hpp</includes>
    <includes id="Sacado__CacheFad__SFad_8hpp" name="Sacado_CacheFad_SFad.hpp" local="yes" imported="no">Sacado_CacheFad_SFad.hpp</includes>
    <includes id="Sacado__CacheFad__SLFad_8hpp" name="Sacado_CacheFad_SLFad.hpp" local="yes" imported="no">Sacado_CacheFad_SLFad.hpp</includes>
    <class kind="struct">ElemData</class>
    <member kind="function">
      <type>void</type>
      <name>fad_init_fill</name>
      <anchorfile>fe__jac__fill__funcs_8hpp.html</anchorfile>
      <anchor>a0e56b0a0f59f3535345cec77c710cffb</anchor>
      <arglist>(const ElemData &amp;e, unsigned int neqn, const std::vector&lt; double &gt; &amp;x, std::vector&lt; FadType &gt; &amp;x_fad)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>template_element_fill</name>
      <anchorfile>fe__jac__fill__funcs_8hpp.html</anchorfile>
      <anchor>ad6b0f925915c9e07de3c243455894364</anchor>
      <arglist>(const ElemData &amp;e, unsigned int neqn, const std::vector&lt; T &gt; &amp;x, std::vector&lt; T &gt; &amp;u, std::vector&lt; T &gt; &amp;du, std::vector&lt; T &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fad_process_fill</name>
      <anchorfile>fe__jac__fill__funcs_8hpp.html</anchorfile>
      <anchor>a41e78d04dea376358604df06afd90841</anchor>
      <arglist>(const ElemData &amp;e, unsigned int neqn, const std::vector&lt; FadType &gt; &amp;f_fad, std::vector&lt; double &gt; &amp;f, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;jac)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fad_jac_fill</name>
      <anchorfile>fe__jac__fill__funcs_8hpp.html</anchorfile>
      <anchor>a743119404e0a86c34ecc496cb4c0c073</anchor>
      <arglist>(unsigned int num_nodes, unsigned int num_eqns, double mesh_spacing)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>analytic_jac_fill</name>
      <anchorfile>fe__jac__fill__funcs_8hpp.html</anchorfile>
      <anchor>aa7415605619b88d94d7a464477fdbf6e</anchor>
      <arglist>(unsigned int num_nodes, unsigned int num_eqns, double mesh_spacing)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>residual_fill</name>
      <anchorfile>fe__jac__fill__funcs_8hpp.html</anchorfile>
      <anchor>a45dc5d5f773626c772ffac12c6c3c4da</anchor>
      <arglist>(unsigned int num_nodes, unsigned int num_eqns, double mesh_spacing)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fenl_functors.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/fenl_assembly/</path>
    <filename>fenl__functors_8hpp</filename>
    <includes id="BoxElemFixture_8hpp" name="BoxElemFixture.hpp" local="no" imported="no">BoxElemFixture.hpp</includes>
    <includes id="HexElement_8hpp" name="HexElement.hpp" local="no" imported="no">HexElement.hpp</includes>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <class kind="struct">Kokkos::Example::FENL::CrsMatrix</class>
    <class kind="class">Kokkos::Example::FENL::NodeNodeGraph</class>
    <class kind="struct">Kokkos::Example::FENL::NodeNodeGraph::TagFillNodeSet</class>
    <class kind="struct">Kokkos::Example::FENL::NodeNodeGraph::TagScanNodeCount</class>
    <class kind="struct">Kokkos::Example::FENL::NodeNodeGraph::TagFillGraphEntries</class>
    <class kind="struct">Kokkos::Example::FENL::NodeNodeGraph::TagSortGraphEntries</class>
    <class kind="struct">Kokkos::Example::FENL::NodeNodeGraph::TagFillElementGraph</class>
    <class kind="struct">Kokkos::Example::FENL::NodeNodeGraph::Times</class>
    <class kind="class">Kokkos::Example::FENL::ElementComputationBase</class>
    <class kind="class">Kokkos::Example::FENL::ElementComputation</class>
    <class kind="class">Kokkos::Example::FENL::ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;,           CrsMatrix&lt; ScalarType, ExecutionSpace &gt;,           Analytic &gt;</class>
    <class kind="class">Kokkos::Example::FENL::ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;,           CrsMatrix&lt; ScalarType, ExecutionSpace &gt;,           FadElement &gt;</class>
    <class kind="class">Kokkos::Example::FENL::ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;,           CrsMatrix&lt; ScalarType, ExecutionSpace &gt;,           FadElementOptimized &gt;</class>
    <class kind="class">Kokkos::Example::FENL::ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;,           CrsMatrix&lt; ScalarType, ExecutionSpace &gt;,           FadQuadPoint &gt;</class>
    <namespace>Kokkos</namespace>
    <namespace>Kokkos::Example</namespace>
    <namespace>Kokkos::Example::FENL</namespace>
    <member kind="enumeration">
      <type></type>
      <name>AssemblyMethod</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Analytic</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da221e1e05ef7c41d03cf6f4ff060b73dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadElement</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2dad03f8f65f438bf5898dec7c734088d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadElementOptimized</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da72713d5774d2191696c3397072a61942</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadQuadPoint</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da65bc0a58dc4b3da612ac61c2cd1fc6c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Analytic</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da221e1e05ef7c41d03cf6f4ff060b73dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadElement</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2dad03f8f65f438bf5898dec7c734088d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadElementOptimized</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da72713d5774d2191696c3397072a61942</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadQuadPoint</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da65bc0a58dc4b3da612ac61c2cd1fc6c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>view/fenl_functors.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/fenl_assembly_view/</path>
    <filename>view_2fenl__functors_8hpp</filename>
    <includes id="view_2BoxElemFixture_8hpp" name="view/BoxElemFixture.hpp" local="no" imported="no">BoxElemFixture.hpp</includes>
    <includes id="view_2HexElement_8hpp" name="view/HexElement.hpp" local="no" imported="no">HexElement.hpp</includes>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <class kind="struct">Kokkos::Example::FENL::CrsMatrix</class>
    <class kind="class">Kokkos::Example::FENL::NodeNodeGraph</class>
    <class kind="struct">Kokkos::Example::FENL::NodeNodeGraph::TagFillNodeSet</class>
    <class kind="struct">Kokkos::Example::FENL::NodeNodeGraph::TagScanNodeCount</class>
    <class kind="struct">Kokkos::Example::FENL::NodeNodeGraph::TagFillGraphEntries</class>
    <class kind="struct">Kokkos::Example::FENL::NodeNodeGraph::TagSortGraphEntries</class>
    <class kind="struct">Kokkos::Example::FENL::NodeNodeGraph::TagFillElementGraph</class>
    <class kind="struct">Kokkos::Example::FENL::NodeNodeGraph::Times</class>
    <class kind="class">Kokkos::Example::FENL::ElementComputationBase</class>
    <class kind="class">Kokkos::Example::FENL::ElementComputation</class>
    <class kind="class">Kokkos::Example::FENL::ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;,           CrsMatrix&lt; ScalarType, ExecutionSpace &gt;,           Analytic &gt;</class>
    <class kind="class">Kokkos::Example::FENL::ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;,           CrsMatrix&lt; ScalarType, ExecutionSpace &gt;,           FadElement &gt;</class>
    <class kind="class">Kokkos::Example::FENL::ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;,           CrsMatrix&lt; ScalarType, ExecutionSpace &gt;,           FadElementOptimized &gt;</class>
    <class kind="class">Kokkos::Example::FENL::ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;,           CrsMatrix&lt; ScalarType, ExecutionSpace &gt;,           FadQuadPoint &gt;</class>
    <namespace>Kokkos</namespace>
    <namespace>Kokkos::Example</namespace>
    <namespace>Kokkos::Example::FENL</namespace>
    <member kind="enumeration">
      <type></type>
      <name>AssemblyMethod</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Analytic</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da221e1e05ef7c41d03cf6f4ff060b73dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadElement</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2dad03f8f65f438bf5898dec7c734088d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadElementOptimized</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da72713d5774d2191696c3397072a61942</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadQuadPoint</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da65bc0a58dc4b3da612ac61c2cd1fc6c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Analytic</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da221e1e05ef7c41d03cf6f4ff060b73dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadElement</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2dad03f8f65f438bf5898dec7c734088d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadElementOptimized</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da72713d5774d2191696c3397072a61942</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadQuadPoint</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da65bc0a58dc4b3da612ac61c2cd1fc6c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hesopcheck.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>hesopcheck_8cpp</filename>
    <includes id="Sacado__DisableKokkosCuda_8hpp" name="Sacado_DisableKokkosCuda.hpp" local="yes" imported="no">Sacado_DisableKokkosCuda.hpp</includes>
    <includes id="Sacado__MathFunctions_8hpp" name="Sacado_MathFunctions.hpp" local="yes" imported="no">Sacado_MathFunctions.hpp</includes>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <includes id="Sacado__trad2_8hpp" name="Sacado_trad2.hpp" local="yes" imported="no">Sacado_trad2.hpp</includes>
    <includes id="Sacado__rad2_8hpp" name="Sacado_rad2.hpp" local="yes" imported="no">Sacado_rad2.hpp</includes>
    <includes id="Sacado__Fad__SFad_8hpp" name="Sacado_Fad_SFad.hpp" local="yes" imported="no">Sacado_Fad_SFad.hpp</includes>
    <class kind="struct">Func4</class>
    <class kind="struct">Func42</class>
    <member kind="define">
      <type>#define</type>
      <name>UF</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a468db8ca8233b2533274c137fce31b49</anchor>
      <arglist>(T, f, fn)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UF4</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a238b55d5747e11ab50cb5e4a38826b23</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UF</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a468db8ca8233b2533274c137fce31b49</anchor>
      <arglist>(T, f, fn)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U4f</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>ad07db71c59af210675cc0e5cd9acdb4c</anchor>
      <arglist>(f, d)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Dcl</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>adcec3bbcfbac1fdfdccd26bdd02fe515</anchor>
      <arglist>(T, T1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>In</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a4f65865a523e44e3770765fff80554b4</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Rad2d::ADvar</type>
      <name>ADVar</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a895ba1495fdee51833d2e31429ec2aef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Rad2::ADvar&lt; double &gt;</type>
      <name>DADVar</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a5ce873e36a929ac412d3ee012cece83f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Rad::ADvar&lt; double &gt;</type>
      <name>DReal</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a33b5972e38fad670f22bd57bb12d0167</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SFad&lt; DReal, 1 &gt;</type>
      <name>FDReal</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a945b3c0fa0a3cdb720d986470f440b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SFad&lt; double, 1 &gt;</type>
      <name>FReal</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>af3a7693f3a6bf48b5b587b1dcfe1c3d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Rad::ADvar&lt; FReal &gt;</type>
      <name>AFReal</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a1c31f5da0ebb63c69eb28506f617991b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar(*</type>
      <name>ADVar_uf</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a2bc53206ed93f5f0a9876627496b4a6a</anchor>
      <arglist>)(ADVar &amp;)</arglist>
    </member>
    <member kind="typedef">
      <type>DADVar(*</type>
      <name>DADVar_uf</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a3284744bfbd9c9dc5e68e744d29d2262</anchor>
      <arglist>)(DADVar &amp;)</arglist>
    </member>
    <member kind="typedef">
      <type>FDReal(*</type>
      <name>FDReal_uf</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>ab378905cde07c013f37b7413bbbcd871</anchor>
      <arglist>)(FDReal &amp;)</arglist>
    </member>
    <member kind="typedef">
      <type>AFReal(*</type>
      <name>AFReal_uf</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a333b10ff0e9469d0ba9f32705ef3fe25</anchor>
      <arglist>)(AFReal &amp;)</arglist>
    </member>
    <member kind="typedef">
      <type>ADVar(*</type>
      <name>ADVar_uf2</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>aa8f3eec5f97f18335ec5a928cfb816fe</anchor>
      <arglist>)(ADVar &amp;, ADVar &amp;)</arglist>
    </member>
    <member kind="typedef">
      <type>DADVar(*</type>
      <name>DADVar_uf2</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>abc22a1236749c635544b6555c3f090b5</anchor>
      <arglist>)(DADVar &amp;, DADVar &amp;)</arglist>
    </member>
    <member kind="typedef">
      <type>FDReal(*</type>
      <name>FDReal_uf2</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>ae2a322bbf6784df1ef6a10afda63557a</anchor>
      <arglist>)(FDReal &amp;, FDReal &amp;)</arglist>
    </member>
    <member kind="typedef">
      <type>AFReal(*</type>
      <name>AFReal_uf2</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a5bfcdff31e3bc305aaf550567ed3c99c</anchor>
      <arglist>)(AFReal &amp;, AFReal &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>differ</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a3440353f14e114fc228c2064ee908fe4</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>usage</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>ac8089aea752948fba171c6cd11896df7</anchor>
      <arglist>(int rc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static double</type>
      <name>dom_acosh</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a59aa0f69dd75da608a9b68ef6f8888e2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static double</type>
      <name>dom_all</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a6eb62e58498a1b87e15d644a1be3b9ff</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static double</type>
      <name>dom_invtrig</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>afb5ee310c41f80384b802631594b8c9c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static double</type>
      <name>dom_log</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a245eecd02855a2f7e9ce81c7f21ebafe</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Func4</type>
      <name>UT</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a9f1ca4d2bcf01444cf4bb76f8fa79b1f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Func42</type>
      <name>UT2</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>a2e76c23ed78e58c8d7f4f2b1af45dc95</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static char *</type>
      <name>progname</name>
      <anchorfile>hesopcheck_8cpp.html</anchorfile>
      <anchor>ab9e1449fd00c98428516f0b41eddcb10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HexElement.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/fenl_assembly/</path>
    <filename>HexElement_8hpp</filename>
    <class kind="class">Kokkos::Example::HexElement_TensorData</class>
    <class kind="class">Kokkos::Example::HexElement_TensorEval</class>
    <class kind="class">Kokkos::Example::HexElement_TensorData&lt; 8 &gt;</class>
    <class kind="class">Kokkos::Example::HexElement_TensorData&lt; 27 &gt;</class>
    <class kind="class">Kokkos::Example::HexElement_Data</class>
    <namespace>Kokkos</namespace>
    <namespace>Kokkos::Example</namespace>
  </compound>
  <compound kind="file">
    <name>view/HexElement.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/fenl_assembly_view/</path>
    <filename>view_2HexElement_8hpp</filename>
    <class kind="class">Kokkos::Example::HexElement_TensorData</class>
    <class kind="class">Kokkos::Example::HexElement_TensorEval</class>
    <class kind="class">Kokkos::Example::HexElement_TensorData&lt; 8 &gt;</class>
    <class kind="class">Kokkos::Example::HexElement_TensorData&lt; 27 &gt;</class>
    <class kind="class">Kokkos::Example::HexElement_Data</class>
    <namespace>Kokkos</namespace>
    <namespace>Kokkos::Example</namespace>
  </compound>
  <compound kind="file">
    <name>index.doc</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/browser/doc/</path>
    <filename>index_8doc</filename>
  </compound>
  <compound kind="file">
    <name>Kokkos_AnalyzeSacadoShape.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Kokkos__AnalyzeSacadoShape_8hpp</filename>
    <class kind="struct">Kokkos::Impl::AnalyzeSacadoShape</class>
    <class kind="struct">Kokkos::Impl::AnalyzeSacadoShape&lt; void, Layout &gt;</class>
    <class kind="struct">Kokkos::Impl::AnalyzeSacadoShape&lt; const T, Layout &gt;</class>
    <class kind="struct">Kokkos::Impl::AnalyzeSacadoShape&lt; T *, Layout &gt;</class>
    <class kind="struct">Kokkos::Impl::AnalyzeSacadoShape&lt; T[], Layout &gt;</class>
    <class kind="struct">Kokkos::Impl::AnalyzeSacadoShape&lt; const T[], Layout &gt;</class>
    <class kind="struct">Kokkos::Impl::AnalyzeSacadoShape&lt; T[N], Layout &gt;</class>
    <class kind="struct">Kokkos::Impl::AnalyzeSacadoShape&lt; const T[N], Layout &gt;</class>
    <namespace>Kokkos</namespace>
    <namespace>Kokkos::Impl</namespace>
  </compound>
  <compound kind="file">
    <name>Kokkos_DynRankView_Fad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Kokkos__DynRankView__Fad_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Kokkos_LayoutContiguous.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Kokkos__LayoutContiguous_8hpp</filename>
    <class kind="struct">Kokkos::LayoutContiguous</class>
    <class kind="struct">std::is_same&lt; Kokkos::LayoutContiguous&lt; Layout &gt;, Layout &gt;</class>
    <class kind="struct">std::is_same&lt; Layout, Kokkos::LayoutContiguous&lt; Layout &gt; &gt;</class>
    <namespace>Kokkos</namespace>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>Kokkos_View_Fad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Kokkos__View__Fad_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Kokkos_ViewFactory.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Kokkos__ViewFactory_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>KokkosExp_View_Fad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>KokkosExp__View__Fad_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>LogicalSparseUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>LogicalSparseUnitTests_8cpp</filename>
    <includes id="LogicalSparseUnitTests_8hpp" name="LogicalSparseUnitTests.hpp" local="yes" imported="no">LogicalSparseUnitTests.hpp</includes>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>LogicalSparseUnitTests_8cpp.html</anchorfile>
      <anchor>a55b2df85b2c430347ddf254cec389cb9</anchor>
      <arglist>(LogicalSparseOpsUnitTest)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LogicalSparseUnitTests.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>LogicalSparseUnitTests_8hpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__Random_8hpp" name="Sacado_Random.hpp" local="yes" imported="no">Sacado_Random.hpp</includes>
    <class kind="class">LogicalSparseOpsUnitTest</class>
    <member kind="define">
      <type>#define</type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>LogicalSparseUnitTests_8hpp.html</anchorfile>
      <anchor>a40d53b2930b256c6f9975f3b1152ccf1</anchor>
      <arglist>(TESTNAME, OP)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RELOP_TEST</name>
      <anchorfile>LogicalSparseUnitTests_8hpp.html</anchorfile>
      <anchor>ad90148e7924ea4f6e6086f7fdbc4579e</anchor>
      <arglist>(TESTNAME, OP)      </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BINARY_FUNC_TEST</name>
      <anchorfile>LogicalSparseUnitTests_8hpp.html</anchorfile>
      <anchor>a7db161e3d44d7b4a466c36643deef86c</anchor>
      <arglist>(TESTNAME, FUNC)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNARY_OP_TEST</name>
      <anchorfile>LogicalSparseUnitTests_8hpp.html</anchorfile>
      <anchor>a7ad2a80d4da48694fa40adb079ffd9b7</anchor>
      <arglist>(TESTNAME, OP)    </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>LogicalSparseUnitTests_8hpp.html</anchorfile>
      <anchor>ac43f8ba38bfc51d3d5be0b9a0f2ca8b4</anchor>
      <arglist>(TESTNAME, FUNC)    </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>LogicalSparseUnitTests_8hpp.html</anchorfile>
      <anchor>a471678cbf23623326fdae0f6b04f792a</anchor>
      <arglist>(TESTNAME, OP)    </arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::DFad&lt; double &gt;</type>
      <name>DFadType</name>
      <anchorfile>LogicalSparseUnitTests_8hpp.html</anchorfile>
      <anchor>a7e0893207b87dad05c66a34baac8ed2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::LFad::LogicalSparse&lt; double, bool &gt;</type>
      <name>LSType</name>
      <anchorfile>LogicalSparseUnitTests_8hpp.html</anchorfile>
      <anchor>a6e3fc0c30606e3ea0fc801f6593ad420</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MPLTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>MPLTests_8cpp</filename>
    <includes id="Sacado__mpl__vector_8hpp" name="Sacado_mpl_vector.hpp" local="yes" imported="no">Sacado_mpl_vector.hpp</includes>
    <includes id="Sacado__mpl__find_8hpp" name="Sacado_mpl_find.hpp" local="yes" imported="no">Sacado_mpl_find.hpp</includes>
    <includes id="Sacado__mpl__size_8hpp" name="Sacado_mpl_size.hpp" local="yes" imported="no">Sacado_mpl_size.hpp</includes>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST</name>
      <anchorfile>MPLTests_8cpp.html</anchorfile>
      <anchor>a84d7bec7448aa67854020c1d5c3d1f8d</anchor>
      <arglist>(MPL, Vector)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>MPLTests_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NestedFadUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>NestedFadUnitTests_8cpp</filename>
    <includes id="NestedFadUnitTests_8hpp" name="NestedFadUnitTests.hpp" local="yes" imported="no">NestedFadUnitTests.hpp</includes>
    <member kind="typedef">
      <type>FadFadOpsUnitTest&lt; Sacado::Fad::DFad&lt; Sacado::Fad::DFad&lt; double &gt; &gt;, double &gt;</type>
      <name>DFadDFadDoubleTest</name>
      <anchorfile>NestedFadUnitTests_8cpp.html</anchorfile>
      <anchor>aab567cfa50c27d6da1888f5322ae355c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FadFadOpsUnitTest&lt; Sacado::Fad::SFad&lt; Sacado::Fad::SFad&lt; double, 3 &gt;, 5 &gt;, double &gt;</type>
      <name>SFadSFadDoubleTest</name>
      <anchorfile>NestedFadUnitTests_8cpp.html</anchorfile>
      <anchor>abd94e203ccc4a8654eaae30ee863f02e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FadFadOpsUnitTest&lt; Sacado::Fad::SLFad&lt; Sacado::Fad::SLFad&lt; double, 10 &gt;, 10 &gt;, double &gt;</type>
      <name>SLFadSLFadDoubleTest</name>
      <anchorfile>NestedFadUnitTests_8cpp.html</anchorfile>
      <anchor>ad8ae3cdaddc342b68795e28d76f41529</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>NestedFadUnitTests_8cpp.html</anchorfile>
      <anchor>a59ea86e5977b22ab3cf9d7af9752318c</anchor>
      <arglist>(DFadDFadDoubleTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>NestedFadUnitTests_8cpp.html</anchorfile>
      <anchor>a17fd3d67b4084757c41e6e832b223326</anchor>
      <arglist>(SFadSFadDoubleTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>NestedFadUnitTests_8cpp.html</anchorfile>
      <anchor>a2d419e68bd39477b067c449282dd478b</anchor>
      <arglist>(SLFadSLFadDoubleTest)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NestedFadUnitTests.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>NestedFadUnitTests_8hpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__Random_8hpp" name="Sacado_Random.hpp" local="yes" imported="no">Sacado_Random.hpp</includes>
    <class kind="class">FadFadOpsUnitTest</class>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_VALUES</name>
      <anchorfile>NestedFadUnitTests_8hpp.html</anchorfile>
      <anchor>a80c88e5aa4caaef9e2d75ec3a050b80f</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_FADS</name>
      <anchorfile>NestedFadUnitTests_8hpp.html</anchorfile>
      <anchor>a66fe2dd6d8d45301293471eab0756be9</anchor>
      <arglist>(a, b)                                                        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_NESTED_FADS</name>
      <anchorfile>NestedFadUnitTests_8hpp.html</anchorfile>
      <anchor>a39e6a10c1c79d71f95738c8116e1840e</anchor>
      <arglist>(a, b)                                          </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>NestedFadUnitTests_8hpp.html</anchorfile>
      <anchor>a40d53b2930b256c6f9975f3b1152ccf1</anchor>
      <arglist>(TESTNAME, OP)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RELOP_TEST</name>
      <anchorfile>NestedFadUnitTests_8hpp.html</anchorfile>
      <anchor>ad90148e7924ea4f6e6086f7fdbc4579e</anchor>
      <arglist>(TESTNAME, OP)      </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BINARY_FUNC_TEST</name>
      <anchorfile>NestedFadUnitTests_8hpp.html</anchorfile>
      <anchor>a7db161e3d44d7b4a466c36643deef86c</anchor>
      <arglist>(TESTNAME, FUNC)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNARY_OP_TEST</name>
      <anchorfile>NestedFadUnitTests_8hpp.html</anchorfile>
      <anchor>a52643707ec01ace4e37559133874bc60</anchor>
      <arglist>(TESTNAME, OP)                </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>NestedFadUnitTests_8hpp.html</anchorfile>
      <anchor>a92223928a31c9c69d4ad88b8c71653ba</anchor>
      <arglist>(TESTNAME, FUNC)        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>NestedFadUnitTests_8hpp.html</anchorfile>
      <anchor>a471678cbf23623326fdae0f6b04f792a</anchor>
      <arglist>(TESTNAME, OP)    </arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PromoteTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>PromoteTests_8cpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__Fad__SimpleFad_8hpp" name="Sacado_Fad_SimpleFad.hpp" local="yes" imported="no">Sacado_Fad_SimpleFad.hpp</includes>
    <includes id="Sacado__Tay__CacheTaylor_8hpp" name="Sacado_Tay_CacheTaylor.hpp" local="yes" imported="no">Sacado_Tay_CacheTaylor.hpp</includes>
    <includes id="Sacado__mpl__apply_8hpp" name="Sacado_mpl_apply.hpp" local="yes" imported="no">Sacado_mpl_apply.hpp</includes>
    <member kind="typedef">
      <type>Sacado::Fad::DFad&lt; double &gt;</type>
      <name>Fad_DFadType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a415685edbd608fa5f157606f7e88a9ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SLFad&lt; double, 2 *global_fad_size &gt;</type>
      <name>Fad_SLFadType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a0c4121f438d0d3e89001ce66fcadd3fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SFad&lt; double, global_fad_size &gt;</type>
      <name>Fad_SFadType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a614ec81916fd1a613e233add5d617496</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::DMFad&lt; double &gt;</type>
      <name>Fad_DMFadType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a9bf43365a71469c253170c488cf35143</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::DVFad&lt; double &gt;</type>
      <name>Fad_DVFadType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a54e7576dafee6b4fae94141262c59eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::DFad&lt; double &gt;</type>
      <name>ELRFad_DFadType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a2625c727ffad9272419a65c82ad14252</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::SLFad&lt; double, 2 *global_fad_size &gt;</type>
      <name>ELRFad_SLFadType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a7c6883be33b13fc5369a42592c4f692f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRFad::SFad&lt; double, global_fad_size &gt;</type>
      <name>ELRFad_SFadType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a48e7bcc54ea940f8e6b74ed916c2b40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::DFad&lt; double &gt;</type>
      <name>CacheFad_DFadType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a3942d53d0c08d0f474b51f444d9c0785</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::SLFad&lt; double, 2 *global_fad_size &gt;</type>
      <name>CacheFad_SLFadType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>ac2a5103d8e649d6279521f4f0d378cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::CacheFad::SFad&lt; double, global_fad_size &gt;</type>
      <name>CacheFad_SFadType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>ac0f997949cb9e2fd9c84c82214a091e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::DFad&lt; double &gt;</type>
      <name>ELRCacheFad_DFadType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a6d88e5885c36b30355eb4abbd625d598</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::SLFad&lt; double, 2 *global_fad_size &gt;</type>
      <name>ELRCacheFad_SLFadType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>af8b86eb7d039620c11081b0bac63c025</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::SFad&lt; double, global_fad_size &gt;</type>
      <name>ELRCacheFad_SFadType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>abcd755d71779c30fc26d629454e86112</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::ELRCacheFad::ViewFad&lt; double, global_fad_size, 1, ELRCacheFad_DFadType &gt;</type>
      <name>ELRCacheFad_VFadType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a097042deac19241f0749cdebaac90e98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SimpleFad&lt; double &gt;</type>
      <name>SimpleFadType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a0e45b225d0b5c213c8321aa8b72a00af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::LFad::LogicalSparse&lt; double, bool &gt;</type>
      <name>LFadType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a90496f8364599f300b102df602161665</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::FlopCounterPack::ScalarFlopCounter&lt; double &gt;</type>
      <name>SFCType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>aad361bb5021d3ce891a183cc6aea0299</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Tay::Taylor&lt; double &gt;</type>
      <name>TaylorType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a05d827db8a34f99b9fcf1a72bbe07c47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Tay::CacheTaylor&lt; double &gt;</type>
      <name>CacheTaylorType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a4a3d065caa71b62d9aa2c18542344b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Rad::ADvar&lt; double &gt;</type>
      <name>RadType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>af269f09b6d8fe185d4be19ccc2f04e97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Rad2::ADvar&lt; double &gt;</type>
      <name>Rad2Type</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a7cd45d68c1235c7a3545f7747f4657e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::RadVec::ADvar&lt; double &gt;</type>
      <name>RadVecType</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a55d20233b121cd729f274b322453f3cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testADPromote</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a15666be1876b6219e498a59d180330db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testViewPromote</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a4a39f1154601eb29cd002ceaf9377cf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testFadPromote</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a42dd1e5814432330dacd5f6b98ad949a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testPromote</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a5e6391fe33ebfc5981f05239adb6ce39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_1_DECL</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>ae95d0782e30e29a5a71d77b6ce1f53d8</anchor>
      <arglist>(Promote, Fad, FAD)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEUCHOS_UNIT_TEST_TEMPLATE_1_DECL</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a705ebb2c7f44c0832de05afb68120ec0</anchor>
      <arglist>(Promote, Other, AD)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>global_fad_size</name>
      <anchorfile>PromoteTests_8cpp.html</anchorfile>
      <anchor>aba06c6d63d86b58f1aef274a9f576813</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RAD_Const_Warn.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>RAD__Const__Warn_8c</filename>
    <class kind="struct">ADvari_head</class>
    <member kind="typedef">
      <type>struct ADvari_head</type>
      <name>ADvari_head</name>
      <anchorfile>RAD__Const__Warn_8c.html</anchorfile>
      <anchor>a03a7d569bc3d37dab5e39da89e010766</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RAD_Const_Warn</name>
      <anchorfile>RAD__Const__Warn_8c.html</anchorfile>
      <anchor>acced691d4fa120762dc81a8587e8b765</anchor>
      <arglist>(void *v)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>RAD_Const_Warn_warned</name>
      <anchorfile>RAD__Const__Warn_8c.html</anchorfile>
      <anchor>a27285e50ba5fabbefaf8201125234fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>RAD_Const_Warn_warnlim</name>
      <anchorfile>RAD__Const__Warn_8c.html</anchorfile>
      <anchor>a5b3f9775bdfdadebbbbf086abd504826</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rad_fe_adj_fill.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/</path>
    <filename>rad__fe__adj__fill_8cpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__tradvec_8hpp" name="Sacado_tradvec.hpp" local="yes" imported="no">Sacado_tradvec.hpp</includes>
    <class kind="struct">ElemData</class>
    <member kind="typedef">
      <type>Sacado::Rad::ADvar&lt; double &gt;</type>
      <name>RadType</name>
      <anchorfile>rad__fe__adj__fill_8cpp.html</anchorfile>
      <anchor>af269f09b6d8fe185d4be19ccc2f04e97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::RadVec::ADvar&lt; double &gt;</type>
      <name>VRadType</name>
      <anchorfile>rad__fe__adj__fill_8cpp.html</anchorfile>
      <anchor>a808e4a6cc3d4e59e6792dc8f264c0286</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fad_init_fill</name>
      <anchorfile>rad__fe__adj__fill_8cpp.html</anchorfile>
      <anchor>aa7784c999469f2b116344129ed2ad7a8</anchor>
      <arglist>(const ElemData &amp;e, unsigned int neqn, const std::vector&lt; double &gt; &amp;x, const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;w, std::vector&lt; FadType &gt; &amp;x_fad, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;w_local)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rad_init_fill</name>
      <anchorfile>rad__fe__adj__fill_8cpp.html</anchorfile>
      <anchor>a3ad2a47a570b219508ec5a5658ddcdf4</anchor>
      <arglist>(const ElemData &amp;e, unsigned int neqn, const std::vector&lt; double &gt; &amp;x, const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;w, std::vector&lt; RadType &gt; &amp;x_rad, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;w_local)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vrad_init_fill</name>
      <anchorfile>rad__fe__adj__fill_8cpp.html</anchorfile>
      <anchor>abda5b3818f55a7fb0f92293aca9f6e2c</anchor>
      <arglist>(const ElemData &amp;e, unsigned int neqn, const std::vector&lt; double &gt; &amp;x, const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;w, std::vector&lt; VRadType &gt; &amp;x_rad, double **w_local)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analytic_init_fill</name>
      <anchorfile>rad__fe__adj__fill_8cpp.html</anchorfile>
      <anchor>abf7e43892e0a62e614b8e47ee1c8c639</anchor>
      <arglist>(const ElemData &amp;e, unsigned int neqn, const std::vector&lt; double &gt; &amp;x, const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;w, std::vector&lt; double &gt; &amp;x_local, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;w_local)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>template_element_fill</name>
      <anchorfile>rad__fe__adj__fill_8cpp.html</anchorfile>
      <anchor>ad6b0f925915c9e07de3c243455894364</anchor>
      <arglist>(const ElemData &amp;e, unsigned int neqn, const std::vector&lt; T &gt; &amp;x, std::vector&lt; T &gt; &amp;u, std::vector&lt; T &gt; &amp;du, std::vector&lt; T &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analytic_element_fill</name>
      <anchorfile>rad__fe__adj__fill_8cpp.html</anchorfile>
      <anchor>a2977a25367a6fae64db0f9c2123512c1</anchor>
      <arglist>(const ElemData &amp;e, unsigned int neqn, const std::vector&lt; double &gt; &amp;x, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;w, std::vector&lt; double &gt; &amp;u, std::vector&lt; double &gt; &amp;du, std::vector&lt; double &gt; &amp;f, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;adj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fad_process_fill</name>
      <anchorfile>rad__fe__adj__fill_8cpp.html</anchorfile>
      <anchor>a50cf24fe0da82fe01532d4413f0626fd</anchor>
      <arglist>(const ElemData &amp;e, unsigned int neqn, const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;w_local, const std::vector&lt; FadType &gt; &amp;f_fad, std::vector&lt; double &gt; &amp;f, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;adj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rad_process_fill</name>
      <anchorfile>rad__fe__adj__fill_8cpp.html</anchorfile>
      <anchor>adb748110361e99f75c0bce1ed067615b</anchor>
      <arglist>(const ElemData &amp;e, unsigned int neqn, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;w_local, std::vector&lt; RadType &gt; &amp;x_rad, std::vector&lt; RadType &gt; &amp;f_rad, std::vector&lt; RadType * &gt; &amp;ff_rad, std::vector&lt; double &gt; &amp;f, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;adj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vrad_process_fill</name>
      <anchorfile>rad__fe__adj__fill_8cpp.html</anchorfile>
      <anchor>adda10c1dd28ca5eb944a82d0243cd5ef</anchor>
      <arglist>(const ElemData &amp;e, unsigned int neqn, unsigned int ncol, std::vector&lt; std::size_t &gt; &amp;vn, double **w_local, std::vector&lt; VRadType &gt; &amp;x_rad, std::vector&lt; VRadType &gt; &amp;f_rad, VRadType ***vf_rad, std::vector&lt; double &gt; &amp;f, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;adj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analytic_process_fill</name>
      <anchorfile>rad__fe__adj__fill_8cpp.html</anchorfile>
      <anchor>af45de6be27c8255b421dfe77dee3aad8</anchor>
      <arglist>(const ElemData &amp;e, unsigned int neqn, const std::vector&lt; double &gt; &amp;f_local, const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;adj_local, std::vector&lt; double &gt; &amp;f, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;adj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>residual_process_fill</name>
      <anchorfile>rad__fe__adj__fill_8cpp.html</anchorfile>
      <anchor>aefe553c1c13e3607c1796d5eb2951e55</anchor>
      <arglist>(const ElemData &amp;e, unsigned int neqn, const std::vector&lt; double &gt; &amp;f_local, std::vector&lt; double &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fad_adj_fill</name>
      <anchorfile>rad__fe__adj__fill_8cpp.html</anchorfile>
      <anchor>a652bc7056690ae59908b99765d7d900f</anchor>
      <arglist>(unsigned int num_nodes, unsigned int num_eqns, unsigned int num_cols, double mesh_spacing)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rad_adj_fill</name>
      <anchorfile>rad__fe__adj__fill_8cpp.html</anchorfile>
      <anchor>a95f42170b4d7544f690e9d2b6a6b657e</anchor>
      <arglist>(unsigned int num_nodes, unsigned int num_eqns, unsigned int num_cols, double mesh_spacing)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>vrad_adj_fill</name>
      <anchorfile>rad__fe__adj__fill_8cpp.html</anchorfile>
      <anchor>a9c738ecd59f3e3c2759d1a6c8fa3efe6</anchor>
      <arglist>(unsigned int num_nodes, unsigned int num_eqns, unsigned int num_cols, double mesh_spacing)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>analytic_adj_fill</name>
      <anchorfile>rad__fe__adj__fill_8cpp.html</anchorfile>
      <anchor>a96874daafdcf282a4e6daaa1bb3efea1</anchor>
      <arglist>(unsigned int num_nodes, unsigned int num_eqns, unsigned int num_cols, double mesh_spacing)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>residual_fill</name>
      <anchorfile>rad__fe__adj__fill_8cpp.html</anchorfile>
      <anchor>a2fba4a3815228eca6cccbbeaaf6d48ae</anchor>
      <arglist>(unsigned int num_nodes, unsigned int num_eqns, unsigned int num_cols, double mesh_spacing)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>rad__fe__adj__fill_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RealCacheFadUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>RealCacheFadUnitTests_8cpp</filename>
    <includes id="FadUnitTests2_8hpp" name="FadUnitTests2.hpp" local="yes" imported="no">FadUnitTests2.hpp</includes>
    <includes id="Sacado__CacheFad__DFad_8hpp" name="Sacado_CacheFad_DFad.hpp" local="yes" imported="no">Sacado_CacheFad_DFad.hpp</includes>
    <includes id="Sacado__CacheFad__SFad_8hpp" name="Sacado_CacheFad_SFad.hpp" local="yes" imported="no">Sacado_CacheFad_SFad.hpp</includes>
    <includes id="Sacado__CacheFad__SLFad_8hpp" name="Sacado_CacheFad_SLFad.hpp" local="yes" imported="no">Sacado_CacheFad_SLFad.hpp</includes>
    <member kind="typedef">
      <type>RealFadOpsUnitTest2&lt; Sacado::CacheFad::DFad&lt; double &gt;, double &gt;</type>
      <name>DFadDoubleTest2</name>
      <anchorfile>RealCacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>a8e24fc016b12cec698db787d25ac33db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealFadOpsUnitTest2&lt; Sacado::CacheFad::SFad&lt; double, 5 &gt;, double &gt;</type>
      <name>SFadDoubleTest2</name>
      <anchorfile>RealCacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>a646a089d8f60eb04d93d157ae4fab6ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealFadOpsUnitTest2&lt; Sacado::CacheFad::SLFad&lt; double, 10 &gt;, double &gt;</type>
      <name>SLFadDoubleTest2</name>
      <anchorfile>RealCacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>a3769391dc6abe28406aff676282fbf84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>RealCacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>a78f17a4fa5b188a166c368e1b0b14218</anchor>
      <arglist>(DFadDoubleTest2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>RealCacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>aa7b4aac599e2d3d8acdb694973a0f0e2</anchor>
      <arglist>(SFadDoubleTest2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>RealCacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>afc7ae3a929a9d2daf50ed7d98f9fc17d</anchor>
      <arglist>(SLFadDoubleTest2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RealDFadBLASUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>RealDFadBLASUnitTests_8cpp</filename>
    <includes id="FadBLASUnitTests_8hpp" name="FadBLASUnitTests.hpp" local="yes" imported="no">FadBLASUnitTests.hpp</includes>
    <member kind="typedef">
      <type>FadBLASUnitTests&lt; Sacado::Fad::DFad&lt; double &gt;, double &gt;</type>
      <name>DFadDoubleTest</name>
      <anchorfile>RealDFadBLASUnitTests_8cpp.html</anchorfile>
      <anchor>a39cafc9f6d551b5d115e1b67d18fd899</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>RealDFadBLASUnitTests_8cpp.html</anchorfile>
      <anchor>aea90ba433400cfce16ba9ebab8b7af3f</anchor>
      <arglist>(DFadDoubleTest)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RealDFadLAPACKUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>RealDFadLAPACKUnitTests_8cpp</filename>
    <includes id="FadLAPACKUnitTests_8hpp" name="FadLAPACKUnitTests.hpp" local="yes" imported="no">FadLAPACKUnitTests.hpp</includes>
    <member kind="typedef">
      <type>FadLAPACKUnitTests&lt; Sacado::Fad::DFad&lt; double &gt;, double &gt;</type>
      <name>DFadDoubleTest</name>
      <anchorfile>RealDFadLAPACKUnitTests_8cpp.html</anchorfile>
      <anchor>a4985d700f091b62eb70860759b76dcf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>RealDFadLAPACKUnitTests_8cpp.html</anchorfile>
      <anchor>aea90ba433400cfce16ba9ebab8b7af3f</anchor>
      <arglist>(DFadDoubleTest)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RealDVFadBLASUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>RealDVFadBLASUnitTests_8cpp</filename>
    <includes id="FadBLASUnitTests_8hpp" name="FadBLASUnitTests.hpp" local="yes" imported="no">FadBLASUnitTests.hpp</includes>
    <member kind="typedef">
      <type>FadBLASUnitTests&lt; Sacado::Fad::DVFad&lt; double &gt;, double &gt;</type>
      <name>DVFadDoubleTest</name>
      <anchorfile>RealDVFadBLASUnitTests_8cpp.html</anchorfile>
      <anchor>ae7b08108396648cf86c59daab54a7522</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>RealDVFadBLASUnitTests_8cpp.html</anchorfile>
      <anchor>af34fedc85cc309a7782d6717b8ad6554</anchor>
      <arglist>(DVFadDoubleTest)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RealELRCacheFadUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>RealELRCacheFadUnitTests_8cpp</filename>
    <includes id="FadUnitTests2_8hpp" name="FadUnitTests2.hpp" local="yes" imported="no">FadUnitTests2.hpp</includes>
    <member kind="typedef">
      <type>RealFadOpsUnitTest2&lt; Sacado::ELRCacheFad::DFad&lt; double &gt;, double &gt;</type>
      <name>DFadDoubleTest2</name>
      <anchorfile>RealELRCacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>a80bd4fa9797036498c0fe6d6533fc4bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealFadOpsUnitTest2&lt; Sacado::ELRCacheFad::SFad&lt; double, 5 &gt;, double &gt;</type>
      <name>SFadDoubleTest2</name>
      <anchorfile>RealELRCacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>a601391fc100af5447b3d7c994a93b5ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealFadOpsUnitTest2&lt; Sacado::ELRCacheFad::SLFad&lt; double, 10 &gt;, double &gt;</type>
      <name>SLFadDoubleTest2</name>
      <anchorfile>RealELRCacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>a4c29d1fcf258a515531f8e4819f0a24e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>RealELRCacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>a78f17a4fa5b188a166c368e1b0b14218</anchor>
      <arglist>(DFadDoubleTest2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>RealELRCacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>aa7b4aac599e2d3d8acdb694973a0f0e2</anchor>
      <arglist>(SFadDoubleTest2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>RealELRCacheFadUnitTests_8cpp.html</anchorfile>
      <anchor>afc7ae3a929a9d2daf50ed7d98f9fc17d</anchor>
      <arglist>(SLFadDoubleTest2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RealELRFadUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>RealELRFadUnitTests_8cpp</filename>
    <includes id="FadUnitTests2_8hpp" name="FadUnitTests2.hpp" local="yes" imported="no">FadUnitTests2.hpp</includes>
    <member kind="typedef">
      <type>RealFadOpsUnitTest2&lt; Sacado::ELRFad::DFad&lt; double &gt;, double &gt;</type>
      <name>DFadDoubleTest2</name>
      <anchorfile>RealELRFadUnitTests_8cpp.html</anchorfile>
      <anchor>a2b0c4b6a625e451fecad516e3f437936</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealFadOpsUnitTest2&lt; Sacado::ELRFad::SFad&lt; double, 5 &gt;, double &gt;</type>
      <name>SFadDoubleTest2</name>
      <anchorfile>RealELRFadUnitTests_8cpp.html</anchorfile>
      <anchor>ac12d1ce23be749d1a0385e72570755b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealFadOpsUnitTest2&lt; Sacado::ELRFad::SLFad&lt; double, 10 &gt;, double &gt;</type>
      <name>SLFadDoubleTest2</name>
      <anchorfile>RealELRFadUnitTests_8cpp.html</anchorfile>
      <anchor>a8c76df924e19d923236dd19466d1207e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>RealELRFadUnitTests_8cpp.html</anchorfile>
      <anchor>a78f17a4fa5b188a166c368e1b0b14218</anchor>
      <arglist>(DFadDoubleTest2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>RealELRFadUnitTests_8cpp.html</anchorfile>
      <anchor>aa7b4aac599e2d3d8acdb694973a0f0e2</anchor>
      <arglist>(SFadDoubleTest2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>RealELRFadUnitTests_8cpp.html</anchorfile>
      <anchor>afc7ae3a929a9d2daf50ed7d98f9fc17d</anchor>
      <arglist>(SLFadDoubleTest2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RealFadUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>RealFadUnitTests_8cpp</filename>
    <includes id="FadUnitTests2_8hpp" name="FadUnitTests2.hpp" local="yes" imported="no">FadUnitTests2.hpp</includes>
    <includes id="Sacado__Fad__SimpleFad_8hpp" name="Sacado_Fad_SimpleFad.hpp" local="yes" imported="no">Sacado_Fad_SimpleFad.hpp</includes>
    <member kind="typedef">
      <type>RealFadOpsUnitTest2&lt; Sacado::Fad::DFad&lt; double &gt;, double &gt;</type>
      <name>DFadDoubleTest2</name>
      <anchorfile>RealFadUnitTests_8cpp.html</anchorfile>
      <anchor>ab5646a2e56e5f1783090b3a9853290b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealFadOpsUnitTest2&lt; Sacado::Fad::SFad&lt; double, 5 &gt;, double &gt;</type>
      <name>SFadDoubleTest2</name>
      <anchorfile>RealFadUnitTests_8cpp.html</anchorfile>
      <anchor>a7fa18588e7a7fcdd4e2f1fbc9cb6fd83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealFadOpsUnitTest2&lt; Sacado::Fad::SLFad&lt; double, 10 &gt;, double &gt;</type>
      <name>SLFadDoubleTest2</name>
      <anchorfile>RealFadUnitTests_8cpp.html</anchorfile>
      <anchor>a49190d3311db0d3748a7ba2c03bfb608</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealFadOpsUnitTest2&lt; Sacado::Fad::SimpleFad&lt; double &gt;, double &gt;</type>
      <name>SimpleFadDoubleTest2</name>
      <anchorfile>RealFadUnitTests_8cpp.html</anchorfile>
      <anchor>a6e6a766d25c4ff99c504dff30b906790</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealFadOpsUnitTest2&lt; Sacado::Fad::DVFad&lt; double &gt;, double &gt;</type>
      <name>DVFadDoubleTest2</name>
      <anchorfile>RealFadUnitTests_8cpp.html</anchorfile>
      <anchor>a35d8b86445dd51f2a3878fc2c5968574</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>RealFadUnitTests_8cpp.html</anchorfile>
      <anchor>a78f17a4fa5b188a166c368e1b0b14218</anchor>
      <arglist>(DFadDoubleTest2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>RealFadUnitTests_8cpp.html</anchorfile>
      <anchor>aa7b4aac599e2d3d8acdb694973a0f0e2</anchor>
      <arglist>(SFadDoubleTest2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>RealFadUnitTests_8cpp.html</anchorfile>
      <anchor>afc7ae3a929a9d2daf50ed7d98f9fc17d</anchor>
      <arglist>(SLFadDoubleTest2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado_8hpp</filename>
    <includes id="Sacado__Version_8hpp" name="Sacado_Version.hpp" local="yes" imported="no">Sacado_Version.hpp</includes>
    <includes id="Sacado__MathFunctions_8hpp" name="Sacado_MathFunctions.hpp" local="yes" imported="no">Sacado_MathFunctions.hpp</includes>
    <includes id="Sacado__Fad__ExpressionTraits_8hpp" name="Sacado_Fad_ExpressionTraits.hpp" local="yes" imported="no">Sacado_Fad_ExpressionTraits.hpp</includes>
    <includes id="Sacado__Fad__DFadTraits_8hpp" name="Sacado_Fad_DFadTraits.hpp" local="yes" imported="no">Sacado_Fad_DFadTraits.hpp</includes>
    <includes id="Sacado__Fad__SFadTraits_8hpp" name="Sacado_Fad_SFadTraits.hpp" local="yes" imported="no">Sacado_Fad_SFadTraits.hpp</includes>
    <includes id="Sacado__Fad__SLFadTraits_8hpp" name="Sacado_Fad_SLFadTraits.hpp" local="yes" imported="no">Sacado_Fad_SLFadTraits.hpp</includes>
    <includes id="Sacado__Fad__DMFadTraits_8hpp" name="Sacado_Fad_DMFadTraits.hpp" local="yes" imported="no">Sacado_Fad_DMFadTraits.hpp</includes>
    <includes id="Sacado__Fad__DVFadTraits_8hpp" name="Sacado_Fad_DVFadTraits.hpp" local="yes" imported="no">Sacado_Fad_DVFadTraits.hpp</includes>
    <includes id="Sacado__ELRFad__ExpressionTraits_8hpp" name="Sacado_ELRFad_ExpressionTraits.hpp" local="yes" imported="no">Sacado_ELRFad_ExpressionTraits.hpp</includes>
    <includes id="Sacado__ELRFad__DFadTraits_8hpp" name="Sacado_ELRFad_DFadTraits.hpp" local="yes" imported="no">Sacado_ELRFad_DFadTraits.hpp</includes>
    <includes id="Sacado__ELRFad__SFadTraits_8hpp" name="Sacado_ELRFad_SFadTraits.hpp" local="yes" imported="no">Sacado_ELRFad_SFadTraits.hpp</includes>
    <includes id="Sacado__ELRFad__SLFadTraits_8hpp" name="Sacado_ELRFad_SLFadTraits.hpp" local="yes" imported="no">Sacado_ELRFad_SLFadTraits.hpp</includes>
    <includes id="Sacado__CacheFad__ExpressionTraits_8hpp" name="Sacado_CacheFad_ExpressionTraits.hpp" local="yes" imported="no">Sacado_CacheFad_ExpressionTraits.hpp</includes>
    <includes id="Sacado__CacheFad__DFadTraits_8hpp" name="Sacado_CacheFad_DFadTraits.hpp" local="yes" imported="no">Sacado_CacheFad_DFadTraits.hpp</includes>
    <includes id="Sacado__CacheFad__SFadTraits_8hpp" name="Sacado_CacheFad_SFadTraits.hpp" local="yes" imported="no">Sacado_CacheFad_SFadTraits.hpp</includes>
    <includes id="Sacado__CacheFad__SLFadTraits_8hpp" name="Sacado_CacheFad_SLFadTraits.hpp" local="yes" imported="no">Sacado_CacheFad_SLFadTraits.hpp</includes>
    <includes id="Sacado__ELRCacheFad__ExpressionTraits_8hpp" name="Sacado_ELRCacheFad_ExpressionTraits.hpp" local="yes" imported="no">Sacado_ELRCacheFad_ExpressionTraits.hpp</includes>
    <includes id="Sacado__ELRCacheFad__DFadTraits_8hpp" name="Sacado_ELRCacheFad_DFadTraits.hpp" local="yes" imported="no">Sacado_ELRCacheFad_DFadTraits.hpp</includes>
    <includes id="Sacado__ELRCacheFad__SFadTraits_8hpp" name="Sacado_ELRCacheFad_SFadTraits.hpp" local="yes" imported="no">Sacado_ELRCacheFad_SFadTraits.hpp</includes>
    <includes id="Sacado__ELRCacheFad__SLFadTraits_8hpp" name="Sacado_ELRCacheFad_SLFadTraits.hpp" local="yes" imported="no">Sacado_ELRCacheFad_SLFadTraits.hpp</includes>
    <includes id="Sacado__LFad__LogicalSparseTraits_8hpp" name="Sacado_LFad_LogicalSparseTraits.hpp" local="yes" imported="no">Sacado_LFad_LogicalSparseTraits.hpp</includes>
    <includes id="Sacado__ScalarFlopCounterTraits_8hpp" name="Sacado_ScalarFlopCounterTraits.hpp" local="yes" imported="no">Sacado_ScalarFlopCounterTraits.hpp</includes>
    <includes id="Sacado__Tay__TaylorTraits_8hpp" name="Sacado_Tay_TaylorTraits.hpp" local="yes" imported="no">Sacado_Tay_TaylorTraits.hpp</includes>
    <includes id="Sacado__trad__Traits_8hpp" name="Sacado_trad_Traits.hpp" local="yes" imported="no">Sacado_trad_Traits.hpp</includes>
    <includes id="Sacado__trad2__Traits_8hpp" name="Sacado_trad2_Traits.hpp" local="yes" imported="no">Sacado_trad2_Traits.hpp</includes>
    <includes id="Sacado__tradvec__Traits_8hpp" name="Sacado_tradvec_Traits.hpp" local="yes" imported="no">Sacado_tradvec_Traits.hpp</includes>
    <includes id="Sacado__Fad__DFad_8hpp" name="Sacado_Fad_DFad.hpp" local="yes" imported="no">Sacado_Fad_DFad.hpp</includes>
    <includes id="Sacado__Fad__SFad_8hpp" name="Sacado_Fad_SFad.hpp" local="yes" imported="no">Sacado_Fad_SFad.hpp</includes>
    <includes id="Sacado__Fad__SLFad_8hpp" name="Sacado_Fad_SLFad.hpp" local="yes" imported="no">Sacado_Fad_SLFad.hpp</includes>
    <includes id="Sacado__ELRFad__DFad_8hpp" name="Sacado_ELRFad_DFad.hpp" local="yes" imported="no">Sacado_ELRFad_DFad.hpp</includes>
    <includes id="Sacado__ELRFad__SFad_8hpp" name="Sacado_ELRFad_SFad.hpp" local="yes" imported="no">Sacado_ELRFad_SFad.hpp</includes>
    <includes id="Sacado__ELRFad__SLFad_8hpp" name="Sacado_ELRFad_SLFad.hpp" local="yes" imported="no">Sacado_ELRFad_SLFad.hpp</includes>
    <includes id="Sacado__CacheFad__DFad_8hpp" name="Sacado_CacheFad_DFad.hpp" local="yes" imported="no">Sacado_CacheFad_DFad.hpp</includes>
    <includes id="Sacado__CacheFad__SFad_8hpp" name="Sacado_CacheFad_SFad.hpp" local="yes" imported="no">Sacado_CacheFad_SFad.hpp</includes>
    <includes id="Sacado__CacheFad__SLFad_8hpp" name="Sacado_CacheFad_SLFad.hpp" local="yes" imported="no">Sacado_CacheFad_SLFad.hpp</includes>
    <includes id="Sacado__ELRCacheFad__DFad_8hpp" name="Sacado_ELRCacheFad_DFad.hpp" local="yes" imported="no">Sacado_ELRCacheFad_DFad.hpp</includes>
    <includes id="Sacado__ELRCacheFad__SFad_8hpp" name="Sacado_ELRCacheFad_SFad.hpp" local="yes" imported="no">Sacado_ELRCacheFad_SFad.hpp</includes>
    <includes id="Sacado__ELRCacheFad__SLFad_8hpp" name="Sacado_ELRCacheFad_SLFad.hpp" local="yes" imported="no">Sacado_ELRCacheFad_SLFad.hpp</includes>
    <includes id="Kokkos__View__Fad_8hpp" name="Kokkos_View_Fad.hpp" local="yes" imported="no">Kokkos_View_Fad.hpp</includes>
    <includes id="Sacado__Fad__MemPoolManager_8hpp" name="Sacado_Fad_MemPoolManager.hpp" local="yes" imported="no">Sacado_Fad_MemPoolManager.hpp</includes>
    <includes id="Sacado__Fad__DMFad_8hpp" name="Sacado_Fad_DMFad.hpp" local="yes" imported="no">Sacado_Fad_DMFad.hpp</includes>
    <includes id="Sacado__LFad__LogicalSparse_8hpp" name="Sacado_LFad_LogicalSparse.hpp" local="yes" imported="no">Sacado_LFad_LogicalSparse.hpp</includes>
    <includes id="Sacado__Fad__DVFad_8hpp" name="Sacado_Fad_DVFad.hpp" local="yes" imported="no">Sacado_Fad_DVFad.hpp</includes>
    <includes id="Sacado__Fad__Vector_8hpp" name="Sacado_Fad_Vector.hpp" local="yes" imported="no">Sacado_Fad_Vector.hpp</includes>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <includes id="Sacado__trad2_8hpp" name="Sacado_trad2.hpp" local="yes" imported="no">Sacado_trad2.hpp</includes>
    <includes id="Sacado__tradvec_8hpp" name="Sacado_tradvec.hpp" local="yes" imported="no">Sacado_tradvec.hpp</includes>
    <includes id="Sacado__Tay__Taylor_8hpp" name="Sacado_Tay_Taylor.hpp" local="yes" imported="no">Sacado_Tay_Taylor.hpp</includes>
    <includes id="Sacado__ScalarFlopCounter_8hpp" name="Sacado_ScalarFlopCounter.hpp" local="yes" imported="no">Sacado_ScalarFlopCounter.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Sacado_Base.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Base_8hpp</filename>
    <class kind="struct">Sacado::Base</class>
    <namespace>Sacado</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_CacheFad_DFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__CacheFad__DFad_8hpp</filename>
    <includes id="Sacado__CacheFad__GeneralFadExpr_8hpp" name="Sacado_CacheFad_GeneralFadExpr.hpp" local="yes" imported="no">Sacado_CacheFad_GeneralFadExpr.hpp</includes>
    <includes id="Sacado__CacheFad__DFadTraits_8hpp" name="Sacado_CacheFad_DFadTraits.hpp" local="yes" imported="no">Sacado_CacheFad_DFadTraits.hpp</includes>
    <includes id="Sacado__Fad__DynamicStorage_8hpp" name="Sacado_Fad_DynamicStorage.hpp" local="yes" imported="no">Sacado_Fad_DynamicStorage.hpp</includes>
    <includes id="Sacado__Fad__DFad__tmpl_8hpp" name="Sacado_Fad_DFad_tmpl.hpp" local="yes" imported="no">Sacado_Fad_DFad_tmpl.hpp</includes>
    <includes id="Sacado__CacheFad__ViewFad_8hpp" name="Sacado_CacheFad_ViewFad.hpp" local="yes" imported="no">Sacado_CacheFad_ViewFad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FAD_NS</name>
      <anchorfile>Sacado__CacheFad__DFad_8hpp.html</anchorfile>
      <anchor>a2d8b22d09d1775993725ad3b5bc72e1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_CacheFad_DFadTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__CacheFad__DFadTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::CacheFad::DFad</class>
    <class kind="struct">Sacado::ScalarType&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::CacheFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_CacheFad_Expression.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__CacheFad__Expression_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <includes id="Sacado__SFINAE__Macros_8hpp" name="Sacado_SFINAE_Macros.hpp" local="yes" imported="no">Sacado_SFINAE_Macros.hpp</includes>
    <class kind="struct">Sacado::CacheFad::BaseExpr</class>
    <class kind="class">Sacado::CacheFad::Expr</class>
    <class kind="struct">Sacado::CacheFad::ExprLevel</class>
    <class kind="struct">Sacado::CacheFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::CacheFad::IsFadExpr</class>
    <class kind="struct">Sacado::CacheFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::ConstExpr</class>
    <class kind="struct">Sacado::IsExpr&lt; CacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; CacheFad::Expr&lt; T &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::CacheFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_CacheFad_ExpressionTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__CacheFad__ExpressionTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::CacheFad::Expr</class>
    <class kind="struct">Sacado::ScalarType&lt; CacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; CacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; CacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; CacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; CacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; CacheFad::Expr&lt; T &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::CacheFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_CacheFad_GeneralFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__CacheFad__GeneralFad_8hpp</filename>
    <includes id="Sacado__CacheFad__Expression_8hpp" name="Sacado_CacheFad_Expression.hpp" local="yes" imported="no">Sacado_CacheFad_Expression.hpp</includes>
    <class kind="class">Sacado::CacheFad::GeneralFad</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::CacheFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_CacheFad_GeneralFadExpr.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__CacheFad__GeneralFadExpr_8hpp</filename>
    <includes id="Sacado__CacheFad__GeneralFad_8hpp" name="Sacado_CacheFad_GeneralFad.hpp" local="yes" imported="no">Sacado_CacheFad_GeneralFad.hpp</includes>
    <includes id="Sacado__CacheFad__Ops_8hpp" name="Sacado_CacheFad_Ops.hpp" local="yes" imported="no">Sacado_CacheFad_Ops.hpp</includes>
    <class kind="class">Sacado::CacheFad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::CacheFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_CacheFad_Ops.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__CacheFad__Ops_8hpp</filename>
    <includes id="Sacado__CacheFad__Expression_8hpp" name="Sacado_CacheFad_Expression.hpp" local="yes" imported="no">Sacado_CacheFad_Expression.hpp</includes>
    <includes id="Sacado__cmath_8hpp" name="Sacado_cmath.hpp" local="yes" imported="no">Sacado_cmath.hpp</includes>
    <includes id="Sacado__dummy__arg_8hpp" name="Sacado_dummy_arg.hpp" local="yes" imported="no">Sacado_dummy_arg.hpp</includes>
    <class kind="class">Sacado::CacheFad::UnaryPlusOp</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; UnaryPlusOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::UnaryMinusOp</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; UnaryMinusOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::AbsOp</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; AbsOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::FAbsOp</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; FAbsOp&lt; ExprT &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::CacheFad</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FAD_UNARYOP_MACRO</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>abb9e79669b28141e798fb63b6c57cfb9</anchor>
      <arglist>(OPNAME, OP, PARTIAL, VALUE)                                        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAD_BINARYOP_MACRO</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a55630f75b992163d923fd6309b3ebf8f</anchor>
      <arglist>(OPNAME, OP)                                                                  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAD_RELOP_MACRO</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a8963d8510b49e7905580a2e40ab08d22</anchor>
      <arglist>(OP)                                                                                      </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAD_BOOL_MACRO</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a67fb9ceb42c14d71c1b20762a5beb0b7</anchor>
      <arglist>(OP)                                                                                        </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION Expr&lt; UnaryPlusOp&lt; Expr&lt; T &gt; &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1CacheFad.html</anchorfile>
      <anchor>a2891242ec2e61ab1522a7ae5915f3c53</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION Expr&lt; UnaryMinusOp&lt; Expr&lt; T &gt; &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1CacheFad.html</anchorfile>
      <anchor>aed4c4572f580827a289aaddef5afb88a</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION Expr&lt; AbsOp&lt; Expr&lt; T &gt; &gt; &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSacado_1_1CacheFad.html</anchorfile>
      <anchor>a67f04b9f901dc20cc7e880863d3ae08e</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION Expr&lt; FAbsOp&lt; Expr&lt; T &gt; &gt; &gt;</type>
      <name>fabs</name>
      <anchorfile>namespaceSacado_1_1CacheFad.html</anchorfile>
      <anchor>a9ce7185cad80799b31ed66fd2ba74f16</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FAD_UNARYOP_MACRO</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>ab512618133c4cda5c4cbf8f6fb941da7</anchor>
      <arglist>(exp, ExpOp, a=std::exp(v), a) FAD_UNARYOP_MACRO(log</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>operator!</name>
      <anchorfile>namespaceSacado_1_1CacheFad.html</anchorfile>
      <anchor>a898c5fd9e7eab9f012c5e75faa8bf945</anchor>
      <arglist>(const Expr&lt; ExprT &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>toBool</name>
      <anchorfile>namespaceSacado_1_1CacheFad.html</anchorfile>
      <anchor>a1d990f5ee276cefab6633077b17cdb40</anchor>
      <arglist>(const Expr&lt; ExprT &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSacado_1_1CacheFad.html</anchorfile>
      <anchor>ab6413c34ee787a505157a4005b4cb335</anchor>
      <arglist>(std::ostream &amp;os, const Expr&lt; ExprT &gt; &amp;x)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>LogOp</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>af6efac45548c9be38cfdfe8db29c1212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>a</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a4124bc0a9335c27f086f24ba207a4912</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>Log10Op</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a4ea4daed45cddfc564c30f6afad8ea7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>SqrtOp</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>ae24c65c309a6771cc247c0d422128d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>CosOp</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>accc71c0c2bcd127b287ae6bef234f92a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>SinOp</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>acc14fff7b2bc6858abb647c750bfd69b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>TanOp</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a6eaf9d460a2e544a5bd5b5c6c548ae07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACosOp</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a8fd0a3304e7d47b7beb4fcda3c981e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ASinOp</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a398c1ac4bf2fc2de271b1dd5cab4f206</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ATanOp</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a4f9df020a400389c6615594689dc3451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>CoshOp</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>af7c51f7fbdad84bc080e11ee695348da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>SinhOp</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>ad34d6c6ea760a4912637e8c7e31e4065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>TanhOp</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>aa8be9ec485e54cb6fa00aa063abe94cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACoshOp</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>ad514ec521239aaee3dd9b323c7290391</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ASinhOp</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a9858262ff45a4b6a4472803ed2aea234</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ATanhOp</name>
      <anchorfile>Sacado__CacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a502368a913410af1b3a0ea7dc75fa1e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_CacheFad_SFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__CacheFad__SFad_8hpp</filename>
    <includes id="Sacado__CacheFad__SFadTraits_8hpp" name="Sacado_CacheFad_SFadTraits.hpp" local="yes" imported="no">Sacado_CacheFad_SFadTraits.hpp</includes>
    <includes id="Sacado__CacheFad__Expression_8hpp" name="Sacado_CacheFad_Expression.hpp" local="yes" imported="no">Sacado_CacheFad_Expression.hpp</includes>
    <includes id="Sacado__StaticArrayTraits_8hpp" name="Sacado_StaticArrayTraits.hpp" local="yes" imported="no">Sacado_StaticArrayTraits.hpp</includes>
    <includes id="Sacado__Fad__SFad__tmpl_8hpp" name="Sacado_Fad_SFad_tmpl.hpp" local="yes" imported="no">Sacado_Fad_SFad_tmpl.hpp</includes>
    <includes id="Sacado__CacheFad__ViewFad_8hpp" name="Sacado_CacheFad_ViewFad.hpp" local="yes" imported="no">Sacado_CacheFad_ViewFad.hpp</includes>
    <includes id="Sacado__CacheFad__Ops_8hpp" name="Sacado_CacheFad_Ops.hpp" local="yes" imported="no">Sacado_CacheFad_Ops.hpp</includes>
    <class kind="struct">Sacado::CacheFad::SFadExprTag</class>
    <class kind="class">Sacado::CacheFad::SFad</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::CacheFad</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FAD_NS</name>
      <anchorfile>Sacado__CacheFad__SFad_8hpp.html</anchorfile>
      <anchor>a2d8b22d09d1775993725ad3b5bc72e1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_CacheFad_SFadTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__CacheFad__SFadTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::CacheFad::SFad</class>
    <class kind="struct">Sacado::ScalarType&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StaticSize&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StaticSize&lt; const CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::CacheFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_CacheFad_SLFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__CacheFad__SLFad_8hpp</filename>
    <includes id="Sacado__CacheFad__GeneralFadExpr_8hpp" name="Sacado_CacheFad_GeneralFadExpr.hpp" local="yes" imported="no">Sacado_CacheFad_GeneralFadExpr.hpp</includes>
    <includes id="Sacado__CacheFad__SLFadTraits_8hpp" name="Sacado_CacheFad_SLFadTraits.hpp" local="yes" imported="no">Sacado_CacheFad_SLFadTraits.hpp</includes>
    <includes id="Sacado__Fad__StaticStorage_8hpp" name="Sacado_Fad_StaticStorage.hpp" local="yes" imported="no">Sacado_Fad_StaticStorage.hpp</includes>
    <includes id="Sacado__Fad__SLFad__tmpl_8hpp" name="Sacado_Fad_SLFad_tmpl.hpp" local="yes" imported="no">Sacado_Fad_SLFad_tmpl.hpp</includes>
    <includes id="Sacado__CacheFad__ViewFad_8hpp" name="Sacado_CacheFad_ViewFad.hpp" local="yes" imported="no">Sacado_CacheFad_ViewFad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FAD_NS</name>
      <anchorfile>Sacado__CacheFad__SLFad_8hpp.html</anchorfile>
      <anchor>a2d8b22d09d1775993725ad3b5bc72e1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_CacheFad_SLFadTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__CacheFad__SLFadTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::CacheFad::SLFad</class>
    <class kind="struct">Sacado::ScalarType&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::CacheFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_CacheFad_ViewFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__CacheFad__ViewFad_8hpp</filename>
    <includes id="Sacado__CacheFad__GeneralFadExpr_8hpp" name="Sacado_CacheFad_GeneralFadExpr.hpp" local="yes" imported="no">Sacado_CacheFad_GeneralFadExpr.hpp</includes>
    <includes id="Sacado__CacheFad__ViewFadTraits_8hpp" name="Sacado_CacheFad_ViewFadTraits.hpp" local="yes" imported="no">Sacado_CacheFad_ViewFadTraits.hpp</includes>
    <includes id="Sacado__Fad__ViewStorage_8hpp" name="Sacado_Fad_ViewStorage.hpp" local="yes" imported="no">Sacado_Fad_ViewStorage.hpp</includes>
    <includes id="Sacado__Fad__ViewFad__tmpl_8hpp" name="Sacado_Fad_ViewFad_tmpl.hpp" local="yes" imported="no">Sacado_Fad_ViewFad_tmpl.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FAD_NS</name>
      <anchorfile>Sacado__CacheFad__ViewFad_8hpp.html</anchorfile>
      <anchor>a2d8b22d09d1775993725ad3b5bc72e1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_CacheFad_ViewFadTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__CacheFad__ViewFadTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::CacheFad::ViewFad</class>
    <class kind="struct">Sacado::ScalarType&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::CacheFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_cmath.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__cmath_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
    <namespace>std</namespace>
    <member kind="define">
      <type>#define</type>
      <name>HAS_GXX_CMATH_11</name>
      <anchorfile>Sacado__cmath_8hpp.html</anchorfile>
      <anchor>a4b8a78a777b99f964e4aad7b87bf3fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>acosh</name>
      <anchorfile>namespacestd.html</anchorfile>
      <anchor>aebda5185a97b99d5067faa5356e10728</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>asinh</name>
      <anchorfile>namespacestd.html</anchorfile>
      <anchor>adb4730cf4787ae191bbe0538663ad7b4</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>atanh</name>
      <anchorfile>namespacestd.html</anchorfile>
      <anchor>a3d4acde659090e251a2af9b0ff4c5d19</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>acosh</name>
      <anchorfile>namespacestd.html</anchorfile>
      <anchor>a7067cee729ba91c01060753ca4586f72</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>asinh</name>
      <anchorfile>namespacestd.html</anchorfile>
      <anchor>aa7f135b48e11d01349367c85e7251884</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>atanh</name>
      <anchorfile>namespacestd.html</anchorfile>
      <anchor>ab8237c9d425a20e355adc5e42a6ff9d0</anchor>
      <arglist>(double x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_ConfigDefs.h</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ConfigDefs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>__cplusplus</name>
      <anchorfile>Sacado__ConfigDefs_8h.html</anchorfile>
      <anchor>a1b391bc7ed92f79666c4a5d840aa1edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KOKKOS_FUNCTION</name>
      <anchorfile>Sacado__ConfigDefs_8h.html</anchorfile>
      <anchor>a79e0e213d12a95ff4e20a976f67b8205</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KOKKOS_INLINE_FUNCTION</name>
      <anchorfile>Sacado__ConfigDefs_8h.html</anchorfile>
      <anchor>abaedd778df931c278165f80969f02ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KOKKOS_FORCEINLINE_FUNCTION</name>
      <anchorfile>Sacado__ConfigDefs_8h.html</anchorfile>
      <anchor>a4513b5bb68d29e9da142946a2f8bb90a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_DisableKokkosCuda.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__DisableKokkosCuda_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Sacado_dummy_arg.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__dummy__arg_8hpp</filename>
    <class kind="struct">Sacado::dummy_arg</class>
    <class kind="struct">Sacado::dummy</class>
    <class kind="struct">Sacado::dummy&lt; T, T &gt;</class>
    <namespace>Sacado</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_DynamicArrayTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__DynamicArrayTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="struct">Sacado::ds_array</class>
    <class kind="struct">Sacado::ds_array&lt; T, true &gt;</class>
    <namespace>Sacado</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRCacheFad_DFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRCacheFad__DFad_8hpp</filename>
    <includes id="Sacado__ELRCacheFad__GeneralFadExpr_8hpp" name="Sacado_ELRCacheFad_GeneralFadExpr.hpp" local="yes" imported="no">Sacado_ELRCacheFad_GeneralFadExpr.hpp</includes>
    <includes id="Sacado__ELRCacheFad__DFadTraits_8hpp" name="Sacado_ELRCacheFad_DFadTraits.hpp" local="yes" imported="no">Sacado_ELRCacheFad_DFadTraits.hpp</includes>
    <includes id="Sacado__Fad__DynamicStorage_8hpp" name="Sacado_Fad_DynamicStorage.hpp" local="yes" imported="no">Sacado_Fad_DynamicStorage.hpp</includes>
    <includes id="Sacado__Fad__DFad__tmpl_8hpp" name="Sacado_Fad_DFad_tmpl.hpp" local="yes" imported="no">Sacado_Fad_DFad_tmpl.hpp</includes>
    <includes id="Sacado__ELRCacheFad__ViewFad_8hpp" name="Sacado_ELRCacheFad_ViewFad.hpp" local="yes" imported="no">Sacado_ELRCacheFad_ViewFad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FAD_NS</name>
      <anchorfile>Sacado__ELRCacheFad__DFad_8hpp.html</anchorfile>
      <anchor>a2d8b22d09d1775993725ad3b5bc72e1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRCacheFad_DFadTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRCacheFad__DFadTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::ELRCacheFad::DFad</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::ELRCacheFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRCacheFad_Expression.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRCacheFad__Expression_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <includes id="Sacado__SFINAE__Macros_8hpp" name="Sacado_SFINAE_Macros.hpp" local="yes" imported="no">Sacado_SFINAE_Macros.hpp</includes>
    <class kind="struct">Sacado::ELRCacheFad::BaseExpr</class>
    <class kind="class">Sacado::ELRCacheFad::Expr</class>
    <class kind="struct">Sacado::ELRCacheFad::ExprLevel</class>
    <class kind="struct">Sacado::ELRCacheFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ELRCacheFad::IsFadExpr</class>
    <class kind="struct">Sacado::ELRCacheFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::ConstExpr</class>
    <class kind="struct">Sacado::ELRCacheFad::ExprConstRef</class>
    <class kind="struct">Sacado::ELRCacheFad::ExprConstRef&lt; ConstExpr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::ELRCacheFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRCacheFad_ExpressionTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRCacheFad__ExpressionTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::ELRCacheFad::Expr</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::ELRCacheFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRCacheFad_GeneralFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRCacheFad__GeneralFad_8hpp</filename>
    <includes id="Sacado__ELRCacheFad__Expression_8hpp" name="Sacado_ELRCacheFad_Expression.hpp" local="yes" imported="no">Sacado_ELRCacheFad_Expression.hpp</includes>
    <includes id="Sacado__mpl__range__c_8hpp" name="Sacado_mpl_range_c.hpp" local="yes" imported="no">Sacado_mpl_range_c.hpp</includes>
    <includes id="Sacado__mpl__for__each_8hpp" name="Sacado_mpl_for_each.hpp" local="yes" imported="no">Sacado_mpl_for_each.hpp</includes>
    <class kind="class">Sacado::ELRCacheFad::GeneralFad</class>
    <class kind="struct">Sacado::ELRCacheFad::GeneralFad::SlowLocalAccumOp</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::ELRCacheFad</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSacado_1_1ELRCacheFad.html</anchorfile>
      <anchor>a9a5a123816c5b077f41c67c188f4364c</anchor>
      <arglist>(std::ostream &amp;os, const GeneralFad&lt; T, Storage &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRCacheFad_GeneralFadExpr.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRCacheFad__GeneralFadExpr_8hpp</filename>
    <includes id="Sacado__ELRCacheFad__GeneralFad_8hpp" name="Sacado_ELRCacheFad_GeneralFad.hpp" local="yes" imported="no">Sacado_ELRCacheFad_GeneralFad.hpp</includes>
    <includes id="Sacado__ELRCacheFad__Ops_8hpp" name="Sacado_ELRCacheFad_Ops.hpp" local="yes" imported="no">Sacado_ELRCacheFad_Ops.hpp</includes>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::ELRCacheFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRCacheFad_Ops.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRCacheFad__Ops_8hpp</filename>
    <includes id="Sacado__ELRCacheFad__Expression_8hpp" name="Sacado_ELRCacheFad_Expression.hpp" local="yes" imported="no">Sacado_ELRCacheFad_Expression.hpp</includes>
    <includes id="Sacado__cmath_8hpp" name="Sacado_cmath.hpp" local="yes" imported="no">Sacado_cmath.hpp</includes>
    <includes id="Sacado__mpl__disable__if_8hpp" name="Sacado_mpl_disable_if.hpp" local="yes" imported="no">Sacado_mpl_disable_if.hpp</includes>
    <includes id="Sacado__mpl__is__same_8hpp" name="Sacado_mpl_is_same.hpp" local="yes" imported="no">Sacado_mpl_is_same.hpp</includes>
    <class kind="class">Sacado::ELRCacheFad::UnaryPlusOp</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; UnaryPlusOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::UnaryMinusOp</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; UnaryMinusOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::AbsOp</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; AbsOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::FAbsOp</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; FAbsOp&lt; ExprT &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::ELRCacheFad</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FAD_UNARYOP_MACRO</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>abb9e79669b28141e798fb63b6c57cfb9</anchor>
      <arglist>(OPNAME, OP, PARTIAL, VALUE)                                        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAD_BINARYOP_MACRO</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a55630f75b992163d923fd6309b3ebf8f</anchor>
      <arglist>(OPNAME, OP)                                                                  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAD_RELOP_MACRO</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a8963d8510b49e7905580a2e40ab08d22</anchor>
      <arglist>(OP)                                                                                      </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAD_BOOL_MACRO</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a67fb9ceb42c14d71c1b20762a5beb0b7</anchor>
      <arglist>(OP)                                                                                        </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION Expr&lt; UnaryPlusOp&lt; Expr&lt; T &gt; &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1ELRCacheFad.html</anchorfile>
      <anchor>a64020b36780f8e94c013f7f1eb017a08</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION Expr&lt; UnaryMinusOp&lt; Expr&lt; T &gt; &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1ELRCacheFad.html</anchorfile>
      <anchor>aac6cd8c5f5e9d5bb0800e648dd8340a4</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION Expr&lt; AbsOp&lt; Expr&lt; T &gt; &gt; &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSacado_1_1ELRCacheFad.html</anchorfile>
      <anchor>a99debbc1ee11c9e04df38d3150bfb01c</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION Expr&lt; FAbsOp&lt; Expr&lt; T &gt; &gt; &gt;</type>
      <name>fabs</name>
      <anchorfile>namespaceSacado_1_1ELRCacheFad.html</anchorfile>
      <anchor>a270644230a423f82b6fa7eb456dffc56</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FAD_UNARYOP_MACRO</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>ab512618133c4cda5c4cbf8f6fb941da7</anchor>
      <arglist>(exp, ExpOp, a=std::exp(v), a) FAD_UNARYOP_MACRO(log</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>operator!</name>
      <anchorfile>namespaceSacado_1_1ELRCacheFad.html</anchorfile>
      <anchor>aa4b214149037f1fd8446e20964abcc72</anchor>
      <arglist>(const Expr&lt; ExprT &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>toBool</name>
      <anchorfile>namespaceSacado_1_1ELRCacheFad.html</anchorfile>
      <anchor>a4ac4b2d5928f14c880064464adcb6e10</anchor>
      <arglist>(const Expr&lt; ExprT &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSacado_1_1ELRCacheFad.html</anchorfile>
      <anchor>adec945901ad7019eb5b44e080752335e</anchor>
      <arglist>(std::ostream &amp;os, const Expr&lt; ExprT &gt; &amp;x)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>LogOp</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>af6efac45548c9be38cfdfe8db29c1212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>a</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a4124bc0a9335c27f086f24ba207a4912</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>Log10Op</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a4ea4daed45cddfc564c30f6afad8ea7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>SqrtOp</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>ae24c65c309a6771cc247c0d422128d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>CosOp</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>accc71c0c2bcd127b287ae6bef234f92a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>SinOp</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>acc14fff7b2bc6858abb647c750bfd69b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>TanOp</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a6eaf9d460a2e544a5bd5b5c6c548ae07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACosOp</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a8fd0a3304e7d47b7beb4fcda3c981e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ASinOp</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a398c1ac4bf2fc2de271b1dd5cab4f206</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ATanOp</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a4f9df020a400389c6615594689dc3451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>CoshOp</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>af7c51f7fbdad84bc080e11ee695348da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>SinhOp</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>ad34d6c6ea760a4912637e8c7e31e4065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>TanhOp</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>aa8be9ec485e54cb6fa00aa063abe94cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ACoshOp</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>ad514ec521239aaee3dd9b323c7290391</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ASinhOp</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a9858262ff45a4b6a4472803ed2aea234</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>ATanhOp</name>
      <anchorfile>Sacado__ELRCacheFad__Ops_8hpp.html</anchorfile>
      <anchor>a502368a913410af1b3a0ea7dc75fa1e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRCacheFad_SFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRCacheFad__SFad_8hpp</filename>
    <includes id="Sacado__ELRCacheFad__SFadTraits_8hpp" name="Sacado_ELRCacheFad_SFadTraits.hpp" local="yes" imported="no">Sacado_ELRCacheFad_SFadTraits.hpp</includes>
    <includes id="Sacado__ELRCacheFad__Expression_8hpp" name="Sacado_ELRCacheFad_Expression.hpp" local="yes" imported="no">Sacado_ELRCacheFad_Expression.hpp</includes>
    <includes id="Sacado__StaticArrayTraits_8hpp" name="Sacado_StaticArrayTraits.hpp" local="yes" imported="no">Sacado_StaticArrayTraits.hpp</includes>
    <includes id="Sacado__mpl__range__c_8hpp" name="Sacado_mpl_range_c.hpp" local="yes" imported="no">Sacado_mpl_range_c.hpp</includes>
    <includes id="Sacado__mpl__for__each_8hpp" name="Sacado_mpl_for_each.hpp" local="yes" imported="no">Sacado_mpl_for_each.hpp</includes>
    <includes id="Sacado__Fad__SFad__tmpl_8hpp" name="Sacado_Fad_SFad_tmpl.hpp" local="yes" imported="no">Sacado_Fad_SFad_tmpl.hpp</includes>
    <includes id="Sacado__ELRCacheFad__ViewFad_8hpp" name="Sacado_ELRCacheFad_ViewFad.hpp" local="yes" imported="no">Sacado_ELRCacheFad_ViewFad.hpp</includes>
    <includes id="Sacado__ELRCacheFad__Ops_8hpp" name="Sacado_ELRCacheFad_Ops.hpp" local="yes" imported="no">Sacado_ELRCacheFad_Ops.hpp</includes>
    <class kind="struct">Sacado::ELRCacheFad::SFadExprTag</class>
    <class kind="class">Sacado::ELRCacheFad::SFad</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ELRCacheFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;::LocalAccumOp</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::ELRCacheFad</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FAD_NS</name>
      <anchorfile>Sacado__ELRCacheFad__SFad_8hpp.html</anchorfile>
      <anchor>a2d8b22d09d1775993725ad3b5bc72e1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRCacheFad_SFadTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRCacheFad__SFadTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::ELRCacheFad::SFad</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StaticSize&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StaticSize&lt; const ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::ELRCacheFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRCacheFad_SLFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRCacheFad__SLFad_8hpp</filename>
    <includes id="Sacado__ELRCacheFad__GeneralFadExpr_8hpp" name="Sacado_ELRCacheFad_GeneralFadExpr.hpp" local="yes" imported="no">Sacado_ELRCacheFad_GeneralFadExpr.hpp</includes>
    <includes id="Sacado__ELRCacheFad__SLFadTraits_8hpp" name="Sacado_ELRCacheFad_SLFadTraits.hpp" local="yes" imported="no">Sacado_ELRCacheFad_SLFadTraits.hpp</includes>
    <includes id="Sacado__Fad__StaticStorage_8hpp" name="Sacado_Fad_StaticStorage.hpp" local="yes" imported="no">Sacado_Fad_StaticStorage.hpp</includes>
    <includes id="Sacado__Fad__SLFad__tmpl_8hpp" name="Sacado_Fad_SLFad_tmpl.hpp" local="yes" imported="no">Sacado_Fad_SLFad_tmpl.hpp</includes>
    <includes id="Sacado__ELRCacheFad__ViewFad_8hpp" name="Sacado_ELRCacheFad_ViewFad.hpp" local="yes" imported="no">Sacado_ELRCacheFad_ViewFad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FAD_NS</name>
      <anchorfile>Sacado__ELRCacheFad__SLFad_8hpp.html</anchorfile>
      <anchor>a2d8b22d09d1775993725ad3b5bc72e1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRCacheFad_SLFadTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRCacheFad__SLFadTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::ELRCacheFad::SLFad</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::ELRCacheFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRCacheFad_ViewFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRCacheFad__ViewFad_8hpp</filename>
    <includes id="Sacado__ELRCacheFad__GeneralFadExpr_8hpp" name="Sacado_ELRCacheFad_GeneralFadExpr.hpp" local="yes" imported="no">Sacado_ELRCacheFad_GeneralFadExpr.hpp</includes>
    <includes id="Sacado__ELRCacheFad__ViewFadTraits_8hpp" name="Sacado_ELRCacheFad_ViewFadTraits.hpp" local="yes" imported="no">Sacado_ELRCacheFad_ViewFadTraits.hpp</includes>
    <includes id="Sacado__Fad__ViewStorage_8hpp" name="Sacado_Fad_ViewStorage.hpp" local="yes" imported="no">Sacado_Fad_ViewStorage.hpp</includes>
    <includes id="Sacado__Fad__ViewFad__tmpl_8hpp" name="Sacado_Fad_ViewFad_tmpl.hpp" local="yes" imported="no">Sacado_Fad_ViewFad_tmpl.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FAD_NS</name>
      <anchorfile>Sacado__ELRCacheFad__ViewFad_8hpp.html</anchorfile>
      <anchor>a2d8b22d09d1775993725ad3b5bc72e1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRCacheFad_ViewFadTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRCacheFad__ViewFadTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::ELRCacheFad::ViewFad</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::ELRCacheFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRFad_DFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRFad__DFad_8hpp</filename>
    <includes id="Sacado__ELRFad__GeneralFadExpr_8hpp" name="Sacado_ELRFad_GeneralFadExpr.hpp" local="yes" imported="no">Sacado_ELRFad_GeneralFadExpr.hpp</includes>
    <includes id="Sacado__ELRFad__DFadTraits_8hpp" name="Sacado_ELRFad_DFadTraits.hpp" local="yes" imported="no">Sacado_ELRFad_DFadTraits.hpp</includes>
    <includes id="Sacado__Fad__DynamicStorage_8hpp" name="Sacado_Fad_DynamicStorage.hpp" local="yes" imported="no">Sacado_Fad_DynamicStorage.hpp</includes>
    <includes id="Sacado__Fad__DFad__tmpl_8hpp" name="Sacado_Fad_DFad_tmpl.hpp" local="yes" imported="no">Sacado_Fad_DFad_tmpl.hpp</includes>
    <includes id="Sacado__ELRFad__ViewFad_8hpp" name="Sacado_ELRFad_ViewFad.hpp" local="yes" imported="no">Sacado_ELRFad_ViewFad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FAD_NS</name>
      <anchorfile>Sacado__ELRFad__DFad_8hpp.html</anchorfile>
      <anchor>a2d8b22d09d1775993725ad3b5bc72e1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRFad_DFadTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRFad__DFadTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::ELRFad::DFad</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::ELRFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRFad_Expression.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRFad__Expression_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <includes id="Sacado__SFINAE__Macros_8hpp" name="Sacado_SFINAE_Macros.hpp" local="yes" imported="no">Sacado_SFINAE_Macros.hpp</includes>
    <class kind="struct">Sacado::ELRFad::BaseExpr</class>
    <class kind="class">Sacado::ELRFad::Expr</class>
    <class kind="struct">Sacado::ELRFad::ExprLevel</class>
    <class kind="struct">Sacado::ELRFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ELRFad::IsFadExpr</class>
    <class kind="struct">Sacado::ELRFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::ConstExpr</class>
    <class kind="struct">Sacado::ELRFad::ExprConstRef</class>
    <class kind="struct">Sacado::ELRFad::ExprConstRef&lt; ConstExpr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; ELRFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; ELRFad::Expr&lt; T &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::ELRFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRFad_ExpressionTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRFad__ExpressionTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::ELRFad::Expr</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRFad::Expr&lt; T &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::ELRFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRFad_GeneralFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRFad__GeneralFad_8hpp</filename>
    <includes id="Sacado__ELRFad__Expression_8hpp" name="Sacado_ELRFad_Expression.hpp" local="yes" imported="no">Sacado_ELRFad_Expression.hpp</includes>
    <includes id="Sacado__dummy__arg_8hpp" name="Sacado_dummy_arg.hpp" local="yes" imported="no">Sacado_dummy_arg.hpp</includes>
    <includes id="Sacado__mpl__range__c_8hpp" name="Sacado_mpl_range_c.hpp" local="yes" imported="no">Sacado_mpl_range_c.hpp</includes>
    <includes id="Sacado__mpl__for__each_8hpp" name="Sacado_mpl_for_each.hpp" local="yes" imported="no">Sacado_mpl_for_each.hpp</includes>
    <class kind="class">Sacado::ELRFad::GeneralFad</class>
    <class kind="struct">Sacado::ELRFad::GeneralFad::SlowLocalAccumOp</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::ELRFad</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSacado_1_1ELRFad.html</anchorfile>
      <anchor>a758474af6daaba5d32e6500de5acb05f</anchor>
      <arglist>(std::ostream &amp;os, const GeneralFad&lt; T, Storage &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRFad_GeneralFadExpr.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRFad__GeneralFadExpr_8hpp</filename>
    <includes id="Sacado__ELRFad__GeneralFad_8hpp" name="Sacado_ELRFad_GeneralFad.hpp" local="yes" imported="no">Sacado_ELRFad_GeneralFad.hpp</includes>
    <includes id="Sacado__ELRFad__Ops_8hpp" name="Sacado_ELRFad_Ops.hpp" local="yes" imported="no">Sacado_ELRFad_Ops.hpp</includes>
    <class kind="class">Sacado::ELRFad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::ELRFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRFad_Ops.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRFad__Ops_8hpp</filename>
    <includes id="Sacado__ELRFad__Expression_8hpp" name="Sacado_ELRFad_Expression.hpp" local="yes" imported="no">Sacado_ELRFad_Expression.hpp</includes>
    <includes id="Sacado__cmath_8hpp" name="Sacado_cmath.hpp" local="yes" imported="no">Sacado_cmath.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FAD_UNARYOP_MACRO</name>
      <anchorfile>Sacado__ELRFad__Ops_8hpp.html</anchorfile>
      <anchor>ae5994da251f9eeb8bd06e728b12cbbe2</anchor>
      <arglist>(OPNAME, OP, VALUE, ADJOINT,                                         LINEAR, DX, FASTACCESSDX)                                          </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAD_BINARYOP_MACRO</name>
      <anchorfile>Sacado__ELRFad__Ops_8hpp.html</anchorfile>
      <anchor>a0f8b5b70b7281641255a23a2ffc25e3c</anchor>
      <arglist>(                                                                                       OPNAME, OP, VALUE, LADJOINT, RADJOINT,                                                                     LINEAR, CONST_LINEAR_1, CONST_LINEAR_2,                                                             LINEAR_2, CONST_LINEAR_1_2, CONST_LINEAR_2_2,                                                 DX, FASTACCESSDX, CONST_DX_1, CONST_DX_2,                                                             CONST_FASTACCESSDX_1, CONST_FASTACCESSDX_2)                                                    </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAD_RELOP_MACRO</name>
      <anchorfile>Sacado__ELRFad__Ops_8hpp.html</anchorfile>
      <anchor>a8963d8510b49e7905580a2e40ab08d22</anchor>
      <arglist>(OP)                                                                                      </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAD_BOOL_MACRO</name>
      <anchorfile>Sacado__ELRFad__Ops_8hpp.html</anchorfile>
      <anchor>a67fb9ceb42c14d71c1b20762a5beb0b7</anchor>
      <arglist>(OP)                                                                                        </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FAD_UNARYOP_MACRO</name>
      <anchorfile>Sacado__ELRFad__Ops_8hpp.html</anchorfile>
      <anchor>aeb75dddc1a0b9230ba7eb73799c5a561</anchor>
      <arglist>(operator+, UnaryPlusOp, expr.val(), bar, true, expr.dx(i), expr.fastAccessDx(i)) FAD_UNARYOP_MACRO(operator-</arglist>
    </member>
    <member kind="function">
      <type>expr</type>
      <name>val</name>
      <anchorfile>Sacado__ELRFad__Ops_8hpp.html</anchorfile>
      <anchor>acf293c8b6faa4c14f289628dd25a5cc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>expr expr</type>
      <name>dx</name>
      <anchorfile>Sacado__ELRFad__Ops_8hpp.html</anchorfile>
      <anchor>a2a872900e90a561d3c8384ee09bf0025</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="function">
      <type>expr expr expr</type>
      <name>fastAccessDx</name>
      <anchorfile>Sacado__ELRFad__Ops_8hpp.html</anchorfile>
      <anchor>ac47821cca75c98a745f4df77a16a193d</anchor>
      <arglist>(i)) FAD_UNARYOP_MACRO(exp</arglist>
    </member>
    <member kind="function">
      <type>expr expr expr bar bar expr expr expr</type>
      <name>bar</name>
      <anchorfile>Sacado__ELRFad__Ops_8hpp.html</anchorfile>
      <anchor>af38531db8beb90162ad4130908dc46e8</anchor>
      <arglist>(std::log(value_type(10.))*expr.val())</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>UnaryMinusOp</name>
      <anchorfile>Sacado__ELRFad__Ops_8hpp.html</anchorfile>
      <anchor>af9b804f38436f1f680d4b16c85f3b6a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>bar</name>
      <anchorfile>Sacado__ELRFad__Ops_8hpp.html</anchorfile>
      <anchor>a0c04797eb61d7fcbb2e226c13bfb350c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>true</name>
      <anchorfile>Sacado__ELRFad__Ops_8hpp.html</anchorfile>
      <anchor>ac82d459ff3b4eac108d8b83c3c85db8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr expr expr</type>
      <name>ExpOp</name>
      <anchorfile>Sacado__ELRFad__Ops_8hpp.html</anchorfile>
      <anchor>aaaa187eacdc4b61d4d2311fd8a7ff1c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr expr expr bar</type>
      <name>false</name>
      <anchorfile>Sacado__ELRFad__Ops_8hpp.html</anchorfile>
      <anchor>a94414ef4140e2551a0f70cbe40cc64a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr expr expr bar</type>
      <name>LogOp</name>
      <anchorfile>Sacado__ELRFad__Ops_8hpp.html</anchorfile>
      <anchor>a272a6228c1b7f2077d717882a5b1cb67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr expr expr bar bar expr expr expr</type>
      <name>Log10Op</name>
      <anchorfile>Sacado__ELRFad__Ops_8hpp.html</anchorfile>
      <anchor>a21a3b1b238ed4a4220d250236b8aab5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRFad_SFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRFad__SFad_8hpp</filename>
    <includes id="Sacado__ELRFad__SFadTraits_8hpp" name="Sacado_ELRFad_SFadTraits.hpp" local="yes" imported="no">Sacado_ELRFad_SFadTraits.hpp</includes>
    <includes id="Sacado__ELRFad__Expression_8hpp" name="Sacado_ELRFad_Expression.hpp" local="yes" imported="no">Sacado_ELRFad_Expression.hpp</includes>
    <includes id="Sacado__StaticArrayTraits_8hpp" name="Sacado_StaticArrayTraits.hpp" local="yes" imported="no">Sacado_StaticArrayTraits.hpp</includes>
    <includes id="Sacado__mpl__range__c_8hpp" name="Sacado_mpl_range_c.hpp" local="yes" imported="no">Sacado_mpl_range_c.hpp</includes>
    <includes id="Sacado__mpl__for__each_8hpp" name="Sacado_mpl_for_each.hpp" local="yes" imported="no">Sacado_mpl_for_each.hpp</includes>
    <includes id="Sacado__Fad__SFad__tmpl_8hpp" name="Sacado_Fad_SFad_tmpl.hpp" local="yes" imported="no">Sacado_Fad_SFad_tmpl.hpp</includes>
    <includes id="Sacado__ELRFad__ViewFad_8hpp" name="Sacado_ELRFad_ViewFad.hpp" local="yes" imported="no">Sacado_ELRFad_ViewFad.hpp</includes>
    <includes id="Sacado__ELRFad__Ops_8hpp" name="Sacado_ELRFad_Ops.hpp" local="yes" imported="no">Sacado_ELRFad_Ops.hpp</includes>
    <class kind="struct">Sacado::ELRFad::SFadExprTag</class>
    <class kind="class">Sacado::ELRFad::SFad</class>
    <class kind="class">Sacado::ELRFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ELRFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;::LocalAccumOp</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::ELRFad</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FAD_NS</name>
      <anchorfile>Sacado__ELRFad__SFad_8hpp.html</anchorfile>
      <anchor>a2d8b22d09d1775993725ad3b5bc72e1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRFad_SFadTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRFad__SFadTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::ELRFad::SFad</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StaticSize&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StaticSize&lt; const ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::ELRFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRFad_SLFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRFad__SLFad_8hpp</filename>
    <includes id="Sacado__ELRFad__GeneralFadExpr_8hpp" name="Sacado_ELRFad_GeneralFadExpr.hpp" local="yes" imported="no">Sacado_ELRFad_GeneralFadExpr.hpp</includes>
    <includes id="Sacado__ELRFad__SLFadTraits_8hpp" name="Sacado_ELRFad_SLFadTraits.hpp" local="yes" imported="no">Sacado_ELRFad_SLFadTraits.hpp</includes>
    <includes id="Sacado__Fad__StaticStorage_8hpp" name="Sacado_Fad_StaticStorage.hpp" local="yes" imported="no">Sacado_Fad_StaticStorage.hpp</includes>
    <includes id="Sacado__Fad__SLFad__tmpl_8hpp" name="Sacado_Fad_SLFad_tmpl.hpp" local="yes" imported="no">Sacado_Fad_SLFad_tmpl.hpp</includes>
    <includes id="Sacado__ELRFad__ViewFad_8hpp" name="Sacado_ELRFad_ViewFad.hpp" local="yes" imported="no">Sacado_ELRFad_ViewFad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FAD_NS</name>
      <anchorfile>Sacado__ELRFad__SLFad_8hpp.html</anchorfile>
      <anchor>a2d8b22d09d1775993725ad3b5bc72e1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRFad_SLFadTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRFad__SLFadTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::ELRFad::SLFad</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::ELRFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRFad_ViewFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRFad__ViewFad_8hpp</filename>
    <includes id="Sacado__ELRFad__GeneralFadExpr_8hpp" name="Sacado_ELRFad_GeneralFadExpr.hpp" local="yes" imported="no">Sacado_ELRFad_GeneralFadExpr.hpp</includes>
    <includes id="Sacado__ELRFad__ViewFadTraits_8hpp" name="Sacado_ELRFad_ViewFadTraits.hpp" local="yes" imported="no">Sacado_ELRFad_ViewFadTraits.hpp</includes>
    <includes id="Sacado__Fad__ViewStorage_8hpp" name="Sacado_Fad_ViewStorage.hpp" local="yes" imported="no">Sacado_Fad_ViewStorage.hpp</includes>
    <includes id="Sacado__Fad__ViewFad__tmpl_8hpp" name="Sacado_Fad_ViewFad_tmpl.hpp" local="yes" imported="no">Sacado_Fad_ViewFad_tmpl.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FAD_NS</name>
      <anchorfile>Sacado__ELRFad__ViewFad_8hpp.html</anchorfile>
      <anchor>a2d8b22d09d1775993725ad3b5bc72e1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_ELRFad_ViewFadTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ELRFad__ViewFadTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::ELRFad::ViewFad</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::ELRFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_BLAS.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__BLAS_8hpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__CacheFad__DFad_8hpp" name="Sacado_CacheFad_DFad.hpp" local="yes" imported="no">Sacado_CacheFad_DFad.hpp</includes>
    <includes id="Sacado__dummy__arg_8hpp" name="Sacado_dummy_arg.hpp" local="yes" imported="no">Sacado_dummy_arg.hpp</includes>
    <includes id="Sacado__Fad__BLASImp_8hpp" name="Sacado_Fad_BLASImp.hpp" local="yes" imported="no">Sacado_Fad_BLASImp.hpp</includes>
    <class kind="class">Sacado::Fad::ArrayTraits</class>
    <class kind="struct">Sacado::Fad::ArrayValueType</class>
    <class kind="class">Sacado::Fad::BLAS</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TEUCHOS_BLAS_FAD_SPEC</name>
      <anchorfile>Sacado__Fad__BLAS_8hpp.html</anchorfile>
      <anchor>ab075a7e4ee7374a75d4f8495d03ff596</anchor>
      <arglist>(FADTYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TEUCHOS_BLAS_SFAD_SPEC</name>
      <anchorfile>Sacado__Fad__BLAS_8hpp.html</anchorfile>
      <anchor>a754c1edb57e49a65d3a0c26eb01b7d14</anchor>
      <arglist>(FADTYPE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_BLASImp.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__BLASImp_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_DFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__DFad_8hpp</filename>
    <includes id="Sacado__Fad__GeneralFadExpr_8hpp" name="Sacado_Fad_GeneralFadExpr.hpp" local="yes" imported="no">Sacado_Fad_GeneralFadExpr.hpp</includes>
    <includes id="Sacado__Fad__DFadTraits_8hpp" name="Sacado_Fad_DFadTraits.hpp" local="yes" imported="no">Sacado_Fad_DFadTraits.hpp</includes>
    <includes id="Sacado__Fad__DynamicStorage_8hpp" name="Sacado_Fad_DynamicStorage.hpp" local="yes" imported="no">Sacado_Fad_DynamicStorage.hpp</includes>
    <includes id="Sacado__Fad__DFad__tmpl_8hpp" name="Sacado_Fad_DFad_tmpl.hpp" local="yes" imported="no">Sacado_Fad_DFad_tmpl.hpp</includes>
    <includes id="Sacado__Fad__ViewFad_8hpp" name="Sacado_Fad_ViewFad.hpp" local="yes" imported="no">Sacado_Fad_ViewFad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FAD_NS</name>
      <anchorfile>Sacado__Fad__DFad_8hpp.html</anchorfile>
      <anchor>a2d8b22d09d1775993725ad3b5bc72e1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_DFad_tmpl.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__DFad__tmpl_8hpp</filename>
    <class kind="class">Sacado::FAD_NS::DFad</class>
    <class kind="struct">Sacado::FAD_NS::DFad::apply</class>
    <class kind="struct">Sacado::FAD_NS::BaseExpr&lt; GeneralFad&lt; T, Fad::DynamicStorage&lt; T &gt; &gt; &gt;</class>
    <class kind="struct">Sacado::FAD_NS::ExprLevel&lt; DFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::FAD_NS::IsFadExpr&lt; DFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsFad&lt; FAD_NS::DFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; FAD_NS::DFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; FAD_NS::DFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ViewFadType</class>
    <class kind="class">Sacado::FAD_NS::ViewFad</class>
    <class kind="struct">Sacado::ViewFadType&lt; Sacado::FAD_NS::DFad&lt; ValueType &gt;, length, stride &gt;</class>
    <class kind="struct">Sacado::ViewFadType&lt; const Sacado::FAD_NS::DFad&lt; ValueType &gt;, length, stride &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::FAD_NS</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_DFadTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__DFadTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::Fad::DFad</class>
    <class kind="struct">Sacado::ScalarType&lt; Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const Fad::DFad&lt; ValueT &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_DMFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__DMFad_8hpp</filename>
    <includes id="Sacado__Fad__GeneralFadExpr_8hpp" name="Sacado_Fad_GeneralFadExpr.hpp" local="yes" imported="no">Sacado_Fad_GeneralFadExpr.hpp</includes>
    <includes id="Sacado__Fad__DMFadTraits_8hpp" name="Sacado_Fad_DMFadTraits.hpp" local="yes" imported="no">Sacado_Fad_DMFadTraits.hpp</includes>
    <includes id="Sacado__Fad__MemPoolStorage_8hpp" name="Sacado_Fad_MemPoolStorage.hpp" local="yes" imported="no">Sacado_Fad_MemPoolStorage.hpp</includes>
    <class kind="class">Sacado::Fad::DMFad</class>
    <class kind="struct">Sacado::Fad::DMFad::apply</class>
    <class kind="struct">Sacado::Fad::BaseExpr&lt; GeneralFad&lt; T, Fad::MemPoolStorage&lt; T &gt; &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprLevel&lt; DMFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::IsFadExpr&lt; DMFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; Fad::DMFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; Fad::DMFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ViewFadType&lt; Sacado::Fad::DMFad&lt; ValueType &gt;, length, stride &gt;</class>
    <class kind="struct">Sacado::ViewFadType&lt; const Sacado::Fad::DMFad&lt; ValueType &gt;, length, stride &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_DMFadTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__DMFadTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::Fad::DMFad</class>
    <class kind="struct">Sacado::ScalarType&lt; Fad::DMFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Fad::DMFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Fad::DMFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Fad::DMFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Fad::DMFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Fad::DMFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Fad::DMFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; Fad::DMFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; Fad::DMFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsFad&lt; Fad::DMFad&lt; T &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_DVFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__DVFad_8hpp</filename>
    <includes id="Sacado__Fad__GeneralFadExpr_8hpp" name="Sacado_Fad_GeneralFadExpr.hpp" local="yes" imported="no">Sacado_Fad_GeneralFadExpr.hpp</includes>
    <includes id="Sacado__Fad__DVFadTraits_8hpp" name="Sacado_Fad_DVFadTraits.hpp" local="yes" imported="no">Sacado_Fad_DVFadTraits.hpp</includes>
    <includes id="Sacado__Fad__VectorDynamicStorage_8hpp" name="Sacado_Fad_VectorDynamicStorage.hpp" local="yes" imported="no">Sacado_Fad_VectorDynamicStorage.hpp</includes>
    <class kind="class">Sacado::Fad::DVFad</class>
    <class kind="struct">Sacado::Fad::DVFad::apply</class>
    <class kind="struct">Sacado::Fad::BaseExpr&lt; GeneralFad&lt; T, Fad::VectorDynamicStorage&lt; T &gt; &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprLevel&lt; DVFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::IsFadExpr&lt; DVFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; Fad::DVFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; Fad::DVFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ViewFadType&lt; Sacado::Fad::DVFad&lt; ValueType &gt;, length, stride &gt;</class>
    <class kind="struct">Sacado::ViewFadType&lt; const Sacado::Fad::DVFad&lt; ValueType &gt;, length, stride &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_DVFadTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__DVFadTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::Fad::DVFad</class>
    <class kind="struct">Sacado::ScalarType&lt; Fad::DVFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Fad::DVFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Fad::DVFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Fad::DVFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Fad::DVFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Fad::DVFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Fad::DVFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; Fad::DVFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; Fad::DVFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsFad&lt; Fad::DVFad&lt; T &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_DynamicStorage.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__DynamicStorage_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <includes id="Sacado__DynamicArrayTraits_8hpp" name="Sacado_DynamicArrayTraits.hpp" local="yes" imported="no">Sacado_DynamicArrayTraits.hpp</includes>
    <class kind="class">Sacado::Fad::DynamicStorage</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_Expression.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__Expression_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <includes id="Sacado__Fad__ExpressionFwd_8hpp" name="Sacado_Fad_ExpressionFwd.hpp" local="yes" imported="no">Sacado_Fad_ExpressionFwd.hpp</includes>
    <includes id="Sacado__SFINAE__Macros_8hpp" name="Sacado_SFINAE_Macros.hpp" local="yes" imported="no">Sacado_SFINAE_Macros.hpp</includes>
    <class kind="struct">Sacado::Fad::BaseExpr</class>
    <class kind="struct">Sacado::Fad::ExprSpecDefault</class>
    <class kind="struct">Sacado::Fad::ExprSpec</class>
    <class kind="class">Sacado::Fad::Expr</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt; Expr&lt; ExprT, Spec &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprLevel</class>
    <class kind="struct">Sacado::Fad::ExprLevel&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::IsFadExpr</class>
    <class kind="struct">Sacado::Fad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::Fad::ConstExpr</class>
    <class kind="struct">Sacado::IsExpr&lt; Fad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; Fad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Fad::ConstExpr&lt; T &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_ExpressionFwd.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__ExpressionFwd_8hpp</filename>
    <class kind="struct">Sacado::Fad::ExprSpec</class>
    <class kind="class">Sacado::Fad::Expr</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_ExpressionTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__ExpressionTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <includes id="Sacado__Fad__ExpressionFwd_8hpp" name="Sacado_Fad_ExpressionFwd.hpp" local="yes" imported="no">Sacado_Fad_ExpressionFwd.hpp</includes>
    <class kind="struct">Sacado::ScalarType&lt; Fad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Fad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Fad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Fad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Fad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Fad::Expr&lt; T &gt; &gt;</class>
    <namespace>Sacado</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_GeneralFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__GeneralFad_8hpp</filename>
    <includes id="Sacado__Fad__Expression_8hpp" name="Sacado_Fad_Expression.hpp" local="yes" imported="no">Sacado_Fad_Expression.hpp</includes>
    <class kind="class">Sacado::Fad::GeneralFad</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_GeneralFadExpr.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__GeneralFadExpr_8hpp</filename>
    <includes id="Sacado__Fad__GeneralFad_8hpp" name="Sacado_Fad_GeneralFad.hpp" local="yes" imported="no">Sacado_Fad_GeneralFad.hpp</includes>
    <includes id="Sacado__Fad__Ops_8hpp" name="Sacado_Fad_Ops.hpp" local="yes" imported="no">Sacado_Fad_Ops.hpp</includes>
    <class kind="class">Sacado::Fad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_LAPACK.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__LAPACK_8hpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__CacheFad__DFad_8hpp" name="Sacado_CacheFad_DFad.hpp" local="yes" imported="no">Sacado_CacheFad_DFad.hpp</includes>
    <includes id="Sacado__dummy__arg_8hpp" name="Sacado_dummy_arg.hpp" local="yes" imported="no">Sacado_dummy_arg.hpp</includes>
    <includes id="Sacado__Fad__LAPACKImp_8hpp" name="Sacado_Fad_LAPACKImp.hpp" local="yes" imported="no">Sacado_Fad_LAPACKImp.hpp</includes>
    <class kind="class">Sacado::Fad::ArrayTraits</class>
    <class kind="struct">Sacado::Fad::ArrayValueType</class>
    <class kind="class">Sacado::Fad::Fad_LAPACK</class>
    <class kind="class">Teuchos::LAPACK&lt; OrdinalType, Sacado::Fad::DFad&lt; ScalarType &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
    <namespace>Teuchos</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_LAPACKImp.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__LAPACKImp_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_MemPool.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__MemPool_8hpp</filename>
    <includes id="Sacado__Fad__MemPoolImp_8hpp" name="Sacado_Fad_MemPoolImp.hpp" local="yes" imported="no">Sacado_Fad_MemPoolImp.hpp</includes>
    <class kind="class">Sacado::Fad::MemPool</class>
    <class kind="struct">Sacado::Fad::MemPool::Link</class>
    <class kind="struct">Sacado::Fad::MemPool::Chunk</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_MemPoolImp.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__MemPoolImp_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_MemPoolManager.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__MemPoolManager_8hpp</filename>
    <includes id="Sacado__Fad__MemPool_8hpp" name="Sacado_Fad_MemPool.hpp" local="yes" imported="no">Sacado_Fad_MemPool.hpp</includes>
    <includes id="Sacado__Fad__MemPoolManagerImp_8hpp" name="Sacado_Fad_MemPoolManagerImp.hpp" local="yes" imported="no">Sacado_Fad_MemPoolManagerImp.hpp</includes>
    <class kind="class">Sacado::Fad::MemPoolManager</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_MemPoolManagerImp.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__MemPoolManagerImp_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_MemPoolStorage.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__MemPoolStorage_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <includes id="Sacado__Fad__MemPool_8hpp" name="Sacado_Fad_MemPool.hpp" local="yes" imported="no">Sacado_Fad_MemPool.hpp</includes>
    <class kind="struct">Sacado::Fad::mp_array</class>
    <class kind="struct">Sacado::Fad::mp_array&lt; T, true &gt;</class>
    <class kind="class">Sacado::Fad::MemPoolStorage</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_Ops.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__Ops_8hpp</filename>
    <includes id="Sacado__Fad__Expression_8hpp" name="Sacado_Fad_Expression.hpp" local="yes" imported="no">Sacado_Fad_Expression.hpp</includes>
    <includes id="Sacado__cmath_8hpp" name="Sacado_cmath.hpp" local="yes" imported="no">Sacado_cmath.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FAD_UNARYOP_MACRO</name>
      <anchorfile>Sacado__Fad__Ops_8hpp.html</anchorfile>
      <anchor>a384fc092fafa7cf17e52717906211932</anchor>
      <arglist>(OPNAME, OP, VALUE, DX, FASTACCESSDX)                        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAD_BINARYOP_MACRO</name>
      <anchorfile>Sacado__Fad__Ops_8hpp.html</anchorfile>
      <anchor>a8f73e6eeb132698afbcbdbf551c118a5</anchor>
      <arglist>(OPNAME, OP, VALUE, DX, FASTACCESSDX, VAL_CONST_DX_1, VAL_CONST_DX_2, CONST_DX_1, CONST_DX_2, CONST_FASTACCESSDX_1, CONST_FASTACCESSDX_2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAD_RELOP_MACRO</name>
      <anchorfile>Sacado__Fad__Ops_8hpp.html</anchorfile>
      <anchor>a8963d8510b49e7905580a2e40ab08d22</anchor>
      <arglist>(OP)                                                                                      </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAD_BOOL_MACRO</name>
      <anchorfile>Sacado__Fad__Ops_8hpp.html</anchorfile>
      <anchor>a67fb9ceb42c14d71c1b20762a5beb0b7</anchor>
      <arglist>(OP)                                                                                        </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FAD_UNARYOP_MACRO</name>
      <anchorfile>Sacado__Fad__Ops_8hpp.html</anchorfile>
      <anchor>aa8ec6ce28acb7e2f138509842289eb51</anchor>
      <arglist>(operator+, UnaryPlusOp, expr.val(), expr.dx(i), expr.fastAccessDx(i)) FAD_UNARYOP_MACRO(operator-</arglist>
    </member>
    <member kind="function">
      <type>expr</type>
      <name>val</name>
      <anchorfile>Sacado__Fad__Ops_8hpp.html</anchorfile>
      <anchor>a34e7604344768126f686c0ca7cf92a06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>expr expr</type>
      <name>dx</name>
      <anchorfile>Sacado__Fad__Ops_8hpp.html</anchorfile>
      <anchor>abb4a6e946a5038c6bff5d05c042cb464</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="function">
      <type>expr expr expr</type>
      <name>fastAccessDx</name>
      <anchorfile>Sacado__Fad__Ops_8hpp.html</anchorfile>
      <anchor>a34c649a72ce5f35ef2ca9b1794eb4db7</anchor>
      <arglist>(i)) FAD_UNARYOP_MACRO(exp</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>UnaryMinusOp</name>
      <anchorfile>Sacado__Fad__Ops_8hpp.html</anchorfile>
      <anchor>af9b804f38436f1f680d4b16c85f3b6a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr expr expr</type>
      <name>ExpOp</name>
      <anchorfile>Sacado__Fad__Ops_8hpp.html</anchorfile>
      <anchor>aaaa187eacdc4b61d4d2311fd8a7ff1c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr expr expr</type>
      <name>LogOp</name>
      <anchorfile>Sacado__Fad__Ops_8hpp.html</anchorfile>
      <anchor>a9b4f88520771d45be0f2babf724ac842</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr expr expr expr expr</type>
      <name>Log10Op</name>
      <anchorfile>Sacado__Fad__Ops_8hpp.html</anchorfile>
      <anchor>abdadb0b985928fc3af023b0ca51a189c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_ScalarTraitsImp.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__ScalarTraitsImp_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_SFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__SFad_8hpp</filename>
    <includes id="Sacado__Fad__SFadTraits_8hpp" name="Sacado_Fad_SFadTraits.hpp" local="yes" imported="no">Sacado_Fad_SFadTraits.hpp</includes>
    <includes id="Sacado__Fad__Expression_8hpp" name="Sacado_Fad_Expression.hpp" local="yes" imported="no">Sacado_Fad_Expression.hpp</includes>
    <includes id="Sacado__StaticArrayTraits_8hpp" name="Sacado_StaticArrayTraits.hpp" local="yes" imported="no">Sacado_StaticArrayTraits.hpp</includes>
    <includes id="Sacado__Fad__SFad__tmpl_8hpp" name="Sacado_Fad_SFad_tmpl.hpp" local="yes" imported="no">Sacado_Fad_SFad_tmpl.hpp</includes>
    <includes id="Sacado__Fad__ViewFad_8hpp" name="Sacado_Fad_ViewFad.hpp" local="yes" imported="no">Sacado_Fad_ViewFad.hpp</includes>
    <includes id="Sacado__Fad__Ops_8hpp" name="Sacado_Fad_Ops.hpp" local="yes" imported="no">Sacado_Fad_Ops.hpp</includes>
    <class kind="struct">Sacado::Fad::SFadExprTag</class>
    <class kind="class">Sacado::Fad::SFad</class>
    <class kind="class">Sacado::Fad::Expr&lt; SFadExprTag&lt; T, Num &gt;, ExprSpecDefault &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FAD_NS</name>
      <anchorfile>Sacado__Fad__SFad_8hpp.html</anchorfile>
      <anchor>a2d8b22d09d1775993725ad3b5bc72e1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_SFad_tmpl.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__SFad__tmpl_8hpp</filename>
    <class kind="class">Sacado::FAD_NS::SFad</class>
    <class kind="struct">Sacado::FAD_NS::SFad::apply</class>
    <class kind="struct">Sacado::FAD_NS::ExprLevel&lt; SFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::FAD_NS::IsFadExpr&lt; SFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::IsFad&lt; FAD_NS::SFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; FAD_NS::SFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; FAD_NS::SFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::ViewFadType</class>
    <class kind="class">Sacado::FAD_NS::ViewFad</class>
    <class kind="struct">Sacado::ViewFadType&lt; Sacado::FAD_NS::SFad&lt; ValueType, N &gt;, length, stride &gt;</class>
    <class kind="struct">Sacado::ViewFadType&lt; const Sacado::FAD_NS::SFad&lt; ValueType, N &gt;, length, stride &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::FAD_NS</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSacado_1_1FAD__NS.html</anchorfile>
      <anchor>a561964236698eb6b061587435855fabb</anchor>
      <arglist>(std::ostream &amp;os, const Expr&lt; SFadExprTag&lt; T, Num &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_SFadTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__SFadTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::Fad::SFad</class>
    <class kind="struct">Sacado::ScalarType&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StaticSize&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StaticSize&lt; const Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_SimpleFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__SimpleFad_8hpp</filename>
    <includes id="Sacado__Fad__SimpleFadTraits_8hpp" name="Sacado_Fad_SimpleFadTraits.hpp" local="yes" imported="no">Sacado_Fad_SimpleFadTraits.hpp</includes>
    <includes id="Sacado__Fad__DynamicStorage_8hpp" name="Sacado_Fad_DynamicStorage.hpp" local="yes" imported="no">Sacado_Fad_DynamicStorage.hpp</includes>
    <includes id="Sacado__Fad__SimpleFadOps_8hpp" name="Sacado_Fad_SimpleFadOps.hpp" local="yes" imported="no">Sacado_Fad_SimpleFadOps.hpp</includes>
    <class kind="class">Sacado::Fad::SimpleFad</class>
    <class kind="struct">Sacado::Fad::SimpleFad::apply</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_SimpleFadImp.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__SimpleFadImp_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_SimpleFadOps.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__SimpleFadOps_8hpp</filename>
    <includes id="Sacado__cmath_8hpp" name="Sacado_cmath.hpp" local="yes" imported="no">Sacado_cmath.hpp</includes>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FAD_RELOP_MACRO</name>
      <anchorfile>Sacado__Fad__SimpleFadOps_8hpp.html</anchorfile>
      <anchor>a78d1a97e265a2db6eca03c7959893d2c</anchor>
      <arglist>(OP)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAD_BOOL_MACRO</name>
      <anchorfile>Sacado__Fad__SimpleFadOps_8hpp.html</anchorfile>
      <anchor>a99693f5921c401c7afa5f7d0e688bef3</anchor>
      <arglist>(OP)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>ae9c5fe24c224b4487ceb41d43fabf1bf</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a5a68d284f5f7185f628f130bc384800a</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>exp</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a38e9de03465276b030c0786576fc0830</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>log</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a6503354dc19c1e0c29c05c2cbf414978</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>log10</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>ad386a2e651865a45bbc02efd1c5e7c97</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>sqrt</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a10c35516bc7eb5447972c07468434757</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>cos</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>aaa2b6e9bbd05495f826c3b7cba5cf0cf</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>sin</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>ad9fa19aa13abca10928eba5b7f884278</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>tan</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a397a1ba92ef1e3bb877d36c65ad7a4ef</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>acos</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>abe8710dfaaafae1c38660642362ef14a</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>asin</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a0cc613446c8d7f6a83ec278d06b74818</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>atan</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a39f96326944b765b69fd9ab1f0bd6653</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>cosh</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a5a05ba0585a946846bd1d2f1dfb1fe69</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>sinh</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a7cb71a7dfc473ceacf575b71607d341a</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>tanh</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>aa0c4d73692dcb7b7e72b6fc6cb9e8eec</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>acosh</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>ad600f23cb25e0b2f9ea71b190b491ae4</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>asinh</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>aeab64cea7b8cf45086f5644a2dee7c17</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>atanh</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a471d3e5f3c3e96dc4f299d371f6bb2ca</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>adcd9504e6dd413cc73342488a80769ee</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>fabs</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>aa001e3f89cfbb673e5c9c773b62d0173</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>af4d62764ff937a0097f0d54943a89fb3</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a3bbfe7efdfa95d2ee9a56b121cb4aa6c</anchor>
      <arglist>(const typename SimpleFad&lt; ValueT &gt;::value_type &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a3d32ada319b3b8a9a168f6704efb7140</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const typename SimpleFad&lt; ValueT &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a7ad5d89f4094a81cc50496eacae91410</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a0495dbd2c834fd6f05a331dd73c996f6</anchor>
      <arglist>(const typename SimpleFad&lt; ValueT &gt;::value_type &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a54b72661ef7d1b77db2b907f464a904e</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const typename SimpleFad&lt; ValueT &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a7551e0e7a2ad456ead99ad0311c29005</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>acfea298bd10c32ac88c784db630999f3</anchor>
      <arglist>(const typename SimpleFad&lt; ValueT &gt;::value_type &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>ae5c67c829832df1ffe73bf8946361a8f</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const typename SimpleFad&lt; ValueT &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>ac9d8d0e66f242794c7eb74f0cf602474</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a5748f16687e209a7fbccdf88c0f9d4b8</anchor>
      <arglist>(const typename SimpleFad&lt; ValueT &gt;::value_type &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a60632733609e64f1bbdd2561aadebc56</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const typename SimpleFad&lt; ValueT &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a0824ca2fb614f193ab61be067b4370fa</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a9743b793195b47cd3e1fcc0f23efbfaa</anchor>
      <arglist>(const typename SimpleFad&lt; ValueT &gt;::value_type &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>ad407a0317f1da677a8e6e11df49e249d</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const typename SimpleFad&lt; ValueT &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>acf472305a360b9157280d67e9f2d9e39</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>aa9468337aa6a2a181fd2e352d227f924</anchor>
      <arglist>(const typename SimpleFad&lt; ValueT &gt;::value_type &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a90c0378c42914f8ca8a3ad19b48425b4</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const typename SimpleFad&lt; ValueT &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a4b7012fb5c12b7e4828c444fb18dde5c</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>ada01b0a433e934e2f3164465358a41db</anchor>
      <arglist>(const typename SimpleFad&lt; ValueT &gt;::value_type &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a2fd01470007493b205e51379940aca46</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const typename SimpleFad&lt; ValueT &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a793e4fdad4d66b1f8e920a65deced0f9</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>ad6a11737d4f4fd72b9f7973acb944c46</anchor>
      <arglist>(const typename SimpleFad&lt; ValueT &gt;::value_type &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a3e71d1e806ed75d1649137fa16820d13</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const typename SimpleFad&lt; ValueT &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a7f2af5c533adda70c79161c684c7216a</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toBool</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a9d860ac386960c4690a65620118b5149</anchor>
      <arglist>(const SimpleFad&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a2c37c6aacf670ee05fa12175a50ea7db</anchor>
      <arglist>(std::ostream &amp;os, const SimpleFad&lt; ValueT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_SimpleFadTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__SimpleFadTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::Fad::SimpleFad</class>
    <class kind="struct">Sacado::ScalarType&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsFad&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_SLFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__SLFad_8hpp</filename>
    <includes id="Sacado__Fad__GeneralFadExpr_8hpp" name="Sacado_Fad_GeneralFadExpr.hpp" local="yes" imported="no">Sacado_Fad_GeneralFadExpr.hpp</includes>
    <includes id="Sacado__Fad__SLFadTraits_8hpp" name="Sacado_Fad_SLFadTraits.hpp" local="yes" imported="no">Sacado_Fad_SLFadTraits.hpp</includes>
    <includes id="Sacado__Fad__StaticStorage_8hpp" name="Sacado_Fad_StaticStorage.hpp" local="yes" imported="no">Sacado_Fad_StaticStorage.hpp</includes>
    <includes id="Sacado__Fad__SLFad__tmpl_8hpp" name="Sacado_Fad_SLFad_tmpl.hpp" local="yes" imported="no">Sacado_Fad_SLFad_tmpl.hpp</includes>
    <includes id="Sacado__Fad__ViewFad_8hpp" name="Sacado_Fad_ViewFad.hpp" local="yes" imported="no">Sacado_Fad_ViewFad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FAD_NS</name>
      <anchorfile>Sacado__Fad__SLFad_8hpp.html</anchorfile>
      <anchor>a2d8b22d09d1775993725ad3b5bc72e1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_SLFad_tmpl.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__SLFad__tmpl_8hpp</filename>
    <class kind="class">Sacado::FAD_NS::StaticStorage</class>
    <class kind="class">Sacado::FAD_NS::SLFad</class>
    <class kind="struct">Sacado::FAD_NS::SLFad::apply</class>
    <class kind="struct">Sacado::FAD_NS::BaseExpr&lt; GeneralFad&lt; T, Fad::StaticStorage&lt; T, N &gt; &gt; &gt;</class>
    <class kind="struct">Sacado::FAD_NS::ExprLevel&lt; SLFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::FAD_NS::IsFadExpr&lt; SLFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::IsFad&lt; FAD_NS::SLFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; FAD_NS::SLFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; FAD_NS::SLFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::ViewFadType</class>
    <class kind="class">Sacado::FAD_NS::ViewFad</class>
    <class kind="struct">Sacado::ViewFadType&lt; Sacado::FAD_NS::SLFad&lt; ValueType, N &gt;, length, stride &gt;</class>
    <class kind="struct">Sacado::ViewFadType&lt; const Sacado::FAD_NS::SLFad&lt; ValueType, N &gt;, length, stride &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::FAD_NS</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_SLFadTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__SLFadTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::Fad::SLFad</class>
    <class kind="struct">Sacado::ScalarType&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_StaticStorage.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__StaticStorage_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
    <includes id="Sacado__StaticArrayTraits_8hpp" name="Sacado_StaticArrayTraits.hpp" local="yes" imported="no">Sacado_StaticArrayTraits.hpp</includes>
    <class kind="class">Sacado::Fad::StaticStorage</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_Vector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__Vector_8hpp</filename>
    <includes id="Sacado__Fad__DVFad_8hpp" name="Sacado_Fad_DVFad.hpp" local="yes" imported="no">Sacado_Fad_DVFad.hpp</includes>
    <includes id="Sacado__Fad__VectorImp_8hpp" name="Sacado_Fad_VectorImp.hpp" local="yes" imported="no">Sacado_Fad_VectorImp.hpp</includes>
    <class kind="class">Sacado::Fad::Vector</class>
    <class kind="class">Sacado::Fad::Vector&lt; OrdinalType, Sacado::Fad::DVFad&lt; ValueType &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
    <member kind="enumeration">
      <type></type>
      <name>VectorDerivOrientation</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a0dd78c50f081900d819c9588e944addf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Row</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a0dd78c50f081900d819c9588e944addfa1deea0f6e99534c0ef2fbb62e3c74b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Column</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a0dd78c50f081900d819c9588e944addfaaa10cbcec904e961ff97edff796f11a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_VectorDynamicStorage.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__VectorDynamicStorage_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <includes id="Sacado__DynamicArrayTraits_8hpp" name="Sacado_DynamicArrayTraits.hpp" local="yes" imported="no">Sacado_DynamicArrayTraits.hpp</includes>
    <class kind="class">Sacado::Fad::VectorDynamicStorage</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_VectorImp.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__VectorImp_8hpp</filename>
    <includes id="Sacado__DynamicArrayTraits_8hpp" name="Sacado_DynamicArrayTraits.hpp" local="yes" imported="no">Sacado_DynamicArrayTraits.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_ViewFad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__ViewFad_8hpp</filename>
    <includes id="Sacado__Fad__GeneralFadExpr_8hpp" name="Sacado_Fad_GeneralFadExpr.hpp" local="yes" imported="no">Sacado_Fad_GeneralFadExpr.hpp</includes>
    <includes id="Sacado__Fad__ViewFadTraits_8hpp" name="Sacado_Fad_ViewFadTraits.hpp" local="yes" imported="no">Sacado_Fad_ViewFadTraits.hpp</includes>
    <includes id="Sacado__Fad__ViewStorage_8hpp" name="Sacado_Fad_ViewStorage.hpp" local="yes" imported="no">Sacado_Fad_ViewStorage.hpp</includes>
    <includes id="Sacado__Fad__ViewFad__tmpl_8hpp" name="Sacado_Fad_ViewFad_tmpl.hpp" local="yes" imported="no">Sacado_Fad_ViewFad_tmpl.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FAD_NS</name>
      <anchorfile>Sacado__Fad__ViewFad_8hpp.html</anchorfile>
      <anchor>a2d8b22d09d1775993725ad3b5bc72e1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_ViewFad_tmpl.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__ViewFad__tmpl_8hpp</filename>
    <includes id="Sacado__mpl__apply_8hpp" name="Sacado_mpl_apply.hpp" local="yes" imported="no">Sacado_mpl_apply.hpp</includes>
    <includes id="Sacado__mpl__if_8hpp" name="Sacado_mpl_if.hpp" local="yes" imported="no">Sacado_mpl_if.hpp</includes>
    <includes id="Sacado__mpl__type__wrap_8hpp" name="Sacado_mpl_type_wrap.hpp" local="yes" imported="no">Sacado_mpl_type_wrap.hpp</includes>
    <class kind="class">Sacado::FAD_NS::ViewFad</class>
    <class kind="struct">Sacado::FAD_NS::ViewFad::apply</class>
    <class kind="struct">Sacado::FAD_NS::BaseExpr&lt; GeneralFad&lt; T, Fad::ViewStorage&lt; T, l, s, U &gt; &gt; &gt;</class>
    <class kind="struct">Sacado::FAD_NS::ExprLevel&lt; ViewFad&lt; T, l, s, U &gt; &gt;</class>
    <class kind="struct">Sacado::FAD_NS::IsFadExpr&lt; ViewFad&lt; T, l, s, U &gt; &gt;</class>
    <class kind="struct">Sacado::IsView&lt; Sacado::FAD_NS::ViewFad&lt; T, l, s, U &gt; &gt;</class>
    <class kind="struct">Sacado::IsFad&lt; FAD_NS::ViewFad&lt; T, l, s, U &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; FAD_NS::ViewFad&lt; T, l, s, U &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; FAD_NS::ViewFad&lt; T, l, s, U &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::FAD_NS</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_ViewFadTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__ViewFadTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::Fad::ViewFad</class>
    <class kind="struct">Sacado::ScalarType&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Fad_ViewStorage.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Fad__ViewStorage_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <includes id="Sacado__DynamicArrayTraits_8hpp" name="Sacado_DynamicArrayTraits.hpp" local="yes" imported="no">Sacado_DynamicArrayTraits.hpp</includes>
    <includes id="Sacado__mpl__integral__nonzero__constant_8hpp" name="Sacado_mpl_integral_nonzero_constant.hpp" local="yes" imported="no">Sacado_mpl_integral_nonzero_constant.hpp</includes>
    <class kind="class">Sacado::Fad::ViewStorage</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Fad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Handle.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Handle_8hpp</filename>
    <class kind="class">Sacado::Handle</class>
    <namespace>Sacado</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado.html</anchorfile>
      <anchor>ac3639a589ecf092129b7ea7aad975e4e</anchor>
      <arglist>(const Handle&lt; T &gt; &amp;h1, const Handle&lt; T &gt; &amp;h2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_LFad_ExpressionTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__LFad__ExpressionTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::LFad::Expr</class>
    <class kind="struct">Sacado::ScalarType&lt; LFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; LFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; LFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; LFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; LFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; LFad::Expr&lt; T &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::LFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_LFad_LogicalSparse.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__LFad__LogicalSparse_8hpp</filename>
    <includes id="Sacado__LFad__LogicalSparseTraits_8hpp" name="Sacado_LFad_LogicalSparseTraits.hpp" local="yes" imported="no">Sacado_LFad_LogicalSparseTraits.hpp</includes>
    <includes id="Sacado__LFad__ExpressionTraits_8hpp" name="Sacado_LFad_ExpressionTraits.hpp" local="yes" imported="no">Sacado_LFad_ExpressionTraits.hpp</includes>
    <includes id="Sacado__Fad__DynamicStorage_8hpp" name="Sacado_Fad_DynamicStorage.hpp" local="yes" imported="no">Sacado_Fad_DynamicStorage.hpp</includes>
    <includes id="Sacado__LFad__LogicalSparseOps_8hpp" name="Sacado_LFad_LogicalSparseOps.hpp" local="yes" imported="no">Sacado_LFad_LogicalSparseOps.hpp</includes>
    <class kind="class">Sacado::LFad::Expr</class>
    <class kind="struct">Sacado::LFad::ExprLevel</class>
    <class kind="struct">Sacado::LFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::LFad::IsFadExpr</class>
    <class kind="struct">Sacado::LFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::LFad::LogicalSparse</class>
    <class kind="class">Sacado::LFad::LogicalSparseImp</class>
    <class kind="class">Sacado::LFad::Expr&lt; LogicalSparseImp&lt; ValT, LogT &gt; &gt;</class>
    <class kind="class">Sacado::LFad::LogicalSparse</class>
    <class kind="struct">Sacado::LFad::LogicalSparse::apply</class>
    <class kind="struct">Sacado::LFad::ExprLevel&lt; LogicalSparse&lt; T, L &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; LFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; LFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; LFad::LogicalSparse&lt; T, L &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; LFad::LogicalSparse&lt; T, L &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::LFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_LFad_LogicalSparseOps.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__LFad__LogicalSparseOps_8hpp</filename>
    <member kind="define">
      <type>#define</type>
      <name>FAD_UNARYOP_MACRO</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>acf8a8d77e312b16114283b4645d0b574</anchor>
      <arglist>(OPNAME, OP, VALUE)                                                        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAD_BINARYOP_MACRO</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a8f73e6eeb132698afbcbdbf551c118a5</anchor>
      <arglist>(OPNAME, OP, VALUE, DX, FASTACCESSDX, VAL_CONST_DX_1, VAL_CONST_DX_2, CONST_DX_1, CONST_DX_2, CONST_FASTACCESSDX_1, CONST_FASTACCESSDX_2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAD_RELOP_MACRO</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a8963d8510b49e7905580a2e40ab08d22</anchor>
      <arglist>(OP)                                                                                      </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FAD_BOOL_MACRO</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a67fb9ceb42c14d71c1b20762a5beb0b7</anchor>
      <arglist>(OP)                                                                                        </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FAD_UNARYOP_MACRO</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a0ba7071f07892b40416344cf25dd0b93</anchor>
      <arglist>(operator+, UnaryPlusOp, expr.val()) FAD_UNARYOP_MACRO(operator-</arglist>
    </member>
    <member kind="function">
      <type>expr</type>
      <name>val</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>acffaf1eb02fab761fa92f3541e3201f2</anchor>
      <arglist>()) FAD_UNARYOP_MACRO(exp</arglist>
    </member>
    <member kind="function">
      <type>expr</type>
      <name>acosh</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>ae246b2ff78196978a5686775c00bacf5</anchor>
      <arglist>(expr.val())) FAD_UNARYOP_MACRO(asinh</arglist>
    </member>
    <member kind="function">
      <type>expr</type>
      <name>asinh</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a822dcf47517aff3d5489df69604f9ed1</anchor>
      <arglist>(expr.val())) FAD_UNARYOP_MACRO(atanh</arglist>
    </member>
    <member kind="function">
      <type>expr</type>
      <name>atanh</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>adc5641e992b07de84d5ab56bb5efd937</anchor>
      <arglist>(expr.val())) FAD_UNARYOP_MACRO(abs</arglist>
    </member>
    <member kind="function">
      <type>expr expr1 expr1</type>
      <name>dx</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a41de773b503d691e6f264ebf8d660f5f</anchor>
      <arglist>(i)||expr2.dx(i)</arglist>
    </member>
    <member kind="function">
      <type>expr expr1 expr1 expr1</type>
      <name>fastAccessDx</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>afa62566dc902fb31a0213acfc64d4f79</anchor>
      <arglist>(i)||expr2.fastAccessDx(i)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>UnaryMinusOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>af9b804f38436f1f680d4b16c85f3b6a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>ExpOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>ae2064f769ab17ed602e4b94ddebed4ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>LogOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a7a3fe2ce7c92672cc08dcff1538633bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>Log10Op</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>afe77dd0be3e418bdc61afe75d7a61592</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>SqrtOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a041ec1c299aca085b68f2feee90463bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>CosOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>ab784864400457735e5e554719c375b45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>SinOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>abd0082e282d1fbdfb3e5463d3805e035</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>TanOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a18efef978e9c90d8598459ea4a926262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>ACosOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a36490d2b134da12ee09ccd139274fb9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>ASinOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a90986390123195c1c8f3b78b3c754a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>ATanOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a039a17f0d54d2e4a2a67d6cd24a313a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>CoshOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a4b869e3a3f7ff0abcf13ce3682ea6a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>SinhOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>ac019b1b5da63b6744c4b9a9a6bd38f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>TanhOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a741449eb29cce9d8b927e56799801b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>ACoshOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a4ad0f9a37388f191c33b27d3813a88bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>ASinhOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>acd4fb287ad919099ec98fcdadc6a9bca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>ATanhOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a996d818ef7107d7a7c60336d752eff9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>AbsOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a077dedc0e79b2e9de135d030f7d16579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>FAbsOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a6698994e1dd4d31d20da0bc7ebc21d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr</type>
      <name>AdditionOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>ae241c9c0e2ab159bca7a388775b53453</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr expr1 expr1 expr1 c expr2 expr1 expr2 expr1 expr2 expr1</type>
      <name>SubtractionOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a470d0330087520a4f1268b16b8b8f224</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr expr1 expr1 expr1 c expr2 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr1 c expr2 expr1 expr2 expr1 expr2 expr1</type>
      <name>MultiplicationOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>ab3342fea995290ccd4c015001e96e52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr expr1 expr1 expr1 c expr2 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr1 c expr2 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr1 c *expr2 expr1 expr2 expr1 expr2 expr1</type>
      <name>DivisionOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>aaf73dd85e6d2985970469eb2841834bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr expr1 expr1 expr1 c expr2 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr1 c expr2 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr1 c *expr2 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr1 c expr2 expr1 expr2 expr1 expr2 expr1</type>
      <name>Atan2Op</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a92638a7869db183457b3279249ba7b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr expr1 expr1 expr1 c expr2 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr1 c expr2 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr1 c *expr2 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr1 c expr2 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr2 expr1 expr2 expr1</type>
      <name>PowerOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>ab6312d4cb1931f0fa6459f018bad4a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr expr1 expr1 expr1 c expr2 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr1 c expr2 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr1 c *expr2 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr1 c expr2 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr2 expr1 expr2 expr1</type>
      <name>MaxOp</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a5131cedf04878812a89c7be9706e8cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>expr expr1 expr1 expr1 c expr2 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr1 c expr2 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr1 c *expr2 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr1 c expr2 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr2 expr1 expr2 expr1 expr1 expr1 expr2 expr1 expr2 expr1 expr1 expr1</type>
      <name>c</name>
      <anchorfile>Sacado__LFad__LogicalSparseOps_8hpp.html</anchorfile>
      <anchor>a5e882b140eba69026872cc6d9d168b42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_LFad_LogicalSparseTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__LFad__LogicalSparseTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::LFad::LogicalSparse</class>
    <class kind="class">Sacado::LFad::Expr</class>
    <class kind="struct">Sacado::ScalarType&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::LFad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_MathFunctions.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__MathFunctions_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
    <includes id="Sacado__Base_8hpp" name="Sacado_Base.hpp" local="yes" imported="no">Sacado_Base.hpp</includes>
    <includes id="Sacado__Fad__ExpressionFwd_8hpp" name="Sacado_Fad_ExpressionFwd.hpp" local="yes" imported="no">Sacado_Fad_ExpressionFwd.hpp</includes>
    <includes id="Sacado__SFINAE__Macros_8hpp" name="Sacado_SFINAE_Macros.hpp" local="yes" imported="no">Sacado_SFINAE_Macros.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>UNARYFUNC_MACRO</name>
      <anchorfile>Sacado__MathFunctions_8hpp.html</anchorfile>
      <anchor>a2175196178dec51b9f9dfdd0e230026f</anchor>
      <arglist>(OP, FADOP)                                                                          </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BINARYFUNC_MACRO</name>
      <anchorfile>Sacado__MathFunctions_8hpp.html</anchorfile>
      <anchor>a17e3a4e45148576e71043feddbe5ecc6</anchor>
      <arglist>(OP, FADOP)                                                                        </arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_apply.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__apply_8hpp</filename>
    <includes id="Sacado__mpl__apply__wrap_8hpp" name="Sacado_mpl_apply_wrap.hpp" local="yes" imported="no">Sacado_mpl_apply_wrap.hpp</includes>
    <includes id="Sacado__mpl__lambda_8hpp" name="Sacado_mpl_lambda.hpp" local="yes" imported="no">Sacado_mpl_lambda.hpp</includes>
    <includes id="Sacado__mpl__none_8hpp" name="Sacado_mpl_none.hpp" local="yes" imported="no">Sacado_mpl_none.hpp</includes>
    <class kind="struct">Sacado::mpl::apply0</class>
    <class kind="struct">Sacado::mpl::apply1</class>
    <class kind="struct">Sacado::mpl::apply2</class>
    <class kind="struct">Sacado::mpl::apply3</class>
    <class kind="struct">Sacado::mpl::apply4</class>
    <class kind="struct">Sacado::mpl::apply5</class>
    <class kind="struct">Sacado::mpl::apply</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_apply_wrap.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__apply__wrap_8hpp</filename>
    <includes id="Sacado__mpl__none_8hpp" name="Sacado_mpl_none.hpp" local="yes" imported="no">Sacado_mpl_none.hpp</includes>
    <class kind="struct">Sacado::mpl::apply_wrap0</class>
    <class kind="struct">Sacado::mpl::apply_wrap1</class>
    <class kind="struct">Sacado::mpl::apply_wrap2</class>
    <class kind="struct">Sacado::mpl::apply_wrap3</class>
    <class kind="struct">Sacado::mpl::apply_wrap4</class>
    <class kind="struct">Sacado::mpl::apply_wrap5</class>
    <class kind="struct">Sacado::mpl::apply_wrap</class>
    <class kind="struct">Sacado::mpl::apply_wrap&lt; F, A1, A2, A3, A4, mpl::none &gt;</class>
    <class kind="struct">Sacado::mpl::apply_wrap&lt; F, A1, A2, A3, mpl::none, mpl::none &gt;</class>
    <class kind="struct">Sacado::mpl::apply_wrap&lt; F, A1, A2, mpl::none, mpl::none, mpl::none &gt;</class>
    <class kind="struct">Sacado::mpl::apply_wrap&lt; F, A1, mpl::none, mpl::none, mpl::none, mpl::none &gt;</class>
    <class kind="struct">Sacado::mpl::apply_wrap&lt; F, mpl::none, mpl::none, mpl::none, mpl::none, mpl::none &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_at.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__at_8hpp</filename>
    <class kind="struct">Sacado::mpl::at_impl</class>
    <class kind="struct">Sacado::mpl::at</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_begin.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__begin_8hpp</filename>
    <class kind="struct">Sacado::mpl::begin_impl</class>
    <class kind="struct">Sacado::mpl::begin</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_bind.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__bind_8hpp</filename>
    <includes id="Sacado__mpl__placeholders_8hpp" name="Sacado_mpl_placeholders.hpp" local="yes" imported="no">Sacado_mpl_placeholders.hpp</includes>
    <includes id="Sacado__mpl__is__same_8hpp" name="Sacado_mpl_is_same.hpp" local="yes" imported="no">Sacado_mpl_is_same.hpp</includes>
    <includes id="Sacado__mpl__apply__wrap_8hpp" name="Sacado_mpl_apply_wrap.hpp" local="yes" imported="no">Sacado_mpl_apply_wrap.hpp</includes>
    <class kind="struct">Sacado::mpl::hk</class>
    <class kind="struct">Sacado::mpl::hk&lt; k, arg&lt; N &gt;, T1, T2, T3, T4, T5 &gt;</class>
    <class kind="struct">Sacado::mpl::hk&lt; k, arg&lt;-1 &gt;, T1, T2, T3, T4, T5 &gt;</class>
    <class kind="struct">Sacado::mpl::bind1</class>
    <class kind="struct">Sacado::mpl::bind1::apply</class>
    <class kind="struct">Sacado::mpl::bind2</class>
    <class kind="struct">Sacado::mpl::bind2::apply</class>
    <class kind="struct">Sacado::mpl::bind3</class>
    <class kind="struct">Sacado::mpl::bind3::apply</class>
    <class kind="struct">Sacado::mpl::bind4</class>
    <class kind="struct">Sacado::mpl::bind4::apply</class>
    <class kind="struct">Sacado::mpl::bind5</class>
    <class kind="struct">Sacado::mpl::bind5::apply</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_deref.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__deref_8hpp</filename>
    <class kind="struct">Sacado::mpl::deref</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_disable_if.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__disable__if_8hpp</filename>
    <class kind="struct">Sacado::mpl::disable_if_c</class>
    <class kind="struct">Sacado::mpl::disable_if_c&lt; false, T &gt;</class>
    <class kind="struct">Sacado::mpl::disable_if</class>
    <class kind="struct">Sacado::mpl::lazy_disable_if_c</class>
    <class kind="struct">Sacado::mpl::lazy_disable_if_c&lt; false, T &gt;</class>
    <class kind="struct">Sacado::mpl::lazy_disable_if</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_enable_if.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__enable__if_8hpp</filename>
    <class kind="struct">Sacado::mpl::enable_if_c</class>
    <class kind="struct">Sacado::mpl::enable_if_c&lt; true, T &gt;</class>
    <class kind="struct">Sacado::mpl::enable_if</class>
    <class kind="struct">Sacado::mpl::lazy_enable_if_c</class>
    <class kind="struct">Sacado::mpl::lazy_enable_if_c&lt; true, T &gt;</class>
    <class kind="struct">Sacado::mpl::lazy_enable_if</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_end.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__end_8hpp</filename>
    <class kind="struct">Sacado::mpl::end_impl</class>
    <class kind="struct">Sacado::mpl::end</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_find.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__find_8hpp</filename>
    <includes id="Sacado__mpl__none_8hpp" name="Sacado_mpl_none.hpp" local="yes" imported="no">Sacado_mpl_none.hpp</includes>
    <includes id="Sacado__mpl__begin_8hpp" name="Sacado_mpl_begin.hpp" local="yes" imported="no">Sacado_mpl_begin.hpp</includes>
    <includes id="Sacado__mpl__end_8hpp" name="Sacado_mpl_end.hpp" local="yes" imported="no">Sacado_mpl_end.hpp</includes>
    <includes id="Sacado__mpl__deref_8hpp" name="Sacado_mpl_deref.hpp" local="yes" imported="no">Sacado_mpl_deref.hpp</includes>
    <includes id="Sacado__mpl__next_8hpp" name="Sacado_mpl_next.hpp" local="yes" imported="no">Sacado_mpl_next.hpp</includes>
    <includes id="Sacado__mpl__is__same_8hpp" name="Sacado_mpl_is_same.hpp" local="yes" imported="no">Sacado_mpl_is_same.hpp</includes>
    <includes id="Sacado__mpl__if_8hpp" name="Sacado_mpl_if.hpp" local="yes" imported="no">Sacado_mpl_if.hpp</includes>
    <class kind="class">Sacado::mpl::TypeSequenceDoesNotContainType</class>
    <class kind="struct">Sacado::mpl::find</class>
    <class kind="struct">Sacado::mpl::find&lt; Seq, T, Iter1, Iter1 &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_for_each.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__for__each_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
    <includes id="Sacado__mpl__begin_8hpp" name="Sacado_mpl_begin.hpp" local="yes" imported="no">Sacado_mpl_begin.hpp</includes>
    <includes id="Sacado__mpl__end_8hpp" name="Sacado_mpl_end.hpp" local="yes" imported="no">Sacado_mpl_end.hpp</includes>
    <includes id="Sacado__mpl__next_8hpp" name="Sacado_mpl_next.hpp" local="yes" imported="no">Sacado_mpl_next.hpp</includes>
    <includes id="Sacado__mpl__deref_8hpp" name="Sacado_mpl_deref.hpp" local="yes" imported="no">Sacado_mpl_deref.hpp</includes>
    <class kind="struct">Sacado::mpl::for_each</class>
    <class kind="struct">Sacado::mpl::for_each&lt; Seq, Iter1, Iter1 &gt;</class>
    <class kind="struct">Sacado::mpl::for_each_no_kokkos</class>
    <class kind="struct">Sacado::mpl::for_each_no_kokkos&lt; Seq, Iter1, Iter1 &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_has_type.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__has__type_8hpp</filename>
    <class kind="struct">Sacado::mpl::Found</class>
    <class kind="struct">Sacado::mpl::has_type</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
    <member kind="typedef">
      <type>char</type>
      <name>NotFound</name>
      <anchorfile>namespaceSacado_1_1mpl.html</anchorfile>
      <anchor>af3c5c8cb770cfc5ec96ac62b3351626b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Found</type>
      <name>testHasType</name>
      <anchorfile>namespaceSacado_1_1mpl.html</anchorfile>
      <anchor>abc774ce485ddc293ac83428c3256a969</anchor>
      <arglist>(typename T::type *)</arglist>
    </member>
    <member kind="function">
      <type>NotFound</type>
      <name>testHasType</name>
      <anchorfile>namespaceSacado_1_1mpl.html</anchorfile>
      <anchor>abadcde770bc9c863853dd0d3c0c28f86</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_if.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__if_8hpp</filename>
    <includes id="Sacado__mpl__type__wrap_8hpp" name="Sacado_mpl_type_wrap.hpp" local="yes" imported="no">Sacado_mpl_type_wrap.hpp</includes>
    <class kind="struct">Sacado::mpl::mpl_if_c</class>
    <class kind="struct">Sacado::mpl::mpl_if_c&lt; true, T1, T2 &gt;</class>
    <class kind="struct">Sacado::mpl::mpl_if_c&lt; false, T1, T2 &gt;</class>
    <class kind="struct">Sacado::mpl::mpl_if</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_integral_c.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__integral__c_8hpp</filename>
    <class kind="struct">Sacado::mpl::integral_c</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_integral_nonzero_constant.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__integral__nonzero__constant_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
    <class kind="struct">Sacado::mpl::integral_nonzero_constant</class>
    <class kind="struct">Sacado::mpl::integral_nonzero_constant&lt; T, zero, false &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_is_convertible.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__is__convertible_8hpp</filename>
    <class kind="struct">Sacado::mpl::convertible_impl</class>
    <class kind="struct">Sacado::mpl::convertible_impl::checker</class>
    <class kind="struct">Sacado::mpl::is_convertible</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_is_placeholder.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__is__placeholder_8hpp</filename>
    <includes id="Sacado__mpl__is__placeholder_8hpp" name="Sacado_mpl_is_placeholder.hpp" local="yes" imported="no">Sacado_mpl_is_placeholder.hpp</includes>
    <includes id="Sacado__mpl__none_8hpp" name="Sacado_mpl_none.hpp" local="yes" imported="no">Sacado_mpl_none.hpp</includes>
    <class kind="struct">Sacado::mpl::is_placeholder</class>
    <class kind="struct">Sacado::mpl::is_placeholder&lt; arg&lt; N &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::is_placeholder&lt; F&lt; T1 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::is_placeholder&lt; F&lt; T1, T2 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::is_placeholder&lt; F&lt; T1, T2, T3 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::is_placeholder&lt; F&lt; T1, T2, T3, T4 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::is_placeholder&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_is_same.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__is__same_8hpp</filename>
    <class kind="struct">Sacado::mpl::is_same</class>
    <class kind="struct">Sacado::mpl::is_same&lt; T, T &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_lambda.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__lambda_8hpp</filename>
    <includes id="Sacado__mpl__bind_8hpp" name="Sacado_mpl_bind.hpp" local="yes" imported="no">Sacado_mpl_bind.hpp</includes>
    <includes id="Sacado__mpl__quote_8hpp" name="Sacado_mpl_quote.hpp" local="yes" imported="no">Sacado_mpl_quote.hpp</includes>
    <includes id="Sacado__mpl__type__wrap_8hpp" name="Sacado_mpl_type_wrap.hpp" local="yes" imported="no">Sacado_mpl_type_wrap.hpp</includes>
    <includes id="Sacado__mpl__if_8hpp" name="Sacado_mpl_if.hpp" local="yes" imported="no">Sacado_mpl_if.hpp</includes>
    <includes id="Sacado__mpl__is__placeholder_8hpp" name="Sacado_mpl_is_placeholder.hpp" local="yes" imported="no">Sacado_mpl_is_placeholder.hpp</includes>
    <class kind="struct">Sacado::mpl::lambda</class>
    <class kind="struct">Sacado::mpl::lambda&lt; F&lt; T1 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::lambda&lt; F&lt; T1, T2 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::lambda&lt; F&lt; T1, T2, T3 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::lambda&lt; F&lt; T1, T2, T3, T4 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::lambda&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_next.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__next_8hpp</filename>
    <class kind="struct">Sacado::mpl::next</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_none.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__none_8hpp</filename>
    <class kind="struct">Sacado::mpl::none</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_placeholders.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__placeholders_8hpp</filename>
    <includes id="Sacado__mpl__none_8hpp" name="Sacado_mpl_none.hpp" local="yes" imported="no">Sacado_mpl_none.hpp</includes>
    <class kind="struct">Sacado::mpl::arg</class>
    <class kind="struct">Sacado::mpl::arg&lt; 1 &gt;</class>
    <class kind="struct">Sacado::mpl::arg&lt; 1 &gt;::apply</class>
    <class kind="struct">Sacado::mpl::arg&lt; 2 &gt;</class>
    <class kind="struct">Sacado::mpl::arg&lt; 2 &gt;::apply</class>
    <class kind="struct">Sacado::mpl::arg&lt; 3 &gt;</class>
    <class kind="struct">Sacado::mpl::arg&lt; 3 &gt;::apply</class>
    <class kind="struct">Sacado::mpl::arg&lt; 4 &gt;</class>
    <class kind="struct">Sacado::mpl::arg&lt; 4 &gt;::apply</class>
    <class kind="struct">Sacado::mpl::arg&lt; 5 &gt;</class>
    <class kind="struct">Sacado::mpl::arg&lt; 5 &gt;::apply</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
    <namespace>Sacado::mpl::placeholders</namespace>
    <member kind="typedef">
      <type>arg&lt; 1 &gt;</type>
      <name>_1</name>
      <anchorfile>namespaceSacado_1_1mpl_1_1placeholders.html</anchorfile>
      <anchor>a7b2402396edc94638820a46965c7761b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>arg&lt; 2 &gt;</type>
      <name>_2</name>
      <anchorfile>namespaceSacado_1_1mpl_1_1placeholders.html</anchorfile>
      <anchor>a09cbdde4075616ad1c7291b53e542969</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>arg&lt; 3 &gt;</type>
      <name>_3</name>
      <anchorfile>namespaceSacado_1_1mpl_1_1placeholders.html</anchorfile>
      <anchor>a7ef501b0193d8e4c0ebd10aeed618c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>arg&lt; 4 &gt;</type>
      <name>_4</name>
      <anchorfile>namespaceSacado_1_1mpl_1_1placeholders.html</anchorfile>
      <anchor>a30710a5a880234a53f5a315b3696d44c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>arg&lt; 5 &gt;</type>
      <name>_5</name>
      <anchorfile>namespaceSacado_1_1mpl_1_1placeholders.html</anchorfile>
      <anchor>a155c4af13344ab421b6262f6a3e27c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>arg&lt;-1 &gt;</type>
      <name>_</name>
      <anchorfile>namespaceSacado_1_1mpl_1_1placeholders.html</anchorfile>
      <anchor>af386ebc3c8983782aa3f363d31a2ae82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_push_back.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__push__back_8hpp</filename>
    <class kind="struct">Sacado::mpl::push_back_impl</class>
    <class kind="struct">Sacado::mpl::push_back</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_quote.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__quote_8hpp</filename>
    <includes id="Sacado__mpl__type__wrap_8hpp" name="Sacado_mpl_type_wrap.hpp" local="yes" imported="no">Sacado_mpl_type_wrap.hpp</includes>
    <class kind="struct">Sacado::mpl::quote0</class>
    <class kind="struct">Sacado::mpl::quote0::apply</class>
    <class kind="struct">Sacado::mpl::quote1</class>
    <class kind="struct">Sacado::mpl::quote1::apply</class>
    <class kind="struct">Sacado::mpl::quote2</class>
    <class kind="struct">Sacado::mpl::quote2::apply</class>
    <class kind="struct">Sacado::mpl::quote3</class>
    <class kind="struct">Sacado::mpl::quote3::apply</class>
    <class kind="struct">Sacado::mpl::quote4</class>
    <class kind="struct">Sacado::mpl::quote4::apply</class>
    <class kind="struct">Sacado::mpl::quote5</class>
    <class kind="struct">Sacado::mpl::quote5::apply</class>
    <class kind="struct">Sacado::mpl::quote</class>
    <class kind="struct">Sacado::mpl::quote&lt; F&lt; T1 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::quote&lt; F&lt; T1, T2 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::quote&lt; F&lt; T1, T2, T3 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::quote&lt; F&lt; T1, T2, T3, T4 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::quote&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_range_c.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__range__c_8hpp</filename>
    <includes id="Sacado__mpl__none_8hpp" name="Sacado_mpl_none.hpp" local="yes" imported="no">Sacado_mpl_none.hpp</includes>
    <includes id="Sacado__mpl__size_8hpp" name="Sacado_mpl_size.hpp" local="yes" imported="no">Sacado_mpl_size.hpp</includes>
    <includes id="Sacado__mpl__begin_8hpp" name="Sacado_mpl_begin.hpp" local="yes" imported="no">Sacado_mpl_begin.hpp</includes>
    <includes id="Sacado__mpl__end_8hpp" name="Sacado_mpl_end.hpp" local="yes" imported="no">Sacado_mpl_end.hpp</includes>
    <includes id="Sacado__mpl__next_8hpp" name="Sacado_mpl_next.hpp" local="yes" imported="no">Sacado_mpl_next.hpp</includes>
    <includes id="Sacado__mpl__at_8hpp" name="Sacado_mpl_at.hpp" local="yes" imported="no">Sacado_mpl_at.hpp</includes>
    <includes id="Sacado__mpl__deref_8hpp" name="Sacado_mpl_deref.hpp" local="yes" imported="no">Sacado_mpl_deref.hpp</includes>
    <includes id="Sacado__mpl__integral__c_8hpp" name="Sacado_mpl_integral_c.hpp" local="yes" imported="no">Sacado_mpl_integral_c.hpp</includes>
    <class kind="struct">Sacado::mpl::range_c_tag</class>
    <class kind="struct">Sacado::mpl::range_c</class>
    <class kind="struct">Sacado::mpl::range_c_iterator</class>
    <class kind="struct">Sacado::mpl::size_impl&lt; range_c_tag &gt;</class>
    <class kind="struct">Sacado::mpl::size_impl&lt; range_c_tag &gt;::apply</class>
    <class kind="struct">Sacado::mpl::begin_impl&lt; range_c_tag &gt;</class>
    <class kind="struct">Sacado::mpl::begin_impl&lt; range_c_tag &gt;::apply</class>
    <class kind="struct">Sacado::mpl::end_impl&lt; range_c_tag &gt;</class>
    <class kind="struct">Sacado::mpl::end_impl&lt; range_c_tag &gt;::apply</class>
    <class kind="struct">Sacado::mpl::next&lt; range_c_iterator&lt; Range, Pos &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::at_impl&lt; range_c_tag, Pos &gt;</class>
    <class kind="struct">Sacado::mpl::at_impl&lt; range_c_tag, Pos &gt;::apply</class>
    <class kind="struct">Sacado::mpl::deref&lt; range_c_iterator&lt; Range, Pos &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_size.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__size_8hpp</filename>
    <class kind="struct">Sacado::mpl::size_impl</class>
    <class kind="struct">Sacado::mpl::size</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_type_wrap.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__type__wrap_8hpp</filename>
    <includes id="Sacado__mpl__has__type_8hpp" name="Sacado_mpl_has_type.hpp" local="yes" imported="no">Sacado_mpl_has_type.hpp</includes>
    <class kind="struct">Sacado::mpl::add_type</class>
    <class kind="struct">Sacado::mpl::type_wrap_impl</class>
    <class kind="struct">Sacado::mpl::type_wrap_impl&lt; true, T &gt;</class>
    <class kind="struct">Sacado::mpl::type_wrap_impl&lt; false, T &gt;</class>
    <class kind="struct">Sacado::mpl::type_wrap</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_vector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__vector_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_vector_at_spec.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__vector__at__spec_8hpp</filename>
    <class kind="struct">Sacado::mpl::vector_at</class>
    <class kind="struct">Sacado::mpl::vector_at&lt; mpl::vector&lt; T, Args... &gt;, 0 &gt;</class>
    <class kind="struct">Sacado::mpl::vector_at&lt; mpl::vector&lt; T, Args... &gt;, Pos &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_vector_push_back_spec.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__vector__push__back__spec_8hpp</filename>
    <class kind="struct">Sacado::mpl::vector_push_back</class>
    <class kind="struct">Sacado::mpl::vector_push_back&lt; mpl::vector&lt; Args... &gt;, T &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_mpl_vector_size_spec.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/mpl/</path>
    <filename>Sacado__mpl__vector__size__spec_8hpp</filename>
    <class kind="struct">Sacado::mpl::vector_size</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::mpl</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_No_Kokkos.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__No__Kokkos_8hpp</filename>
    <includes id="Sacado__DisableKokkosCuda_8hpp" name="Sacado_DisableKokkosCuda.hpp" local="yes" imported="no">Sacado_DisableKokkosCuda.hpp</includes>
    <includes id="Sacado__Version_8hpp" name="Sacado_Version.hpp" local="yes" imported="no">Sacado_Version.hpp</includes>
    <includes id="Sacado__MathFunctions_8hpp" name="Sacado_MathFunctions.hpp" local="yes" imported="no">Sacado_MathFunctions.hpp</includes>
    <includes id="Sacado__Fad__ExpressionTraits_8hpp" name="Sacado_Fad_ExpressionTraits.hpp" local="yes" imported="no">Sacado_Fad_ExpressionTraits.hpp</includes>
    <includes id="Sacado__Fad__DFadTraits_8hpp" name="Sacado_Fad_DFadTraits.hpp" local="yes" imported="no">Sacado_Fad_DFadTraits.hpp</includes>
    <includes id="Sacado__Fad__SFadTraits_8hpp" name="Sacado_Fad_SFadTraits.hpp" local="yes" imported="no">Sacado_Fad_SFadTraits.hpp</includes>
    <includes id="Sacado__Fad__SLFadTraits_8hpp" name="Sacado_Fad_SLFadTraits.hpp" local="yes" imported="no">Sacado_Fad_SLFadTraits.hpp</includes>
    <includes id="Sacado__Fad__DMFadTraits_8hpp" name="Sacado_Fad_DMFadTraits.hpp" local="yes" imported="no">Sacado_Fad_DMFadTraits.hpp</includes>
    <includes id="Sacado__Fad__DVFadTraits_8hpp" name="Sacado_Fad_DVFadTraits.hpp" local="yes" imported="no">Sacado_Fad_DVFadTraits.hpp</includes>
    <includes id="Sacado__ELRFad__ExpressionTraits_8hpp" name="Sacado_ELRFad_ExpressionTraits.hpp" local="yes" imported="no">Sacado_ELRFad_ExpressionTraits.hpp</includes>
    <includes id="Sacado__ELRFad__DFadTraits_8hpp" name="Sacado_ELRFad_DFadTraits.hpp" local="yes" imported="no">Sacado_ELRFad_DFadTraits.hpp</includes>
    <includes id="Sacado__ELRFad__SFadTraits_8hpp" name="Sacado_ELRFad_SFadTraits.hpp" local="yes" imported="no">Sacado_ELRFad_SFadTraits.hpp</includes>
    <includes id="Sacado__ELRFad__SLFadTraits_8hpp" name="Sacado_ELRFad_SLFadTraits.hpp" local="yes" imported="no">Sacado_ELRFad_SLFadTraits.hpp</includes>
    <includes id="Sacado__CacheFad__ExpressionTraits_8hpp" name="Sacado_CacheFad_ExpressionTraits.hpp" local="yes" imported="no">Sacado_CacheFad_ExpressionTraits.hpp</includes>
    <includes id="Sacado__CacheFad__DFadTraits_8hpp" name="Sacado_CacheFad_DFadTraits.hpp" local="yes" imported="no">Sacado_CacheFad_DFadTraits.hpp</includes>
    <includes id="Sacado__CacheFad__SFadTraits_8hpp" name="Sacado_CacheFad_SFadTraits.hpp" local="yes" imported="no">Sacado_CacheFad_SFadTraits.hpp</includes>
    <includes id="Sacado__CacheFad__SLFadTraits_8hpp" name="Sacado_CacheFad_SLFadTraits.hpp" local="yes" imported="no">Sacado_CacheFad_SLFadTraits.hpp</includes>
    <includes id="Sacado__ELRCacheFad__ExpressionTraits_8hpp" name="Sacado_ELRCacheFad_ExpressionTraits.hpp" local="yes" imported="no">Sacado_ELRCacheFad_ExpressionTraits.hpp</includes>
    <includes id="Sacado__ELRCacheFad__DFadTraits_8hpp" name="Sacado_ELRCacheFad_DFadTraits.hpp" local="yes" imported="no">Sacado_ELRCacheFad_DFadTraits.hpp</includes>
    <includes id="Sacado__ELRCacheFad__SFadTraits_8hpp" name="Sacado_ELRCacheFad_SFadTraits.hpp" local="yes" imported="no">Sacado_ELRCacheFad_SFadTraits.hpp</includes>
    <includes id="Sacado__ELRCacheFad__SLFadTraits_8hpp" name="Sacado_ELRCacheFad_SLFadTraits.hpp" local="yes" imported="no">Sacado_ELRCacheFad_SLFadTraits.hpp</includes>
    <includes id="Sacado__LFad__LogicalSparseTraits_8hpp" name="Sacado_LFad_LogicalSparseTraits.hpp" local="yes" imported="no">Sacado_LFad_LogicalSparseTraits.hpp</includes>
    <includes id="Sacado__ScalarFlopCounterTraits_8hpp" name="Sacado_ScalarFlopCounterTraits.hpp" local="yes" imported="no">Sacado_ScalarFlopCounterTraits.hpp</includes>
    <includes id="Sacado__Tay__TaylorTraits_8hpp" name="Sacado_Tay_TaylorTraits.hpp" local="yes" imported="no">Sacado_Tay_TaylorTraits.hpp</includes>
    <includes id="Sacado__trad__Traits_8hpp" name="Sacado_trad_Traits.hpp" local="yes" imported="no">Sacado_trad_Traits.hpp</includes>
    <includes id="Sacado__trad2__Traits_8hpp" name="Sacado_trad2_Traits.hpp" local="yes" imported="no">Sacado_trad2_Traits.hpp</includes>
    <includes id="Sacado__tradvec__Traits_8hpp" name="Sacado_tradvec_Traits.hpp" local="yes" imported="no">Sacado_tradvec_Traits.hpp</includes>
    <includes id="Sacado__Fad__DFad_8hpp" name="Sacado_Fad_DFad.hpp" local="yes" imported="no">Sacado_Fad_DFad.hpp</includes>
    <includes id="Sacado__Fad__SFad_8hpp" name="Sacado_Fad_SFad.hpp" local="yes" imported="no">Sacado_Fad_SFad.hpp</includes>
    <includes id="Sacado__Fad__SLFad_8hpp" name="Sacado_Fad_SLFad.hpp" local="yes" imported="no">Sacado_Fad_SLFad.hpp</includes>
    <includes id="Sacado__Fad__MemPoolManager_8hpp" name="Sacado_Fad_MemPoolManager.hpp" local="yes" imported="no">Sacado_Fad_MemPoolManager.hpp</includes>
    <includes id="Sacado__Fad__DMFad_8hpp" name="Sacado_Fad_DMFad.hpp" local="yes" imported="no">Sacado_Fad_DMFad.hpp</includes>
    <includes id="Sacado__LFad__LogicalSparse_8hpp" name="Sacado_LFad_LogicalSparse.hpp" local="yes" imported="no">Sacado_LFad_LogicalSparse.hpp</includes>
    <includes id="Sacado__Fad__DVFad_8hpp" name="Sacado_Fad_DVFad.hpp" local="yes" imported="no">Sacado_Fad_DVFad.hpp</includes>
    <includes id="Sacado__Fad__Vector_8hpp" name="Sacado_Fad_Vector.hpp" local="yes" imported="no">Sacado_Fad_Vector.hpp</includes>
    <includes id="Sacado__ELRFad__DFad_8hpp" name="Sacado_ELRFad_DFad.hpp" local="yes" imported="no">Sacado_ELRFad_DFad.hpp</includes>
    <includes id="Sacado__ELRFad__SFad_8hpp" name="Sacado_ELRFad_SFad.hpp" local="yes" imported="no">Sacado_ELRFad_SFad.hpp</includes>
    <includes id="Sacado__ELRFad__SLFad_8hpp" name="Sacado_ELRFad_SLFad.hpp" local="yes" imported="no">Sacado_ELRFad_SLFad.hpp</includes>
    <includes id="Sacado__CacheFad__DFad_8hpp" name="Sacado_CacheFad_DFad.hpp" local="yes" imported="no">Sacado_CacheFad_DFad.hpp</includes>
    <includes id="Sacado__CacheFad__SFad_8hpp" name="Sacado_CacheFad_SFad.hpp" local="yes" imported="no">Sacado_CacheFad_SFad.hpp</includes>
    <includes id="Sacado__CacheFad__SLFad_8hpp" name="Sacado_CacheFad_SLFad.hpp" local="yes" imported="no">Sacado_CacheFad_SLFad.hpp</includes>
    <includes id="Sacado__ELRCacheFad__DFad_8hpp" name="Sacado_ELRCacheFad_DFad.hpp" local="yes" imported="no">Sacado_ELRCacheFad_DFad.hpp</includes>
    <includes id="Sacado__ELRCacheFad__SFad_8hpp" name="Sacado_ELRCacheFad_SFad.hpp" local="yes" imported="no">Sacado_ELRCacheFad_SFad.hpp</includes>
    <includes id="Sacado__ELRCacheFad__SLFad_8hpp" name="Sacado_ELRCacheFad_SLFad.hpp" local="yes" imported="no">Sacado_ELRCacheFad_SLFad.hpp</includes>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <includes id="Sacado__trad2_8hpp" name="Sacado_trad2.hpp" local="yes" imported="no">Sacado_trad2.hpp</includes>
    <includes id="Sacado__tradvec_8hpp" name="Sacado_tradvec.hpp" local="yes" imported="no">Sacado_tradvec.hpp</includes>
    <includes id="Sacado__Tay__Taylor_8hpp" name="Sacado_Tay_Taylor.hpp" local="yes" imported="no">Sacado_Tay_Taylor.hpp</includes>
    <includes id="Sacado__ScalarFlopCounter_8hpp" name="Sacado_ScalarFlopCounter.hpp" local="yes" imported="no">Sacado_ScalarFlopCounter.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Sacado_ParameterAccessor.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/parameter/</path>
    <filename>Sacado__ParameterAccessor_8hpp</filename>
    <includes id="Sacado__ScalarParameterEntry_8hpp" name="Sacado_ScalarParameterEntry.hpp" local="yes" imported="no">Sacado_ScalarParameterEntry.hpp</includes>
    <includes id="Sacado__ScalarParameterLibrary_8hpp" name="Sacado_ScalarParameterLibrary.hpp" local="yes" imported="no">Sacado_ScalarParameterLibrary.hpp</includes>
    <includes id="Sacado__ParameterAccessorImp_8hpp" name="Sacado_ParameterAccessorImp.hpp" local="yes" imported="no">Sacado_ParameterAccessorImp.hpp</includes>
    <class kind="class">Sacado::ParameterRegistration</class>
    <class kind="class">Sacado::ParameterAccessor</class>
    <namespace>Sacado</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ParameterAccessorImp.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/parameter/</path>
    <filename>Sacado__ParameterAccessorImp_8hpp</filename>
    <includes id="Sacado__ParameterRegistration_8hpp" name="Sacado_ParameterRegistration.hpp" local="yes" imported="no">Sacado_ParameterRegistration.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Sacado_ParameterFamilyBase.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/parameter/</path>
    <filename>Sacado__ParameterFamilyBase_8hpp</filename>
    <includes id="Sacado__mpl__apply_8hpp" name="Sacado_mpl_apply.hpp" local="yes" imported="no">Sacado_mpl_apply.hpp</includes>
    <includes id="Sacado__ParameterFamilyBaseImp_8hpp" name="Sacado_ParameterFamilyBaseImp.hpp" local="yes" imported="no">Sacado_ParameterFamilyBaseImp.hpp</includes>
    <class kind="class">Sacado::ParameterFamilyBase</class>
    <namespace>Sacado</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ParameterFamilyBaseImp.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/parameter/</path>
    <filename>Sacado__ParameterFamilyBaseImp_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>Sacado_ParameterLibraryBase.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/parameter/</path>
    <filename>Sacado__ParameterLibraryBase_8hpp</filename>
    <includes id="Sacado__ParameterFamilyBase_8hpp" name="Sacado_ParameterFamilyBase.hpp" local="yes" imported="no">Sacado_ParameterFamilyBase.hpp</includes>
    <includes id="Sacado__ParameterVectorBase_8hpp" name="Sacado_ParameterVectorBase.hpp" local="yes" imported="no">Sacado_ParameterVectorBase.hpp</includes>
    <includes id="Sacado__mpl__apply_8hpp" name="Sacado_mpl_apply.hpp" local="yes" imported="no">Sacado_mpl_apply.hpp</includes>
    <includes id="Sacado__ParameterLibraryBaseImp_8hpp" name="Sacado_ParameterLibraryBaseImp.hpp" local="yes" imported="no">Sacado_ParameterLibraryBaseImp.hpp</includes>
    <class kind="class">Sacado::ParameterLibraryBase</class>
    <namespace>Sacado</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSacado.html</anchorfile>
      <anchor>a0ad90f5d4de6afaf6736179a2e162a9a</anchor>
      <arglist>(std::ostream &amp;os, const ParameterLibraryBase&lt; FamilyType, EntryType &gt; &amp;pl)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_ParameterLibraryBaseImp.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/parameter/</path>
    <filename>Sacado__ParameterLibraryBaseImp_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>Sacado_ParameterRegistration.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/parameter/</path>
    <filename>Sacado__ParameterRegistration_8hpp</filename>
    <includes id="Sacado__ParameterAccessor_8hpp" name="Sacado_ParameterAccessor.hpp" local="yes" imported="no">Sacado_ParameterAccessor.hpp</includes>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <includes id="Sacado__ScalarParameterLibrary_8hpp" name="Sacado_ScalarParameterLibrary.hpp" local="yes" imported="no">Sacado_ScalarParameterLibrary.hpp</includes>
    <class kind="class">Sacado::ParameterRegistration</class>
    <namespace>Sacado</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ParameterVectorBase.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/parameter/</path>
    <filename>Sacado__ParameterVectorBase_8hpp</filename>
    <includes id="Sacado__ParameterFamilyBase_8hpp" name="Sacado_ParameterFamilyBase.hpp" local="yes" imported="no">Sacado_ParameterFamilyBase.hpp</includes>
    <class kind="class">Sacado::ParameterVectorBase</class>
    <class kind="struct">Sacado::ParameterVectorBase::Entry</class>
    <namespace>Sacado</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_rad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__rad_8hpp</filename>
    <includes id="Sacado__cmath_8hpp" name="Sacado_cmath.hpp" local="no" imported="no">Sacado_cmath.hpp</includes>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
    <class kind="struct">Sacado::Radnt::ADmemblock</class>
    <class kind="class">Sacado::Radnt::ADcontext</class>
    <class kind="class">Sacado::Radnt::CADcontext</class>
    <class kind="class">Sacado::Radnt::Derp</class>
    <class kind="class">Sacado::Radnt::ADvari</class>
    <class kind="class">Sacado::Radnt::ADvar1</class>
    <class kind="class">Sacado::Radnt::ConstADvari</class>
    <class kind="class">Sacado::Radnt::IndepADvar</class>
    <class kind="class">Sacado::Radnt::ADvar</class>
    <class kind="class">Sacado::Radnt::ConstADvar</class>
    <class kind="class">Sacado::Radnt::ADvar1s</class>
    <class kind="class">Sacado::Radnt::ADvar2</class>
    <class kind="class">Sacado::Radnt::ADvar2q</class>
    <class kind="class">Sacado::Radnt::ADvarn</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Radnt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__rad_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>R</name>
      <anchorfile>Sacado__rad_8hpp.html</anchorfile>
      <anchor>a5c71a5e59a53413cd6c270266d63b031</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ai</name>
      <anchorfile>Sacado__rad_8hpp.html</anchorfile>
      <anchor>a8a04658937bdeefa8b5cf850d99d7a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T1</name>
      <anchorfile>Sacado__rad_8hpp.html</anchorfile>
      <anchor>a2d0f3522ee797e7b3355d9444eafebad</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T2</name>
      <anchorfile>Sacado__rad_8hpp.html</anchorfile>
      <anchor>aa65d6590ee7031a474181ec45493a601</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ai</name>
      <anchorfile>Sacado__rad_8hpp.html</anchorfile>
      <anchor>a8a04658937bdeefa8b5cf850d99d7a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI</name>
      <anchorfile>Sacado__rad_8hpp.html</anchorfile>
      <anchor>ab279897ed5e1f077b1a4c30b704683a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T2</name>
      <anchorfile>Sacado__rad_8hpp.html</anchorfile>
      <anchor>aa65d6590ee7031a474181ec45493a601</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T1</name>
      <anchorfile>Sacado__rad_8hpp.html</anchorfile>
      <anchor>a2a86db84e9d9559433140f4eac707094</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__rad_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__rad_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>A</name>
      <anchorfile>Sacado__rad_8hpp.html</anchorfile>
      <anchor>a955f504eccf76b4eb2489c0adab03121</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T</name>
      <anchorfile>Sacado__rad_8hpp.html</anchorfile>
      <anchor>a0acb682b8260ab1c60b918599864e2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__rad_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ai</name>
      <anchorfile>Sacado__rad_8hpp.html</anchorfile>
      <anchor>a8a04658937bdeefa8b5cf850d99d7a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI</name>
      <anchorfile>Sacado__rad_8hpp.html</anchorfile>
      <anchor>ab279897ed5e1f077b1a4c30b704683a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>D</name>
      <anchorfile>Sacado__rad_8hpp.html</anchorfile>
      <anchor>af316c33cc298530f245e8b55330e86b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T2</name>
      <anchorfile>Sacado__rad_8hpp.html</anchorfile>
      <anchor>aa65d6590ee7031a474181ec45493a601</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T1</name>
      <anchorfile>Sacado__rad_8hpp.html</anchorfile>
      <anchor>a2a86db84e9d9559433140f4eac707094</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a7a00b800019efac1de528681b1de48f7</anchor>
      <arglist>(double f, double g, const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a537002d1cbe4ed49829b588abdae8271</anchor>
      <arglist>(double f, double gx, double gy, const ADvari &amp;x, const ADvari &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a1e643369b516b46a98a3861c74481ba9</anchor>
      <arglist>(double f, int n, const ADvar *x, const double *g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Const</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a577a6e343643420cf8f0c140dbf27c6f</anchor>
      <arglist>(const IndepADvar &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a67ca2f2c7fc39576f82d49486f586e55</anchor>
      <arglist>(ADvari &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a063cb4e5259febee6d5b178ceec4cf9e</anchor>
      <arglist>(const ADvari &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a416650256b177762cc3032151bb1fa3f</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ad6be4083f9269cec95da31666688b4a0</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a986fbe02c5ae19226ba3e71c357d42c7</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a0a74b0383b3f152555eb72e59046a593</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a145b3d21abb13b897ea48e78db642a99</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>afa8527ef71dbb93d731906e736c5affd</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ac49695ee56911b0f08f5849f6c02b80c</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a8aaf01745ecdc583296faf4d12f1ad8f</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>aad637fa8160a7f255a7de4dd8a81ea33</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a784bcd84bc294dd67c82599b3c80c4ea</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a5a768f6b11017ce93178a07d0ed3d104</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a64841c53e5d401612c60755826650c2a</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>abd110868baecbaaaacdf98d1b33ce0f7</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ade5b0a76e29bed3927b47c938a701288</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ad2ef6cbf1a7ae7420d1c1ad501e1455b</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>af66a89bf29e600d53efab9489427bc5d</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>afd66897ba69826c548659c259cdc516e</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a2e3e54b2bc0a2a92b7de7c3d74adc619</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>abba56d630841500c6d0f37962ed747ba</anchor>
      <arglist>(const IndepADvar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>af421ca54e7be1aedbe07ac125c795d86</anchor>
      <arglist>(const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>abs</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a2ee2b9b9db6ac414df7f6047ec026e16</anchor>
      <arglist>(const ADvari &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_rad2.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__rad2_8hpp</filename>
    <includes id="Sacado__cmath_8hpp" name="Sacado_cmath.hpp" local="no" imported="no">Sacado_cmath.hpp</includes>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
    <class kind="struct">Sacado::Rad2d::ADmemblock</class>
    <class kind="struct">Sacado::Rad2d::ADvari_block</class>
    <class kind="class">Sacado::Rad2d::ADcontext</class>
    <class kind="class">Sacado::Rad2d::CADcontext</class>
    <class kind="class">Sacado::Rad2d::Derp</class>
    <class kind="class">Sacado::Rad2d::ADvari</class>
    <class kind="class">Sacado::Rad2d::ADvar1</class>
    <class kind="class">Sacado::Rad2d::ConstADvari</class>
    <class kind="class">Sacado::Rad2d::IndepADvar</class>
    <class kind="class">Sacado::Rad2d::ADvar</class>
    <class kind="class">Sacado::Rad2d::ConstADvar</class>
    <class kind="class">Sacado::Rad2d::ADvar1s</class>
    <class kind="class">Sacado::Rad2d::ADvar1g</class>
    <class kind="class">Sacado::Rad2d::ADvar2</class>
    <class kind="class">Sacado::Rad2d::ADvar2q</class>
    <class kind="class">Sacado::Rad2d::ADvar2g</class>
    <class kind="class">Sacado::Rad2d::ADvarn</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Rad2d</namespace>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__rad2_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>R</name>
      <anchorfile>Sacado__rad2_8hpp.html</anchorfile>
      <anchor>a5c71a5e59a53413cd6c270266d63b031</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ai</name>
      <anchorfile>Sacado__rad2_8hpp.html</anchorfile>
      <anchor>a8a04658937bdeefa8b5cf850d99d7a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T1</name>
      <anchorfile>Sacado__rad2_8hpp.html</anchorfile>
      <anchor>a2d0f3522ee797e7b3355d9444eafebad</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T2</name>
      <anchorfile>Sacado__rad2_8hpp.html</anchorfile>
      <anchor>aa65d6590ee7031a474181ec45493a601</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ai</name>
      <anchorfile>Sacado__rad2_8hpp.html</anchorfile>
      <anchor>a8a04658937bdeefa8b5cf850d99d7a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI</name>
      <anchorfile>Sacado__rad2_8hpp.html</anchorfile>
      <anchor>ab279897ed5e1f077b1a4c30b704683a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T2</name>
      <anchorfile>Sacado__rad2_8hpp.html</anchorfile>
      <anchor>aa65d6590ee7031a474181ec45493a601</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T1</name>
      <anchorfile>Sacado__rad2_8hpp.html</anchorfile>
      <anchor>a2a86db84e9d9559433140f4eac707094</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__rad2_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__rad2_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>A</name>
      <anchorfile>Sacado__rad2_8hpp.html</anchorfile>
      <anchor>a955f504eccf76b4eb2489c0adab03121</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T</name>
      <anchorfile>Sacado__rad2_8hpp.html</anchorfile>
      <anchor>a0acb682b8260ab1c60b918599864e2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__rad2_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ai</name>
      <anchorfile>Sacado__rad2_8hpp.html</anchorfile>
      <anchor>a8a04658937bdeefa8b5cf850d99d7a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI</name>
      <anchorfile>Sacado__rad2_8hpp.html</anchorfile>
      <anchor>ab279897ed5e1f077b1a4c30b704683a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>D</name>
      <anchorfile>Sacado__rad2_8hpp.html</anchorfile>
      <anchor>af316c33cc298530f245e8b55330e86b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T2</name>
      <anchorfile>Sacado__rad2_8hpp.html</anchorfile>
      <anchor>aa65d6590ee7031a474181ec45493a601</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T1</name>
      <anchorfile>Sacado__rad2_8hpp.html</anchorfile>
      <anchor>a2a86db84e9d9559433140f4eac707094</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Advari_Opclass</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_const</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4faac89b37659f9969d7b6dbb259890cee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_copy</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4faebdb1809c635d4a8c1d24da11cf91ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_binary</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4fa3b51dad9c4717ccc6831536cca292670</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_unary</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4fafa41647153a98f327a761354be15c945</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_negate</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4fa98ae7b3769caf27fb6eba22c927f64a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_plusLR</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4fa5885b6273bcad5d544d285ec5d58b489</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_minusLR</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4fafc74948b7463dcb094747e4228fc8ae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_timesL</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4fa9ae8d495a38342b44dd57fbc99e7631f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_timesLR</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4fa89bb9a5456b3b39e3a28fe4159fd700c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_quotLR</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4faab597f7883472b976572d7df5e1fafd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_nary</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4fab22c048c28910a306d58d15b7f1e24c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>aac75a276ff571e7bd63b540cd8f46770</anchor>
      <arglist>(double f, double g, double h, const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29593f6d7fb17c50788b83aeda6fb70a</anchor>
      <arglist>(double f, double gx, double gy, double hxx, double hxy, double hyy, const ADvari &amp;x, const ADvari &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ada67b777e5f6a7e841eb29e393443dc2</anchor>
      <arglist>(double f, int n, const ADvar *x, const double *g, const double *h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Const</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>aef33d2e7060f1e3b4f7220718f17c6b7</anchor>
      <arglist>(const IndepADvar &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a315b502f0ef2458d041e8ce3a64a3cbf</anchor>
      <arglist>(ADvari &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a241c8fc7e4248c9e0be4fb17a763acb5</anchor>
      <arglist>(const ADvari &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a4883b8845714b37c7a798dc7c6226287</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a191ebff4cdd43489ba3a89cf63338369</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a4375c2d4436584d21f679cda9edcff2b</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a683fc29fdc0450ca1b47b5a1d7582460</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>abfeca6dd6cff55226a460ce059b7c157</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ab7ac2905f22894b2e21909585508dbb3</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>aac10a63b496acc6a9bb5bd3a03c0de33</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a1a26ad66e2949eef1b3914d17c3c7d9d</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>af11bcd0556b75314c17b23dbb26b0417</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ab9a72d19db325836613391a8a28021bb</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a7557efe2654764f0520e358b1480fa63</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a4ce1b4dc4ec681724435545ccb189503</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>afea9e8ec01dab3576903e3aa81012815</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a0486b3e27e6a5121b25295dc4a748f34</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ae81ac56a8765330d8eee6dfb6c9132d8</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>af4f34986bc7424ba35db1f87a8f12d75</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ad15b75f314cbe932f3b598d5016cb987</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>aec0332e51c9d0d7cfe49c8541a9750ac</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a564af42ae93c2b93459eb2836f8d00f3</anchor>
      <arglist>(const IndepADvar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a8ca0c4262a90d9e6aea92233fe4cda39</anchor>
      <arglist>(const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>abs</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a7b7f3239a9eacf6ff6e521f1bd4934cc</anchor>
      <arglist>(const ADvari &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_radops.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__radops_8cpp</filename>
    <includes id="Sacado__rad_8hpp" name="Sacado_rad.hpp" local="yes" imported="no">Sacado_rad.hpp</includes>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Radnt</namespace>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a8948b6acbb2d016f8cb269106d1d857a</anchor>
      <arglist>(ADvar *This, const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>IndepADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>accbea5db703c93cff1f1313e6ea5b311</anchor>
      <arglist>(IndepADvar *This, const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a048b26c6f81400817c9f3d15677e2cdc</anchor>
      <arglist>(const ADvari &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a9ec5f0b81580c555fdc81333ba0b0b09</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ae29fe1716ae347fe927c6ababefd4ef5</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a0b7a03ff3743718634a4ab42c7819d56</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a1f7f61ef238b664fac7f6fb0e7412fa5</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a275be7cb2ecf4318928cb9e52eecda47</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a28ed1dae3aeacd153aa34951718ac01d</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a98487b8217f4334e64db53fd06ce00b7</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a2bb1e457c01832c733d6384045d3990e</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a612a08520bb4d77b69a6062fba960fd3</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ae0acbf9b394bda27b9c7baee0ab9e406</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a049a64d4dc63cb33dc8f99334440e818</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a04d6a93e06c608589fda5a5cf1337742</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>acos</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a2204e88e9f184edafe57fa61c5df6817</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>acosh</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ad22e7450afb07934f2b12618ffb74218</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>asin</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a3d88c93076f12904f34fc0b2be2fe222</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>asinh</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ab826ebb3a51bbadf00d415725b864fe8</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atan</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>afad2bfe1ffaf73676d8342030c0ff96d</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atanh</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a061c2caffec4658e9e740d272f146bf9</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a53bcbb06c619cfa4624d8070b72e2235</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>af2ab5da94fcf2aff328be914df6a84be</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>aaa3edf3f12ea62fc2b900b9c51b318f7</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ae80f9f983a319bc99ceddb62ad5d8880</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a8d05ac0e31696a811553ee93b2723a07</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>aa247d05d9914c7e71ac95c00f4602256</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a6a0be58cd3871a8f5e54fa46d36d2a09</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>aa6d6048dd4e4129ae6f024e033fc50af</anchor>
      <arglist>(double x, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a82b3e587a722d5b613d322bded8b7a07</anchor>
      <arglist>(const ADvari &amp;L, double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>cos</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a5bed3a503e91c96611a7cd33d0dca320</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>cosh</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a333b60a8abd9eb383fb629f59330c07c</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>exp</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a123271636adf56e29f94d36a6c6d2cda</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>log</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a274798ca5dc656a498173287efb51dd4</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>log10</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>adb7a7d5f42091164966f4f7d52e66eb3</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>abb4317e981c1218c8ff7e3d4a1e5d9a8</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ac823981a004858c291193ed4e28416de</anchor>
      <arglist>(double x, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a3a91e7585788b5c0e9fad880727c25a3</anchor>
      <arglist>(const ADvari &amp;L, double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>sin</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>aa13143af5f6998fdb84271cd62986601</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>sinh</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>aaf402af87811571afe2406b19a76a277</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>sqrt</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ac810dee84045c113f540e0700a3324e9</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>tan</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a6442afa3dc649e41f315a601b55afcc0</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>tanh</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a80f5a9ef6eef0605ac85775f803b25d1</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>fabs</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a8ca41e374231d50a89f9abaea74f1189</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a7a00b800019efac1de528681b1de48f7</anchor>
      <arglist>(double f, double g, const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a537002d1cbe4ed49829b588abdae8271</anchor>
      <arglist>(double f, double gx, double gy, const ADvari &amp;x, const ADvari &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a1e643369b516b46a98a3861c74481ba9</anchor>
      <arglist>(double f, int n, const ADvar *x, const double *g)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rad_need_reinit</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a774e0e3be6a31f2080263d5c08c3396b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_radops2.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__radops2_8cpp</filename>
    <includes id="Sacado__rad2_8hpp" name="Sacado_rad2.hpp" local="yes" imported="no">Sacado_rad2.hpp</includes>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Rad2d</namespace>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ad6a49ac2ea48f3b877bcc7db00c7155c</anchor>
      <arglist>(ADvar *This, const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>IndepADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a510abc1db30562058d0da792874ddc79</anchor>
      <arglist>(IndepADvar *This, const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a3733e87ebb52a48182e300326da05ce8</anchor>
      <arglist>(const ADvari &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a783665264a264a3188ce1986b3d1ce1f</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a7cc447dee765b48f1187c75327321f50</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a380ec616c660a9405695f85cdcc75b69</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a909ab1562692001e4bf61acf8f85f174</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a729bab8ecc4f773cda15fab6aabd2881</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a8cefa7349ec3a0522e3264b4bde8ec99</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a6813033723283127bda4616541fdc8dc</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a15c1e34c19c831f45d6ea7ba0b75b03c</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a35cfc405b80ce86351e70782a4ef0072</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a542a5b16a76c7b5a4a35a876b959264e</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a4818bd0f0fc46643c8f3a9a94b1ed6c6</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a2f649cc2498b9891a27d618487b2d7c7</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>acos</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a01ebcc494a358b1f18fba61fbd0f279b</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>acosh</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a2d046143dadad5fe998ddae8b7227529</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>asin</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a4638a93074efcafc54c7f0d4c8bbfcb6</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>asinh</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a14fc4b118775c0e5376738b5c4e54a6e</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atan</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>affe7a3493c667c2fe6d748069d7dfd59</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atanh</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a9d922c9677daba8b7731e0ce967b1704</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a6f89be94c330d71b5eb3c4f740de6d8a</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ae91b0a86cec1420a382e8aede65e84a8</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a9f32c6fa1561b5cc3326639c1ce94732</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ae92f8711c7f20bc90a459fb40f7d4c59</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a4e56bb9ae85516ee1f5d688fc1089b58</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a11d91f3194ca71fd9917dc61387aaa88</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a42d3cef16e74edb967de551eac72e626</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a4e3f36f36040eb0a7106d9e2cbda9a05</anchor>
      <arglist>(double x, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>af288c013df4f34d2a1d441b99a984619</anchor>
      <arglist>(const ADvari &amp;L, double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>cos</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>aeb09f8ce2b28e6f3f5354ed5e298b202</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>cosh</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ad058d0bbfc89bd528fca0819ad078f7b</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>exp</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ad1827d3c3213552fb28173ba00372955</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>log</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ad715de135cea157a26273a084705c5b7</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>log10</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a66c2715fd06cc3e0f230aaf8e59d7978</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a90f61908830af15ff10e89ddee4f8228</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>acecab2991766dcffa47c675f6470a259</anchor>
      <arglist>(double x, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a8607dfa4b27d945952aab8ba5968e5f4</anchor>
      <arglist>(const ADvari &amp;L, double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>sin</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a097d3684dbed2e08d3d5e8ea1daec3aa</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>sinh</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a923880208c48f9d8a39bcfcfd044284d</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>sqrt</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a0b3a7a0fe259eeb90491b2c9ab3d25c8</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>tan</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>afe4adda15227843806d0cb68e6588b9b</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>tanh</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ad71d8da5cda5f0faddf1d6665c9fff72</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>fabs</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>addd03fa49b25cf2bfd72380fd595b2a2</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>aac75a276ff571e7bd63b540cd8f46770</anchor>
      <arglist>(double f, double g, double h, const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29593f6d7fb17c50788b83aeda6fb70a</anchor>
      <arglist>(double f, double gx, double gy, double hxx, double hxy, double hyy, const ADvari &amp;x, const ADvari &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ada67b777e5f6a7e841eb29e393443dc2</anchor>
      <arglist>(double f, int n, const ADvar *x, const double *g, const double *h)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rad_need_reinit</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a5eb8c5b3fd05e063ab39ef81a5fc9816</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_Random.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/utils/</path>
    <filename>Sacado__Random_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
    <includes id="Sacado__RandomImp_8hpp" name="Sacado_RandomImp.hpp" local="yes" imported="no">Sacado_RandomImp.hpp</includes>
    <class kind="class">Sacado::Random</class>
    <namespace>Sacado</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_RandomImp.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/utils/</path>
    <filename>Sacado__RandomImp_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>Sacado_ScalarFlopCounter.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ScalarFlopCounter_8cpp</filename>
    <includes id="Sacado__ScalarFlopCounter_8hpp" name="Sacado_ScalarFlopCounter.hpp" local="yes" imported="no">Sacado_ScalarFlopCounter.hpp</includes>
    <includes id="Sacado__DynamicArrayTraits_8hpp" name="Sacado_DynamicArrayTraits.hpp" local="yes" imported="no">Sacado_DynamicArrayTraits.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Sacado_ScalarFlopCounter.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ScalarFlopCounter_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
    <includes id="Sacado__ScalarFlopCounterTraits_8hpp" name="Sacado_ScalarFlopCounterTraits.hpp" local="yes" imported="no">Sacado_ScalarFlopCounterTraits.hpp</includes>
    <includes id="Sacado__Base_8hpp" name="Sacado_Base.hpp" local="yes" imported="no">Sacado_Base.hpp</includes>
    <includes id="Sacado__SFINAE__Macros_8hpp" name="Sacado_SFINAE_Macros.hpp" local="yes" imported="no">Sacado_SFINAE_Macros.hpp</includes>
    <class kind="class">Sacado::FlopCounterPack::FlopCounts</class>
    <class kind="class">Sacado::FlopCounterPack::ScalarFlopCounter</class>
    <class kind="struct">Sacado::FlopCounterPack::ScalarFlopCounter::apply</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::FlopCounterPack</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SCALAR_FLOP_COUNTER_BINARY_OP_ASSIGN</name>
      <anchorfile>Sacado__ScalarFlopCounter_8hpp.html</anchorfile>
      <anchor>ab0a965f8c9d9085063db6b9d02f5233f</anchor>
      <arglist>(OP, OP_NAME)                      </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCALAR_FLOP_COUNTER_BINARY_OP</name>
      <anchorfile>Sacado__ScalarFlopCounter_8hpp.html</anchorfile>
      <anchor>ac4c3a799ae93b2ef1cf061484815c444</anchor>
      <arglist>(OP, OP_NAME)                                    </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCALAR_FLOP_COUNTER_UNARY_OP</name>
      <anchorfile>Sacado__ScalarFlopCounter_8hpp.html</anchorfile>
      <anchor>ae2a1faf96d911ec78bbcd540e0d4f7ab</anchor>
      <arglist>(OP, OP_NAME)                                      </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCALAR_FLOP_COUNTER_UNARY_FUNC</name>
      <anchorfile>Sacado__ScalarFlopCounter_8hpp.html</anchorfile>
      <anchor>ac342c16d3d0622de9ca2bf2b8be70b93</anchor>
      <arglist>(OP, OP_NAME)                                  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCALAR_FLOP_COUNTER_BINARY_FUNC</name>
      <anchorfile>Sacado__ScalarFlopCounter_8hpp.html</anchorfile>
      <anchor>a0af94ea0b1ecce11d784a3a51a7e1f9c</anchor>
      <arglist>(OP, OP_NAME)                                </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCALAR_FLOP_COUNTER_BINARY_COMPARISON_OP</name>
      <anchorfile>Sacado__ScalarFlopCounter_8hpp.html</anchorfile>
      <anchor>a0646ac9dc174349004e3800536580402</anchor>
      <arglist>(OP, OP_NAME)              </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printCountersTable</name>
      <anchorfile>namespaceSacado_1_1FlopCounterPack.html</anchorfile>
      <anchor>a63fbe6db4a1d0aa0916652ebe0a27d0a</anchor>
      <arglist>(const int n, const char *names[], const char *abbr[], const FlopCounts counts[], std::ostream &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_ScalarFlopCounterTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__ScalarFlopCounterTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::FlopCounterPack::ScalarFlopCounter</class>
    <class kind="struct">Sacado::ScalarType&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::FlopCounterPack</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ScalarParameterEntry.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/parameter/</path>
    <filename>Sacado__ScalarParameterEntry_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <includes id="Sacado__mpl__apply_8hpp" name="Sacado_mpl_apply.hpp" local="yes" imported="no">Sacado_mpl_apply.hpp</includes>
    <class kind="struct">Sacado::DefaultEvalTypeTraits</class>
    <class kind="struct">Sacado::DefaultEvalTypeTraits::apply</class>
    <class kind="class">Sacado::AbstractScalarParameterEntry</class>
    <class kind="class">Sacado::ScalarParameterEntry</class>
    <namespace>Sacado</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ScalarParameterFamily.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/parameter/</path>
    <filename>Sacado__ScalarParameterFamily_8hpp</filename>
    <includes id="Sacado__ParameterFamilyBase_8hpp" name="Sacado_ParameterFamilyBase.hpp" local="yes" imported="no">Sacado_ParameterFamilyBase.hpp</includes>
    <includes id="Sacado__ScalarParameterEntry_8hpp" name="Sacado_ScalarParameterEntry.hpp" local="yes" imported="no">Sacado_ScalarParameterEntry.hpp</includes>
    <class kind="class">Sacado::ScalarParameterFamily</class>
    <namespace>Sacado</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ScalarParameterLibrary.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/parameter/</path>
    <filename>Sacado__ScalarParameterLibrary_8hpp</filename>
    <includes id="Sacado__ParameterLibraryBase_8hpp" name="Sacado_ParameterLibraryBase.hpp" local="yes" imported="no">Sacado_ParameterLibraryBase.hpp</includes>
    <includes id="Sacado__ScalarParameterFamily_8hpp" name="Sacado_ScalarParameterFamily.hpp" local="yes" imported="no">Sacado_ScalarParameterFamily.hpp</includes>
    <includes id="Sacado__ScalarParameterVector_8hpp" name="Sacado_ScalarParameterVector.hpp" local="yes" imported="no">Sacado_ScalarParameterVector.hpp</includes>
    <class kind="class">Sacado::ScalarParameterLibrary</class>
    <namespace>Sacado</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_ScalarParameterVector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/parameter/</path>
    <filename>Sacado__ScalarParameterVector_8hpp</filename>
    <includes id="Sacado__ParameterVectorBase_8hpp" name="Sacado_ParameterVectorBase.hpp" local="yes" imported="no">Sacado_ParameterVectorBase.hpp</includes>
    <includes id="Sacado__ScalarParameterFamily_8hpp" name="Sacado_ScalarParameterFamily.hpp" local="yes" imported="no">Sacado_ScalarParameterFamily.hpp</includes>
    <class kind="class">Sacado::ScalarParameterVector</class>
    <namespace>Sacado</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_SFINAE_Macros.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__SFINAE__Macros_8hpp</filename>
    <includes id="Sacado__mpl__enable__if_8hpp" name="Sacado_mpl_enable_if.hpp" local="yes" imported="no">Sacado_mpl_enable_if.hpp</includes>
    <includes id="Sacado__mpl__disable__if_8hpp" name="Sacado_mpl_disable_if.hpp" local="yes" imported="no">Sacado_mpl_disable_if.hpp</includes>
    <includes id="Sacado__mpl__is__same_8hpp" name="Sacado_mpl_is_same.hpp" local="yes" imported="no">Sacado_mpl_is_same.hpp</includes>
    <includes id="Sacado__mpl__is__convertible_8hpp" name="Sacado_mpl_is_convertible.hpp" local="yes" imported="no">Sacado_mpl_is_convertible.hpp</includes>
    <includes id="Sacado__mpl__type__wrap_8hpp" name="Sacado_mpl_type_wrap.hpp" local="yes" imported="no">Sacado_mpl_type_wrap.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_ENABLE_IF_SAME</name>
      <anchorfile>Sacado__SFINAE__Macros_8hpp.html</anchorfile>
      <anchor>a1b68c85550e3da880a6f3a882fa738f2</anchor>
      <arglist>(TYPE1, TYPE2, RETURN_TYPE)                        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_ENABLE_EXPR_FUNC</name>
      <anchorfile>Sacado__SFINAE__Macros_8hpp.html</anchorfile>
      <anchor>a787636b9544f6288bf25b464f2c94fdd</anchor>
      <arglist>(RETURN_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_ENABLE_EXPR_CTOR_DEF</name>
      <anchorfile>Sacado__SFINAE__Macros_8hpp.html</anchorfile>
      <anchor>a1dd8466109bff0f2291d393968a8c068</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_ENABLE_EXPR_CTOR_DECL</name>
      <anchorfile>Sacado__SFINAE__Macros_8hpp.html</anchorfile>
      <anchor>a85f5a91e46bf10c3c438dbed95785c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_FAD_ENABLE_EXPR_FUNC</name>
      <anchorfile>Sacado__SFINAE__Macros_8hpp.html</anchorfile>
      <anchor>a7f13abd7a716de8b4f015d39d7088644</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_ENABLE_IF_CONVERTIBLE</name>
      <anchorfile>Sacado__SFINAE__Macros_8hpp.html</anchorfile>
      <anchor>ae64479c8a5feab9c79e86bdf88edbdaa</anchor>
      <arglist>(TYPE1, TYPE2, RETURN_TYPE)                        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_ENABLE_VALUE_FUNC</name>
      <anchorfile>Sacado__SFINAE__Macros_8hpp.html</anchorfile>
      <anchor>a2c4f583f8322c119ec36726eedc13be1</anchor>
      <arglist>(RETURN_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_ENABLE_VALUE_CTOR_DEF</name>
      <anchorfile>Sacado__SFINAE__Macros_8hpp.html</anchorfile>
      <anchor>a4ab82395ab053198b7401e0964273ad9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_ENABLE_VALUE_CTOR_DECL</name>
      <anchorfile>Sacado__SFINAE__Macros_8hpp.html</anchorfile>
      <anchor>a699e11cf2f2c6c76529ee1f515fc735c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_FAD_OP_ENABLE_EXPR_EXPR</name>
      <anchorfile>Sacado__SFINAE__Macros_8hpp.html</anchorfile>
      <anchor>aed99a16aa545b3cb38759897781a726b</anchor>
      <arglist>(OP)                                                        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_FAD_OP_ENABLE_SCALAR_EXPR</name>
      <anchorfile>Sacado__SFINAE__Macros_8hpp.html</anchorfile>
      <anchor>a767ad9a280d1db0e0f898441364e8cb0</anchor>
      <arglist>(OP)                                                    </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_FAD_OP_ENABLE_EXPR_SCALAR</name>
      <anchorfile>Sacado__SFINAE__Macros_8hpp.html</anchorfile>
      <anchor>aadc2f74586ccac5b338ce0565dd6d88e</anchor>
      <arglist>(OP)                                                    </arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_StaticArrayTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__StaticArrayTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="struct">Sacado::ss_array</class>
    <class kind="struct">Sacado::ss_array&lt; T, true &gt;</class>
    <namespace>Sacado</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Tay_CacheTaylor.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Tay__CacheTaylor_8hpp</filename>
    <includes id="Sacado__Tay__CacheTaylorExpr_8hpp" name="Sacado_Tay_CacheTaylorExpr.hpp" local="yes" imported="no">Sacado_Tay_CacheTaylorExpr.hpp</includes>
    <includes id="Sacado__Tay__CacheTaylorTraits_8hpp" name="Sacado_Tay_CacheTaylorTraits.hpp" local="yes" imported="no">Sacado_Tay_CacheTaylorTraits.hpp</includes>
    <includes id="Sacado__Tay__CacheTaylorImp_8hpp" name="Sacado_Tay_CacheTaylorImp.hpp" local="yes" imported="no">Sacado_Tay_CacheTaylorImp.hpp</includes>
    <includes id="Sacado__Tay__CacheTaylorOps_8hpp" name="Sacado_Tay_CacheTaylorOps.hpp" local="yes" imported="no">Sacado_Tay_CacheTaylorOps.hpp</includes>
    <class kind="class">Sacado::Tay::UnaryPlusOp</class>
    <class kind="class">Sacado::Tay::UnaryMinusOp</class>
    <class kind="class">Sacado::Tay::CacheTaylor</class>
    <class kind="class">Sacado::Tay::CacheTaylorImplementation</class>
    <class kind="class">Sacado::Tay::Expr&lt; CacheTaylorImplementation&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::Tay::CacheTaylor</class>
    <class kind="struct">Sacado::Tay::CacheTaylor::apply</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Tay</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Tay_CacheTaylorExpr.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Tay__CacheTaylorExpr_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::Tay::Expr</class>
    <class kind="class">Sacado::Tay::ConstExpr</class>
    <class kind="class">Sacado::Tay::UnaryExpr</class>
    <class kind="class">Sacado::Tay::BinaryExpr</class>
    <class kind="class">Sacado::Tay::BinaryExpr&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2, Op &gt;</class>
    <class kind="class">Sacado::Tay::BinaryExpr&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt;, Op &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; Tay::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; Tay::Expr&lt; T &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Tay</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Tay_CacheTaylorImp.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Tay__CacheTaylorImp_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>Sacado_Tay_CacheTaylorOps.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Tay__CacheTaylorOps_8hpp</filename>
    <includes id="Sacado__Tay__CacheTaylorExpr_8hpp" name="Sacado_Tay_CacheTaylorExpr.hpp" local="yes" imported="no">Sacado_Tay_CacheTaylorExpr.hpp</includes>
    <includes id="Sacado__mpl__disable__if_8hpp" name="Sacado_mpl_disable_if.hpp" local="yes" imported="no">Sacado_mpl_disable_if.hpp</includes>
    <includes id="Sacado__mpl__is__same_8hpp" name="Sacado_mpl_is_same.hpp" local="yes" imported="no">Sacado_mpl_is_same.hpp</includes>
    <class kind="class">Sacado::Tay::UnaryPlusOp</class>
    <class kind="class">Sacado::Tay::UnaryMinusOp</class>
    <class kind="class">Sacado::Tay::ExpOp</class>
    <class kind="class">Sacado::Tay::LogOp</class>
    <class kind="class">Sacado::Tay::SqrtOp</class>
    <class kind="class">Sacado::Tay::CosOp</class>
    <class kind="class">Sacado::Tay::SinOp</class>
    <class kind="class">Sacado::Tay::CoshOp</class>
    <class kind="class">Sacado::Tay::SinhOp</class>
    <class kind="class">Sacado::Tay::FAbsOp</class>
    <class kind="class">Sacado::Tay::AdditionOp</class>
    <class kind="class">Sacado::Tay::AdditionOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</class>
    <class kind="class">Sacado::Tay::AdditionOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::SubtractionOp</class>
    <class kind="class">Sacado::Tay::SubtractionOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</class>
    <class kind="class">Sacado::Tay::SubtractionOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::MultiplicationOp</class>
    <class kind="class">Sacado::Tay::MultiplicationOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</class>
    <class kind="class">Sacado::Tay::MultiplicationOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::DivisionOp</class>
    <class kind="class">Sacado::Tay::DivisionOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</class>
    <class kind="class">Sacado::Tay::DivisionOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::MaxOp</class>
    <class kind="class">Sacado::Tay::MaxOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</class>
    <class kind="class">Sacado::Tay::MaxOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::MinOp</class>
    <class kind="class">Sacado::Tay::MinOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</class>
    <class kind="class">Sacado::Tay::MinOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::ASinQuadOp</class>
    <class kind="class">Sacado::Tay::ACosQuadOp</class>
    <class kind="class">Sacado::Tay::ATanQuadOp</class>
    <class kind="struct">Sacado::Tay::PowExprType</class>
    <class kind="struct">Sacado::Tay::PowExprType&lt; typename ExprT2::value_type, ExprT2 &gt;</class>
    <class kind="struct">Sacado::Tay::PowExprType&lt; ExprT1, typename ExprT1::value_type &gt;</class>
    <class kind="struct">Sacado::Tay::Log10ExprType</class>
    <class kind="struct">Sacado::Tay::TanExprType</class>
    <class kind="struct">Sacado::Tay::ASinExprType</class>
    <class kind="struct">Sacado::Tay::ACosExprType</class>
    <class kind="struct">Sacado::Tay::ATanExprType</class>
    <class kind="struct">Sacado::Tay::TanhExprType</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Tay</namespace>
    <namespace>std</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAYLOR_UNARYOP_MACRO</name>
      <anchorfile>Sacado__Tay__CacheTaylorOps_8hpp.html</anchorfile>
      <anchor>a384b859fdb3bfe74507c9d08f96a9a22</anchor>
      <arglist>(OPNAME, OP)                                                              </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAYLOR_BINARYOP_MACRO</name>
      <anchorfile>Sacado__Tay__CacheTaylorOps_8hpp.html</anchorfile>
      <anchor>a91ed03b7f8b81889baf27c9af8173c9e</anchor>
      <arglist>(OPNAME, OP)                                                            </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAYLOR_SFINAE_BINARYOP_MACRO</name>
      <anchorfile>Sacado__Tay__CacheTaylorOps_8hpp.html</anchorfile>
      <anchor>a2bdd8401d98c134995d24a6761331fc0</anchor>
      <arglist>(OPNAME, OP)                                              </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAYLOR_RELOP_MACRO</name>
      <anchorfile>Sacado__Tay__CacheTaylorOps_8hpp.html</anchorfile>
      <anchor>a98ec88b567b22b2ef280f77bc0ec530c</anchor>
      <arglist>(OP)                                                                                </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAY_BOOL_MACRO</name>
      <anchorfile>Sacado__Tay__CacheTaylorOps_8hpp.html</anchorfile>
      <anchor>a32c6de4abfe5b7deb205996249271ce8</anchor>
      <arglist>(OP)                                                                                        </arglist>
    </member>
    <member kind="function">
      <type>Expr&lt; BinaryExpr&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt;, ASinQuadOp &gt; &gt;</type>
      <name>asin_quad</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ad747c6fc426e103541b58ece0ee7b45e</anchor>
      <arglist>(const Expr&lt; T1 &gt; &amp;expr1, const Expr&lt; T2 &gt; &amp;expr2)</arglist>
    </member>
    <member kind="function">
      <type>Expr&lt; BinaryExpr&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt;, ACosQuadOp &gt; &gt;</type>
      <name>acos_quad</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ac964510e4d71dde3faf290e0c96ff26a</anchor>
      <arglist>(const Expr&lt; T1 &gt; &amp;expr1, const Expr&lt; T2 &gt; &amp;expr2)</arglist>
    </member>
    <member kind="function">
      <type>Expr&lt; BinaryExpr&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt;, ATanQuadOp &gt; &gt;</type>
      <name>atan_quad</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a302bad1d329cdc418b3d30e4da91d39a</anchor>
      <arglist>(const Expr&lt; T1 &gt; &amp;expr1, const Expr&lt; T2 &gt; &amp;expr2)</arglist>
    </member>
    <member kind="function">
      <type>PowExprType&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt; &gt;::expr_type</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a77fda6c08c533ed565dbb4f8d13ad89e</anchor>
      <arglist>(const Expr&lt; T1 &gt; &amp;expr1, const Expr&lt; T2 &gt; &amp;expr2)</arglist>
    </member>
    <member kind="function">
      <type>PowExprType&lt; typename Expr&lt; T &gt;::value_type, Expr&lt; T &gt; &gt;::expr_type</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>affae41cfd03b5832a0a87905faec147e</anchor>
      <arglist>(const typename Expr&lt; T &gt;::value_type &amp;c, const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>PowExprType&lt; Expr&lt; T &gt;, typename Expr&lt; T &gt;::value_type &gt;::expr_type</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ad3a5d32d68032641b90d0483e27fe2d2</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr, const typename Expr&lt; T &gt;::value_type &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Log10ExprType&lt; T &gt;::expr_type</type>
      <name>log10</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aea02fc66de226af3ee8447e6815b3e7b</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>TanExprType&lt; T &gt;::expr_type</type>
      <name>tan</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ab7d6b487b3da6058e6d502c1c409803c</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>ASinExprType&lt; T &gt;::expr_type</type>
      <name>asin</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ac009f97d38408396dc441f301fbd52fc</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>ACosExprType&lt; T &gt;::expr_type</type>
      <name>acos</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a8fcf53249471997d971ba15da4e272f6</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>ATanExprType&lt; T &gt;::expr_type</type>
      <name>atan</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a91535e1be86f03c9ee3b046cc781b569</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>TanhExprType&lt; T &gt;::expr_type</type>
      <name>tanh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a3c27c8a0ab6b9ae4fc9e1a9ca8035ec1</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a4969519cc74dc0d2ff8fe718c6a9498e</anchor>
      <arglist>(const Expr&lt; ExprT &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toBool2</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ab9cba93bbd17cade5a0a4d6176942fb7</anchor>
      <arglist>(const Expr&lt; ExprT &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aabae2f6f8aded91d59ab821ca494e385</anchor>
      <arglist>(std::ostream &amp;os, const Expr&lt; ExprT &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt;</type>
      <name>diff</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>abf5f500b86c429b7cec135cb0b022850</anchor>
      <arglist>(const CacheTaylor&lt; T &gt; &amp;x, int n=1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_Tay_CacheTaylorTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Tay__CacheTaylorTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::Tay::CacheTaylor</class>
    <class kind="class">Sacado::Tay::Expr</class>
    <class kind="struct">Sacado::ScalarType&lt; Tay::CacheTaylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Tay::CacheTaylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Tay::CacheTaylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Tay::CacheTaylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Tay::CacheTaylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Tay::CacheTaylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Tay::CacheTaylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; Tay::CacheTaylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; Tay::CacheTaylor&lt; T &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Tay</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Tay_ScalarTraitsImp.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Tay__ScalarTraitsImp_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>Sacado_Tay_Taylor.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Tay__Taylor_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
    <includes id="Sacado__Base_8hpp" name="Sacado_Base.hpp" local="yes" imported="no">Sacado_Base.hpp</includes>
    <includes id="Sacado__Handle_8hpp" name="Sacado_Handle.hpp" local="yes" imported="no">Sacado_Handle.hpp</includes>
    <includes id="Sacado__dummy__arg_8hpp" name="Sacado_dummy_arg.hpp" local="yes" imported="no">Sacado_dummy_arg.hpp</includes>
    <includes id="Sacado__Tay__TaylorTraits_8hpp" name="Sacado_Tay_TaylorTraits.hpp" local="yes" imported="no">Sacado_Tay_TaylorTraits.hpp</includes>
    <includes id="Sacado__Tay__TaylorImp_8hpp" name="Sacado_Tay_TaylorImp.hpp" local="yes" imported="no">Sacado_Tay_TaylorImp.hpp</includes>
    <class kind="class">Sacado::Tay::Taylor</class>
    <class kind="struct">Sacado::Tay::Taylor::apply</class>
    <class kind="struct">Sacado::Tay::Taylor::TaylorData</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Tay</namespace>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>diff</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a1476cccb465b0b240ef034e558db8d98</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x, int n=1)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a3b1442906ce8dcdf2ced30d61dd2640e</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a9d8c8ffe514924219a2eed9dcd2a2a28</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aee966d5534cfe50ca84339fa32300266</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a0fb7bc081f198a99502d08e65c982f81</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>af12d2af93e8e2dd1e5a93635bcf44819</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a6c12d91716f05583d5dd4f7d5fae8cf9</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a09930e54ea94b71c66527795cc6a1d2b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>adcfd434fdcf2279f4476139ac1842871</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aa52d11161b039691bda00ac1eb3c4a4e</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a5fd42ac1572d03a5f5e88363f01c354c</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aa1b35ee5d2ca13d52a339ebdf688ca5f</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a6c9e640e621343106ccc4d651af8a079</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>exp</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a81eb93027802beaf4c269daacaf0f09d</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>log</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a3f86b0688ca5de6fa130589a830189c2</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>log10</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a7b069952a021e48ab551521a49e2b872</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>sqrt</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>abbe6b46c1205f2d6c7aeb2312f0ba557</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>abef7c6afc52a30c76844904cbbbcb0f5</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a6304bdbd4077bf4635b548cf4ed26804</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a6cfa5234c5039354d6b63dc15b2797ba</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sincos</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a671dfa0c230a0f79d1f971b343ef18a6</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, Taylor&lt; T &gt; &amp;s, Taylor&lt; T &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>cos</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a2d404bfc8069ad8c05bb34f6be0aea68</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>sin</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ab1a7fa1b496995cfbef390ac5b641675</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>tan</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a226422edee7130eed8e239068357e8c3</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sinhcosh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a73a1c67399f9474817fbacad26753504</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, Taylor&lt; T &gt; &amp;s, Taylor&lt; T &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>cosh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ad85d72ff8933fe4ca100fa758b06e50e</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>sinh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a952906b7d447092126eca57fcc50584b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>tanh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ad3b248204aa79b21e67d13cd91ca6941</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>quad</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ae1a2a180344d68c844399f30d72d19af</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;c0, const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>acos</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a5d7bf76ec1a0deee6922db137d2cb32c</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>asin</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>afb008a126e6855a9947988b6fc9b1c0e</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>atan</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a22644603ed892be3213d89521b36be4b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a8479214382eebf93915f02425f3e3bd6</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a5ee35a2e7678bfe688daf6a5ad359428</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ab66de7f3c608c0b6557fb4b10fd21196</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>acosh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a3cdc22b6b89abdb9d42e2f9287f44bea</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>asinh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a32c75025914f7d063a7626da411b8c8b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>atanh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aae147899e3af9809616b819e79fbea24</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a840315796f7a154bd2e0974bd6e744af</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>fabs</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ae36d22eaceccba08795d6da7a62b449f</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a148fbd2e0c37f12efc54077936980f2b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a0c8e0e6755716bda0f1db6f5239a6071</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a767f933082fae38395bd3117f9bb2f43</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a1ec21bb61e42f2d7df22669a2da868a4</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a9059aaa0416c5f4de26615f5aaa01148</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a905635d56795c2d3a6e0cc056d749cf4</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a387b62427cc4eda86cba97e1cf26f767</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a4a2347c7d72d0a449a429f8db184499e</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ab0b289eb647662768850f4c18d92fc8f</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a4bc8745ab920de6e613b0527e80c4300</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ae1de0cea2dd6178c667f35a6e37c84e9</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aa9d470dbc6e9385c1c8b93ce4e38d31e</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ad27d853c477df65d7769dec0d35b6f91</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>af4bf537ac803b4f4761a6a07e3a4401a</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a75587f3a462a01c20f82bbada130c9dc</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a5710aeb6f988b0516ea5dcc654a96202</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a3005284b32e7e0cb9fba9e3c11c91c3f</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a54ead763bac2686dddacb1cbefcc83fd</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aff60f1313f8c3ebe9986b93368d3b002</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a41d3bacf0522350bc3d8c3f2c59dc67e</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a0e84cf1b3bc7b9618da0274fe612b672</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a9cd89197cd1aa52f2e7f2134d989637b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a3c360a6979e8a2a1a0bcf9bacf349c99</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a4dfe0bfa6f532a60af10a527bd9aff7b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a85c7d534ae9334ed838582c5064c9820</anchor>
      <arglist>(std::ostream &amp;os, const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_Tay_TaylorImp.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Tay__TaylorImp_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
    <includes id="Sacado__DynamicArrayTraits_8hpp" name="Sacado_DynamicArrayTraits.hpp" local="yes" imported="no">Sacado_DynamicArrayTraits.hpp</includes>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Tay</namespace>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a3b1442906ce8dcdf2ced30d61dd2640e</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a9d8c8ffe514924219a2eed9dcd2a2a28</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aee966d5534cfe50ca84339fa32300266</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a0fb7bc081f198a99502d08e65c982f81</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>af12d2af93e8e2dd1e5a93635bcf44819</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a6c12d91716f05583d5dd4f7d5fae8cf9</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a09930e54ea94b71c66527795cc6a1d2b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>adcfd434fdcf2279f4476139ac1842871</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aa52d11161b039691bda00ac1eb3c4a4e</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a5fd42ac1572d03a5f5e88363f01c354c</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aa1b35ee5d2ca13d52a339ebdf688ca5f</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a6c9e640e621343106ccc4d651af8a079</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>exp</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a81eb93027802beaf4c269daacaf0f09d</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>log</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a3f86b0688ca5de6fa130589a830189c2</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>log10</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a7b069952a021e48ab551521a49e2b872</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>sqrt</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>abbe6b46c1205f2d6c7aeb2312f0ba557</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>abef7c6afc52a30c76844904cbbbcb0f5</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a6304bdbd4077bf4635b548cf4ed26804</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a6cfa5234c5039354d6b63dc15b2797ba</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sincos</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a671dfa0c230a0f79d1f971b343ef18a6</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, Taylor&lt; T &gt; &amp;s, Taylor&lt; T &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>sin</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ab1a7fa1b496995cfbef390ac5b641675</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>cos</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a2d404bfc8069ad8c05bb34f6be0aea68</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>tan</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a226422edee7130eed8e239068357e8c3</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sinhcosh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a73a1c67399f9474817fbacad26753504</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, Taylor&lt; T &gt; &amp;s, Taylor&lt; T &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>sinh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a952906b7d447092126eca57fcc50584b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>cosh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ad85d72ff8933fe4ca100fa758b06e50e</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>tanh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ad3b248204aa79b21e67d13cd91ca6941</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>quad</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ae1a2a180344d68c844399f30d72d19af</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;c0, const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>acos</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a5d7bf76ec1a0deee6922db137d2cb32c</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>asin</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>afb008a126e6855a9947988b6fc9b1c0e</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>atan</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a22644603ed892be3213d89521b36be4b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a8479214382eebf93915f02425f3e3bd6</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a5ee35a2e7678bfe688daf6a5ad359428</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ab66de7f3c608c0b6557fb4b10fd21196</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>acosh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a3cdc22b6b89abdb9d42e2f9287f44bea</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>asinh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a32c75025914f7d063a7626da411b8c8b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>atanh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aae147899e3af9809616b819e79fbea24</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>fabs</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ae36d22eaceccba08795d6da7a62b449f</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a840315796f7a154bd2e0974bd6e744af</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a148fbd2e0c37f12efc54077936980f2b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a0c8e0e6755716bda0f1db6f5239a6071</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a767f933082fae38395bd3117f9bb2f43</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a1ec21bb61e42f2d7df22669a2da868a4</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a9059aaa0416c5f4de26615f5aaa01148</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a905635d56795c2d3a6e0cc056d749cf4</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a387b62427cc4eda86cba97e1cf26f767</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a4a2347c7d72d0a449a429f8db184499e</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ab0b289eb647662768850f4c18d92fc8f</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a4bc8745ab920de6e613b0527e80c4300</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ae1de0cea2dd6178c667f35a6e37c84e9</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aa9d470dbc6e9385c1c8b93ce4e38d31e</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ad27d853c477df65d7769dec0d35b6f91</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>af4bf537ac803b4f4761a6a07e3a4401a</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a75587f3a462a01c20f82bbada130c9dc</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a5710aeb6f988b0516ea5dcc654a96202</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a3005284b32e7e0cb9fba9e3c11c91c3f</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a54ead763bac2686dddacb1cbefcc83fd</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aff60f1313f8c3ebe9986b93368d3b002</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a41d3bacf0522350bc3d8c3f2c59dc67e</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a0e84cf1b3bc7b9618da0274fe612b672</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a9cd89197cd1aa52f2e7f2134d989637b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a3c360a6979e8a2a1a0bcf9bacf349c99</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a4dfe0bfa6f532a60af10a527bd9aff7b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toBool</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ad4d41b96be4bd56c4b04f89e8bae73e7</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&amp;&amp;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a702cb1bf5291a9476cfd424dc6103c6b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;xx1, const Base&lt; Taylor&lt; T &gt; &gt; &amp;xx2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&amp;&amp;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aadf860e0c9effce0f8c64dc1c3921236</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;xx2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&amp;&amp;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a96c9dcfbe0d6d472ff44872429f10949</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;xx1, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator||</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a8928bb949e573a94129c958c56324c04</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;xx1, const Base&lt; Taylor&lt; T &gt; &gt; &amp;xx2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator||</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ac9d28161f40173d4a84df3f5c410336c</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;xx2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator||</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>abdbfd12fb2e60b55bd3ce0fa47cba019</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;xx1, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a85c7d534ae9334ed838582c5064c9820</anchor>
      <arglist>(std::ostream &amp;os, const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_Tay_TaylorTraits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Tay__TaylorTraits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::Tay::Taylor</class>
    <class kind="struct">Sacado::ScalarType&lt; Tay::Taylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Tay::Taylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Tay::Taylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Tay::Taylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Tay::Taylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Tay::Taylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Tay::Taylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; Tay::Taylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; Tay::Taylor&lt; T &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Tay</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_TemplateContainer.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/template/</path>
    <filename>Sacado__TemplateContainer_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
  </compound>
  <compound kind="file">
    <name>Sacado_TemplateIterator.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/template/</path>
    <filename>Sacado__TemplateIterator_8hpp</filename>
    <class kind="class">Sacado::TemplateIterator</class>
    <class kind="class">Sacado::ConstTemplateIterator</class>
    <namespace>Sacado</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_TemplateManager.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/template/</path>
    <filename>Sacado__TemplateManager_8hpp</filename>
    <includes id="Sacado__mpl__size_8hpp" name="Sacado_mpl_size.hpp" local="yes" imported="no">Sacado_mpl_size.hpp</includes>
    <includes id="Sacado__mpl__find_8hpp" name="Sacado_mpl_find.hpp" local="yes" imported="no">Sacado_mpl_find.hpp</includes>
    <includes id="Sacado__mpl__for__each_8hpp" name="Sacado_mpl_for_each.hpp" local="yes" imported="no">Sacado_mpl_for_each.hpp</includes>
    <includes id="Sacado__mpl__apply_8hpp" name="Sacado_mpl_apply.hpp" local="yes" imported="no">Sacado_mpl_apply.hpp</includes>
    <includes id="Sacado__TemplateIterator_8hpp" name="Sacado_TemplateIterator.hpp" local="yes" imported="no">Sacado_TemplateIterator.hpp</includes>
    <includes id="Sacado__TemplateManagerImp_8hpp" name="Sacado_TemplateManagerImp.hpp" local="yes" imported="no">Sacado_TemplateManagerImp.hpp</includes>
    <class kind="class">Sacado::TemplateManager</class>
    <class kind="struct">Sacado::TemplateManager::type_info_less</class>
    <class kind="struct">Sacado::TemplateManager::BuildObject</class>
    <class kind="struct">Sacado::TemplateManager::DefaultBuilderOp</class>
    <namespace>Sacado</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_TemplateManagerImp.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/template/</path>
    <filename>Sacado__TemplateManagerImp_8hpp</filename>
  </compound>
  <compound kind="file">
    <name>Sacado_trad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__trad_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
    <includes id="Sacado__trad__Traits_8hpp" name="Sacado_trad_Traits.hpp" local="yes" imported="no">Sacado_trad_Traits.hpp</includes>
    <includes id="Sacado__Base_8hpp" name="Sacado_Base.hpp" local="yes" imported="no">Sacado_Base.hpp</includes>
    <includes id="Sacado__cmath_8hpp" name="Sacado_cmath.hpp" local="no" imported="no">Sacado_cmath.hpp</includes>
    <class kind="class">Sacado::Rad::RAD_DoubleIgnore</class>
    <class kind="class">Sacado::Rad::DoubleAvoid</class>
    <class kind="class">Sacado::Rad::DoubleAvoid&lt; double &gt;</class>
    <class kind="class">Sacado::Rad::DoubleAvoid&lt; int &gt;</class>
    <class kind="class">Sacado::Rad::DoubleAvoid&lt; long &gt;</class>
    <class kind="class">Sacado::Rad::IndepADvar</class>
    <class kind="class">Sacado::Rad::ConstADvar</class>
    <class kind="class">Sacado::Rad::ConstADvari</class>
    <class kind="class">Sacado::Rad::ADvar</class>
    <class kind="class">Sacado::Rad::ADvari</class>
    <class kind="class">Sacado::Rad::ADvar1</class>
    <class kind="class">Sacado::Rad::ADvar1s</class>
    <class kind="class">Sacado::Rad::ADvar2</class>
    <class kind="class">Sacado::Rad::ADvar2q</class>
    <class kind="class">Sacado::Rad::ADvarn</class>
    <class kind="class">Sacado::Rad::Derp</class>
    <class kind="struct">Sacado::Rad::ADmemblock</class>
    <class kind="class">Sacado::Rad::ADcontext</class>
    <class kind="class">Sacado::Rad::CADcontext</class>
    <class kind="class">Sacado::Rad::Derp</class>
    <class kind="class">Sacado::Rad::ADvari</class>
    <class kind="class">Sacado::Rad::ADvar1</class>
    <class kind="class">Sacado::Rad::ConstADvari</class>
    <class kind="class">Sacado::Rad::IndepADvar_base0</class>
    <class kind="class">Sacado::Rad::IndepADvar_base</class>
    <class kind="class">Sacado::Rad::IndepADvar</class>
    <class kind="class">Sacado::Rad::ADvar</class>
    <class kind="struct">Sacado::Rad::ADvar::apply</class>
    <class kind="class">Sacado::Rad::ConstADvar</class>
    <class kind="class">Sacado::Rad::ADvar1s</class>
    <class kind="class">Sacado::Rad::ADvar2</class>
    <class kind="class">Sacado::Rad::ADvar2q</class>
    <class kind="class">Sacado::Rad::ADvarn</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Rad</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RAD_REINIT</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>aa498b756160cc85facea3fadca67c1cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RAD_ALLOW_WANTDERIV</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a0567e653ccfc0f116c302d0322b766f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RAD_REINIT_0</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a5bbbafeb5fe27a3c62c67ad2194d43a8</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RAD_REINIT_1</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>adf7d7f54c6491eda392700c721a5fc9c</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RAD_REINIT_2</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>ac6a71c1e68f0fc0bf61e42509d15c89b</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RAD_cvchk</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>aa3b12cc53df01919d995ff725f0c0036</anchor>
      <arglist>(x)    </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RAD_REINIT_0</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a5bbbafeb5fe27a3c62c67ad2194d43a8</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Allow_noderiv</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a06f9239fc48c30935a1f9ce2570ac91d</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Dtype</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>aae1051a1affafcf6ce277414adabc2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ltype</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>aa1aaec1373d5f10a43df7db261ee9b6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Itype</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>abec866c17979ada9acabdfec38031c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ttype</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a273ecfeb293cf0ac6c31c4faf7319735</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ai</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a8a04658937bdeefa8b5cf850d99d7a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>ab279897ed5e1f077b1a4c30b704683a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a0acb682b8260ab1c60b918599864e2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>D</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>af316c33cc298530f245e8b55330e86b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T1</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a2a86db84e9d9559433140f4eac707094</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T2</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>aa65d6590ee7031a474181ec45493a601</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>R</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a5c71a5e59a53413cd6c270266d63b031</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ai</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a8a04658937bdeefa8b5cf850d99d7a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>D</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>af316c33cc298530f245e8b55330e86b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T1</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a2d0f3522ee797e7b3355d9444eafebad</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T2</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>aa65d6590ee7031a474181ec45493a601</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ai</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a8a04658937bdeefa8b5cf850d99d7a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>ab279897ed5e1f077b1a4c30b704683a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>D</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>af316c33cc298530f245e8b55330e86b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T2</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>aa65d6590ee7031a474181ec45493a601</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T1</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a2a86db84e9d9559433140f4eac707094</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ADvar_nd</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a0af0d5624de54f236fe65f9cb60888af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RAD_ACA</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>afe47ec9172b48179182877d964a512a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>A</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a955f504eccf76b4eb2489c0adab03121</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>C</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>ac54ae397901fe700628cafadea3c5208</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a0acb682b8260ab1c60b918599864e2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ai</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a8a04658937bdeefa8b5cf850d99d7a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>ab279897ed5e1f077b1a4c30b704683a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>D</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>af316c33cc298530f245e8b55330e86b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CAI</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a175d8d8410bcd3d92d771d32588bd7da</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CAi</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>ab49db19e697b8c50c7ae7ab88c93a83d</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T2</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>aa65d6590ee7031a474181ec45493a601</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T1</name>
      <anchorfile>Sacado__trad_8hpp.html</anchorfile>
      <anchor>a2a86db84e9d9559433140f4eac707094</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="function">
      <type>T F</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a49ab12b8a9ca705adf1f3763d3b894a0</anchor>
      <arglist>(AI)</arglist>
    </member>
    <member kind="function">
      <type>T F</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a4a87ef4f48362d7dc089b063eda44c39</anchor>
      <arglist>(Ai)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a323b5f4fb9c95e3fbeb100c76902f9a1</anchor>
      <arglist>(Double f, Double g, const IndepADvar&lt; Double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a8eaeac9c878687098d64f8859ab0626a</anchor>
      <arglist>(Double f, Double gx, Double gy, const IndepADvar&lt; Double &gt; &amp;x, const IndepADvar&lt; Double &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>abb8410fda4fa1717c2666a8537250676</anchor>
      <arglist>(Double f, int n, const IndepADvar&lt; Double &gt; *x, const Double *g)</arglist>
    </member>
    <member kind="function">
      <type>IndepADvar&lt; Double &gt; &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a500aa366dc02e58b5c397542c95d38d3</anchor>
      <arglist>(IndepADvar&lt; Double &gt; *, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar&lt; Double &gt; &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>aa9e61a98a00af5b79b9ac365b60dc963</anchor>
      <arglist>(ADvar&lt; Double &gt; *, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Const</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a8d5a64302168f08a7fe1720018258f5a</anchor>
      <arglist>(const IndepADvar&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Const1</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a3e7d37885d55666b11c7de8afaffbccb</anchor>
      <arglist>(Double *, const IndepADvar&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a156378c04429f795b99fa20f9848b5ca</anchor>
      <arglist>(Double, Double, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>aaf9b0e263dcf5c2d9bda6957dbcf80a9</anchor>
      <arglist>(Double, Double, Double, const ADvari&lt; Double &gt; &amp;, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ab64f1347519903e81c7a5f6e51296e89</anchor>
      <arglist>(Double, Double, Double, const IndepADvar&lt; Double &gt; &amp;, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a69405e30f8f9e142f2b24cb16514469a</anchor>
      <arglist>(Double, Double, Double, const ADvari&lt; Double &gt; &amp;, const IndepADvar&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Double</type>
      <name>val</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a8cd698955dcc82ac03cda999ab141c01</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a9d6f891467272c5103dc701fe8d18684</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;TT)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a3da6726c9280e18ab3dcac1efc9ef3bc</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a2d0726e1754da87544cb6cc61cf796bd</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a666dc797db992631a8e898fcfc8531d0</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>abafd30391e1f0656e15a7aa7b215f549</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ac203244099749ab475946e5f337c7dba</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ad8de12e74c12fd71a6aca1fe385a44a1</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a1aa82cc41a22c59fa8c64f5d38ef78a8</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a8b66f75dcde4a551a54e8aa0cb69f0cb</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a6a16cb17e1d92cc2966ba77583ca1d3a</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a486a67ae58fe151b93e6261bf4ef821a</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>af6767e822c6fd049e055e563515b6112</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a29298e4c815efa29605df37f635663df</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ae739fb889e9cf1a2c09a500cd3e0ea34</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a62c05988a3f022b730f2ee4b0b1c8678</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ab24b4b9e2a5a9ec11c5ed950b76e871e</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a5aa2448a063ed19aaabc64420216a82c</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ac084389a6d0ca53e2306a6e3e6708473</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a443fad65a9c96030b3e0fb114dbfb251</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a136905c0e31d33c2be86dd5da550cb22</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;TT)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a7354aa245488f5a599351f1e395b8186</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ae3d566744ecd243b33008cbe057a5928</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>acd5fc3d3c1865cdd890fab98bd6e3812</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a70b52692e7174c3575e9ac499bae1c8d</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a5e42258ea4108325aca18ad6fd2732f1</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>af0fc9760358e26017453cbc7710d72a5</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a21fd5a480a39d99019083190830e1204</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a19fb7f4ad7be72430cb9ae47deb43f52</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ac724303b46a1ae126b2780b00aaa51ca</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ab4d9d4de112f2cb781b5fcc74c6011b4</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a8fb1001cc8aa34ef0274062b30676bdf</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ad367f96a4b63be770dcc8a7e4e5404ee</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>acos</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a42781dd8a71665a9d878bffa1ec8ff61</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>acosh</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a10bf37b3e8cacb222c0d647274d2d705</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>asin</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a4838fb7a24c05386467c8d9f496daafb</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>asinh</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>aa60bf1b9abf615a20b19095a1d7f15f0</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ae31a11f476099c6c247f175b07e6f925</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atanh</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a13d1b94f0e92c724e40241739c11ed25</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a92b51892c3abbdf2faafbc3093d76cbe</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a8abfdfb620fa742e58b518e39c006b4e</anchor>
      <arglist>(Double x, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a5401446cd7826140510dd2248914fdce</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a929e6553eaba4c19fa3c94894d98166a</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a61f3a9573df0dd3e54c9c91018788699</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a3266d59a4ed0523481003a4ca113768b</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ac1fc5d5de6fc18bb6df20c187b3f5442</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ad2da83cade36039392fefe5996f504ee</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>aeead30d7bda29d2c130d203adb55d793</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>cos</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>af5606da4726796885c0159c957e2997b</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>cosh</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a1f4a5dde08667699c8fa5e977cfee136</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>exp</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a5e18d3ef8b82ea880dafa1d5686f38a7</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>log</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>aa7ce1c679292f8f5a524c5bbdc644961</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>log10</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>afdcc59edfd430e8dbc8a7e543ee54a11</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a430fa6d29090ea8fdd1c0bf906bb669f</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a8986da4cc88258520884356007849702</anchor>
      <arglist>(Double x, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>aac408b0d31b0b6327b1be45c1465e6ad</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>sin</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ae9c2f292bdd8a95f6b76da069faae64e</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>sinh</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a45988282081e142bdc7569fe3fa56c7e</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>sqrt</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ac384db671331b9d34974346c7436ea41</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>tan</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ac9a519fec184c077e85d16c2a84845d6</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>tanh</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a31555e02f5ff66a8b5032860f1a3d476</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>abs</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>adaa934bfd58542c8c9399d0ec1e18bad</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>fabs</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a3d809c2ecab60ac8a77742a602e09025</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a9743927ad3217ab1f2239d00553907b2</anchor>
      <arglist>(Double f, int n, const ADvar&lt; Double &gt; *x, const Double *g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_trad2.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__trad2_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
    <includes id="Sacado__trad2__Traits_8hpp" name="Sacado_trad2_Traits.hpp" local="yes" imported="no">Sacado_trad2_Traits.hpp</includes>
    <includes id="Sacado__cmath_8hpp" name="Sacado_cmath.hpp" local="no" imported="no">Sacado_cmath.hpp</includes>
    <class kind="class">Sacado::Rad2::RAD_DoubleIgnore</class>
    <class kind="class">Sacado::Rad2::DoubleAvoid</class>
    <class kind="class">Sacado::Rad2::DoubleAvoid&lt; double &gt;</class>
    <class kind="class">Sacado::Rad2::IndepADvar</class>
    <class kind="class">Sacado::Rad2::ConstADvar</class>
    <class kind="class">Sacado::Rad2::ConstADvari</class>
    <class kind="class">Sacado::Rad2::ADvar</class>
    <class kind="class">Sacado::Rad2::ADvar1</class>
    <class kind="class">Sacado::Rad2::ADvar1g</class>
    <class kind="class">Sacado::Rad2::ADvar1s</class>
    <class kind="class">Sacado::Rad2::ADvar2</class>
    <class kind="class">Sacado::Rad2::ADvar2g</class>
    <class kind="class">Sacado::Rad2::ADvar2q</class>
    <class kind="class">Sacado::Rad2::ADvari</class>
    <class kind="class">Sacado::Rad2::ADvari_block</class>
    <class kind="class">Sacado::Rad2::ADvarn</class>
    <class kind="class">Sacado::Rad2::Derp</class>
    <class kind="struct">Sacado::Rad2::ADmemblock</class>
    <class kind="class">Sacado::Rad2::ADvari_block</class>
    <class kind="class">Sacado::Rad2::ADcontext</class>
    <class kind="class">Sacado::Rad2::CADcontext</class>
    <class kind="class">Sacado::Rad2::Derp</class>
    <class kind="class">Sacado::Rad2::ADvari</class>
    <class kind="class">Sacado::Rad2::ADvar1</class>
    <class kind="class">Sacado::Rad2::ConstADvari</class>
    <class kind="class">Sacado::Rad2::IndepADvar</class>
    <class kind="class">Sacado::Rad2::ADvar</class>
    <class kind="struct">Sacado::Rad2::ADvar::apply</class>
    <class kind="class">Sacado::Rad2::ConstADvar</class>
    <class kind="class">Sacado::Rad2::ADvar1s</class>
    <class kind="class">Sacado::Rad2::ADvar1g</class>
    <class kind="class">Sacado::Rad2::ADvar2</class>
    <class kind="class">Sacado::Rad2::ADvar2q</class>
    <class kind="class">Sacado::Rad2::ADvar2g</class>
    <class kind="class">Sacado::Rad2::ADvarn</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Rad2</namespace>
    <namespace>std</namespace>
    <member kind="define">
      <type>#define</type>
      <name>Dtype</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>aae1051a1affafcf6ce277414adabc2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ttype</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>a273ecfeb293cf0ac6c31c4faf7319735</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ai</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>a8a04658937bdeefa8b5cf850d99d7a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>ab279897ed5e1f077b1a4c30b704683a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>a0acb682b8260ab1c60b918599864e2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>D</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>af316c33cc298530f245e8b55330e86b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T1</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>a2a86db84e9d9559433140f4eac707094</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T2</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>aa65d6590ee7031a474181ec45493a601</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SNS</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>aaed74ffd60140d8776b5dca5dda18ea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>R</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>a5c71a5e59a53413cd6c270266d63b031</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ai</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>a8a04658937bdeefa8b5cf850d99d7a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T1</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>a2d0f3522ee797e7b3355d9444eafebad</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T2</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>aa65d6590ee7031a474181ec45493a601</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ai</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>a8a04658937bdeefa8b5cf850d99d7a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>ab279897ed5e1f077b1a4c30b704683a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>D</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>af316c33cc298530f245e8b55330e86b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T2</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>aa65d6590ee7031a474181ec45493a601</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T1</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>a2a86db84e9d9559433140f4eac707094</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RAD_ACA</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>afe47ec9172b48179182877d964a512a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>A</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>a955f504eccf76b4eb2489c0adab03121</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>C</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>ac54ae397901fe700628cafadea3c5208</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>a0acb682b8260ab1c60b918599864e2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ai</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>a8a04658937bdeefa8b5cf850d99d7a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>ab279897ed5e1f077b1a4c30b704683a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>D</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>af316c33cc298530f245e8b55330e86b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T2</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>aa65d6590ee7031a474181ec45493a601</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T1</name>
      <anchorfile>Sacado__trad2_8hpp.html</anchorfile>
      <anchor>a2a86db84e9d9559433140f4eac707094</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Advari_Opclass</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_const</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaa72d41695f0728e6ca4fb3a2a92b797f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_copy</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaae3039be455f9c78e70b7477a0ab023fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_binary</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaa53a73f0ed2a9522cf978e83182b83d3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_unary</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaa62388755b8e4ee5a1ca9caa9498ea6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_negate</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaa786fe89fb559f7c382267d085c9c005f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_plusLR</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaa196daf868c4df8e832eff0dd5a23f435</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_minusLR</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaaa7e1291d0208b047fef5c6bf7c1ee9a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_timesL</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaa66d722610d99140f8909879358d3a935</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_timesLR</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaa6f1eeecef9a683fc7b9343083507bb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_quotLR</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaa29c49e659fd7af8eb27f692dec2ee7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_nary</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaa3b117c01f240e10a305ad762145ad4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T F</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>aa92cae024e4f5a6a1d70bbccbf40dcbe</anchor>
      <arglist>(AI)</arglist>
    </member>
    <member kind="function">
      <type>T F</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a278ba9c8673abfab8e7f0b0125c9e27a</anchor>
      <arglist>(Ai)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a5ca97b52c82e2d75732ca97372f8a435</anchor>
      <arglist>(Double f, Double g, const IndepADvar&lt; Double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a29956984a6d0cd340513a27b3afb8523</anchor>
      <arglist>(Double f, Double gx, Double gy, const IndepADvar&lt; Double &gt; &amp;x, const IndepADvar&lt; Double &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a8d265a0102d7dc653ccbcbc5ea6f25cb</anchor>
      <arglist>(Double f, int n, const IndepADvar&lt; Double &gt; *x, const Double *g)</arglist>
    </member>
    <member kind="function">
      <type>IndepADvar&lt; Double &gt; &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>add8240188bb745cf3c8a1ac906aa5ead</anchor>
      <arglist>(IndepADvar&lt; Double &gt; *, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar&lt; Double &gt; &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>acb9166f5ca8d6ec40d5bc01782c997ba</anchor>
      <arglist>(ADvar&lt; Double &gt; *, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Const</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a15ff342c5755ee039e0fb704aa981a06</anchor>
      <arglist>(const IndepADvar&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Const1</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a0faaf4a9c571e65b5876a774c8fceea1</anchor>
      <arglist>(Double *, const IndepADvar&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a6d565afb0fb76029f036fc91dc21a12e</anchor>
      <arglist>(Double, Double, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a3182a0b205155eb741d75aaf68585042</anchor>
      <arglist>(Double, Double, Double, const ADvari&lt; Double &gt; &amp;, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a53ea2da13f03a480d8fd3d03b4aa3cf9</anchor>
      <arglist>(Double, Double, Double, const IndepADvar&lt; Double &gt; &amp;, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a0dced0c3264a90faa5ef07f8803d5236</anchor>
      <arglist>(Double, Double, Double, const ADvari&lt; Double &gt; &amp;, const IndepADvar&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Double</type>
      <name>val</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ad85bb29bebc1b36daf35bdf7ab586b3c</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a2e806f40ef0092d28836d365f6d1bcbb</anchor>
      <arglist>(Double f, Double g, Double h, const ADvari&lt; Double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a32d64d7db4ccf4bb8f5ed50412b53312</anchor>
      <arglist>(Double f, Double gx, Double gy, Double hxx, Double hxy, Double hyy, const ADvari&lt; Double &gt; &amp;x, const ADvari&lt; Double &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a165ea2eee436a8820d1f02419f498568</anchor>
      <arglist>(Double f, int n, const IndepADvar&lt; Double &gt; *x, const Double *g, const Double *h)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>aec5348a65f8281c6c9490cf0c984c344</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>acc3feef717d30ff53273f9a8fb7b8d93</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a415526dbcfe31f82365f8d9634dd1242</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ace7359ebcac201b6ceef193295d88b9b</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a42d263f125ec02f388fa3074fdb3cc14</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>abca7fa14ceafa90261b12624662d15b9</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>aff77eb7c0e56df515ade8abf1ad4fa22</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a95409434ba3da6569d5a6937673df1e5</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a6c2eef1c3a4c2a606a9ebf5399497f14</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a86445208c518dddb65a64dbcbc48f33b</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>af3e1a3d718909ecc0b048e543fa7bf6b</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a5f7d3f4a8ab8b0e446398aadd676cb33</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>acb8281b798f6927fa11c0614d14611d8</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>aa4e23e4fcb675df38af1d940ffd64431</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ad50ce533f8580d0c035ea8dee87cb368</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a537da0a39bbf01fa8eb635e7428f6d8d</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a8534b7ecd3401c33fd188731b8732801</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a2c7eb6ad51dc5e167daf5fefe13851a6</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ab2e1b36dbbd19d0b62bbea01596a769a</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a00d0faadbe778c27aa2aa9f6a05ce0ee</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ab6118432524ece7f018214a7b7e1e6fc</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a4128c86a051e04dd6207aa07bee829b7</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a3c97d84d24813efb7f8e1571f192b5d0</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>af6f30bc31921854facb602150de8d3a1</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a34e648905cd06b5645a5a5804717b065</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a86952159479615a6dbbd4f61a3e6be0c</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a69861a1c96fe3b02ac9bdb45e990c48a</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a524b8bc8b66f874aa1a163f92b09a50d</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>acc637d881935300ec52f6e3ae29f5855</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>aa78c17dfa5e05f0c7fff134fef232770</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a2eb40840d090fea72f05ca289b673368</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a848e69726af1f7f341c6153f81dcf8cd</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>acos</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a121486c9f18e3acb4322618b04a28be6</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>acosh</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a6370b22b7e92634877266a61649072e9</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>asin</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a70632fdb54cfb11e1afd4ee224a662c7</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>asinh</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a70fd4566c20996cc7f247b917f862aab</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a10aa88a74633142f66b92a2321e7eea2</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atanh</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a6fe7dad29a32a92b1a91283db1666d44</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a46b454d9b3b7c69fbe6f8a1a73560e37</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a8bc5b4d4cb5c0dcb41da762e173e3c9f</anchor>
      <arglist>(Double x, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a4f7b06f1085b4ceaa532e215eee29b70</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a306533c2aa139dc010fe12161e1e9f8f</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ae45a0a23ffcfb5cde7026610a305acca</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a612113d318b48f8a0dde8ef706743ab9</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a28f464dd9da6e5dd4c5c6809890d27c8</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>aaa7aad6f706ccb5ad072bc68fd78606a</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ad20e9067a1cc877afc7f0ef488620ac2</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>cos</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a58daa63d8ceef0ad5b346be655335b21</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>cosh</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a9c6cf6435d3c4ed98783af5ecf97fda9</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>exp</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a70b28efc6363212eeb4d54ef6f798a16</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>log</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>af7ffd01e32f23282198a00f0d008494a</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>log10</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a13b8053793995b851136b55dd5e2caf9</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a45613cdb1d58d7eabf9e65e3b51ee565</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>addcf8457c96c5b091e931201e37541f6</anchor>
      <arglist>(Double x, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a7cef9d084656ed4ab76387d5c83ebd97</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>sin</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a7c252cba79ca54ed5d2b6f935a5a3b83</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>sinh</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a9aad5157342895da0ffacce68d002049</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>sqrt</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a09eba3dd0736023311c0fcbd57f882cb</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>tan</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a214296351e7e42102f57e33a44f29444</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>tanh</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a22317a2b52ba8505946439884d00f4d8</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>abs</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>abe20177e6a9dae1be865ead38c8947af</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>fabs</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ae3c5f0f2fbd886632dd4cdd41535468b</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a769b8d75b1653a2fe8d1f78f22bb3b74</anchor>
      <arglist>(Double f, Double g, Double h, const IndepADvar&lt; Double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ad94faa0a7e7c9a7532953acd13f8b7cb</anchor>
      <arglist>(Double f, Double gx, Double gy, Double hxx, Double hxy, Double hyy, const ADvari&lt; Double &gt; &amp;x, const IndepADvar&lt; Double &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ae2181d17d3c7262938bb4001dc8076b7</anchor>
      <arglist>(Double f, Double gx, Double gy, Double hxx, Double hxy, Double hyy, const IndepADvar&lt; Double &gt; &amp;x, const ADvari&lt; Double &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ac96a226aba9adbd7cfbffed57545f546</anchor>
      <arglist>(Double f, Double gx, Double gy, Double hxx, Double hxy, Double hyy, const IndepADvar&lt; Double &gt; &amp;x, const IndepADvar&lt; Double &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>aa9929800da424d6a5c00b2ecb933be53</anchor>
      <arglist>(Double f, int n, const ADvar&lt; Double &gt; *x, const Double *g, const Double *h)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_trad2_Traits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__trad2__Traits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::Rad2::ADvar</class>
    <class kind="class">Sacado::Rad2::ADvari</class>
    <class kind="struct">Sacado::ScalarType&lt; Rad2::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; Rad2::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Rad2::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Rad2::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Rad2::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Rad2::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Rad2::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Rad2::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Rad2::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::MarkConstant&lt; Rad2::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::MarkConstant&lt; Rad2::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Rad2::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Rad2::ADvar&lt; T &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Rad2</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_trad_Traits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__trad__Traits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::Rad::ADvar</class>
    <class kind="class">Sacado::Rad::ADvari</class>
    <class kind="struct">Sacado::ScalarType&lt; Rad::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; Rad::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Rad::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Rad::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Rad::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Rad::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Rad::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Rad::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Rad::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::MarkConstant&lt; Rad::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::MarkConstant&lt; Rad::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Rad::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Rad::ADvar&lt; T &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::Rad</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_tradvec.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__tradvec_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
    <includes id="Sacado__tradvec__Traits_8hpp" name="Sacado_tradvec_Traits.hpp" local="yes" imported="no">Sacado_tradvec_Traits.hpp</includes>
    <includes id="Sacado__cmath_8hpp" name="Sacado_cmath.hpp" local="no" imported="no">Sacado_cmath.hpp</includes>
    <class kind="class">Sacado::RadVec::RAD_DoubleIgnore</class>
    <class kind="class">Sacado::RadVec::DoubleAvoid</class>
    <class kind="class">Sacado::RadVec::DoubleAvoid&lt; double &gt;</class>
    <class kind="class">Sacado::RadVec::IndepADvar</class>
    <class kind="class">Sacado::RadVec::ConstADvar</class>
    <class kind="class">Sacado::RadVec::ConstADvari</class>
    <class kind="class">Sacado::RadVec::ADvar</class>
    <class kind="class">Sacado::RadVec::ADvari</class>
    <class kind="class">Sacado::RadVec::ADvar1</class>
    <class kind="class">Sacado::RadVec::ADvar1s</class>
    <class kind="class">Sacado::RadVec::ADvar2</class>
    <class kind="class">Sacado::RadVec::ADvar2q</class>
    <class kind="class">Sacado::RadVec::ADvarn</class>
    <class kind="class">Sacado::RadVec::Derp</class>
    <class kind="struct">Sacado::RadVec::ADmemblock</class>
    <class kind="class">Sacado::RadVec::ADcontext</class>
    <class kind="class">Sacado::RadVec::CADcontext</class>
    <class kind="class">Sacado::RadVec::Derp</class>
    <class kind="class">Sacado::RadVec::ADvari</class>
    <class kind="class">Sacado::RadVec::ADvar1</class>
    <class kind="class">Sacado::RadVec::ConstADvari</class>
    <class kind="class">Sacado::RadVec::IndepADvar</class>
    <class kind="class">Sacado::RadVec::ADvar</class>
    <class kind="struct">Sacado::RadVec::ADvar::apply</class>
    <class kind="class">Sacado::RadVec::ConstADvar</class>
    <class kind="class">Sacado::RadVec::ADvar1s</class>
    <class kind="class">Sacado::RadVec::ADvar2</class>
    <class kind="class">Sacado::RadVec::ADvar2q</class>
    <class kind="class">Sacado::RadVec::ADvarn</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::RadVec</namespace>
    <member kind="define">
      <type>#define</type>
      <name>Padvinit</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>ab873c50356cbf7cbc79b2c2c6a107ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Dtype</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>aae1051a1affafcf6ce277414adabc2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ttype</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>a273ecfeb293cf0ac6c31c4faf7319735</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ai</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>a8a04658937bdeefa8b5cf850d99d7a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>ab279897ed5e1f077b1a4c30b704683a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>a0acb682b8260ab1c60b918599864e2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>D</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>af316c33cc298530f245e8b55330e86b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T1</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>a2a86db84e9d9559433140f4eac707094</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T2</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>aa65d6590ee7031a474181ec45493a601</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>R</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>a5c71a5e59a53413cd6c270266d63b031</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ai</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>a8a04658937bdeefa8b5cf850d99d7a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T1</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>a2d0f3522ee797e7b3355d9444eafebad</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T2</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>aa65d6590ee7031a474181ec45493a601</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ai</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>a8a04658937bdeefa8b5cf850d99d7a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>ab279897ed5e1f077b1a4c30b704683a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>D</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>af316c33cc298530f245e8b55330e86b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T2</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>aa65d6590ee7031a474181ec45493a601</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T1</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>a2a86db84e9d9559433140f4eac707094</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ADvar_nd</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>a0af0d5624de54f236fe65f9cb60888af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RAD_ACA</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>afe47ec9172b48179182877d964a512a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>A</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>a955f504eccf76b4eb2489c0adab03121</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>C</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>ac54ae397901fe700628cafadea3c5208</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>a0acb682b8260ab1c60b918599864e2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>F</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>a42257a545daf5b7933d6e8f96adc74f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Ai</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>a8a04658937bdeefa8b5cf850d99d7a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>ab279897ed5e1f077b1a4c30b704683a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>D</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>af316c33cc298530f245e8b55330e86b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T2</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>aa65d6590ee7031a474181ec45493a601</anchor>
      <arglist>(r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T1</name>
      <anchorfile>Sacado__tradvec_8hpp.html</anchorfile>
      <anchor>a2a86db84e9d9559433140f4eac707094</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="function">
      <type>T F</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a511a99bf74c4aff982b89fe267fc3d7f</anchor>
      <arglist>(AI)</arglist>
    </member>
    <member kind="function">
      <type>T F</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a29ae758aaeeb1160914ad5da1aa8eb42</anchor>
      <arglist>(Ai)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a2ee54c4b38e68b651ead815b5a4d84aa</anchor>
      <arglist>(Double f, Double g, const IndepADvar&lt; Double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a96426479dbc471623f1047d619d859bf</anchor>
      <arglist>(Double f, Double gx, Double gy, const IndepADvar&lt; Double &gt; &amp;x, const IndepADvar&lt; Double &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a9b1d90835df5c0469fd158cd76543142</anchor>
      <arglist>(Double f, int n, const IndepADvar&lt; Double &gt; *x, const Double *g)</arglist>
    </member>
    <member kind="function">
      <type>IndepADvar&lt; Double &gt; &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a2338c35ab86a62494013a543e828abdb</anchor>
      <arglist>(IndepADvar&lt; Double &gt; *, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar&lt; Double &gt; &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a1459471c0e246b87eacc82c016d756bd</anchor>
      <arglist>(ADvar&lt; Double &gt; *, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Const</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a74008ee2680ce0cae327bd64a4e52978</anchor>
      <arglist>(const IndepADvar&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Const1</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a34733b5eeb1bdd29d9f46561cb13fb82</anchor>
      <arglist>(Double *, const IndepADvar&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>af390b00e23d603fb4088924e668babea</anchor>
      <arglist>(Double, Double, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a4c8274a0b8f96a3074e92d9425a523a9</anchor>
      <arglist>(Double, Double, Double, const ADvari&lt; Double &gt; &amp;, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a984b15d90c5bcf9a6f4cae8125966abf</anchor>
      <arglist>(Double, Double, Double, const IndepADvar&lt; Double &gt; &amp;, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>aaac8b4ae6092f3d2009fb7a2fc257072</anchor>
      <arglist>(Double, Double, Double, const ADvari&lt; Double &gt; &amp;, const IndepADvar&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Double</type>
      <name>val</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a99a7bce404d7675b1dfe352a19dac56a</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a775e80086638e600f20935ce01dfb502</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a73e48250d9fce4ea6852cf669d00ada9</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ade83ceccc780c769db2c20019f687901</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a1b1fda4844dfd453ad8f6165341a2ecb</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a1658f55a416c2e8f5b8c80a6a09d6409</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a5f49c717adbb86c9143ee7a2e042c153</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a1ee6924d0f7bd4c05684872ea865cf75</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a19efe7ed620a30ba0f2e7512ec37a4d7</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a1028a146c5a75fb9965a0cbf138fe722</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a9066a2217065b6e4a8317d5ad7bbbd72</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ad4ee02522f953e2f75f5e365d5c197c3</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>acd0909ec8df4918f3b509665f12b2e31</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>afaaa642d77aae07b50e290f843b5ac8f</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ae726746210b4ab16b00438a6b0a7d5ab</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a3750dae59b33ea9f4d1da928b1502eba</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>afbad245237b545e08024b772fafc9d3a</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a74458d80583adfc3a01212ee3f881259</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>afcb759825bc5b8eb3e8501048564553c</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ae7f760112ba176bc1c0bb13460d6272c</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>aa6ab10587becc9539f660d5bcdbfceb2</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>afe882f96a600a9081af5a806a073780b</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a096bb50ea250b8b69607d4932e04362c</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a084118bfd002931d7261465cb435593f</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a68d83d658536eed2168c996cfe5c77ef</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ae1edc9aaf2bb6e77f775218cee0b8a16</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>af0a45617fa885ab647bbf70b9a607ef1</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a3e852b468bfbc6664dca9f63189a181c</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ab12e2c9dd9cdae62b04db3822d074f11</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a2f579e1524e7ae2edf0badbe26e87ea0</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a1b6afb5f2f989fa482934eef528fb43d</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>aaf708046a4fd0e85005b8e5ae53ef5a6</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ab5fe66024eeb6609c63baab410cd72e8</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>acos</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a5846175919c17789dcdfb53b8e7f691e</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>acosh</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>af6a3fb9014e6ab2c51ea241a59e90ae3</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>asin</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>af6d7f20bb70726926464635ae31b8931</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>asinh</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ae3b8fbfdd9fd6a079d96ce6588fb3907</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a5a5f91b8840e1693b58b25ce6432dd56</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atanh</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>adc5bc07b7d601d815ce93d764061b792</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a2e9d5f250d8b728f307b0b3a850a1db5</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>af2023883e3129db17bf30a0ed8cc13a9</anchor>
      <arglist>(Double x, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a4698a61843d77c7dd7845ffcf08b446e</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>aa00b806c9c56ddf17bab6f6e40888504</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a15c1d79e12937fba4039209fee0a5f92</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ad789ff9312653b5871130548e769fd6e</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a76225bef56f39098c30fe7cfded38080</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a8683a384246cc6fa5a085282737f0124</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a89edd628055d95f2d77ce6e3d2317d93</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>cos</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ad7578f61d7c18fa1fbb4195defcf2086</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>cosh</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a1ab217756a6c844a363183c422b82810</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>exp</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>aa7d7d21521fa28824590a1039023fa9d</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>log</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>af544a5db6031b5fdb4fcdd20271e0603</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>log10</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a672ad0dae1db32f8082e76f822e00b1f</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a0722480fd86db82c6ca74f62545820de</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>adfb2ac07fb730d8670736a5e05eb9fc2</anchor>
      <arglist>(Double x, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>af79dd8b78204c16f73ac5342527550b6</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>sin</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>add43cefd94789e163be949589bd2264a</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>sinh</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>afa0e3f6b43b4ee7e71634bf8176e51bb</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>sqrt</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a8696a6704aac7133cf9e2f5fcfe7d234</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>tan</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>afd1186af5386f3307e23cb84ffc6f164</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>tanh</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a375e27db7f12a16d702bbec8328575f3</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>abs</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a24f54c90a122d6f0d28e44e78061653f</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>fabs</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>af658629021c9c646b83d6335f7df8dc5</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>aaee6e8f1477e6049b767a7a6d65f1ef2</anchor>
      <arglist>(Double f, int n, const ADvar&lt; Double &gt; *x, const Double *g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_tradvec_Traits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__tradvec__Traits_8hpp</filename>
    <includes id="Sacado__Traits_8hpp" name="Sacado_Traits.hpp" local="yes" imported="no">Sacado_Traits.hpp</includes>
    <class kind="class">Sacado::RadVec::ADvar</class>
    <class kind="class">Sacado::RadVec::ADvari</class>
    <class kind="struct">Sacado::ScalarType&lt; RadVec::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; RadVec::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; RadVec::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; RadVec::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; RadVec::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; RadVec::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; RadVec::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; RadVec::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; RadVec::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::MarkConstant&lt; RadVec::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::MarkConstant&lt; RadVec::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; RadVec::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; RadVec::ADvar&lt; T &gt; &gt;</class>
    <namespace>Sacado</namespace>
    <namespace>Sacado::RadVec</namespace>
  </compound>
  <compound kind="file">
    <name>Sacado_Traits.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Traits_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
    <includes id="Sacado__dummy__arg_8hpp" name="Sacado_dummy_arg.hpp" local="yes" imported="no">Sacado_dummy_arg.hpp</includes>
    <includes id="Sacado__mpl__enable__if_8hpp" name="Sacado_mpl_enable_if.hpp" local="yes" imported="no">Sacado_mpl_enable_if.hpp</includes>
    <includes id="Sacado__mpl__disable__if_8hpp" name="Sacado_mpl_disable_if.hpp" local="yes" imported="no">Sacado_mpl_disable_if.hpp</includes>
    <includes id="Sacado__mpl__is__convertible_8hpp" name="Sacado_mpl_is_convertible.hpp" local="yes" imported="no">Sacado_mpl_is_convertible.hpp</includes>
    <includes id="Sacado__mpl__is__same_8hpp" name="Sacado_mpl_is_same.hpp" local="yes" imported="no">Sacado_mpl_is_same.hpp</includes>
    <class kind="struct">Sacado::IsExpr</class>
    <class kind="struct">Sacado::IsView</class>
    <class kind="struct">Sacado::BaseExprType</class>
    <class kind="struct">Sacado::ViewFadType</class>
    <class kind="struct">Sacado::OverrideDefaultPromote</class>
    <class kind="struct">Sacado::Promote</class>
    <class kind="struct">Sacado::Promote&lt; A, A,                                                                                                                           typename mpl::enable_if_c&lt; !OverrideDefaultPromote&lt; A &gt;::value &gt;::type &gt;</class>
    <class kind="struct">Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !OverrideDefaultPromote&lt; A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !OverrideDefaultPromote&lt; B &gt;::value                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</class>
    <class kind="struct">Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !OverrideDefaultPromote&lt; A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !OverrideDefaultPromote&lt; B &gt;::value                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</class>
    <class kind="struct">Sacado::Promote&lt; A, B,                                                                                                                                                                                                                                                   typename mpl::enable_if_c&lt; mpl::is_convertible&lt; A, B &gt;::value &amp;&ampmpl::is_convertible&lt; B, A &gt;::value &amp;&ampmpl::is_same&lt; A, B &gt;::value &amp;&ampsExpr&lt; A &gt;::value||sExpr&lt; B &gt;::value</class>
    <class kind="struct">Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; !mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   !mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   IsExpr&lt; A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   mpl::is_convertible&lt; B, typename BaseExprType&lt; typename A::value_type &gt;::type &gt;::value                                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</class>
    <class kind="struct">Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; !mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   !mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   IsExpr&lt; B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                           mpl::is_convertible&lt; A, typename BaseExprType&lt; typename B::value_type &gt;::type &gt;::value                                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</class>
    <class kind="struct">Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; !mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   !mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   IsExpr&lt; A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   IsExpr&lt; B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   mpl::is_same&lt; typename BaseExprType&lt; typename A::value_type &gt;::type,                                                                                                                                                                                                                                                                                                                                                                                                                                                                   typename BaseExprType&lt; typename B::value_type &gt;::type &gt;::value                                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</class>
    <class kind="struct">Sacado::ScalarType</class>
    <class kind="struct">Sacado::ScalarType&lt; const T &gt;</class>
    <class kind="struct">Sacado::ValueType</class>
    <class kind="struct">Sacado::ValueType&lt; const T &gt;</class>
    <class kind="struct">Sacado::IsADType</class>
    <class kind="struct">Sacado::IsScalarType</class>
    <class kind="struct">Sacado::Value</class>
    <class kind="struct">Sacado::ScalarValue</class>
    <class kind="struct">Sacado::MarkConstant</class>
    <class kind="struct">Sacado::StringName</class>
    <class kind="struct">Sacado::IsEqual</class>
    <class kind="struct">Sacado::IsStaticallySized</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const T &gt;</class>
    <class kind="struct">Sacado::StaticSize</class>
    <class kind="struct">Sacado::IsFad</class>
    <class kind="struct">Sacado::RemoveConst</class>
    <class kind="struct">Sacado::RemoveConst&lt; const T &gt;</class>
    <class kind="struct">Sacado::integral_nonzero</class>
    <class kind="struct">Sacado::integral_nonzero&lt; T, zero, false &gt;</class>
    <namespace>Sacado</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_PROMOTE_SPECIALIZATION</name>
      <anchorfile>Sacado__Traits_8hpp.html</anchorfile>
      <anchor>a395df8c7998bed46ae43c8c6a964b67f</anchor>
      <arglist>(type1, type2, type3)  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_AD_PROMOTE_SPEC</name>
      <anchorfile>Sacado__Traits_8hpp.html</anchorfile>
      <anchor>afc55ca9b26ee143e9a42ac6c6ce94cb6</anchor>
      <arglist>(NS, AD)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_AD_PROMOTE_SPEC2</name>
      <anchorfile>Sacado__Traits_8hpp.html</anchorfile>
      <anchor>a2da25fbeab27ac9e604e1b77df2ee550</anchor>
      <arglist>(NS, AD)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_FAD_PROMOTE_SPEC</name>
      <anchorfile>Sacado__Traits_8hpp.html</anchorfile>
      <anchor>ab81ed4232e834059d98d5fc8e66bf64c</anchor>
      <arglist>(NS, FAD)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_SFAD_PROMOTE_SPEC</name>
      <anchorfile>Sacado__Traits_8hpp.html</anchorfile>
      <anchor>ab27e15b995674e0a143807385e2a273d</anchor>
      <arglist>(NS, FAD)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_EXPR_PROMOTE_SPEC</name>
      <anchorfile>Sacado__Traits_8hpp.html</anchorfile>
      <anchor>ae2ac408f21996ad78146c1237e1cc80b</anchor>
      <arglist>(NS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_VFAD_PROMOTE_SPEC</name>
      <anchorfile>Sacado__Traits_8hpp.html</anchorfile>
      <anchor>ac89c4a8635bfd5ebb739ba4a0b020428</anchor>
      <arglist>(NS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_RAD_PROMOTE_SPEC</name>
      <anchorfile>Sacado__Traits_8hpp.html</anchorfile>
      <anchor>a9910c48d9ddd06a930489a506eafccee</anchor>
      <arglist>(NS)                                                                      </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_BUILTIN_SPECIALIZATION</name>
      <anchorfile>Sacado__Traits_8hpp.html</anchorfile>
      <anchor>a7beb35e17f3601219be87be67cd49f9b</anchor>
      <arglist>(t, NAME)                      </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SACADO_BUILTIN_SPECIALIZATION_COMPLEX</name>
      <anchorfile>Sacado__Traits_8hpp.html</anchorfile>
      <anchor>a55a8fce0f9b0c3f96e3fa096ae54bc18</anchor>
      <arglist>(t, NAME)      </arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DerivInit</name>
      <anchorfile>namespaceSacado.html</anchorfile>
      <anchor>adca2d4063fa57ca300410934bd6f61db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoInitDerivArray</name>
      <anchorfile>namespaceSacado.html</anchorfile>
      <anchor>adca2d4063fa57ca300410934bd6f61dba6dc173df9d3659b71cb8107147b0f66e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InitDerivArray</name>
      <anchorfile>namespaceSacado.html</anchorfile>
      <anchor>adca2d4063fa57ca300410934bd6f61dba5f4d1858e76a2c4ca69276edec61580a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sacado_Version.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>Sacado__Version_8hpp</filename>
    <includes id="Sacado__ConfigDefs_8h" name="Sacado_ConfigDefs.h" local="yes" imported="no">Sacado_ConfigDefs.h</includes>
    <member kind="function">
      <type>std::string</type>
      <name>Sacado_Version</name>
      <anchorfile>Sacado__Version_8hpp.html</anchorfile>
      <anchor>aa256b8eda34a49a745b90407a735e474</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sfad_example.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/example/</path>
    <filename>sfad__example_8cpp</filename>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <member kind="function">
      <type>ScalarT</type>
      <name>func</name>
      <anchorfile>sfad__example_8cpp.html</anchorfile>
      <anchor>a6605336badbe85da3826f2eb6b52c187</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b, const ScalarT &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>func_deriv</name>
      <anchorfile>sfad__example_8cpp.html</anchorfile>
      <anchor>a33f1577b10d8a67dc57e03b259337301</anchor>
      <arglist>(double a, double b, double c, double &amp;drda, double &amp;drdb)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>sfad__example_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sparse_example.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/example/</path>
    <filename>sparse__example_8cpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <member kind="typedef">
      <type>Sacado::LFad::LogicalSparse&lt; double, bool &gt;</type>
      <name>FadType</name>
      <anchorfile>sparse__example_8cpp.html</anchorfile>
      <anchor>a00c9844654eb0c0bae22629fc05a76c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ScalarT</type>
      <name>func</name>
      <anchorfile>sparse__example_8cpp.html</anchorfile>
      <anchor>a6605336badbe85da3826f2eb6b52c187</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b, const ScalarT &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>sparse__example_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Tay_CommTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Tay__CommTests_8cpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__Tay__CacheTaylor_8hpp" name="Sacado_Tay_CacheTaylor.hpp" local="yes" imported="no">Sacado_Tay_CacheTaylor.hpp</includes>
    <includes id="Tay__CommTests_8hpp" name="Tay_CommTests.hpp" local="yes" imported="no">Tay_CommTests.hpp</includes>
    <member kind="typedef">
      <type>int</type>
      <name>Ordinal</name>
      <anchorfile>Tay__CommTests_8cpp.html</anchorfile>
      <anchor>ad6064b63db46a0ca2d0c6f9c163340b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Tay__CommTests_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>Sacado::Random&lt; double &gt;</type>
      <name>rnd</name>
      <anchorfile>Tay__CommTests_8cpp.html</anchorfile>
      <anchor>a980e90e2ce0057c35e89f15417a7739d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Tay_CommTests.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Tay__CommTests_8hpp</filename>
    <includes id="Sacado__mpl__apply_8hpp" name="Sacado_mpl_apply.hpp" local="yes" imported="no">Sacado_mpl_apply.hpp</includes>
    <includes id="Sacado__Random_8hpp" name="Sacado_Random.hpp" local="yes" imported="no">Sacado_Random.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>TAY_COMM_TESTS</name>
      <anchorfile>Tay__CommTests_8hpp.html</anchorfile>
      <anchor>a80348fddbc12aaa1c056361f8be1cb50</anchor>
      <arglist>(TayType, TAY)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFadArrays</name>
      <anchorfile>Tay__CommTests_8hpp.html</anchorfile>
      <anchor>a90f0a67262c51877b7ef2f801b0f2cef</anchor>
      <arglist>(const Teuchos::Array&lt; TayType &gt; &amp;x, const Teuchos::Array&lt; TayType &gt; &amp;x2, const std::string &amp;tag, Teuchos::FancyOStream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkResultOnAllProcs</name>
      <anchorfile>Tay__CommTests_8hpp.html</anchorfile>
      <anchor>a0eb45c712ac3bb536bf62879b19be709</anchor>
      <arglist>(const Teuchos::Comm&lt; Ordinal &gt; &amp;comm, Teuchos::FancyOStream &amp;out, const bool result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Tay_SerializationTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>Tay__SerializationTests_8cpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__Tay__CacheTaylor_8hpp" name="Sacado_Tay_CacheTaylor.hpp" local="yes" imported="no">Sacado_Tay_CacheTaylor.hpp</includes>
    <includes id="Sacado__mpl__apply_8hpp" name="Sacado_mpl_apply.hpp" local="yes" imported="no">Sacado_mpl_apply.hpp</includes>
    <includes id="Sacado__Random_8hpp" name="Sacado_Random.hpp" local="yes" imported="no">Sacado_Random.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>TAY_SERIALIZATION_TESTS</name>
      <anchorfile>Tay__SerializationTests_8cpp.html</anchorfile>
      <anchor>ab368599cb94b8e7a0a1aee0bd0bc082d</anchor>
      <arglist>(TayType, TAY)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testSerialization</name>
      <anchorfile>Tay__SerializationTests_8cpp.html</anchorfile>
      <anchor>a0a882ab943cf2f7abbf219e677f34a3d</anchor>
      <arglist>(const Teuchos::Array&lt; TayType &gt; &amp;x, const std::string &amp;tag, Teuchos::FancyOStream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testSerializationObject</name>
      <anchorfile>Tay__SerializationTests_8cpp.html</anchorfile>
      <anchor>a633c42771a5b887e7540e1cb6d0e7b9e</anchor>
      <arglist>(const Serializer &amp;serializer, Teuchos::Array&lt; TayType &gt; &amp;x, const std::string &amp;tag, Teuchos::FancyOStream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testNestedSerializationObject</name>
      <anchorfile>Tay__SerializationTests_8cpp.html</anchorfile>
      <anchor>af0bb244284d17073c3110caff04b5156</anchor>
      <arglist>(const Serializer &amp;serializer, Teuchos::Array&lt; TayType &gt; &amp;x, const std::string &amp;tag, Teuchos::FancyOStream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Tay__SerializationTests_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>Sacado::Random&lt; double &gt;</type>
      <name>rnd</name>
      <anchorfile>Tay__SerializationTests_8cpp.html</anchorfile>
      <anchor>a980e90e2ce0057c35e89f15417a7739d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>taylor_example.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/example/</path>
    <filename>taylor__example_8cpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <member kind="function">
      <type>void</type>
      <name>func</name>
      <anchorfile>taylor__example_8cpp.html</anchorfile>
      <anchor>a0012f5c37abaac210fd41c8b20e5af1a</anchor>
      <arglist>(ScalarT &amp;f, const ScalarT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>taylor__example_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>taylor_expr.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/</path>
    <filename>taylor__expr_8cpp</filename>
    <includes id="Sacado__Random_8hpp" name="Sacado_Random.hpp" local="yes" imported="no">Sacado_Random.hpp</includes>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__Tay__CacheTaylor_8hpp" name="Sacado_Tay_CacheTaylor.hpp" local="yes" imported="no">Sacado_Tay_CacheTaylor.hpp</includes>
    <member kind="function">
      <type>void</type>
      <name>func</name>
      <anchorfile>taylor__expr_8cpp.html</anchorfile>
      <anchor>ae08e176af6a5f3c9126496ab92441adf</anchor>
      <arglist>(const T &amp;x1, const T &amp;x2, T &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>do_time</name>
      <anchorfile>taylor__expr_8cpp.html</anchorfile>
      <anchor>aebc2cd3d5f8799ccb7454d56fea47f0f</anchor>
      <arglist>(int degree, int nloop)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>taylor__expr_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TayUnitTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>TayUnitTests_8cpp</filename>
    <includes id="TayUnitTests_8hpp" name="TayUnitTests.hpp" local="yes" imported="no">TayUnitTests.hpp</includes>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>TayUnitTests_8cpp.html</anchorfile>
      <anchor>a8b43ed08a956e109c9ca4bc394d22283</anchor>
      <arglist>(TaylorOpsUnitTest&lt; Sacado::Tay::Taylor&lt; double &gt; &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>TayUnitTests_8cpp.html</anchorfile>
      <anchor>ada9c638241953abbecfde77947a3b5dc</anchor>
      <arglist>(CacheTaylorOpsUnitTest)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TayUnitTests.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>TayUnitTests_8hpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__Random_8hpp" name="Sacado_Random.hpp" local="yes" imported="no">Sacado_Random.hpp</includes>
    <includes id="Sacado__Tay__CacheTaylor_8hpp" name="Sacado_Tay_CacheTaylor.hpp" local="yes" imported="no">Sacado_Tay_CacheTaylor.hpp</includes>
    <class kind="class">TaylorOpsUnitTest</class>
    <class kind="class">CacheTaylorOpsUnitTest</class>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_DOUBLES</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>ae5f32afbe4bc44b16ef37fc65182b23e</anchor>
      <arglist>(a, b)                                                  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_POLYS</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>aaab4aa6e3a3287a3416529aa4eebe88a</anchor>
      <arglist>(x_dtay, x_adolc)                                                </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_TAYS</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>a5a6838c46c537520b2a0e3a321c27954</anchor>
      <arglist>(x_dtay, y_dtay)                                                    </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BINARY_OP2_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>a5604687bda770e7ee4ee88f1bd917764</anchor>
      <arglist>(TESTNAME, OP)            </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BINARY_OPRC_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>a00cdf64bf3cc2183e5955ab4322cb2bc</anchor>
      <arglist>(TESTNAME, OP)          </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BINARY_OPLC_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>a2e52c0ad831d93bc3345a486d2c8d490</anchor>
      <arglist>(TESTNAME, OP)          </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>ab5d063a3789ad3d5a989ee4d7ff15ed2</anchor>
      <arglist>(TESTNAME, OP)                                      </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CPPUNIT_BINARY_OP_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>a0e82517ab09c46b9531c88903ef459c2</anchor>
      <arglist>(TESTNAME)            </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RELOP_OP2_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>a70b7c601a86e74b852e1b537b316d59d</anchor>
      <arglist>(TESTNAME, OP)                                      </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RELOP_OPLC_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>a92bda492e7f8d3c45668e3aca7889552</anchor>
      <arglist>(TESTNAME, OP)                                    </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RELOP_OPRC_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>a3dfd3652a618eb44a9514903b72046bb</anchor>
      <arglist>(TESTNAME, OP)                                    </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RELOP_OP_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>ad163df6aecf67c5eddcd8e862fef31ca</anchor>
      <arglist>(TESTNAME, OP)                                        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CPPUNIT_RELOP_OP_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>ae3ab35d500003b367d5e3a21fd384b40</anchor>
      <arglist>(TESTNAME)                              </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BINARY_FUNC2_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>a8463fd9c8dbca48089db59b87b20fa34</anchor>
      <arglist>(TESTNAME, FUNC)    </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BINARY_FUNCRC_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>afe15e570c0150f14b96a7bc76730c32d</anchor>
      <arglist>(TESTNAME, FUNC)  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BINARY_FUNCLC_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>a469c96a482d84898b890981885618629</anchor>
      <arglist>(TESTNAME, FUNC)  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BINARY_FUNC_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>acc375803a4a9063c5b8ac1010a36b523</anchor>
      <arglist>(TESTNAME, FUNC)                                              </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CPPUNIT_BINARY_FUNC_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>a828a929f2d9d09db80fe98c4b306f346</anchor>
      <arglist>(TESTNAME)        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNARY_OP_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>a4eb53992897319dd7f24e7d6a233f8dc</anchor>
      <arglist>(TESTNAME, OP)                                </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>a21ea76ade51751b52422002c3ef96edd</anchor>
      <arglist>(TESTNAME, FUNC)                        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNARY_ASSIGNOP2_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>af8cfc5874b226d87f4bcacab358ba191</anchor>
      <arglist>(TESTNAME, OP)                  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNARY_ASSIGNOPRC_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>a6514b6c217df0efece89167df286ea58</anchor>
      <arglist>(TESTNAME, OP)                </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNARY_ASSIGNOPLC_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>a1e2c7dd55975a99bd9777e9f062035df</anchor>
      <arglist>(TESTNAME, OP)                </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>a1a7aa67098e39b9b1f984eb52a602a9e</anchor>
      <arglist>(TESTNAME, OP)                            </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CPPUNIT_UNARY_ASSIGNOP_TEST</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>aa2ee65815f00b4048722a7d6c60bb1f7</anchor>
      <arglist>(TESTNAME)  </arglist>
    </member>
    <member kind="function">
      <type>adouble</type>
      <name>max</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>a8865acddec4ea60c232fb1e2ea704046</anchor>
      <arglist>(const adouble &amp;a, const adouble &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>adouble</type>
      <name>max</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>aa6e20fe75c9538acbb812d185320b5ab</anchor>
      <arglist>(const adouble &amp;a, double v)</arglist>
    </member>
    <member kind="function">
      <type>adouble</type>
      <name>max</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>a6d2b78869b2dfaf55f64c49fc0403afe</anchor>
      <arglist>(double v, const adouble &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>adouble</type>
      <name>min</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>adac08ed856de5629b61fcca819516ef3</anchor>
      <arglist>(const adouble &amp;a, const adouble &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>adouble</type>
      <name>min</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>a25df383d045d6124cde1b295edd904cd</anchor>
      <arglist>(const adouble &amp;a, double v)</arglist>
    </member>
    <member kind="function">
      <type>adouble</type>
      <name>min</name>
      <anchorfile>TayUnitTests_8hpp.html</anchorfile>
      <anchor>aed8eb98b341e50c1fdb487417bf5d840</anchor>
      <arglist>(double v, const adouble &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>template_container_example.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/example/</path>
    <filename>template__container__example_8cpp</filename>
    <includes id="Sacado__TemplateContainer_8hpp" name="Sacado_TemplateContainer.hpp" local="yes" imported="no">Sacado_TemplateContainer.hpp</includes>
    <includes id="Sacado__mpl__vector_8hpp" name="Sacado_mpl_vector.hpp" local="yes" imported="no">Sacado_mpl_vector.hpp</includes>
    <includes id="Sacado__mpl__placeholders_8hpp" name="Sacado_mpl_placeholders.hpp" local="yes" imported="no">Sacado_mpl_placeholders.hpp</includes>
    <includes id="Sacado__Fad__DFad_8hpp" name="Sacado_Fad_DFad.hpp" local="yes" imported="no">Sacado_Fad_DFad.hpp</includes>
    <class kind="struct">MyClass</class>
    <class kind="struct">SetFunctor</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>template__container__example_8cpp.html</anchorfile>
      <anchor>ae66f6b31b5ad750f1fe042a706a4e3d4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TestAssembly.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/fenl_assembly/</path>
    <filename>TestAssembly_8cpp</filename>
    <includes id="TestAssembly_8hpp" name="TestAssembly.hpp" local="yes" imported="no">TestAssembly.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>TestAssembly_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>view/TestAssembly.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/fenl_assembly_view/</path>
    <filename>view_2TestAssembly_8cpp</filename>
    <includes id="view_2TestAssembly_8hpp" name="view/TestAssembly.hpp" local="yes" imported="no">TestAssembly.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>view_2TestAssembly_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TestAssembly.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/fenl_assembly/</path>
    <filename>TestAssembly_8hpp</filename>
    <includes id="BoxElemFixture_8hpp" name="BoxElemFixture.hpp" local="no" imported="no">BoxElemFixture.hpp</includes>
    <includes id="fenl__functors_8hpp" name="fenl_functors.hpp" local="no" imported="no">fenl_functors.hpp</includes>
    <class kind="struct">Perf</class>
    <member kind="function">
      <type>Perf</type>
      <name>fenl_assembly</name>
      <anchorfile>TestAssembly_8hpp.html</anchorfile>
      <anchor>a1cc6ef72e938fdb7644db4796575181b</anchor>
      <arglist>(const int use_print, const int use_trials, const int use_nodes[], Kokkos::View&lt; Scalar *, Device &gt; &amp;residual, Kokkos::Example::FENL::CrsMatrix&lt; Scalar, Device &gt; &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareValues</name>
      <anchorfile>TestAssembly_8hpp.html</anchorfile>
      <anchor>a3d1d6b7c2f5ae73a01a78927344576d2</anchor>
      <arglist>(const ValueType &amp;a1, const std::string &amp;a1_name, const ValueType &amp;a2, const std::string &amp;a2_name, const ValueType &amp;rel_tol, const ValueType &amp;abs_tol, Teuchos::FancyOStream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check_assembly</name>
      <anchorfile>TestAssembly_8hpp.html</anchorfile>
      <anchor>ab13a8ae932c9d84d5e7565b122addf32</anchor>
      <arglist>(const VectorType &amp;analytic_residual, const MatrixType &amp;analytic_jacobian, const VectorType &amp;fad_residual, const MatrixType &amp;fad_jacobian, const std::string &amp;test_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performance_test_driver</name>
      <anchorfile>TestAssembly_8hpp.html</anchorfile>
      <anchor>a82160fbbe707210d01db9fe6161d0d67</anchor>
      <arglist>(const int use_print, const int use_trials, const int n_begin, const int n_end, const int n_step, const bool quadratic, const bool check)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>view/TestAssembly.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/performance/fenl_assembly_view/</path>
    <filename>view_2TestAssembly_8hpp</filename>
    <includes id="view_2BoxElemFixture_8hpp" name="view/BoxElemFixture.hpp" local="no" imported="no">BoxElemFixture.hpp</includes>
    <includes id="view_2fenl__functors_8hpp" name="view/fenl_functors.hpp" local="no" imported="no">fenl_functors.hpp</includes>
    <class kind="struct">Perf</class>
    <member kind="function">
      <type>Perf</type>
      <name>fenl_assembly</name>
      <anchorfile>view_2TestAssembly_8hpp.html</anchorfile>
      <anchor>a1cc6ef72e938fdb7644db4796575181b</anchor>
      <arglist>(const int use_print, const int use_trials, const int use_nodes[], Kokkos::View&lt; Scalar *, Device &gt; &amp;residual, Kokkos::Example::FENL::CrsMatrix&lt; Scalar, Device &gt; &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compareValues</name>
      <anchorfile>view_2TestAssembly_8hpp.html</anchorfile>
      <anchor>a3d1d6b7c2f5ae73a01a78927344576d2</anchor>
      <arglist>(const ValueType &amp;a1, const std::string &amp;a1_name, const ValueType &amp;a2, const std::string &amp;a2_name, const ValueType &amp;rel_tol, const ValueType &amp;abs_tol, Teuchos::FancyOStream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check_assembly</name>
      <anchorfile>view_2TestAssembly_8hpp.html</anchorfile>
      <anchor>ab13a8ae932c9d84d5e7565b122addf32</anchor>
      <arglist>(const VectorType &amp;analytic_residual, const MatrixType &amp;analytic_jacobian, const VectorType &amp;fad_residual, const MatrixType &amp;fad_jacobian, const std::string &amp;test_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>performance_test_driver</name>
      <anchorfile>view_2TestAssembly_8hpp.html</anchorfile>
      <anchor>a82160fbbe707210d01db9fe6161d0d67</anchor>
      <arglist>(const int use_print, const int use_trials, const int n_begin, const int n_end, const int n_step, const bool quadratic, const bool check)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TestSuite.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>TestSuite_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>TestSuite_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>trad_dfad_example.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/example/</path>
    <filename>trad__dfad__example_8cpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <member kind="function">
      <type>ScalarT</type>
      <name>func</name>
      <anchorfile>trad__dfad__example_8cpp.html</anchorfile>
      <anchor>a6605336badbe85da3826f2eb6b52c187</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b, const ScalarT &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>func_deriv</name>
      <anchorfile>trad__dfad__example_8cpp.html</anchorfile>
      <anchor>a33f1577b10d8a67dc57e03b259337301</anchor>
      <arglist>(double a, double b, double c, double &amp;drda, double &amp;drdb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>func_deriv2</name>
      <anchorfile>trad__dfad__example_8cpp.html</anchorfile>
      <anchor>a3a571ab32996f91fb6d9f94631bdd391</anchor>
      <arglist>(double a, double b, double c, double &amp;d2rda2, double &amp;d2rdb2, double &amp;d2rdadb)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>trad__dfad__example_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>trad_example.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/example/</path>
    <filename>trad__example_8cpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <member kind="function">
      <type>ScalarT</type>
      <name>func</name>
      <anchorfile>trad__example_8cpp.html</anchorfile>
      <anchor>a6605336badbe85da3826f2eb6b52c187</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b, const ScalarT &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>func_deriv</name>
      <anchorfile>trad__example_8cpp.html</anchorfile>
      <anchor>a33f1577b10d8a67dc57e03b259337301</anchor>
      <arglist>(double a, double b, double c, double &amp;drda, double &amp;drdb)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>trad__example_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>trad_sfc_example.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/example/</path>
    <filename>trad__sfc__example_8cpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <member kind="typedef">
      <type>Sacado::FlopCounterPack::ScalarFlopCounter&lt; double &gt;</type>
      <name>SFC</name>
      <anchorfile>trad__sfc__example_8cpp.html</anchorfile>
      <anchor>a574e83583f5a68b85db033215bcd7d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Rad::ADvar&lt; SFC &gt;</type>
      <name>RAD_SFC</name>
      <anchorfile>trad__sfc__example_8cpp.html</anchorfile>
      <anchor>ab8dcc10087b3f454d015a673497ce3f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ScalarT</type>
      <name>func</name>
      <anchorfile>trad__sfc__example_8cpp.html</anchorfile>
      <anchor>a6605336badbe85da3826f2eb6b52c187</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b, const ScalarT &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>func_deriv</name>
      <anchorfile>trad__sfc__example_8cpp.html</anchorfile>
      <anchor>a5a2bc1fcfff3e9bc59a94630f7af2fcf</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b, const ScalarT &amp;c, ScalarT &amp;drda, ScalarT &amp;drdb)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>trad__sfc__example_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_01.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__01_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__01_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__01_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__01_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__01_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__01_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__01_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__01_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__01_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__01_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__01_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__01_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__01_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__01_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__01_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__01_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_02.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__02_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__02_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__02_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__02_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__02_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__02_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__02_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__02_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__02_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__02_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__02_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__02_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__02_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__02_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__02_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__02_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_03.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__03_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__03_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__03_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__03_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__03_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__03_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__03_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__03_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__03_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__03_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__03_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__03_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__03_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__03_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__03_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__03_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_04.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__04_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__04_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__04_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__04_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__04_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__04_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__04_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__04_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__04_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__04_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__04_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__04_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__04_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__04_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__04_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__04_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_05.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__05_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__05_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__05_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__05_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__05_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__05_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__05_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__05_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__05_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__05_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__05_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__05_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__05_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__05_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__05_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__05_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_06.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__06_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__06_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__06_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__06_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__06_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__06_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__06_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__06_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__06_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__06_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__06_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__06_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__06_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__06_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__06_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__06_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_07.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__07_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__07_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__07_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__07_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__07_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__07_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__07_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__07_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__07_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__07_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__07_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__07_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__07_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__07_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__07_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__07_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_08.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__08_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__08_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__08_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__08_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__08_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__08_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__08_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__08_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__08_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__08_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__08_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__08_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__08_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__08_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__08_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__08_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_09.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__09_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__09_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__09_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__09_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__09_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__09_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__09_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__09_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__09_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__09_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__09_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__09_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__09_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__09_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__09_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__09_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_10.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__10_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__10_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__10_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__10_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__10_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__10_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__10_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__10_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__10_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__10_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__10_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__10_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__10_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__10_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__10_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__10_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_11.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__11_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__11_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__11_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__11_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__11_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__11_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__11_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__11_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__11_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__11_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__11_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__11_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__11_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__11_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__11_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__11_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_12.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__12_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__12_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__12_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__12_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__12_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__12_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__12_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__12_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__12_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__12_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__12_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__12_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__12_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__12_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__12_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__12_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_13.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__13_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__13_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__13_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__13_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__13_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__13_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__13_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__13_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__13_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__13_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__13_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__13_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__13_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__13_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__13_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__13_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_14.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__14_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__14_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__14_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__14_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__14_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__14_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__14_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__14_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__14_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__14_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__14_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__14_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__14_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__14_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__14_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__14_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_15.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__15_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__15_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__15_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__15_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__15_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__15_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__15_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__15_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__15_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__15_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__15_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__15_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__15_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__15_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__15_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__15_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_16.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__16_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__16_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__16_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__16_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__16_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__16_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__16_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__16_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__16_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__16_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__16_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__16_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__16_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__16_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__16_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__16_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_17.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__17_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__17_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__17_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__17_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__17_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__17_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__17_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__17_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__17_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__17_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__17_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__17_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__17_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__17_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__17_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__17_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_18.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__18_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__18_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__18_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__18_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__18_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__18_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__18_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__18_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__18_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__18_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__18_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__18_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__18_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__18_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__18_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__18_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_19.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__19_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__19_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__19_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__19_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__19_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__19_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__19_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__19_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__19_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__19_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__19_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__19_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__19_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__19_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__19_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__19_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_20.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__20_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__20_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__20_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__20_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__20_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__20_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__20_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__20_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__20_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__20_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__20_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__20_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__20_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__20_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__20_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__20_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_21.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__21_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__21_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__21_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__21_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__21_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__21_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__21_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__21_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__21_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__21_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__21_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__21_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__21_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__21_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__21_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__21_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_22.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__22_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__22_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__22_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__22_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__22_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__22_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__22_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__22_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__22_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__22_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__22_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__22_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__22_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__22_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__22_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__22_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_23.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__23_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__23_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__23_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__23_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__23_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__23_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__23_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__23_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__23_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__23_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__23_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__23_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__23_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__23_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__23_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__23_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_24.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__24_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__24_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__24_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__24_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__24_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__24_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__24_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__24_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__24_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__24_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__24_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__24_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__24_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__24_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__24_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__24_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_25.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__25_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__25_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__25_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__25_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__25_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__25_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__25_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__25_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__25_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__25_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__25_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__25_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__25_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__25_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__25_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__25_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_26.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__26_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__26_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__26_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__26_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__26_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__26_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__26_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__26_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__26_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__26_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__26_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__26_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__26_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__26_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__26_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__26_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_27.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__27_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__27_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__27_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__27_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__27_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__27_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__27_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__27_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__27_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__27_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__27_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__27_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__27_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__27_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__27_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__27_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_28.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__28_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__28_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__28_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__28_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__28_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__28_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__28_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__28_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__28_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__28_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__28_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__28_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__28_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__28_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__28_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__28_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_29.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__29_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__29_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__29_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__29_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__29_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__29_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__29_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__29_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__29_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__29_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__29_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__29_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__29_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__29_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__29_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__29_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_30.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__30_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__30_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__30_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__30_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__30_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__30_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__30_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__30_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__30_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__30_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__30_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__30_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__30_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__30_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__30_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__30_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_31.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__31_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__31_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__31_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__31_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__31_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__31_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__31_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__31_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__31_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__31_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__31_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__31_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__31_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__31_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__31_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__31_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_32.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__32_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__32_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__32_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__32_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__32_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__32_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__32_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__32_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__32_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__32_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__32_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__32_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__32_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__32_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__32_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__32_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_33.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__33_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__33_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__33_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__33_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__33_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__33_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__33_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__33_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__33_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__33_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__33_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__33_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__33_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__33_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__33_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__33_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_34.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__34_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__34_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__34_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__34_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__34_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__34_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__34_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__34_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__34_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__34_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__34_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__34_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__34_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__34_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__34_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__34_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_35.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__35_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__35_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__35_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__35_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__35_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__35_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__35_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__35_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__35_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__35_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__35_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__35_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__35_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__35_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__35_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__35_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_36.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__36_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__36_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__36_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__36_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__36_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__36_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__36_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__36_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__36_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__36_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__36_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__36_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__36_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__36_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__36_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__36_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_37.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__37_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__37_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__37_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__37_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__37_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__37_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__37_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__37_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__37_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__37_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__37_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__37_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__37_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__37_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__37_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__37_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_38.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__38_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__38_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__38_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__38_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__38_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__38_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__38_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__38_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__38_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__38_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__38_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__38_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__38_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__38_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__38_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__38_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_39.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__39_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__39_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__39_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__39_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__39_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__39_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__39_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__39_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__39_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__39_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__39_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__39_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__39_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__39_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__39_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__39_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_40.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__40_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__40_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__40_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__40_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__40_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__40_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__40_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__40_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__40_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__40_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__40_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__40_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__40_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__40_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__40_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__40_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_41.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__41_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__41_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__41_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__41_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__41_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__41_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__41_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__41_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__41_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__41_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__41_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__41_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__41_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__41_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__41_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__41_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_42.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__42_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__42_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__42_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__42_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__42_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__42_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__42_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__42_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__42_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__42_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__42_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__42_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__42_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__42_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__42_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__42_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_43.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__43_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__43_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__43_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__43_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__43_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__43_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__43_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__43_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__43_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__43_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__43_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__43_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__43_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__43_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__43_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__43_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_44.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__44_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__44_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__44_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__44_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__44_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__44_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__44_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__44_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__44_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__44_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__44_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__44_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__44_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__44_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__44_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__44_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_45.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__45_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__45_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__45_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__45_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__45_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__45_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__45_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__45_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__45_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__45_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__45_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__45_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__45_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__45_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__45_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__45_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_46.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__46_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__46_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__46_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__46_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__46_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__46_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__46_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__46_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__46_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__46_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__46_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__46_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__46_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__46_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__46_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__46_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_47.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__47_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__47_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__47_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__47_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__47_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__47_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__47_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__47_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__47_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__47_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__47_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__47_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__47_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__47_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__47_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__47_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_48.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__48_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__48_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__48_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__48_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__48_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__48_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__48_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__48_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__48_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__48_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__48_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__48_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__48_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__48_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__48_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__48_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_49.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__49_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__49_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__49_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__49_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__49_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__49_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__49_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__49_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__49_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__49_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__49_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__49_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__49_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__49_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__49_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__49_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_50.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__50_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__50_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__50_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__50_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__50_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__50_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__50_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__50_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__50_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__50_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__50_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__50_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__50_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__50_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__50_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__50_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_51.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__51_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__51_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__51_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__51_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__51_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__51_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__51_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__51_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__51_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__51_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__51_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__51_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__51_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__51_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__51_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__51_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_52.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__52_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__52_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__52_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__52_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__52_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__52_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__52_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__52_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__52_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__52_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__52_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__52_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__52_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__52_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__52_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__52_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_53.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__53_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__53_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__53_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__53_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__53_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__53_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__53_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__53_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__53_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__53_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__53_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__53_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__53_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__53_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__53_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__53_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_54.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__54_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__54_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__54_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__54_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__54_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__54_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__54_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__54_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__54_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__54_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__54_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__54_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__54_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__54_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__54_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__54_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_55.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__55_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__55_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__55_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__55_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__55_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__55_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__55_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__55_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__55_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__55_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__55_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__55_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__55_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__55_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__55_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__55_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_56.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__56_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__56_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__56_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__56_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__56_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__56_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__56_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__56_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__56_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__56_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__56_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__56_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__56_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__56_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__56_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__56_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_57.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__57_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__57_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__57_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__57_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__57_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__57_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__57_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__57_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__57_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__57_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__57_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__57_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__57_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__57_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__57_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__57_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_58.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__58_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__58_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__58_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__58_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__58_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__58_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__58_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__58_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__58_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__58_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__58_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__58_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__58_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__58_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__58_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__58_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_59.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__59_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__59_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__59_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__59_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__59_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__59_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__59_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__59_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__59_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__59_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__59_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__59_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__59_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__59_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__59_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__59_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_60.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__60_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__60_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__60_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__60_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__60_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__60_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__60_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__60_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__60_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__60_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__60_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__60_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__60_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__60_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__60_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__60_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_61.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__61_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__61_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__61_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__61_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__61_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__61_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__61_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__61_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__61_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__61_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__61_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__61_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__61_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__61_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__61_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__61_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_62.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__62_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__62_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__62_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__62_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__62_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__62_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__62_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__62_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__62_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__62_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__62_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__62_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__62_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__62_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__62_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__62_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_63.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__63_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__63_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__63_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__63_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__63_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__63_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__63_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__63_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__63_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__63_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__63_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__63_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__63_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__63_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__63_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__63_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradoptest_64.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/tradoptest/</path>
    <filename>tradoptest__64_8cpp</filename>
    <includes id="Sacado__trad_8hpp" name="Sacado_trad.hpp" local="yes" imported="no">Sacado_trad.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>ADT_RAD</name>
      <anchorfile>tradoptest__64_8cpp.html</anchorfile>
      <anchor>a4aad3900c92c415285f408e5cb8edb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Plus_dx</name>
      <anchorfile>tradoptest__64_8cpp.html</anchorfile>
      <anchor>ae634e9f662e2d0ea3215e68954c12c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>AI</name>
      <anchorfile>tradoptest__64_8cpp.html</anchorfile>
      <anchor>a32c593d007ac77d13ff4f8548988e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvar&lt; double &gt;</type>
      <name>A</name>
      <anchorfile>tradoptest__64_8cpp.html</anchorfile>
      <anchor>a772271186ea9bd5e49932d37f2ef03b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>tradoptest__64_8cpp.html</anchorfile>
      <anchor>ac7f8330dbd3200ff102ebf8f6c23d5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADT_RAD ADvari&lt; double &gt;</type>
      <name>Ai</name>
      <anchorfile>tradoptest__64_8cpp.html</anchorfile>
      <anchor>ae715665d4e3e5d71058037bd6cfc698e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD IndepADvar&lt; double &gt;</type>
      <name>cAI</name>
      <anchorfile>tradoptest__64_8cpp.html</anchorfile>
      <anchor>a7459e14581fe3d8e2d89a50b3faa4d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvar&lt; double &gt;</type>
      <name>cA</name>
      <anchorfile>tradoptest__64_8cpp.html</anchorfile>
      <anchor>ae204ac8aacde09fd83ce8358bba635af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ConstADvar&lt; double &gt;</type>
      <name>cC</name>
      <anchorfile>tradoptest__64_8cpp.html</anchorfile>
      <anchor>a453738323a3d7c164f09e21fcc42ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ADT_RAD ADvari&lt; double &gt;</type>
      <name>cAi</name>
      <anchorfile>tradoptest__64_8cpp.html</anchorfile>
      <anchor>a9047c21a959fffd1d0fe34073e9417d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>botch</name>
      <anchorfile>tradoptest__64_8cpp.html</anchorfile>
      <anchor>ad118d6b74b5f00335a0e2916197b0ff5</anchor>
      <arglist>(const char *what, double wanted, double got)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>differ</name>
      <anchorfile>tradoptest__64_8cpp.html</anchorfile>
      <anchor>afcf18a575d1d724765b34f6270576d36</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradoptest__64_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rc</name>
      <anchorfile>tradoptest__64_8cpp.html</anchorfile>
      <anchor>ac6509c6fe4cbf7bde170597172f8a288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>tol</name>
      <anchorfile>tradoptest__64_8cpp.html</anchorfile>
      <anchor>a7fe7a2d892789540ed424673579f2f35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tradvec_example.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/example/</path>
    <filename>tradvec__example_8cpp</filename>
    <includes id="Sacado__tradvec_8hpp" name="Sacado_tradvec.hpp" local="yes" imported="no">Sacado_tradvec.hpp</includes>
    <class kind="struct">ExpectedAnswer</class>
    <member kind="typedef">
      <type>Sacado::RadVec::ADvar&lt; double &gt;</type>
      <name>ADVar</name>
      <anchorfile>tradvec__example_8cpp.html</anchorfile>
      <anchor>a031a8f33d3d5f181a84aeecb0284e4cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ADVar</type>
      <name>foo</name>
      <anchorfile>tradvec__example_8cpp.html</anchorfile>
      <anchor>ae716018e2dfac9dc367c7942994a50fc</anchor>
      <arglist>(double d, ADVar x, ADVar y)</arglist>
    </member>
    <member kind="function">
      <type>ADVar</type>
      <name>goo</name>
      <anchorfile>tradvec__example_8cpp.html</anchorfile>
      <anchor>a14fa8198b19909a58e4ecf4ce328f6b6</anchor>
      <arglist>(double d, ADVar x, ADVar y)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>botch</name>
      <anchorfile>tradvec__example_8cpp.html</anchorfile>
      <anchor>ac2a88e8b1cacb4d0d5579ccaea327b6e</anchor>
      <arglist>(ExpectedAnswer *e, const char *partial, double got, double wanted)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>acheck</name>
      <anchorfile>tradvec__example_8cpp.html</anchorfile>
      <anchor>a971bf09dc8c1afa3e5853d3651f7a90a</anchor>
      <arglist>(int k, double d, double v, double dvdx, double dvdy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>tradvec__example_8cpp.html</anchorfile>
      <anchor>a840291bc02cba5474a4cb46a9b9566fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ExpectedAnswer</type>
      <name>expected</name>
      <anchorfile>tradvec__example_8cpp.html</anchorfile>
      <anchor>a54f7d074d1ed12f132fa41ee4cdfef8c</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraitsTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>TraitsTests_8cpp</filename>
    <includes id="TraitsTests_8hpp" name="TraitsTests.hpp" local="yes" imported="no">TraitsTests.hpp</includes>
    <includes id="Sacado__Fad__SimpleFad_8hpp" name="Sacado_Fad_SimpleFad.hpp" local="yes" imported="no">Sacado_Fad_SimpleFad.hpp</includes>
    <includes id="Sacado__CacheFad__DFad_8hpp" name="Sacado_CacheFad_DFad.hpp" local="yes" imported="no">Sacado_CacheFad_DFad.hpp</includes>
    <includes id="Sacado__CacheFad__SFad_8hpp" name="Sacado_CacheFad_SFad.hpp" local="yes" imported="no">Sacado_CacheFad_SFad.hpp</includes>
    <includes id="Sacado__CacheFad__SLFad_8hpp" name="Sacado_CacheFad_SLFad.hpp" local="yes" imported="no">Sacado_CacheFad_SLFad.hpp</includes>
    <includes id="Sacado__Tay__CacheTaylor_8hpp" name="Sacado_Tay_CacheTaylor.hpp" local="yes" imported="no">Sacado_Tay_CacheTaylor.hpp</includes>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::Fad::DFad&lt; double &gt; &gt;</type>
      <name>DFadTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>ac9ed6bc5728ecccba0e672b6a929a97e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::Fad::SFad&lt; double, 5 &gt; &gt;</type>
      <name>SFadTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>a07b768e0de1a3d2cbd75e0b419ae13f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::Fad::SLFad&lt; double, 10 &gt; &gt;</type>
      <name>SLFadTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>a6e0cf6677fbcd8f7f25fa51cfdc34d0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::Fad::SimpleFad&lt; double &gt; &gt;</type>
      <name>SimpleFadTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>a080ee031ba7784879aca761dc0cb3d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::Fad::DMFad&lt; double &gt; &gt;</type>
      <name>DMFadTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>af64efacd89601a0e8e73aae829e73fa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::Fad::DVFad&lt; double &gt; &gt;</type>
      <name>DVFadTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>ab778eb7885c8d558bd23413e1d8d1e79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::ELRFad::DFad&lt; double &gt; &gt;</type>
      <name>ELRDFadTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>a7a241ed8e7059d72b208dc17abd67212</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::ELRFad::SFad&lt; double, 5 &gt; &gt;</type>
      <name>ELRSFadTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>a4b7cbc7849dba2cee2134824f16b3c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::ELRFad::SLFad&lt; double, 10 &gt; &gt;</type>
      <name>ELRSLFadTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>a0f43a2b0631a486bdcb36b5979833bbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::CacheFad::DFad&lt; double &gt; &gt;</type>
      <name>CacheDFadTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>a056e5ab5543883f9dc85f339ba334915</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::CacheFad::SFad&lt; double, 5 &gt; &gt;</type>
      <name>CacheSFadTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>a7c29ec769f79a40897624cdcfb21940f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::CacheFad::SLFad&lt; double, 10 &gt; &gt;</type>
      <name>CacheSLFadTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>ab67876636d3736eb7b8140290b857431</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::ELRCacheFad::DFad&lt; double &gt; &gt;</type>
      <name>ELRCacheDFadTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>abae737cb7e9d4393293cf14f174d4008</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::ELRCacheFad::SFad&lt; double, 5 &gt; &gt;</type>
      <name>ELRCacheSFadTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>a52aa6369134bdbfc0485c341a1da43b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::ELRCacheFad::SLFad&lt; double, 10 &gt; &gt;</type>
      <name>ELRCacheSLFadTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>ae473481a92e515fa6b265ad10ca9368e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::LFad::LogicalSparse&lt; double, bool &gt; &gt;</type>
      <name>LSFadTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>acac8e39c7fc3464ab6420f24a610252f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::FlopCounterPack::ScalarFlopCounter&lt; double &gt; &gt;</type>
      <name>SFCTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>a7473602d01dc9b7119c921115156711a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::Tay::Taylor&lt; double &gt; &gt;</type>
      <name>TaylorTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>ad81115b2cc907e98e0bf56b8f123480b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::Tay::CacheTaylor&lt; double &gt; &gt;</type>
      <name>CacheTaylorTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>af8c067fc2cc599eca42a9ca3afb32a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::Rad::ADvar&lt; double &gt; &gt;</type>
      <name>RadTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>a1896b2066457cf229341afb3760e25d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::Rad2::ADvar&lt; double &gt; &gt;</type>
      <name>Rad2Test</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>a66be0b7fc36240bf82a4df0381c23c2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TraitsTests&lt; Sacado::RadVec::ADvar&lt; double &gt; &gt;</type>
      <name>RadVecTest</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>a65579550046f6b524da0b918bbd40194</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>a923f261ccdfb61382fbeb58dbd3cefe6</anchor>
      <arglist>(DFadTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>a056cb887c3f7e134607bcac559317999</anchor>
      <arglist>(SFadTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>ae0a24d12f948343880792261823ef6ff</anchor>
      <arglist>(SLFadTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
      <anchorfile>TraitsTests_8cpp.html</anchorfile>
      <anchor>ab2804c2d42addbb5be7c297c30552d3b</anchor>
      <arglist>(LSFadTest)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TraitsTests.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/TestSuite/</path>
    <filename>TraitsTests_8hpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__Random_8hpp" name="Sacado_Random.hpp" local="yes" imported="no">Sacado_Random.hpp</includes>
    <includes id="Sacado__mpl__apply_8hpp" name="Sacado_mpl_apply.hpp" local="yes" imported="no">Sacado_mpl_apply.hpp</includes>
    <includes id="Sacado__mpl__is__same_8hpp" name="Sacado_mpl_is_same.hpp" local="yes" imported="no">Sacado_mpl_is_same.hpp</includes>
    <class kind="class">TraitsTests</class>
  </compound>
  <compound kind="file">
    <name>uninit.c</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/src/</path>
    <filename>uninit_8c</filename>
    <member kind="define">
      <type>#define</type>
      <name>TYSHORT</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>a7169fa16d0b0fac61bf2bc0767bb7d99</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYLONG</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>a88d19be28158e8cfa3d43e20cf5332fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYREAL</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>ad0d9ec3bcf5679c42ae4f928eff64557</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYDREAL</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>a68d78da655fe16d9210a1004bc77ee8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYCOMPLEX</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>aa157a48e22d8ff996fbf2e4e812d14a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYDCOMPLEX</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>af8d5e123798383435209a888600c16c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYINT1</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>ab2638bc18c0cddc3b133416c5b6ea735</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYQUAD</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>a325272d1286b88ee38054141cf432843</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Long</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>a459e268fc98c742d2983c7c23bda1cc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RNAN</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>a6b0f1a444564ab44a413797dac26849c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNAN0</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>a64ba1fb1f8523a3f221757b49bc04e2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DNAN1</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>ae476b5da0ff5c66354964d2e85c7be6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Void</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>ac8e85294f3b3a58270e6214d4e28ef90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FA7UL</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>a5b2e282372525b3a606fe94aaa1eab7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ieee0</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>a667b4458d0ed716bb9b654e378a315f2</anchor>
      <arglist>(Void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_uninit_f2c</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>a7eb51fb88596feaff8c30d6a851a970c</anchor>
      <arglist>(void *x, int type, long len)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static unsigned Long</type>
      <name>rnan</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>a11e695cc3fcce61f34bfdc44998199dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static unsigned Long</type>
      <name>dnan0</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>a02bd296f0c2ef4267d16fec978bff166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static unsigned Long</type>
      <name>dnan1</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>a607aedbd94235a0846eed91989fbc4b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_0</name>
      <anchorfile>uninit_8c.html</anchorfile>
      <anchor>a72c9bfdd40037422ef3c656bb4647857</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vector_blas_example.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/example/</path>
    <filename>vector__blas__example_8cpp</filename>
    <includes id="Sacado__No__Kokkos_8hpp" name="Sacado_No_Kokkos.hpp" local="yes" imported="no">Sacado_No_Kokkos.hpp</includes>
    <includes id="Sacado__Fad__BLAS_8hpp" name="Sacado_Fad_BLAS.hpp" local="yes" imported="no">Sacado_Fad_BLAS.hpp</includes>
    <member kind="typedef">
      <type>Sacado::Fad::DVFad&lt; double &gt;</type>
      <name>FadType</name>
      <anchorfile>vector__blas__example_8cpp.html</anchorfile>
      <anchor>a137d2431c33581c9f64b3c5cbc1f5dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>vector__blas__example_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>view_factory_example.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/example/</path>
    <filename>view__factory__example_8cpp</filename>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>view__factory__example_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ViewFactoryTests.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/sacado/test/UnitTests/</path>
    <filename>ViewFactoryTests_8cpp</filename>
    <includes id="Sacado_8hpp" name="Sacado.hpp" local="yes" imported="no">Sacado.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ViewFactoryTests_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>A</name>
    <filename>structA.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::AbsOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1AbsOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::AbsOp</name>
    <filename>classSacado_1_1CacheFad_1_1AbsOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::AbstractScalarParameterEntry</name>
    <filename>classSacado_1_1AbstractScalarParameterEntry.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractScalarParameterEntry</name>
      <anchorfile>classSacado_1_1AbstractScalarParameterEntry.html</anchorfile>
      <anchor>ab38637b56d73f9f89ced8c0a20083fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractScalarParameterEntry</name>
      <anchorfile>classSacado_1_1AbstractScalarParameterEntry.html</anchorfile>
      <anchor>a5f79bd9b25fe9444aa804fe7d1ea2ec7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRealValue</name>
      <anchorfile>classSacado_1_1AbstractScalarParameterEntry.html</anchorfile>
      <anchor>a667eb3ac3050561ce76dc18682df537b</anchor>
      <arglist>(double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getRealValue</name>
      <anchorfile>classSacado_1_1AbstractScalarParameterEntry.html</anchorfile>
      <anchor>aca305d4a495bd1242712899d4bfacf24</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSacado_1_1AbstractScalarParameterEntry.html</anchorfile>
      <anchor>ac7bea95f9a817c1f8afc20b91b889ad1</anchor>
      <arglist>(std::ostream &amp;os) const  =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::ACosExprType</name>
    <filename>structSacado_1_1Tay_1_1ACosExprType.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>BinaryExpr&lt; Expr&lt; T &gt;, Expr&lt; T &gt;, MultiplicationOp &gt;</type>
      <name>T1</name>
      <anchorfile>structSacado_1_1Tay_1_1ACosExprType.html</anchorfile>
      <anchor>a2673d4bb1ecc9b0ccca315e0b6f06209</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstExpr&lt; typename Expr&lt; T &gt;::value_type &gt;</type>
      <name>ConstT</name>
      <anchorfile>structSacado_1_1Tay_1_1ACosExprType.html</anchorfile>
      <anchor>ab4d84440f1f2116a0bda58d2686f277e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinaryExpr&lt; ConstT, Expr&lt; T1 &gt;, SubtractionOp &gt;</type>
      <name>T2</name>
      <anchorfile>structSacado_1_1Tay_1_1ACosExprType.html</anchorfile>
      <anchor>a5f536875ad8392d8dc59fa5dfeba30bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnaryExpr&lt; Expr&lt; T2 &gt;, SqrtOp &gt;</type>
      <name>T3</name>
      <anchorfile>structSacado_1_1Tay_1_1ACosExprType.html</anchorfile>
      <anchor>af38ba5d84e4e3ce3e73fa43bf582fa13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinaryExpr&lt; ConstT, Expr&lt; T3 &gt;, DivisionOp &gt;</type>
      <name>T4</name>
      <anchorfile>structSacado_1_1Tay_1_1ACosExprType.html</anchorfile>
      <anchor>a8811af9dc5c308d15d31d967097b2d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinaryExpr&lt; Expr&lt; T &gt;, Expr&lt; T4 &gt;, ACosQuadOp &gt;</type>
      <name>T5</name>
      <anchorfile>structSacado_1_1Tay_1_1ACosExprType.html</anchorfile>
      <anchor>a3451121e5935d75d843c59cb872a5aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Expr&lt; T5 &gt;</type>
      <name>expr_type</name>
      <anchorfile>structSacado_1_1Tay_1_1ACosExprType.html</anchorfile>
      <anchor>a11952f34f44f5df0009ebf68205aae50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::ACosQuadOp</name>
    <filename>classSacado_1_1Tay_1_1ACosQuadOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>value_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1ACosQuadOp.html</anchorfile>
      <anchor>ad351e6db025f4d17e336af0006d78c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::value_type</type>
      <name>value_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1ACosQuadOp.html</anchorfile>
      <anchor>aa345c6e12dd2861ad0c3a2b14d8b61f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; value_type_1, value_type_2 &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ACosQuadOp.html</anchorfile>
      <anchor>ad0f17b4ed8f2011fb343eb20d57cf00b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::scalar_type</type>
      <name>scalar_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1ACosQuadOp.html</anchorfile>
      <anchor>ac9bf1f2a5450a6b73a2729f2fcdc3d4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::scalar_type</type>
      <name>scalar_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1ACosQuadOp.html</anchorfile>
      <anchor>a4dd9baab8b17573a4de0b870fdfbe3e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; scalar_type_1, scalar_type_2 &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ACosQuadOp.html</anchorfile>
      <anchor>a1a9bf394c4e2810f34deb97085cb3bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::base_expr_type</type>
      <name>base_expr_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1ACosQuadOp.html</anchorfile>
      <anchor>a0d690b0e287835ffaad910e02daf8c51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::base_expr_type</type>
      <name>base_expr_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1ACosQuadOp.html</anchorfile>
      <anchor>a3a90834c603c6b17ec2a93ba776904ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; base_expr_type_1, base_expr_type_2 &gt;::type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ACosQuadOp.html</anchorfile>
      <anchor>a7821bfab489109ae53fa92ef2484aceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ACosQuadOp</name>
      <anchorfile>classSacado_1_1Tay_1_1ACosQuadOp.html</anchorfile>
      <anchor>a34d7b07ca378c17c0dbb886104413678</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 &amp;expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1ACosQuadOp.html</anchorfile>
      <anchor>a9ee0fcd12f7ba7e2b65bb32a3e2af98b</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ACosQuadOp.html</anchorfile>
      <anchor>ae944bf16b2b1292a4e1036ede7d47ef0</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ACosQuadOp.html</anchorfile>
      <anchor>a832ea2d8a2a0c8d3b2a0d860efd6e503</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::valarray&lt; value_type &gt;</type>
      <name>c</name>
      <anchorfile>classSacado_1_1Tay_1_1ACosQuadOp.html</anchorfile>
      <anchor>a3b8d31ddf12aa447a235a3e2bd5bce50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dc</name>
      <anchorfile>classSacado_1_1Tay_1_1ACosQuadOp.html</anchorfile>
      <anchor>a6e8c221efbc1e41787f52ac1f37bf6c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ADcontext</name>
    <filename>classSacado_1_1Radnt_1_1ADcontext.html</filename>
    <member kind="function">
      <type></type>
      <name>ADcontext</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADcontext.html</anchorfile>
      <anchor>a31f8e5d74b3ffd3dedb210250f30aab3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Memalloc</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADcontext.html</anchorfile>
      <anchor>a91eec77245eda7b4dbda67a9cb16f6bf</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADcontext.html</anchorfile>
      <anchor>abd0eddd0dfd10a7c8a8c324d5c60c4ff</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADcontext.html</anchorfile>
      <anchor>a2851bb6b5152e3aba726ccff00281324</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Weighted_Gradcomp</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADcontext.html</anchorfile>
      <anchor>ac939745156d08990faf68fcafe7dee94</anchor>
      <arglist>(int, ADvar **, double *)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void *</type>
      <name>new_ADmemblock</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADcontext.html</anchorfile>
      <anchor>ac3bb25eee8be56dbd8a71d96e3a5d08a</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADmemblock *</type>
      <name>Busy</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADcontext.html</anchorfile>
      <anchor>af429a204a8ed169a5053144429bab88d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADmemblock *</type>
      <name>Free</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADcontext.html</anchorfile>
      <anchor>a273a7fca0f14323abba83c68f7b25669</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>Mbase</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADcontext.html</anchorfile>
      <anchor>aacff856605242961520ed97933becfb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>Mleft</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADcontext.html</anchorfile>
      <anchor>adfc706a776fb8b68d8a020943fb01cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADmemblock</type>
      <name>First</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADcontext.html</anchorfile>
      <anchor>ac80ca00a0d2a330e0b8f4f0f13b8a501</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADcontext</name>
    <filename>classSacado_1_1Rad2d_1_1ADcontext.html</filename>
    <member kind="function">
      <type></type>
      <name>ADcontext</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADcontext.html</anchorfile>
      <anchor>a51b76313151684cf6f80039353e10593</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Memalloc</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADcontext.html</anchorfile>
      <anchor>ac4240b73424dddbd234b4da41b13cd7c</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ADvari_record</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADcontext.html</anchorfile>
      <anchor>a17535155bea792772104bef49cd2e29d</anchor>
      <arglist>(ADvari *x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADcontext.html</anchorfile>
      <anchor>a847b169986dd81440affd61bfd653345</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADcontext.html</anchorfile>
      <anchor>a5dbbbc8663c03dd070649ce85835bd5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Hvprod</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADcontext.html</anchorfile>
      <anchor>a843507ff7b1a72cafc1b3420846ab13f</anchor>
      <arglist>(int, ADvar **, double *, double *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Weighted_Gradcomp</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADcontext.html</anchorfile>
      <anchor>a1adde9edde4ea40258777b77f996348c</anchor>
      <arglist>(int, ADvar **, double *)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void *</type>
      <name>new_ADmemblock</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADcontext.html</anchorfile>
      <anchor>a82cb55b856efd8f9b107bd9a36fa495d</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>new_ADvari_block</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADcontext.html</anchorfile>
      <anchor>a73def7260e6af95f2e80000630610d35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADmemblock *</type>
      <name>Busy</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADcontext.html</anchorfile>
      <anchor>a109856d8124dcb3d52d413db1a21c758</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADmemblock *</type>
      <name>Free</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADcontext.html</anchorfile>
      <anchor>a19ac2dada112c83baccc23e78b29746c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>Mbase</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADcontext.html</anchorfile>
      <anchor>aa7b00a342a9b3b19ab820582e9dd2437</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>Mleft</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADcontext.html</anchorfile>
      <anchor>a0819e61948861aad0a8a93530e4dd358</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADvari **</type>
      <name>Ailimit</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADcontext.html</anchorfile>
      <anchor>a8d8ed5b55159d567ed9fed60e72a33b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADvari **</type>
      <name>Ainext</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADcontext.html</anchorfile>
      <anchor>ac2262beb80abcd4b81dcc81a7a226ebf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADvari_block *</type>
      <name>Aibusy</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADcontext.html</anchorfile>
      <anchor>aae6b9e6d9a278e4912f5166780742f6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADvari_block *</type>
      <name>Aifree</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADcontext.html</anchorfile>
      <anchor>a7a4a605ee9693c7302f67b0dc0969835</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADmemblock</type>
      <name>First</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADcontext.html</anchorfile>
      <anchor>ae55c618d2f2fa583105199a8247c82ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADvari_block</type>
      <name>AiFirst</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADcontext.html</anchorfile>
      <anchor>a4d17b377578310296ee929d8f185fe2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ADcontext</name>
    <filename>classSacado_1_1Rad_1_1ADcontext.html</filename>
    <templarg>Double</templarg>
    <member kind="function">
      <type></type>
      <name>ADcontext</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>ad1085fdf79c63ab1feedea4f084d3e96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Memalloc</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>a98de7e619161a8cb13fbc90ef6855cb1</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>a161541f51f4f0504ed0802acbd023f78</anchor>
      <arglist>(int wantgrad)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>a8012023776d699b5f2e2b546b160797e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>aval_reset</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>a07d1d208c85bb06c7b6ca964f59e4aed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>free_all</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>aef82761aff63b3a51f9665e73bd1f3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>re_init</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>a41fb3954fc82f026193282ba93cf3071</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Weighted_Gradcomp</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>a3fd0e9e270647cdbf625426ce9d9978a</anchor>
      <arglist>(size_t, ADVar **, Double *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Outvar_Gradcomp</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>acbd567ca57543feebfb01ce46fc0a7e1</anchor>
      <arglist>(ADVar &amp;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Double</type>
      <name>One</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>aad6534b065f3ad89933226e160056059</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Double</type>
      <name>negOne</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>ae4cc7b54f7287bebd2efa654376ff465</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ADmemblock&lt; Double &gt;</type>
      <name>ADMemblock</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>a0e6684849a121cb2d9cc604cf0c7cb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ADvar&lt; Double &gt;</type>
      <name>ADVar</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>afd76686d3441118727a3f39b3cfb5117</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>a252226e0e439bbeeeb785e4af16d5ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Derp&lt; Double &gt;</type>
      <name>DErp</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>acc5bdca40deff998e0e6c477100a5e35</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void *</type>
      <name>new_ADmemblock</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>ae0cec5c4691d060eded2bd58519855fb</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>do_init</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>a8930cc04ec75ec5adbb86a6bb1586a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADMemblock *</type>
      <name>Busy</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>a5dc55e77ca1318d9d310bcf411a027f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADMemblock *</type>
      <name>First</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>a63ea86c30875934f02396c636b76597f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADMemblock *</type>
      <name>Free</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>a7ecadb74dadd93231365275888c1d9e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>Mbase</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>ab8d5f13a4f788891cb3c44ab2f8103bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>Mleft</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>a9f058a85587783d0e8147ce789022a2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>rad_mleft_save</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>aa7d67f82cc78674012cc8a122240aa5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>rad_need_reinit</name>
      <anchorfile>classSacado_1_1Rad_1_1ADcontext.html</anchorfile>
      <anchor>a7910f66f08287a72ace5a83922839ee1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADcontext</name>
    <filename>classSacado_1_1Rad2_1_1ADcontext.html</filename>
    <templarg>Double</templarg>
    <member kind="function">
      <type></type>
      <name>ADcontext</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a3e84777a7961af208d3ad36fcc53b762</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Memalloc</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>aae778b4652f7d064954d540d8a7771e6</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ADvari_record</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>af1ad4fdc773b1a5c4c8410b165392db1</anchor>
      <arglist>(ADVari *x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a1f5f7861d69c90a6b0f624cc5da639f9</anchor>
      <arglist>(int wantgrad)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Hvprod</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a70f2f89eca4fb5f1bd4c927768c84200</anchor>
      <arglist>(int, ADVar **, Double *, Double *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>aval_reset</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a4182860353f763ed521d492dfd00bdf0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Weighted_Gradcomp</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a647d01b49ee814a1b51961bbe08568cc</anchor>
      <arglist>(int, ADVar **, Double *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a898c35392b6848081869ae0a8cef7b05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Double</type>
      <name>One</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a748bbe88b6f83ecc9ff6e23c3894681c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Double</type>
      <name>negOne</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>acf51bff031b196471c1d72ca2d3915e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ADmemblock&lt; Double &gt;</type>
      <name>ADMemblock</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>ab94dca6e2d9c6bc48f4c14b63743bb10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a15cffab3ad75f30f207f7c638dec95dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ADvar1&lt; Double &gt;</type>
      <name>ADVar1</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a9318f73fc4ba5ddbb6ad691749d8c7b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ADvar2&lt; Double &gt;</type>
      <name>ADVar2</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>ac3e5ba916acfccec3851aeb06c197c95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ADvarn&lt; Double &gt;</type>
      <name>ADVarn</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>ac3211a4335e7907708de841cd0dcdb0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ADvar1g&lt; Double &gt;</type>
      <name>ADVar1g</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a4df0d1576c6abc5e440f1cb5160a6c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ADvar1s&lt; Double &gt;</type>
      <name>ADVar1s</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>aa851bf20c1405b55752ffdeb0531014b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ADvar2g&lt; Double &gt;</type>
      <name>ADVar2g</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a5fa9e86968f05087e85e3a1507dcb484</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ADvar2q&lt; Double &gt;</type>
      <name>ADVar2q</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a63f21927acd7b93cfc11b577b9b6d069</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ADvari_block&lt; Double &gt;</type>
      <name>ADVari_block</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a498e57ca9df48f65f538fccd24d5f8eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ADvar&lt; Double &gt;</type>
      <name>ADVar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a310fcca0b2e467fece662cfbb86ee1e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Derp&lt; Double &gt;</type>
      <name>DErp</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>abcf284d18a146479d631f149697113aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void *</type>
      <name>new_ADmemblock</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>ae697c24e337b411ffe49ee586b8411a4</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>new_ADvari_block</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a57b5f0c346c4ef8d33cea1206baf5233</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADMemblock *</type>
      <name>Busy</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a38a4cba87183bf2f46d0e4ec2263b624</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADMemblock *</type>
      <name>Free</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>abcff9b1230062304de2d1689593b76aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>Mbase</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a7905877d973b1cd17b365a74a1298fed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>Mleft</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a75073203277c3c3a673ff8bdb0889b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADVari **</type>
      <name>Ailimit</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a8be0986c37f7c3c796076d530542d9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADVari **</type>
      <name>Ainext</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>adcba0cd8a8eaf3583461d38865fb89ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADVari_block *</type>
      <name>Aibusy</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>aa7732f038b30531504379b8616da55a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADVari_block *</type>
      <name>Aifree</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a68a1548e2535272deb26ce7344b5a99d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADMemblock *</type>
      <name>First</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>afff2b850c3f902b7e2ec7f7dcda266f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADVari_block *</type>
      <name>AiFirst</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>ae12f71f5b24807e9f4572ae786e77e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>First0</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>aead4adb56febf51ba9fa79b8f855a184</anchor>
      <arglist>[(sizeof(ADMemblock)+sizeof(double)-1)/sizeof(double)]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>First1</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a6e44374aeb700a0c9ea3f553113edab0</anchor>
      <arglist>[(sizeof(ADVari_block)+sizeof(double)-1)/sizeof(double)]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>rad_need_reinit</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a4f6887c68f5881f37aa48d5a397d3b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>rad_mleft_save</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADcontext.html</anchorfile>
      <anchor>a140edce3bdfecc53a6a61de8d2344148</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ADcontext</name>
    <filename>classSacado_1_1RadVec_1_1ADcontext.html</filename>
    <templarg>Double</templarg>
    <member kind="function">
      <type></type>
      <name>ADcontext</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>a731af44bfa652e3a8475e9b1abeed24e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Memalloc</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>aaea0857b3af444f6731731f1a8a7d313</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>a49e56203ac8adec8860d483be44a5ab9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>aval_reset</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>a8199a77cd6a962331c5751d729e6c407</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Weighted_Gradcomp</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>a2276455597665198a6856d487de7d9c1</anchor>
      <arglist>(size_t, ADVar **, Double *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Weighted_GradcompVec</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>a85613ca88f4511c91b77b3a161fa868d</anchor>
      <arglist>(size_t, size_t *, ADVar ***, Double **)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Outvar_Gradcomp</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>a2e277eb95d781b9e1aaa34dc2409cb9e</anchor>
      <arglist>(ADVar &amp;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Double</type>
      <name>One</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>aebb4b794ae6aa759a2294db3c652c737</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Double</type>
      <name>negOne</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>a3315eb1f822312b740d3fbf19f13d877</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ADmemblock&lt; Double &gt;</type>
      <name>ADMemblock</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>ae0ec1029cd200fae1542519560b033c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ADvar&lt; Double &gt;</type>
      <name>ADVar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>a5ddfc1d7d59d07af2c435559b964ac13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>a4c01d42a2f36e232667df39b90bd9070</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Derp&lt; Double &gt;</type>
      <name>DErp</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>ae96233ca1afd85af3bdd365bd27a9a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void *</type>
      <name>new_ADmemblock</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>a3343882643321f17e8599871ec428803</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>derp_init</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>acd2a938bba86547299183acf8c053407</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADMemblock *</type>
      <name>Busy</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>a996daf45df52f83baa23d58ac0501060</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADMemblock *</type>
      <name>First</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>a0c8c1113a680ecdc4684385262e72b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADMemblock *</type>
      <name>Free</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>acf39fbdf9aa2dd7b9a5e9b7714a3390c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ADMemblock *</type>
      <name>Oldbusy</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>a043c411c3f52ee8bf5d5a46d54ae2841</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>Mbase</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>a4e5aba252baa32b2a8cb55d024f37451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>Mleft</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>ada80e4c3608b3626815f9ce431156241</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>rad_need_reinit</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>a7bfb172d454c970a67f2160054a4aae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>ncur</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>a2f3ebcef8ed603bd1681a3bce1b2e4e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>nmax</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>a6447b199cd5d1e520fabaa30bcb70f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>rad_mleft_save</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADcontext.html</anchorfile>
      <anchor>a59d7a248e2bc735e36f00238dd38545a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::add</name>
    <filename>structExprFuncs_1_1add.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::add&lt; T, 1 &gt;</name>
    <filename>structExprFuncs_1_1add_3_01T_00_011_01_4.html</filename>
    <templarg></templarg>
    <base>add_base&lt; T, 1 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1add_3_01T_00_011_01_4.html</anchorfile>
      <anchor>af49eddf4484ea03c7a02f1db06bef349</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::add&lt; T, 10 &gt;</name>
    <filename>structExprFuncs_1_1add_3_01T_00_0110_01_4.html</filename>
    <templarg></templarg>
    <base>add_base&lt; T, 10 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1add_3_01T_00_0110_01_4.html</anchorfile>
      <anchor>ad5aa7c2d2247c7c3e610c74d54b0b489</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::add&lt; T, 15 &gt;</name>
    <filename>structExprFuncs_1_1add_3_01T_00_0115_01_4.html</filename>
    <templarg></templarg>
    <base>add_base&lt; T, 15 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1add_3_01T_00_0115_01_4.html</anchorfile>
      <anchor>a6ab518fd032edd4e3297ec0eb779c34e</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::add&lt; T, 2 &gt;</name>
    <filename>structExprFuncs_1_1add_3_01T_00_012_01_4.html</filename>
    <templarg></templarg>
    <base>add_base&lt; T, 2 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1add_3_01T_00_012_01_4.html</anchorfile>
      <anchor>a5030b14a7704b76b9411c28cf44f39d8</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::add&lt; T, 20 &gt;</name>
    <filename>structExprFuncs_1_1add_3_01T_00_0120_01_4.html</filename>
    <templarg></templarg>
    <base>add_base&lt; T, 20 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1add_3_01T_00_0120_01_4.html</anchorfile>
      <anchor>aadab75ed7b40040b822fafcb19ab904a</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::add&lt; T, 3 &gt;</name>
    <filename>structExprFuncs_1_1add_3_01T_00_013_01_4.html</filename>
    <templarg></templarg>
    <base>add_base&lt; T, 3 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1add_3_01T_00_013_01_4.html</anchorfile>
      <anchor>a91d854ae69917a9cfd0ebc41ff493d15</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::add&lt; T, 4 &gt;</name>
    <filename>structExprFuncs_1_1add_3_01T_00_014_01_4.html</filename>
    <templarg></templarg>
    <base>add_base&lt; T, 4 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1add_3_01T_00_014_01_4.html</anchorfile>
      <anchor>a2eb9b2049296c3631bff280bb7a24bdb</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::add&lt; T, 5 &gt;</name>
    <filename>structExprFuncs_1_1add_3_01T_00_015_01_4.html</filename>
    <templarg></templarg>
    <base>add_base&lt; T, 5 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1add_3_01T_00_015_01_4.html</anchorfile>
      <anchor>a16de1d8ea9a46e040b887f356bd3f8d3</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::add_base</name>
    <filename>structExprFuncs_1_1add__base.html</filename>
    <templarg>T</templarg>
    <templarg>N</templarg>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1add__base.html</anchorfile>
      <anchor>a7f3af6a75d943c32a9e8a5b5e3846c5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>add_base&lt; T, 1 &gt;</name>
    <filename>structExprFuncs_1_1add__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1add__base.html</anchorfile>
      <anchor>a7f3af6a75d943c32a9e8a5b5e3846c5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>add_base&lt; T, 10 &gt;</name>
    <filename>structExprFuncs_1_1add__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1add__base.html</anchorfile>
      <anchor>a7f3af6a75d943c32a9e8a5b5e3846c5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>add_base&lt; T, 15 &gt;</name>
    <filename>structExprFuncs_1_1add__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1add__base.html</anchorfile>
      <anchor>a7f3af6a75d943c32a9e8a5b5e3846c5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>add_base&lt; T, 2 &gt;</name>
    <filename>structExprFuncs_1_1add__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1add__base.html</anchorfile>
      <anchor>a7f3af6a75d943c32a9e8a5b5e3846c5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>add_base&lt; T, 20 &gt;</name>
    <filename>structExprFuncs_1_1add__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1add__base.html</anchorfile>
      <anchor>a7f3af6a75d943c32a9e8a5b5e3846c5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>add_base&lt; T, 3 &gt;</name>
    <filename>structExprFuncs_1_1add__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1add__base.html</anchorfile>
      <anchor>a7f3af6a75d943c32a9e8a5b5e3846c5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>add_base&lt; T, 4 &gt;</name>
    <filename>structExprFuncs_1_1add__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1add__base.html</anchorfile>
      <anchor>a7f3af6a75d943c32a9e8a5b5e3846c5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>add_base&lt; T, 5 &gt;</name>
    <filename>structExprFuncs_1_1add__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1add__base.html</anchorfile>
      <anchor>a7f3af6a75d943c32a9e8a5b5e3846c5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::add_type</name>
    <filename>structSacado_1_1mpl_1_1add__type.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1add__type.html</anchorfile>
      <anchor>aa48c2800ab67ce0c1f3b302e066eaf5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::AdditionOp</name>
    <filename>classSacado_1_1Tay_1_1AdditionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>value_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp.html</anchorfile>
      <anchor>ab8e75029bda50d43a46b5cf2eb7c103e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::value_type</type>
      <name>value_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp.html</anchorfile>
      <anchor>af097727f30e60750d36a7ad32503f876</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; value_type_1, value_type_2 &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp.html</anchorfile>
      <anchor>a1852e4135d58d5741ad8f99189e8fc68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::scalar_type</type>
      <name>scalar_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp.html</anchorfile>
      <anchor>a6592d39c4af4dcadfed78ef2b41df467</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::scalar_type</type>
      <name>scalar_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp.html</anchorfile>
      <anchor>a3e8c813ccad7781e6aeb75bb46199edb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; scalar_type_1, scalar_type_2 &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp.html</anchorfile>
      <anchor>ab81c8bbfd8f6ed5c021f0958681b1a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::base_expr_type</type>
      <name>base_expr_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp.html</anchorfile>
      <anchor>ae7e076111842b5f9be5bfd9ce8fa7046</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::base_expr_type</type>
      <name>base_expr_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp.html</anchorfile>
      <anchor>a9cc7bedb6392eb8559d01ae027fdee7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; base_expr_type_1, base_expr_type_2 &gt;::type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp.html</anchorfile>
      <anchor>af41f10661b7bcb87a2e950bd683eb0ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdditionOp</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp.html</anchorfile>
      <anchor>ac20aee78d498ed7ce81b0b4fb10b54d7</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp.html</anchorfile>
      <anchor>aa80846630d92cb267d7ff4345aa575a8</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp.html</anchorfile>
      <anchor>a2e183caa7f588118b59807ecb7d96006</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp.html</anchorfile>
      <anchor>a9c329476fe2a78870d201acdd8dc1888</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::AdditionOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</name>
    <filename>classSacado_1_1Tay_1_1AdditionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT2::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a7eb44e704874dd119c0c9a4249f8395f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>abace5f5143cf46547e72946ddb0ddac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a6c70f649168aaf3addc1ac990303511c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstExpr&lt; typename ExprT2::value_type &gt;</type>
      <name>ExprT1</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a01788e424f0821eeb56ccac6753bcb31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdditionOp</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a20917f4c4ec0dd4c12e0c1249dd5bfc2</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a7163e7ac1299904c772d54f45422a067</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a79cd2d37da78277404c58932686437e5</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>ae3fb81a88cc7a73645708c6f5fde42b5</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::AdditionOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</name>
    <filename>classSacado_1_1Tay_1_1AdditionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>aef7c291f9158b39dc8eaef0012192b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>ae2002889fab9dccead3c4ca705a3720f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>acd285b0f7570489ed91f1c51fe05d347</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstExpr&lt; typename ExprT1::value_type &gt;</type>
      <name>ExprT2</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a7d7787242b3af4a9f50026ffa296e05b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdditionOp</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a7a67c93129e89764dc359a90f6c2eb80</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a8d8ffcf16f96de132aa4dd260cdb299a</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>aeb776d3800857a7e6cad7e0e50cf5d12</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1AdditionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>afe9322ddc9fe12d04924827f8f97aa70</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Radnt::ADmemblock</name>
    <filename>structSacado_1_1Radnt_1_1ADmemblock.html</filename>
    <member kind="variable">
      <type>ADmemblock *</type>
      <name>next</name>
      <anchorfile>structSacado_1_1Radnt_1_1ADmemblock.html</anchorfile>
      <anchor>af0423dfe73dfafab5bc0ed3bd52f4a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>memblk</name>
      <anchorfile>structSacado_1_1Radnt_1_1ADmemblock.html</anchorfile>
      <anchor>ac0e0f6d25499fcb8c5e75be62e2ad07a</anchor>
      <arglist>[1000]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Rad2d::ADmemblock</name>
    <filename>structSacado_1_1Rad2d_1_1ADmemblock.html</filename>
    <member kind="variable">
      <type>ADmemblock *</type>
      <name>next</name>
      <anchorfile>structSacado_1_1Rad2d_1_1ADmemblock.html</anchorfile>
      <anchor>ade2136c74dfcf5597345702a4f132d0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>memblk</name>
      <anchorfile>structSacado_1_1Rad2d_1_1ADmemblock.html</anchorfile>
      <anchor>a3e1ceafd37579f422dd7c1c2074ca255</anchor>
      <arglist>[2000]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Rad::ADmemblock</name>
    <filename>structSacado_1_1Rad_1_1ADmemblock.html</filename>
    <templarg></templarg>
    <member kind="variable">
      <type>ADmemblock *</type>
      <name>next</name>
      <anchorfile>structSacado_1_1Rad_1_1ADmemblock.html</anchorfile>
      <anchor>af4aa49547b7e71d967e37dfae61e86b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>memblk</name>
      <anchorfile>structSacado_1_1Rad_1_1ADmemblock.html</anchorfile>
      <anchor>ad4ead33177031fe283793598c25d60bb</anchor>
      <arglist>[1000]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Rad2::ADmemblock</name>
    <filename>structSacado_1_1Rad2_1_1ADmemblock.html</filename>
    <templarg></templarg>
    <member kind="variable">
      <type>ADmemblock *</type>
      <name>next</name>
      <anchorfile>structSacado_1_1Rad2_1_1ADmemblock.html</anchorfile>
      <anchor>aac7d23fc1a5a3dc2ea3fc77e126a531c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>memblk</name>
      <anchorfile>structSacado_1_1Rad2_1_1ADmemblock.html</anchorfile>
      <anchor>a69aab5ee364aa15909914f052daeb750</anchor>
      <arglist>[2000]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::RadVec::ADmemblock</name>
    <filename>structSacado_1_1RadVec_1_1ADmemblock.html</filename>
    <templarg></templarg>
    <member kind="variable">
      <type>ADmemblock *</type>
      <name>next</name>
      <anchorfile>structSacado_1_1RadVec_1_1ADmemblock.html</anchorfile>
      <anchor>a566b8cf02de860e1072c64ea5fcee5a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>memblk</name>
      <anchorfile>structSacado_1_1RadVec_1_1ADmemblock.html</anchorfile>
      <anchor>a9195ae3b614633615843fde0cd0db241</anchor>
      <arglist>[1000]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ADvar</name>
    <filename>classSacado_1_1Radnt_1_1ADvar.html</filename>
    <base>Sacado::Radnt::IndepADvar</base>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>a1bb021b9c1dd152dac733ec1f9830923</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>adc746c265f090c2077c2f0b1acbf3be1</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>a4cd6b8fa580c795142df848a531ccff8</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>a39a6c4af26430fe4e918587520c98bba</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>af8b52d0c54400ef79c88ead9753ffdda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>a67a142abd5305599aa4f879074b5688e</anchor>
      <arglist>(const IndepADvar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>a16a5398300b89f0ab870b5e30e446fe7</anchor>
      <arglist>(const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>aa24d9af7579fa0523b77a6b6144552c6</anchor>
      <arglist>(const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>a5c28270fe77cd9c6f729e383adf2ba71</anchor>
      <arglist>(const IndepADvar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>a491c3a8797fd1911eb01ad1ad264c094</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>a050cc4e80036539b54004cf52ae9f872</anchor>
      <arglist>(const ADvari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>a851d819f56758c4bcbadc581ff851225</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>aabe0983748deecb4edef7f63d5214c9f</anchor>
      <arglist>(const ADvari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>afd00ece7dbeabc292067fc075c6813d8</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>a83fa76640b68ee6d549d26ac1a245637</anchor>
      <arglist>(const ADvari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>ae83d35d119216bce2eb09d7c104e99f8</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>a652e25410927152b7f240598c2d05414</anchor>
      <arglist>(const ADvari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>a91048b3acd535efbc1460b780c6e5924</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_fpval_implies_const</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>af13a7d99e2429648879eaa8637977737</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_fpval_implies_const</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>ae351080fe4c5005e98f4a21310d2c783</anchor>
      <arglist>(bool newval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setget_fpval_implies_const</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>a355b9b81d26a051902f5cd4cddcee678</anchor>
      <arglist>(bool newval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>ac4f9e58f9a9fd2b4cee71bad97912b6b</anchor>
      <arglist>(int wantgrad)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>a008004e95793cd8b1c950cf8a57855c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>aval_reset</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>a2723f4aa0ae181be7ad833a8e4a88d53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Weighted_Gradcomp</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>ae60c6f62c2d5d6684b04ce8dca1b61f8</anchor>
      <arglist>(int n, ADvar **v, double *w)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ADvar_ctr</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>aada68747364a0aa6029b9527ceb00530</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar.html</anchorfile>
      <anchor>a685c7fe2993ff4bd3af17fafed13b0cb</anchor>
      <arglist>(ADvar *, const ADvari &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADvar</name>
    <filename>classSacado_1_1Rad2d_1_1ADvar.html</filename>
    <base>Sacado::Rad2d::IndepADvar</base>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>acd1e38336413bcad9fd91d4fbe2d1a09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>ac25335b79b36de7d5f1b1c2f4cb90e54</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a747d68aa47dc3bd1dd6f421d8463bf6a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>afe9ab3d4682409b5a378d39945780863</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a8642a9aa2d5e4bb975269617ef30ddde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a56f35f6f3b208d5e5e995ee48adf09b3</anchor>
      <arglist>(const IndepADvar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>aa6d68e5adc73fc3660949d0ccd5a2087</anchor>
      <arglist>(const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a13b963b79cbce5c26a137fc975ea11ee</anchor>
      <arglist>(const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a77ac02115b92fba0d6a516cb522b373f</anchor>
      <arglist>(const IndepADvar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a1fbaa51fc828e6123cc28103dbda9fc8</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a6eb0ba463d8092814e8d2adea2e4c737</anchor>
      <arglist>(const ADvari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a9b5d62fc230febe407fee77c9894a9ca</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a01dcfdee41f9e03707dec7ee8b959ab9</anchor>
      <arglist>(const ADvari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a425a08f320d8b1ddeafc0bfcd5dffab8</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a2fdfcf5aff2cc84c3eb12ebe46679b53</anchor>
      <arglist>(const ADvari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>ac56c5698f5f1bc020d234a6475ca12bc</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a2df2ed6b96992d36c7850d8f7cf01d54</anchor>
      <arglist>(const ADvari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a5f17ca89a02e4cc78290bd3166bbb733</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_fpval_implies_const</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a3624b74bc48faa3657d3df5f38017a07</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_fpval_implies_const</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a373e5aa084a6bf33517d1a330ff66b03</anchor>
      <arglist>(bool newval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setget_fpval_implies_const</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>aae5c4c59bb7834bbaca92a510dc5fa3b</anchor>
      <arglist>(bool newval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a7a1440ad8f459fc73e20fec6a0edf5a9</anchor>
      <arglist>(int wantgrad)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a200e94d1dd84bfff61580e2a5fb58659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Hvprod</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a1a0fb5327cec0f0e0d3510490cef9ae2</anchor>
      <arglist>(int n, ADvar **vp, double *v, double *hv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>aval_reset</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>ad477a11fb8bcdb7b422d271a3419613f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Weighted_Gradcomp</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>ae8e7207e7d59135cacd9d84038ff454c</anchor>
      <arglist>(int n, ADvar **v, double *w)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ADvar_ctr</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a9380312874b9f962a755874bdbe8e086</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar.html</anchorfile>
      <anchor>a685c7fe2993ff4bd3af17fafed13b0cb</anchor>
      <arglist>(ADvar *, const ADvari &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ADvar</name>
    <filename>classSacado_1_1Rad_1_1ADvar.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad::IndepADvar</base>
    <class kind="struct">Sacado::Rad::ADvar::apply</class>
    <member kind="typedef">
      <type>IndepADvar&lt; Double &gt;</type>
      <name>IndepADVar</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>a054113fee798caa139fed54746120260</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndepADVar::ADVari</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>a9f66437cc207fc17fa6579da4dcd2468</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstADvari&lt; Double &gt;</type>
      <name>ConstADVari</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>a044f7fe167dbb16d640cdc8869e25dea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADvar1&lt; Double &gt;</type>
      <name>ADVar1</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>abdfc86b5fc5651e245352f55fddc4d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>abad71bdedbd38c365f94ec84ff610633</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>ad324677db5295f36685aaecc36100396</anchor>
      <arglist>(Ttype d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>a6befe24521995bec63ffe215fd7a5251</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>a2bfa22e4a4bfe82a56662c4f0772fa00</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>aa8633ae85663abba2fc8e7183307c673</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>af7cb67777d6e3361a396f9a6b23487fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Allow_noderiv</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>a4e72dcc3b0aa8b88a4fae3cdcf24202e</anchor>
      <arglist>(inline ADvar(void *v, int wd):IndepADVar(v, wd){}) friend ADvar &amp;ADvar_operatoreq&lt;&gt;(ADvar *</arglist>
    </member>
    <member kind="function">
      <type>const ADVari &amp;</type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>ae2ae655f7780326ab5dad26b78870597</anchor>
      <arglist>(const IndepADVar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>aaf938518e25b5988869688aa86cd00cd</anchor>
      <arglist>(const ADvar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>adf1e49439950ff82b1a24e93aa4827d9</anchor>
      <arglist>(const ADVari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>af3858d2d16b812f296f854364b4a3473</anchor>
      <arglist>(const ADVari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>ad2b1a941a81bfbf17b7bc32144afa1d1</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>ab951877ff6e6205243f3daa122be10b6</anchor>
      <arglist>(const ADVari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>a4e8f69c006b006cf4aef67679da3a1f9</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>a2a906bc91132cffcab23d016a11416fb</anchor>
      <arglist>(const ADVari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>a77c6706415e5936c341e0c59bd380565</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>aa45f4e073be36bddfbe9961a0a49f596</anchor>
      <arglist>(const ADVari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>aeb14eb5e2adcf3ce57c2f31030c4b368</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>aed9183e900f44c8b10d19c00bd84cde2</anchor>
      <arglist>(const ADVari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>a6405877c88acc365c3daa1ecd2ddee34</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_fpval_implies_const</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>a96dfd387e7a69954823c1d546aa1a62b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_fpval_implies_const</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>a3d317e3be67079df54b5655ef320c996</anchor>
      <arglist>(bool newval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setget_fpval_implies_const</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>acbb3c8247617411b9718c1c3e5a1b413</anchor>
      <arglist>(bool newval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>a87c406611596dce621275868a9f7ee35</anchor>
      <arglist>(int wantgrad)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>a5a49b8624bef9e26307cdd63a3a2d74d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>aval_reset</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>aa1bee617adb9494b0c6c3e58939f915c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Weighted_Gradcomp</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>ad3866f2d47a28e164ea379d0633247dd</anchor>
      <arglist>(size_t n, ADvar **v, Double *w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Outvar_Gradcomp</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>a05d1149cbec37f2e78802e0c0f14b53a</anchor>
      <arglist>(ADvar &amp;v)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ADvar_ctr</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>aa8cb98e5a38cfa43fdff39362cddce95</anchor>
      <arglist>(Double d)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvar1&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar.html</anchorfile>
      <anchor>a9150e5801a55db99ae0705ead04a1b24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvar</name>
    <filename>classSacado_1_1Rad2_1_1ADvar.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad2::IndepADvar</base>
    <class kind="struct">Sacado::Rad2::ADvar::apply</class>
    <member kind="typedef">
      <type>IndepADvar&lt; Double &gt;</type>
      <name>IndepADVar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>a828706200bfb7cddde4fe6e364bb59af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>acff4c137e192f2a04ffb39228e4c3b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstADvari&lt; Double &gt;</type>
      <name>ConstADVari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>a021bb01c7e754856cbe8a7960d0c5565</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADvar1&lt; Double &gt;</type>
      <name>ADVar1</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>ae72c9586b6e1fdc2d76daa23712e1272</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>acddcff7ea0d5d2af423f1ff92a72e7d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>a75cbce0c12a4c615d0163a568bca7f0c</anchor>
      <arglist>(Ttype d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>a13b21dc5a736567b5194929b4fc65638</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>a501bfb5fde99e2bb8de668b6b359407e</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>a83d1a6c4c0775af7074902c5ec7867e6</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>a9383b3c6d25ab6ed5fec83a823fab2f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>a9a176409421cf0d5dde71fb163123a35</anchor>
      <arglist>(const IndepADVar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>af5ab393c465aaf3f8d07b0e4832ddef1</anchor>
      <arglist>(const ADvar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>ae63424505341a36dbe53c6f56984666f</anchor>
      <arglist>(const ADVari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>a108bc0a33b4be4d66d92fd4d187cfbeb</anchor>
      <arglist>(IndepADVar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>aa35412fc98891bf171c0ac70590a2619</anchor>
      <arglist>(const ADVari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>a9c23893335d706e300bae72e4a5bba1d</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>abbf3af0c6351ec0f747570baf3c1e1dd</anchor>
      <arglist>(const ADVari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>a8da97e6279af85dd5c2958995bfa94ba</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>ab618d739e8ded0dc94f7df9b37be0428</anchor>
      <arglist>(const ADVari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>a6acc1a68bc1fa95330365ea5268218b5</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>a94eeb00fec556436e510b2dcb1297802</anchor>
      <arglist>(const ADVari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>ab6d9c838f5905dd7ef85e0e7d8556e11</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>a2d71f5cff4511ecf50cbded454433dc0</anchor>
      <arglist>(const ADVari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>a88a80a12cf1d15cc5d39251f0221bf44</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_fpval_implies_const</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>af048b64696df9bd4326b5c7c3fc86476</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_fpval_implies_const</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>aa50e8b2043de280ab2fa4da331200347</anchor>
      <arglist>(bool newval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setget_fpval_implies_const</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>af23d859c2e6d00a8de96ee97052ca4b5</anchor>
      <arglist>(bool newval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>a98611047e47470c7d9c906c15f26d3cf</anchor>
      <arglist>(int wantgrad)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>a8710753699be39ed7b31376d62f5523b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>aval_reset</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>af5ae9d6b1a0c007e21b455691ef24a9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Weighted_Gradcomp</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>a12a27af86c70462e184e1a433db9e37c</anchor>
      <arglist>(int n, ADvar **v, Double *w)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ADvar_ctr</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>adf1760823bcd8fe6138fa8ad35213203</anchor>
      <arglist>(Double d)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvar1&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>a9150e5801a55db99ae0705ead04a1b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>ac53e4a983e7281b4a2f3197e864d4b0a</anchor>
      <arglist>(ADvar *, const ADVari &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar.html</anchorfile>
      <anchor>ac53e4a983e7281b4a2f3197e864d4b0a</anchor>
      <arglist>(ADvar *, const ADVari &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ADvar</name>
    <filename>classSacado_1_1RadVec_1_1ADvar.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::RadVec::IndepADvar</base>
    <class kind="struct">Sacado::RadVec::ADvar::apply</class>
    <member kind="typedef">
      <type>IndepADvar&lt; Double &gt;</type>
      <name>IndepADVar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a83c81fb554cceab736bb48618fdaec42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndepADVar::ADVari</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a8e96289ce6a503ab00afcf4308ef8558</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstADvari&lt; Double &gt;</type>
      <name>ConstADVari</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a663c0302d0320ab64bb96fc9af50336e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADvar1&lt; Double &gt;</type>
      <name>ADVar1</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a8250b388e6656ab5dc5859f278ff568b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>aace7c8e6b574a99c68f5997d104109bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a7ef4a540e5e3fc2e1e34def9cd37f6f4</anchor>
      <arglist>(Ttype d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a7b0e53dc9f71fc82765ae89a4de60bd3</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a983ba6c66eb906462e9ab2316d9c5dc8</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>ad50b1127577733b870425ea819b8ebfe</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a3e7c8c7711bc65f1f81a7780ddec1b3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a5a860177503bd588a013e0a7be103178</anchor>
      <arglist>(const IndepADVar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a822ca300a618b34b44d64c4e10578502</anchor>
      <arglist>(const ADvar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>ac1f1f24145faeac0ae54056bb28e8447</anchor>
      <arglist>(const ADVari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a4e8256c66ef4ecbb38d5e711b448e7e2</anchor>
      <arglist>(const ADVari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>ab9b6afdefb3b29b68928d64cac96140c</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a0d5843960e3651c74ea395c00f6ce86c</anchor>
      <arglist>(const ADVari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>adf140cf16a91b1fe2e622e88bf073ba0</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a5c8670aa8525ae06ca2690daf0577e42</anchor>
      <arglist>(const ADVari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a40aa12bf034873285db1471e3b13eb53</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>aa48d6d192af139681606ddf46c1621d3</anchor>
      <arglist>(const ADVari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>ab12c2c4e5ce49a85fcba4551a0abfb69</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>aaf2974a7beeb441618d90f5bb8ffca81</anchor>
      <arglist>(const ADVari &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a22cd3bb1b1344f0b67dd7b49ce8d8794</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_fpval_implies_const</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>abc02dd6cc555276bd6f76994ad7dcfd0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_fpval_implies_const</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a255848b6fe6faed4dd25fe2414fe2e28</anchor>
      <arglist>(bool newval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setget_fpval_implies_const</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a9e1a669afd8f098722307400d8d09e6d</anchor>
      <arglist>(bool newval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>aea47085bcac3e4639b2049c46b7e3e73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>aval_reset</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>afb338b14f89bca05fec8bcbb46c4334a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Weighted_Gradcomp</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a112294fb64a631b971593bd5bd9800dc</anchor>
      <arglist>(size_t n, ADvar **v, Double *w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Weighted_GradcompVec</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>af611d0f8d034b1209f44698105b2a59f</anchor>
      <arglist>(size_t n, size_t *np, ADvar ***v, Double **w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Outvar_Gradcomp</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a3a6726537a70cf1b3fcae8b68e72dadf</anchor>
      <arglist>(ADvar &amp;v)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ADvar_ctr</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a2a381214eb01412333d748f7fa849fd0</anchor>
      <arglist>(Double d)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvar1&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>a9150e5801a55db99ae0705ead04a1b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar.html</anchorfile>
      <anchor>ac53e4a983e7281b4a2f3197e864d4b0a</anchor>
      <arglist>(ADvar *, const ADVari &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ADvar1</name>
    <filename>classSacado_1_1Radnt_1_1ADvar1.html</filename>
    <base>Sacado::Radnt::ADvari</base>
    <member kind="function">
      <type></type>
      <name>ADvar1</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar1.html</anchorfile>
      <anchor>a8d484ae8b31affd64e18161809a09beb</anchor>
      <arglist>(double val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar1</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar1.html</anchorfile>
      <anchor>a8cc7b6b31cc295fb3c642e0fb909060a</anchor>
      <arglist>(double val1, const ADvari *c1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar1</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar1.html</anchorfile>
      <anchor>a5fc9bae893759ad30836ba17c42a6a43</anchor>
      <arglist>(double val1, const double *a1, const ADvari *c1)</arglist>
    </member>
    <member kind="variable">
      <type>Derp</type>
      <name>d</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar1.html</anchorfile>
      <anchor>af8b92b55bf19d12fc561032dc25f5e96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADvar1</name>
    <filename>classSacado_1_1Rad2d_1_1ADvar1.html</filename>
    <base>Sacado::Rad2d::ADvari</base>
    <member kind="function">
      <type></type>
      <name>ADvar1</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar1.html</anchorfile>
      <anchor>a6a646fe84f741c2828b3dcec0b828910</anchor>
      <arglist>(Advari_Opclass oc, double val1, const double *a1, const ADvari *c1)</arglist>
    </member>
    <member kind="variable">
      <type>Derp</type>
      <name>d</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar1.html</anchorfile>
      <anchor>af73f45d586ad0010f8181736ebb0f965</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ADvar1</name>
    <filename>classSacado_1_1Rad_1_1ADvar1.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad::ADvari</base>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar1.html</anchorfile>
      <anchor>a8d4844c50c603d8b63c8eac9ccd2c45f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar1</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar1.html</anchorfile>
      <anchor>a6f05b75bb80ab0d7f6de549420dfcaa5</anchor>
      <arglist>(Double val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar1</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar1.html</anchorfile>
      <anchor>a2e572a31fce91b3790d551d474b2595a</anchor>
      <arglist>(Double val1, const ADVari *c1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar1</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar1.html</anchorfile>
      <anchor>a10b14af0d39b72c107d0c50a1b120c21</anchor>
      <arglist>(Double val1, const Double *a1, const ADVari *c1)</arglist>
    </member>
    <member kind="variable">
      <type>Derp&lt; Double &gt;</type>
      <name>d</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar1.html</anchorfile>
      <anchor>ac4caf339b219df443be6c0f9fe5af96a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvar1</name>
    <filename>classSacado_1_1Rad2_1_1ADvar1.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad2::ADvari</base>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar1.html</anchorfile>
      <anchor>ab3e7bbc0fd61745b66272c4746c4b4aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar1</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar1.html</anchorfile>
      <anchor>a984fccd903c79b2d703d6c014008e43a</anchor>
      <arglist>(Advari_Opclass oc, Double val1, const Double *a1, const ADVari *c1)</arglist>
    </member>
    <member kind="variable">
      <type>Derp&lt; Double &gt;</type>
      <name>d</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar1.html</anchorfile>
      <anchor>a68ee2962175e82a7e6d24e8a3c0e893a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ADvar1</name>
    <filename>classSacado_1_1RadVec_1_1ADvar1.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::RadVec::ADvari</base>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar1.html</anchorfile>
      <anchor>aa6a58f75150506d410e1e790251c0ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar1</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar1.html</anchorfile>
      <anchor>ad17a02b7db47c4f2a87c3835d4964ad6</anchor>
      <arglist>(Double val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar1</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar1.html</anchorfile>
      <anchor>a645220db7604e8dbdc6622090b64c4b1</anchor>
      <arglist>(Double val1, const ADVari *c1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar1</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar1.html</anchorfile>
      <anchor>a609c1c94e725b51be79963e62e47d69d</anchor>
      <arglist>(Double val1, const Double *a1, const ADVari *c1)</arglist>
    </member>
    <member kind="variable">
      <type>Derp&lt; Double &gt;</type>
      <name>d</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar1.html</anchorfile>
      <anchor>aa922bf603b7f9357ea58aafd9c6cb581</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADvar1g</name>
    <filename>classSacado_1_1Rad2d_1_1ADvar1g.html</filename>
    <base>Sacado::Rad2d::ADvar1</base>
    <member kind="function">
      <type></type>
      <name>ADvar1g</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar1g.html</anchorfile>
      <anchor>a82675d68510cdfd7c852d7491e57dac0</anchor>
      <arglist>(double val1, double d1, double d2, const ADvari *c1)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pL</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar1g.html</anchorfile>
      <anchor>a836856d287f1c17d93297391dcecf29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pL2</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar1g.html</anchorfile>
      <anchor>ab3a4214b68ef3b11f8b3125b9e759ea2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvar1g</name>
    <filename>classSacado_1_1Rad2_1_1ADvar1g.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad2::ADvar1</base>
    <member kind="typedef">
      <type>ADvar1&lt; Double &gt;</type>
      <name>ADVar1</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar1g.html</anchorfile>
      <anchor>a11c7a9b902c6c3543c6f513341842a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar1::ADVari</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar1g.html</anchorfile>
      <anchor>a34a2f8f558e79ae2f131c6f3c8c9e89d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar1g</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar1g.html</anchorfile>
      <anchor>a264435970df977b2a28c3a59fa911116</anchor>
      <arglist>(Double val1, Double d1, Double d2, const ADVari *c1)</arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>pL</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar1g.html</anchorfile>
      <anchor>aadbc8489d2fd632b5ab71f958aac94a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>pL2</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar1g.html</anchorfile>
      <anchor>a83c960cff4b79522629bf753950a00d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ADvar1s</name>
    <filename>classSacado_1_1Radnt_1_1ADvar1s.html</filename>
    <base>Sacado::Radnt::ADvar1</base>
    <member kind="function">
      <type></type>
      <name>ADvar1s</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar1s.html</anchorfile>
      <anchor>a762227fdec24e0e1c13d9a8141ecb8eb</anchor>
      <arglist>(double val1, double a1, const ADvari *c1)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>a</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar1s.html</anchorfile>
      <anchor>a856cdb1d68cecb1e741b16bae564f618</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADvar1s</name>
    <filename>classSacado_1_1Rad2d_1_1ADvar1s.html</filename>
    <base>Sacado::Rad2d::ADvar1</base>
    <member kind="function">
      <type></type>
      <name>ADvar1s</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar1s.html</anchorfile>
      <anchor>a2fa486f0dd2e7e509261451bab8b5390</anchor>
      <arglist>(double val1, double d1, const ADvari *c1)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pL</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar1s.html</anchorfile>
      <anchor>a9d854c343cac608e60d1d87289a23294</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ADvar1s</name>
    <filename>classSacado_1_1Rad_1_1ADvar1s.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad::ADvar1</base>
    <member kind="typedef">
      <type>ADvar1&lt; Double &gt;</type>
      <name>ADVar1</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar1s.html</anchorfile>
      <anchor>a7cab62c091928b696a99bf05b71f1c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar1::ADVari</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar1s.html</anchorfile>
      <anchor>a99df5c628381ba6119b9716244caedd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar1s</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar1s.html</anchorfile>
      <anchor>af2da725fb9d26036a32f0a4dacb49367</anchor>
      <arglist>(Double val1, Double a1, const ADVari *c1)</arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>a</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar1s.html</anchorfile>
      <anchor>ad7ff0ec17864a6ba5634d5721d0f0caf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvar1s</name>
    <filename>classSacado_1_1Rad2_1_1ADvar1s.html</filename>
    <templarg></templarg>
    <base>Sacado::Rad2::ADvar1</base>
    <member kind="typedef">
      <type>ADvar1&lt; Double &gt;</type>
      <name>ADVar1</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar1s.html</anchorfile>
      <anchor>af49354ce9d83c22a8ba3d872763eb120</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar1::ADVari</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar1s.html</anchorfile>
      <anchor>ae59635ff425babbcc199680965543a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar1s</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar1s.html</anchorfile>
      <anchor>aef0f22fa8768e74f9bcb7babffd40896</anchor>
      <arglist>(Double val1, Double a1, const ADVari *c1)</arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>pL</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar1s.html</anchorfile>
      <anchor>a122b8f709600bf5487307291322d8933</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ADvar1s</name>
    <filename>classSacado_1_1RadVec_1_1ADvar1s.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::RadVec::ADvar1</base>
    <member kind="typedef">
      <type>ADvar1&lt; Double &gt;</type>
      <name>ADVar1</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar1s.html</anchorfile>
      <anchor>ad3205384f942d04919f2ceeaf98b1d41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar1::ADVari</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar1s.html</anchorfile>
      <anchor>a82dc059249c87a1338701cbd79510830</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar1s</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar1s.html</anchorfile>
      <anchor>a5ace8e5c823734d1337052bd5255b19d</anchor>
      <arglist>(Double val1, Double a1, const ADVari *c1)</arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>a</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar1s.html</anchorfile>
      <anchor>a6e5ff05f2c3e46df452288720223cf0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ADvar2</name>
    <filename>classSacado_1_1Radnt_1_1ADvar2.html</filename>
    <base>Sacado::Radnt::ADvari</base>
    <member kind="function">
      <type></type>
      <name>ADvar2</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar2.html</anchorfile>
      <anchor>a856fa60161cd2b70e471889bac3c8601</anchor>
      <arglist>(double val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar2</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar2.html</anchorfile>
      <anchor>ad356601fb33c3c1272ddf12a9ac7b961</anchor>
      <arglist>(double val1, const ADvari *Lcv, const double *Lc, const ADvari *Rcv, const double *Rc)</arglist>
    </member>
    <member kind="variable">
      <type>Derp</type>
      <name>dL</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar2.html</anchorfile>
      <anchor>a1fddd26a8560c3addf036190b2637268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Derp</type>
      <name>dR</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar2.html</anchorfile>
      <anchor>af3cf37e223128b31108bbfe000a833d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADvar2</name>
    <filename>classSacado_1_1Rad2d_1_1ADvar2.html</filename>
    <base>Sacado::Rad2d::ADvari</base>
    <member kind="function">
      <type></type>
      <name>ADvar2</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar2.html</anchorfile>
      <anchor>a7373402e4272286579efd9811ddd2e2b</anchor>
      <arglist>(Advari_Opclass oc, double val1, const ADvari *Lcv, const double *Lc, const ADvari *Rcv, const double *Rc)</arglist>
    </member>
    <member kind="variable">
      <type>Derp</type>
      <name>dL</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar2.html</anchorfile>
      <anchor>a87587436435dea4a1010377025841fe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Derp</type>
      <name>dR</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar2.html</anchorfile>
      <anchor>af1072201452eb1ca29d6016c9f667271</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ADvar2</name>
    <filename>classSacado_1_1Rad_1_1ADvar2.html</filename>
    <templarg></templarg>
    <base>Sacado::Rad::ADvari</base>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar2.html</anchorfile>
      <anchor>a9de05d87953b6708f2f85b0c3603ec4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derp&lt; Double &gt;</type>
      <name>DErp</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar2.html</anchorfile>
      <anchor>ac660b96d8550beca58b7cc8f7a895ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar2</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar2.html</anchorfile>
      <anchor>a84ebd657bccfd869606ed687d041b54a</anchor>
      <arglist>(Double val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar2</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar2.html</anchorfile>
      <anchor>a76402a6f1010a2a04598042b31430fd7</anchor>
      <arglist>(Double val1, const ADVari *Lcv, const Double *Lc, const ADVari *Rcv, const Double *Rc)</arglist>
    </member>
    <member kind="variable">
      <type>DErp</type>
      <name>dL</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar2.html</anchorfile>
      <anchor>ac3d41b3cc2b15caf15cb41ede2c41f38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DErp</type>
      <name>dR</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar2.html</anchorfile>
      <anchor>a1a57a23293110e6334fcaf3bcc2cf02f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvar2</name>
    <filename>classSacado_1_1Rad2_1_1ADvar2.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad2::ADvari</base>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2.html</anchorfile>
      <anchor>a7aa1a6cac859fb6d99e9bf5d59f864c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derp&lt; Double &gt;</type>
      <name>DErp</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2.html</anchorfile>
      <anchor>a1bfbea279cfc34db55463fbb836b002c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar2</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2.html</anchorfile>
      <anchor>a128541ddda7a3de0c95f91a0c1f40897</anchor>
      <arglist>(Advari_Opclass oc, Double val1, const ADVari *Lcv, const Double *Lc, const ADVari *Rcv, const Double *Rc)</arglist>
    </member>
    <member kind="variable">
      <type>DErp</type>
      <name>dL</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2.html</anchorfile>
      <anchor>a92c884cecd3e3fd33fdcbe4de8b1e5f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DErp</type>
      <name>dR</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2.html</anchorfile>
      <anchor>a3d136d9d2f3f8df043c35e099937a13f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ADvar2</name>
    <filename>classSacado_1_1RadVec_1_1ADvar2.html</filename>
    <templarg></templarg>
    <base>Sacado::RadVec::ADvari</base>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar2.html</anchorfile>
      <anchor>a983dc2856308a0640eb6927846184ce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derp&lt; Double &gt;</type>
      <name>DErp</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar2.html</anchorfile>
      <anchor>a5a8cfb9d501f0bfab066a41088e84738</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar2</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar2.html</anchorfile>
      <anchor>a297898414f7dab3d20aee33d86fe010d</anchor>
      <arglist>(Double val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar2</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar2.html</anchorfile>
      <anchor>aa440588fc9d493b76fdd81d552b520f6</anchor>
      <arglist>(Double val1, const ADVari *Lcv, const Double *Lc, const ADVari *Rcv, const Double *Rc)</arglist>
    </member>
    <member kind="variable">
      <type>DErp</type>
      <name>dL</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar2.html</anchorfile>
      <anchor>aa41072d394684c26909ca56c4f144c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DErp</type>
      <name>dR</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar2.html</anchorfile>
      <anchor>aac5aab509fe51f828f2cf6b4da6a9bae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADvar2g</name>
    <filename>classSacado_1_1Rad2d_1_1ADvar2g.html</filename>
    <base>Sacado::Rad2d::ADvar2</base>
    <member kind="function">
      <type></type>
      <name>ADvar2g</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar2g.html</anchorfile>
      <anchor>af1c9cf3fe19451f27b0bf69f4b9de799</anchor>
      <arglist>(double val1, double Lp, double Rp, double L2, double LR, double R2, const ADvari *Lcv, const ADvari *Rcv)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pL</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar2g.html</anchorfile>
      <anchor>a820fd60e751337d21b9f3860a11625ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pR</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar2g.html</anchorfile>
      <anchor>a8dd209caab9d0002d72c12a2f64ff9ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pL2</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar2g.html</anchorfile>
      <anchor>aa1cff58d30208a0cd9ff504d3a766363</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pLR</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar2g.html</anchorfile>
      <anchor>adbf751097de8ddd8b6439441f14e4440</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pR2</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar2g.html</anchorfile>
      <anchor>a82e578ae062d09dc841ac0d1fcefb77f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvar2g</name>
    <filename>classSacado_1_1Rad2_1_1ADvar2g.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad2::ADvar2</base>
    <member kind="typedef">
      <type>ADvar2&lt; Double &gt;</type>
      <name>ADVar2</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2g.html</anchorfile>
      <anchor>a34240bd72970773c6e17d3ee1d39e9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar2::ADVari</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2g.html</anchorfile>
      <anchor>ad9217ee15a420dcecf357cb2a2cdb46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar2g</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2g.html</anchorfile>
      <anchor>aa08b8573f74d153f408a840b3baae70e</anchor>
      <arglist>(Double val1, Double Lp, Double Rp, Double L2, Double LR, Double R2, const ADVari *Lcv, const ADVari *Rcv)</arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>pL</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2g.html</anchorfile>
      <anchor>a75a0f85131cd08202012a79cbdc846fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>pR</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2g.html</anchorfile>
      <anchor>a7391e61f0d1075348cc624736e1c1ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>pL2</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2g.html</anchorfile>
      <anchor>abfe132e32104078672dfa884c782b4b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>pLR</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2g.html</anchorfile>
      <anchor>abb4207c04b17bbb2086e0a58cdffa4ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>pR2</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2g.html</anchorfile>
      <anchor>aaa880a43bf0a47df7d9b19bd21394ba7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ADvar2q</name>
    <filename>classSacado_1_1Radnt_1_1ADvar2q.html</filename>
    <base>Sacado::Radnt::ADvar2</base>
    <member kind="function">
      <type></type>
      <name>ADvar2q</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar2q.html</anchorfile>
      <anchor>a390107dce508c9ae42520967a8f1e32c</anchor>
      <arglist>(double val1, double Lp, double Rp, const ADvari *Lcv, const ADvari *Rcv)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>a</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar2q.html</anchorfile>
      <anchor>ad388b65577905741a34686f2401e7385</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>b</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvar2q.html</anchorfile>
      <anchor>aace37945cdb54ff693c2a0fe55eedfad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADvar2q</name>
    <filename>classSacado_1_1Rad2d_1_1ADvar2q.html</filename>
    <base>Sacado::Rad2d::ADvar2</base>
    <member kind="function">
      <type></type>
      <name>ADvar2q</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar2q.html</anchorfile>
      <anchor>a1fce3a163136924ce40eea2bc4ec5c4d</anchor>
      <arglist>(double val1, double Lp, double Rp, double LR, double R2, const ADvari *Lcv, const ADvari *Rcv)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pL</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar2q.html</anchorfile>
      <anchor>aeb658301405b386bda52c07f9e7c7c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pR</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar2q.html</anchorfile>
      <anchor>a08f821e71ba1f9cf71a44443fe7e4703</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pLR</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar2q.html</anchorfile>
      <anchor>a200e9fbb9ec175f09ed04d43bbc39b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pR2</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvar2q.html</anchorfile>
      <anchor>a011c603dbd21fbda3b2d33bc9c4d34dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ADvar2q</name>
    <filename>classSacado_1_1Rad_1_1ADvar2q.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad::ADvar2</base>
    <member kind="typedef">
      <type>ADvar2&lt; Double &gt;</type>
      <name>ADVar2</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar2q.html</anchorfile>
      <anchor>a397b3c2394c00455157a034baf7482b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar2::ADVari</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar2q.html</anchorfile>
      <anchor>a021869e1fbe046f14b08663659b9daed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar2::DErp</type>
      <name>DErp</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar2q.html</anchorfile>
      <anchor>a4eeeb3fa69fac6f274fffe164e4b61c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar2q</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar2q.html</anchorfile>
      <anchor>a78ce0b5aba8d356e4210aff35b447fd0</anchor>
      <arglist>(Double val1, Double Lp, Double Rp, const ADVari *Lcv, const ADVari *Rcv)</arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>a</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar2q.html</anchorfile>
      <anchor>a4c4e0769072b74817ec48f5f92986221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>b</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvar2q.html</anchorfile>
      <anchor>a78ee7c8cf2cadeaca24027394ddbe598</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvar2q</name>
    <filename>classSacado_1_1Rad2_1_1ADvar2q.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad2::ADvar2</base>
    <member kind="typedef">
      <type>ADvar2&lt; Double &gt;</type>
      <name>ADVar2</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2q.html</anchorfile>
      <anchor>a4a24810f428e25105d7f3b146f969c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar2::ADVari</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2q.html</anchorfile>
      <anchor>ae71ee18d581abb0b675ecf1ba6c24716</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar2::DErp</type>
      <name>DErp</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2q.html</anchorfile>
      <anchor>ad6b70a7cca8b689e6ea473313366c040</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar2q</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2q.html</anchorfile>
      <anchor>af425b292fd74f583e982d09e24303ca2</anchor>
      <arglist>(Double val1, Double Lp, Double Rp, Double LR, Double R2, const ADVari *Lcv, const ADVari *Rcv)</arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>pL</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2q.html</anchorfile>
      <anchor>a349996c30b682f8e88dad709d7d25595</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>pR</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2q.html</anchorfile>
      <anchor>abcc5f77bb42077394267a695928b02ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>pLR</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2q.html</anchorfile>
      <anchor>ae4f6e1daa63f7bed5a39b0ec8d3fd3cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>pR2</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvar2q.html</anchorfile>
      <anchor>a0337309ad0265c2b324cb6ed7722dc87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ADvar2q</name>
    <filename>classSacado_1_1RadVec_1_1ADvar2q.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::RadVec::ADvar2</base>
    <member kind="typedef">
      <type>ADvar2&lt; Double &gt;</type>
      <name>ADVar2</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar2q.html</anchorfile>
      <anchor>aebef7071d892761554df11f760cb2561</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar2::ADVari</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar2q.html</anchorfile>
      <anchor>ae618a3a40f5f9611255dbe66cf544e92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar2::DErp</type>
      <name>DErp</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar2q.html</anchorfile>
      <anchor>a87902230433489a60a3274438fce02c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvar2q</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar2q.html</anchorfile>
      <anchor>a30c329d3a89d9a5eb8e154a40bcea37f</anchor>
      <arglist>(Double val1, Double Lp, Double Rp, const ADVari *Lcv, const ADVari *Rcv)</arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>a</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar2q.html</anchorfile>
      <anchor>a7fd763f3b4660c3e71971eb3c52ce83e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>b</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvar2q.html</anchorfile>
      <anchor>aea47df48dec6bc2e3f106e948ab09710</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ADvari</name>
    <filename>classSacado_1_1Radnt_1_1ADvari.html</filename>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvari.html</anchorfile>
      <anchor>a7a418c60de0731243b517aec634d0f36</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvari.html</anchorfile>
      <anchor>afc0b42bd5947a26b070075b7c377caea</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvari</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvari.html</anchorfile>
      <anchor>a96d5952914a269b2a8b5a4d37038b588</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvari</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvari.html</anchorfile>
      <anchor>ae4e64bd6209da0661d9a2beae192c823</anchor>
      <arglist>(double t, double ta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvari</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvari.html</anchorfile>
      <anchor>a81858af9c618b6a1cdb1b108ec9be746</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Val</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvari.html</anchorfile>
      <anchor>ae227829946cc304d045bac603650d7a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>aval</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvari.html</anchorfile>
      <anchor>a6ea11fbd5702ee9df6e802a152ca8360</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ADcontext</type>
      <name>adc</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvari.html</anchorfile>
      <anchor>a0ccdd219d0daa2bac029046fbef0f600</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ADvari &amp;</type>
      <name>ADf1</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvari.html</anchorfile>
      <anchor>ac834b6f1755e3e6ed2baf19688625403</anchor>
      <arglist>(double f, double g, const ADvari &amp;x)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADvari &amp;</type>
      <name>ADf2</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvari.html</anchorfile>
      <anchor>afadc09a35c92f4089085f98e0d54103a</anchor>
      <arglist>(double f, double gx, double gy, const ADvari &amp;x, const ADvari &amp;y)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADvari &amp;</type>
      <name>ADfn</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvari.html</anchorfile>
      <anchor>a033f3b86dee1e92194379550fd6c744d</anchor>
      <arglist>(double f, int n, const ADvar *x, const double *g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADvari</name>
    <filename>classSacado_1_1Rad2d_1_1ADvari.html</filename>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvari.html</anchorfile>
      <anchor>a65cef9bb85166c4d515b4fdb2b5198a4</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvari.html</anchorfile>
      <anchor>aeeadb001439880f9eb4cacc20b0d8fac</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvari</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvari.html</anchorfile>
      <anchor>a880b8c2f58a1393f578f153a7978f571</anchor>
      <arglist>(Advari_Opclass oc, double t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvari</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvari.html</anchorfile>
      <anchor>a0397760c6774f51ed6a715d926439602</anchor>
      <arglist>(Advari_Opclass oc, double t, double ta)</arglist>
    </member>
    <member kind="variable">
      <type>Advari_Opclass</type>
      <name>opclass</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvari.html</anchorfile>
      <anchor>a71ac6fa712bc8fb3b363f691cbc00065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Val</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvari.html</anchorfile>
      <anchor>ad73acb4e7349c3fe6ca72cd8faf779f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>aval</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvari.html</anchorfile>
      <anchor>a847e793c5f5c6f83f373b41b34dd0e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dO</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvari.html</anchorfile>
      <anchor>a644ce753fc5927ee262330a308c44eb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>aO</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvari.html</anchorfile>
      <anchor>a4a5ece3795bec250204dd3ecfb684226</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>adO</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvari.html</anchorfile>
      <anchor>a8cdd6140e9b60f6c62a3e49a419a1369</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ADcontext</type>
      <name>adc</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvari.html</anchorfile>
      <anchor>a9fc233f281932f3729bd6966e993f6c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ADvari</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvari.html</anchorfile>
      <anchor>a4e402b702d68adcab86776399b1660bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ConstADvari</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvari.html</anchorfile>
      <anchor>a88cc20d7144637bbe72d8fe77a5c9570</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ADvari &amp;</type>
      <name>ADf1</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvari.html</anchorfile>
      <anchor>a5940c0d848883b3a271fd07a4a5e331a</anchor>
      <arglist>(double f, double g, double h, const ADvari &amp;x)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADvari &amp;</type>
      <name>ADf2</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvari.html</anchorfile>
      <anchor>ab45a9bcfa782a25ba0ce1a602379fadd</anchor>
      <arglist>(double f, double gx, double gy, double hxx, double hxy, double hyy, const ADvari &amp;x, const ADvari &amp;y)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADvari &amp;</type>
      <name>ADfn</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvari.html</anchorfile>
      <anchor>a86c6ff66338ce8962a2753686ff7e009</anchor>
      <arglist>(double f, int n, const ADvar *x, const double *g, const double *h)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ADvari</name>
    <filename>classSacado_1_1Rad_1_1ADvari.html</filename>
    <templarg>Double</templarg>
    <base>Base&lt; ADvari&lt; Double &gt; &gt;</base>
    <member kind="typedef">
      <type>Double</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvari.html</anchorfile>
      <anchor>ae1d26720e1df4f35dd2ce72de834e56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvari.html</anchorfile>
      <anchor>abc7cfc3941044d5979ea619110f99f7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndepADvar&lt; Double &gt;</type>
      <name>IndepADVar</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvari.html</anchorfile>
      <anchor>a6b56c019a2428039b0dde37e22e5e5e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Allow_noderiv</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvari.html</anchorfile>
      <anchor>a1046c5f0a674c42c04de6ca126e18795</anchor>
      <arglist>(mutable int wantderiv;) void *operator new(size_t len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvari.html</anchorfile>
      <anchor>af450ddae32e5a84ebd03a6f634b1ce9d</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvari</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvari.html</anchorfile>
      <anchor>a1745df8bbd6cd602705df17a2fe36c07</anchor>
      <arglist>(Double t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvari</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvari.html</anchorfile>
      <anchor>a678ceb2bdfa8b0db8263f6de64f5e12a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Double</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvari.html</anchorfile>
      <anchor>aa53d046d012dddbbbf1538459394def9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Double</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvari.html</anchorfile>
      <anchor>aa645b455c8fbdb92e859fbe39f995ed2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>Val</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvari.html</anchorfile>
      <anchor>abcc7336e787da235ddac280152b674e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>aval</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvari.html</anchorfile>
      <anchor>addf5ccc470dcf0fdaa068c05ace6382b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ADcontext&lt; Double &gt;</type>
      <name>adc</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvari.html</anchorfile>
      <anchor>a982ee32e90eb1c78ecdc73579d7be9c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ADvari &amp;</type>
      <name>ADf1</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvari.html</anchorfile>
      <anchor>a09e703188f2bc01e53fc761768040263</anchor>
      <arglist>(Double f, Double g, const ADvari &amp;x)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADvari &amp;</type>
      <name>ADf2</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvari.html</anchorfile>
      <anchor>a1abae9d23682d2e0f0c625617f85d14e</anchor>
      <arglist>(Double f, Double gx, Double gy, const ADvari &amp;x, const ADvari &amp;y)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADvari &amp;</type>
      <name>ADfn</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvari.html</anchorfile>
      <anchor>a723c26868c523cbed786aecac706ff9f</anchor>
      <arglist>(Double f, int n, const IndepADVar *x, const Double *g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvari</name>
    <filename>classSacado_1_1Rad2_1_1ADvari.html</filename>
    <templarg>Double</templarg>
    <member kind="typedef">
      <type>Double</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>a58d9bde0a6320b6214995b97621540d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>a4cba35443a3a9d898af0996d0ec320a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndepADvar&lt; Double &gt;</type>
      <name>IndepADVar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>a59bdf25c5b0b6642886576a8861d58dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>a532f31488d230685434eb4493411e83b</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>a3c83c5fb0e0fb13f10c5954f2cdc0201</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>a6fddf7870518dc7b8fe48c5d595956e7</anchor>
      <arglist>(Advari_Opclass oc, Double t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>af7e7177fce0e73bdac757e14d450e130</anchor>
      <arglist>(Advari_Opclass oc, Double t, Double ta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Double</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>af8de045a52dd69096ef42981bd8b42a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Double</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>a1a16720458d31adaf6fdfde8e15dec7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Advari_Opclass</type>
      <name>opclass</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>a597b41ad34b79fd7b6f702cc0c6b1b6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>Val</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>a8e7724ed89cdb2d02235336ce0f56732</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>aval</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>a937b207b37c26c1425a3a89648f130f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>dO</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>a1cb0e228a9d47fa182a774a4682acd30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>aO</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>a8583bf3f138458540ece09469a7fdc12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>adO</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>ac0b98a4feb5371a5e9b3f6ac8cd16517</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ADcontext&lt; Double &gt;</type>
      <name>adc</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>a8308805959d53742dfb986ddd3a9f138</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ADvari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>ad3f914d22e0ab6bb5b3b910017cb1883</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ConstADvari&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>a3a65795f832529b284ffbf408849f98d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ADvari &amp;</type>
      <name>ADf1</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>a71792e87f3c7738be0afef897bbe15e1</anchor>
      <arglist>(Double f, Double g, Double h, const ADvari &amp;x)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADvari &amp;</type>
      <name>ADf2</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>a8854b87af6dd547ba00ef5195d0b0af2</anchor>
      <arglist>(Double f, Double gx, Double gy, Double hxx, Double hxy, Double hyy, const ADvari &amp;x, const ADvari &amp;y)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADvari &amp;</type>
      <name>ADfn</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari.html</anchorfile>
      <anchor>af4e9713b3d20e46834d4aa8a0b39b82c</anchor>
      <arglist>(Double f, int n, const IndepADVar *x, const Double *g, const Double *h)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ADvari</name>
    <filename>classSacado_1_1RadVec_1_1ADvari.html</filename>
    <templarg>Double</templarg>
    <member kind="typedef">
      <type>Double</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvari.html</anchorfile>
      <anchor>a2583e0af1d5297d8e9e148f119817540</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvari.html</anchorfile>
      <anchor>aff4a1989cebb157c19e224a7cacdd54b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndepADvar&lt; Double &gt;</type>
      <name>IndepADVar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvari.html</anchorfile>
      <anchor>a11b0ba053479ec984eeaea491dae3bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvari.html</anchorfile>
      <anchor>a862b279f9239d73bac15cc4af33ce935</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvari.html</anchorfile>
      <anchor>a8f255fe9aa51d883698635cac5ad10b7</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Double</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvari.html</anchorfile>
      <anchor>a1fa58006fad0a83829d2a0994492723c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Double</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvari.html</anchorfile>
      <anchor>a9e46810795a603c2e89d057ecd189064</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Double</type>
      <name>Val</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvari.html</anchorfile>
      <anchor>ace94247bc3d0d8ffe9e4390b9455dad9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double *</type>
      <name>aval</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvari.html</anchorfile>
      <anchor>a66b214b06b8b65ba5553d44937c83650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ADvari *</type>
      <name>Next</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvari.html</anchorfile>
      <anchor>a9dba43cdcddb4598c7ab566993746d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ADvari *</type>
      <name>First_ADvari</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvari.html</anchorfile>
      <anchor>a406f0df23e1a480c62e33f10b0fec7e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ADvari **</type>
      <name>Last_ADvari</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvari.html</anchorfile>
      <anchor>a23be31084c4d07c177005b4676882ea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ADcontext&lt; Double &gt;</type>
      <name>adc</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvari.html</anchorfile>
      <anchor>a5bf062d1c0302e545ed8a12c7f10e820</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Linkup</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvari.html</anchorfile>
      <anchor>a860745c7d6b24e402d57e1510dca590b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend ADvari &amp;</type>
      <name>ADfn</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvari.html</anchorfile>
      <anchor>a723c26868c523cbed786aecac706ff9f</anchor>
      <arglist>(Double f, int n, const IndepADVar *x, const Double *g)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Rad2d::ADvari_block</name>
    <filename>structSacado_1_1Rad2d_1_1ADvari__block.html</filename>
    <member kind="enumvalue">
      <name>Gulp</name>
      <anchorfile>structSacado_1_1Rad2d_1_1ADvari__block.html</anchorfile>
      <anchor>af99839592db7beb945dc86e1206bc0c1ad3a5226ddab6e9ef8a00db80c9cb9c78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Gulp</name>
      <anchorfile>structSacado_1_1Rad2d_1_1ADvari__block.html</anchorfile>
      <anchor>af99839592db7beb945dc86e1206bc0c1ad3a5226ddab6e9ef8a00db80c9cb9c78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ADvari_block *</type>
      <name>next</name>
      <anchorfile>structSacado_1_1Rad2d_1_1ADvari__block.html</anchorfile>
      <anchor>aef5f6a7a9526a434808fdef0ca6614c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ADvari_block *</type>
      <name>prev</name>
      <anchorfile>structSacado_1_1Rad2d_1_1ADvari__block.html</anchorfile>
      <anchor>ad8ad5d1ca5e1bd2073823def7559e5b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ADvari **</type>
      <name>limit</name>
      <anchorfile>structSacado_1_1Rad2d_1_1ADvari__block.html</anchorfile>
      <anchor>a84f07fcf2d2aae6d9af7355511f9ee4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ADvari *</type>
      <name>pADvari</name>
      <anchorfile>structSacado_1_1Rad2d_1_1ADvari__block.html</anchorfile>
      <anchor>a008d72882148ee4561c29d0c233cf466</anchor>
      <arglist>[Gulp]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvari_block</name>
    <filename>classSacado_1_1Rad2_1_1ADvari__block.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>Gulp</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari__block.html</anchorfile>
      <anchor>aef2b36575be0934b80a42d1e8edf77a1a62c34066c13f366ee3c9c4e903e8691b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari__block.html</anchorfile>
      <anchor>afa9ea772b16da8eaaf0d165845b7e988</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Gulp</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari__block.html</anchorfile>
      <anchor>aef2b36575be0934b80a42d1e8edf77a1a62c34066c13f366ee3c9c4e903e8691b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ADvari_block *</type>
      <name>next</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari__block.html</anchorfile>
      <anchor>aae934d15a97c8703c63bef970152f515</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ADvari_block *</type>
      <name>prev</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari__block.html</anchorfile>
      <anchor>a260c2c8f67c4a703c75a9f7e93710878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ADVari **</type>
      <name>limit</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari__block.html</anchorfile>
      <anchor>aa27217dcac787a3ba77a59f0b6197736</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ADVari *</type>
      <name>pADvari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvari__block.html</anchorfile>
      <anchor>a1190dc53cd3130d48aca6abd329c367e</anchor>
      <arglist>[Gulp]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ADvari_head</name>
    <filename>structADvari__head.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>var</name>
      <anchorfile>structADvari__head.html</anchorfile>
      <anchor>ae8b01be31c889244086900277b5f67b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct ADvari_head *</type>
      <name>next</name>
      <anchorfile>structADvari__head.html</anchorfile>
      <anchor>ace32c81fd1481a4f8594c6bd1a8601a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>gcgen</name>
      <anchorfile>structADvari__head.html</anchorfile>
      <anchor>a0a3d7d333b052d2a413d9d9154a2b3ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>opno</name>
      <anchorfile>structADvari__head.html</anchorfile>
      <anchor>a9e91883bab26c635f3fd9c009a3262ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ADvarn</name>
    <filename>classSacado_1_1Radnt_1_1ADvarn.html</filename>
    <base>Sacado::Radnt::ADvari</base>
    <member kind="function">
      <type></type>
      <name>ADvarn</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvarn.html</anchorfile>
      <anchor>a870382906a3c6aabe261fc47580d5d5b</anchor>
      <arglist>(double val1, int n1, const ADvar *x, const double *g)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvarn.html</anchorfile>
      <anchor>a5fab97741fea027b97b2ec79c6270dc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>a</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvarn.html</anchorfile>
      <anchor>a92e3497f5e4b72b65d88dc39c7c50094</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Derp *</type>
      <name>Da</name>
      <anchorfile>classSacado_1_1Radnt_1_1ADvarn.html</anchorfile>
      <anchor>a8d1ae2e1427f6afc7a8addffee40af29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ADvarn</name>
    <filename>classSacado_1_1Rad2d_1_1ADvarn.html</filename>
    <base>Sacado::Rad2d::ADvari</base>
    <member kind="function">
      <type></type>
      <name>ADvarn</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvarn.html</anchorfile>
      <anchor>a4664749518150142b23e92e80b47a12d</anchor>
      <arglist>(double val1, int n1, const ADvar *x, const double *g, const double *h)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvarn.html</anchorfile>
      <anchor>a7850a4eb7f7dff413533891a7acc7aae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>G</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvarn.html</anchorfile>
      <anchor>a814e5e80cd9097d4df9fb411dcf0ccf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>H</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvarn.html</anchorfile>
      <anchor>a12f8f01c75d972cc8852849e393f622b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Derp *</type>
      <name>D</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ADvarn.html</anchorfile>
      <anchor>ac75ce0be62499d697209bd42d154a159</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ADvarn</name>
    <filename>classSacado_1_1Rad_1_1ADvarn.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad::ADvari</base>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvarn.html</anchorfile>
      <anchor>ae435834daebaeb54aadb436d0770b034</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVari::IndepADVar</type>
      <name>IndepADVar</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvarn.html</anchorfile>
      <anchor>a20d3b5c5982114a5a91aef8af83c98b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derp&lt; Double &gt;</type>
      <name>DErp</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvarn.html</anchorfile>
      <anchor>a8587f57191d96eff4c98191834cbf396</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvarn</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvarn.html</anchorfile>
      <anchor>a53cc877f863e39f08cc440d7c31889bb</anchor>
      <arglist>(Double val1, int n1, const IndepADVar *x, const Double *g)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvarn.html</anchorfile>
      <anchor>af17ab3c3aa4559c2fb1584a9bd8585a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double *</type>
      <name>a</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvarn.html</anchorfile>
      <anchor>a5209b620c80871a8db4645294a973f6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DErp *</type>
      <name>Da</name>
      <anchorfile>classSacado_1_1Rad_1_1ADvarn.html</anchorfile>
      <anchor>a0c04e595d8438b2c7f3602468e9cf907</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ADvarn</name>
    <filename>classSacado_1_1Rad2_1_1ADvarn.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad2::ADvari</base>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvarn.html</anchorfile>
      <anchor>a63b88a4c2ba8e2e3880b52d22417c67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADvar&lt; Double &gt;</type>
      <name>ADVar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvarn.html</anchorfile>
      <anchor>a8952df0c4e412a108ec076ce23d138df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVari::IndepADVar</type>
      <name>IndepADVar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvarn.html</anchorfile>
      <anchor>a1be7638b65e89256b7fa6a6d97e92b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derp&lt; Double &gt;</type>
      <name>DErp</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvarn.html</anchorfile>
      <anchor>a3df7def3b7c21a3cc4d1b78887759407</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvarn</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvarn.html</anchorfile>
      <anchor>ab31d9bd84623fc84f25bbda08d7ebe2b</anchor>
      <arglist>(Double val1, int n1, const IndepADVar *x, const Double *g, const Double *h)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvarn.html</anchorfile>
      <anchor>a2c94fd55df70b20bdb0682acce5ea779</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double *</type>
      <name>G</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvarn.html</anchorfile>
      <anchor>a3acb96d5ac19b84874a0dc7c3f90b757</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double *</type>
      <name>H</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvarn.html</anchorfile>
      <anchor>a341a5d6b5701b2e3ece8bca95150cfe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DErp *</type>
      <name>D</name>
      <anchorfile>classSacado_1_1Rad2_1_1ADvarn.html</anchorfile>
      <anchor>a024451d95d2aa9121684942ddd0359d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ADvarn</name>
    <filename>classSacado_1_1RadVec_1_1ADvarn.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::RadVec::ADvari</base>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvarn.html</anchorfile>
      <anchor>aac304b9b3222d9a7724212482630db86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVari::IndepADVar</type>
      <name>IndepADVar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvarn.html</anchorfile>
      <anchor>a66a06a0c4dfa76fcac186556a6f97657</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derp&lt; Double &gt;</type>
      <name>DErp</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvarn.html</anchorfile>
      <anchor>abc404d18e38dcd194d30e7619b72ed28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ADvarn</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvarn.html</anchorfile>
      <anchor>afb31b10ecdce2ddea7d3c061dadfe265</anchor>
      <arglist>(Double val1, int n1, const IndepADVar *x, const Double *g)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvarn.html</anchorfile>
      <anchor>ac628ecb11bcc99fec7689bb232e19e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Double *</type>
      <name>a</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvarn.html</anchorfile>
      <anchor>a078eed670c0d298247610e9d10eacb08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DErp *</type>
      <name>Da</name>
      <anchorfile>classSacado_1_1RadVec_1_1ADvarn.html</anchorfile>
      <anchor>a1c028be5848b0ac3185645d9dd0f868b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Impl::AnalyzeSacadoShape</name>
    <filename>structKokkos_1_1Impl_1_1AnalyzeSacadoShape.html</filename>
    <templarg>T</templarg>
    <templarg>Layout</templarg>
    <member kind="typedef">
      <type>void</type>
      <name>specialize</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape.html</anchorfile>
      <anchor>aa895b5367b83d8d34eab93c07f9ef40c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Shape&lt; sizeof(T), 0 &gt;</type>
      <name>shape</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape.html</anchorfile>
      <anchor>a602470bca340183fe78854a78643764c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape.html</anchorfile>
      <anchor>a0c3ff448897ee10c19d3ddcccf32dbb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape.html</anchorfile>
      <anchor>a6675b808517f8e8b90cfa91b5c850f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape.html</anchorfile>
      <anchor>a5036850802efbb22406995aa4932f77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape.html</anchorfile>
      <anchor>a70f8e6a513fedeebcf29d92bd4954f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T</type>
      <name>const_array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape.html</anchorfile>
      <anchor>a3bbe7f73f5c8ce46df8c13e926d35c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T</type>
      <name>const_flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape.html</anchorfile>
      <anchor>a068d23dabbfa90686782c1132ed29744</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T</type>
      <name>const_value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape.html</anchorfile>
      <anchor>a366b3ea8e565723e757ebf6c0b87d004</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T</type>
      <name>const_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape.html</anchorfile>
      <anchor>a4926e72b6b774cb1d7e5dba6c6188e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>non_const_array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape.html</anchorfile>
      <anchor>a8f3c6d35e7aa991530ecc2bc37ee1efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>non_const_flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape.html</anchorfile>
      <anchor>af80e262b197e7ef8a23e28532b3e5ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>non_const_value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape.html</anchorfile>
      <anchor>a7bc55a8fd1f401a11836b60d5ff65225</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>non_const_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape.html</anchorfile>
      <anchor>abdae593f65ab3e4e9936fcec7c6a7fdc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Impl::AnalyzeSacadoShape&lt; const T, Layout &gt;</name>
    <filename>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T_00_01Layout_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>nested::specialize</type>
      <name>specialize</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T_00_01Layout_01_4.html</anchorfile>
      <anchor>af8152ac9cb1008ef5063cad512cf084b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::shape</type>
      <name>shape</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T_00_01Layout_01_4.html</anchorfile>
      <anchor>ad1449120a61b9c2e300bc61654ecd365</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_array_intrinsic_type</type>
      <name>array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T_00_01Layout_01_4.html</anchorfile>
      <anchor>aaf7ddf367a3d29251520eea84ba11084</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_flat_array_type</type>
      <name>flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T_00_01Layout_01_4.html</anchorfile>
      <anchor>a90ad4f3f2e097bdfe13c2ba7640d35d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_value_type</type>
      <name>value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T_00_01Layout_01_4.html</anchorfile>
      <anchor>a006b16e585c3a1503221dd0d22def1f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_type</type>
      <name>type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T_00_01Layout_01_4.html</anchorfile>
      <anchor>adc038b58e83698bf1080d3dea819e4d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_array_intrinsic_type</type>
      <name>const_array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T_00_01Layout_01_4.html</anchorfile>
      <anchor>a938e9095c815f5ea0bfd96c933638292</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_flat_array_type</type>
      <name>const_flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T_00_01Layout_01_4.html</anchorfile>
      <anchor>a8517e558e3edeb31e04988a3c277b90b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_value_type</type>
      <name>const_value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T_00_01Layout_01_4.html</anchorfile>
      <anchor>aa09ff69f64d355e214b274d40bb811c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_type</type>
      <name>const_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T_00_01Layout_01_4.html</anchorfile>
      <anchor>af53cb5d94f8ec6d8779f4a5d2e1425b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_array_intrinsic_type</type>
      <name>non_const_array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T_00_01Layout_01_4.html</anchorfile>
      <anchor>aef4567cf2a81341f32d188a5ab5f297f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_flat_array_type</type>
      <name>non_const_flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T_00_01Layout_01_4.html</anchorfile>
      <anchor>a19c9d25c94e50443a8c68ecc69603dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_value_type</type>
      <name>non_const_value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T_00_01Layout_01_4.html</anchorfile>
      <anchor>a29d376d34c7b96fbeeeda78bce839d60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_type</type>
      <name>non_const_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T_00_01Layout_01_4.html</anchorfile>
      <anchor>a242c6ed17f26d80881e1a85ee6a809cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>AnalyzeSacadoShape&lt; T, Layout &gt;</type>
      <name>nested</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T_00_01Layout_01_4.html</anchorfile>
      <anchor>acbd296ce52e1da2a54be87b582d46db8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Impl::AnalyzeSacadoShape&lt; const T[], Layout &gt;</name>
    <filename>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[]_00_01Layout_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>nested::specialize</type>
      <name>specialize</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>ae1b668b9840f8bb405a45db494b79c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ShapeInsert&lt; typename nested::shape, 0 &gt;::type</type>
      <name>shape</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a41dfa49c87ce434c1cd9ccc4f21c4e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::array_intrinsic_type</type>
      <name>array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a63c705f84bf42b673c9e0c34cc7f73c8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::flat_array_type</type>
      <name>flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a72963b73e7b54aaa5ece73c4912e8d08</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::value_type</type>
      <name>value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a18240a3acac9da9ffdff8c72a6f354ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::type</type>
      <name>type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>ae85f97566459a23c6206487b2d25b69c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_array_intrinsic_type</type>
      <name>const_array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>ad47f9101191b336ed3eff04615d55edd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_flat_array_type</type>
      <name>const_flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>ad84bafa0b49fdaf372356b4228478cf1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_value_type</type>
      <name>const_value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a1fb828ab92ab3ce063e6c51d572ea455</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_type</type>
      <name>const_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a5496c637aa66b15225fb1b0008a72c2f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_array_intrinsic_type</type>
      <name>non_const_array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>ae86e31c23e7bdf42de53da12716e6a5f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_flat_array_type</type>
      <name>non_const_flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a6681a443dbc3903d5c68eedf35d174b4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_value_type</type>
      <name>non_const_value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a834ce84ee27ff5186f3029a6477a909a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_type</type>
      <name>non_const_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>af39d71fa8fdea448026a97717d86e964</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>AnalyzeSacadoShape&lt; const T, Layout &gt;</type>
      <name>nested</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a5ed6e9ef8ab289cd94dc73e1f73899d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Impl::AnalyzeSacadoShape&lt; const T[N], Layout &gt;</name>
    <filename>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[N]_00_01Layout_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>nested::specialize</type>
      <name>specialize</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>ab4493312057b9858df3c0b10a00cc6d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ShapeInsert&lt; typename nested::shape, N &gt;::type</type>
      <name>shape</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>a265462351aba5ad66615631f4a1f89b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::array_intrinsic_type</type>
      <name>array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>a6b8330983a927dcc3201dc05d98f8e9e</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::flat_array_type</type>
      <name>flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>a0e4b74c55422a9646c8a11213088c8f2</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::value_type</type>
      <name>value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>aa64c9fbaa6f14458786ef565bf8ed8f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::type</type>
      <name>type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>a458fbe0cc39cf347ba484c57e207255a</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_array_intrinsic_type</type>
      <name>const_array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>ad0261635af2233ff89b150d5efe092f3</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_flat_array_type</type>
      <name>const_flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>a843a10ab64f7394cb02d44ab577da4fb</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_value_type</type>
      <name>const_value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>a155947b2c761987d2dd9e7df1d3df9b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_type</type>
      <name>const_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>a095047ee5a1628763d84466c382065af</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_array_intrinsic_type</type>
      <name>non_const_array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>aaa6a82e0bf5b79ddfe0327535f8ee271</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_flat_array_type</type>
      <name>non_const_flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>a27285d763483b0b6dc479dd8fe860c3e</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_value_type</type>
      <name>non_const_value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>a163390cb342ea956d03275359b05cc52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_type</type>
      <name>non_const_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>ae532a5cbb087150b50cd9b8e9eccbd0d</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>AnalyzeSacadoShape&lt; const T, Layout &gt;</type>
      <name>nested</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01const_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>a9f5754ab82c8753342f45086b56f70a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Impl::AnalyzeSacadoShape&lt; T *, Layout &gt;</name>
    <filename>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T_01_5_00_01Layout_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>nested::specialize</type>
      <name>specialize</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T_01_5_00_01Layout_01_4.html</anchorfile>
      <anchor>a3854901c98cb373665cb708325f7d7cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ShapeInsert&lt; typename nested::shape, 0 &gt;::type</type>
      <name>shape</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T_01_5_00_01Layout_01_4.html</anchorfile>
      <anchor>a5b489784410c8dd2c7bc2ea612e473ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::array_intrinsic_type *</type>
      <name>array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T_01_5_00_01Layout_01_4.html</anchorfile>
      <anchor>aa37935986807130bc7dd8237305b22c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::flat_array_type *</type>
      <name>flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T_01_5_00_01Layout_01_4.html</anchorfile>
      <anchor>a039d1e013ba5e57312179fb3ed309ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::value_type</type>
      <name>value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T_01_5_00_01Layout_01_4.html</anchorfile>
      <anchor>abd575b2576e15a1732ede54145d1b9a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::type *</type>
      <name>type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T_01_5_00_01Layout_01_4.html</anchorfile>
      <anchor>aef9479fe8ad553330cf04f62724005d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_array_intrinsic_type *</type>
      <name>const_array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T_01_5_00_01Layout_01_4.html</anchorfile>
      <anchor>aaf38aca33a04ea5a027a210b4d6adf2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_flat_array_type *</type>
      <name>const_flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T_01_5_00_01Layout_01_4.html</anchorfile>
      <anchor>aed7ed5b5adb68fc5206bd4e6deca7d24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_value_type</type>
      <name>const_value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T_01_5_00_01Layout_01_4.html</anchorfile>
      <anchor>a6a33186a4e296cdd11384eabe55d8ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_type *</type>
      <name>const_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T_01_5_00_01Layout_01_4.html</anchorfile>
      <anchor>a61b216f8cbeb0342bce434c200819cc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_array_intrinsic_type *</type>
      <name>non_const_array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T_01_5_00_01Layout_01_4.html</anchorfile>
      <anchor>ad45f26380ac9e4e7d5664d2aae4e1248</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_flat_array_type *</type>
      <name>non_const_flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T_01_5_00_01Layout_01_4.html</anchorfile>
      <anchor>aab58ff748885c44a05b50c1d1a5d0403</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_value_type</type>
      <name>non_const_value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T_01_5_00_01Layout_01_4.html</anchorfile>
      <anchor>a9cd12e5f3a8e3a096d1a885b3bd58246</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_type *</type>
      <name>non_const_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T_01_5_00_01Layout_01_4.html</anchorfile>
      <anchor>a8bea8a2d7e258493e7eb766568fee2e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>AnalyzeSacadoShape&lt; T, Layout &gt;</type>
      <name>nested</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T_01_5_00_01Layout_01_4.html</anchorfile>
      <anchor>a6e9cfb98e51c8032734b14b2b21cca58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Impl::AnalyzeSacadoShape&lt; T[], Layout &gt;</name>
    <filename>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[]_00_01Layout_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>nested::specialize</type>
      <name>specialize</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>aaaa793afb437d776d11cf91540fd474f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ShapeInsert&lt; typename nested::shape, 0 &gt;::type</type>
      <name>shape</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a37f055b75ca19c34ae020c516be9262c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::array_intrinsic_type</type>
      <name>array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a27975811529622990c26d5874d2af962</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::flat_array_type</type>
      <name>flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a472a3a98ea814fc3d546d546997150fb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::value_type</type>
      <name>value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>ad7d6b688d126283a5fa66cbbe4bcacac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::type</type>
      <name>type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>aca0251fb3292d2c801416e11f821efc3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_array_intrinsic_type</type>
      <name>const_array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a36f2322f92205dd4fdee20c09d848d8d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_flat_array_type</type>
      <name>const_flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a2bf85a1c7834620a0f30b75fc5dcf1c0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_value_type</type>
      <name>const_value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a64648e88f0fe16c6455ade2deb4226cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_type</type>
      <name>const_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a145222e23b7418c67851853e5a1a329c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_array_intrinsic_type</type>
      <name>non_const_array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a9eb74503ab449888524d204001d3b0dc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_flat_array_type</type>
      <name>non_const_flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a7267d2f34ea331c1b12723a3b9be1dd3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_value_type</type>
      <name>non_const_value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a0350649aa35ea881c419941fe78cc9ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_type</type>
      <name>non_const_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>ae95f5e9cc1afe9e58fce42572ebadbc1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>AnalyzeSacadoShape&lt; T, Layout &gt;</type>
      <name>nested</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[]_00_01Layout_01_4.html</anchorfile>
      <anchor>a64fc1d9da2ccc0322449c658ee2a2366</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Impl::AnalyzeSacadoShape&lt; T[N], Layout &gt;</name>
    <filename>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[N]_00_01Layout_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>nested::specialize</type>
      <name>specialize</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>a3458ef9dce050bf6b3a146711888ac53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ShapeInsert&lt; typename nested::shape, N &gt;::type</type>
      <name>shape</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>a16bb72c7309a15151342a3d5a077e4e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::array_intrinsic_type</type>
      <name>array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>aeb6834b19e4e9d78b0cbba069b0213fc</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::flat_array_type</type>
      <name>flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>a252e8bb27bbbdef44997b0b070272e01</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::value_type</type>
      <name>value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>ac732ed6acb1be0bacbbff2af0da261d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::type</type>
      <name>type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>a5751fc86c92db2c85f45b0a0d7ec8150</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_array_intrinsic_type</type>
      <name>const_array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>a0955aef84109753b2069ae3837a8d451</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_flat_array_type</type>
      <name>const_flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>a0e6c7e8edc83f5e3fa1ea60b7181721b</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_value_type</type>
      <name>const_value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>a831416e30782c6da12caa4ae0630ccf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::const_type</type>
      <name>const_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>a38af978bc771a20f6b755d6945cda6ef</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_array_intrinsic_type</type>
      <name>non_const_array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>adb571af400dc49170dc05e1b1a6d0e89</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_flat_array_type</type>
      <name>non_const_flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>afcaf84cd4b9f9bd44306bb23c8d9fe72</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_value_type</type>
      <name>non_const_value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>a6727b8145d84dd1bbad572d65c408df9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>nested::non_const_type</type>
      <name>non_const_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>acc000ccdc4f231fb4baf89f32c081463</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>AnalyzeSacadoShape&lt; T, Layout &gt;</type>
      <name>nested</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01T[N]_00_01Layout_01_4.html</anchorfile>
      <anchor>ab147314f51e788d317c90e9ec941e176</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Impl::AnalyzeSacadoShape&lt; void, Layout &gt;</name>
    <filename>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01void_00_01Layout_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>void</type>
      <name>specialize</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01void_00_01Layout_01_4.html</anchorfile>
      <anchor>a831ae2e5bbbda57a67cc82f9f8d43562</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Shape&lt; 0, 0 &gt;</type>
      <name>shape</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01void_00_01Layout_01_4.html</anchorfile>
      <anchor>ae39dbefb20bd2af95974896e9d5bda87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01void_00_01Layout_01_4.html</anchorfile>
      <anchor>a7a7a44a92b15683852d0bf08ef8eeb68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01void_00_01Layout_01_4.html</anchorfile>
      <anchor>a3e3638281e07a119b6cad80c699dba92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01void_00_01Layout_01_4.html</anchorfile>
      <anchor>ac377d6c25d6ac00112717e4cf8b0b138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01void_00_01Layout_01_4.html</anchorfile>
      <anchor>a258af3ef56c9accac9afc1610e3656da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const void</type>
      <name>const_array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01void_00_01Layout_01_4.html</anchorfile>
      <anchor>a78be68c70614257cb6b62eda10438e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const void</type>
      <name>const_flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01void_00_01Layout_01_4.html</anchorfile>
      <anchor>a52c03a0ba0369e3367a858bf65d66ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const void</type>
      <name>const_value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01void_00_01Layout_01_4.html</anchorfile>
      <anchor>acd79164da597917d1d6325584e872d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const void</type>
      <name>const_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01void_00_01Layout_01_4.html</anchorfile>
      <anchor>accf6c4b132a4b553c41a888001c4118e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>non_const_array_intrinsic_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01void_00_01Layout_01_4.html</anchorfile>
      <anchor>a47d96e1d0f92f16fc5c49bc395970b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>non_const_flat_array_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01void_00_01Layout_01_4.html</anchorfile>
      <anchor>a9d09260ba037e219af4b9b2f43ca0907</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>non_const_value_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01void_00_01Layout_01_4.html</anchorfile>
      <anchor>ad29a781150bc1187c7a7908669cb3b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>non_const_type</name>
      <anchorfile>structKokkos_1_1Impl_1_1AnalyzeSacadoShape_3_01void_00_01Layout_01_4.html</anchorfile>
      <anchor>a5d30e4b5eaf5823823f86905fba8a7ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::DVFad::apply</name>
    <filename>structSacado_1_1Fad_1_1DVFad_1_1apply.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>DVFad&lt; T &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Fad_1_1DVFad_1_1apply.html</anchorfile>
      <anchor>a59029e829e77edabc697d14389ea2676</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind4::apply</name>
    <filename>structSacado_1_1mpl_1_1bind4_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap4&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value, T3, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value+is_same&lt; T4, placeholders::_ &gt;::value, T4, U1, U2, U3, U4, U5 &gt;::type &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind5::apply</name>
    <filename>structSacado_1_1mpl_1_1bind5_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap5&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value, T3, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value+is_same&lt; T4, placeholders::_ &gt;::value, T4, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value+is_same&lt; T4, placeholders::_ &gt;::value+is_same&lt; T5, placeholders::_ &gt;::value, T5, U1, U2, U3, U4, U5 &gt;::type &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind3::apply</name>
    <filename>structSacado_1_1mpl_1_1bind3_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap3&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value, T3, U1, U2, U3, U4, U5 &gt;::type &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::SFad::apply</name>
    <filename>structSacado_1_1FAD__NS_1_1SFad_1_1apply.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>SFad&lt; T, Num &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1FAD__NS_1_1SFad_1_1apply.html</anchorfile>
      <anchor>ac964214509b5c6467e8d9d8e9e2c748b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::SimpleFad::apply</name>
    <filename>structSacado_1_1Fad_1_1SimpleFad_1_1apply.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>SimpleFad&lt; T &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Fad_1_1SimpleFad_1_1apply.html</anchorfile>
      <anchor>ac37803094c270aac144b5e3fefdad3de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::SLFad::apply</name>
    <filename>structSacado_1_1FAD__NS_1_1SLFad_1_1apply.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>SLFad&lt; T, Num &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1FAD__NS_1_1SLFad_1_1apply.html</anchorfile>
      <anchor>ad8a8794f7ceeb3aa86732ba4631b6f85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::ViewFad::apply</name>
    <filename>structSacado_1_1FAD__NS_1_1ViewFad_1_1apply.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>BaseExprType&lt; T &gt;::type</type>
      <name>T_for_base</name>
      <anchorfile>structSacado_1_1FAD__NS_1_1ViewFad_1_1apply.html</anchorfile>
      <anchor>a88b021dd3a30da92d32db0e3c6106c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mpl::apply&lt; base_fad_type, T_for_base &gt;::type</type>
      <name>new_base_fad_type</name>
      <anchorfile>structSacado_1_1FAD__NS_1_1ViewFad_1_1apply.html</anchorfile>
      <anchor>a4650e3bec5669f4a11271809bffb04e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ViewFad&lt; T, length, stride, new_base_fad_type &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1FAD__NS_1_1ViewFad_1_1apply.html</anchorfile>
      <anchor>a30be44ef1ac0e18aa2a01d7008b9d5b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::LFad::LogicalSparse::apply</name>
    <filename>structSacado_1_1LFad_1_1LogicalSparse_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LogicalSparse&lt; T, U &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1LFad_1_1LogicalSparse_1_1apply.html</anchorfile>
      <anchor>ae2a0babfac093588b82e340d7c80d9bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::FlopCounterPack::ScalarFlopCounter::apply</name>
    <filename>structSacado_1_1FlopCounterPack_1_1ScalarFlopCounter_1_1apply.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ScalarFlopCounter&lt; U &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1FlopCounterPack_1_1ScalarFlopCounter_1_1apply.html</anchorfile>
      <anchor>aea39fd2064021207f57ffcc600bf8729</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::CacheTaylor::apply</name>
    <filename>structSacado_1_1Tay_1_1CacheTaylor_1_1apply.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>CacheTaylor&lt; U &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Tay_1_1CacheTaylor_1_1apply.html</anchorfile>
      <anchor>a4e1568af6001a61e68cba1159725b254</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 1 &gt;::apply</name>
    <filename>structSacado_1_1mpl_1_1arg_3_011_01_4_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>A1</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1arg_3_011_01_4_1_1apply.html</anchorfile>
      <anchor>a01eed431763c403c23491f0e8b78c653</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 2 &gt;::apply</name>
    <filename>structSacado_1_1mpl_1_1arg_3_012_01_4_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>A2</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1arg_3_012_01_4_1_1apply.html</anchorfile>
      <anchor>af1c60ffb16231bd20a28d65a93914db0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 3 &gt;::apply</name>
    <filename>structSacado_1_1mpl_1_1arg_3_013_01_4_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>A3</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1arg_3_013_01_4_1_1apply.html</anchorfile>
      <anchor>a227bb8f805bfa5c09eda3941edec9ed9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 4 &gt;::apply</name>
    <filename>structSacado_1_1mpl_1_1arg_3_014_01_4_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>A4</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1arg_3_014_01_4_1_1apply.html</anchorfile>
      <anchor>a8625e1781418c138228b223985bc0e56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 5 &gt;::apply</name>
    <filename>structSacado_1_1mpl_1_1arg_3_015_01_4_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>A5</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1arg_3_015_01_4_1_1apply.html</anchorfile>
      <anchor>a62bae9fdb99ad6fdd5755c4552100c51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote0::apply</name>
    <filename>structSacado_1_1mpl_1_1quote0_1_1apply.html</filename>
    <base>type_wrap&lt; F &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::Taylor::apply</name>
    <filename>structSacado_1_1Tay_1_1Taylor_1_1apply.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Taylor&lt; U &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1apply.html</anchorfile>
      <anchor>a0eb67a5825486ac4853273789fb155dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote1::apply</name>
    <filename>structSacado_1_1mpl_1_1quote1_1_1apply.html</filename>
    <templarg></templarg>
    <base>type_wrap&lt; F&lt; T1 &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote2::apply</name>
    <filename>structSacado_1_1mpl_1_1quote2_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>type_wrap&lt; F&lt; T1, T2 &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote3::apply</name>
    <filename>structSacado_1_1mpl_1_1quote3_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>type_wrap&lt; F&lt; T1, T2, T3 &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::Rad::ADvar::apply</name>
    <filename>structSacado_1_1Rad_1_1ADvar_1_1apply.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ADvar&lt; U &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Rad_1_1ADvar_1_1apply.html</anchorfile>
      <anchor>ad9a95c3bf38cb6662f87e1fa84e21397</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote4::apply</name>
    <filename>structSacado_1_1mpl_1_1quote4_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>type_wrap&lt; F&lt; T1, T2, T3, T4 &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote5::apply</name>
    <filename>structSacado_1_1mpl_1_1quote5_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>type_wrap&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::Rad2::ADvar::apply</name>
    <filename>structSacado_1_1Rad2_1_1ADvar_1_1apply.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ADvar&lt; U &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Rad2_1_1ADvar_1_1apply.html</anchorfile>
      <anchor>a055f3246aeaa36af8c15eec8cd99d3b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::size_impl&lt; range_c_tag &gt;::apply</name>
    <filename>structSacado_1_1mpl_1_1size__impl_3_01range__c__tag_01_4_1_1apply.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1size__impl_3_01range__c__tag_01_4_1_1apply.html</anchorfile>
      <anchor>abcff459e46819e37d5f1f68b757c7304</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::begin_impl&lt; range_c_tag &gt;::apply</name>
    <filename>structSacado_1_1mpl_1_1begin__impl_3_01range__c__tag_01_4_1_1apply.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>range_c_iterator&lt; Range, 0 &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1begin__impl_3_01range__c__tag_01_4_1_1apply.html</anchorfile>
      <anchor>a3afb21904fc6fe918adaa632baad5d05</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::RadVec::ADvar::apply</name>
    <filename>structSacado_1_1RadVec_1_1ADvar_1_1apply.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ADvar&lt; U &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1RadVec_1_1ADvar_1_1apply.html</anchorfile>
      <anchor>a4a87b201cf8106f2697392cdbcf62798</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::end_impl&lt; range_c_tag &gt;::apply</name>
    <filename>structSacado_1_1mpl_1_1end__impl_3_01range__c__tag_01_4_1_1apply.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>range_c_iterator&lt; Range, Range::sz &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1end__impl_3_01range__c__tag_01_4_1_1apply.html</anchorfile>
      <anchor>a25d2225f8f3af90665be033ee1ea27ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::at_impl&lt; range_c_tag, Pos &gt;::apply</name>
    <filename>structSacado_1_1mpl_1_1at__impl_3_01range__c__tag_00_01Pos_01_4_1_1apply.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>integral_c&lt; typename Range::integral_type, Range::start_value+Range::step_value *Pos &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1at__impl_3_01range__c__tag_00_01Pos_01_4_1_1apply.html</anchorfile>
      <anchor>ae884cd587408005fd2ecb88e1a77d182</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind1::apply</name>
    <filename>structSacado_1_1mpl_1_1bind1_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap1&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::DFad::apply</name>
    <filename>structSacado_1_1FAD__NS_1_1DFad_1_1apply.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>DFad&lt; T &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1FAD__NS_1_1DFad_1_1apply.html</anchorfile>
      <anchor>a130461c43529bc906b6206a602a8b9b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::DefaultEvalTypeTraits::apply</name>
    <filename>structSacado_1_1DefaultEvalTypeTraits_1_1apply.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>EvalType</type>
      <name>type</name>
      <anchorfile>structSacado_1_1DefaultEvalTypeTraits_1_1apply.html</anchorfile>
      <anchor>a1bc92e806992c5c8be403bc583377bd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind2::apply</name>
    <filename>structSacado_1_1mpl_1_1bind2_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap2&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::DMFad::apply</name>
    <filename>structSacado_1_1Fad_1_1DMFad_1_1apply.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>DMFad&lt; T &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Fad_1_1DMFad_1_1apply.html</anchorfile>
      <anchor>ae038f05db62aa504e12a9833271f01a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply</name>
    <filename>structSacado_1_1mpl_1_1apply.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap&lt; lambda&lt; F &gt;::type, A1, A2, A3, A4, A5 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply0</name>
    <filename>structSacado_1_1mpl_1_1apply0.html</filename>
    <templarg></templarg>
    <base>apply_wrap0&lt; lambda&lt; F &gt;::type &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply1</name>
    <filename>structSacado_1_1mpl_1_1apply1.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap1&lt; lambda&lt; F &gt;::type, A1 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply2</name>
    <filename>structSacado_1_1mpl_1_1apply2.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap2&lt; lambda&lt; F &gt;::type, A1, A2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply3</name>
    <filename>structSacado_1_1mpl_1_1apply3.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap3&lt; lambda&lt; F &gt;::type, A1, A2, A3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply4</name>
    <filename>structSacado_1_1mpl_1_1apply4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap4&lt; lambda&lt; F &gt;::type, A1, A2, A3, A4 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply5</name>
    <filename>structSacado_1_1mpl_1_1apply5.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap5&lt; lambda&lt; F &gt;::type, A1, A2, A3, A4, A5 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap.html</filename>
    <templarg>F</templarg>
    <templarg>A1</templarg>
    <templarg>A2</templarg>
    <templarg>A3</templarg>
    <templarg>A4</templarg>
    <templarg>A5</templarg>
    <base>Sacado::mpl::apply_wrap5</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap0</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap0.html</filename>
    <templarg>F</templarg>
    <member kind="typedef">
      <type>F::apply::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1apply__wrap0.html</anchorfile>
      <anchor>a0bbe4b2547cc6b02fb26f80a83d7bf64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>apply_wrap0&lt; lambda&lt; F &gt;::type &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap0.html</filename>
    <member kind="typedef">
      <type>lambda&lt; F &gt;::type::apply::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1apply__wrap0.html</anchorfile>
      <anchor>a0bbe4b2547cc6b02fb26f80a83d7bf64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap1</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap1.html</filename>
    <templarg>F</templarg>
    <templarg>A1</templarg>
    <member kind="typedef">
      <type>F::template apply&lt; A1 &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1apply__wrap1.html</anchorfile>
      <anchor>a3a82eecb3a2d5e364c4f8cc99990722d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>apply_wrap1&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap1.html</filename>
    <member kind="typedef">
      <type>F::template apply&lt; hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1apply__wrap1.html</anchorfile>
      <anchor>a3a82eecb3a2d5e364c4f8cc99990722d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>apply_wrap1&lt; lambda&lt; F &gt;::type, A1 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap1.html</filename>
    <member kind="typedef">
      <type>lambda&lt; F &gt;::type::template apply&lt; A1 &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1apply__wrap1.html</anchorfile>
      <anchor>a3a82eecb3a2d5e364c4f8cc99990722d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap2</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap2.html</filename>
    <templarg>F</templarg>
    <templarg>A1</templarg>
    <templarg>A2</templarg>
    <member kind="typedef">
      <type>F::template apply&lt; A1, A2 &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1apply__wrap2.html</anchorfile>
      <anchor>ad5d1fbe998c78ada2f261ab3edc056d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>apply_wrap2&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap2.html</filename>
    <member kind="typedef">
      <type>F::template apply&lt; hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1apply__wrap2.html</anchorfile>
      <anchor>ad5d1fbe998c78ada2f261ab3edc056d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>apply_wrap2&lt; lambda&lt; F &gt;::type, A1, A2 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap2.html</filename>
    <member kind="typedef">
      <type>lambda&lt; F &gt;::type::template apply&lt; A1, A2 &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1apply__wrap2.html</anchorfile>
      <anchor>ad5d1fbe998c78ada2f261ab3edc056d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap3</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap3.html</filename>
    <templarg>F</templarg>
    <templarg>A1</templarg>
    <templarg>A2</templarg>
    <templarg>A3</templarg>
    <member kind="typedef">
      <type>F::template apply&lt; A1, A2, A3 &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1apply__wrap3.html</anchorfile>
      <anchor>ab69934403f91a6d63372326436ffb5cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>apply_wrap3&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value, T3, U1, U2, U3, U4, U5 &gt;::type &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap3.html</filename>
    <member kind="typedef">
      <type>F::template apply&lt; hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value, T3, U1, U2, U3, U4, U5 &gt;::type &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1apply__wrap3.html</anchorfile>
      <anchor>ab69934403f91a6d63372326436ffb5cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>apply_wrap3&lt; lambda&lt; F &gt;::type, A1, A2, A3 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap3.html</filename>
    <member kind="typedef">
      <type>lambda&lt; F &gt;::type::template apply&lt; A1, A2, A3 &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1apply__wrap3.html</anchorfile>
      <anchor>ab69934403f91a6d63372326436ffb5cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap4</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap4.html</filename>
    <templarg>F</templarg>
    <templarg>A1</templarg>
    <templarg>A2</templarg>
    <templarg>A3</templarg>
    <templarg>A4</templarg>
    <member kind="typedef">
      <type>F::template apply&lt; A1, A2, A3, A4 &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1apply__wrap4.html</anchorfile>
      <anchor>a4e80343be2870108f7fad93b2becda7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>apply_wrap4&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value, T3, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value+is_same&lt; T4, placeholders::_ &gt;::value, T4, U1, U2, U3, U4, U5 &gt;::type &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap4.html</filename>
    <member kind="typedef">
      <type>F::template apply&lt; hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value, T3, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value+is_same&lt; T4, placeholders::_ &gt;::value, T4, U1, U2, U3, U4, U5 &gt;::type &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1apply__wrap4.html</anchorfile>
      <anchor>a4e80343be2870108f7fad93b2becda7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>apply_wrap4&lt; lambda&lt; F &gt;::type, A1, A2, A3, A4 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap4.html</filename>
    <member kind="typedef">
      <type>lambda&lt; F &gt;::type::template apply&lt; A1, A2, A3, A4 &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1apply__wrap4.html</anchorfile>
      <anchor>a4e80343be2870108f7fad93b2becda7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap5</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap5.html</filename>
    <templarg>F</templarg>
    <templarg>A1</templarg>
    <templarg>A2</templarg>
    <templarg>A3</templarg>
    <templarg>A4</templarg>
    <templarg>A5</templarg>
    <member kind="typedef">
      <type>F::template apply&lt; A1, A2, A3, A4, A5 &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1apply__wrap5.html</anchorfile>
      <anchor>a386259cb4facd021605d512be0660737</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>apply_wrap5&lt; arg&lt; k &gt;, T1, T2, T3, T4, T5 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap5.html</filename>
    <member kind="typedef">
      <type>arg&lt; k &gt;::template apply&lt; T1, T2, T3, T4, T5 &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1apply__wrap5.html</anchorfile>
      <anchor>a386259cb4facd021605d512be0660737</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>apply_wrap5&lt; arg&lt; N &gt;, T1, T2, T3, T4, T5 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap5.html</filename>
    <member kind="typedef">
      <type>arg&lt; N &gt;::template apply&lt; T1, T2, T3, T4, T5 &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1apply__wrap5.html</anchorfile>
      <anchor>a386259cb4facd021605d512be0660737</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>apply_wrap5&lt; F, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value, T3, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value+is_same&lt; T4, placeholders::_ &gt;::value, T4, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value+is_same&lt; T4, placeholders::_ &gt;::value+is_same&lt; T5, placeholders::_ &gt;::value, T5, U1, U2, U3, U4, U5 &gt;::type &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap5.html</filename>
    <member kind="typedef">
      <type>F::template apply&lt; hk&lt; is_same&lt; T1, placeholders::_ &gt;::value, T1, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value, T2, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value, T3, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value+is_same&lt; T4, placeholders::_ &gt;::value, T4, U1, U2, U3, U4, U5 &gt;::type, hk&lt; is_same&lt; T1, placeholders::_ &gt;::value+is_same&lt; T2, placeholders::_ &gt;::value+is_same&lt; T3, placeholders::_ &gt;::value+is_same&lt; T4, placeholders::_ &gt;::value+is_same&lt; T5, placeholders::_ &gt;::value, T5, U1, U2, U3, U4, U5 &gt;::type &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1apply__wrap5.html</anchorfile>
      <anchor>a386259cb4facd021605d512be0660737</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>apply_wrap5&lt; lambda&lt; F &gt;::type, A1, A2, A3, A4, A5 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap5.html</filename>
    <member kind="typedef">
      <type>lambda&lt; F &gt;::type::template apply&lt; A1, A2, A3, A4, A5 &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1apply__wrap5.html</anchorfile>
      <anchor>a386259cb4facd021605d512be0660737</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>apply_wrap&lt; arg&lt; k &gt;, T1, T2, T3, T4, T5 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap.html</filename>
    <base>apply_wrap5&lt; arg&lt; k &gt;, T1, T2, T3, T4, T5 &gt;</base>
  </compound>
  <compound kind="class">
    <name>apply_wrap&lt; arg&lt; N &gt;, T1, T2, T3, T4, T5 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap.html</filename>
    <base>apply_wrap5&lt; arg&lt; N &gt;, T1, T2, T3, T4, T5 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap&lt; F, A1, A2, A3, A4, mpl::none &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap_3_01F_00_01A1_00_01A2_00_01A3_00_01A4_00_01mpl_1_1none_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::mpl::apply_wrap4</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap&lt; F, A1, A2, A3, mpl::none, mpl::none &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap_3_01F_00_01A1_00_01A2_00_01A3_00_01mpl_1_1none_00_01mpl_1_1none_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::mpl::apply_wrap3</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap&lt; F, A1, A2, mpl::none, mpl::none, mpl::none &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap_3_01F_00_01A1_00_01A2_00_01mpl_1_1none_00_01mpl_1_1none_00_01mpl_1_1none_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::mpl::apply_wrap2</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap&lt; F, A1, mpl::none, mpl::none, mpl::none, mpl::none &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap_3_01F_00_01A1_00_01mpl_1_1none_00_01mpl_1_1none_00_01mpl_1_1none_00_01mpl_1_1none_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::mpl::apply_wrap1</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::apply_wrap&lt; F, mpl::none, mpl::none, mpl::none, mpl::none, mpl::none &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap_3_01F_00_01mpl_1_1none_00_01mpl_1_1none_00_01mpl_1_1none_00_013418fa650659cd58268262754e6725e.html</filename>
    <templarg></templarg>
    <base>Sacado::mpl::apply_wrap0</base>
  </compound>
  <compound kind="class">
    <name>apply_wrap&lt; lambda&lt; F &gt;::type, A1, A2, A3, A4, A5 &gt;</name>
    <filename>structSacado_1_1mpl_1_1apply__wrap.html</filename>
    <base>apply_wrap5&lt; lambda&lt; F &gt;::type, A1, A2, A3, A4, A5 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg</name>
    <filename>structSacado_1_1mpl_1_1arg.html</filename>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 1 &gt;</name>
    <filename>structSacado_1_1mpl_1_1arg_3_011_01_4.html</filename>
    <class kind="struct">Sacado::mpl::arg&lt; 1 &gt;::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 2 &gt;</name>
    <filename>structSacado_1_1mpl_1_1arg_3_012_01_4.html</filename>
    <class kind="struct">Sacado::mpl::arg&lt; 2 &gt;::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 3 &gt;</name>
    <filename>structSacado_1_1mpl_1_1arg_3_013_01_4.html</filename>
    <class kind="struct">Sacado::mpl::arg&lt; 3 &gt;::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 4 &gt;</name>
    <filename>structSacado_1_1mpl_1_1arg_3_014_01_4.html</filename>
    <class kind="struct">Sacado::mpl::arg&lt; 4 &gt;::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::arg&lt; 5 &gt;</name>
    <filename>structSacado_1_1mpl_1_1arg_3_015_01_4.html</filename>
    <class kind="struct">Sacado::mpl::arg&lt; 5 &gt;::apply</class>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::ArrayTraits</name>
    <filename>classSacado_1_1Fad_1_1ArrayTraits.html</filename>
    <templarg>OrdinalType</templarg>
    <templarg>FadType</templarg>
    <member kind="function">
      <type></type>
      <name>ArrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ae8977d38ac3f33507912d8af55569a99</anchor>
      <arglist>(bool use_dynamic=true, OrdinalType workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aa4674eb78853482f0e3d709be8a77a5c</anchor>
      <arglist>(const ArrayTraits &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a49c8e72ffdb9b1707ed31f3541a0bdc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a501486401aa3141350b1f5a5b851e3ba</anchor>
      <arglist>(const FadType &amp;a, OrdinalType &amp;n_dot, ValueType &amp;val, const ValueType *&amp;dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a95f55ca1b672a4405ae2464c76cf54e1</anchor>
      <arglist>(const FadType *a, OrdinalType n, OrdinalType inc, OrdinalType &amp;n_dot, OrdinalType &amp;inc_val, OrdinalType &amp;inc_dot, const ValueType *&amp;val, const ValueType *&amp;dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a3763aca87ffa9fc2222783b9d04684c5</anchor>
      <arglist>(const FadType *A, OrdinalType m, OrdinalType n, OrdinalType lda, OrdinalType &amp;n_dot, OrdinalType &amp;lda_val, OrdinalType &amp;lda_dot, const ValueType *&amp;val, const ValueType *&amp;dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>af3fef6dfb15eddef8b521b3891a3229b</anchor>
      <arglist>(const ValueType &amp;a, OrdinalType &amp;n_dot, ValueType &amp;val, const ValueType *&amp;dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a5c9cfe031a2abcf8b248d0dc20c052e5</anchor>
      <arglist>(const ValueType *a, OrdinalType n, OrdinalType inc, OrdinalType &amp;n_dot, OrdinalType &amp;inc_val, OrdinalType &amp;inc_dot, const ValueType *&amp;val, const ValueType *&amp;dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ad713a366c4aa98ebd38227e6d5d27841</anchor>
      <arglist>(const ValueType *A, OrdinalType m, OrdinalType n, OrdinalType lda, OrdinalType &amp;n_dot, OrdinalType &amp;lda_val, OrdinalType &amp;lda_dot, const ValueType *&amp;val, const ValueType *&amp;dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>afd846c1f486fac4922fb73464a428742</anchor>
      <arglist>(const ScalarType &amp;a, OrdinalType &amp;n_dot, ScalarType &amp;val, const ScalarType *&amp;dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a2ec4a32ffe4ec15b329ae05cd88d9962</anchor>
      <arglist>(const ScalarType *a, OrdinalType n, OrdinalType inc, OrdinalType &amp;n_dot, OrdinalType &amp;inc_val, OrdinalType &amp;inc_dot, const ScalarType *&amp;val, const ScalarType *&amp;dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a35303074267fa1fb6390bab84d47a64f</anchor>
      <arglist>(const ScalarType *A, OrdinalType m, OrdinalType n, OrdinalType lda, OrdinalType &amp;n_dot, OrdinalType &amp;lda_val, OrdinalType &amp;lda_dot, const ScalarType *&amp;val, const ScalarType *&amp;dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a3feb30ba13847166a84e6c5955f07ae4</anchor>
      <arglist>(FadType &amp;a, OrdinalType &amp;n_dot, OrdinalType &amp;final_n_dot, ValueType &amp;val, ValueType *&amp;dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>afdcf936e576560da666cd845b5bb996a</anchor>
      <arglist>(FadType *a, OrdinalType n, OrdinalType inc, OrdinalType &amp;n_dot, OrdinalType &amp;final_n_dot, OrdinalType &amp;inc_val, OrdinalType &amp;inc_dot, ValueType *&amp;val, ValueType *&amp;dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ad8a6b536e9d003614f7fbd76d9ba1afc</anchor>
      <arglist>(FadType *A, OrdinalType m, OrdinalType n, OrdinalType lda, OrdinalType &amp;n_dot, OrdinalType &amp;final_n_dot, OrdinalType &amp;lda_val, OrdinalType &amp;lda_dot, ValueType *&amp;val, ValueType *&amp;dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a1c3d8f213ab6915b7c283bf5ea310b5c</anchor>
      <arglist>(FadType &amp;a, OrdinalType n_dot, const ValueType &amp;val, const ValueType *dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a356eb73e1ebbe366a93cd82e710e5229</anchor>
      <arglist>(FadType *a, OrdinalType n, OrdinalType inc, OrdinalType n_dot, OrdinalType inc_val, OrdinalType inc_dot, const ValueType *val, const ValueType *dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a2a0ae9d1bea0901cae40d62fc57b6509</anchor>
      <arglist>(FadType *A, OrdinalType m, OrdinalType n, OrdinalType lda, OrdinalType n_dot, OrdinalType lda_val, OrdinalType lda_dot, const ValueType *val, const ValueType *dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a6d4e8710acd498361433b98985f1a8be</anchor>
      <arglist>(const FadType &amp;a, OrdinalType n_dot, const ValueType *dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a215e6d0d3eb3ba0a0fde8fc7d852a864</anchor>
      <arglist>(const FadType *a, OrdinalType n, OrdinalType n_dot, OrdinalType inc_val, OrdinalType inc_dot, const ValueType *val, const ValueType *dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a6983e99b14e06f26b842feb1f200f380</anchor>
      <arglist>(const FadType *A, OrdinalType m, OrdinalType n, OrdinalType n_dot, OrdinalType lda_val, OrdinalType lda_dot, const ValueType *val, const ValueType *dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a7d3bf6d383389f36b58e386d76661be5</anchor>
      <arglist>(const ValueType &amp;a, OrdinalType n_dot, const ValueType *dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a308c09ccaf3a48e0be3c48a034d8ed48</anchor>
      <arglist>(const ValueType *a, OrdinalType n, OrdinalType n_dot, OrdinalType inc_val, OrdinalType inc_dot, const ValueType *val, const ValueType *dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aabb921f4d067447bcc25b84a63918325</anchor>
      <arglist>(const ValueType *A, OrdinalType m, OrdinalType n, OrdinalType n_dot, OrdinalType lda_val, OrdinalType lda_dot, const ValueType *val, const ValueType *dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>acab4eb8c4b2475462ad06e60a6faacc2</anchor>
      <arglist>(const ScalarType &amp;a, OrdinalType n_dot, const ScalarType *dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ac76300c01c71d7fec9eca90d3ff85e0d</anchor>
      <arglist>(const ScalarType *a, OrdinalType n, OrdinalType n_dot, OrdinalType inc_val, OrdinalType inc_dot, const ScalarType *val, const ScalarType *dot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aca37ea09a6b2485ccc0ea8852740cce2</anchor>
      <arglist>(const ScalarType *A, OrdinalType m, OrdinalType n, OrdinalType n_dot, OrdinalType lda_val, OrdinalType lda_dot, const ScalarType *val, const ScalarType *dot) const </arglist>
    </member>
    <member kind="function">
      <type>ValueType *</type>
      <name>allocate_array</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aba29dea71ec27f91b7351dd723749c14</anchor>
      <arglist>(OrdinalType size) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free_array</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aac62b1be1e0a9f1943d5873ec0c75eec</anchor>
      <arglist>(const ValueType *ptr, OrdinalType size) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_contiguous</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a993094f350e32c1e4c058de8b95cba39</anchor>
      <arglist>(const FadType *a, OrdinalType n, OrdinalType n_dot) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ae8977d38ac3f33507912d8af55569a99</anchor>
      <arglist>(bool use_dynamic=true, OrdinalType workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aa4674eb78853482f0e3d709be8a77a5c</anchor>
      <arglist>(const ArrayTraits &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a49c8e72ffdb9b1707ed31f3541a0bdc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ab9888ff028d8637a373b10611159d100</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a3c229a9afb993e3843dc1d9786f5d8b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aac8ca866f7710b0eefb5155492401e6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ValueType *</type>
      <name>allocate_array</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ac81add5055a9ca77881be61be41207a1</anchor>
      <arglist>(OrdinalType size) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free_array</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aac62b1be1e0a9f1943d5873ec0c75eec</anchor>
      <arglist>(const ValueType *ptr, OrdinalType size) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_contiguous</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a993094f350e32c1e4c058de8b95cba39</anchor>
      <arglist>(const FadType *a, OrdinalType n, OrdinalType n_dot) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_dynamic</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a9fc4d484a23537d95d3f6f00f2b8ccc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrdinalType</type>
      <name>workspace_size</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a156860ecb18e9df7eace361c64dcb4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a77618fabfdbc017a8300191cbba823a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace_pointer</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ab092a2ec2257d5f2bda78a4a8b475222</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::ValueType&lt; FadType &gt;::type</type>
      <name>ValueType</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a3f5e0088e6978e502b51b93a6832712e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::ScalarType&lt; FadType &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aa8e543a385ce6b5ab9db70cb24ad0e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::dummy&lt; ValueType, scalar_type &gt;::type</type>
      <name>ScalarType</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a4d6647f79f96fcb2cf37e0090a6cf218</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::ValueType&lt; FadType &gt;::type</type>
      <name>ValueType</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a3f5e0088e6978e502b51b93a6832712e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::ScalarType&lt; FadType &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aa8e543a385ce6b5ab9db70cb24ad0e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::dummy&lt; ValueType, scalar_type &gt;::type</type>
      <name>ScalarType</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a4d6647f79f96fcb2cf37e0090a6cf218</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayTraits&lt; OrdinalType, Sacado::Fad::DFad &gt;</name>
    <filename>classSacado_1_1Fad_1_1ArrayTraits.html</filename>
    <member kind="function">
      <type></type>
      <name>ArrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ae8977d38ac3f33507912d8af55569a99</anchor>
      <arglist>(bool use_dynamic=true, OrdinalType workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aa4674eb78853482f0e3d709be8a77a5c</anchor>
      <arglist>(const ArrayTraits &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ae8977d38ac3f33507912d8af55569a99</anchor>
      <arglist>(bool use_dynamic=true, OrdinalType workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aa4674eb78853482f0e3d709be8a77a5c</anchor>
      <arglist>(const ArrayTraits &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a49c8e72ffdb9b1707ed31f3541a0bdc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a49c8e72ffdb9b1707ed31f3541a0bdc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a501486401aa3141350b1f5a5b851e3ba</anchor>
      <arglist>(const Sacado::Fad::DFad &amp;a, OrdinalType &amp;n_dot, ValueType &amp;val, const ValueType *&amp;dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a95f55ca1b672a4405ae2464c76cf54e1</anchor>
      <arglist>(const Sacado::Fad::DFad *a, OrdinalType n, OrdinalType inc, OrdinalType &amp;n_dot, OrdinalType &amp;inc_val, OrdinalType &amp;inc_dot, const ValueType *&amp;val, const ValueType *&amp;dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a3763aca87ffa9fc2222783b9d04684c5</anchor>
      <arglist>(const Sacado::Fad::DFad *A, OrdinalType m, OrdinalType n, OrdinalType lda, OrdinalType &amp;n_dot, OrdinalType &amp;lda_val, OrdinalType &amp;lda_dot, const ValueType *&amp;val, const ValueType *&amp;dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>af3fef6dfb15eddef8b521b3891a3229b</anchor>
      <arglist>(const ValueType &amp;a, OrdinalType &amp;n_dot, ValueType &amp;val, const ValueType *&amp;dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a5c9cfe031a2abcf8b248d0dc20c052e5</anchor>
      <arglist>(const ValueType *a, OrdinalType n, OrdinalType inc, OrdinalType &amp;n_dot, OrdinalType &amp;inc_val, OrdinalType &amp;inc_dot, const ValueType *&amp;val, const ValueType *&amp;dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ad713a366c4aa98ebd38227e6d5d27841</anchor>
      <arglist>(const ValueType *A, OrdinalType m, OrdinalType n, OrdinalType lda, OrdinalType &amp;n_dot, OrdinalType &amp;lda_val, OrdinalType &amp;lda_dot, const ValueType *&amp;val, const ValueType *&amp;dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>afd846c1f486fac4922fb73464a428742</anchor>
      <arglist>(const ScalarType &amp;a, OrdinalType &amp;n_dot, ScalarType &amp;val, const ScalarType *&amp;dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a2ec4a32ffe4ec15b329ae05cd88d9962</anchor>
      <arglist>(const ScalarType *a, OrdinalType n, OrdinalType inc, OrdinalType &amp;n_dot, OrdinalType &amp;inc_val, OrdinalType &amp;inc_dot, const ScalarType *&amp;val, const ScalarType *&amp;dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a35303074267fa1fb6390bab84d47a64f</anchor>
      <arglist>(const ScalarType *A, OrdinalType m, OrdinalType n, OrdinalType lda, OrdinalType &amp;n_dot, OrdinalType &amp;lda_val, OrdinalType &amp;lda_dot, const ScalarType *&amp;val, const ScalarType *&amp;dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a3feb30ba13847166a84e6c5955f07ae4</anchor>
      <arglist>(Sacado::Fad::DFad &amp;a, OrdinalType &amp;n_dot, OrdinalType &amp;final_n_dot, ValueType &amp;val, ValueType *&amp;dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>afdcf936e576560da666cd845b5bb996a</anchor>
      <arglist>(Sacado::Fad::DFad *a, OrdinalType n, OrdinalType inc, OrdinalType &amp;n_dot, OrdinalType &amp;final_n_dot, OrdinalType &amp;inc_val, OrdinalType &amp;inc_dot, ValueType *&amp;val, ValueType *&amp;dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ad8a6b536e9d003614f7fbd76d9ba1afc</anchor>
      <arglist>(Sacado::Fad::DFad *A, OrdinalType m, OrdinalType n, OrdinalType lda, OrdinalType &amp;n_dot, OrdinalType &amp;final_n_dot, OrdinalType &amp;lda_val, OrdinalType &amp;lda_dot, ValueType *&amp;val, ValueType *&amp;dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ab9888ff028d8637a373b10611159d100</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a1c3d8f213ab6915b7c283bf5ea310b5c</anchor>
      <arglist>(Sacado::Fad::DFad &amp;a, OrdinalType n_dot, const ValueType &amp;val, const ValueType *dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a356eb73e1ebbe366a93cd82e710e5229</anchor>
      <arglist>(Sacado::Fad::DFad *a, OrdinalType n, OrdinalType inc, OrdinalType n_dot, OrdinalType inc_val, OrdinalType inc_dot, const ValueType *val, const ValueType *dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a2a0ae9d1bea0901cae40d62fc57b6509</anchor>
      <arglist>(Sacado::Fad::DFad *A, OrdinalType m, OrdinalType n, OrdinalType lda, OrdinalType n_dot, OrdinalType lda_val, OrdinalType lda_dot, const ValueType *val, const ValueType *dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a3c229a9afb993e3843dc1d9786f5d8b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a6d4e8710acd498361433b98985f1a8be</anchor>
      <arglist>(const Sacado::Fad::DFad &amp;a, OrdinalType n_dot, const ValueType *dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a215e6d0d3eb3ba0a0fde8fc7d852a864</anchor>
      <arglist>(const Sacado::Fad::DFad *a, OrdinalType n, OrdinalType n_dot, OrdinalType inc_val, OrdinalType inc_dot, const ValueType *val, const ValueType *dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a6983e99b14e06f26b842feb1f200f380</anchor>
      <arglist>(const Sacado::Fad::DFad *A, OrdinalType m, OrdinalType n, OrdinalType n_dot, OrdinalType lda_val, OrdinalType lda_dot, const ValueType *val, const ValueType *dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a7d3bf6d383389f36b58e386d76661be5</anchor>
      <arglist>(const ValueType &amp;a, OrdinalType n_dot, const ValueType *dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a308c09ccaf3a48e0be3c48a034d8ed48</anchor>
      <arglist>(const ValueType *a, OrdinalType n, OrdinalType n_dot, OrdinalType inc_val, OrdinalType inc_dot, const ValueType *val, const ValueType *dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aabb921f4d067447bcc25b84a63918325</anchor>
      <arglist>(const ValueType *A, OrdinalType m, OrdinalType n, OrdinalType n_dot, OrdinalType lda_val, OrdinalType lda_dot, const ValueType *val, const ValueType *dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>acab4eb8c4b2475462ad06e60a6faacc2</anchor>
      <arglist>(const ScalarType &amp;a, OrdinalType n_dot, const ScalarType *dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ac76300c01c71d7fec9eca90d3ff85e0d</anchor>
      <arglist>(const ScalarType *a, OrdinalType n, OrdinalType n_dot, OrdinalType inc_val, OrdinalType inc_dot, const ScalarType *val, const ScalarType *dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aca37ea09a6b2485ccc0ea8852740cce2</anchor>
      <arglist>(const ScalarType *A, OrdinalType m, OrdinalType n, OrdinalType n_dot, OrdinalType lda_val, OrdinalType lda_dot, const ScalarType *val, const ScalarType *dot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aac8ca866f7710b0eefb5155492401e6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ValueType *</type>
      <name>allocate_array</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aba29dea71ec27f91b7351dd723749c14</anchor>
      <arglist>(OrdinalType size) const</arglist>
    </member>
    <member kind="function">
      <type>ValueType *</type>
      <name>allocate_array</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ac81add5055a9ca77881be61be41207a1</anchor>
      <arglist>(OrdinalType size) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free_array</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aac62b1be1e0a9f1943d5873ec0c75eec</anchor>
      <arglist>(const ValueType *ptr, OrdinalType size) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free_array</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aac62b1be1e0a9f1943d5873ec0c75eec</anchor>
      <arglist>(const ValueType *ptr, OrdinalType size) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_contiguous</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a993094f350e32c1e4c058de8b95cba39</anchor>
      <arglist>(const Sacado::Fad::DFad *a, OrdinalType n, OrdinalType n_dot) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_contiguous</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a993094f350e32c1e4c058de8b95cba39</anchor>
      <arglist>(const Sacado::Fad::DFad *a, OrdinalType n, OrdinalType n_dot) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_dynamic</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a9fc4d484a23537d95d3f6f00f2b8ccc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrdinalType</type>
      <name>workspace_size</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a156860ecb18e9df7eace361c64dcb4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a77618fabfdbc017a8300191cbba823a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType *</type>
      <name>workspace_pointer</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>ab092a2ec2257d5f2bda78a4a8b475222</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::ValueType&lt; Sacado::Fad::DFad &gt;::type</type>
      <name>ValueType</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a3f5e0088e6978e502b51b93a6832712e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::ValueType&lt; Sacado::Fad::DFad &gt;::type</type>
      <name>ValueType</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a3f5e0088e6978e502b51b93a6832712e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::ScalarType&lt; Sacado::Fad::DFad &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aa8e543a385ce6b5ab9db70cb24ad0e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::ScalarType&lt; Sacado::Fad::DFad &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>aa8e543a385ce6b5ab9db70cb24ad0e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::dummy&lt; ValueType, scalar_type &gt;::type</type>
      <name>ScalarType</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a4d6647f79f96fcb2cf37e0090a6cf218</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::dummy&lt; ValueType, scalar_type &gt;::type</type>
      <name>ScalarType</name>
      <anchorfile>classSacado_1_1Fad_1_1ArrayTraits.html</anchorfile>
      <anchor>a4d6647f79f96fcb2cf37e0090a6cf218</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ArrayValueType</name>
    <filename>structSacado_1_1Fad_1_1ArrayValueType.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Fad_1_1ArrayValueType.html</anchorfile>
      <anchor>a091c56329184614dfe32aea3775113eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Fad_1_1ArrayValueType.html</anchorfile>
      <anchor>a091c56329184614dfe32aea3775113eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::ASinExprType</name>
    <filename>structSacado_1_1Tay_1_1ASinExprType.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>BinaryExpr&lt; Expr&lt; T &gt;, Expr&lt; T &gt;, MultiplicationOp &gt;</type>
      <name>T1</name>
      <anchorfile>structSacado_1_1Tay_1_1ASinExprType.html</anchorfile>
      <anchor>ac60e8cc399a42c66c11992cc13e7fb66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstExpr&lt; typename Expr&lt; T &gt;::value_type &gt;</type>
      <name>ConstT</name>
      <anchorfile>structSacado_1_1Tay_1_1ASinExprType.html</anchorfile>
      <anchor>a1f2cb63ca417ab40329043bb61113ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinaryExpr&lt; ConstT, Expr&lt; T1 &gt;, SubtractionOp &gt;</type>
      <name>T2</name>
      <anchorfile>structSacado_1_1Tay_1_1ASinExprType.html</anchorfile>
      <anchor>aef54ee4faf18bfbe5f71076b5bcd13e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnaryExpr&lt; Expr&lt; T2 &gt;, SqrtOp &gt;</type>
      <name>T3</name>
      <anchorfile>structSacado_1_1Tay_1_1ASinExprType.html</anchorfile>
      <anchor>a083c07760936e37261396f7a4806455c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinaryExpr&lt; ConstT, Expr&lt; T3 &gt;, DivisionOp &gt;</type>
      <name>T4</name>
      <anchorfile>structSacado_1_1Tay_1_1ASinExprType.html</anchorfile>
      <anchor>a674454466c9a78f0a2dc75755f3b351e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinaryExpr&lt; Expr&lt; T &gt;, Expr&lt; T4 &gt;, ASinQuadOp &gt;</type>
      <name>T5</name>
      <anchorfile>structSacado_1_1Tay_1_1ASinExprType.html</anchorfile>
      <anchor>accb65d2efa0a0db3f368cf704aebdb74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Expr&lt; T5 &gt;</type>
      <name>expr_type</name>
      <anchorfile>structSacado_1_1Tay_1_1ASinExprType.html</anchorfile>
      <anchor>a78ab497ce50ccfd5baa3981d8b981acc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::ASinQuadOp</name>
    <filename>classSacado_1_1Tay_1_1ASinQuadOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>value_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1ASinQuadOp.html</anchorfile>
      <anchor>af9c1192511f071840f57ed871f8975ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::value_type</type>
      <name>value_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1ASinQuadOp.html</anchorfile>
      <anchor>ab95411475675ada13bb33dc4f8d1be36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; value_type_1, value_type_2 &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ASinQuadOp.html</anchorfile>
      <anchor>aacf5c56ff0776caacbea0b0d75efb0c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::scalar_type</type>
      <name>scalar_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1ASinQuadOp.html</anchorfile>
      <anchor>ab1b6fe18f4cec045fbaa6f6006fb17b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::scalar_type</type>
      <name>scalar_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1ASinQuadOp.html</anchorfile>
      <anchor>a41b58c4cd0a2ecb1fe11b0ca02ad2fd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; scalar_type_1, scalar_type_2 &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ASinQuadOp.html</anchorfile>
      <anchor>aeac5b96885cb154550c2072a47dacb6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::base_expr_type</type>
      <name>base_expr_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1ASinQuadOp.html</anchorfile>
      <anchor>a2a0d88ca31dfcb374cfc38784e28c38b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::base_expr_type</type>
      <name>base_expr_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1ASinQuadOp.html</anchorfile>
      <anchor>a275ad9f1636618faff3b57c49fb103b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; base_expr_type_1, base_expr_type_2 &gt;::type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ASinQuadOp.html</anchorfile>
      <anchor>ab894c86a1d1b3100db23c61945c32a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ASinQuadOp</name>
      <anchorfile>classSacado_1_1Tay_1_1ASinQuadOp.html</anchorfile>
      <anchor>a664d60ec861c135f861d707174c5ba39</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 &amp;expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1ASinQuadOp.html</anchorfile>
      <anchor>a829b6871f32cb393f0d00365c1e66257</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ASinQuadOp.html</anchorfile>
      <anchor>a6a552cdae8e30e767fac3c845781a11a</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ASinQuadOp.html</anchorfile>
      <anchor>ad9b0a49a877c01741b8297bb2d85038e</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::valarray&lt; value_type &gt;</type>
      <name>c</name>
      <anchorfile>classSacado_1_1Tay_1_1ASinQuadOp.html</anchorfile>
      <anchor>ac7cab68bbf88ee12db00d859219e29ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dc</name>
      <anchorfile>classSacado_1_1Tay_1_1ASinQuadOp.html</anchorfile>
      <anchor>a06d4a2435f84d8e242d311670ec9ecda</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AssignRank2Rank1Kernel</name>
    <filename>structAssignRank2Rank1Kernel.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>InputViewType::execution_space</type>
      <name>execution_space</name>
      <anchorfile>structAssignRank2Rank1Kernel.html</anchorfile>
      <anchor>a83e92fa69994eecd0d1ba84d0a5e67a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InputViewType::size_type</type>
      <name>size_type</name>
      <anchorfile>structAssignRank2Rank1Kernel.html</anchorfile>
      <anchor>a88b35d380e626b1851f8f5208266958e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AssignRank2Rank1Kernel</name>
      <anchorfile>structAssignRank2Rank1Kernel.html</anchorfile>
      <anchor>ac8afe080b051e2d4d862d4030cd9e752</anchor>
      <arglist>(const InputViewType v1, const OutputViewType v2, const size_type col)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>structAssignRank2Rank1Kernel.html</anchorfile>
      <anchor>a4a022a56b81e768d449a102b7c2c4af5</anchor>
      <arglist>(const size_type i) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structAssignRank2Rank1Kernel.html</anchorfile>
      <anchor>acb7ed88b987c1d45504119f587b8ca6d</anchor>
      <arglist>(const InputViewType v1, const OutputViewType v2, const size_type col)</arglist>
    </member>
    <member kind="variable">
      <type>const InputViewType</type>
      <name>m_v1</name>
      <anchorfile>structAssignRank2Rank1Kernel.html</anchorfile>
      <anchor>a1a79a90f832c09c2b7078739884c8e61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OutputViewType</type>
      <name>m_v2</name>
      <anchorfile>structAssignRank2Rank1Kernel.html</anchorfile>
      <anchor>ac5eda889e2e890b9ac1f37a05fec68ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_type</type>
      <name>m_col</name>
      <anchorfile>structAssignRank2Rank1Kernel.html</anchorfile>
      <anchor>ad38c7f20c36c5ed236c65d1a1e77f606</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::at</name>
    <filename>structSacado_1_1mpl_1_1at.html</filename>
    <templarg>T</templarg>
    <templarg>Pos</templarg>
  </compound>
  <compound kind="class">
    <name>at&lt; Range, Pos &gt;</name>
    <filename>structSacado_1_1mpl_1_1at.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::at_impl</name>
    <filename>structSacado_1_1mpl_1_1at__impl.html</filename>
    <templarg></templarg>
    <templarg>Pos</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::at_impl&lt; range_c_tag, Pos &gt;</name>
    <filename>structSacado_1_1mpl_1_1at__impl_3_01range__c__tag_00_01Pos_01_4.html</filename>
    <templarg>Pos</templarg>
    <class kind="struct">Sacado::mpl::at_impl&lt; range_c_tag, Pos &gt;::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::ATanExprType</name>
    <filename>structSacado_1_1Tay_1_1ATanExprType.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>BinaryExpr&lt; Expr&lt; T &gt;, Expr&lt; T &gt;, MultiplicationOp &gt;</type>
      <name>T1</name>
      <anchorfile>structSacado_1_1Tay_1_1ATanExprType.html</anchorfile>
      <anchor>a532be7f677a132b75fd7ef385691efff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstExpr&lt; typename Expr&lt; T &gt;::value_type &gt;</type>
      <name>ConstT</name>
      <anchorfile>structSacado_1_1Tay_1_1ATanExprType.html</anchorfile>
      <anchor>a495f18e56cc44446c9172c48066a0db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinaryExpr&lt; ConstT, Expr&lt; T1 &gt;, AdditionOp &gt;</type>
      <name>T2</name>
      <anchorfile>structSacado_1_1Tay_1_1ATanExprType.html</anchorfile>
      <anchor>a665e28b7f33856cabeea28af4383f49a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinaryExpr&lt; ConstT, Expr&lt; T2 &gt;, DivisionOp &gt;</type>
      <name>T3</name>
      <anchorfile>structSacado_1_1Tay_1_1ATanExprType.html</anchorfile>
      <anchor>a3c268522479b345680ef589cbd17cd3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinaryExpr&lt; Expr&lt; T &gt;, Expr&lt; T3 &gt;, ATanQuadOp &gt;</type>
      <name>T4</name>
      <anchorfile>structSacado_1_1Tay_1_1ATanExprType.html</anchorfile>
      <anchor>a231f8962b4878719d974c5daf0b5fe8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Expr&lt; T4 &gt;</type>
      <name>expr_type</name>
      <anchorfile>structSacado_1_1Tay_1_1ATanExprType.html</anchorfile>
      <anchor>a09d671af07fee2d14b33906e5cd0e9cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::ATanQuadOp</name>
    <filename>classSacado_1_1Tay_1_1ATanQuadOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>value_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1ATanQuadOp.html</anchorfile>
      <anchor>a4fe88a12b55282122630f5b748436ebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::value_type</type>
      <name>value_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1ATanQuadOp.html</anchorfile>
      <anchor>aa500a20e28f8564f9bd95a55e60c9fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; value_type_1, value_type_2 &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ATanQuadOp.html</anchorfile>
      <anchor>aa6e411616f8070bf25e20f6415c9b6af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::scalar_type</type>
      <name>scalar_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1ATanQuadOp.html</anchorfile>
      <anchor>acadec7bda82c1dfebc15d46970bfd615</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::scalar_type</type>
      <name>scalar_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1ATanQuadOp.html</anchorfile>
      <anchor>a08b2e72ec046ce6001d2efd9c3f0903e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; scalar_type_1, scalar_type_2 &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ATanQuadOp.html</anchorfile>
      <anchor>a53b993d163d6db310bcd92add5d7a870</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::base_expr_type</type>
      <name>base_expr_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1ATanQuadOp.html</anchorfile>
      <anchor>a9a2c05b279a63ed9938ad2b79540aab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::base_expr_type</type>
      <name>base_expr_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1ATanQuadOp.html</anchorfile>
      <anchor>a5350dcbc2b51d9e865f95fe3b57e40a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; base_expr_type_1, base_expr_type_2 &gt;::type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ATanQuadOp.html</anchorfile>
      <anchor>ac336d7f01f9a4475f449d3f5e924b4b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ATanQuadOp</name>
      <anchorfile>classSacado_1_1Tay_1_1ATanQuadOp.html</anchorfile>
      <anchor>ae72efedda4d5722c4195ce661bc64104</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 &amp;expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1ATanQuadOp.html</anchorfile>
      <anchor>ac608426213ddaed34ea1706184bd469d</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ATanQuadOp.html</anchorfile>
      <anchor>a0f2a53f3678ca5f360a1d1230c7cb9d2</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ATanQuadOp.html</anchorfile>
      <anchor>ac0ef7a6a23e01b6911b81eec735b6589</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::valarray&lt; value_type &gt;</type>
      <name>c</name>
      <anchorfile>classSacado_1_1Tay_1_1ATanQuadOp.html</anchorfile>
      <anchor>a2c6f0486262abf9455491b77b9b33bca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dc</name>
      <anchorfile>classSacado_1_1Tay_1_1ATanQuadOp.html</anchorfile>
      <anchor>a273972439f03f09dec4fe504dee7418a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>B</name>
    <filename>structB.html</filename>
    <member kind="function">
      <type></type>
      <name>B</name>
      <anchorfile>structB.html</anchorfile>
      <anchor>a9532a74021f7efb003dffbc9d4145e65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>B</name>
      <anchorfile>structB.html</anchorfile>
      <anchor>a0025ac750b807da9304add33fe176dbd</anchor>
      <arglist>(const A &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Base</name>
    <filename>structSacado_1_1Base.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>derived_type</name>
      <anchorfile>structSacado_1_1Base.html</anchorfile>
      <anchor>aa4fbe035d466b3114d013bdd8bdb1320</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const derived_type &amp;</type>
      <name>derived</name>
      <anchorfile>structSacado_1_1Base.html</anchorfile>
      <anchor>a76d367d1409eed690300178a81922d40</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Base&lt; ADvari&lt; Double &gt; &gt;</name>
    <filename>structSacado_1_1Base.html</filename>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>derived_type</name>
      <anchorfile>structSacado_1_1Base.html</anchorfile>
      <anchor>aa4fbe035d466b3114d013bdd8bdb1320</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const derived_type &amp;</type>
      <name>derived</name>
      <anchorfile>structSacado_1_1Base.html</anchorfile>
      <anchor>a76d367d1409eed690300178a81922d40</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Base&lt; IndepADvar&lt; Double &gt; &gt;</name>
    <filename>structSacado_1_1Base.html</filename>
    <member kind="typedef">
      <type>IndepADvar&lt; Double &gt;</type>
      <name>derived_type</name>
      <anchorfile>structSacado_1_1Base.html</anchorfile>
      <anchor>aa4fbe035d466b3114d013bdd8bdb1320</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const derived_type &amp;</type>
      <name>derived</name>
      <anchorfile>structSacado_1_1Base.html</anchorfile>
      <anchor>a76d367d1409eed690300178a81922d40</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Base&lt; ScalarFlopCounter&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Base.html</filename>
    <member kind="typedef">
      <type>ScalarFlopCounter&lt; T &gt;</type>
      <name>derived_type</name>
      <anchorfile>structSacado_1_1Base.html</anchorfile>
      <anchor>aa4fbe035d466b3114d013bdd8bdb1320</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const derived_type &amp;</type>
      <name>derived</name>
      <anchorfile>structSacado_1_1Base.html</anchorfile>
      <anchor>a76d367d1409eed690300178a81922d40</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Base&lt; Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Base.html</filename>
    <member kind="typedef">
      <type>Taylor&lt; T &gt;</type>
      <name>derived_type</name>
      <anchorfile>structSacado_1_1Base.html</anchorfile>
      <anchor>aa4fbe035d466b3114d013bdd8bdb1320</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const derived_type &amp;</type>
      <name>derived</name>
      <anchorfile>structSacado_1_1Base.html</anchorfile>
      <anchor>a76d367d1409eed690300178a81922d40</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::CacheFad::BaseExpr</name>
    <filename>structSacado_1_1CacheFad_1_1BaseExpr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::BaseExpr</name>
    <filename>structSacado_1_1Fad_1_1BaseExpr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::BaseExpr</name>
    <filename>structSacado_1_1ELRCacheFad_1_1BaseExpr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::BaseExpr</name>
    <filename>structSacado_1_1ELRFad_1_1BaseExpr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::BaseExpr&lt; GeneralFad&lt; T, Fad::DynamicStorage&lt; T &gt; &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1BaseExpr_3_01GeneralFad_3_01T_00_01Fad_1_1DynamicStorage_3_01T_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>DFad&lt; typename GeneralFad&lt; T, Fad::DynamicStorage&lt; T &gt; &gt;::value_type &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1FAD__NS_1_1BaseExpr_3_01GeneralFad_3_01T_00_01Fad_1_1DynamicStorage_3_01T_01_4_01_4_01_4.html</anchorfile>
      <anchor>a1edab4cc2d8d423a688f94f7bb3531b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::BaseExpr&lt; GeneralFad&lt; T, Fad::MemPoolStorage&lt; T &gt; &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1BaseExpr_3_01GeneralFad_3_01T_00_01Fad_1_1MemPoolStorage_3_01T_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>DMFad&lt; typename GeneralFad&lt; T, Fad::MemPoolStorage&lt; T &gt; &gt;::value_type &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Fad_1_1BaseExpr_3_01GeneralFad_3_01T_00_01Fad_1_1MemPoolStorage_3_01T_01_4_01_4_01_4.html</anchorfile>
      <anchor>a710e6b74a1f6304dfec3f8bdcc47b88b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::BaseExpr&lt; GeneralFad&lt; T, Fad::StaticStorage&lt; T, N &gt; &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1BaseExpr_3_01GeneralFad_3_01T_00_01Fad_1_1StaticStorage_3_01T_00_01N_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>SLFad&lt; typename GeneralFad&lt; T, Fad::StaticStorage&lt; T, N &gt; &gt;::value_type, N &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1FAD__NS_1_1BaseExpr_3_01GeneralFad_3_01T_00_01Fad_1_1StaticStorage_3_01T_00_01N_01_4_01_4_01_4.html</anchorfile>
      <anchor>a6eec9b8d1325feff474368fe6c6f7829</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::BaseExpr&lt; GeneralFad&lt; T, Fad::VectorDynamicStorage&lt; T &gt; &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1BaseExpr_3_01GeneralFad_3_01T_00_01Fad_1_1VectorDynamicStorage_3_01T_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>DVFad&lt; typename GeneralFad&lt; T, Fad::VectorDynamicStorage&lt; T &gt; &gt;::value_type &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Fad_1_1BaseExpr_3_01GeneralFad_3_01T_00_01Fad_1_1VectorDynamicStorage_3_01T_01_4_01_4_01_4.html</anchorfile>
      <anchor>a0bd1ad7693086487dde2656f2e12d0c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::BaseExpr&lt; GeneralFad&lt; T, Fad::ViewStorage&lt; T, l, s, U &gt; &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1BaseExpr_3_01GeneralFad_3_01T_00_01Fad_1_1ViewStorage_3_01T_00_01l_00_01s_00_01U_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>l</templarg>
    <templarg>s</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>U</type>
      <name>type</name>
      <anchorfile>structSacado_1_1FAD__NS_1_1BaseExpr_3_01GeneralFad_3_01T_00_01Fad_1_1ViewStorage_3_01T_00_01l_00_01s_00_01U_01_4_01_4_01_4.html</anchorfile>
      <anchor>ad1ed9f1172c7aad62efde2324815b2e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType</name>
    <filename>structSacado_1_1BaseExprType.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structSacado_1_1BaseExprType.html</anchorfile>
      <anchor>a19f016e071a193eecca3bf2916cd29d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; CacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>CacheFad::Expr&lt; T &gt;::base_expr_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1BaseExprType_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aaad91e35a7f8c7d108dadc3c22caa445</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ELRCacheFad::Expr&lt; T &gt;::base_expr_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1BaseExprType_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a58abda1beece84ffe6f6c0ab713a85d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; ELRFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ELRFad::Expr&lt; T &gt;::base_expr_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1BaseExprType_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a4dd972c42b21e8db3ac0b85d5c946f6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; Fad::DMFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01Fad_1_1DMFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Fad::DMFad&lt; T &gt;::base_expr_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1BaseExprType_3_01Fad_1_1DMFad_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a4a6a99492484e8f1719abdd193058094</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; Fad::DVFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01Fad_1_1DVFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Fad::DVFad&lt; T &gt;::base_expr_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1BaseExprType_3_01Fad_1_1DVFad_3_01T_01_4_01_4.html</anchorfile>
      <anchor>af88b2a758bb46fa17fa823f27edd1db3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; Fad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Fad::Expr&lt; T &gt;::base_expr_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1BaseExprType_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a7a6bb337a79788511af0d1777b74b97f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; FAD_NS::DFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01FAD__NS_1_1DFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>FAD_NS::DFad&lt; T &gt;::base_expr_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1BaseExprType_3_01FAD__NS_1_1DFad_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a9e695355a50caf17972bb661e7c82f66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; FAD_NS::SFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01FAD__NS_1_1SFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>FAD_NS::SFad&lt; T, N &gt;::base_expr_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1BaseExprType_3_01FAD__NS_1_1SFad_3_01T_00_01N_01_4_01_4.html</anchorfile>
      <anchor>a94cb97afa181ea1e050eec2d5604f690</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; FAD_NS::SLFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01FAD__NS_1_1SLFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>FAD_NS::SLFad&lt; T, N &gt;::base_expr_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1BaseExprType_3_01FAD__NS_1_1SLFad_3_01T_00_01N_01_4_01_4.html</anchorfile>
      <anchor>a576a105540741be4a76e1aa0a86b9866</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; FAD_NS::ViewFad&lt; T, l, s, U &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01FAD__NS_1_1ViewFad_3_01T_00_01l_00_01s_00_01U_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>l</templarg>
    <templarg>s</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>FAD_NS::ViewFad&lt; T, l, s, U &gt;::base_expr_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1BaseExprType_3_01FAD__NS_1_1ViewFad_3_01T_00_01l_00_01s_00_01U_01_4_01_4.html</anchorfile>
      <anchor>a85409cf35f0675be9d27460707de598f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; LFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>LFad::Expr&lt; T &gt;::base_expr_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1BaseExprType_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a5f4537a1fa5a3082cf819037f37e78eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; LFad::LogicalSparse&lt; T, L &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01LFad_1_1LogicalSparse_3_01T_00_01L_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LFad::LogicalSparse&lt; T, L &gt;::base_expr_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1BaseExprType_3_01LFad_1_1LogicalSparse_3_01T_00_01L_01_4_01_4.html</anchorfile>
      <anchor>adf69922b29c354f9c5808d37c26cd4a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::BaseExprType&lt; Tay::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1BaseExprType_3_01Tay_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Tay::Expr&lt; T &gt;::base_expr_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1BaseExprType_3_01Tay_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a9c67c3e6c18f488bdb727fe41a233798</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::begin</name>
    <filename>structSacado_1_1mpl_1_1begin.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::begin_impl</name>
    <filename>structSacado_1_1mpl_1_1begin__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::begin_impl&lt; range_c_tag &gt;</name>
    <filename>structSacado_1_1mpl_1_1begin__impl_3_01range__c__tag_01_4.html</filename>
    <class kind="struct">Sacado::mpl::begin_impl&lt; range_c_tag &gt;::apply</class>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::BinaryExpr</name>
    <filename>classSacado_1_1Tay_1_1BinaryExpr.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Op</templarg>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>value_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>a2fac9acf9828fa95642e38a27d75abbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::value_type</type>
      <name>value_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>a4bc171d769a6b3ba4d0c36ba01e98c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; value_type_1, value_type_2 &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>a1a35e50e46007d1874599fc6a23e70e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::scalar_type</type>
      <name>scalar_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>af0665cac6a37c26acf62c650c036261a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::scalar_type</type>
      <name>scalar_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>ac2a202e3b55debfe6ce8f19f3197fdcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; scalar_type_1, scalar_type_2 &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>a7e26df936e9d80953c4598e141b78b40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::base_expr_type</type>
      <name>base_expr_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>af202b79ab664b43c916973a4784c21d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::base_expr_type</type>
      <name>base_expr_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>a08bf16f02d1c48d0030969ce29b9edfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; base_expr_type_1, base_expr_type_2 &gt;::type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>a05d10d5d496ee6a963d282cf61597096</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryExpr</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>a1163e0a34fa8d223b918952fdff92a91</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 &amp;expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>aeecfb4214174a11330c591f129d55093</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>ab762a609328b4431466ae4413d9ed4e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>ad4ba78fbc391d9fd461c2ae19d83cebe</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>aec7a7c56152bced15db32c202ef70d07</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>a77441affe44b49d1f8ca57f99cc2121f</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExprT1</type>
      <name>expr1_</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>a3487e455fe93dcc33cda8e8f55632908</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExprT2</type>
      <name>expr2_</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>a98a410e45c65080f487f00822bfa518b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Op&lt; ExprT1, ExprT2 &gt;</type>
      <name>op_</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr.html</anchorfile>
      <anchor>a858b4b280fb4c6edee6e301773939b4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::BinaryExpr&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2, Op &gt;</name>
    <filename>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</filename>
    <templarg></templarg>
    <templarg>Op</templarg>
    <member kind="typedef">
      <type>ConstExpr&lt; typename ExprT2::value_type &gt;</type>
      <name>ExprT1</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>a9c438092edadfe167f2df1c2f95ae07a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>acd99d7dc5895b7f2c34dcd504fbd5901</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>aa57e961eacf06be42b8144e36eedcd48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>a386a36d0a9aa9d12476c737f8ec2964e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryExpr</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>a82d4efa53ed78e8a157ec9a4ab9d86cd</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 &amp;expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>ade227894e340fae37867825f004f0c23</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>acab366fd29e5178d08c3cb528c519c05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>a20bdab784cb66adfdad68f81f5931d1c</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>acdcfa61c0a821d6c0629f4d6545094e6</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>a23feade308d6570e3532e0bc6f0d4c99</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExprT1</type>
      <name>expr1_</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>a88eb50e8b58e40840ef74e36ce88c6a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExprT2</type>
      <name>expr2_</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>aae487f591abc986574493e145d2ae8ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Op&lt; ExprT1, ExprT2 &gt;</type>
      <name>op_</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_00_01Op_01_4.html</anchorfile>
      <anchor>aa23c54ad06246eef7484d7cf0e7c68e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::BinaryExpr&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt;, Op &gt;</name>
    <filename>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</filename>
    <templarg></templarg>
    <templarg>Op</templarg>
    <member kind="typedef">
      <type>ConstExpr&lt; typename ExprT1::value_type &gt;</type>
      <name>ExprT2</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a60ad9a9fed4c859a89c5828756642482</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a7a3ec57e790a3075d9cd19747a4c0356</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a7f4932c6e55969b6cc4b859c010dd928</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a99c40511b64d05b95f050d2b9fac8a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryExpr</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a0d33de4b8ede895bfc9b82f970e2bc26</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 &amp;expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a7db11d3daf1bf8bfca450d2b228f034b</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a7f321470a6ed5966dd0fb59ed302a228</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a1dfe3865e8050c16db96f9505cc316b4</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a7c4e3c8613792a24593b6a34f59df488</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a9fa5d975ba7057b669a752870316190f</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExprT1</type>
      <name>expr1_</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>aa39d43e5b51d50e2a3adc34dbf260cc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExprT2</type>
      <name>expr2_</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>af30d2e3b681be90e5693154fe61544db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Op&lt; ExprT1, ExprT2 &gt;</type>
      <name>op_</name>
      <anchorfile>classSacado_1_1Tay_1_1BinaryExpr_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_00_01Op_01_4.html</anchorfile>
      <anchor>a31a5fd98cfe715116662321907af8b22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind1</name>
    <filename>structSacado_1_1mpl_1_1bind1.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Sacado::mpl::bind1::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind2</name>
    <filename>structSacado_1_1mpl_1_1bind2.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Sacado::mpl::bind2::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind3</name>
    <filename>structSacado_1_1mpl_1_1bind3.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Sacado::mpl::bind3::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind4</name>
    <filename>structSacado_1_1mpl_1_1bind4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Sacado::mpl::bind4::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::bind5</name>
    <filename>structSacado_1_1mpl_1_1bind5.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Sacado::mpl::bind5::apply</class>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::BLAS</name>
    <filename>classSacado_1_1Fad_1_1BLAS.html</filename>
    <templarg>OrdinalType</templarg>
    <templarg>FadType</templarg>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a4a3a2af82e4cee85af4a8d9451c6a01a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType &amp;z, const OrdinalType n_z_dot, ValueType *zdot) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a33c243d1c205a70dc335d80aa299a9bc</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *y, const OrdinalType incy, const OrdinalType n_y_dot, ValueType *y_dot, const OrdinalType incy_dot, const OrdinalType n_dot) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa6f7c185098173be263298aa69a391a6</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const x_type *x, const OrdinalType incx, const OrdinalType n_x_dot, const x_type *x_dot, const OrdinalType incx_dot, const y_type *y, const OrdinalType incy, const OrdinalType n_y_dot, const y_type *y_dot, const OrdinalType incy_dot, ValueType *A, const OrdinalType lda, const OrdinalType n_A_dot, ValueType *A_dot, const OrdinalType lda_dot, const OrdinalType n_dot) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a359e9e6429070fbaafe1d5cde7f75084</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5c637cc9b3ec498c1f843e71faf215c2</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, const B_type *B, const OrdinalType ldb, const OrdinalType n_B_dot, const B_type *B_dot, const OrdinalType ldb_dot, const beta_type &amp;beta, const OrdinalType n_beta_dot, const beta_type *beta_dot, ValueType *C, const OrdinalType ldc, const OrdinalType n_C_dot, ValueType *C_dot, const OrdinalType ldc_dot, const OrdinalType n_dot) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a20c966b2d4ddc4740d0ba95e6001f8d9</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a1e65bef5a764679972583ffab0ec76b6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const OrdinalType n_alpha_dot, const alpha_type *alpha_dot, const A_type *A, const OrdinalType lda, const OrdinalType n_A_dot, const A_type *A_dot, const OrdinalType lda_dot, ValueType *B, const OrdinalType ldb, const OrdinalType n_B_dot, ValueType *B_dot, const OrdinalType ldb_dot, const OrdinalType n_dot) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArrayTraits&lt; OrdinalType, FadType &gt;</type>
      <name>arrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a3138d2abdaf1418ab3b3dcf2c13c43cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::BLAS&lt; OrdinalType, ValueType &gt;</type>
      <name>blas</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01e0af8c1f58c4440e7306dcb8b32c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_default_impl</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a37fa0d364d8ec2b428a34467473ee791</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemv_Ax</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a10ab3ca54fd6c1779e396edcc0e4c52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>gemm_AB</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a6339bf08f964aafa661ab6a0888655fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Teuchos::ScalarTraits&lt; FadType &gt;::magnitudeType</type>
      <name>MagnitudeType</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2d4fb59aff72f6d762dbacda86d59096</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::ValueType&lt; FadType &gt;::type</type>
      <name>ValueType</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa8773494f8120e76248b449a60f5b47a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::ScalarType&lt; FadType &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ac6b414d86d5d74fc6ba685b5921c33a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::dummy&lt; ValueType, scalar_type &gt;::type</type>
      <name>ScalarType</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a279788d07b07e565fc7478d0e08e27c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Teuchos::DefaultBLASImpl&lt; OrdinalType, FadType &gt;</type>
      <name>BLASType</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aef3632213fd1f8610b1cc9fcb88dd8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2e80273e58e29bfa0d9843b55ca20bb6</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ab108a2da567c6ccc89eb9e5844c0cd9f</anchor>
      <arglist>(const BLAS &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BLAS</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a306e568422d9b6d56806f6d96b6938c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROTG</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a0b92cfb68262ccc86aef9c42332378aa</anchor>
      <arglist>(FadType *da, FadType *db, MagnitudeType *c, FadType *s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ROT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af3f362a5aac6d6da4df3f56a89403147</anchor>
      <arglist>(const OrdinalType n, FadType *dx, const OrdinalType incx, FadType *dy, const OrdinalType incy, MagnitudeType *c, FadType *s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SCAL</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>ad06684e8188080257331cbad51ee3c75</anchor>
      <arglist>(const OrdinalType n, const FadType &amp;alpha, FadType *x, const OrdinalType incx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>COPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>aa4453a9e5d582b76018778b37739be4b</anchor>
      <arglist>(const OrdinalType n, const FadType *x, const OrdinalType incx, FadType *y, const OrdinalType incy) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AXPY</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a154007603d61564641ab1fd8df44fea5</anchor>
      <arglist>(const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, FadType *y, const OrdinalType incy) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ScalarTraits&lt; FadType &gt;::magnitudeType</type>
      <name>ASUM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>acee95c15fbf7f043782d7112efc45d5d</anchor>
      <arglist>(const OrdinalType n, const FadType *x, const OrdinalType incx) const </arglist>
    </member>
    <member kind="function">
      <type>FadType</type>
      <name>DOT</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>abb2df274c22408ad22b88a2ba431c91a</anchor>
      <arglist>(const OrdinalType n, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy) const </arglist>
    </member>
    <member kind="function">
      <type>MagnitudeType</type>
      <name>NRM2</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a61f2224656857173031313ff6ba8ee56</anchor>
      <arglist>(const OrdinalType n, const FadType *x, const OrdinalType incx) const </arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>IAMAX</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a955442d57bcb6fc2bf9ddd4c4803bec8</anchor>
      <arglist>(const OrdinalType n, const FadType *x, const OrdinalType incx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>af16c6e455d59f76f1bf88a55d7c8671b</anchor>
      <arglist>(Teuchos::ETransp trans, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const x_type *x, const OrdinalType incx, const beta_type &amp;beta, FadType *y, const OrdinalType incy) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMV</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a06923e5033227c7f353b990dee35ce5c</anchor>
      <arglist>(Teuchos::EUplo uplo, Teuchos::ETransp trans, Teuchos::EDiag diag, const OrdinalType n, const A_type *A, const OrdinalType lda, FadType *x, const OrdinalType incx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GER</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a258981f1427eba8989100a53346c4ec4</anchor>
      <arglist>(const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const x_type *x, const OrdinalType incx, const y_type *y, const OrdinalType incy, FadType *A, const OrdinalType lda) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GEMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a5e8985f9fcb19889d1328f35f395d97d</anchor>
      <arglist>(Teuchos::ETransp transa, Teuchos::ETransp transb, const OrdinalType m, const OrdinalType n, const OrdinalType k, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, FadType *C, const OrdinalType ldc) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SYMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a01ca83a0c0dc6eb1c8a60b009e33c3a6</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, const B_type *B, const OrdinalType ldb, const beta_type &amp;beta, FadType *C, const OrdinalType ldc) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRMM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a2978b7aa20a96bbcf24b84dd27b94e8c</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, FadType *B, const OrdinalType ldb) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TRSM</name>
      <anchorfile>classSacado_1_1Fad_1_1BLAS.html</anchorfile>
      <anchor>a69179cd8c887a0e6b671c04555e292f5</anchor>
      <arglist>(Teuchos::ESide side, Teuchos::EUplo uplo, Teuchos::ETransp transa, Teuchos::EDiag diag, const OrdinalType m, const OrdinalType n, const alpha_type &amp;alpha, const A_type *A, const OrdinalType lda, FadType *B, const OrdinalType ldb) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Kokkos::Example::BoxElemFixture</name>
    <filename>classKokkos_1_1Example_1_1BoxElemFixture.html</filename>
    <templarg></templarg>
    <templarg>Order</templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>SpaceDim</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>aff4619ae23716cf39b69ecd0d956693ca6060f87b64855c5129d1059340a20926</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ElemNode</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a723fee3af5f66bb126657e6f09e020c6a29f18315b21915a67f3acaad4f11263a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SpaceDim</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>aff4619ae23716cf39b69ecd0d956693ca6060f87b64855c5129d1059340a20926</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ElemNode</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a723fee3af5f66bb126657e6f09e020c6a29f18315b21915a67f3acaad4f11263a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Device</type>
      <name>execution_space</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a976f84ad3f45df873d029cfccd38abfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; const unsigned *[ElemNode], Device &gt;</type>
      <name>elem_node_type</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a504f9b639ccb93d7459f6ffc16080956</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; const double *[SpaceDim], Device &gt;</type>
      <name>node_coord_type</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a00fadf4be2bd8cfaa5e7c3acbb26da27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; const unsigned *[SpaceDim], Device &gt;</type>
      <name>node_grid_type</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a23d08cff85b321abec4fffcd715eaabd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; const unsigned *[2], Device &gt;</type>
      <name>comm_list_type</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>aaa79355044454a73fab45376c237919a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; const unsigned *, Device &gt;</type>
      <name>send_nodeid_type</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a30bc7238e41996ecdf70a092585c93c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Device</type>
      <name>execution_space</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a976f84ad3f45df873d029cfccd38abfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; const unsigned *[ElemNode], Device &gt;</type>
      <name>elem_node_type</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a504f9b639ccb93d7459f6ffc16080956</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; const double *[SpaceDim], Device &gt;</type>
      <name>node_coord_type</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a00fadf4be2bd8cfaa5e7c3acbb26da27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; const unsigned *[SpaceDim], Device &gt;</type>
      <name>node_grid_type</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a23d08cff85b321abec4fffcd715eaabd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; const unsigned *[2], Device &gt;</type>
      <name>comm_list_type</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>aaa79355044454a73fab45376c237919a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; const unsigned *, Device &gt;</type>
      <name>send_nodeid_type</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a30bc7238e41996ecdf70a092585c93c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SpaceDim</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>aff4619ae23716cf39b69ecd0d956693ca6060f87b64855c5129d1059340a20926</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ElemNode</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a723fee3af5f66bb126657e6f09e020c6a29f18315b21915a67f3acaad4f11263a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>node_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a9d7739640dadf2b0447ea49c326802f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>node_count_owned</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a5bde83fecf2d6042307fcee5120ddb2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>node_count_global</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a35fd9d989cb2015ad065e9fb875894ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>elem_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>ab9477ec9c59acc824a136600289d7791</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>elem_count_global</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a46e82b6afabe0f1e31e76af40f06ac5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>elem_node_local</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a281fad07469b1c9f378807c182ebf43d</anchor>
      <arglist>(unsigned inode, unsigned k) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>node_grid</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a2efee773193bf65026cfc09b8771de85</anchor>
      <arglist>(unsigned inode, unsigned iaxis) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION size_t</type>
      <name>node_global_index</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a924cb35afba1cd767263f527be36785f</anchor>
      <arglist>(unsigned local) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION double</type>
      <name>node_coord</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a7926ddc532866f371ae4dcf6ea01e301</anchor>
      <arglist>(unsigned inode, unsigned iaxis) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>node_grid_max</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a59e1a3a9ea648354f202a5e34e4fc8a2</anchor>
      <arglist>(unsigned iaxis) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>elem_node</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a66296391066d5df1da0acc4a447f7ad9</anchor>
      <arglist>(unsigned ielem, unsigned inode) const </arglist>
    </member>
    <member kind="function">
      <type>elem_node_type</type>
      <name>elem_node</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a0193c2997a4fd73862cb2fd18bb910ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node_coord_type</type>
      <name>node_coord</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a86cbc191d16d7f17a0bbec39780e3db4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node_grid_type</type>
      <name>node_grid</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a09f8a4e33854fbfc76f9e0034e5e33da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>comm_list_type</type>
      <name>recv_node</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>aa370c394534b29d59da8d815f2a4dbe1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>comm_list_type</type>
      <name>send_node</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>aced69bbfdc416a2b6df18ad33d018f15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>send_nodeid_type</type>
      <name>send_nodeid</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a8cbeda1b6544a21d00505013be93e381</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>BoxElemFixture</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a78e44b3f1f453a9a52d956ea8c231917</anchor>
      <arglist>(const BoxElemFixture &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>BoxElemFixture &amp;</type>
      <name>operator=</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a9b238748a6cfb37304de0c8c304da2fd</anchor>
      <arglist>(const BoxElemFixture &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxElemFixture</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a6417bbfd55f62e76265a2a2ee15af4b1</anchor>
      <arglist>(const BoxElemPart::Decompose decompose, const unsigned global_size, const unsigned global_rank, const unsigned elem_nx, const unsigned elem_ny, const unsigned elem_nz, const double bubble_x=1.1, const double bubble_y=1.2, const double bubble_z=1.3)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a4379ecb2f90a6e40ce0ebbb8f305d6a4</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>node_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a9d7739640dadf2b0447ea49c326802f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>node_count_owned</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a5bde83fecf2d6042307fcee5120ddb2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>node_count_global</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a35fd9d989cb2015ad065e9fb875894ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>elem_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>ab9477ec9c59acc824a136600289d7791</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>elem_count_global</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a46e82b6afabe0f1e31e76af40f06ac5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>elem_node_local</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a281fad07469b1c9f378807c182ebf43d</anchor>
      <arglist>(unsigned inode, unsigned k) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>node_grid</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a2efee773193bf65026cfc09b8771de85</anchor>
      <arglist>(unsigned inode, unsigned iaxis) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION size_t</type>
      <name>node_global_index</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a924cb35afba1cd767263f527be36785f</anchor>
      <arglist>(unsigned local) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION double</type>
      <name>node_coord</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a7926ddc532866f371ae4dcf6ea01e301</anchor>
      <arglist>(unsigned inode, unsigned iaxis) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>node_grid_max</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a59e1a3a9ea648354f202a5e34e4fc8a2</anchor>
      <arglist>(unsigned iaxis) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>elem_node</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a66296391066d5df1da0acc4a447f7ad9</anchor>
      <arglist>(unsigned ielem, unsigned inode) const </arglist>
    </member>
    <member kind="function">
      <type>elem_node_type</type>
      <name>elem_node</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a0193c2997a4fd73862cb2fd18bb910ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node_coord_type</type>
      <name>node_coord</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a86cbc191d16d7f17a0bbec39780e3db4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node_grid_type</type>
      <name>node_grid</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a09f8a4e33854fbfc76f9e0034e5e33da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>comm_list_type</type>
      <name>recv_node</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>aa370c394534b29d59da8d815f2a4dbe1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>comm_list_type</type>
      <name>send_node</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>aced69bbfdc416a2b6df18ad33d018f15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>send_nodeid_type</type>
      <name>send_nodeid</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a8cbeda1b6544a21d00505013be93e381</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>BoxElemFixture</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a78e44b3f1f453a9a52d956ea8c231917</anchor>
      <arglist>(const BoxElemFixture &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>BoxElemFixture &amp;</type>
      <name>operator=</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a9b238748a6cfb37304de0c8c304da2fd</anchor>
      <arglist>(const BoxElemFixture &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxElemFixture</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a6417bbfd55f62e76265a2a2ee15af4b1</anchor>
      <arglist>(const BoxElemPart::Decompose decompose, const unsigned global_size, const unsigned global_rank, const unsigned elem_nx, const unsigned elem_ny, const unsigned elem_nz, const double bubble_x=1.1, const double bubble_y=1.2, const double bubble_z=1.3)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a4379ecb2f90a6e40ce0ebbb8f305d6a4</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Kokkos::Example::HexElement_TensorData&lt; ElemNode &gt;</type>
      <name>hex_data</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a6c2a56ce764c44b905fdbfbb61144974</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Kokkos::Example::HexElement_TensorData&lt; ElemNode &gt;</type>
      <name>hex_data</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a6c2a56ce764c44b905fdbfbb61144974</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Kokkos::Example::BoxElemPart</type>
      <name>m_box_part</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a593833cdc327e589d1d2f49c46f3421b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CoordinateMap</type>
      <name>m_coord_map</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>aab820cbe238796dbd62ffcae4dc4bc5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Kokkos::View&lt; double *[SpaceDim], Device &gt;</type>
      <name>m_node_coord</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a741c02d8debc9275dcd7a7635bddc274</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Kokkos::View&lt; unsigned *[SpaceDim], Device &gt;</type>
      <name>m_node_grid</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a8e5110f60a98feb1638376dbbd7d7823</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Kokkos::View&lt; unsigned *[ElemNode], Device &gt;</type>
      <name>m_elem_node</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a3e959cc15011fad031bb70f9dfd0892d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Kokkos::View&lt; unsigned *[2], Device &gt;</type>
      <name>m_recv_node</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>abb3a6a6c44386ffb80b5a0428eb75c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Kokkos::View&lt; unsigned *[2], Device &gt;</type>
      <name>m_send_node</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a8a83e0be113341ecd1d166e16c011674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Kokkos::View&lt; unsigned *, Device &gt;</type>
      <name>m_send_node_id</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a17da1e394e11582710f1563c5089f0ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned char</type>
      <name>m_elem_node_local</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemFixture.html</anchorfile>
      <anchor>a3b40312c792e3bb5cbee7eca4c7f34d8</anchor>
      <arglist>[ElemNode][4]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Kokkos::Example::BoxElemPart</name>
    <filename>classKokkos_1_1Example_1_1BoxElemPart.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Decompose</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a5a9b1b237878cb6fdb1449b5eb74c963</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecomposeNode</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a5a9b1b237878cb6fdb1449b5eb74c963a94033eeefa087551f98c85dc33f2b047</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecomposeElem</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a5a9b1b237878cb6fdb1449b5eb74c963a97c3af0b60886f3f507e6d07a09bbcbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecomposeNode</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a5a9b1b237878cb6fdb1449b5eb74c963a94033eeefa087551f98c85dc33f2b047</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecomposeElem</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a5a9b1b237878cb6fdb1449b5eb74c963a97c3af0b60886f3f507e6d07a09bbcbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ElemOrder</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a3ce6cd9cb168414ee506b4f196680227</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ElemLinear</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a3ce6cd9cb168414ee506b4f196680227a671e309b7bf2004c300b2cfb8cede0ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ElemQuadratic</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a3ce6cd9cb168414ee506b4f196680227a4fe198d76fddc5765eb6164146fac895</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ElemLinear</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a3ce6cd9cb168414ee506b4f196680227a671e309b7bf2004c300b2cfb8cede0ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ElemQuadratic</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a3ce6cd9cb168414ee506b4f196680227a4fe198d76fddc5765eb6164146fac895</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Decompose</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a5a9b1b237878cb6fdb1449b5eb74c963</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecomposeNode</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a5a9b1b237878cb6fdb1449b5eb74c963a94033eeefa087551f98c85dc33f2b047</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecomposeElem</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a5a9b1b237878cb6fdb1449b5eb74c963a97c3af0b60886f3f507e6d07a09bbcbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecomposeNode</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a5a9b1b237878cb6fdb1449b5eb74c963a94033eeefa087551f98c85dc33f2b047</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecomposeElem</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a5a9b1b237878cb6fdb1449b5eb74c963a97c3af0b60886f3f507e6d07a09bbcbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ElemOrder</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a3ce6cd9cb168414ee506b4f196680227</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ElemLinear</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a3ce6cd9cb168414ee506b4f196680227a671e309b7bf2004c300b2cfb8cede0ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ElemQuadratic</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a3ce6cd9cb168414ee506b4f196680227a4fe198d76fddc5765eb6164146fac895</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ElemLinear</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a3ce6cd9cb168414ee506b4f196680227a671e309b7bf2004c300b2cfb8cede0ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ElemQuadratic</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a3ce6cd9cb168414ee506b4f196680227a4fe198d76fddc5765eb6164146fac895</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecomposeNode</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a5a9b1b237878cb6fdb1449b5eb74c963a94033eeefa087551f98c85dc33f2b047</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DecomposeElem</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a5a9b1b237878cb6fdb1449b5eb74c963a97c3af0b60886f3f507e6d07a09bbcbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ElemLinear</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a3ce6cd9cb168414ee506b4f196680227a671e309b7bf2004c300b2cfb8cede0ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ElemQuadratic</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a3ce6cd9cb168414ee506b4f196680227a4fe198d76fddc5765eb6164146fac895</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxElemPart</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a3562c0e26206c60ee9fbd5b3bccdbc68</anchor>
      <arglist>(const ElemOrder elem_order, const Decompose decompose, const unsigned global_size, const unsigned global_rank, const unsigned elem_nx, const unsigned elem_ny, const unsigned elem_nz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION size_t</type>
      <name>global_elem_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>acb33f392c2e70fa6ba50b15fac3a778c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION size_t</type>
      <name>global_node_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a8a43308a8be7ca43f3c16ee1e6cdd1ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION size_t</type>
      <name>uses_elem_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>af1fd42ad61b887b083032dfc739cd672</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION size_t</type>
      <name>owns_node_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>ad1e9494a672024f6c65b74740ba3c47e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION size_t</type>
      <name>uses_node_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a2cf7aa121215bc6ccbcd85856f324855</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION size_t</type>
      <name>uses_elem_offset</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a8f336383adeef6545aa17a9ebaf07612</anchor>
      <arglist>(const unsigned ix, const unsigned iy, const unsigned iz) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>uses_elem_coord</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>ada232983d914c32056b09a94b9e0ea6d</anchor>
      <arglist>(size_t lid, unsigned c[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>global_coord_max</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a6e7a4b4407a71d5a6ea1256f032c6ad0</anchor>
      <arglist>(unsigned axis) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>local_node_coord</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>ae2238a8e7cf0e97ab2efa7902fbe7738</anchor>
      <arglist>(size_t lid, unsigned coord[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>local_node_id</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a5b87a2b6a4f64496bdecd3e3385175d4</anchor>
      <arglist>(const unsigned c[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION size_t</type>
      <name>global_node_id</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a386e046e029ae4cddcc5e39d3a389acc</anchor>
      <arglist>(const unsigned c[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>recv_node_msg_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a44047cbe450963fef3d2bc1a3a80f0e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>recv_node_rank</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a5f4bd5f9acf4852c117bc24a19a6fc77</anchor>
      <arglist>(unsigned msg) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>recv_node_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a537a8cbeffc3de3b62d713415dce797e</anchor>
      <arglist>(unsigned msg) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>send_node_msg_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a2e4abdf2c46bd1dacc69ba0b6a7e6ce6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>send_node_rank</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a7ca24ee5074a80a462e29e7170dcc45a</anchor>
      <arglist>(unsigned msg) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>send_node_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a511a8f7fe3874af24a5a7379e1aab5e5</anchor>
      <arglist>(unsigned msg) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>send_node_id_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>afd8a920a00905402dc3461ff60f4f6d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>send_node_id</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a89916d466f6e5c1cacf61b6a1c8c7556</anchor>
      <arglist>(unsigned item) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>ad65bc24c61e983591950a441b91a1c4c</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxElemPart</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a3562c0e26206c60ee9fbd5b3bccdbc68</anchor>
      <arglist>(const ElemOrder elem_order, const Decompose decompose, const unsigned global_size, const unsigned global_rank, const unsigned elem_nx, const unsigned elem_ny, const unsigned elem_nz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION size_t</type>
      <name>global_elem_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>acb33f392c2e70fa6ba50b15fac3a778c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION size_t</type>
      <name>global_node_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a8a43308a8be7ca43f3c16ee1e6cdd1ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION size_t</type>
      <name>uses_elem_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>af1fd42ad61b887b083032dfc739cd672</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION size_t</type>
      <name>owns_node_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>ad1e9494a672024f6c65b74740ba3c47e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION size_t</type>
      <name>uses_node_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a2cf7aa121215bc6ccbcd85856f324855</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION size_t</type>
      <name>uses_elem_offset</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a8f336383adeef6545aa17a9ebaf07612</anchor>
      <arglist>(const unsigned ix, const unsigned iy, const unsigned iz) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>uses_elem_coord</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>ada232983d914c32056b09a94b9e0ea6d</anchor>
      <arglist>(size_t lid, unsigned c[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>global_coord_max</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a6e7a4b4407a71d5a6ea1256f032c6ad0</anchor>
      <arglist>(unsigned axis) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>local_node_coord</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>ae2238a8e7cf0e97ab2efa7902fbe7738</anchor>
      <arglist>(size_t lid, unsigned coord[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>local_node_id</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a5b87a2b6a4f64496bdecd3e3385175d4</anchor>
      <arglist>(const unsigned c[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION size_t</type>
      <name>global_node_id</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a386e046e029ae4cddcc5e39d3a389acc</anchor>
      <arglist>(const unsigned c[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>recv_node_msg_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a44047cbe450963fef3d2bc1a3a80f0e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>recv_node_rank</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a5f4bd5f9acf4852c117bc24a19a6fc77</anchor>
      <arglist>(unsigned msg) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>recv_node_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a537a8cbeffc3de3b62d713415dce797e</anchor>
      <arglist>(unsigned msg) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>send_node_msg_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a2e4abdf2c46bd1dacc69ba0b6a7e6ce6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>send_node_rank</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a7ca24ee5074a80a462e29e7170dcc45a</anchor>
      <arglist>(unsigned msg) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>send_node_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a511a8f7fe3874af24a5a7379e1aab5e5</anchor>
      <arglist>(unsigned msg) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>send_node_id_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>afd8a920a00905402dc3461ff60f4f6d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION unsigned</type>
      <name>send_node_id</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a89916d466f6e5c1cacf61b6a1c8c7556</anchor>
      <arglist>(unsigned item) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>ad65bc24c61e983591950a441b91a1c4c</anchor>
      <arglist>(std::ostream &amp;s) const </arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>PROC_NEIGH_MAX</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>abd8d55b2883a5aac6966204cb846b559a4bce9c7a8ff7aed0263fd4e3f0d9391a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>PROC_NEIGH_MAX</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>abd8d55b2883a5aac6966204cb846b559a4bce9c7a8ff7aed0263fd4e3f0d9391a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>PROC_NEIGH_MAX</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>abd8d55b2883a5aac6966204cb846b559a4bce9c7a8ff7aed0263fd4e3f0d9391a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>local</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a54a487da4f55330c5075e89b7ad4ed5b</anchor>
      <arglist>(const unsigned rank, unsigned uses_elem[][2], unsigned owns_node[][2], unsigned uses_node[][2]) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>local</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a54a487da4f55330c5075e89b7ad4ed5b</anchor>
      <arglist>(const unsigned rank, unsigned uses_elem[][2], unsigned owns_node[][2], unsigned uses_node[][2]) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>m_global_size</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a4a86d6c5e7aaa90fc0efee07b853a01d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>m_global_rank</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>acf796f21d14f0d10c086712a7f470bf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Decompose</type>
      <name>m_decompose</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a9c30f9e0034c0cdbfb0dce5bd9563cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ElemOrder</type>
      <name>m_elem_order</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a8505300d175f4452a087ecc307c93829</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>m_global_elem_box</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>af3b9edd70cd3c69d20158c6cc3633544</anchor>
      <arglist>[3][2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>m_global_node_box</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>aed837b62c6e1e42400711f246f99dcf7</anchor>
      <arglist>[3][2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>m_uses_elem_box</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a50037a45f149dc389a56a026cc869fe6</anchor>
      <arglist>[3][2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>m_uses_node_box</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a0d278a118fb084596f92db630eef67ea</anchor>
      <arglist>[3][2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>m_owns_node_box</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a692ba46d6e56dc34363fd2174f8f3481</anchor>
      <arglist>[PROC_NEIGH_MAX][3][2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>m_owns_node</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a0e865ea33cbecf98ac572014ce105157</anchor>
      <arglist>[           PROC_NEIGH_MAX][2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>m_owns_node_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>aa5ac94ddd5e4a196324badd7f23f5a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>m_send_node_box</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a4ace22922e18bf2e6b739e98a3b12dd9</anchor>
      <arglist>[PROC_NEIGH_MAX][3][2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>m_send_node</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>a020cf85c4b346fbcda733cf426d25178</anchor>
      <arglist>[           PROC_NEIGH_MAX][2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>m_send_node_count</name>
      <anchorfile>classKokkos_1_1Example_1_1BoxElemPart.html</anchorfile>
      <anchor>aaa5351d85d3e78500dcdeb8a32b8d929</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::TemplateManager::BuildObject</name>
    <filename>structSacado_1_1TemplateManager_1_1BuildObject.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BuildObject</name>
      <anchorfile>structSacado_1_1TemplateManager_1_1BuildObject.html</anchorfile>
      <anchor>ac0c8c8062b5e8a29086227b6fdc24df0</anchor>
      <arglist>(std::vector&lt; Teuchos::RCP&lt; BaseT &gt; &gt; &amp;objects_, const BuilderOpT &amp;builder_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structSacado_1_1TemplateManager_1_1BuildObject.html</anchorfile>
      <anchor>ae760e0a449c2873180aaddaeaae775c1</anchor>
      <arglist>(T) const </arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Teuchos::RCP&lt; BaseT &gt; &gt; *</type>
      <name>objects</name>
      <anchorfile>structSacado_1_1TemplateManager_1_1BuildObject.html</anchorfile>
      <anchor>a92b26eddfbf79c9db140d8d216067329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BuilderOpT &amp;</type>
      <name>builder</name>
      <anchorfile>structSacado_1_1TemplateManager_1_1BuildObject.html</anchorfile>
      <anchor>a0c8d27d44134796a60dafccb00e65891</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>C</name>
    <filename>structC.html</filename>
    <base>A</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::CacheTaylor</name>
    <filename>classSacado_1_1Tay_1_1CacheTaylor.html</filename>
    <templarg>T</templarg>
    <base>Sacado::Tay::Expr&lt; CacheTaylorImplementation&lt; T &gt; &gt;</base>
    <class kind="struct">Sacado::Tay::CacheTaylor::apply</class>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>abfbb6cfce0894c00b7df933b25f714af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; T &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a6b969eeb744961e45b6ecdc5cf27159e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a9306982574334cfae0678c1bc9fc1163</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Tay::CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>aa5a929a4002f25771d902e6e82640ef5</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Tay::CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>abc613b849be18e6d14d29394bb39046d</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Tay::CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a8a6e119f3c7bd016bfd733e847308bac</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Tay::CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a4a0c21ad30feb04562ba77ee04bf2d21</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Tay::CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>aae545cf8c22127d834dc8f0c471cbbc8</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>aafdfffcd83f57ba5d3d12794b8b4bf44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>accbb3ca57de860cc96b3238c180a419b</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a541977db31824448c418079379640ddc</anchor>
      <arglist>(const typename dummy&lt; value_type, scalar_type &gt;::type &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a6faccc83ad8554f5c1c2070caae9db16</anchor>
      <arglist>(int d, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a5594b4bfc9de9bded65224b2f128494d</anchor>
      <arglist>(const CacheTaylor &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylor</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a8ba618a5c3dd3a153a2856bd47c7d4bc</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a302ba36658e27564e9c63c1fd7847771</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>ac2340c0db6955c02e9b7322f51928cb3</anchor>
      <arglist>(const typename dummy&lt; value_type, scalar_type &gt;::type &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a8aef747ac22d93aff7b7bd14d455fa58</anchor>
      <arglist>(const CacheTaylor&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a3d6b3588270af9b4651d85ec2f7ca4bc</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Expr&lt; UnaryExpr&lt; CacheTaylor&lt; T &gt;, UnaryPlusOp &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a928430fc3adf94e8df7b2949b64d2ad7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Expr&lt; UnaryExpr&lt; CacheTaylor&lt; T &gt;, UnaryMinusOp &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>ad86cbc440c5c9cbd927648e97440bdc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a2542d1ddc77cf2e424b0d0b61dabe23e</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a5870c73429a96a265d819446c09f75a3</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>afe30b71ae0b1d5f51f4816eb95b28908</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a4b9941b6711603718fd33821ae0e4727</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a9955ad45dcd4575797bf3b80db8284eb</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>ae59aa01957dd714cdb3bba07099f037f</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>a34fb19cf5d2d0bef4b97bca9c1f84478</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylor.html</anchorfile>
      <anchor>aa20fd4a2d698e32350837e07659b5091</anchor>
      <arglist>(const S &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::CacheTaylorImplementation</name>
    <filename>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a138ee3b8b481853981ea29895c3d644e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; T &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a805073c4f701cbed09ba238d29075d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylorImplementation</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>aa94366f43a7533f3e1066c35d3e52ebc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylorImplementation</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a38382e221e3a5561829f6c6dfbd296b7</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylorImplementation</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a83a9227f0e4420cb1fcbf779b95a1b98</anchor>
      <arglist>(int d, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylorImplementation</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a2c41a3646d66008165c2c9a6ff2751ed</anchor>
      <arglist>(const CacheTaylorImplementation &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CacheTaylorImplementation</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>af0e0427ce1e5d28cc62cc5d5f6492daf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a78cad411da6a229eb807fb4145f89f25</anchor>
      <arglist>(int d, bool keep_coeffs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resizeCoeffs</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>ab79b4ef9da9159827b76ff5af3459b22</anchor>
      <arglist>(int dnew)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>coeff_size</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>adbed3d1b9431ac879b2f1247ece8d502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::valarray&lt; T &gt;</type>
      <name>coeff_</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>ad0c00dc0ef43cc0fdef94122bb9c453d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>ac572cd4942bad5d9f9b709955b889057</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>adfbdb98445e2ae0bf712807b1c7250ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a4e8752857833ae86914949f7d721a7eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a4084cf02e620458f973701f2db8655ed</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>const std::valarray&lt; T &gt; &amp;</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a0a2d6c29d70c63146e9e53fe4a9ab372</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>ab504d458d8ccf1516e6b0db749b4a125</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a7939f9371d18e4353333045c2d3b568c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a1425c1d4643c3f946b98c975e3dde477</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a052fa24cd4749ee5a8a4ed3b901f1f71</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a2a978fe4a6850e2a04747306928dd4fc</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1Tay_1_1CacheTaylorImplementation.html</anchorfile>
      <anchor>a5f4655ef86fcdbd924ee942596dfa68e</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CacheTaylorOpsUnitTest</name>
    <filename>classCacheTaylorOpsUnitTest.html</filename>
    <base>TaylorOpsUnitTest&lt; Sacado::Tay::CacheTaylor&lt; double &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>CacheTaylorOpsUnitTest</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a2233a495e5bf4b7f41bf205a60075209</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheTaylorOpsUnitTest</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>acd2ac2238cd5a577edba197a247a63b1</anchor>
      <arglist>(int degree, double absolute_tolerance, double relative_tolerance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CacheTaylorOpsUnitTest</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>abf023107d475f502cfff11b0d9713cff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testMax</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a77aa9a75c6ae3d757656e71d789f380d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testMin</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a5f191344b1b563740a8f4955789c6031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a87615a89872737b3269e7e8095174f18</anchor>
      <arglist>(CacheTaylorOpsUnitTest)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_OP_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>abab1fde2102791e5e1e130faf858c299</anchor>
      <arglist>(testAddition)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_OP_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a754b074246b1414dbc31b3790d80b762</anchor>
      <arglist>(testSubtraction)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_OP_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>acf5babc765410e664a2faf47279d050f</anchor>
      <arglist>(testMultiplication)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_OP_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>aaa78e9c0d5e2168a2245ebea976a3969</anchor>
      <arglist>(testDivision)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_RELOP_OP_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a400452ed2b52eaa87a80d3a9e67736df</anchor>
      <arglist>(testEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_RELOP_OP_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a5e731a93f55072e90fd0343d14f5d6ee</anchor>
      <arglist>(testNotEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_RELOP_OP_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>affd08ad05c756c80dc3cdf62b2dde106</anchor>
      <arglist>(testLessThanOrEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_RELOP_OP_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>afb28f95715c0accf2a6dc065edff10c9</anchor>
      <arglist>(testGreaterThanOrEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_RELOP_OP_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a90831ff12fcceef87d68099ac1220c80</anchor>
      <arglist>(testLessThan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_RELOP_OP_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a82e556b6665d62630fc2a63334c87d7f</anchor>
      <arglist>(testGreaterThan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_FUNC_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a6475a44af21c68abc4098be3139dc010</anchor>
      <arglist>(testPow)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_FUNC_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>ac2ff361c2c6a5247d412dfc620fcbc42</anchor>
      <arglist>(testMax)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_FUNC_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>ac3a44944441d4cd5133e31edba1619c5</anchor>
      <arglist>(testMin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>aeedbab7be46013c42a7dfe710e69fa9d</anchor>
      <arglist>(testUnaryPlus)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a3f553a637d8829a0febbdd82d2a6436c</anchor>
      <arglist>(testUnaryMinus)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>ae343896ec2412d26dbc51c98e6b3d5d4</anchor>
      <arglist>(testExp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a85b98d2031d6937fdb4854e73c07340a</anchor>
      <arglist>(testLog)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a8423b5397b71e84ae2c798ce8a52b63a</anchor>
      <arglist>(testLog10)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>ac5d2033d9b4607724bd8ab74dec26c8d</anchor>
      <arglist>(testSqrt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a815eed095bdbd74b03f4da25aa0a910b</anchor>
      <arglist>(testCos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>ad9c3ea65101ba5a93a9aa2c8a1a900ed</anchor>
      <arglist>(testSin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>af3d3e25f37570cbd138b07da3b968ae8</anchor>
      <arglist>(testTan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a99a55ea3baff83b61c24b15f0ac3899c</anchor>
      <arglist>(testACos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a0fc803f26595abd0cf36cef2590f9aa9</anchor>
      <arglist>(testASin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a486175652ed609a0f0c2d75f5edac57a</anchor>
      <arglist>(testATan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a8b67dac2416c569443774b7d08fe57cb</anchor>
      <arglist>(testCosh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a5cee518f30f9bdacded6520b29aac402</anchor>
      <arglist>(testSinh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a6b588a85c83f0649b227c21cab333a1e</anchor>
      <arglist>(testTanh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>af90c3d255f9f9882bdc54d0d1f8c0e2b</anchor>
      <arglist>(testFAbs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa6c8e54fc8ecb3db79311fa57baeca43</anchor>
      <arglist>(testPlusEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>ab3a58a6a9ffef0c968653d0223e73333</anchor>
      <arglist>(testMinusEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a5973604093d0e460ae1234d09b6142c2</anchor>
      <arglist>(testTimesEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>ac303dd4f7edde9bd37fcf25af8533567</anchor>
      <arglist>(testDivideEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>af7a526d49d0241927a30300564b0dca7</anchor>
      <arglist>(testComposite1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_END</name>
      <anchorfile>classCacheTaylorOpsUnitTest.html</anchorfile>
      <anchor>a0e40b95d5a4e9702921cdbffcf88bad6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::CADcontext</name>
    <filename>classSacado_1_1Radnt_1_1CADcontext.html</filename>
    <base>Sacado::Radnt::ADcontext</base>
    <member kind="function">
      <type></type>
      <name>CADcontext</name>
      <anchorfile>classSacado_1_1Radnt_1_1CADcontext.html</anchorfile>
      <anchor>a53d323b48fa3503a6bc2ffee479db8c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>One</name>
      <anchorfile>classSacado_1_1Radnt_1_1CADcontext.html</anchorfile>
      <anchor>a9e6cf85d1829b9055999dc01e32d7f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>negOne</name>
      <anchorfile>classSacado_1_1Radnt_1_1CADcontext.html</anchorfile>
      <anchor>aaa6ed25e1d4269a32be91e292629bfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>fpval_implies_const</name>
      <anchorfile>classSacado_1_1Radnt_1_1CADcontext.html</anchorfile>
      <anchor>a93343fd58104e5212b744bb851d57f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1CADcontext.html</anchorfile>
      <anchor>a3a881fa626c8a5fe214728b4532f2fd0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::CADcontext</name>
    <filename>classSacado_1_1Rad2d_1_1CADcontext.html</filename>
    <base>Sacado::Rad2d::ADcontext</base>
    <member kind="function">
      <type></type>
      <name>CADcontext</name>
      <anchorfile>classSacado_1_1Rad2d_1_1CADcontext.html</anchorfile>
      <anchor>a2e852202fe09fdc635d9d1c9a1b76875</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>One</name>
      <anchorfile>classSacado_1_1Rad2d_1_1CADcontext.html</anchorfile>
      <anchor>aebafc75c8e3a1a32afc9eec6d3c1bf10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>negOne</name>
      <anchorfile>classSacado_1_1Rad2d_1_1CADcontext.html</anchorfile>
      <anchor>adf2a36db94ffd1eee0e82b830396fdae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>fpval_implies_const</name>
      <anchorfile>classSacado_1_1Rad2d_1_1CADcontext.html</anchorfile>
      <anchor>a77a3267dcbbc3e285fd078d93b22fe60</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1CADcontext.html</anchorfile>
      <anchor>a3a881fa626c8a5fe214728b4532f2fd0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::CADcontext</name>
    <filename>classSacado_1_1Rad_1_1CADcontext.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad::ADcontext</base>
    <member kind="function">
      <type></type>
      <name>CADcontext</name>
      <anchorfile>classSacado_1_1Rad_1_1CADcontext.html</anchorfile>
      <anchor>a9e5ba44b4d5400986e379faf083b780a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>fpval_implies_const</name>
      <anchorfile>classSacado_1_1Rad_1_1CADcontext.html</anchorfile>
      <anchor>aeb92a50f2261ed1572cbe0f4bb2ff037</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvar&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1Rad_1_1CADcontext.html</anchorfile>
      <anchor>a8ca24241911fb1b9c51128cf2a710b79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::CADcontext</name>
    <filename>classSacado_1_1Rad2_1_1CADcontext.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad2::ADcontext</base>
    <member kind="function">
      <type></type>
      <name>CADcontext</name>
      <anchorfile>classSacado_1_1Rad2_1_1CADcontext.html</anchorfile>
      <anchor>a1fbfd5baeef11c5804cb0dc2fbaee3eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>fpval_implies_const</name>
      <anchorfile>classSacado_1_1Rad2_1_1CADcontext.html</anchorfile>
      <anchor>a94e7cb48ef48fa9e2a9116e5418fd50c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvar&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1Rad2_1_1CADcontext.html</anchorfile>
      <anchor>a8ca24241911fb1b9c51128cf2a710b79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::CADcontext</name>
    <filename>classSacado_1_1RadVec_1_1CADcontext.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::RadVec::ADcontext</base>
    <member kind="function">
      <type></type>
      <name>CADcontext</name>
      <anchorfile>classSacado_1_1RadVec_1_1CADcontext.html</anchorfile>
      <anchor>af6e40a1d66f5527083cc7d65dfcb18c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>fpval_implies_const</name>
      <anchorfile>classSacado_1_1RadVec_1_1CADcontext.html</anchorfile>
      <anchor>a5bb3b04de0a6a3e7334402c14fe3d93b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvar&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1RadVec_1_1CADcontext.html</anchorfile>
      <anchor>a8ca24241911fb1b9c51128cf2a710b79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::convertible_impl::checker</name>
    <filename>structSacado_1_1mpl_1_1convertible__impl_1_1checker.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static From &amp;</type>
      <name>f</name>
      <anchorfile>structSacado_1_1mpl_1_1convertible__impl_1_1checker.html</anchorfile>
      <anchor>a2809af4647baefc50c6356a99453e03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1convertible__impl_1_1checker.html</anchorfile>
      <anchor>aa85f569dbffa0fa8935570d890e846f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::MemPool::Chunk</name>
    <filename>structSacado_1_1Fad_1_1MemPool_1_1Chunk.html</filename>
    <member kind="variable">
      <type>Chunk *</type>
      <name>next</name>
      <anchorfile>structSacado_1_1Fad_1_1MemPool_1_1Chunk.html</anchorfile>
      <anchor>aed1c01eda8d99b2cefa073be126112a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>mem</name>
      <anchorfile>structSacado_1_1Fad_1_1MemPool_1_1Chunk.html</anchorfile>
      <anchor>a0293281468780cfa55ff3b3823dd8a60</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ConstADvar</name>
    <filename>classSacado_1_1Radnt_1_1ConstADvar.html</filename>
    <base>Sacado::Radnt::ADvar</base>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvar.html</anchorfile>
      <anchor>ab27722e241f6b756b0f72de4d2b8c269</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvar.html</anchorfile>
      <anchor>ae6d9ba406a0dc450d89ce755bc505cf0</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvar.html</anchorfile>
      <anchor>a37a20e1cdb74039c49875f6708ec5b30</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvar.html</anchorfile>
      <anchor>a3340fad521be7179b46218c2cae3eddd</anchor>
      <arglist>(const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvar.html</anchorfile>
      <anchor>a94c156847bbc67f0cb361e75ebe6bd87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvar.html</anchorfile>
      <anchor>a8ca524e9cc0cc56e0e8833df81f49128</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvar.html</anchorfile>
      <anchor>a176c2fd39c8dca01a68e15c92320ea2e</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>ConstADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvar.html</anchorfile>
      <anchor>a4ca5a5495ab4fdb62154e9af6240ec9f</anchor>
      <arglist>(const IndepADvar &amp;d)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvar.html</anchorfile>
      <anchor>a99a1dccf0babf45dd9756b7eccdf252a</anchor>
      <arglist>(const ADvari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvar.html</anchorfile>
      <anchor>aa6347d78bbae49b8fb11ecca4ed73dca</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvar.html</anchorfile>
      <anchor>add1980d65291918f945ffd64ad563d4d</anchor>
      <arglist>(const ADvari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvar.html</anchorfile>
      <anchor>a36d09feca3d19f04b2d034e1031f2dbd</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvar.html</anchorfile>
      <anchor>a7ae69ba2e3eca98abde27735f5f551e0</anchor>
      <arglist>(const ADvari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvar.html</anchorfile>
      <anchor>a2299d735f3eca3f519af0e19d38ec934</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvar.html</anchorfile>
      <anchor>a4e7b607c31c461af2797fa1ee91d9c1e</anchor>
      <arglist>(const ADvari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvar.html</anchorfile>
      <anchor>a4f703fcaae249e4115f0dcdff614cd92</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ConstADvar_ctr</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvar.html</anchorfile>
      <anchor>aa623f4ec88108100320d22306345a46b</anchor>
      <arglist>(double)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ConstADvar</name>
    <filename>classSacado_1_1Rad2d_1_1ConstADvar.html</filename>
    <base>Sacado::Rad2d::ADvar</base>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvar.html</anchorfile>
      <anchor>ab4f79d700db87b8ae8efe81d55a7c38f</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvar.html</anchorfile>
      <anchor>a6e1a9decb18892f1135c91652a081691</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvar.html</anchorfile>
      <anchor>ab426f76956fe20da85c9bdaae3a0fa53</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvar.html</anchorfile>
      <anchor>ac50c1a75f0eeea35fac7ec7925fc0236</anchor>
      <arglist>(const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvar.html</anchorfile>
      <anchor>a5f1de1b3080f07758f863d9f1be7b450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvar.html</anchorfile>
      <anchor>ae693e9040c3befc93ae8828df2518583</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvar.html</anchorfile>
      <anchor>a27e0ca6aa2010b3d9df5d536377474a4</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>ConstADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvar.html</anchorfile>
      <anchor>ad0b6ccd712cd898c98069590411782a2</anchor>
      <arglist>(const IndepADvar &amp;d)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvar.html</anchorfile>
      <anchor>a5bd13aeb975164e8b327a4b160205381</anchor>
      <arglist>(const ADvari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvar.html</anchorfile>
      <anchor>a69eb67f5e82fc4cc6dbe74e5a07c5b64</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvar.html</anchorfile>
      <anchor>ad50f156d5b65fba9e786bee846b1a576</anchor>
      <arglist>(const ADvari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvar.html</anchorfile>
      <anchor>a5743c0453bebddcc0af827839264caa2</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvar.html</anchorfile>
      <anchor>a636f43601f877531e0e63641f588ae3a</anchor>
      <arglist>(const ADvari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvar.html</anchorfile>
      <anchor>addf62f79873a3a53d6db60b5c0f70135</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvar.html</anchorfile>
      <anchor>a5d93ace20ad061e98a251c743c0d56b1</anchor>
      <arglist>(const ADvari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvar.html</anchorfile>
      <anchor>a5122c9691a850d2aedc4ab05c70622ff</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ConstADvar_ctr</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvar.html</anchorfile>
      <anchor>a60c2c57252159da50c413737679656e2</anchor>
      <arglist>(double)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ConstADvar</name>
    <filename>classSacado_1_1Rad_1_1ConstADvar.html</filename>
    <templarg></templarg>
    <base>Sacado::Rad::ADvar</base>
    <member kind="typedef">
      <type>ADvar&lt; Double &gt;</type>
      <name>ADVar</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>a9a8669535ee5962e8f15c0277a7b7977</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar::ADVar1</type>
      <name>ADVar1</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>a55bb15dcc204d03d223ae122a8412b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar::ADVari</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>ab298b9af1bfc64c3d3040f8105ee76ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar::ConstADVari</type>
      <name>ConstADVari</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>a3ff999e74ca68b878bfc3b7490b0b222</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derp&lt; Double &gt;</type>
      <name>DErp</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>ad2b74f041dcf48eeb1cc052f6240ef04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar::IndepADVar</type>
      <name>IndepADVar</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>ae2cf3ab80bc56759e16a2ecc7846db16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>a127c7e785deaa51c04df98f91a5381d0</anchor>
      <arglist>(Ttype d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>a5bd5ece4c22a8e5052b021b0f29442d8</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>a76918acd8fe51009efb7cd63cefbbb44</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>a7fb17c75846f75872080cb86af283869</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>ab218bd0ec9638a8203102004a24e0dfa</anchor>
      <arglist>(const IndepADVar &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>a79acce18a820d2db5c2916302ff8d031</anchor>
      <arglist>(const ConstADvar &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>a821026837777055ebea5099c88fb522e</anchor>
      <arglist>(const ADVari &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>a091700a81ee17a4121ae4f20d9aaa1f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>ac56678be55b15ce5482d1d2e9464b12b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>aa850e02b1bf80684e4c16d2c1a764d35</anchor>
      <arglist>(Double d)</arglist>
    </member>
    <member kind="function">
      <type>ConstADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>a33e815ceba16292d0eafc2040fad2e68</anchor>
      <arglist>(ADVari &amp;d)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>a627b5e702aae95631140d4aa0aa8d28c</anchor>
      <arglist>(ADVari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>a40bc8e509d085f5e907a37006c274614</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>a792e8328bff627a651450c0b207ccaad</anchor>
      <arglist>(ADVari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>ab073417f086895fe6d3935eeffa455ad</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>a6663b6c28d29e783767cfe1d99842548</anchor>
      <arglist>(ADVari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>a2eb0af39e5b0a430edb11e550bc5abb3</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>a17210196b9924748c94999de276f5421</anchor>
      <arglist>(ADVari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>a56443ec37de6151b43725e25d8be0e90</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ConstADvar_ctr</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvar.html</anchorfile>
      <anchor>a615f04606c453f5b37d5baa0e261782c</anchor>
      <arglist>(Double)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ConstADvar</name>
    <filename>classSacado_1_1Rad2_1_1ConstADvar.html</filename>
    <templarg></templarg>
    <base>Sacado::Rad2::ADvar</base>
    <member kind="typedef">
      <type>ADvar&lt; Double &gt;</type>
      <name>ADVar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>a1ff41e560ac87491af9c784b87737dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar::ADVari</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>ad6f914e188c273815e8bd282888ec19e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar::ConstADVari</type>
      <name>ConstADVari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>a9c29a1e2f1af88331cbcd8bf0eed1081</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derp&lt; Double &gt;</type>
      <name>DErp</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>adf202621f1737855d071c7c90bc09137</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar::IndepADVar</type>
      <name>IndepADVar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>a2e70f2acf7e0dbae852680032844915b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>adb6e65b1648a3dcf5479583c6ae52390</anchor>
      <arglist>(Ttype d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>a9e15c78d2fd399acbf51a6def46dbb8c</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>af4ded92c3150ac37488f7ba33299912d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>aa100357561c5d38d22ab4427a1d7d1db</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>a2273233971b1f6c019ad385f26ccb285</anchor>
      <arglist>(const IndepADVar &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>a2eaee0cedafef53927e814b554367b10</anchor>
      <arglist>(const ConstADvar &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>addc8fa33bd06e77cc7d5cdcd005326aa</anchor>
      <arglist>(const ADVari &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>a43f9472f1c6f6b30c334c3f5354a0c71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>ac99f83dbc1b0202b1dcbd3bf9436ba75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>a0b50775e40a100c02ac4632129840284</anchor>
      <arglist>(Double d)</arglist>
    </member>
    <member kind="function">
      <type>ConstADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>abf2a7818f72c554f3cbde2f9cc222908</anchor>
      <arglist>(ADVari &amp;d)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>a2e8428505add901707fcf4acc482a450</anchor>
      <arglist>(ADVari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>a7c28ee86adc3d5b8cd94437315caabbe</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>aa2a020dad60f93a0592cf2d627f559ce</anchor>
      <arglist>(ADVari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>a4e65d34fdeec4a7ac1bb5ab2ac220c6a</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>a7fbc443a7344904054577a6206dc95ee</anchor>
      <arglist>(ADVari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>ac0cb23d10255267067e66ee49621b3d3</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>a29068e5d8f33eba96ccb64f5684f4977</anchor>
      <arglist>(ADVari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>ab11418194a7022e37191cc637dec2d6d</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ConstADvar_ctr</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvar.html</anchorfile>
      <anchor>a45d7b634e696ac74727530f8db4203d5</anchor>
      <arglist>(Double)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ConstADvar</name>
    <filename>classSacado_1_1RadVec_1_1ConstADvar.html</filename>
    <templarg></templarg>
    <base>Sacado::RadVec::ADvar</base>
    <member kind="typedef">
      <type>ADvar&lt; Double &gt;</type>
      <name>ADVar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>ae7aaa137e1a2e661917118790a9a7c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar::ADVar1</type>
      <name>ADVar1</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>a3e133c9b66f78ef758c20c0a0aebe7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar::ADVari</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>aa6ef50dc12fb5eaea2337f223050327d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar::ConstADVari</type>
      <name>ConstADVari</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>a54b66da2dd4e63ee1d9e266e6b9c20c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derp&lt; Double &gt;</type>
      <name>DErp</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>aee5af8c1360af50fa052868a067c3992</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADVar::IndepADVar</type>
      <name>IndepADVar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>af0652fc740ea3d99a7bf9deeb76477b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>a43bb8db6d98a5b2fa77820f349c07cde</anchor>
      <arglist>(Ttype d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>a569a290ac2d3c45856ae44fa16b9b772</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>ab7aec9f76b33f8cefebe437bae50911f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>af10350c1d9cf9f567393e6e629a280e1</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>a44c652cb008a88e1900649f31eabdfee</anchor>
      <arglist>(const IndepADVar &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>a94bf6c4f2f1924d6baea464a2128932d</anchor>
      <arglist>(const ConstADvar &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>a99222623441c65379ee26ad27ddd42cd</anchor>
      <arglist>(const ADVari &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>a7a7daeb8d85eb1881bc16fed206aa80f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>af0bfc1769bebc5e76d08c7cf6c625b79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>ac4648b24d5b70222b11167b59024fbd3</anchor>
      <arglist>(Double d)</arglist>
    </member>
    <member kind="function">
      <type>ConstADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>a3f0035541e198be02a4cf1b8b2604a37</anchor>
      <arglist>(ADVari &amp;d)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>ae7223792c5b1ec0f92de4e4cdd23984d</anchor>
      <arglist>(ADVari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>a84109c4a9ac4e824a2d5fd6d140ff52c</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>a856ea074b10f43a31f1049602c613f3e</anchor>
      <arglist>(ADVari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>aae24d8c20a731970577f3776ac2fa5a7</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>a50a2cd8aa0b4b3cb59ac6b80d0200893</anchor>
      <arglist>(ADVari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>aff72cd4da4483f881de5ef681397e7b4</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>a7d065f6bd5301d1427c21f783cd2bf74</anchor>
      <arglist>(ADVari &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstADvar &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>a3ba13a9fe7b9c398936f121706a30ee2</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ConstADvar_ctr</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvar.html</anchorfile>
      <anchor>a4629af78b357f2666ce7297531b3cd8b</anchor>
      <arglist>(Double)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::ConstADvari</name>
    <filename>classSacado_1_1Radnt_1_1ConstADvari.html</filename>
    <base>Sacado::Radnt::ADvari</base>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvari.html</anchorfile>
      <anchor>ade8490a772559d6ca5a0621de249068b</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvari</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvari.html</anchorfile>
      <anchor>a02dbd4085420aeb9299621e86c3804da</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>aval_reset</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvari.html</anchorfile>
      <anchor>a8c2fcd667a6ca1942cfbbeca42caf5b8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static CADcontext</type>
      <name>cadc</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvari.html</anchorfile>
      <anchor>ad18fee2fc9989ecc0de59cde623c7cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ConstADvari</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvari.html</anchorfile>
      <anchor>a6316fdb7b224c49a463d43baee7b0b6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstADvari *</type>
      <name>prevcad</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvari.html</anchorfile>
      <anchor>aeb35d6f51b5d7d11065ee9b99d5eebf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static ConstADvari *</type>
      <name>lastcad</name>
      <anchorfile>classSacado_1_1Radnt_1_1ConstADvari.html</anchorfile>
      <anchor>aafb8384450d4d4dc2482ee16973c4da5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::ConstADvari</name>
    <filename>classSacado_1_1Rad2d_1_1ConstADvari.html</filename>
    <base>Sacado::Rad2d::ADvari</base>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvari.html</anchorfile>
      <anchor>ab21e5e030f93b8bbdf1e13d05a815be1</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvari</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvari.html</anchorfile>
      <anchor>adf96415d2b634f9e6f1b94cfe39e2f67</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>aval_reset</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvari.html</anchorfile>
      <anchor>afc8d8315847930f7c8a3758da03b515e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static CADcontext</type>
      <name>cadc</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvari.html</anchorfile>
      <anchor>aa7c81100e567021d59599ee13a11f012</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ConstADvari</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvari.html</anchorfile>
      <anchor>a761c9038368226097a3826d3b3f46a62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstADvari *</type>
      <name>prevcad</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvari.html</anchorfile>
      <anchor>a2c533a67d5b9386273c3860660e10bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static ConstADvari *</type>
      <name>lastcad</name>
      <anchorfile>classSacado_1_1Rad2d_1_1ConstADvari.html</anchorfile>
      <anchor>a2dd87c8f0d5afb34e2110b80dc9116f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::ConstADvari</name>
    <filename>classSacado_1_1Rad_1_1ConstADvari.html</filename>
    <templarg></templarg>
    <base>Sacado::Rad::ADvari</base>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvari.html</anchorfile>
      <anchor>acd0569d1cd6914b6b8d0e1e07f470c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derp&lt; Double &gt;</type>
      <name>DErp</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvari.html</anchorfile>
      <anchor>ae78be402b11bcdee73cb98f7862129f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvari.html</anchorfile>
      <anchor>a39e83bbdfd4ce36ab50730ab7ba8e0c8</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvari</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvari.html</anchorfile>
      <anchor>a6f716cbdd1c4fc4a83b25f2ca50b802a</anchor>
      <arglist>(Double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>aval_reset</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvari.html</anchorfile>
      <anchor>ace6e60cbc778c90d5e43708621eb68d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static CADcontext&lt; Double &gt;</type>
      <name>cadc</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvari.html</anchorfile>
      <anchor>a8e71fea48ef2b60039b3708893b2e473</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ConstADvari</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvari.html</anchorfile>
      <anchor>ad20134f5299280eba80740a81e4245c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ADcontext&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1Rad_1_1ConstADvari.html</anchorfile>
      <anchor>aa9651e5b79313773bc28734706ce5b7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::ConstADvari</name>
    <filename>classSacado_1_1Rad2_1_1ConstADvari.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::Rad2::ADvari</base>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvari.html</anchorfile>
      <anchor>ad919f9e49ef63b8801598cd03aec789b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derp&lt; Double &gt;</type>
      <name>DErp</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvari.html</anchorfile>
      <anchor>a43a43db3b674b813cfc64d4ec6127ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvari.html</anchorfile>
      <anchor>a5bb48789364d9630480df7ba976a05ab</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvari.html</anchorfile>
      <anchor>a7335a2705ec95b7333fe18e1b2430626</anchor>
      <arglist>(Double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>aval_reset</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvari.html</anchorfile>
      <anchor>a9376549d6ddc5744f9af01d658c4f6e3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static CADcontext&lt; Double &gt;</type>
      <name>cadc</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvari.html</anchorfile>
      <anchor>a9ac0228ebbd5c9207f8b3bce1ac8fb91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ConstADvari</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvari.html</anchorfile>
      <anchor>a7fd5b3ebe70fc63ebdfec122d2b69f3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstADvari *</type>
      <name>prevcad</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvari.html</anchorfile>
      <anchor>aae56db75f7cd019d4b20dd358376f5ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static ConstADvari *</type>
      <name>lastcad</name>
      <anchorfile>classSacado_1_1Rad2_1_1ConstADvari.html</anchorfile>
      <anchor>a80e8f6e091fed151bd1dfd431951fc91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::ConstADvari</name>
    <filename>classSacado_1_1RadVec_1_1ConstADvari.html</filename>
    <templarg>Double</templarg>
    <base>Sacado::RadVec::ADvari</base>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvari.html</anchorfile>
      <anchor>a58cad8ed76b72a539a797d157de24773</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derp&lt; Double &gt;</type>
      <name>DErp</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvari.html</anchorfile>
      <anchor>a90959371bb843f1fea6bf3d8bee12eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvari.html</anchorfile>
      <anchor>a7fc3d9ad0b396b6ab4d4798456feb674</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstADvari</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvari.html</anchorfile>
      <anchor>a0941cd6777bccf4f061d8f6d0b98ad69</anchor>
      <arglist>(Double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>aval_reset</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvari.html</anchorfile>
      <anchor>a5de61f90980e1d17a2275751a30607a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static CADcontext&lt; Double &gt;</type>
      <name>cadc</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvari.html</anchorfile>
      <anchor>aa85521f55b7532437639046e425b5943</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ConstADvari</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvari.html</anchorfile>
      <anchor>a308ccd5a667e027d84f5f67de42d36fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstADvari *</type>
      <name>prevcad</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvari.html</anchorfile>
      <anchor>afa0a9a36ca54392e0140117627c55298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static ConstADvari *</type>
      <name>lastcad</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvari.html</anchorfile>
      <anchor>ae8658d0a5722d7363b6963d1441fbd29</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADcontext&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1RadVec_1_1ConstADvari.html</anchorfile>
      <anchor>aa9651e5b79313773bc28734706ce5b7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::ConstExpr</name>
    <filename>classSacado_1_1Fad_1_1ConstExpr.html</filename>
    <templarg>ConstT</templarg>
    <member kind="typedef">
      <type>ConstT</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>ad29e9c33148405978199ed37f499db25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a471769c799f834cabdf41dbed121d50a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstT</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a29c1cd610d7eeb485aae91e2c25d9013</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>af7ce0e49807a55a23fc25d61e13e6b73</anchor>
      <arglist>(const ConstT &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const ConstT &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a2cca341a2082968b9f203eba2f3d3645</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const ConstT &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a0e1ea74c9a223eb932872f4c7fd591de</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstT &amp;</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1Fad_1_1ConstExpr.html</anchorfile>
      <anchor>a69baa7527c1880d32929795dc10797ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::ConstExpr</name>
    <filename>classSacado_1_1CacheFad_1_1ConstExpr.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ConstT</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>acc138eb861d54f33cda11acd0fc8d55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>aaa832b334db13fe027f1a5c680870f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstT</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a476c1e8276b04c659f84a2124fb6ab56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a3286534890eb94b94f7c90cba967950d</anchor>
      <arglist>(const ConstT &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ab8301207f9c580238243bbc83bf6c25e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a581f12e53f703a279f8bbb87a6f9c5ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a882a62319ec80d90873f64f50ab29abe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION value_type</type>
      <name>val</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ab33bc86ed228d34ba9672674ca53d1f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION value_type</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>aa77e9b2f6e52d0a23154cd4b0acb5964</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION value_type</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ad018fd6138cf55ae44305ffa38e298ae</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstT &amp;</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1CacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a9360da9201dba4ccb9b85bedffc14495</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::ConstExpr</name>
    <filename>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ConstT</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a6c338edd63a6ae4744336c7fafbd3b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>acfc6d30d85565c8c6d9ef2f9e8cc2780</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstT</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>ac9dd508a01890d3cb79a1c253d4a6132</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a2792ac8852dea0950d24746b16711a6b</anchor>
      <arglist>(const ConstT &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a803da2a3f88f3377f73a0842b2bf7550</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a22e20413dfa48cce69256ee87e852555</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a64940b932c35e5c5344365d8843d502e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION value_type</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a91f5fa96ed3a79c234182ec4563b35f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a55a3da9368e438ecb310e8e3aaa2c300</anchor>
      <arglist>(const value_type &amp;bar, value_type partials[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a8f26ba9f7ccbaa17823210013ebec8c1</anchor>
      <arglist>(int i, value_type dots[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION value_type</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a5472fa60d7672299bc61717a84f6ee8b</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a91583a1a538114f2fe19a1c9a447f324</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isLinear</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a5614f773b660bb4831e7444a0b86f0f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>num_args</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a9d78af29408ee384b152f0c5c8b3c82b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstT &amp;</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1ConstExpr.html</anchorfile>
      <anchor>a623f3189565c0ef7b3142097fff96034</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::ConstExpr</name>
    <filename>classSacado_1_1Tay_1_1ConstExpr.html</filename>
    <templarg>ConstT</templarg>
    <member kind="typedef">
      <type>ConstT</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>aedc474664186a942e1eb354c66c6d980</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a4de864fdff53af578a83e28b9fec11dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstT</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a094ce051fc8118facf91b0f0e59dfd95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>ad69506dd288b9aa2466b849c14fc0ea5</anchor>
      <arglist>(const ConstT &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>af3ede266918b520c4e8a3f4beaf798da</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a428b996e4697f0d854e22a2b1fbfd9e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>ac8dd283e48d44893e77332f5bda1db6e</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a5abcf5e49e5d539a2bddc41e41935fb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>af6758cd4636de6738fea92f934f0dca3</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a7cae6cbc6621dd417afabe7849fc3b37</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstT</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>ac5425c7395a5da92af5a8318e5e2b422</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::ConstExpr</name>
    <filename>classSacado_1_1ELRFad_1_1ConstExpr.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ConstT</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>a80197b201c62f456895a252201973dc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>abfe2df4032c24af977594764a6d46128</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstT</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>a8f2221b0d121db3edcfb89224003a647</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>a9b2f5ff2e06f8bd5b82cc26ab228c613</anchor>
      <arglist>(const ConstT &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>a97b04e91a0973795510ffd0bb7cd6068</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>acd342562c0e271437193f5f21adcf73a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION value_type</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>ac3a6e3ae321d4a3f67c54f7058d00569</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>a29c89095306d7115beac93cb0c6894e5</anchor>
      <arglist>(const value_type &amp;bar, value_type partials[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>a1abb49df86ea82885f358fec539dfc3b</anchor>
      <arglist>(int i, value_type dots[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION value_type</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>aab6df36e04717b992ab294bdba259d39</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>a6129da586addfac522605a500d1667aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isLinear</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>ac7fe34613418bc7049f58a817ad66d2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>num_args</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>ac8e52b9090289465eddfdf4f355d5278</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstT &amp;</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1ELRFad_1_1ConstExpr.html</anchorfile>
      <anchor>a1c9f59d33cbc79ee731536b66217df59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstExpr&lt; typename ExprT1::value_type &gt;</name>
    <filename>classSacado_1_1Tay_1_1ConstExpr.html</filename>
    <member kind="typedef">
      <type>typename ExprT1::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>aedc474664186a942e1eb354c66c6d980</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a4de864fdff53af578a83e28b9fec11dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename ExprT1::value_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a094ce051fc8118facf91b0f0e59dfd95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>ad69506dd288b9aa2466b849c14fc0ea5</anchor>
      <arglist>(const typename ExprT1::value_type &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>af3ede266918b520c4e8a3f4beaf798da</anchor>
      <arglist>(unsigned int d) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a428b996e4697f0d854e22a2b1fbfd9e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>ac8dd283e48d44893e77332f5bda1db6e</anchor>
      <arglist>(unsigned int d) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a5abcf5e49e5d539a2bddc41e41935fb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>af6758cd4636de6738fea92f934f0dca3</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a7cae6cbc6621dd417afabe7849fc3b37</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>typename ExprT1::value_type</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>ac5425c7395a5da92af5a8318e5e2b422</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstExpr&lt; typename ExprT2::value_type &gt;</name>
    <filename>classSacado_1_1Tay_1_1ConstExpr.html</filename>
    <member kind="typedef">
      <type>typename ExprT2::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>aedc474664186a942e1eb354c66c6d980</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a4de864fdff53af578a83e28b9fec11dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename ExprT2::value_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a094ce051fc8118facf91b0f0e59dfd95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstExpr</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>ad69506dd288b9aa2466b849c14fc0ea5</anchor>
      <arglist>(const typename ExprT2::value_type &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>af3ede266918b520c4e8a3f4beaf798da</anchor>
      <arglist>(unsigned int d) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a428b996e4697f0d854e22a2b1fbfd9e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>ac8dd283e48d44893e77332f5bda1db6e</anchor>
      <arglist>(unsigned int d) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a5abcf5e49e5d539a2bddc41e41935fb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>af6758cd4636de6738fea92f934f0dca3</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>a7cae6cbc6621dd417afabe7849fc3b37</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>typename ExprT2::value_type</type>
      <name>constant_</name>
      <anchorfile>classSacado_1_1Tay_1_1ConstExpr.html</anchorfile>
      <anchor>ac5425c7395a5da92af5a8318e5e2b422</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ConstTemplateIterator</name>
    <filename>classSacado_1_1ConstTemplateIterator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ConstTemplateIterator</name>
      <anchorfile>classSacado_1_1ConstTemplateIterator.html</anchorfile>
      <anchor>ad95f8686b12459fcc854be9c7c7d471c</anchor>
      <arglist>(typename std::vector&lt; Teuchos::RCP&lt; BaseT &gt; &gt;::const_iterator p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSacado_1_1ConstTemplateIterator.html</anchorfile>
      <anchor>a9a8a9c8a0feebc11c79729a374758928</anchor>
      <arglist>(const ConstTemplateIterator &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSacado_1_1ConstTemplateIterator.html</anchorfile>
      <anchor>a73e660dd7b4bbf32c22d4f2d85d8bc15</anchor>
      <arglist>(const ConstTemplateIterator &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::ConstTemplateIterator&lt; BaseT &gt;::reference</type>
      <name>operator*</name>
      <anchorfile>classSacado_1_1ConstTemplateIterator.html</anchorfile>
      <anchor>a180f84a18b65b040515d5c5d30fd486b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::ConstTemplateIterator&lt; BaseT &gt;::pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classSacado_1_1ConstTemplateIterator.html</anchorfile>
      <anchor>a3ce2576d6548bf85dbb524687b69c4c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstTemplateIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSacado_1_1ConstTemplateIterator.html</anchorfile>
      <anchor>af683582f381dd1fd6c88a56bb0f3ce0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstTemplateIterator</type>
      <name>operator++</name>
      <anchorfile>classSacado_1_1ConstTemplateIterator.html</anchorfile>
      <anchor>a561357c5df5bcd083d7b64e2afafc5ba</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; BaseT &gt;</type>
      <name>rcp</name>
      <anchorfile>classSacado_1_1ConstTemplateIterator.html</anchorfile>
      <anchor>ab92e461ead3eb2af5680304c91668fdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; BaseT &gt; &gt;::const_iterator</type>
      <name>object_iterator</name>
      <anchorfile>classSacado_1_1ConstTemplateIterator.html</anchorfile>
      <anchor>a38ab26470559451a07a3bd0f031d43f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::convertible_impl</name>
    <filename>structSacado_1_1mpl_1_1convertible__impl.html</filename>
    <class kind="struct">Sacado::mpl::convertible_impl::checker</class>
    <member kind="typedef">
      <type>char</type>
      <name>yes</name>
      <anchorfile>structSacado_1_1mpl_1_1convertible__impl.html</anchorfile>
      <anchor>aeff5565ce19490576b1e7c853935a4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char(&amp;</type>
      <name>no</name>
      <anchorfile>structSacado_1_1mpl_1_1convertible__impl.html</anchorfile>
      <anchor>a096d46a2b1bf3fa0efeaeea94a6fb194</anchor>
      <arglist>)[2]</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static yes</type>
      <name>tester</name>
      <anchorfile>structSacado_1_1mpl_1_1convertible__impl.html</anchorfile>
      <anchor>a8c67c3acbd50824915e389bebdd27059</anchor>
      <arglist>(To)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static no</type>
      <name>tester</name>
      <anchorfile>structSacado_1_1mpl_1_1convertible__impl.html</anchorfile>
      <anchor>a80946fafceba07ff55ebbdcaa6523b8c</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::CoshOp</name>
    <filename>classSacado_1_1Tay_1_1CoshOp.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1CoshOp.html</anchorfile>
      <anchor>a31b1b3f76503ea0ad41b2a97a9a333f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1CoshOp.html</anchorfile>
      <anchor>a001607b4c8773318968362a1074b54f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1CoshOp.html</anchorfile>
      <anchor>a0ccbcca6b7ca70c1227efebd32ab6615</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoshOp</name>
      <anchorfile>classSacado_1_1Tay_1_1CoshOp.html</anchorfile>
      <anchor>afdaa7f89cf4e63631e73f713c596a4b9</anchor>
      <arglist>(const ExprT &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1CoshOp.html</anchorfile>
      <anchor>aa1bf3e65d9b307e63ff414e8584f0309</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1CoshOp.html</anchorfile>
      <anchor>ab9f7cebdce3977a2639dda6a8e88516b</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1CoshOp.html</anchorfile>
      <anchor>aa7423407eabe11f107bd9095f91a26cd</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::valarray&lt; value_type &gt;</type>
      <name>c</name>
      <anchorfile>classSacado_1_1Tay_1_1CoshOp.html</anchorfile>
      <anchor>a7ff6e8c2b9c02b3362df75c646927523</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::valarray&lt; value_type &gt;</type>
      <name>s</name>
      <anchorfile>classSacado_1_1Tay_1_1CoshOp.html</anchorfile>
      <anchor>a73aaea5568e0b3b9cedf3b4fdec821f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dc</name>
      <anchorfile>classSacado_1_1Tay_1_1CoshOp.html</anchorfile>
      <anchor>a708aa879c7c8a1ab57f5f4d4ccae8416</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::CosOp</name>
    <filename>classSacado_1_1Tay_1_1CosOp.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1CosOp.html</anchorfile>
      <anchor>aec6e7e61f524605885caff1c320be876</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1CosOp.html</anchorfile>
      <anchor>ab7bdcdc3dd59422357c3db0e874d6788</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1CosOp.html</anchorfile>
      <anchor>a0e999abd88911aa190644dd8c7197e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CosOp</name>
      <anchorfile>classSacado_1_1Tay_1_1CosOp.html</anchorfile>
      <anchor>aef42fe19a331398dd813c0eff2736a56</anchor>
      <arglist>(const ExprT &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1CosOp.html</anchorfile>
      <anchor>ac9dda596f4dc77259f9cbf3f9be25dbe</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1CosOp.html</anchorfile>
      <anchor>ad1afb9f2437a9593f80b2e97f8e6c644</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1CosOp.html</anchorfile>
      <anchor>a7d5b304252801e415fa942e94f496e85</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::valarray&lt; value_type &gt;</type>
      <name>c</name>
      <anchorfile>classSacado_1_1Tay_1_1CosOp.html</anchorfile>
      <anchor>a1e00096a0597d85039300466c4d4b633</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::valarray&lt; value_type &gt;</type>
      <name>s</name>
      <anchorfile>classSacado_1_1Tay_1_1CosOp.html</anchorfile>
      <anchor>a6c2bb7174f17f02e4975f62246b8c25a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dc</name>
      <anchorfile>classSacado_1_1Tay_1_1CosOp.html</anchorfile>
      <anchor>ae5585b611cf78fa28b73a4ab5cab46bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Example::FENL::CrsMatrix</name>
    <filename>structKokkos_1_1Example_1_1FENL_1_1CrsMatrix.html</filename>
    <templarg>ValueType</templarg>
    <templarg>Space</templarg>
    <member kind="typedef">
      <type>Kokkos::StaticCrsGraph&lt; unsigned, Space, void, unsigned &gt;</type>
      <name>StaticCrsGraphType</name>
      <anchorfile>structKokkos_1_1Example_1_1FENL_1_1CrsMatrix.html</anchorfile>
      <anchor>a21722fd02fbf94c69507d89487a7a6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>View&lt; ValueType *, Space &gt;</type>
      <name>coeff_type</name>
      <anchorfile>structKokkos_1_1Example_1_1FENL_1_1CrsMatrix.html</anchorfile>
      <anchor>a362b900ccfb70d587a4a2cfab6407b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::StaticCrsGraph&lt; unsigned, Space, void, unsigned &gt;</type>
      <name>StaticCrsGraphType</name>
      <anchorfile>structKokkos_1_1Example_1_1FENL_1_1CrsMatrix.html</anchorfile>
      <anchor>a21722fd02fbf94c69507d89487a7a6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>View&lt; ValueType *, Space &gt;</type>
      <name>coeff_type</name>
      <anchorfile>structKokkos_1_1Example_1_1FENL_1_1CrsMatrix.html</anchorfile>
      <anchor>a362b900ccfb70d587a4a2cfab6407b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CrsMatrix</name>
      <anchorfile>structKokkos_1_1Example_1_1FENL_1_1CrsMatrix.html</anchorfile>
      <anchor>af4765a513e9ae13624b85f725832bacb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CrsMatrix</name>
      <anchorfile>structKokkos_1_1Example_1_1FENL_1_1CrsMatrix.html</anchorfile>
      <anchor>a83096ac521c392b826e6322961d67614</anchor>
      <arglist>(const StaticCrsGraphType &amp;arg_graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CrsMatrix</name>
      <anchorfile>structKokkos_1_1Example_1_1FENL_1_1CrsMatrix.html</anchorfile>
      <anchor>af4765a513e9ae13624b85f725832bacb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CrsMatrix</name>
      <anchorfile>structKokkos_1_1Example_1_1FENL_1_1CrsMatrix.html</anchorfile>
      <anchor>a83096ac521c392b826e6322961d67614</anchor>
      <arglist>(const StaticCrsGraphType &amp;arg_graph)</arglist>
    </member>
    <member kind="variable">
      <type>StaticCrsGraphType</type>
      <name>graph</name>
      <anchorfile>structKokkos_1_1Example_1_1FENL_1_1CrsMatrix.html</anchorfile>
      <anchor>ac7f9f1a250ec7cbd9fa94498b811140e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>coeff_type</type>
      <name>coeff</name>
      <anchorfile>structKokkos_1_1Example_1_1FENL_1_1CrsMatrix.html</anchorfile>
      <anchor>a8f8e91270efabb92830dfdfbc9ac42ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::TemplateManager::DefaultBuilderOp</name>
    <filename>structSacado_1_1TemplateManager_1_1DefaultBuilderOp.html</filename>
    <member kind="function">
      <type>Teuchos::RCP&lt; BaseT &gt;</type>
      <name>build</name>
      <anchorfile>structSacado_1_1TemplateManager_1_1DefaultBuilderOp.html</anchorfile>
      <anchor>a4811c2b9925493ed8593074b2daeaf02</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::DefaultEvalTypeTraits</name>
    <filename>structSacado_1_1DefaultEvalTypeTraits.html</filename>
    <class kind="struct">Sacado::DefaultEvalTypeTraits::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::deref</name>
    <filename>structSacado_1_1mpl_1_1deref.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::deref&lt; range_c_iterator&lt; Range, Pos &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1deref_3_01range__c__iterator_3_01Range_00_01Pos_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Pos</templarg>
    <base>at&lt; Range, Pos &gt;</base>
  </compound>
  <compound kind="struct">
    <name>DERIV_TYPE</name>
    <filename>structDERIV__TYPE.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>value</name>
      <anchorfile>structDERIV__TYPE.html</anchorfile>
      <anchor>a0d2ee47cbc1585c87c3cc38cf7b165d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>grad</name>
      <anchorfile>structDERIV__TYPE.html</anchorfile>
      <anchor>a33c069d9f01f5fb582172639bc447ca4</anchor>
      <arglist>[ad_GRAD_MAX]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::Derp</name>
    <filename>classSacado_1_1Radnt_1_1Derp.html</filename>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classSacado_1_1Radnt_1_1Derp.html</anchorfile>
      <anchor>ac4d5b847e70cf4c2fa7eb76383a9d39b</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classSacado_1_1Radnt_1_1Derp.html</anchorfile>
      <anchor>aa66951d90250e1147955d71600199fd8</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1Radnt_1_1Derp.html</anchorfile>
      <anchor>a225819b2a5f8d4a0ad34a23b2ea26c72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1Radnt_1_1Derp.html</anchorfile>
      <anchor>a196b21c9c69aa895d624ee10598c6994</anchor>
      <arglist>(const ADvari *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1Radnt_1_1Derp.html</anchorfile>
      <anchor>a5cab33a218b548baa351d16b435fb378</anchor>
      <arglist>(const double *, const ADvari *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1Radnt_1_1Derp.html</anchorfile>
      <anchor>a16f5b6508a1f0a8cae722726315ca38e</anchor>
      <arglist>(const double *, const ADvari *, const ADvari *)</arglist>
    </member>
    <member kind="variable">
      <type>Derp *</type>
      <name>next</name>
      <anchorfile>classSacado_1_1Radnt_1_1Derp.html</anchorfile>
      <anchor>ade884f1bbabdfa6d4bd5fd99fd459a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double *</type>
      <name>a</name>
      <anchorfile>classSacado_1_1Radnt_1_1Derp.html</anchorfile>
      <anchor>a28e89415094f7a3b09cd7092d36cd97d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ADvari *</type>
      <name>b</name>
      <anchorfile>classSacado_1_1Radnt_1_1Derp.html</anchorfile>
      <anchor>abe545643014a5e861af48f34e9f11398</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ADvari *</type>
      <name>c</name>
      <anchorfile>classSacado_1_1Radnt_1_1Derp.html</anchorfile>
      <anchor>ab74f02d0c2eb8c01fb61b972a5b557b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Derp *</type>
      <name>LastDerp</name>
      <anchorfile>classSacado_1_1Radnt_1_1Derp.html</anchorfile>
      <anchor>a98df448ab780e46ca8c514f76d034d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvarn</name>
      <anchorfile>classSacado_1_1Radnt_1_1Derp.html</anchorfile>
      <anchor>a52f28808cea8bd95003a9aa3ac478885</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::Derp</name>
    <filename>classSacado_1_1Rad2d_1_1Derp.html</filename>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classSacado_1_1Rad2d_1_1Derp.html</anchorfile>
      <anchor>a80393fdd9f065aff69fb3549c6d229f9</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classSacado_1_1Rad2d_1_1Derp.html</anchorfile>
      <anchor>a8cc9df1f4e57d02c8396f171325219b6</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1Rad2d_1_1Derp.html</anchorfile>
      <anchor>a362f0c19d729e915516c989c58a63060</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1Rad2d_1_1Derp.html</anchorfile>
      <anchor>ac989c991e91d88a5571c1905a11ede6d</anchor>
      <arglist>(const ADvari *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1Rad2d_1_1Derp.html</anchorfile>
      <anchor>a946f92a695df0ad0f60342755709db11</anchor>
      <arglist>(const double *, const ADvari *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1Rad2d_1_1Derp.html</anchorfile>
      <anchor>a8f51512359f7d34b5e88b8566a1240f3</anchor>
      <arglist>(const double *, const ADvari *, const ADvari *)</arglist>
    </member>
    <member kind="variable">
      <type>Derp *</type>
      <name>next</name>
      <anchorfile>classSacado_1_1Rad2d_1_1Derp.html</anchorfile>
      <anchor>a82d47f4d7dc79650a055bb76bbb16fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double *</type>
      <name>a</name>
      <anchorfile>classSacado_1_1Rad2d_1_1Derp.html</anchorfile>
      <anchor>a791d25548d7fcf629634afe5d8e4b78c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ADvari *</type>
      <name>b</name>
      <anchorfile>classSacado_1_1Rad2d_1_1Derp.html</anchorfile>
      <anchor>a4e3e746232a0f76584178a4092d958a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ADvari *</type>
      <name>c</name>
      <anchorfile>classSacado_1_1Rad2d_1_1Derp.html</anchorfile>
      <anchor>af47539e902076990b098d035fed8bf68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Derp *</type>
      <name>LastDerp</name>
      <anchorfile>classSacado_1_1Rad2d_1_1Derp.html</anchorfile>
      <anchor>a687494564a4e01bc454b2a98a6e8e1a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvarn</name>
      <anchorfile>classSacado_1_1Rad2d_1_1Derp.html</anchorfile>
      <anchor>a52f28808cea8bd95003a9aa3ac478885</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::Derp</name>
    <filename>classSacado_1_1Rad_1_1Derp.html</filename>
    <templarg>Double</templarg>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad_1_1Derp.html</anchorfile>
      <anchor>a4eeebe0cfb03f348ff592ebe171200ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1Rad_1_1Derp.html</anchorfile>
      <anchor>ac3fcc31c96d2b23bd638cfadcdfde00a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1Rad_1_1Derp.html</anchorfile>
      <anchor>a5909d5476d5c30893a38dcfbdbfce2f4</anchor>
      <arglist>(const ADVari *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1Rad_1_1Derp.html</anchorfile>
      <anchor>af1ff1107c3fd1cd06ee8b128c2c78a00</anchor>
      <arglist>(const Double *, const ADVari *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1Rad_1_1Derp.html</anchorfile>
      <anchor>a32d811b079d33eb7ea1cec335b569c3f</anchor>
      <arglist>(const Double *, const ADVari *, const ADVari *)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classSacado_1_1Rad_1_1Derp.html</anchorfile>
      <anchor>a92bf38dece2cbc722da5eff6cd5e86b7</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="variable">
      <type>Derp *</type>
      <name>next</name>
      <anchorfile>classSacado_1_1Rad_1_1Derp.html</anchorfile>
      <anchor>aa524cc7c1309d26136e5ae415632b212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Double *</type>
      <name>a</name>
      <anchorfile>classSacado_1_1Rad_1_1Derp.html</anchorfile>
      <anchor>a11ebf26bc581fa2c65d702697694fe1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ADVari *</type>
      <name>b</name>
      <anchorfile>classSacado_1_1Rad_1_1Derp.html</anchorfile>
      <anchor>aea65edfab7111667440bd9efba637e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ADVari *</type>
      <name>c</name>
      <anchorfile>classSacado_1_1Rad_1_1Derp.html</anchorfile>
      <anchor>ab9347506d113a7a6586035d3b53c9ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Derp *</type>
      <name>LastDerp</name>
      <anchorfile>classSacado_1_1Rad_1_1Derp.html</anchorfile>
      <anchor>a8f864c60d7293975771cfbf698e800c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvarn&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1Rad_1_1Derp.html</anchorfile>
      <anchor>a78813af4e5afb13acbcb1dee5c24cd0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::Derp</name>
    <filename>classSacado_1_1Rad2_1_1Derp.html</filename>
    <templarg>Double</templarg>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad2_1_1Derp.html</anchorfile>
      <anchor>ada7948be8de90fd8dfbf226bcf46ff88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1Rad2_1_1Derp.html</anchorfile>
      <anchor>a475b4449c37f30d82f133215d95e5c65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1Rad2_1_1Derp.html</anchorfile>
      <anchor>acd2f0750652597c1eb12fe2a65d4f0d3</anchor>
      <arglist>(const ADVari *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1Rad2_1_1Derp.html</anchorfile>
      <anchor>a5d1a454499753955c3b41ec3787af22c</anchor>
      <arglist>(const Double *, const ADVari *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1Rad2_1_1Derp.html</anchorfile>
      <anchor>a873e6dec804129b07510f09151292985</anchor>
      <arglist>(const Double *, const ADVari *, const ADVari *)</arglist>
    </member>
    <member kind="variable">
      <type>Derp *</type>
      <name>next</name>
      <anchorfile>classSacado_1_1Rad2_1_1Derp.html</anchorfile>
      <anchor>aa4d1a887c27c13b2b6b13663da953783</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Double *</type>
      <name>a</name>
      <anchorfile>classSacado_1_1Rad2_1_1Derp.html</anchorfile>
      <anchor>ad4e109076cade0fcf61968e537bf4df2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ADVari *</type>
      <name>b</name>
      <anchorfile>classSacado_1_1Rad2_1_1Derp.html</anchorfile>
      <anchor>a1723ca2f80c97342ae56ae1e3c3794f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ADVari *</type>
      <name>c</name>
      <anchorfile>classSacado_1_1Rad2_1_1Derp.html</anchorfile>
      <anchor>aaae84dd3a5403c7ad39c3c13ea51b129</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Derp *</type>
      <name>LastDerp</name>
      <anchorfile>classSacado_1_1Rad2_1_1Derp.html</anchorfile>
      <anchor>a4268cc4e48426567a723a3daf9ad225c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvarn&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1Rad2_1_1Derp.html</anchorfile>
      <anchor>a78813af4e5afb13acbcb1dee5c24cd0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::Derp</name>
    <filename>classSacado_1_1RadVec_1_1Derp.html</filename>
    <templarg>Double</templarg>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1RadVec_1_1Derp.html</anchorfile>
      <anchor>ac504ff5ed20d8bbf2af518797ccc4b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1RadVec_1_1Derp.html</anchorfile>
      <anchor>a2dd0da4cdf82a9ffcea7c01ab1540b4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1RadVec_1_1Derp.html</anchorfile>
      <anchor>a16ce9a937c9e2e54c7ff134cac98426e</anchor>
      <arglist>(const ADVari *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1RadVec_1_1Derp.html</anchorfile>
      <anchor>a15cd21f27ebc93299d1b53ef0fbbd7eb</anchor>
      <arglist>(const Double *, const ADVari *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Derp</name>
      <anchorfile>classSacado_1_1RadVec_1_1Derp.html</anchorfile>
      <anchor>a1dd4336d8c154f7825b33637d2e52eda</anchor>
      <arglist>(const Double *, const ADVari *, const ADVari *)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classSacado_1_1RadVec_1_1Derp.html</anchorfile>
      <anchor>ad7b27867b83562264ae19056b79d248c</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="variable">
      <type>Derp *</type>
      <name>next</name>
      <anchorfile>classSacado_1_1RadVec_1_1Derp.html</anchorfile>
      <anchor>aa0c0e117ced077ee414afb577be6f4dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Double *</type>
      <name>a</name>
      <anchorfile>classSacado_1_1RadVec_1_1Derp.html</anchorfile>
      <anchor>a65df5fda0a58b3c7eaf4896f219e71d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ADVari *</type>
      <name>b</name>
      <anchorfile>classSacado_1_1RadVec_1_1Derp.html</anchorfile>
      <anchor>a34b684103b8dfde87890505c38ebf2ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ADVari *</type>
      <name>c</name>
      <anchorfile>classSacado_1_1RadVec_1_1Derp.html</anchorfile>
      <anchor>ab115ca0ce9f20bb6337f59b230f1829a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Derp *</type>
      <name>LastDerp</name>
      <anchorfile>classSacado_1_1RadVec_1_1Derp.html</anchorfile>
      <anchor>a6e326b4406c269174ddd13bfc4c4b437</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvarn&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1RadVec_1_1Derp.html</anchorfile>
      <anchor>a78813af4e5afb13acbcb1dee5c24cd0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::DFad</name>
    <filename>classSacado_1_1CacheFad_1_1DFad.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::DFad</name>
    <filename>classSacado_1_1ELRCacheFad_1_1DFad.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::DFad</name>
    <filename>classSacado_1_1ELRFad_1_1DFad.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::FAD_NS::DFad</name>
    <filename>classSacado_1_1FAD__NS_1_1DFad.html</filename>
    <templarg>ValueT</templarg>
    <class kind="struct">Sacado::FAD_NS::DFad::apply</class>
    <member kind="typedef">
      <type>Fad::DynamicStorage&lt; ValueT &gt;</type>
      <name>StorageType</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>ad9d9245802f5be708bc2540eade9eaa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeneralFad&lt; ValueT, StorageType &gt;</type>
      <name>GeneralFadType</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a17f77ac763816ab0d18a3672336c35f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Expr&lt; GeneralFadType &gt;</type>
      <name>ExprType</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a4b1991d6dd6be3f7b1fbb6620665f619</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a1059169a9e62ffed2111854b86d73a0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a0df075ca51f75423b965fc79c4798c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ValueT &gt;::type</type>
      <name>ScalarT</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a231b81d13e4164181e1669773929d6a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a91f79c8d26360358574d837a35d365d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>ac984f83735e912fcdc6cca89ba8860e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a1ec26441080f0b2735cae6382307d927</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a0806829d17711e60bb7728c1fb705fad</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a67530414e960808b6ad3c7f56034a997</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a36a1e27d796f1e904b836ada95b0d860</anchor>
      <arglist>(const DFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1DFad.html</anchorfile>
      <anchor>a3d2ffbe276fa3605d88cfcd7d0068e9c</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::DFad</name>
    <filename>classSacado_1_1Fad_1_1DFad.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>DFad&lt; double &gt;</name>
    <filename>classSacado_1_1Fad_1_1DFad.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::disable_if</name>
    <filename>structSacado_1_1mpl_1_1disable__if.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>disable_if_c&lt; Cond::value, T &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::disable_if_c</name>
    <filename>structSacado_1_1mpl_1_1disable__if__c.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>disable_if_c&lt; Cond::value, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1disable__if__c.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::disable_if_c&lt; false, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1disable__if__c_3_01false_00_01T_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1disable__if__c_3_01false_00_01T_01_4.html</anchorfile>
      <anchor>ad08f49a26490162cdd9d1215c68436bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::DivisionOp</name>
    <filename>classSacado_1_1Tay_1_1DivisionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>value_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp.html</anchorfile>
      <anchor>a56af6b89e70f098c464bd12574af0f9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::value_type</type>
      <name>value_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp.html</anchorfile>
      <anchor>a3a2ed03b59c40951cbf93769547579f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; value_type_1, value_type_2 &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp.html</anchorfile>
      <anchor>aa31da77f65f2474aab015e767e71ab13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::scalar_type</type>
      <name>scalar_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp.html</anchorfile>
      <anchor>af04f13b66047c2a5e616dde7ba03fb24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::scalar_type</type>
      <name>scalar_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp.html</anchorfile>
      <anchor>a78e5c315682d3f7290f6481054a1c960</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; scalar_type_1, scalar_type_2 &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp.html</anchorfile>
      <anchor>a1aa28faecbf63219c4cb3b92161a2e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::base_expr_type</type>
      <name>base_expr_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp.html</anchorfile>
      <anchor>a5ebb6afb680cf62ab24f36364332a177</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::base_expr_type</type>
      <name>base_expr_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp.html</anchorfile>
      <anchor>a3bf2a86a3e929c713d7be886176a8d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; base_expr_type_1, base_expr_type_2 &gt;::type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp.html</anchorfile>
      <anchor>a062e8f07542965a689c38db8f1aa64c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DivisionOp</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp.html</anchorfile>
      <anchor>a44c8fe15667595727cdc8ade5b02c89f</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp.html</anchorfile>
      <anchor>ab3c086082c0cd64be05f00e6ef7ea2c2</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp.html</anchorfile>
      <anchor>aa5c7134f16d2cc4c5a394cd46898baa3</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp.html</anchorfile>
      <anchor>af155df523dca17c088e6ed452f110b35</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::valarray&lt; value_type &gt;</type>
      <name>c</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp.html</anchorfile>
      <anchor>af7184c125a0e836352c3d8ccc42f5f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dc</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp.html</anchorfile>
      <anchor>a40596d30316f298e0569c75f56e8a503</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::DivisionOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</name>
    <filename>classSacado_1_1Tay_1_1DivisionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT2::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a3562be12372adbefc8d55bf1845b858b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>acb1ad0793b1a05bac2c2deb9c913250c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>af93eb3c46b7f0c73e719615769216bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstExpr&lt; typename ExprT2::value_type &gt;</type>
      <name>ExprT1</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>ad288405746e32229c4e1c6519b2c1fc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DivisionOp</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a4f8c6c19f2dca311808a8736701a618f</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>ac269dd5cee9a6a5dce7d2d4c4761ab50</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>adb19d44d7453ed9f10fe2d319fc879bc</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>ab1c9807690c6b4c5bee086123bfcf8c4</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::valarray&lt; value_type &gt;</type>
      <name>c</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a90ec8872a44db89bbfa0ddab8a61e1c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dc</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a9f40faa95f6f649c064bea745a195361</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::DivisionOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</name>
    <filename>classSacado_1_1Tay_1_1DivisionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>ae416585c655e257d04805f8565ed11dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a18db6bf1756c9d997d55b10ef3d2b43c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a5549a1ffac2f249b76608196e6b9ae15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstExpr&lt; typename ExprT1::value_type &gt;</type>
      <name>ExprT2</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>aa7000d60b776d3a0a6feaaa7572fb090</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DivisionOp</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a4d839784f67cd3987b4b301e8da44930</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>aa1f2a6492c9dfd637ec4dc1fccd6b7dd</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>ab3ca94b1cb543af9c817cf8ee524a5c0</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1DivisionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>afd3e91d78f991af9a55cc8d5858d83a9</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::DMFad</name>
    <filename>classSacado_1_1Fad_1_1DMFad.html</filename>
    <templarg>ValueT</templarg>
    <base>Expr&lt; GeneralFad&lt; ValueT, MemPoolStorage&lt; ValueT &gt; &gt; &gt;</base>
    <class kind="struct">Sacado::Fad::DMFad::apply</class>
    <member kind="typedef">
      <type>MemPoolStorage&lt; ValueT &gt;</type>
      <name>StorageType</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a7ed24deef7a8573913746c5037f8a053</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeneralFad&lt; ValueT, StorageType &gt;</type>
      <name>GeneralFadType</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a11d813ad44e528abe31faa83d1804274</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Expr&lt; GeneralFadType &gt;</type>
      <name>ExprType</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>afa7acb8424383c4e63d982361c218591</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>ac4f3c35468864136f73b01c40ea697e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>afe01a4b1923ff61e8a2582e47e919a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ValueT &gt;::type</type>
      <name>ScalarT</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>ab5dda72dcfdd65f2bdaeaf78fc145fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>ac999624af158e2980c20541af0da7290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a6c229e12b89b6845f0a7bce4a6837175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>aa9d6bab880cd44c8dc9250a4c96d73ab</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a9be23f99c7cf0ede7e86cc88cd8d456e</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>aa0a0bdb28d8110c5ca9215199c8aa814</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a9051bdb939f5b64cc7e6807b246b2ccb</anchor>
      <arglist>(const DMFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DMFad.html</anchorfile>
      <anchor>a849d04cd400f92914433d359f99c709a</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::DoubleAvoid</name>
    <filename>classSacado_1_1Rad_1_1DoubleAvoid.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>double</type>
      <name>dtype</name>
      <anchorfile>classSacado_1_1Rad_1_1DoubleAvoid.html</anchorfile>
      <anchor>a0085d9a34d30fea11a213908a6e3a6c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>ltype</name>
      <anchorfile>classSacado_1_1Rad_1_1DoubleAvoid.html</anchorfile>
      <anchor>a3520f7e3ac5429ad086eb3c10aa8ce07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>itype</name>
      <anchorfile>classSacado_1_1Rad_1_1DoubleAvoid.html</anchorfile>
      <anchor>ae26db50f3861ef132054f7da313ebf45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>ttype</name>
      <anchorfile>classSacado_1_1Rad_1_1DoubleAvoid.html</anchorfile>
      <anchor>afa6cbbd2b5cc63f0df381bb2a7bd39b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::DoubleAvoid</name>
    <filename>classSacado_1_1Rad2_1_1DoubleAvoid.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>double</type>
      <name>dtype</name>
      <anchorfile>classSacado_1_1Rad2_1_1DoubleAvoid.html</anchorfile>
      <anchor>a0344d5a38e2e3f328e4a4aa0ac33a224</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>ttype</name>
      <anchorfile>classSacado_1_1Rad2_1_1DoubleAvoid.html</anchorfile>
      <anchor>aee638dab4925d811125e7eb02ef98035</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::DoubleAvoid</name>
    <filename>classSacado_1_1RadVec_1_1DoubleAvoid.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>double</type>
      <name>dtype</name>
      <anchorfile>classSacado_1_1RadVec_1_1DoubleAvoid.html</anchorfile>
      <anchor>a1b12b636fffb936607f2b347e645b295</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>ttype</name>
      <anchorfile>classSacado_1_1RadVec_1_1DoubleAvoid.html</anchorfile>
      <anchor>a0f2e513a3e9bbcd9c7efd5873bcf1dbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::DoubleAvoid&lt; double &gt;</name>
    <filename>classSacado_1_1Rad_1_1DoubleAvoid_3_01double_01_4.html</filename>
    <member kind="typedef">
      <type>RAD_DoubleIgnore &amp;</type>
      <name>dtype</name>
      <anchorfile>classSacado_1_1Rad_1_1DoubleAvoid_3_01double_01_4.html</anchorfile>
      <anchor>abdc2f56fa58651c17c5c883939bb00ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>ltype</name>
      <anchorfile>classSacado_1_1Rad_1_1DoubleAvoid_3_01double_01_4.html</anchorfile>
      <anchor>a590c8fb9041a69d23a08f22bef106835</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>itype</name>
      <anchorfile>classSacado_1_1Rad_1_1DoubleAvoid_3_01double_01_4.html</anchorfile>
      <anchor>affb1042f3d984286d5a47b980148ccd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RAD_DoubleIgnore &amp;</type>
      <name>ttype</name>
      <anchorfile>classSacado_1_1Rad_1_1DoubleAvoid_3_01double_01_4.html</anchorfile>
      <anchor>a3a39ffbdf9f60fcc8edf6a694959609b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::DoubleAvoid&lt; double &gt;</name>
    <filename>classSacado_1_1Rad2_1_1DoubleAvoid_3_01double_01_4.html</filename>
    <member kind="typedef">
      <type>RAD_DoubleIgnore &amp;</type>
      <name>dtype</name>
      <anchorfile>classSacado_1_1Rad2_1_1DoubleAvoid_3_01double_01_4.html</anchorfile>
      <anchor>a8ffe5707adcfed2708929842a6b3d4b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RAD_DoubleIgnore &amp;</type>
      <name>ttype</name>
      <anchorfile>classSacado_1_1Rad2_1_1DoubleAvoid_3_01double_01_4.html</anchorfile>
      <anchor>a397f3841f439079eb6357902f773ad78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::DoubleAvoid&lt; double &gt;</name>
    <filename>classSacado_1_1RadVec_1_1DoubleAvoid_3_01double_01_4.html</filename>
    <member kind="typedef">
      <type>RAD_DoubleIgnore &amp;</type>
      <name>dtype</name>
      <anchorfile>classSacado_1_1RadVec_1_1DoubleAvoid_3_01double_01_4.html</anchorfile>
      <anchor>abc5af79d78bbb81770f43551c584a8f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RAD_DoubleIgnore &amp;</type>
      <name>ttype</name>
      <anchorfile>classSacado_1_1RadVec_1_1DoubleAvoid_3_01double_01_4.html</anchorfile>
      <anchor>a0b7221fb66ae7fdb93a81440a55f7b06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::DoubleAvoid&lt; int &gt;</name>
    <filename>classSacado_1_1Rad_1_1DoubleAvoid_3_01int_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>dtype</name>
      <anchorfile>classSacado_1_1Rad_1_1DoubleAvoid_3_01int_01_4.html</anchorfile>
      <anchor>a421f7a9abfbc2a0ca5f7e87a4d9f909f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>ltype</name>
      <anchorfile>classSacado_1_1Rad_1_1DoubleAvoid_3_01int_01_4.html</anchorfile>
      <anchor>a1d6e4c177219dc39140c05c752cfad84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RAD_DoubleIgnore &amp;</type>
      <name>itype</name>
      <anchorfile>classSacado_1_1Rad_1_1DoubleAvoid_3_01int_01_4.html</anchorfile>
      <anchor>a31e7e9f3c57035b71ee1b277f3944478</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RAD_DoubleIgnore &amp;</type>
      <name>ttype</name>
      <anchorfile>classSacado_1_1Rad_1_1DoubleAvoid_3_01int_01_4.html</anchorfile>
      <anchor>a9a21c4701c04ec19b940a8fdb6fe3322</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::DoubleAvoid&lt; long &gt;</name>
    <filename>classSacado_1_1Rad_1_1DoubleAvoid_3_01long_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>dtype</name>
      <anchorfile>classSacado_1_1Rad_1_1DoubleAvoid_3_01long_01_4.html</anchorfile>
      <anchor>a54d488e9aff4e2995223ceb001bac737</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RAD_DoubleIgnore &amp;</type>
      <name>ltype</name>
      <anchorfile>classSacado_1_1Rad_1_1DoubleAvoid_3_01long_01_4.html</anchorfile>
      <anchor>a1ff73494b87167d8e956e043f43022dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>itype</name>
      <anchorfile>classSacado_1_1Rad_1_1DoubleAvoid_3_01long_01_4.html</anchorfile>
      <anchor>a477fa7c28e2c06ff0c955c865cd489e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RAD_DoubleIgnore &amp;</type>
      <name>ttype</name>
      <anchorfile>classSacado_1_1Rad_1_1DoubleAvoid_3_01long_01_4.html</anchorfile>
      <anchor>a9330e5c6bebd90367a7d191933a2557a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ds_array</name>
    <filename>structSacado_1_1ds__array.html</filename>
    <templarg></templarg>
    <templarg>isScalar</templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION T *</type>
      <name>my_alloc</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>ad3b49aa3b8496366dbd081d9cd076db5</anchor>
      <arglist>(const int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION void</type>
      <name>my_free</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>af7df233f11587f21bff4c2b1bcd529a1</anchor>
      <arglist>(T *m, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION T *</type>
      <name>get</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>a03d58cb3fa8404b27313c1cc12d5d9bf</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION T *</type>
      <name>get_and_fill</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>a0eb141288286f026c55af0970cdf5c7c</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION T *</type>
      <name>get_and_fill</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>aa07e8cc80f6b0ddfc342e9678d98b8d8</anchor>
      <arglist>(const T *src, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION T *</type>
      <name>strided_get_and_fill</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>abff64a8994418a8a715b8eb0346bc637</anchor>
      <arglist>(const T *src, int stride, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION void</type>
      <name>copy</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>ae8f584b51320f287a1276ee4f2131afb</anchor>
      <arglist>(const T *src, T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION void</type>
      <name>strided_copy</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>ac0c33a87c192539af583868746ebea65</anchor>
      <arglist>(const T *src, int src_stride, T *dest, int dest_stride, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION void</type>
      <name>zero</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>aeb029caee5e78ccab7ae30690c2c9a8f</anchor>
      <arglist>(T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION void</type>
      <name>strided_zero</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>a9c0d350a56d748eea9f5a0bc092b6183</anchor>
      <arglist>(T *dest, int stride, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION void</type>
      <name>destroy_and_release</name>
      <anchorfile>structSacado_1_1ds__array.html</anchorfile>
      <anchor>a160e11a1d52a035b64c43122901e17df</anchor>
      <arglist>(T *m, int sz)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ds_array&lt; T, true &gt;</name>
    <filename>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION T *</type>
      <name>my_alloc</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a518df98382ff31fb26e8c3687b201895</anchor>
      <arglist>(const int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION void</type>
      <name>my_free</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>af7dbdb07fd21b49c645c243aeef0556f</anchor>
      <arglist>(T *m, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION T *</type>
      <name>get</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a5aade474f64ba4ccf9698ebd06c997a1</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION T *</type>
      <name>get_and_fill</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a39dcfe06751e6d4a032e8562421c2f16</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION T *</type>
      <name>get_and_fill</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a8dffda98d16a65b5e6667ad1f43da35f</anchor>
      <arglist>(const T *src, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION T *</type>
      <name>strided_get_and_fill</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a6abc74ed0d684222ee21354619fb7c99</anchor>
      <arglist>(const T *src, int stride, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION void</type>
      <name>copy</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a16d9f773a13c82caf8c6c9d42420689c</anchor>
      <arglist>(const T *src, T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION void</type>
      <name>strided_copy</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a1206ba5f642e2f9475681759b0b98c02</anchor>
      <arglist>(const T *src, int src_stride, T *dest, int dest_stride, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION void</type>
      <name>zero</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a93cf5f16b5501027a5f95680032f0821</anchor>
      <arglist>(T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION void</type>
      <name>strided_zero</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>aae3eff1c906500a25b3fe2c43bf3b8c3</anchor>
      <arglist>(T *dest, int stride, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION void</type>
      <name>destroy_and_release</name>
      <anchorfile>structSacado_1_1ds__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>aed7fea067039c60856c2495d899d11c4</anchor>
      <arglist>(T *m, int sz)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::dummy</name>
    <filename>structSacado_1_1dummy.html</filename>
    <templarg>T</templarg>
    <templarg>U</templarg>
    <member kind="typedef">
      <type>U</type>
      <name>type</name>
      <anchorfile>structSacado_1_1dummy.html</anchorfile>
      <anchor>a856b4503578f31fb0e1076bc487df792</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::dummy&lt; T, T &gt;</name>
    <filename>structSacado_1_1dummy_3_01T_00_01T_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>dummy_arg&lt; T &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1dummy_3_01T_00_01T_01_4.html</anchorfile>
      <anchor>a5dad553693e209a4ba78c43837e52906</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::dummy_arg</name>
    <filename>structSacado_1_1dummy__arg.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>structSacado_1_1dummy__arg.html</anchorfile>
      <anchor>a63c72c026a8dcdccd66da1f3727d6a63</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::DVFad</name>
    <filename>classSacado_1_1Fad_1_1DVFad.html</filename>
    <templarg>ValueT</templarg>
    <base>Expr&lt; GeneralFad&lt; ValueT, VectorDynamicStorage&lt; ValueT &gt; &gt; &gt;</base>
    <class kind="struct">Sacado::Fad::DVFad::apply</class>
    <member kind="typedef">
      <type>VectorDynamicStorage&lt; ValueT &gt;</type>
      <name>StorageType</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a9a6e817f73aebfd77c7e89c86d186342</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeneralFad&lt; ValueT, StorageType &gt;</type>
      <name>GeneralFadType</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a6d33bb08350ca823df2fef70287078f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Expr&lt; GeneralFadType &gt;</type>
      <name>ExprType</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>af9e979ce6ae38e6923628eaafc25f356</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>aade625cefdaa0ea586a14659bc0e3847</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a810790f845fa214ab10af06d7a666ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ValueT &gt;::type</type>
      <name>ScalarT</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a009fb70ddc60f0a66392739191fa445c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a0c3ee7599742734922ff48bb9dffcc81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a0c52135b7d9edb4b78fe840431913550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>af21dbb4fef96a1f28e4582e5e4755105</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a1230f878a48fd020ca37cf742a178d7e</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a0911d809d873c629341e38d2b367c203</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a5e57afa31a7af6afc9029a329526f395</anchor>
      <arglist>(const int sz, ValueT *x, ValueT *dx, bool zero_out=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a98659ec6d0531b4aaa525d8e8c685c98</anchor>
      <arglist>(const int sz, const int i, ValueT *x, ValueT *dx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>aae7b5176983c6608df30dcc1633a8361</anchor>
      <arglist>(const DVFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DVFad</name>
      <anchorfile>classSacado_1_1Fad_1_1DVFad.html</anchorfile>
      <anchor>a17abfd72ce91eae5abdc472eb1332c5b</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::DynamicStorage</name>
    <filename>classSacado_1_1Fad_1_1DynamicStorage.html</filename>
    <templarg>T</templarg>
    <templarg>U</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a42b8608def7106f6312e98769f51e493</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a072bc0d9478ef5b656a48e3d0f0a3c0b</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a0ad9f1980e221437fc3fde61da6d84a0</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a0f2ad802d84306900dae83a3e912a984</anchor>
      <arglist>(const DynamicStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a1ad0481ac171399081ace61a78f681e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION DynamicStorage &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a8a945f0bdb38be4e6f9b370b2c6cfe84</anchor>
      <arglist>(const DynamicStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a81422e58cdeb64fa7c8409e28de067ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>length</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a39aa2087834bcde628dde347fc3f790a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a4caa9bf6dbccce9bda036bf0fd4411d9</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>resizeAndZero</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a4bf61eefa37fc9b5b9559d6fd6d833df</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>aea58645c9a268feb60ba233c5762bdc5</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a9ad9960f868f83bf918abff387379424</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>ac60bcb824282994811c3db957ff8a255</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a4edc3b7c4c13be597cbcd20284efe968</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const U *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a5b75ebb3cd0208aa6182d3a272117307</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION U</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a84f06d0cbd65839403e962cdbec7dec7</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION U &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>aa9e6a76ffc0fba204559c8ae002e4e4c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const U &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a0f245b6c8469e730a3ff4a16be80e48b</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>afbae022f8a59854280cbd9fa1a8dce6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sz_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a263a881962ecc26c6ffa9f9b665389ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>len_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a23841fc33731b448b0876646f92bb738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>U *</type>
      <name>dx_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a34e636b1fff753d1f0e1b4a8c4fcc700</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DynamicStorage&lt; ValT, LogT &gt;</name>
    <filename>classSacado_1_1Fad_1_1DynamicStorage.html</filename>
    <member kind="typedef">
      <type>ValT</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a42b8608def7106f6312e98769f51e493</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a072bc0d9478ef5b656a48e3d0f0a3c0b</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a0ad9f1980e221437fc3fde61da6d84a0</anchor>
      <arglist>(const int sz, const ValT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a0f2ad802d84306900dae83a3e912a984</anchor>
      <arglist>(const DynamicStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a1ad0481ac171399081ace61a78f681e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION DynamicStorage &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a8a945f0bdb38be4e6f9b370b2c6cfe84</anchor>
      <arglist>(const DynamicStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a81422e58cdeb64fa7c8409e28de067ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>length</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a39aa2087834bcde628dde347fc3f790a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a4caa9bf6dbccce9bda036bf0fd4411d9</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>resizeAndZero</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a4bf61eefa37fc9b5b9559d6fd6d833df</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>aea58645c9a268feb60ba233c5762bdc5</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a9ad9960f868f83bf918abff387379424</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const ValT &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>ac60bcb824282994811c3db957ff8a255</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION ValT &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a4edc3b7c4c13be597cbcd20284efe968</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const LogT *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a5b75ebb3cd0208aa6182d3a272117307</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION LogT</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a84f06d0cbd65839403e962cdbec7dec7</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION LogT &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>aa9e6a76ffc0fba204559c8ae002e4e4c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const LogT &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a0f245b6c8469e730a3ff4a16be80e48b</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValT</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>afbae022f8a59854280cbd9fa1a8dce6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sz_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a263a881962ecc26c6ffa9f9b665389ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>len_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a23841fc33731b448b0876646f92bb738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LogT *</type>
      <name>dx_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a34e636b1fff753d1f0e1b4a8c4fcc700</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DynamicStorage&lt; ValueT &gt;</name>
    <filename>classSacado_1_1Fad_1_1DynamicStorage.html</filename>
    <member kind="typedef">
      <type>ValueT</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a42b8608def7106f6312e98769f51e493</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a072bc0d9478ef5b656a48e3d0f0a3c0b</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a0ad9f1980e221437fc3fde61da6d84a0</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a0f2ad802d84306900dae83a3e912a984</anchor>
      <arglist>(const DynamicStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~DynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a1ad0481ac171399081ace61a78f681e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION DynamicStorage &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a8a945f0bdb38be4e6f9b370b2c6cfe84</anchor>
      <arglist>(const DynamicStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a81422e58cdeb64fa7c8409e28de067ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>length</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a39aa2087834bcde628dde347fc3f790a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a4caa9bf6dbccce9bda036bf0fd4411d9</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>resizeAndZero</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a4bf61eefa37fc9b5b9559d6fd6d833df</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>aea58645c9a268feb60ba233c5762bdc5</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a9ad9960f868f83bf918abff387379424</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const ValueT &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>ac60bcb824282994811c3db957ff8a255</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION ValueT &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a4edc3b7c4c13be597cbcd20284efe968</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const ValueT *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a5b75ebb3cd0208aa6182d3a272117307</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION ValueT</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a84f06d0cbd65839403e962cdbec7dec7</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION ValueT &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>aa9e6a76ffc0fba204559c8ae002e4e4c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const ValueT &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a0f245b6c8469e730a3ff4a16be80e48b</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueT</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>afbae022f8a59854280cbd9fa1a8dce6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sz_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a263a881962ecc26c6ffa9f9b665389ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>len_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a23841fc33731b448b0876646f92bb738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueT *</type>
      <name>dx_</name>
      <anchorfile>classSacado_1_1Fad_1_1DynamicStorage.html</anchorfile>
      <anchor>a34e636b1fff753d1f0e1b4a8c4fcc700</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ElemData</name>
    <filename>structElemData.html</filename>
    <member kind="function">
      <type></type>
      <name>ElemData</name>
      <anchorfile>structElemData.html</anchorfile>
      <anchor>a984bad1d5d13e7f2008acaf4c8431d0f</anchor>
      <arglist>(double mesh_spacing)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElemData</name>
      <anchorfile>structElemData.html</anchorfile>
      <anchor>a984bad1d5d13e7f2008acaf4c8431d0f</anchor>
      <arglist>(double mesh_spacing)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nqp</name>
      <anchorfile>structElemData.html</anchorfile>
      <anchor>ab36d41b44b8c2986b8ea82242c4fd562</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nnode</name>
      <anchorfile>structElemData.html</anchorfile>
      <anchor>ab5ae09638130031fdd9f77621196af9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InactiveDouble *</type>
      <name>w</name>
      <anchorfile>structElemData.html</anchorfile>
      <anchor>a293f22e0f6023ba13f99ede346b17b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InactiveDouble *</type>
      <name>jac</name>
      <anchorfile>structElemData.html</anchorfile>
      <anchor>a0e7ba77be94fe27c14662c9e92164088</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InactiveDouble **</type>
      <name>phi</name>
      <anchorfile>structElemData.html</anchorfile>
      <anchor>aace76bf8d89e7785f2a757729344e476</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InactiveDouble **</type>
      <name>dphi</name>
      <anchorfile>structElemData.html</anchorfile>
      <anchor>ab1d1f021c78c3b0e51bc31d45256e2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>gid</name>
      <anchorfile>structElemData.html</anchorfile>
      <anchor>a34601b1b8fb6e299f0676a3a4b70c89f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>w</name>
      <anchorfile>structElemData.html</anchorfile>
      <anchor>addd256aaf2e5f2d413e769b885f17be4</anchor>
      <arglist>[nqp]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>jac</name>
      <anchorfile>structElemData.html</anchorfile>
      <anchor>a7c598684cb2d65da3e1d7936789b95b9</anchor>
      <arglist>[nqp]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>phi</name>
      <anchorfile>structElemData.html</anchorfile>
      <anchor>aa5923b5fdc591be01808546f7cf3bbf0</anchor>
      <arglist>[nqp][nnode]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dphi</name>
      <anchorfile>structElemData.html</anchorfile>
      <anchor>ab4e683de25787555645b34d157ddfcff</anchor>
      <arglist>[nqp][nnode]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>gid</name>
      <anchorfile>structElemData.html</anchorfile>
      <anchor>a074b0f1231d61327f67e7f2083f41d20</anchor>
      <arglist>[nnode]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>nqp</name>
      <anchorfile>structElemData.html</anchorfile>
      <anchor>afe861b00c4e18416f0eb285a923dbdd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>nnode</name>
      <anchorfile>structElemData.html</anchorfile>
      <anchor>afce85c1b977447e15c1756cb36c81762</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Kokkos::Example::FENL::ElementComputation</name>
    <filename>classKokkos_1_1Example_1_1FENL_1_1ElementComputation.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Method</templarg>
  </compound>
  <compound kind="class">
    <name>Kokkos::Example::FENL::ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;,           CrsMatrix&lt; ScalarType, ExecutionSpace &gt;,           Analytic &gt;</name>
    <filename>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</filename>
    <templarg></templarg>
    <templarg>Order</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Kokkos::Example::FENL::ElementComputationBase</base>
    <base>Kokkos::Example::FENL::ElementComputationBase</base>
    <member kind="typedef">
      <type>ElementComputationBase&lt; ExecutionSpace, Order, CoordinateMap, ScalarType &gt;</type>
      <name>base_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>a08ac1db972395b310f27bfa986e9748f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>a992762d4d9bf39fc9c4d5e07123665fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>a9297da82aa06e23aa2630bb0211a3a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementComputationBase&lt; ExecutionSpace, Order, CoordinateMap, ScalarType &gt;</type>
      <name>base_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>a08ac1db972395b310f27bfa986e9748f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>a992762d4d9bf39fc9c4d5e07123665fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>a9297da82aa06e23aa2630bb0211a3a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; scalar_type[FunctionCount], Kokkos::LayoutRight, execution_space, Kokkos::MemoryUnmanaged &gt;</type>
      <name>elem_vec_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>a62816ede8368f0dcc52faa80375f756e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; scalar_type[FunctionCount][FunctionCount], Kokkos::LayoutRight, execution_space, Kokkos::MemoryUnmanaged &gt;</type>
      <name>elem_mat_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>a228203dabbcfc5947e60febab0731b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputation</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>a7db977517b5baf4da822d379160d20d9</anchor>
      <arglist>(const ElementComputation &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputation</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>afea3e8037c5159878313bc8ba68de854</anchor>
      <arglist>(const typename base_type::mesh_type &amp;arg_mesh, const typename base_type::vector_type &amp;arg_solution, const typename base_type::elem_graph_type &amp;arg_elem_graph, const typename base_type::sparse_matrix_type &amp;arg_jacobian, const typename base_type::vector_type &amp;arg_residual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>ae559bb90ca7a556da77b0109e0a92904</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>gatherSolution</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>ae6400bb567f8478e6b00d8e4f1361fdc</anchor>
      <arglist>(const unsigned ielem, scalar_type val[], unsigned node_index[], double x[], double y[], double z[], scalar_type res[], scalar_type mat[][FunctionCount]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>scatterResidual</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>a3241f414be8a36847a27746c2bfa6178</anchor>
      <arglist>(const unsigned ielem, const unsigned node_index[], const scalar_type res[], const scalar_type mat[][FunctionCount]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>computeElementResidualJacobian</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>a9993a9889e9bd216a416aa0dfc30a79d</anchor>
      <arglist>(const scalar_type dof_values[], const double x[], const double y[], const double z[], scalar_type elem_res[], scalar_type elem_mat[][FunctionCount]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>a4daf0196f52955442de64edb5a175059</anchor>
      <arglist>(const unsigned ielem) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputation</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>a7db977517b5baf4da822d379160d20d9</anchor>
      <arglist>(const ElementComputation &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputation</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>afea3e8037c5159878313bc8ba68de854</anchor>
      <arglist>(const typename base_type::mesh_type &amp;arg_mesh, const typename base_type::vector_type &amp;arg_solution, const typename base_type::elem_graph_type &amp;arg_elem_graph, const typename base_type::sparse_matrix_type &amp;arg_jacobian, const typename base_type::vector_type &amp;arg_residual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>ae559bb90ca7a556da77b0109e0a92904</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>gatherSolution</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>a4621301556bd7b21bf7d67b6daec1933</anchor>
      <arglist>(const unsigned ielem, const elem_vec_type &amp;val, unsigned node_index[], double x[], double y[], double z[], const elem_vec_type &amp;res, const elem_mat_type &amp;mat) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>scatterResidual</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>afb329a5b91c2def14ea1b6a9ecba6faf</anchor>
      <arglist>(const unsigned ielem, const unsigned node_index[], const elem_vec_type &amp;res, const elem_mat_type &amp;mat) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>computeElementResidualJacobian</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>adad3a64b08c6a893b9c891227e2eaafc</anchor>
      <arglist>(const elem_vec_type &amp;dof_values, const double x[], const double y[], const double z[], const elem_vec_type &amp;elem_res, const elem_mat_type &amp;elem_mat) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>a4daf0196f52955442de64edb5a175059</anchor>
      <arglist>(const unsigned ielem) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>FunctionCount</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>ab0aa2ba4b93fedd8206fdf448f9e138c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>IntegrationCount</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>a57aff28bb7037b771091ffcdd7ae6ea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>ElemNodeCount</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0de01cb8327aa252180d797764097fe82.html</anchorfile>
      <anchor>afc647671e2fb6ff92d395c51c25e5939</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Kokkos::Example::FENL::ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;,           CrsMatrix&lt; ScalarType, ExecutionSpace &gt;,           FadElement &gt;</name>
    <filename>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</filename>
    <templarg></templarg>
    <templarg>Order</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Kokkos::Example::FENL::ElementComputationBase</base>
    <base>Kokkos::Example::FENL::ElementComputationBase</base>
    <member kind="typedef">
      <type>ElementComputationBase&lt; ExecutionSpace, Order, CoordinateMap, ScalarType &gt;</type>
      <name>base_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>a570eae58a3e50918752a6ecc4e61a1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>a7e5fa1d06e12ad0977c94617d400bf3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>a6d05fb4ef090ec8405179fb84f668fbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SFad&lt; scalar_type, FunctionCount &gt;</type>
      <name>fad_scalar_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>aa35c435326e83a963d93ca97481fddff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementComputationBase&lt; ExecutionSpace, Order, CoordinateMap, ScalarType &gt;</type>
      <name>base_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>a570eae58a3e50918752a6ecc4e61a1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>a7e5fa1d06e12ad0977c94617d400bf3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>a6d05fb4ef090ec8405179fb84f668fbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SFad&lt; scalar_type, FunctionCount &gt;</type>
      <name>fad_scalar_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>aa35c435326e83a963d93ca97481fddff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; fad_scalar_type *, Kokkos::LayoutRight, execution_space, Kokkos::MemoryUnmanaged &gt;</type>
      <name>elem_vec_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>aee5f99e609030d7e5cb5a27e55d74ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputation</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>acf110b2ad4bb1ae4c5a3d2987a441c0c</anchor>
      <arglist>(const ElementComputation &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputation</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>ab61312504406dc6f54cae27a3b7c16f1</anchor>
      <arglist>(const typename base_type::mesh_type &amp;arg_mesh, const typename base_type::vector_type &amp;arg_solution, const typename base_type::elem_graph_type &amp;arg_elem_graph, const typename base_type::sparse_matrix_type &amp;arg_jacobian, const typename base_type::vector_type &amp;arg_residual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>a175c6121c4e23f7055dde40ac8599771</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>gatherSolution</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>ae8ba25526156bbedaadf12f891b08847</anchor>
      <arglist>(const unsigned ielem, fad_scalar_type val[], unsigned node_index[], double x[], double y[], double z[], fad_scalar_type res[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>scatterResidual</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>a547d3c71152dcefe3cc2c80f5b47d6f8</anchor>
      <arglist>(const unsigned ielem, const unsigned node_index[], fad_scalar_type res[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>computeElementResidual</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>a869d91e891b199de2adf03c91f5993b1</anchor>
      <arglist>(const fad_scalar_type dof_values[], const double x[], const double y[], const double z[], fad_scalar_type elem_res[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>a6e364b3158306e67073bcd715c15351c</anchor>
      <arglist>(const unsigned ielem) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputation</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>acf110b2ad4bb1ae4c5a3d2987a441c0c</anchor>
      <arglist>(const ElementComputation &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputation</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>ab61312504406dc6f54cae27a3b7c16f1</anchor>
      <arglist>(const typename base_type::mesh_type &amp;arg_mesh, const typename base_type::vector_type &amp;arg_solution, const typename base_type::elem_graph_type &amp;arg_elem_graph, const typename base_type::sparse_matrix_type &amp;arg_jacobian, const typename base_type::vector_type &amp;arg_residual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>a175c6121c4e23f7055dde40ac8599771</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>gatherSolution</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>a756a867ad434d3b0e767bfdd9fcbedff</anchor>
      <arglist>(const unsigned ielem, const elem_vec_type &amp;val, unsigned node_index[], double x[], double y[], double z[], const elem_vec_type &amp;res) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>scatterResidual</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>a3adc06c34c03bfd49030452580a801da</anchor>
      <arglist>(const unsigned ielem, const unsigned node_index[], const elem_vec_type &amp;res) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>computeElementResidual</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>a9517c4f1e45c009416d4924a74f15c34</anchor>
      <arglist>(const elem_vec_type &amp;dof_values, const double x[], const double y[], const double z[], const elem_vec_type &amp;elem_res) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>a6e364b3158306e67073bcd715c15351c</anchor>
      <arglist>(const unsigned ielem) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>FunctionCount</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>aecaa830b2f0291e7b4f6ad31f5568a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>IntegrationCount</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>a4c390317210a1fd0aea947115d9e7884</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>ElemNodeCount</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0dec827b4d1addc251bee9a88492a45e5.html</anchorfile>
      <anchor>a8338c0e69384b16b9dbd9f8df9aaf2e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Kokkos::Example::FENL::ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;,           CrsMatrix&lt; ScalarType, ExecutionSpace &gt;,           FadElementOptimized &gt;</name>
    <filename>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</filename>
    <templarg></templarg>
    <templarg>Order</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;, CrsMatrix&lt; ScalarType, ExecutionSpace &gt;, FadElement &gt;</base>
    <base>ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;, CrsMatrix&lt; ScalarType, ExecutionSpace &gt;, FadElement &gt;</base>
    <member kind="typedef">
      <type>ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;, CrsMatrix&lt; ScalarType, ExecutionSpace &gt;, FadElement &gt;</type>
      <name>base_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>a7dc38f2689844e3f80d808bba28af8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>ae96fb47db3acc0701fdd1ab862c99ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>a9b95316011bbd9ce35626cbc743fdf7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SFad&lt; scalar_type, FunctionCount &gt;</type>
      <name>fad_scalar_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>aaff5ffcb0dc0fb4c4570b67d7577efa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;, CrsMatrix&lt; ScalarType, ExecutionSpace &gt;, FadElement &gt;</type>
      <name>base_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>a7dc38f2689844e3f80d808bba28af8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>ae96fb47db3acc0701fdd1ab862c99ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>a9b95316011bbd9ce35626cbc743fdf7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::fad_scalar_type</type>
      <name>fad_scalar_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>aff7d8cba00d6128c6d397f70ad3246a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; scalar_type[FunctionCount], Kokkos::LayoutRight, execution_space, Kokkos::MemoryUnmanaged &gt;</type>
      <name>scalar_elem_vec_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>ade8a72b7f659e5e7a435b296a4c31751</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::elem_vec_type</type>
      <name>fad_elem_vec_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>a5593af0d38d8b254d8afdf373c18827c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputation</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>a247630617a65353a92e86fadf5752bb2</anchor>
      <arglist>(const ElementComputation &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputation</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>ac13a3ac7ea9d641564ece1b842f90ff1</anchor>
      <arglist>(const typename base_type::mesh_type &amp;arg_mesh, const typename base_type::vector_type &amp;arg_solution, const typename base_type::elem_graph_type &amp;arg_elem_graph, const typename base_type::sparse_matrix_type &amp;arg_jacobian, const typename base_type::vector_type &amp;arg_residual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>a43517ca3f74ab146787317b3f884f558</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>gatherSolution</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>ac35225465cc531b24a399c907075f471</anchor>
      <arglist>(const unsigned ielem, scalar_type val[], unsigned node_index[], double x[], double y[], double z[], fad_scalar_type res[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>computeElementResidual</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>a9a20a73e58e6c4b569f110d6711cdb25</anchor>
      <arglist>(const scalar_type dof_values[], const double x[], const double y[], const double z[], fad_scalar_type elem_res[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>a8e5b3df2e81240424bc53b9e0cea468c</anchor>
      <arglist>(const unsigned ielem) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputation</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>a247630617a65353a92e86fadf5752bb2</anchor>
      <arglist>(const ElementComputation &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputation</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>ac13a3ac7ea9d641564ece1b842f90ff1</anchor>
      <arglist>(const typename base_type::mesh_type &amp;arg_mesh, const typename base_type::vector_type &amp;arg_solution, const typename base_type::elem_graph_type &amp;arg_elem_graph, const typename base_type::sparse_matrix_type &amp;arg_jacobian, const typename base_type::vector_type &amp;arg_residual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>a43517ca3f74ab146787317b3f884f558</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>gatherSolution</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>ab61cee90db0717c08decd3351537558a</anchor>
      <arglist>(const unsigned ielem, const scalar_elem_vec_type &amp;val, unsigned node_index[], double x[], double y[], double z[], const fad_elem_vec_type &amp;res) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>computeElementResidual</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>a1429375aa5e00eee835428ca269c24f9</anchor>
      <arglist>(const scalar_elem_vec_type dof_values, const double x[], const double y[], const double z[], const fad_elem_vec_type &amp;elem_res) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>a8e5b3df2e81240424bc53b9e0cea468c</anchor>
      <arglist>(const unsigned ielem) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>FunctionCount</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>afc3f9070c86714ddedbb759ee853dbf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>IntegrationCount</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>a5cd9954d531d24a8659c183b98dfc092</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>ElemNodeCount</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_0fa2b4c454d4f83728dd9ef6bf6ddf0eb.html</anchorfile>
      <anchor>a03c68ad2d53e4deda7df0309420c55dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Kokkos::Example::FENL::ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;,           CrsMatrix&lt; ScalarType, ExecutionSpace &gt;,           FadQuadPoint &gt;</name>
    <filename>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</filename>
    <templarg></templarg>
    <templarg>Order</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;, CrsMatrix&lt; ScalarType, ExecutionSpace &gt;, Analytic &gt;</base>
    <base>ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;, CrsMatrix&lt; ScalarType, ExecutionSpace &gt;, Analytic &gt;</base>
    <member kind="typedef">
      <type>ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;, CrsMatrix&lt; ScalarType, ExecutionSpace &gt;, Analytic &gt;</type>
      <name>base_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>af3742961b5f3c494aafe4f0e06d6a30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>a82598aae75ad08623132ab383872d6ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>a937b05bb4377b90dd78d058d78cb8f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SFad&lt; scalar_type, 4 &gt;</type>
      <name>fad_scalar_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>a01bbe09b6128b57da0afb952576c12eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;, CrsMatrix&lt; ScalarType, ExecutionSpace &gt;, Analytic &gt;</type>
      <name>base_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>af3742961b5f3c494aafe4f0e06d6a30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>a82598aae75ad08623132ab383872d6ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>a937b05bb4377b90dd78d058d78cb8f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::elem_vec_type</type>
      <name>elem_vec_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>a5d5f2605a8f798e0a1afac4515b93a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::elem_mat_type</type>
      <name>elem_mat_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>a56257d8c7236d39af8f32c0f1e7dfded</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Fad::SFad&lt; scalar_type, 4 &gt;</type>
      <name>fad_scalar_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>a01bbe09b6128b57da0afb952576c12eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputation</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>ab47ecbb8b4edf9d9d7aa13c44b5eca3c</anchor>
      <arglist>(const ElementComputation &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputation</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>a8dfd8de9801c205150ceac9ad5973c96</anchor>
      <arglist>(const typename base_type::mesh_type &amp;arg_mesh, const typename base_type::vector_type &amp;arg_solution, const typename base_type::elem_graph_type &amp;arg_elem_graph, const typename base_type::sparse_matrix_type &amp;arg_jacobian, const typename base_type::vector_type &amp;arg_residual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>a0221cd51679108a16302bd9dd1470dc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>computeElementResidualJacobian</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>a82ca3f6342736a07a53817598fcdfbc6</anchor>
      <arglist>(const scalar_type dof_values[], const double x[], const double y[], const double z[], scalar_type elem_res[], scalar_type elem_mat[][FunctionCount]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>acb68e1bcb0055bec92ec6bc68afce0f8</anchor>
      <arglist>(const unsigned ielem) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputation</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>ab47ecbb8b4edf9d9d7aa13c44b5eca3c</anchor>
      <arglist>(const ElementComputation &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputation</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>a8dfd8de9801c205150ceac9ad5973c96</anchor>
      <arglist>(const typename base_type::mesh_type &amp;arg_mesh, const typename base_type::vector_type &amp;arg_solution, const typename base_type::elem_graph_type &amp;arg_elem_graph, const typename base_type::sparse_matrix_type &amp;arg_jacobian, const typename base_type::vector_type &amp;arg_residual)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>a0221cd51679108a16302bd9dd1470dc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>computeElementResidualJacobian</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>a3cad7033927fba41d27b2cba01149fbb</anchor>
      <arglist>(const elem_vec_type &amp;dof_values, const double x[], const double y[], const double z[], const elem_vec_type &amp;elem_res, const elem_mat_type &amp;elem_mat) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>acb68e1bcb0055bec92ec6bc68afce0f8</anchor>
      <arglist>(const unsigned ielem) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>FunctionCount</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>a41cd61949e604041b0e626a1707466ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>IntegrationCount</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>add3fcc01cfab4a4cd102015679845495</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>ElemNodeCount</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputation_3_01Kokkos_1_1Example_1_1BoxElemFixture_3_04785ea5cae89942cfc17505e6be79b9e.html</anchorfile>
      <anchor>a7f89dccc4015d7a5e57af9ab047de35d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;, CrsMatrix&lt; ScalarType, ExecutionSpace &gt;, Analytic &gt;</name>
    <filename>classKokkos_1_1Example_1_1FENL_1_1ElementComputation.html</filename>
  </compound>
  <compound kind="class">
    <name>ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;, CrsMatrix&lt; ScalarType, ExecutionSpace &gt;, FadElement &gt;</name>
    <filename>classKokkos_1_1Example_1_1FENL_1_1ElementComputation.html</filename>
  </compound>
  <compound kind="class">
    <name>Kokkos::Example::FENL::ElementComputationBase</name>
    <filename>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</filename>
    <templarg></templarg>
    <templarg>Order</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;</type>
      <name>mesh_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a43f56d40576d7132b128e178ff566295</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::Example::HexElement_Data&lt; mesh_type::ElemNode &gt;</type>
      <name>element_data_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>abf2ec84098645fb8c834e20bd8ad27f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExecutionSpace</type>
      <name>execution_space</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a7c5c1f6505ddd2c605b60bc2c455df61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType</type>
      <name>scalar_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a7a844193d4018efdd16d580c45d465b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CrsMatrix&lt; ScalarType, ExecutionSpace &gt;</type>
      <name>sparse_matrix_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a9a9beae74e93c93a7e8d3f72dac2b312</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sparse_matrix_type::StaticCrsGraphType</type>
      <name>sparse_graph_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a16d60ad73bfb6719490f9846bdaa3619</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; scalar_type *, Kokkos::LayoutLeft, execution_space &gt;</type>
      <name>vector_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>ac83a026adee9f87c6403d52cbcbe7161</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mesh_type::node_coord_type</type>
      <name>node_coord_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>aab9a8959345070c78ea101bc13bf801f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mesh_type::elem_node_type</type>
      <name>elem_node_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a5487eca7ff243985b1c7bf9da1e1bf9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; scalar_type *[FunctionCount][FunctionCount], execution_space &gt;</type>
      <name>elem_matrices_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a7203c3b00b2426a3237a61a33b01c520</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; scalar_type *[FunctionCount], execution_space &gt;</type>
      <name>elem_vectors_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a6aa6c5029f63163f4d9126e800c84eac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NodeNodeGraph&lt; elem_node_type, sparse_graph_type, ElemNodeCount &gt;::ElemGraphType</type>
      <name>elem_graph_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a38410c55e5919911950edc92a9226ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;</type>
      <name>mesh_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a43f56d40576d7132b128e178ff566295</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::Example::HexElement_Data&lt; mesh_type::ElemNode &gt;</type>
      <name>element_data_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>abf2ec84098645fb8c834e20bd8ad27f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExecutionSpace</type>
      <name>execution_space</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a7c5c1f6505ddd2c605b60bc2c455df61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType</type>
      <name>scalar_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a7a844193d4018efdd16d580c45d465b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CrsMatrix&lt; ScalarType, ExecutionSpace &gt;</type>
      <name>sparse_matrix_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a9a9beae74e93c93a7e8d3f72dac2b312</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sparse_matrix_type::StaticCrsGraphType</type>
      <name>sparse_graph_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a16d60ad73bfb6719490f9846bdaa3619</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; scalar_type *, Kokkos::LayoutLeft, execution_space &gt;</type>
      <name>vector_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>ac83a026adee9f87c6403d52cbcbe7161</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mesh_type::node_coord_type</type>
      <name>node_coord_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>aab9a8959345070c78ea101bc13bf801f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mesh_type::elem_node_type</type>
      <name>elem_node_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a5487eca7ff243985b1c7bf9da1e1bf9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; scalar_type *[FunctionCount][FunctionCount], execution_space &gt;</type>
      <name>elem_matrices_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a7203c3b00b2426a3237a61a33b01c520</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; scalar_type *[FunctionCount], execution_space &gt;</type>
      <name>elem_vectors_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a6aa6c5029f63163f4d9126e800c84eac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NodeNodeGraph&lt; elem_node_type, sparse_graph_type, ElemNodeCount &gt;::ElemGraphType</type>
      <name>elem_graph_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a38410c55e5919911950edc92a9226ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputationBase</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>ab05e114dc4b570ba3c8a27016ea6eb23</anchor>
      <arglist>(const ElementComputationBase &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputationBase</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a1d1f2fdc66eeee344677745295aa4b74</anchor>
      <arglist>(const mesh_type &amp;arg_mesh, const vector_type &amp;arg_solution, const elem_graph_type &amp;arg_elem_graph, const sparse_matrix_type &amp;arg_jacobian, const vector_type &amp;arg_residual)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION double</type>
      <name>transform_gradients</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a1dd7a4c1ff0c3d739922e1b2cb86f8a7</anchor>
      <arglist>(const double grad[][FunctionCount], const double x[], const double y[], const double z[], double dpsidx[], double dpsidy[], double dpsidz[]) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputationBase</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>ab05e114dc4b570ba3c8a27016ea6eb23</anchor>
      <arglist>(const ElementComputationBase &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementComputationBase</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a1d1f2fdc66eeee344677745295aa4b74</anchor>
      <arglist>(const mesh_type &amp;arg_mesh, const vector_type &amp;arg_solution, const elem_graph_type &amp;arg_elem_graph, const sparse_matrix_type &amp;arg_jacobian, const vector_type &amp;arg_residual)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION double</type>
      <name>transform_gradients</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a1dd7a4c1ff0c3d739922e1b2cb86f8a7</anchor>
      <arglist>(const double grad[][FunctionCount], const double x[], const double y[], const double z[], double dpsidx[], double dpsidy[], double dpsidz[]) const </arglist>
    </member>
    <member kind="variable">
      <type>const element_data_type</type>
      <name>elem_data</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a8479c9d525af8cac3ef6c430f04ab6ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const elem_node_type</type>
      <name>elem_node_ids</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>ae6b79857ef653d2dae16b1a04c3d962c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const node_coord_type</type>
      <name>node_coords</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a17fe45cbb5f191268280fa32b53d7780</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const elem_graph_type</type>
      <name>elem_graph</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a289febde40998d0f0b57807c2d8dbc66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const elem_matrices_type</type>
      <name>elem_jacobians</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a146bf537115a0589f9ff7bfe5777650b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const elem_vectors_type</type>
      <name>elem_residuals</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a486a5d1d0a1783cb8ac4bdb81e6fe413</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const vector_type</type>
      <name>solution</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>ae05dc0883b92bc337f535cce4d5dc702</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const vector_type</type>
      <name>residual</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a628814cf5c5bb99e38aa8c13f08fb7bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sparse_matrix_type</type>
      <name>jacobian</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a6cb6134a77daae22d38be5526a7f9dc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>SpatialDim</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a61111d6755860c098c6d1420d62fec06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>TensorDim</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a1cde22f95383052131b43896a95c3771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>ElemNodeCount</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>afefb10b10d5c739957fe374937863c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>FunctionCount</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a0f1b2f01ee2e0c4a2ecc1d9d1e888732</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>IntegrationCount</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1ElementComputationBase.html</anchorfile>
      <anchor>a20dcd0f0ed273b045b2584e6a71a1540</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::enable_if</name>
    <filename>structSacado_1_1mpl_1_1enable__if.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>enable_if_c&lt; Cond::value, T &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::enable_if_c</name>
    <filename>structSacado_1_1mpl_1_1enable__if__c.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>enable_if_c&lt; Cond::value, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1enable__if__c.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::enable_if_c&lt; true, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1enable__if__c_3_01true_00_01T_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1enable__if__c_3_01true_00_01T_01_4.html</anchorfile>
      <anchor>a9a2a1bb57ca803d3211b15c79c6d208e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::end</name>
    <filename>structSacado_1_1mpl_1_1end.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::end_impl</name>
    <filename>structSacado_1_1mpl_1_1end__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::end_impl&lt; range_c_tag &gt;</name>
    <filename>structSacado_1_1mpl_1_1end__impl_3_01range__c__tag_01_4.html</filename>
    <class kind="struct">Sacado::mpl::end_impl&lt; range_c_tag &gt;::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::ParameterVectorBase::Entry</name>
    <filename>structSacado_1_1ParameterVectorBase_1_1Entry.html</filename>
    <member kind="function">
      <type></type>
      <name>Entry</name>
      <anchorfile>structSacado_1_1ParameterVectorBase_1_1Entry.html</anchorfile>
      <anchor>a6b8294297f8412b4e019bfc13e321864</anchor>
      <arglist>(const Teuchos::RCP&lt; FamilyType &gt; &amp;f, BaseValueType bv)</arglist>
    </member>
    <member kind="variable">
      <type>Teuchos::RCP&lt; FamilyType &gt;</type>
      <name>family</name>
      <anchorfile>structSacado_1_1ParameterVectorBase_1_1Entry.html</anchorfile>
      <anchor>a430bd48f61c43048c5eecd2e0980e49d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BaseValueType</type>
      <name>baseValue</name>
      <anchorfile>structSacado_1_1ParameterVectorBase_1_1Entry.html</anchorfile>
      <anchor>a488a1df0f3713f4619ac20e0d67b58c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExpectedAnswer</name>
    <filename>structExpectedAnswer.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>structExpectedAnswer.html</anchorfile>
      <anchor>aa4bb7c50f29cbb52b869cce3854bf173</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>v</name>
      <anchorfile>structExpectedAnswer.html</anchorfile>
      <anchor>a2af423d525a4a3f9c8ada86aa0daf3a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dvdx</name>
      <anchorfile>structExpectedAnswer.html</anchorfile>
      <anchor>a6b2752bf74fc505b643fab2c1a9361d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dvdy</name>
      <anchorfile>structExpectedAnswer.html</anchorfile>
      <anchor>a3b5c5674cff359c0c6ef8755bcfd0e45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::ExpOp</name>
    <filename>classSacado_1_1Tay_1_1ExpOp.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ExpOp.html</anchorfile>
      <anchor>a5b85f08197ff73e7acdb4ab29d4de837</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ExpOp.html</anchorfile>
      <anchor>afb4dc4848696e92ee1af2dc17e1dc9ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1ExpOp.html</anchorfile>
      <anchor>a9f14a8820cce61b5eb48c76069185016</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExpOp</name>
      <anchorfile>classSacado_1_1Tay_1_1ExpOp.html</anchorfile>
      <anchor>a3a52ce73e285654f31a7f15f567e7c5d</anchor>
      <arglist>(const ExprT &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1ExpOp.html</anchorfile>
      <anchor>acd6320ade71e5b5e5c6271ca12e7f30b</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ExpOp.html</anchorfile>
      <anchor>a8473f7495cfcb57330c76f0cb3cc2605</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1ExpOp.html</anchorfile>
      <anchor>a04fb7a958e4d735a45fff160e80b44f7</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::valarray&lt; value_type &gt;</type>
      <name>c</name>
      <anchorfile>classSacado_1_1Tay_1_1ExpOp.html</anchorfile>
      <anchor>ad5d96eaed0425478f36e8f7d4b264674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dc</name>
      <anchorfile>classSacado_1_1Tay_1_1ExpOp.html</anchorfile>
      <anchor>a950e17e09eaceb203ef629db073deef4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr</name>
    <filename>classSacado_1_1LFad_1_1Expr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr</name>
    <filename>classSacado_1_1CacheFad_1_1Expr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::Expr</name>
    <filename>classSacado_1_1Tay_1_1Expr.html</filename>
    <templarg>ExprT</templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>aa09d4afb965eca48c9c75c7303ac78fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>a7f73abc304f2e406db5f8f198e1a5754</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>ae9ef3aa36e55a8a38093859898b3fabd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>a52cd4dba806d782e1d0ca3fa3a5297a6</anchor>
      <arglist>(const ExprT &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>a85f482b9d2c54fabd70b2782456cdb81</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>abbba500c00eb3e6c40a9779ee7ae8f76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>a1473dcb4c922a8f5070cbb95989ab825</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>a36525fbeed4f6f13fcc3ebda155258aa</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>a39a782d030487d8a54e97e0f76e1ac2a</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>a12d714860283f81a05f1875a19443ca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExprT</type>
      <name>expr_</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr.html</anchorfile>
      <anchor>a0d5366844252f9515f4fbf4c7f8adc7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr</name>
    <filename>classSacado_1_1Fad_1_1Expr.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr</name>
    <filename>classSacado_1_1ELRFad_1_1Expr.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; AbsOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a9891378a93d248bde33fa37288bc8445</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>ad66935031a6c2a882e1d1a1ce8d52c74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a2711293451b78d371403ea630febb2a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a5e562cbb89bb4c80c210c2c80cff1462</anchor>
      <arglist>(const ExprT &amp;expr_)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a62ebe8701ccd2058942ca5797207db38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a3863d4bfd8a91a0b484e729b3ae59fcb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>aa92fcd26e60a82bd60520dd6fe93ee5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION value_type</type>
      <name>val</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a69a25a592f72046d95ecd4858a85cf40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isLinear</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a6bafbbc0b86cbd5aac19cc5bce1700d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>af4fb7f20bf1150a38f77c36f62d0fc33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a856cc5cbdd0e1751f3af4fb56c21c630</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a703113001971622a68f2efc23e0e3537</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ExprT &amp;</type>
      <name>expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a9198963c71aba4a74da7b7deb2a8e90c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>v</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a70f04a0bc1d6f1423e3ab5f766e465d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>v_pos</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a779ae25321327b59f7bbe97c59f58088</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; AbsOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>aa94a5b01b7a1b691984caa35525cd36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>aba4d26ebceed62e87cb32621bde50bb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a1e81d2f2a65d524c4b55f9d6c2dfeb3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>ae50f4a11658cd3f8129e4b966afffc36</anchor>
      <arglist>(const ExprT &amp;expr_)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>aa6d6ce90ff06cabf930131add23f80d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>ae870d7669f47e572eea07f072b69e061</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a76868ac9d031c28f25917398fd9554e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a598a9bbbbd335a34f76bdea6b54f6cc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION value_type</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a9a86b6918585bb30fb97c2e188bf84e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a178e02d47cba45609dc3c1389d82bc16</anchor>
      <arglist>(const value_type &amp;bar, value_type partials[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a28c540397685e9e999c9c0f8e7ba92dc</anchor>
      <arglist>(int i, value_type dots[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION value_type</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a773d07c6b94a3870838797671c89f54a</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isLinear</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a8288519ad4c51cd12a009581d507075a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a7b8790f156e5091ed0e2dc2d26c09798</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a0ce655286fece33bfec6e8ef9b12bdaa</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a773e9627ddd28d57e5fd201df5bb9789</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type *</type>
      <name>getDx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>afb92308fe4a63b0a79ceb0895aeb2a79</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>num_args</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>ae1015be9d3c13913fb6dd5579b640a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_linear</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a89cc93311fc148366337bad8df7f75c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ExprT &amp;</type>
      <name>expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a935a6de9e0fcc4380078e043877bf1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>v</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>ae8f978b243161193e0e1cfa6f617c9d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>v_pos</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01AbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>aaeb0c7a8f5920436d30cee2a9c24ba30</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::Expr&lt; CacheTaylorImplementation&lt; T &gt; &gt;</name>
    <filename>classSacado_1_1Tay_1_1Expr_3_01CacheTaylorImplementation_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <base>Sacado::Tay::CacheTaylorImplementation</base>
    <member kind="typedef">
      <type>CacheTaylor&lt; T &gt;</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr_3_01CacheTaylorImplementation_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a5bd7a293d1b3c1ad7cef2f8914590946</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr_3_01CacheTaylorImplementation_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a0181839fdf65b104fed9f61d67aeefe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr_3_01CacheTaylorImplementation_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a97452479f4a53af73905fc9925cc6cbb</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr_3_01CacheTaylorImplementation_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a69483764ef96acb9bf97fc7b9ceb3905</anchor>
      <arglist>(int d, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Tay_1_1Expr_3_01CacheTaylorImplementation_3_01T_01_4_01_4.html</anchorfile>
      <anchor>afbf14791802fe27b9e0d9d4c56893d8e</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; FAbsOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a17b39f6650f7044b25ac7f4df1688c00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a64ae83bac09a96977d03d982b9dd5e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a0856cad6741f25946735769804720220</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>ab5c0fb3bc7a3e3bfafe2df18f3237781</anchor>
      <arglist>(const ExprT &amp;expr_)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a385d9aeb8f5e01197226e15f296f9dd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a7bc0f91794b69b23f30510b1fa24d6c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a5d4120b6619271ba00f5bf025c49d125</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION value_type</type>
      <name>val</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a88110153ccbb5adbccf8e97fc506ab04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isLinear</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>ad7a29a2c20ddb7640e823738c13ed0eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a646d3afc338f88ea31a1fdbc77b71c17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>ad6ca8f96867d71bbe25364719a32eb81</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a2bd048a557beb1f5fedb9a41dcd79b58</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ExprT &amp;</type>
      <name>expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a60ce329ebcf42e669a12c92234bbfe82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>v</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>ab10b75df09356a94c2eeabf2d6450646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>v_pos</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a3c5711488c17df2aebb5671fe520cb08</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; FAbsOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>ac0266853e7e141812352abe70caf7b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a9229783fcfe3f4d61cd5d2930fc21a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a181d6d8f474230fb49a225924e795741</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a7cee76ea1618e8b70368346fe2f4a32b</anchor>
      <arglist>(const ExprT &amp;expr_)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a3d2bc90481cb13b5be27924f30e4d154</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a2904c1b59805f886753c7680d41ee0ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a3786039c976f2359577580da47d6e075</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a5bd88bdbc73f579e4d773966fefd580b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION value_type</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a42c074603ecec1d86930a2bce1138ff0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>abd4d7a07b3afcef1d1b4982c7a66406c</anchor>
      <arglist>(const value_type &amp;bar, value_type partials[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>af590bc649289826aaa58aefa3015e482</anchor>
      <arglist>(int i, value_type dots[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION value_type</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a13c1e2c8eb80f9e87ab0483933278d9e</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isLinear</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>afcfd9dbcf7f0258da02bf1ad9d370e8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a12c3079009dded9854c63e397b6fc43c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a52c848121e15dfe21f808b1b954bfb33</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a77deae38f2939d0bcdf65fcf5ca779c4</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type *</type>
      <name>getDx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a999fb7fcc7b203141a7961b2d3123066</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>num_args</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a89ae91d124677db2e2029830bb093d14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_linear</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>ab6c97b728d96ab278a7790ee90f79690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ExprT &amp;</type>
      <name>expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a6377ab0fec85ba99fccd95c7b882357e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>v</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>adaf52b889508d14fe843367e2f7ea00d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>v_pos</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01FAbsOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>af61e2ac2154350bd4c2cc50c63a1660e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::Fad::GeneralFad</base>
    <member kind="typedef">
      <type>GeneralFad&lt; T, Storage &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>ab55f9ff4bed0b9a4a3ed83ebb91d782d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeneralFad&lt; T, Storage &gt;::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a0e731481a280a12b478cd1f7319bd976</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseExpr&lt; GeneralFad&lt; T, Storage &gt; &gt;::type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a6fd0ab1a3ed301943bfabb02476bc745</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a3a09ffd9117432f1e8a81afc489fcdc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a6a19e385a0b401b9c263356657dd7b20</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a5eae18692cbfd195711bd0956277d4fd</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a8273981ca464dbc84eb768b89da5ed5f</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>aec46156d9fcdc7fc0edc80ee46f7a2b0</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>aaf0654cb1f3c6529149e386541cfe5d0</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a928aff5d991af1123c46615892e6810f</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>af3206e82c907a25e7251c738bc93c4e4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::CacheFad::GeneralFad</base>
    <member kind="typedef">
      <type>GeneralFad&lt; T, Storage &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>af99e806f0779524e26a89e0cf1be0759</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeneralFad&lt; T, Storage &gt;::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>aabc5eb0b6e16bf8bab30fee60fc1e650</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseExpr&lt; GeneralFad&lt; T, Storage &gt; &gt;::type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>adcf74f54c39263e0bb1b16200088e84d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a8a6a0811eebdff7e585ef128b7dcf779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a068e8e259a8877b6bb51c76e27ff2613</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a3089d54db06828aa7e8b04be0cb4a2f7</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>aeb0727457c36558004ef4aa3946c163b</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a1dda68b5b04fe74fcca171f3d223ddf8</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>aba37a34e628015e87e0e1580c2a4ddd0</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a86e2482c5422c7bffc470cfeedbf2e50</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a7912bf7dd336c0d854c835768a555b66</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::ELRCacheFad::GeneralFad</base>
    <member kind="typedef">
      <type>GeneralFad&lt; T, Storage &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a7a4c07e2948b32411c3673680f6b0271</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeneralFad&lt; T, Storage &gt;::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>adf957000f96ae5e615b2c5786cc5ab83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseExpr&lt; GeneralFad&lt; T, Storage &gt; &gt;::type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>adbb3ef77aaf98033d045049bab9ebc76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a2f34fc17ad6633f0125f556c25b08323</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>af79aff2c54b2956a049f7f51b1e619bd</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a5c313bf8302cd8f85b9cef3a632aa101</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>aaeb4d53fd72e34869564aadd057a178f</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a801a16e34e248d101e5b69ca527d3c6d</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>aab8c4a82bb8ddf131b667dc24facd9fb</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a46ab9e851e3df4459d684c504f0ff895</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>aea4b26290978d011f7456df834a6e0b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>af4aed4123299fe091d53c2e2f01a007d</anchor>
      <arglist>(const T &amp;bar, value_type partials[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a5079bd1ed607a21cd2651591bd06af80</anchor>
      <arglist>(int i, value_type dots[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>abfebcd2ffb5b0266c3cfb17d7dac8a1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isLinear</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a93a7e05edbeaa77582b6b51bf9b672ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION T</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a8f3ab654ce86f6b3f6867b41ea01bf1c</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type *</type>
      <name>getDx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a55d657a7fb16d5007e726e7d479f6192</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>num_args</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>aff552fa70f844950562da5aa19104888</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_linear</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a0cf8cfb1af9c813697364da0fafc8b09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::ELRFad::GeneralFad</base>
    <member kind="typedef">
      <type>GeneralFad&lt; T, Storage &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a5bdae9dd15b70010d52812464c47047d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeneralFad&lt; T, Storage &gt;::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a5431f125cbdacc3e40335f98f9130ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseExpr&lt; GeneralFad&lt; T, Storage &gt; &gt;::type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a6ad742c8a65f640d0bf7c7801ee36a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a1da6017425526d8280c2b1047d7d6bd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a52e870775478da90da3043b8fdb622b4</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a34eafa2fc16f9e6bf0cf180fae282c0c</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a6a92aa64f4ffbd8ce4165522c646a9c0</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>ae6ff3a8579fd7eb20232dfa1839dae43</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a23730140ebe5498be9e3d46128b085bc</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>ad6fbe3e9a92f280f3c9b4086eef0da5c</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>adf53caf7d6c05a784efa640efe03df3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a35932a4d120f9953bcf5613e6b81436e</anchor>
      <arglist>(const T &amp;bar, value_type partials[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a288cd8e8535e97769bb185adb07d1f49</anchor>
      <arglist>(int i, value_type dots[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a8490b8b212775b1d4cd20edfc6a57bc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isActive2</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>ac4e32f01f66f2834d79ddf9f42fdc8f0</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isLinear</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a7542b9ae0dcc40a97009bd16854cd75d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a9b29f4b434d2f344998b600ffe9d9a23</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type *</type>
      <name>getDx</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>aa63e8cb41d4ba4970e7d05fb7dbfa766</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>numActiveArgs</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a3deb6e80c46e1cda7a024cd240991ef7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>computeActivePartials</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a26c263465af6bfcf02a16b8eaa3874d7</anchor>
      <arglist>(const T &amp;bar, value_type *partials) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>num_args</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a80631b2f53aa4c93f099bbcf07a8832b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_linear</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01GeneralFad_3_01T_00_01Storage_01_4_01_4.html</anchorfile>
      <anchor>a87d751a3ed2e568246ab239a9398b773</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Expr&lt; GeneralFad&lt; ValueT, MemPoolStorage&lt; ValueT &gt; &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr.html</filename>
  </compound>
  <compound kind="class">
    <name>Expr&lt; GeneralFad&lt; ValueT, VectorDynamicStorage&lt; ValueT &gt; &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::Expr&lt; LogicalSparseImp&lt; ValT, LogT &gt; &gt;</name>
    <filename>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg>ValT</templarg>
    <templarg>LogT</templarg>
    <base>Sacado::LFad::LogicalSparseImp</base>
    <member kind="typedef">
      <type>LogicalSparseImp&lt; ValT, LogT &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a7eec0b3672f26344e6ad39069c3ab0cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LogicalSparseImp&lt; ValT, LogT &gt;::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>afe5f93338a4af554a6c1c07f39b2ab73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LogicalSparse&lt; ValT, LogT &gt;</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>adf92ed1bacded5c881eaf4e8637425bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a1f23750b3a31f5f8b037c1d89b88cfdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>aed30218f114044397999ebfe5a1f2acb</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a4a5e39bef5aba3e3f5c11f438ca6be2e</anchor>
      <arglist>(const int sz, const ValT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>ab40e79fd82ba4769a4241cfdc9494d98</anchor>
      <arglist>(const int sz, const int i, const ValT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a9c8819f91f628a5193d9fd219b0dd42f</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>ac6fff95fe438d6a19b92494a282f0b71</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1LFad_1_1Expr_3_01LogicalSparseImp_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a8e5512cffe0eba18e8bd8cde6d2c9d59</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>RemoveConst&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ad9a05e2a1b3f6bae9d1f83533e552a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a8c439af604f5520bb02f7928a778f914</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SFad&lt; value_type, Num &gt;</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ace54e939a08bc8dc3e808cd6f4dd1e63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SACADO_ENABLE_VALUE_FUNC</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a96a66597c9a84bc447b91df6fe3dd695</anchor>
      <arglist>(Expr &amp;) operator</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4e73a7edc1fc8b2e94366fa93e30b314</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aad07e95b5a5074f74c8e8938d96e3d6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a6f3d9312ae0175c8df345071e4ceecdc</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a8bd5e2b823e004ea9e340ac9d28587ef</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a993c3d5ced378da17b7a34007cf0ecc4</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a33f026a6ccf5732319c6c7a758099d0e</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a1297060ad9781e040183e5bf60b61cf1</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a95b64dc07bd6c626d64ce1461d0a149b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af799881ab41a74855224bbb90525c395</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab533089a42950db6f104a7626d3d8062</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a5b15d617882c79c57da6bf0210af1cc3</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7f89033fcc940a46528a7eff68bbfa28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aa92c07096603a2e7786ab1ae0edc3f10</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a6f8e221a08f252090c94b6be4a16072a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae0e0bfa7f97ff6442a684e815be7bdbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SACADO_ENABLE_EXPR_FUNC</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a2338a7713730ad2fe7fb5ac13bf31dcb</anchor>
      <arglist>(bool) isEqualTo(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a086561f8ffbb9b82ea0b06fbcc3972a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a6ed7b60bdd553e5c8f89fe103634be68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a946772f522365798a3f24863a318ff4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a91ee981baf7551e93e57eb138124e14e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>acc0b82410b4cb8c0e03fe1f28cadc19a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af5547763e1649c67db6753d55429f6f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a3ed6cddf9add82959fda8d1e9f0b41f0</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a55d85a1cd1b14af46c850bfea75d87e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a25da66e8592782f3de9c555b399c4a46</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a1deb0d6539e1258260af5c7bd08984a5</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a0d6abcae7e63885e96625c0971c9aae5</anchor>
      <arglist>(int i) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <class kind="struct">Sacado::ELRCacheFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;::LocalAccumOp</class>
    <member kind="typedef">
      <type>RemoveConst&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a1e95223106fce2cadee0064688d1e5f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af343bbe73d81f5b693bde27c251be1e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SFad&lt; value_type, Num &gt;</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4717af9596344f948ca371d762effb3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SACADO_ENABLE_VALUE_FUNC</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a504491de7bd40c1a5755f549320cd264</anchor>
      <arglist>(Expr &amp;) operator</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a6438d6af8320e15402c344d5f861937e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>num_args</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>acc85ea2938657ffc803006ace21c2aa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_linear</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a230f891d0b38d40f3ae26090cf696734</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aaae297100f0a1820c805e166db3c2a48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a5d85f52f4b9aae796ff927a66fe4e9ca</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a36d7631dd48e9f7b1e9b986e6fa53d52</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>add85e027d133b438f1fb4fb9f503fa84</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a5a0e9dcd94766b375e82a42e4ae7b987</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aebad42307680f7c861f5e1d029e97214</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab9a0d9f30d8c1537695eb04cbe0f999f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a1b224226fba53a2f89742e4c3f73304e</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a167bd8a9f85ef9e9ae31eb4c06bae76b</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ad1b20d489225c5f59626650eb84492fd</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a9634ecd888f26b14d0b157c01128bd44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>affd28ba3928a8ec9e780077e134493cb</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a9ae451b0ca31afb7bd04e53d7aad67c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a78e5397287097ed485d96f01f80d154e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SACADO_ENABLE_EXPR_FUNC</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7ddd958e65b7539ce3a877ad8a24436c</anchor>
      <arglist>(bool) isEqualTo(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aeee3790ee6aeba29f03b9a7ffba09bcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a98d728bd3c4fe28298f9a9761163c33d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a245e494c1257e3ebd4f6c93416a9d8b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a2ecbe96af5bc273c2eafe2a92ff6a329</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a2a8e58aaba08f21d245f107d1d857316</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a8795b0ed5930b1060681b73d732b3db3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a21c184fde2a5d2496059903bc85e2919</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a9cf5f3189b8633579485042907f30f72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a667b2b42f0662ad95fd5a3e16a490552</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>acd8150e849c34b5399a5e0b179a50609</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a2a5c36988cca020b751bc26c4c7e8576</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a6dcc030164d327a71ae740cf0f1f6a24</anchor>
      <arglist>(const T &amp;bar, value_type partials[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a17692b53755f13f1452cb906a93c4045</anchor>
      <arglist>(int i, value_type dots[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af883563bdc1a9cc71c6764648f29ab2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION T</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>afca1c44b44e6ef974d69e6057fe60ed4</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type *</type>
      <name>getDx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aff303a699c517d139194ab1a496314cb</anchor>
      <arglist>(int j) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;</name>
    <filename>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <class kind="struct">Sacado::ELRFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;::LocalAccumOp</class>
    <member kind="typedef">
      <type>RemoveConst&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a39d6f6261630b92e4958826cf6e3c148</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab0a5e26336687eb1a730b4fd4b12ce0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SFad&lt; value_type, Num &gt;</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a0dfa00e993fedbe595e89a5aaaee8143</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SACADO_ENABLE_VALUE_FUNC</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac8e1c2d724d1278fda4db739335ea99e</anchor>
      <arglist>(Expr &amp;) operator</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7f78e17e3ad4954951582c6b6a329244</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>num_args</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aa8e1f1322323cd3a64322b4dacbb725c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_linear</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a13dfd1300856678668ad31420aa07260</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a95d17a0d64597f647db087fcc34497e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>afd3907fed1f52be5b32a1f6b1763a725</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a1cd58d0ae746f341c7a0afdd2bdc4b0c</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a332f1ade0b001939e0d155985c9fbbf8</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a621cc2471aded71ec1e35b52bca90ff3</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a551c629551892c5692bf7cf2a6a76ee4</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a64f0d69a6da58a377ae5484201a417de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a66e17119a704bf298136fb9e8ca16de1</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af0c41b760b6f6f70a7dad7d629ddf1fb</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab8af87a10297bd762349011710fd28e8</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a578bb469a8367e166e3d5aa55e5d878e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a05fa523a90ea300d76dc5b802e682a31</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a5133939555596fce33806a807337593d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SACADO_ENABLE_EXPR_FUNC</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>adc0530acd850d473079b23b58dd94f21</anchor>
      <arglist>(bool) isEqualTo(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ad5714b902b20be72c10ae8b66361efe7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab49dd5fc97f73eb69ec844e799d1a55f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae5bd436bba34a9b87046c91dae953596</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a592d085f7e342462e7189b7a60fcd750</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>adb22784166ba5b67ca0554b03b7da5a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac62056a45df2d9a99bd8293665e4b4b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af6cf7b8a7dd7b6081dafe910151407e9</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a83ea1aa8d322224c564c46f3124581ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7bd8c98a1e05ade3ea2bb303912654f1</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a68adbb35c1ab3a030f6f58627d41ff8b</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7a05b87b6ca3206ef8a5f857d5af7da7</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a243383faf6afed33fc2eab67ab52ceb5</anchor>
      <arglist>(const T &amp;bar, value_type partials[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aa34c865422057425f0c58035208ef731</anchor>
      <arglist>(int i, value_type dots[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac75a47f4776f296806f48ea6873ccb63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a151f920855efb41fabe9a05d81f807e3</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type *</type>
      <name>getDx</name>
      <anchorfile>classSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a15e8c4856ba444e2fcf5d17af81cccf5</anchor>
      <arglist>(int j) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Expr&lt; SFadExprTag&lt; T, Num &gt;, ExprSpecDefault &gt;</name>
    <filename>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>RemoveConst&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a0230bd245ef6a57949d3e4f3245fbeb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a750244e133a0c13a2e1b72abfdade852</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SFad&lt; value_type, Num &gt;</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a75b799e953c39374d4c42dccabac3d9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SACADO_ENABLE_VALUE_FUNC</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>ab34ec3141cdde679c6f0644bb60449ee</anchor>
      <arglist>(Expr &amp;) operator</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a78f4700a60d3ccf89a54030771e8cf01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a5c3140311f7f653e39ed00e6dae00fdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>ada51d739932a5558d4a0249c46e64a90</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a4f12c8ff4dd6a674aecb45beb895f1f6</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a017704e1a5bc2f965df2ec834eaeb39b</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a2fb41e131046fd5cf6fa8767a7b24fb1</anchor>
      <arglist>(const Expr &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a6c764229a2f9231bb438fe2dc06cae7f</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~Expr</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a71fd13c66eaaf85d857358cc305fc6f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a144a48b112a9d99e702e7e8b17c0dd65</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>ab86a096b1e65d963e9dace873c35b89c</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a0f45786a55d0550fd037568ec5ffc6f2</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a85c5811848afdd5cd84bf3ddb783b375</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>ab3cd080786478f444056513eb399e43e</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>aa321e17d88a37c34f89d25c59c31ded7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SACADO_ENABLE_EXPR_FUNC</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a1a3cc310ef28f57b0d4b91340cc34e87</anchor>
      <arglist>(bool) isEqualTo(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>ae2927b2e786ada5c86fb3187b1bc295c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a701bad3be25d0dcae1f5d15aac160b7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a39fa8f6afe6d4c1f47b8ee8de5fc6afd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>ae3d94f50e97fb14b19885b5889fb11ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>aa920cbea296ee15c4ee8d3d1bbbb61da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a2bdb7bf10e4dd72d8ea7d4d23dbd6e5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a98865de01bf8613f396cb6cfa38bec53</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a4fd2ef86b2be164203972e9219972e20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a4c28c53c99cf17df993bf03063f0d9a8</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>aeac397c0687cb5f2606ce5ae22372556</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_00_01ExprSpecDefault_01_4.html</anchorfile>
      <anchor>a8eb8551607729765c71d36eae9137952</anchor>
      <arglist>(int i) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; UnaryMinusOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a13d59e9b5cd74cb3eb36002bd639bdca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a32bfedad6d0fb9bbdaef112cb71f1fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>abf0d093e10714d3ecaff2d3d1935f6f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a445abe6e3c5b55b3431d7ea1585476c3</anchor>
      <arglist>(const ExprT &amp;expr_)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a3825b9258d49b1de8a5dfa7ac4ceb55e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a228bd84441ec91117e493c8e5a95ce88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a2ed7316d9e5a24a01e50c8409bd2130d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION value_type</type>
      <name>val</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a45ec8fc39f8f3d7d5b17a9400c06c183</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isLinear</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a89193ecfa99a47d0ec1904eeba8359bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>abbb20251d43dbe0e2c4e563b790e2861</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a639b2d62dd48c73c5fcd26109df70311</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a51bf14beea1261f61500b69982b2f9aa</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ExprT &amp;</type>
      <name>expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a4eb21cd0cb3ebd9fbd15c9b31829cf94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; UnaryMinusOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a2dcd3ce1ccdb0cd1e2ba02b9bf7378ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a85e1b316a7c105751184a6fef5aac432</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a66d0654d3988859a6036a2be6e6c1035</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a961b389e87511f2bd380ad63ee338b1e</anchor>
      <arglist>(const ExprT &amp;expr_)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a8189392955b7381001d4df10a95dac8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a293a8754b2b9da9fed4d6673f2aa70b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a8fa1e468c7e4e40d142a86fd400bd20e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a1f1008b50b040df967c20a27947586ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION value_type</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>acbf73da3f73d1deeeb0efbf05c65db75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>acc0e257d3888eb67b80fb9bf1f58216b</anchor>
      <arglist>(const value_type &amp;bar, value_type partials[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>af047f2de3ceaaf7d9db7887e937cb762</anchor>
      <arglist>(int i, value_type dots[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION value_type</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a986479ac1e63154acb09b7d1124d806d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isLinear</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>aa2d6189fc9c1639cd52092e1e4058c65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a6403864e346f3aead98974eacea1283b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>aa2310946fb863354047fcdc3c2c1dd71</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>ad6fa9cbe2f03444c2e491516068437f0</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type *</type>
      <name>getDx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>ad48cb225dcf69b471e4550c244e27487</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>num_args</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a4090cd31270b2907372a1d4db4ce5144</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_linear</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>af9281a8f45b3274fc96b5bc50b5146af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ExprT &amp;</type>
      <name>expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryMinusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>ab21e0e5e8ef8907b304ae815c269fe2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::Expr&lt; UnaryPlusOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1CacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a2effa399fb5e7bd14cfba08dcbfdcbbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a0b225033fcdb65175cd6388d84f3952a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a496052080464a9cae4d2b8c68f528540</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>afb8b209ecc0e44fb2c6226ddf6c59d9e</anchor>
      <arglist>(const ExprT &amp;expr_)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a339ead8219ba2ed5f70d2a6aa19be172</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a1feb6a2acd33a97c8e825f92c49ca6aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a14f4b0a47d46d9d6d58611c0ba8d43fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION value_type</type>
      <name>val</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a53a337f63706e42f3c0409fe98810e52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isLinear</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>abc3b88d6b56796447d3d5a4b27627b16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>ada880217ad0f4ac7b4b5cc7bd23c5a07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a40fc73186105c8321918bb4efaa83259</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>ad10b8a97175bb16e604b63fb1f7c94a1</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ExprT &amp;</type>
      <name>expr</name>
      <anchorfile>classSacado_1_1CacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a728ef62f2c095a5f109219de092c457a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::Expr&lt; UnaryPlusOp&lt; ExprT &gt; &gt;</name>
    <filename>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a1a7a308eea8f2b6c290798b59ec28514</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a0f69e29fd74c6ad6d6ee034b430481df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a763194b6565877fb7a5b1c889db1d509</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>Expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a824fa272f9526a2c353cb7af8f76c330</anchor>
      <arglist>(const ExprT &amp;expr_)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a869f1f616a3300a5d5788587e30357af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isActive</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a4522d7299383f37e6f29bbf0668a65c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a57cb4c054621bc65f9c486ccb9a33d1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a843a83b2a0648351c3315cd2913da11e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION value_type</type>
      <name>val</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a3b9672d947ebd314e17b79df78916535</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>computePartials</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a68720bf156990ac568db79cd9c35c7ce</anchor>
      <arglist>(const value_type &amp;bar, value_type partials[]) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>getTangents</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>acd52644836cae063161c047afd75c486</anchor>
      <arglist>(int i, value_type dots[]) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getTangent</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a5529df960f2f906d6a02f35c68771c77</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isLinear</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a51b64413a460a7b4886a6c5e1e545845</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>aceb948528171ca40cfefec8a12489ddb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>ac88bb2f0771800289338909727ab6178</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a616b690d3c2792e2bb88f1515f556817</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const value_type *</type>
      <name>getDx</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>ab4916962791fda95b734551f31b5931c</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>num_args</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a7bfda06af305b4e917ca19a1c28ac0f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_linear</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>a3045992acacd21e572a4fd2d313ed69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ExprT &amp;</type>
      <name>expr</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1Expr_3_01UnaryPlusOp_3_01ExprT_01_4_01_4.html</anchorfile>
      <anchor>af1618ef9fb4d187d02d94e1f04843035</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::ExprConstRef</name>
    <filename>structSacado_1_1ELRCacheFad_1_1ExprConstRef.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ELRCacheFad_1_1ExprConstRef.html</anchorfile>
      <anchor>acc2180dae4262a1806021e714e82f1a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::ExprConstRef</name>
    <filename>structSacado_1_1ELRFad_1_1ExprConstRef.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ELRFad_1_1ExprConstRef.html</anchorfile>
      <anchor>a297282e06f09b115c70a79fbba9e1d9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::ExprConstRef&lt; ConstExpr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ELRCacheFad_1_1ExprConstRef_3_01ConstExpr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>const ConstExpr&lt; T &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ELRCacheFad_1_1ExprConstRef_3_01ConstExpr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a045731f642d543a806e463ddc26522d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::ExprConstRef&lt; ConstExpr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ELRFad_1_1ExprConstRef_3_01ConstExpr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>const ConstExpr&lt; T &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ELRFad_1_1ExprConstRef_3_01ConstExpr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ace1393a794634318a1d7990f4d167be8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs</name>
    <filename>structExprFuncs.html</filename>
    <class kind="struct">ExprFuncs::add</class>
    <class kind="struct">ExprFuncs::add&lt; T, 1 &gt;</class>
    <class kind="struct">ExprFuncs::add&lt; T, 10 &gt;</class>
    <class kind="struct">ExprFuncs::add&lt; T, 15 &gt;</class>
    <class kind="struct">ExprFuncs::add&lt; T, 2 &gt;</class>
    <class kind="struct">ExprFuncs::add&lt; T, 20 &gt;</class>
    <class kind="struct">ExprFuncs::add&lt; T, 3 &gt;</class>
    <class kind="struct">ExprFuncs::add&lt; T, 4 &gt;</class>
    <class kind="struct">ExprFuncs::add&lt; T, 5 &gt;</class>
    <class kind="struct">ExprFuncs::add_base</class>
    <class kind="struct">ExprFuncs::mult</class>
    <class kind="struct">ExprFuncs::mult&lt; T, 1 &gt;</class>
    <class kind="struct">ExprFuncs::mult&lt; T, 10 &gt;</class>
    <class kind="struct">ExprFuncs::mult&lt; T, 15 &gt;</class>
    <class kind="struct">ExprFuncs::mult&lt; T, 2 &gt;</class>
    <class kind="struct">ExprFuncs::mult&lt; T, 20 &gt;</class>
    <class kind="struct">ExprFuncs::mult&lt; T, 3 &gt;</class>
    <class kind="struct">ExprFuncs::mult&lt; T, 4 &gt;</class>
    <class kind="struct">ExprFuncs::mult&lt; T, 5 &gt;</class>
    <class kind="struct">ExprFuncs::mult_base</class>
    <class kind="struct">ExprFuncs::nest</class>
    <class kind="struct">ExprFuncs::nest&lt; T, 1 &gt;</class>
    <class kind="struct">ExprFuncs::nest&lt; T, 10 &gt;</class>
    <class kind="struct">ExprFuncs::nest&lt; T, 15 &gt;</class>
    <class kind="struct">ExprFuncs::nest&lt; T, 2 &gt;</class>
    <class kind="struct">ExprFuncs::nest&lt; T, 20 &gt;</class>
    <class kind="struct">ExprFuncs::nest&lt; T, 3 &gt;</class>
    <class kind="struct">ExprFuncs::nest&lt; T, 4 &gt;</class>
    <class kind="struct">ExprFuncs::nest&lt; T, 5 &gt;</class>
    <class kind="struct">ExprFuncs::nest_base</class>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>nfunc</name>
      <anchorfile>structExprFuncs.html</anchorfile>
      <anchor>a27abb48b2f0e0ce3649cbe018bae151d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>mult_names</name>
      <anchorfile>structExprFuncs.html</anchorfile>
      <anchor>afeb1b30426a6aec7d59fff4a93c9b4e4</anchor>
      <arglist>[nfunc]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>nest_names</name>
      <anchorfile>structExprFuncs.html</anchorfile>
      <anchor>a97163bc096cc05620253a995c07dcb16</anchor>
      <arglist>[nfunc]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>add_names</name>
      <anchorfile>structExprFuncs.html</anchorfile>
      <anchor>abf0fb425fd0f8d1a02d38f140ffac20e</anchor>
      <arglist>[nfunc]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>nx_max</name>
      <anchorfile>structExprFuncs.html</anchorfile>
      <anchor>af6e1d7f66ee6a3974af2c06949448cb7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprLevel</name>
    <filename>structSacado_1_1Fad_1_1ExprLevel.html</filename>
    <templarg>T</templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1Fad_1_1ExprLevel.html</anchorfile>
      <anchor>a0778e96f9dbbbbad4a3daed26fc79dac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::LFad::ExprLevel</name>
    <filename>structSacado_1_1LFad_1_1ExprLevel.html</filename>
    <templarg>T</templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1LFad_1_1ExprLevel.html</anchorfile>
      <anchor>a3c1b4dcd0608b15846527a9f360d6af7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::ExprLevel</name>
    <filename>structSacado_1_1ELRCacheFad_1_1ExprLevel.html</filename>
    <templarg>T</templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1ELRCacheFad_1_1ExprLevel.html</anchorfile>
      <anchor>aed565282d4f3b0f0c57a805da4fe40fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::CacheFad::ExprLevel</name>
    <filename>structSacado_1_1CacheFad_1_1ExprLevel.html</filename>
    <templarg>T</templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1CacheFad_1_1ExprLevel.html</anchorfile>
      <anchor>adf63a944988bb892ca4284d2ca4393de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::ExprLevel</name>
    <filename>structSacado_1_1ELRFad_1_1ExprLevel.html</filename>
    <templarg>T</templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1ELRFad_1_1ExprLevel.html</anchorfile>
      <anchor>a057be6b2bfb99f82ad8635d63bc96a3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::ExprLevel&lt; DFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1ExprLevel_3_01DFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1FAD__NS_1_1ExprLevel_3_01DFad_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a1517540aecbd35174de808562f3fc7d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprLevel&lt; DMFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprLevel_3_01DMFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1Fad_1_1ExprLevel_3_01DMFad_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a8550d4d03d5e5a4953146d2682670a62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprLevel&lt; DVFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprLevel_3_01DVFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1Fad_1_1ExprLevel_3_01DVFad_3_01T_01_4_01_4.html</anchorfile>
      <anchor>affca0beb99f553b0fa4316b0e86769fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprLevel&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprLevel_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1Fad_1_1ExprLevel_3_01Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a97a87e74ba78d64b291308737d359de4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::LFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1LFad_1_1ExprLevel_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1LFad_1_1ExprLevel_3_01Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a4a9969cd6d83e1924bec5d173c94b762</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ELRCacheFad_1_1ExprLevel_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1ELRCacheFad_1_1ExprLevel_3_01Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a6b737c224105ddef570646bc5c58685b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::CacheFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1CacheFad_1_1ExprLevel_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1CacheFad_1_1ExprLevel_3_01Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ae879767b17307427c21d7263147c95f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ELRFad_1_1ExprLevel_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1ELRFad_1_1ExprLevel_3_01Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a9fb7e1359e767ae607d9e800bcfe5140</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::LFad::ExprLevel&lt; LogicalSparse&lt; T, L &gt; &gt;</name>
    <filename>structSacado_1_1LFad_1_1ExprLevel_3_01LogicalSparse_3_01T_00_01L_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1LFad_1_1ExprLevel_3_01LogicalSparse_3_01T_00_01L_01_4_01_4.html</anchorfile>
      <anchor>a2f0711ec660981ccc8375953114b85ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::ExprLevel&lt; SFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1ExprLevel_3_01SFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1FAD__NS_1_1ExprLevel_3_01SFad_3_01T_00_01N_01_4_01_4.html</anchorfile>
      <anchor>a717845adb6a10da4f15127167524a8a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::ExprLevel&lt; SLFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1ExprLevel_3_01SLFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1FAD__NS_1_1ExprLevel_3_01SLFad_3_01T_00_01N_01_4_01_4.html</anchorfile>
      <anchor>a6f40704e18045af6dea28763c12ef5d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::ExprLevel&lt; ViewFad&lt; T, l, s, U &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1ExprLevel_3_01ViewFad_3_01T_00_01l_00_01s_00_01U_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>l</templarg>
    <templarg>s</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1FAD__NS_1_1ExprLevel_3_01ViewFad_3_01T_00_01l_00_01s_00_01U_01_4_01_4.html</anchorfile>
      <anchor>a6ce2017af711f487000fb51e0651e6ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprSpecDefault</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Fad_1_1ExprSpec.html</anchorfile>
      <anchor>ab3a207522340eda8fbc4d3ce4bb6c3e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpec&lt; Expr&lt; ExprT, Spec &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1ExprSpec_3_01Expr_3_01ExprT_00_01Spec_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Spec</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Fad_1_1ExprSpec_3_01Expr_3_01ExprT_00_01Spec_01_4_01_4.html</anchorfile>
      <anchor>a9ab22eb29fc1957388c8cc5cbb99688b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::ExprSpecDefault</name>
    <filename>structSacado_1_1Fad_1_1ExprSpecDefault.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::FAbsOp</name>
    <filename>classSacado_1_1CacheFad_1_1FAbsOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::FAbsOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1FAbsOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::FAbsOp</name>
    <filename>classSacado_1_1Tay_1_1FAbsOp.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1FAbsOp.html</anchorfile>
      <anchor>af51a13282f536edcc2fc051e395ccea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1FAbsOp.html</anchorfile>
      <anchor>a833efb6b957204504e4b77913f362c0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1FAbsOp.html</anchorfile>
      <anchor>a89035f77ae3cbd32ae09b120bdf29edb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FAbsOp</name>
      <anchorfile>classSacado_1_1Tay_1_1FAbsOp.html</anchorfile>
      <anchor>ae05fe01bc45f2b8b5e2afa2772ecc934</anchor>
      <arglist>(const ExprT &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1FAbsOp.html</anchorfile>
      <anchor>af28d601563558b0525c0aa1c1266005c</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1FAbsOp.html</anchorfile>
      <anchor>afd881306e9bcf71cfb844073e545a5f1</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1FAbsOp.html</anchorfile>
      <anchor>ac46ab83202f7d8dacf4f4124568ee816</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Fad_LAPACK</name>
    <filename>classSacado_1_1Fad_1_1Fad__LAPACK.html</filename>
    <templarg>OrdinalType</templarg>
    <templarg>FadType</templarg>
    <member kind="function">
      <type>void</type>
      <name>GESV</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a6dfea5d52e569a1ee7c6c1aac0e9a620</anchor>
      <arglist>(const OrdinalType n, const OrdinalType nrhs, FadType *A, const OrdinalType lda, OrdinalType *IPIV, FadType *B, const OrdinalType ldb, OrdinalType *info) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GESV</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>ab06a83f8b9d216132510e5f19f343cac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArrayTraits&lt; OrdinalType, FadType &gt;</type>
      <name>arrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>aa649b0e1b28e1fad2ff4580e585fd04a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::LAPACK&lt; OrdinalType, ValueType &gt;</type>
      <name>lapack</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a7533db0c412ac491a032d1eda0c5a9bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_default_impl</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a7a511f116ad21ff554aac14dce0555fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Teuchos::ScalarTraits&lt; FadType &gt;::magnitudeType</type>
      <name>MagnitudeType</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a97207028a8cef88b9ef66473e7ebae04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::ValueType&lt; FadType &gt;::type</type>
      <name>ValueType</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>affd99326ce06ebfc6f45b7fe6f6ae584</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::ScalarType&lt; FadType &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>ae3b6fd9fd118cd14aae843eaf7c24596</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::dummy&lt; ValueType, scalar_type &gt;::type</type>
      <name>ScalarType</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a6b49f9f837e251be66035f555dd1f26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Teuchos::LAPACK&lt; OrdinalType, FadType &gt;</type>
      <name>LAPACKType</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>aa71b28cd86c8a58d40929da7a9fd4bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fad_LAPACK</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a32a799025c9c08db21d65269d13fa207</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fad_LAPACK</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a94ecc4d67e2c69c5b3446b4fddfd22d7</anchor>
      <arglist>(const Fad_LAPACK &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Fad_LAPACK</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>ada95f4905eeb679fa2e2cd569d3d74b7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Fad_LAPACK&lt; OrdinalType, Sacado::Fad::DFad&lt; ScalarType &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1Fad__LAPACK.html</filename>
    <member kind="function">
      <type>void</type>
      <name>GESV</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a6dfea5d52e569a1ee7c6c1aac0e9a620</anchor>
      <arglist>(const OrdinalType n, const OrdinalType nrhs, Sacado::Fad::DFad&lt; ScalarType &gt; *A, const OrdinalType lda, OrdinalType *IPIV, Sacado::Fad::DFad&lt; ScalarType &gt; *B, const OrdinalType ldb, OrdinalType *info) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Fad_GESV</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>ab06a83f8b9d216132510e5f19f343cac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArrayTraits&lt; OrdinalType, Sacado::Fad::DFad&lt; ScalarType &gt; &gt;</type>
      <name>arrayTraits</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>aa649b0e1b28e1fad2ff4580e585fd04a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::LAPACK&lt; OrdinalType, ValueType &gt;</type>
      <name>lapack</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a7533db0c412ac491a032d1eda0c5a9bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use_default_impl</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a7a511f116ad21ff554aac14dce0555fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Teuchos::ScalarTraits&lt; Sacado::Fad::DFad&lt; ScalarType &gt; &gt;::magnitudeType</type>
      <name>MagnitudeType</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a97207028a8cef88b9ef66473e7ebae04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::ValueType&lt; Sacado::Fad::DFad&lt; ScalarType &gt; &gt;::type</type>
      <name>ValueType</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>affd99326ce06ebfc6f45b7fe6f6ae584</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::ScalarType&lt; Sacado::Fad::DFad&lt; ScalarType &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>ae3b6fd9fd118cd14aae843eaf7c24596</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::dummy&lt; ValueType, scalar_type &gt;::type</type>
      <name>ScalarType</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a6b49f9f837e251be66035f555dd1f26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Teuchos::LAPACK&lt; OrdinalType, Sacado::Fad::DFad&lt; ScalarType &gt; &gt;</type>
      <name>LAPACKType</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>aa71b28cd86c8a58d40929da7a9fd4bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fad_LAPACK</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a32a799025c9c08db21d65269d13fa207</anchor>
      <arglist>(bool use_default_impl=true, bool use_dynamic=true, OrdinalType static_workspace_size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fad_LAPACK</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>a94ecc4d67e2c69c5b3446b4fddfd22d7</anchor>
      <arglist>(const Fad_LAPACK &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Fad_LAPACK</name>
      <anchorfile>classSacado_1_1Fad_1_1Fad__LAPACK.html</anchorfile>
      <anchor>ada95f4905eeb679fa2e2cd569d3d74b7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FadBLASUnitTests</name>
    <filename>classFadBLASUnitTests.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>FadBLASUnitTests</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ad5967a87fb0bd08e22d29e66da3f6f41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FadBLASUnitTests</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a1f6c3ae51e783d52d1a50d3522b9378e</anchor>
      <arglist>(int m, int n, int l, int ndot, double absolute_tolerance, double relative_tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUp</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a9d3f349d9ee9817a74c359909aef71af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tearDown</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a5aa86d1fbc06e64cc5d2f1b2010ea52f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testSCAL1</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a22cf5abf3a92e3891e8f49bac59466fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testSCAL2</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a67cf07140f27af32bb3a6f3c7a89a286</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testSCAL3</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a1cef45d07c7def0b1b496d2fe2750d20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testSCAL4</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a21c131421fc02ce48e69196e459bb886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testCOPY1</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a5a8254a8711da588b2686b31c5666b85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testCOPY2</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a1892baf8371c15f9dbc49f94519418bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testCOPY3</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a733a4032ffe729d1ef30f45f23ca9b74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testCOPY4</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>abc926a0888c4112b02d7db637626b41b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testAXPY1</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>aee4fd2a396937e7afc903cd4bc3b4b36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testAXPY2</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>aba0c62faf61cd46ca2510ab3c0f8f01a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testAXPY3</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a3fa48d00ca9a05af91cad5801fc47087</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testAXPY4</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a444e0a5324dcd826b4a20269cbc6b606</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testDOT1</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>af392aaa844232a4e7a57dcdd2855ef63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testDOT2</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a5661e6408e7aa5ce20fedeeb1c2438ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testDOT3</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>af66536a682d0f50971ee59642cd16ed1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testDOT4</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a51e007775e56bdf9aaf1f7c9fd6dd97f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testNRM21</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>afc0475bb4e25a3a8bb559c731b4aac8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testNRM22</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a211eb2f385222703a2593996dfb3d147</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGEMV1</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a8fb485c41b03dc391b4752bf344cb77d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGEMV2</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>aed91fe5ec6122b7fc93ec49727bd2f36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGEMV3</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a5341dc3f109c8db1e54e667d24197d9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGEMV4</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a674417a3254ee5bebafb1e5a05535881</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGEMV5</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a80ff8b78f8cca1692a0c374ceef03f37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGEMV6</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ada9bf6c988a80e346384190a4c94f780</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGEMV7</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ab44c9e1b05a950c977d9948e58c34bdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGEMV8</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ad196b039d0425a52065bef3cc81d7c34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGEMV9</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ac673820ef3d575137a263eb0a2b8b89e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTRMV1</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ad5275169f007bb02c5dfce503c204628</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTRMV2</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>accc3cbf34ff90db9dbab2c22f4a3a82c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTRMV3</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>af5b3e586d5a066a18120b6a7bcb766ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTRMV4</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a4978758ef5b624d9874f7be38a736a3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGER1</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a3cfbe21d354f918f7fe9bfcca31d887d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGER2</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ad4058aff8b9b2129ac2c477929932a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGER3</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ad3d0c591b4e625ac6251317fbd40c1d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGER4</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>aff68f00413a83c9e9d9d7156d05e3e4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGER5</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a3d797dac222ac1f35e3a7d53b9bada44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGER6</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ad1830bf23c2ee174d4a4afe2708fbc8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGER7</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a991c77a4ebc5ae9cc32808d8e8b41c74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGEMM1</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a2f3a2a03a1811b5bba3b0f290617abfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGEMM2</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a83d9d1c88bbaed29fb81626fb7e536a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGEMM3</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ae3d197e991bfd8bc72ce6aead543f13a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGEMM4</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a13d7063244c08babffb5612a8943f24b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGEMM5</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a3655443e0d696028f804479dfe081750</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGEMM6</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a0a8398180307c497e3290e651d68391a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGEMM7</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a976984a24328c4fabcacda32b81af32d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGEMM8</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a1c5a473f421a6e9a1c6da05ef5a10b38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGEMM9</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a45e239ba744577745b1c187176d23308</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGEMM10</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ab08060c25d0b7dfb34b7b6b12312f1dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testSYMM1</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a050aa67a19b173ecabef9434a0f7f768</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testSYMM2</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a56313e3dbd0b2e07709e176468fb8785</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testSYMM3</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a103e92698a64cfe5218e5ec49b760a41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testSYMM4</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>af7d1accb23c7371e6fee7fd9b47332b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testSYMM5</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>aae576ad096aa35d55987da303a415586</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testSYMM6</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a02483c08dcf6ddffab063eb418e1b102</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testSYMM7</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a4bd5e50989c064dfef403e2e2a7d3444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testSYMM8</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>aff55ca15e4b2fdc16386c2076ecc74c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testSYMM9</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a81a5c4aabc73f20a67cf767e185a38f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTRMM1</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a09ebe3c143c3e2620b303d5411ed9444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTRMM2</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ada45f0063c8789f1d20c2833df79f27f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTRMM3</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a0322ea2ac9ff8d5b52a400ddb2eaf10a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTRMM4</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a0e2826358d6db10535c0178e932ec640</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTRMM5</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>aa13578d571a69215b3fe7b658e57338b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTRMM6</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a0c83b8361e32ee2543fb725e470c23fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTRMM7</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a4dc04d0bc2f26e0946f325f3463f81d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTRSM1</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a977858a4a153e3a1fb92d37f2bf14857</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTRSM2</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ae47cb5db6f3b39bf5b4c143644d7642c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTRSM3</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ac7b950700090993e206a3c7a42eb7fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTRSM4</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a8ecdcbaada441228d0bdfc8d72ed21b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTRSM5</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a7c1aa63540ef65198011b09e863a45aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTRSM6</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a043b7346b085df7962284c91301e7e48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTRSM7</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a51421fc5d31c05d7007011cf32844cd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Sacado::Random&lt; ScalarType &gt;</type>
      <name>urand</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a9eee7ae465967752d29b494005a97085</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Sacado::Random&lt; double &gt;</type>
      <name>real_urand</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a486ade916f5c6114a79309c9dcec39eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ae5816b20a52e05bb73c0c5da0e38dcb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>n</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ad034fbb754b187396fb0191d1a0f664b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>l</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a7bcfedcca5cae7a8818a7dd877451c2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>ndot</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a3873e8118a003f528b454a0c53406251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tol_a</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>acedaeae16401fb55e4ecaf8685345f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tol_r</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ad798ec33e9466772e19936fe65b1559f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::Fad::Vector&lt; unsigned int, FadType &gt;</type>
      <name>VectorType</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a4de4e09e91796d0c99ea65109c091455</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ae9b1f2b68abf04856b76c85cb7e68705</anchor>
      <arglist>(FadBLASUnitTests)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a15fe4924f066b471f85d94b6bf2e49c7</anchor>
      <arglist>(testSCAL1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a78b8a7080a40b080cab8f17e60ffb56a</anchor>
      <arglist>(testSCAL2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a01b85d7e460713875b16ba2256978d32</anchor>
      <arglist>(testSCAL3)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ad498f94eb2d383c7591da04114393d4c</anchor>
      <arglist>(testSCAL4)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a407f2b62b322ed01c3c824fa7d30deb0</anchor>
      <arglist>(testCOPY1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a5d4e2cfbbd8891f45bac3d55aae2a2d9</anchor>
      <arglist>(testCOPY2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>aedfae2b58e8c7a4481eb54b8c4715f5f</anchor>
      <arglist>(testCOPY3)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a0b4a6cae66d90aac2437ab7fb171914b</anchor>
      <arglist>(testCOPY4)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>abc1786637cfb05e6ff8a7bd154de4bb4</anchor>
      <arglist>(testAXPY1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a1306d0cb57f4223b8b0395f1791fcd7b</anchor>
      <arglist>(testAXPY2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>aff8b6a0960dea47bb02e79ee196d899f</anchor>
      <arglist>(testAXPY3)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a8e39e9e9eb743e5e561432b7c3e4d0fb</anchor>
      <arglist>(testAXPY4)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a525ea7d83626ace90ade6ca172ca35ca</anchor>
      <arglist>(testDOT1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a8bbb350bda396b6cbaaf633df40a08e4</anchor>
      <arglist>(testDOT2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a9512602441c3f06e6d2b32b04c21e91f</anchor>
      <arglist>(testDOT3)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>aa557311bf7ac2d348651e15b26d6e3c1</anchor>
      <arglist>(testDOT4)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>aa0c84646cc1ddb08619642c6f7074ebf</anchor>
      <arglist>(testNRM21)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a81929334f6acf9852b18e26dc392642b</anchor>
      <arglist>(testNRM22)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a8ec0eb0d01918049d3aede97d7ed15d5</anchor>
      <arglist>(testGEMV1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a1481a9895596b19345b5fd8228b81855</anchor>
      <arglist>(testGEMV2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a4a9dcccb5b6f39154f39c5ef06afceb2</anchor>
      <arglist>(testGEMV3)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ac204b38cbfee52be90573c334cd81749</anchor>
      <arglist>(testGEMV4)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ad5d517a72fbb728887d1ac01da34fb33</anchor>
      <arglist>(testGEMV5)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ae5e8c66a4e49df3c5e52b0cda7081d45</anchor>
      <arglist>(testGEMV6)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>af83c3cb8c942c6982721454504b89794</anchor>
      <arglist>(testGEMV7)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a0a75fc257b28767eedd1adda8593b6b9</anchor>
      <arglist>(testGEMV8)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ada432bdf3b599c149102fa2ddd780aff</anchor>
      <arglist>(testGEMV9)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a33883ce11f1000c43e84afab3768ecb3</anchor>
      <arglist>(testTRMV1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a18c3176963158cbd04951de46c66873f</anchor>
      <arglist>(testTRMV2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ae93f74ca4d4db4dd719009883f216215</anchor>
      <arglist>(testTRMV3)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a82aaec081c3c8396be01b1c25b245ec7</anchor>
      <arglist>(testTRMV4)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a40c459d6502530e48e8acf8e06980b5d</anchor>
      <arglist>(testGER1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a71b04921e076db3e1e2d1a8920fa5018</anchor>
      <arglist>(testGER2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a2b0bd92455aecc4ec98e4661b9c84ddf</anchor>
      <arglist>(testGER3)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a3aa938392049f30301b948bea7f34aa3</anchor>
      <arglist>(testGER4)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>abe80f802498403c2f9024d1cc8327926</anchor>
      <arglist>(testGER5)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>aaad8d8afc206b8a9ec6a5eb1f80c8e57</anchor>
      <arglist>(testGER6)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a2ba35a377acba9f0430cf738e6666dce</anchor>
      <arglist>(testGER7)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a58d8c280791e25cafed1d4b71b6b02f9</anchor>
      <arglist>(testGEMM1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ad9efa0d2977669463f73b2b8b38206be</anchor>
      <arglist>(testGEMM2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a1da2e4a761efe95e274b5a69b100e1ea</anchor>
      <arglist>(testGEMM3)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a11d0551cccb9c195d69d63c751487159</anchor>
      <arglist>(testGEMM4)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a7b761652eebd6491623482bef77358c9</anchor>
      <arglist>(testGEMM5)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a829a289e7ae99e768aef10f0fe86a3ec</anchor>
      <arglist>(testGEMM6)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a16676838193fa64a63f0b3ea1cdf01ba</anchor>
      <arglist>(testGEMM7)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a57f97b3fe18e1e25c81b6d2b7e0a1263</anchor>
      <arglist>(testGEMM8)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a1facfc3f014bbd4fe41913ab10151f8e</anchor>
      <arglist>(testGEMM9)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ad563d91ba906f036a01f47ec6035ca5d</anchor>
      <arglist>(testGEMM10)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a045b0fe00fc3112accb2d09e4ea8705f</anchor>
      <arglist>(testSYMM1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a19609f91ba854e02b7fd391a65165e7a</anchor>
      <arglist>(testSYMM2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a2678cd1f83d53c897799b857efedf6a3</anchor>
      <arglist>(testSYMM3)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a608ec2df11ddf3e46320a5294ce50d22</anchor>
      <arglist>(testSYMM4)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a23686f6a7022bbe0a8e3ccfdaeb1f2d2</anchor>
      <arglist>(testSYMM5)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a70c763bfb12c322fa17455d1e1699585</anchor>
      <arglist>(testSYMM6)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>aea9f0574d84ec5cd97d36d306f9590b2</anchor>
      <arglist>(testSYMM7)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a5addb36aed984e979fdb682439d2395f</anchor>
      <arglist>(testSYMM8)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a009411f9284ad06d9b80f76f2189b49a</anchor>
      <arglist>(testSYMM9)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a23f7587bbae346cf8c912794a41bb7cf</anchor>
      <arglist>(testTRMM1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ac45fe2e89a4e75f7f6303f05ecc73663</anchor>
      <arglist>(testTRMM2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>af49c658a102bf4068130ad7a7d2e6ef5</anchor>
      <arglist>(testTRMM3)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>aee104d813d54ecad81ba5bcdaa7183e8</anchor>
      <arglist>(testTRMM4)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a5f3266f14c5ea683092b321e19180060</anchor>
      <arglist>(testTRMM5)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a92960b7f19397a1dbe398c0f8b90bdcf</anchor>
      <arglist>(testTRMM6)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a908c53150ed8290b5d20fbcc5a290697</anchor>
      <arglist>(testTRMM7)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a43ec33ffccf344da160a2ea9e075a9ba</anchor>
      <arglist>(testTRSM1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ae5fda2632fee5a479db5ef856efd6954</anchor>
      <arglist>(testTRSM2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ada3a799fc83e39b6ba6a1dc30de2119f</anchor>
      <arglist>(testTRSM3)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a1b1fd27623d9005681db57f46a5e6b32</anchor>
      <arglist>(testTRSM4)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>a265d56b3ad062988aa4debca164eb830</anchor>
      <arglist>(testTRSM5)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>aff5e66214c68396cb33a1e70c6f2e86a</anchor>
      <arglist>(testTRSM6)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>ae6b7269c1a3a9d27389fcb7a88c72830</anchor>
      <arglist>(testTRSM7)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_END</name>
      <anchorfile>classFadBLASUnitTests.html</anchorfile>
      <anchor>af096e233bb15803580ecd190909e5b9a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FadFadOpsUnitTest</name>
    <filename>classFadFadOpsUnitTest.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>FadFadType::value_type</type>
      <name>FadType</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>ac3a2f5765f563e233a0f1b06fe47786e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FadFadOpsUnitTest</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>ae6afa3a4d1d520ece09a448b06a21be5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FadFadOpsUnitTest</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a1599ae26c41193d1ff2f96abe1263557</anchor>
      <arglist>(int numComponents1, int numComponents2, ScalarType absolute_tolerance, ScalarType relative_tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUp</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a4711b224ac1119446226a1be50b8b75b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tearDown</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>adf4880bfcde8177d5cc6dac8d3dc3108</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a3e4f3984e24cb6489565aa1dc933eb08</anchor>
      <arglist>(testAddition,+)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>adf8997d4870b4d383af8ccf161e40d01</anchor>
      <arglist>(testSubtraction,-)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a2ee53343008a40d12649d94c6195162e</anchor>
      <arglist>(testMultiplication,*)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a4c9e5c4c8e74215b8245ac8079abc84b</anchor>
      <arglist>(testDivision,/)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a87c80243170fae03871d96558ed629f9</anchor>
      <arglist>(testEquals,==)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>ad9a4af569310be743a3c0f6fb8cde19c</anchor>
      <arglist>(testNotEquals,!=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a711468062c5890a892e9d8a5eb9a9091</anchor>
      <arglist>(testLessThanOrEquals,&lt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a5a8324fe088f0a14718d9a3b28a8a4ab</anchor>
      <arglist>(testGreaterThanOrEquals, &gt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a38a309d488c06d2e630c9ebb123f117c</anchor>
      <arglist>(testLessThan,&lt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a2a9fcb3c8051e28d534053bc9241cc63</anchor>
      <arglist>(testGreaterThan, &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_FUNC_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a09693cf2ba19215da799dd5c4b8747de</anchor>
      <arglist>(testPow, pow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_OP_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a04929a79ca547b138e3f768c5c99f936</anchor>
      <arglist>(testUnaryPlus,+)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_OP_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a9756a82c3bd132780485e4f02f335dfa</anchor>
      <arglist>(testUnaryMinus,-)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a186a9eb1706199d14934d1519df9ea11</anchor>
      <arglist>(testExp, exp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>ae5daad877edccae4c84ccf4f2213e063</anchor>
      <arglist>(testLog, log)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a96fb0bf9d789d34e18852294618ebb0b</anchor>
      <arglist>(testLog10, log10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>addb7c93aa721b5377e68e934ee05b5a9</anchor>
      <arglist>(testSqrt, sqrt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a783d8f28fb53ddc4e7b68956ac9fe7e5</anchor>
      <arglist>(testCos, cos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>ae20a402d98c8bec2a8939c4bba57db12</anchor>
      <arglist>(testSin, sin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a646c8578024a8639ad837bb4a2dcc18c</anchor>
      <arglist>(testTan, tan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a937187df070d7bdb1aeff0ac93e2673b</anchor>
      <arglist>(testACos, acos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a97ddf4388e9892ea8f0d3f52934f02a3</anchor>
      <arglist>(testASin, asin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>affa29c16cf4271b68ab1ce1d6a0fbaeb</anchor>
      <arglist>(testATan, atan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a75f45d07f0990d067bf087f400fc8949</anchor>
      <arglist>(testCosh, cosh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>af40138e6b310265c6fdee16932e08af0</anchor>
      <arglist>(testSinh, sinh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a0eed6a26602497d64be8ab61867cc37c</anchor>
      <arglist>(testTanh, tanh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>aa091f311d44f50166dc4a8a1dcd09d08</anchor>
      <arglist>(testAbs, abs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a5eb2abceb6edcae62416ce332d81c18e</anchor>
      <arglist>(testFAbs, fabs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>af56f0cba673bf315a00aa7aa9c5f3d74</anchor>
      <arglist>(testPlusEquals,+=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>ab7fd91441a4f72206c9854a953c3f319</anchor>
      <arglist>(testMinusEquals,-=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a33300297ca2df55c150fd640e6554600</anchor>
      <arglist>(testTimesEquals,*=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a549802ff62399baa95821c20a04f570e</anchor>
      <arglist>(testDivideEquals,/=)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testMax</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>aec606da3ca4b816f44f2bede662bc55f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testMin</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a4920cc3c61d7d221af62304a891d6701</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScalarT</type>
      <name>composite1</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a6bfd6d8a94d5cefecdd6c2845f007947</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>ScalarT</type>
      <name>composite1_fad</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a3bc0128b7fa72f3f7ee996132f9fcf37</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testComposite1</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a4e9dd269ebdf3f391e2d87bac3d51d9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testPlusLR</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a88c5b4ab2b137740e11697abb5f9f309</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testMinusLR</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>aee48136273cc0b7d04fdc812a602928e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTimesLR</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>ae9e9317c0fbd85dbcd3490aba6f2f302</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testDivideLR</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>ad8c5d40fae818950ac04506726b17421</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FadFadType</type>
      <name>a_dfad</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a6af0431ab65a2f21d963f0b40a1f0b0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FadFadType</type>
      <name>b_dfad</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>ab49937e5026bf107080389291e73021b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FadFadType</type>
      <name>c_dfad</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a07523386ea34be60f49ca2e7c3cf3f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FAD::Fad&lt; FadType &gt;</type>
      <name>a_fad</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>ad6bc7d2be76925f642c1010bce5be8cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FAD::Fad&lt; FadType &gt;</type>
      <name>b_fad</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>afff528d3d0721219ae016f0b9b3fde2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FAD::Fad&lt; FadType &gt;</type>
      <name>c_fad</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a2fd544fa19a1b41f0bfa3dedb6b9dc1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Sacado::Random&lt; ScalarType &gt;</type>
      <name>urand</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a9efb36c5e60a79617c7be3be83fca238</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>n1</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a99f50afedd9e6ab2a3bbe696585d5f9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>n2</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a3ce760b7b9465f4558015de5c65e1247</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScalarType</type>
      <name>tol_a</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a167a883c3ab3e3397774814f7e779733</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScalarType</type>
      <name>tol_r</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a99f260097a9b3221f9a19434d170ddd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a1248e92c1e0296a3fcb8a26a3c950bf4</anchor>
      <arglist>(FadFadOpsUnitTest)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a03ce44eba503dd4034bc7d7be339f18b</anchor>
      <arglist>(testAddition)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a201bf93ec0d905b91e208417649ac4fd</anchor>
      <arglist>(testSubtraction)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>adf616601de3f8a5f8fbb19235cd88f76</anchor>
      <arglist>(testMultiplication)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a85d987cb5ade449306d0267328ac3c1d</anchor>
      <arglist>(testDivision)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a947e1791b8020deda8e6ff241042de01</anchor>
      <arglist>(testEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a887651d95ddc1aa395040d310d304ddd</anchor>
      <arglist>(testNotEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>abf39c008d11dc88341cd939d6b7f508d</anchor>
      <arglist>(testLessThanOrEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>ae0e46db629c5450c0d6f37d61efff295</anchor>
      <arglist>(testGreaterThanOrEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a6c8a8afd1661cccc5e4437625b21cda4</anchor>
      <arglist>(testLessThan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a94a4c5276c56ad26aa21e2221ade3999</anchor>
      <arglist>(testGreaterThan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>adc95e9a4f87faf5cb756966d9fc27b17</anchor>
      <arglist>(testPow)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a056c2457e0f28aaac048d44cf1c4c1b7</anchor>
      <arglist>(testMax)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>aa017ffaea82e7e644ba65017cea9c63b</anchor>
      <arglist>(testMin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a61212c46cc1073440f9493d899ba9fb2</anchor>
      <arglist>(testUnaryPlus)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a213b05fa9af7b3539895be954c6adcf1</anchor>
      <arglist>(testUnaryMinus)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a6a24d145a476425665f34c852f333066</anchor>
      <arglist>(testExp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a9cc5e235ee447b73be593aa2e2be8f0a</anchor>
      <arglist>(testLog)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a0f1586c7534166d200c9ce976f4618ad</anchor>
      <arglist>(testLog10)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>ac5cc1060d7f4240459394a9537c0e012</anchor>
      <arglist>(testSqrt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a1b865888dd986ab13b9b5212ab94c072</anchor>
      <arglist>(testCos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>ac5a437942edd721d8c9e109d03bbfbfc</anchor>
      <arglist>(testSin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a71d7dbc36d321bf973314177ec8c1964</anchor>
      <arglist>(testTan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a88057594a5a837f93953c724cb8310a3</anchor>
      <arglist>(testACos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a10ce75ef938c959b4974823735f01a26</anchor>
      <arglist>(testASin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>aae089d3ec8b01c95fa01dfd1b57aea8d</anchor>
      <arglist>(testATan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a8da384ee7ab8c7a7e4fba21b14ec4781</anchor>
      <arglist>(testCosh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a1e2ad6742d147c086a3726d3573e0de1</anchor>
      <arglist>(testSinh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a4149f5d7ad58674c96300a9340799a05</anchor>
      <arglist>(testTanh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>ad9328b7c047fc77906bf87bc1caed264</anchor>
      <arglist>(testAbs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>aa4cf62df99da79b71bd8351dd6075a2a</anchor>
      <arglist>(testFAbs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>acc67b4d9ee2d94811a3c94ec5163f4b7</anchor>
      <arglist>(testPlusEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>abd61ced70d381fd7c17e526c681fee60</anchor>
      <arglist>(testMinusEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a5e3d37d93b9977bfb8721731020f7e26</anchor>
      <arglist>(testTimesEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a1c7782b0672e89334c4c794b8e9fce5d</anchor>
      <arglist>(testDivideEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a9210fc7db4af6d7e014d9d07ed16a3be</anchor>
      <arglist>(testComposite1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a156e28626ff5af1a249268822e5c089f</anchor>
      <arglist>(testPlusLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>ae34d5aecd384d33fcd19aa05d0b18885</anchor>
      <arglist>(testMinusLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>aa6acce945bd2efc55e55a7b56eb70918</anchor>
      <arglist>(testTimesLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a724aab45925da7e96002f2521b8a9ca2</anchor>
      <arglist>(testDivideLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_END</name>
      <anchorfile>classFadFadOpsUnitTest.html</anchorfile>
      <anchor>a5496762b03d235ce21dcb37356659632</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FadLAPACKUnitTests</name>
    <filename>classFadLAPACKUnitTests.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>FadLAPACKUnitTests</name>
      <anchorfile>classFadLAPACKUnitTests.html</anchorfile>
      <anchor>adaab52e9d5d19e8ac057c97ef38d1365</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FadLAPACKUnitTests</name>
      <anchorfile>classFadLAPACKUnitTests.html</anchorfile>
      <anchor>ab11580289496617d71f27cad64804fc7</anchor>
      <arglist>(int m, int n, int l, int ndot, double absolute_tolerance, double relative_tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUp</name>
      <anchorfile>classFadLAPACKUnitTests.html</anchorfile>
      <anchor>a2fff0379b1b88e338dba0c61ae4647b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tearDown</name>
      <anchorfile>classFadLAPACKUnitTests.html</anchorfile>
      <anchor>ace04bffa710286f30d6c36d756198606</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGESV</name>
      <anchorfile>classFadLAPACKUnitTests.html</anchorfile>
      <anchor>a07d6e5d72926d8b7c289fa2bcc4a2ef0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Sacado::Random&lt; ScalarType &gt;</type>
      <name>urand</name>
      <anchorfile>classFadLAPACKUnitTests.html</anchorfile>
      <anchor>acba1a55a75a888355a7d9ea87e307aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Sacado::Random&lt; double &gt;</type>
      <name>real_urand</name>
      <anchorfile>classFadLAPACKUnitTests.html</anchorfile>
      <anchor>a58abf906d8c415f68fe5b1a8ad507abd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m</name>
      <anchorfile>classFadLAPACKUnitTests.html</anchorfile>
      <anchor>a01ed54a65b6eddb57280d87c38bd6466</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>n</name>
      <anchorfile>classFadLAPACKUnitTests.html</anchorfile>
      <anchor>a63ee2e0e47a84c81dae41a94f0fdcefb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>l</name>
      <anchorfile>classFadLAPACKUnitTests.html</anchorfile>
      <anchor>ac96dd81928f29fedc2f433b7cc55826c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>ndot</name>
      <anchorfile>classFadLAPACKUnitTests.html</anchorfile>
      <anchor>af5553157ff107eb7dfc5357a8d1db958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tol_a</name>
      <anchorfile>classFadLAPACKUnitTests.html</anchorfile>
      <anchor>a68de0a0d769845e32806284d649a6c05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tol_r</name>
      <anchorfile>classFadLAPACKUnitTests.html</anchorfile>
      <anchor>a6d89fa96d0a4aaeb198f3a52982e5993</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::Fad::Vector&lt; unsigned int, FadType &gt;</type>
      <name>VectorType</name>
      <anchorfile>classFadLAPACKUnitTests.html</anchorfile>
      <anchor>a5e25fe67e8df475af2a0d96c179e712b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE</name>
      <anchorfile>classFadLAPACKUnitTests.html</anchorfile>
      <anchor>aef81769d3e99e8d9e0a37822e6c7bf9c</anchor>
      <arglist>(FadLAPACKUnitTests)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadLAPACKUnitTests.html</anchorfile>
      <anchor>a36cbdd1fdfbaed9c5a336f74785bb176</anchor>
      <arglist>(testGESV)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_END</name>
      <anchorfile>classFadLAPACKUnitTests.html</anchorfile>
      <anchor>acd4466a6dfcb2d11d04e6dbd55bb11eb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FadOpsUnitTest</name>
    <filename>classFadOpsUnitTest.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>FadOpsUnitTest</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a44c4d300c2a6f0dd789e8a23eeac03c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FadOpsUnitTest</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>aaa8c3db94541d712db887c38c6d62db6</anchor>
      <arglist>(int numComponents, ScalarType absolute_tolerance, ScalarType relative_tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUp</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a036e6c9fad086eef6da95b6a45dc9c5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tearDown</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a1f23a1799bd39f01bd14f548ecafa782</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>ad5b623d736d6cf9f7ffbc4117ea28938</anchor>
      <arglist>(testAddition,+)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a6b76291cbba33d426787a7e7047683d7</anchor>
      <arglist>(testSubtraction,-)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>acb4658276b31a411acca9c6157fb6c0b</anchor>
      <arglist>(testMultiplication,*)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>ac4cc38a5bd2e896e7a01a6dab91688ea</anchor>
      <arglist>(testDivision,/)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a9d30a08bff386baaf8317cdd04c2109a</anchor>
      <arglist>(testEquals,==)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a3f474967e19cfc8c08a8f3f4bb9817c2</anchor>
      <arglist>(testNotEquals,!=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>aa1681b04e0074d7216cdf7385356eb4a</anchor>
      <arglist>(testLessThanOrEquals,&lt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a4fa703437b220937aa4ba6b8608b85e2</anchor>
      <arglist>(testGreaterThanOrEquals, &gt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a67a3c3d6084d944ce2b43f43275dbd2e</anchor>
      <arglist>(testLessThan,&lt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>aa3ee42e61894069d715e9e445d0c903e</anchor>
      <arglist>(testGreaterThan, &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_FUNC_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>af98d2b5fdbf4f0bcf9635a69e17851b2</anchor>
      <arglist>(testPow, pow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_OP_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>affeb037227207ba8a93fb9d183401632</anchor>
      <arglist>(testUnaryPlus,+)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_OP_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a5127e2baad7028fd374418b25be6c54d</anchor>
      <arglist>(testUnaryMinus,-)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a1451792536c8b837f6cb7a9274f94564</anchor>
      <arglist>(testExp, exp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a0f45782968335eda341ef3b48f386c36</anchor>
      <arglist>(testLog, log)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>aff1fd6f33d7184d7fd9b62bcfc70f5eb</anchor>
      <arglist>(testLog10, log10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>ad27b43b8aff3cd91d5b955c6b221b33b</anchor>
      <arglist>(testSqrt, sqrt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>aeeda7a2f0a0768f40970448676d680a5</anchor>
      <arglist>(testCos, cos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>add2094ce140b6666b348088174490e11</anchor>
      <arglist>(testSin, sin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a67f5b25862d507d68e77ebb8e6e4da13</anchor>
      <arglist>(testTan, tan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a453e1cc0b6d4e606a9189d09de21cb86</anchor>
      <arglist>(testACos, acos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a50a4f785400bb4f9dc710e5492a74f3c</anchor>
      <arglist>(testASin, asin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a1b69a88ccea8a0a868a9b1b53e1f7fa2</anchor>
      <arglist>(testATan, atan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>abe4c3546a193d7a17682c6cc37527316</anchor>
      <arglist>(testCosh, cosh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>aab148cddedcaaa416cbde6fd96e8e829</anchor>
      <arglist>(testSinh, sinh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>ace94aa0b2fcc91bb1a2a4e4c8f181c50</anchor>
      <arglist>(testTanh, tanh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a93a647330246078990b9943c8e04203b</anchor>
      <arglist>(testAbs, abs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>af3db9f52db9da1f341cc5d2e1e2befad</anchor>
      <arglist>(testFAbs, fabs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a3c52cc9817ceff1a03078d00a7da7d9e</anchor>
      <arglist>(testPlusEquals,+=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a45370d0e3c99bc249b917af036af4824</anchor>
      <arglist>(testMinusEquals,-=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>af509cc38d59e36e5e5de56ee3dd01c9e</anchor>
      <arglist>(testTimesEquals,*=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>ad50ff0affd43b79f90c4bc81b57ca4db</anchor>
      <arglist>(testDivideEquals,/=)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testMax</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>aa3220981c7ad6a032bbb1f57348eb762</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testMin</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a6160dd36aba073c0c983431fd430d3f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScalarT</type>
      <name>composite1</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a6b5bd836bfc3d8a12e4b35123f2f3fe4</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testComposite1</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a39ce335f98ab67fa5ad72e9c34558373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testPlusLR</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a26adf43fea76bbd705207d202cfdb399</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testMinusLR</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>abe656609f0ddb047bcad737cd8cead15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTimesLR</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>af63b27c8ae2608ea590adecc0b110e96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testDivideLR</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a07d04a435597777de296db057cd80a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FadType</type>
      <name>a_dfad</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a72ba77475fbe025ad7f123c197bea09f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FadType</type>
      <name>b_dfad</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>ac71221ef1d50632895a1bb9a8ffbb164</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FadType</type>
      <name>c_dfad</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a05f25b4029d229d50b17c36f29ead19a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FAD::Fad&lt; ScalarType &gt;</type>
      <name>a_fad</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a8c2fd212017e142c2de24676dc827151</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FAD::Fad&lt; ScalarType &gt;</type>
      <name>b_fad</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a7d4f64d3915906e31c381532f431fdef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FAD::Fad&lt; ScalarType &gt;</type>
      <name>c_fad</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a0f2a22346f2ef39a1169bba3c206c36c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Sacado::Random&lt; ScalarType &gt;</type>
      <name>urand</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>afe0cf8fc10b3959610560fb2662d463a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>n</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>afbf198728cf55fc612d44c0d447f4627</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScalarType</type>
      <name>tol_a</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a7dcbd06d5cc0540283b53a944a935a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScalarType</type>
      <name>tol_r</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>af5204717620a4066e0d86ab41515ffce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>adc5a46b4fdb461ef1d30e001be0426bf</anchor>
      <arglist>(FadOpsUnitTest)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a6ed73f2836ecceafe3e8d5e4e1f82a6d</anchor>
      <arglist>(testAddition)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a5274fa98f0998948813eb1708f7a7917</anchor>
      <arglist>(testSubtraction)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a22579ee513929f5ad2cc483a6be2c201</anchor>
      <arglist>(testMultiplication)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a056c22f4f1eb7a4e1de099894401b97b</anchor>
      <arglist>(testDivision)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a866d2f452a6af4e87d7398fb91964dad</anchor>
      <arglist>(testEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a0ca4b76eb77fb5d5fba9f5faaea42d1e</anchor>
      <arglist>(testNotEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a6f51299f52a92d77155a41c5e0fecdf5</anchor>
      <arglist>(testLessThanOrEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a949ba7dd6632eaa36e4f9bbc42c3f979</anchor>
      <arglist>(testGreaterThanOrEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a62f0f7921ceffe8494aa94f58edc8a66</anchor>
      <arglist>(testLessThan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a14c4ab0749ec55ac489920d90804ad04</anchor>
      <arglist>(testGreaterThan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>afd1ebe778a95876f26461180de0344ec</anchor>
      <arglist>(testPow)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a243ae4b228644e45d3e8f5144d6ce409</anchor>
      <arglist>(testMax)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a961c87ac2ac2c0e8c985612988aeb5fa</anchor>
      <arglist>(testMin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a7c7b48e472870a752d0033f764bfa3b5</anchor>
      <arglist>(testUnaryPlus)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a5dae7c8386937926a1c78bcdd6443fa6</anchor>
      <arglist>(testUnaryMinus)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>afc58816ed74eda62b048ac97b5d0ebb4</anchor>
      <arglist>(testExp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a625db4e672e40a877ec4389e606763b7</anchor>
      <arglist>(testLog)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>adbbde1255bd2095d568ecff6c5f1548e</anchor>
      <arglist>(testLog10)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>aca5cadc286d0d897fe692430adf71cfa</anchor>
      <arglist>(testSqrt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>adf1a26a2a30fb942d870d09ecc25fac0</anchor>
      <arglist>(testCos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>af56d8b2bd6beb7ab0d745342bc84c763</anchor>
      <arglist>(testSin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>aa34485b3a0fca329b79c750f6a34a6d8</anchor>
      <arglist>(testTan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>aa2d7a6d94b2e08a895c5705cec11250b</anchor>
      <arglist>(testACos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>aae5b15c8a0d3fb4f5b2b2b5623500e62</anchor>
      <arglist>(testASin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>aae320cf84e56e2f260b1d6aedb014d47</anchor>
      <arglist>(testATan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a001979a60c6c3b98f4b6367bbdc97878</anchor>
      <arglist>(testCosh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>af8a69e04f61db5919357a7dc50c7b5c1</anchor>
      <arglist>(testSinh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a3d0dca7c978312a3ff21387635662f4d</anchor>
      <arglist>(testTanh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>ab879a843a0f37740020533ee07157ed6</anchor>
      <arglist>(testAbs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a9c1bf01d36e29e51fa875712366ed4a4</anchor>
      <arglist>(testFAbs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>aca9ffee2fa57af9ed3b05cae441bee2b</anchor>
      <arglist>(testPlusEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a19d313a5e992c49ecbd852a0c0fad89e</anchor>
      <arglist>(testMinusEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a83ee507378417092990be77eb760e5b2</anchor>
      <arglist>(testTimesEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>af6c43888fa272c4f23ec7383caba0e41</anchor>
      <arglist>(testDivideEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>aee547662a1ffd2ed077105a681bb51f4</anchor>
      <arglist>(testComposite1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a96de8537bd1271d6fd2d6b7dc93606dc</anchor>
      <arglist>(testPlusLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>af9f39fff1a4617e69a1d57022391bf3c</anchor>
      <arglist>(testMinusLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a7171e16e3990643bf361240e15a63af3</anchor>
      <arglist>(testTimesLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>a7e2e76f2eeaa0c79e9c653d1ffa727c6</anchor>
      <arglist>(testDivideLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_END</name>
      <anchorfile>classFadOpsUnitTest.html</anchorfile>
      <anchor>aaac8ee92d2bf244ca5dd6620317033b2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FadOpsUnitTest2</name>
    <filename>classFadOpsUnitTest2.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>FadOpsUnitTest2</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a25d6dc4ced0fe3c7e9711e16c98423d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FadOpsUnitTest2</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a1ca6f0f40512748a8c614d1b19512495</anchor>
      <arglist>(int numComponents, double absolute_tolerance, double relative_tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUp</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a926ff68b62cb3977d7040090a5971765</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tearDown</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>ad01f2b902a8f87ef20cf8a6043cb6d5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testAddition</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a7189287f69dcd0d00b99b89d6a40051f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testSubtraction</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a9164fb1834ab3a9642cbfc68694ad920</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testMultiplication</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>ab99bdcc450c8a2f1b479597844be3d0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testDivision</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a881140bf27d3d3543be739db7ebc52d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testEquals</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>aa60abc8e291905bc871c6b54b509f837</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testNotEquals</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>aba95631131bf1c5e1a70cf9b382a02d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testPow</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>ab60bbe6a80c32922dc5ef71af1bc3849</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testUnaryPlus</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a96bca01db21445838ded3552ced043f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testUnaryMinus</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a996332669c138153e8869700f2a2269f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testExp</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a01b3d3dfa3927b34791dfc5fbaecd331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testLog</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>af17c6fb6c88b091d164439d9c69953fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testLog10</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a9125113eefb01b77f98a2b2ef93afbb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testSqrt</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a7d2907d21309da352b99b25a230c33a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testCos</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a62c342e100ca21bcd3a421e2506dd075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testSin</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a26d75e041015221ac71cd531b4400a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTan</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>abf426831543f31de659dd75302389eb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testCosh</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>af9bf1aefc6f428dd2052222103b0c17f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testSinh</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a9a2bc864d933ed2ede8b7a885ce6ca7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTanh</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a0f38f5143ee6e3e393f98cc82a8aa206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testPlusEquals</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a5aa94cfdacfb738845a64bdd8ba9d345</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testMinusEquals</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a76eb30da4f9876344669b55e8e2847a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTimesEquals</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a59411f6ef27e99ecc468be6e958f2057</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testDivideEquals</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>afddbaa606e2844e44229efe57df3d296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testEqualsLR</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>ac50e38a729a9472cc8911b9fe27586e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testPlusEqualsLR</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>ab922bf392974580b42eaf6394df2ff8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testMinusEqualsLR</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>aa7ded32ddbdf4ef9cf001cf928a345ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTimesEqualsLR</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>aa8716fe590fa7239208c3edcac606aa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testDivideEqualsLR</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>ace4e21370ed5eb6c9334d0a1e724d425</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testResizeBug6135</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a19881431e4a4d48492a77cfac420ddf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testEquality</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>af02111487cc8958afd9cac8b3c4b1e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testEqualityConstL</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a600047344fb4094834d7540b64c18c01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testEqualityConstR</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a65682ed2dfb5b1c1661890d89a64ade2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FadType</type>
      <name>a_fad</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a018a4cbfc2876b42e3696ab9e0008e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FadType</type>
      <name>b_fad</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a9aa3d09d49f64a007321369e6bfd4973</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FadType</type>
      <name>c_fad</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>ab739c6fc1bc9692123af4ef7b18ce3d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Sacado::Random&lt; ScalarType &gt;</type>
      <name>urand</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a580414cc625a0fabf5fe0b096c41878c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>n</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a2173f19fe5ea7a2f3963365fa747ebb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tol_a</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a665f5d8ed1f59aeacce665ef8af08fc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tol_r</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>af55b75aa3f7122a4bd4a5bf3ec9772ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>ad7699a659bfd08d67aed92fd0dd26612</anchor>
      <arglist>(FadOpsUnitTest2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a3481ae94bdd504b1a23f6acb643ca3fe</anchor>
      <arglist>(testAddition)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a76632ed206eea049d269f796090bc5b8</anchor>
      <arglist>(testSubtraction)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a9e8dbaedd8711542f588e2a20d0eb542</anchor>
      <arglist>(testMultiplication)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a6765453ef7cea495174fcef80be62a42</anchor>
      <arglist>(testDivision)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>acbae69a8e68271b5da626b7d985000ad</anchor>
      <arglist>(testEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>aab3911bdb08697a775dacd2e6df031cc</anchor>
      <arglist>(testNotEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a6b616323caf47d9ed4d1336257f65b67</anchor>
      <arglist>(testPow)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a5e6033d545f0506842bc58fe623ddfcf</anchor>
      <arglist>(testUnaryPlus)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a2d1d4e4c5f0b87ab616ca1e6c41cd3f5</anchor>
      <arglist>(testUnaryMinus)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>ada402f6300d144cbda1ecbe5089abcb4</anchor>
      <arglist>(testExp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a910094d5ee820fd679c16340ad4cc697</anchor>
      <arglist>(testLog)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a2446c51f056c8e51494099ffd832ca5d</anchor>
      <arglist>(testLog10)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>aa70c944d468e7ff1f0cc1235f368b258</anchor>
      <arglist>(testSqrt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a121543dde0ddae77ef04fee9b2b70cbe</anchor>
      <arglist>(testCos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>af1d8debcea398f3829f63b6a5f56227a</anchor>
      <arglist>(testSin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a5a0732feb80211d0b7b89d507060ed41</anchor>
      <arglist>(testTan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a36601ee3df88a09abce449ce0b7da50c</anchor>
      <arglist>(testCosh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a783bc508eab9f31bcbeb6f8b49abc92b</anchor>
      <arglist>(testSinh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a681b0e8c7b075bb5ba39e6d069126fdb</anchor>
      <arglist>(testTanh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a07650c30513a1cc6befbc50362827918</anchor>
      <arglist>(testPlusEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a1aba88f2560f04f2bd03549b6e959974</anchor>
      <arglist>(testMinusEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a81042cf25d7d66fdb42f9a07e5ba2e0f</anchor>
      <arglist>(testTimesEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a7a77eb6185ac584853b096c971f721a9</anchor>
      <arglist>(testDivideEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>ad55b8b2cc96df421b1fce0935a10d54f</anchor>
      <arglist>(testEqualsLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a16674fd4f770489245d29263404eb407</anchor>
      <arglist>(testPlusEqualsLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a86e77622f9d7e7372feb1fea04ff272a</anchor>
      <arglist>(testMinusEqualsLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a88578175d31ad21109bb40affad491b2</anchor>
      <arglist>(testTimesEqualsLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a4d20215c092aa169c3c7d9cd25383dac</anchor>
      <arglist>(testDivideEqualsLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a2a382fef12d5ad266292cd0d9e7069a0</anchor>
      <arglist>(testResizeBug6135)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a128aee820328ecdbb70664780bf8819b</anchor>
      <arglist>(testEquality)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a5d8623fa264bc14b67ae380689e94d06</anchor>
      <arglist>(testEqualityConstL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a7010a87a5a63d0f3d76522284054610a</anchor>
      <arglist>(testEqualityConstR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_END</name>
      <anchorfile>classFadOpsUnitTest2.html</anchorfile>
      <anchor>a83bb2330504b8cc8e8c720f84b543dbf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::find</name>
    <filename>structSacado_1_1mpl_1_1find.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>mpl::mpl_if&lt; mpl::is_same&lt; typename mpl::deref&lt; Iter1 &gt;::type, T &gt;, Iter1, find&lt; Seq, T, typename mpl::next&lt; Iter1 &gt;::type, Iter2 &gt; &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1find.html</anchorfile>
      <anchor>aa469bab1a963785065a5c740a5feddac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1find.html</anchorfile>
      <anchor>a7fb54f7ef2f95a93915325fc4f971d67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::find&lt; Seq, T, Iter1, Iter1 &gt;</name>
    <filename>structSacado_1_1mpl_1_1find_3_01Seq_00_01T_00_01Iter1_00_01Iter1_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1find_3_01Seq_00_01T_00_01Iter1_00_01Iter1_01_4.html</anchorfile>
      <anchor>af805a1ce489453aa58dcc309050a0ace</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::FlopCounterPack::FlopCounts</name>
    <filename>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</filename>
    <member kind="enumvalue">
      <name>NUM_OPS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>a5dbe54a4ed5b882f214c34b44854bfb3a6f6739c787dc28cc0ec917a874acae4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EFlopType</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSIGN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a31eee8b633e547a3605236e1004d000b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLUS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a26f6ce2483860b983cf1a51bd5e32628</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLUS_ASSIGN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a65bce8c6d22507a1f42ea231818bbecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNARY_PLUS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a2e0ba6352302bd3e89edc49634226866</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MINUS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a153b2a5098f279dda725f021b81eec93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MINUS_ASSIGN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a979afc3990a4f21b9387dbcb69d997f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNARY_MINUS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391ad031da0b9da58fb31711ef29961018be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTIPLY</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a870d2c764278bb6fb16fb2a2ce58c06b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTIPLY_ASSIGN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391aaf840357d5f2633e7ff1f40e863f16f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIVIDE</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a63012ed2964f3df2010d7cc34589ffcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIVIDE_ASSIGN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391ae3943af82137168903d2c24697d7bed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GREATER_THAN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391ac70bef80b008362f958262f59e5d3b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GREATER_THAN_EQUAL</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391ac46d7b45f5e8cf988e4261c75b01205a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LESS_THAN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a992f834433dcac9bee511d8ff51e7fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LESS_THAN_EQUAL</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a0190ded802134c7f2a41e52e9f825954</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EQUAL</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a85edb5882ec2ae99adaab17403e5fb49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXP</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a02871dc5f25e0872e754f2f6a97cc6fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOG</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a9c6b90f61a4822f930a614643fd3a561</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOG10</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a4323d27b19b27aeb554a1504746a3a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SQRT</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a5f0c7634487ecdf981a228cc90e2a97d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a4ea67f668c06ad8ef685f4f3e04cf611</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391acf2cfe4f9aa4aedb5dda821a08f01fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a12031d1049645c347aa8d66b22ca9997</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACOS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391aa5fc535090cfe48bf4c3c53a5389d877</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASIN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a6a609265b2321a639b064c4781256aca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ATAN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a3105a119b73e491251212bb72cf6ac99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ATAN2</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391ac1534226cf248cec4e7de38f292203be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COSH</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a344eab60a7eebb0b7b7b5e70743e96e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SINH</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391aa6b7b62427390b811c19958b64d7a85e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TANH</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391accc5c920483b9717b13d3bdeb786e7c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a0bcb1d2605042699a1619a849b1b5a1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POW</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a599b6c64831f654bf1c77b4b2f8b7da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a759212429148f3576169945bfffb6a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a7f0df691d01588c6f5f38ba30e9a1f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_SUMMARY_OPS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>ada0245b24afa9fde90a463d5f89e2259ab7759cf6bc108c28971741619d805b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ESummaryFlopType</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>aea590d7f1d682d7ad59425ba7902b09d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUMMARY_ASSIGN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>aea590d7f1d682d7ad59425ba7902b09dac86159c95713a8fc3a5e1ff130c62ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUMMARY_PLUS_MINUS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>aea590d7f1d682d7ad59425ba7902b09da5ebf9fcf922462391d9165870ab94f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUMMARY_MULTIPLY</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>aea590d7f1d682d7ad59425ba7902b09dabc9d93ed3a81e3ec447e3c5ab2e82568</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUMMARY_DIVIDE</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>aea590d7f1d682d7ad59425ba7902b09da8478c0321cbf9ff28c746132ee3661d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUMMARY_COMPARISON</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>aea590d7f1d682d7ad59425ba7902b09dafdfbbd2bf38da6a70dc8e37c42d4dabd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUMMARY_NONLINEAR</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>aea590d7f1d682d7ad59425ba7902b09da9ff3c6ed811ede1aa6ec26e012b71dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_OPS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>a5dbe54a4ed5b882f214c34b44854bfb3a6f6739c787dc28cc0ec917a874acae4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSIGN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a31eee8b633e547a3605236e1004d000b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLUS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a26f6ce2483860b983cf1a51bd5e32628</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLUS_ASSIGN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a65bce8c6d22507a1f42ea231818bbecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNARY_PLUS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a2e0ba6352302bd3e89edc49634226866</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MINUS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a153b2a5098f279dda725f021b81eec93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MINUS_ASSIGN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a979afc3990a4f21b9387dbcb69d997f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNARY_MINUS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391ad031da0b9da58fb31711ef29961018be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTIPLY</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a870d2c764278bb6fb16fb2a2ce58c06b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTIPLY_ASSIGN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391aaf840357d5f2633e7ff1f40e863f16f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIVIDE</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a63012ed2964f3df2010d7cc34589ffcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIVIDE_ASSIGN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391ae3943af82137168903d2c24697d7bed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GREATER_THAN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391ac70bef80b008362f958262f59e5d3b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GREATER_THAN_EQUAL</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391ac46d7b45f5e8cf988e4261c75b01205a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LESS_THAN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a992f834433dcac9bee511d8ff51e7fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LESS_THAN_EQUAL</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a0190ded802134c7f2a41e52e9f825954</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EQUAL</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a85edb5882ec2ae99adaab17403e5fb49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXP</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a02871dc5f25e0872e754f2f6a97cc6fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOG</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a9c6b90f61a4822f930a614643fd3a561</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOG10</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a4323d27b19b27aeb554a1504746a3a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SQRT</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a5f0c7634487ecdf981a228cc90e2a97d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a4ea67f668c06ad8ef685f4f3e04cf611</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391acf2cfe4f9aa4aedb5dda821a08f01fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a12031d1049645c347aa8d66b22ca9997</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACOS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391aa5fc535090cfe48bf4c3c53a5389d877</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASIN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a6a609265b2321a639b064c4781256aca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ATAN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a3105a119b73e491251212bb72cf6ac99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ATAN2</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391ac1534226cf248cec4e7de38f292203be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COSH</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a344eab60a7eebb0b7b7b5e70743e96e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SINH</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391aa6b7b62427390b811c19958b64d7a85e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TANH</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391accc5c920483b9717b13d3bdeb786e7c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a0bcb1d2605042699a1619a849b1b5a1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POW</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a599b6c64831f654bf1c77b4b2f8b7da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a759212429148f3576169945bfffb6a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>afcae6208feb7e5c198c02416190e6391a7f0df691d01588c6f5f38ba30e9a1f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_SUMMARY_OPS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>ada0245b24afa9fde90a463d5f89e2259ab7759cf6bc108c28971741619d805b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUMMARY_ASSIGN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>aea590d7f1d682d7ad59425ba7902b09dac86159c95713a8fc3a5e1ff130c62ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUMMARY_PLUS_MINUS</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>aea590d7f1d682d7ad59425ba7902b09da5ebf9fcf922462391d9165870ab94f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUMMARY_MULTIPLY</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>aea590d7f1d682d7ad59425ba7902b09dabc9d93ed3a81e3ec447e3c5ab2e82568</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUMMARY_DIVIDE</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>aea590d7f1d682d7ad59425ba7902b09da8478c0321cbf9ff28c746132ee3661d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUMMARY_COMPARISON</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>aea590d7f1d682d7ad59425ba7902b09dafdfbbd2bf38da6a70dc8e37c42d4dabd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUMMARY_NONLINEAR</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>aea590d7f1d682d7ad59425ba7902b09da9ff3c6ed811ede1aa6ec26e012b71dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlopCounts</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>a2af4af5fe39c6e9b5e30dc779cb37f70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>a17d4ee0ab77dff25da791c1863eed972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>a6cec46a165c0f75d384f7579fe353580</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>a1df5cf49ae52c505fb55af5e3ebe5d78</anchor>
      <arglist>(EFlopType ft)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>flopCounts</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>a17178bb354860be4e1f3f77d658c609d</anchor>
      <arglist>[NUM_OPS]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>summaryFlopCounts</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>a386354d6bcdcd4d598c5dc761b0c4246</anchor>
      <arglist>[NUM_SUMMARY_OPS]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>totalFlopCount</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>adcad729b5363c66856611afea86ce3f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>flopCountsNames</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>ab238e05eca7695250766e95ab8ea99cc</anchor>
      <arglist>[NUM_OPS]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>summaryFlopCountsNames</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>a896049003b980721899319c374f69d95</anchor>
      <arglist>[NUM_SUMMARY_OPS]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static unsigned int</type>
      <name>flopGranularity</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>a0b78d29a762842fc89c12377baed84c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>ESummaryFlopType</type>
      <name>getSummaryType</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>a9c2f8e9b56b18d99872fea294f28f578</anchor>
      <arglist>(EFlopType ft)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>partialFlopCounts</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>a91e304e6ac85d8aa5849d62c37839830</anchor>
      <arglist>[NUM_OPS]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>partialSummaryFlopCounts</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1FlopCounts.html</anchorfile>
      <anchor>aa03e69d22ab0ec0639d1e03bee855ede</anchor>
      <arglist>[NUM_SUMMARY_OPS]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::for_each</name>
    <filename>structSacado_1_1mpl_1_1for__each.html</filename>
    <templarg>Seq</templarg>
    <templarg>Iter1</templarg>
    <templarg>Iter2</templarg>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>for_each</name>
      <anchorfile>structSacado_1_1mpl_1_1for__each.html</anchorfile>
      <anchor>a7eeeed3d8dc6fdd6ac454cbf783af9aa</anchor>
      <arglist>(const Op &amp;op)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::for_each&lt; Seq, Iter1, Iter1 &gt;</name>
    <filename>structSacado_1_1mpl_1_1for__each_3_01Seq_00_01Iter1_00_01Iter1_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>for_each</name>
      <anchorfile>structSacado_1_1mpl_1_1for__each_3_01Seq_00_01Iter1_00_01Iter1_01_4.html</anchorfile>
      <anchor>a1e7b91fc5b738e963bc08b1aeca9702d</anchor>
      <arglist>(const Op &amp;op)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::for_each_no_kokkos</name>
    <filename>structSacado_1_1mpl_1_1for__each__no__kokkos.html</filename>
    <templarg>Seq</templarg>
    <templarg>Iter1</templarg>
    <templarg>Iter2</templarg>
    <member kind="function">
      <type></type>
      <name>for_each_no_kokkos</name>
      <anchorfile>structSacado_1_1mpl_1_1for__each__no__kokkos.html</anchorfile>
      <anchor>aebeac5d6b383da8f34219af033a0aedc</anchor>
      <arglist>(const Op &amp;op)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::for_each_no_kokkos&lt; Seq, Iter1, Iter1 &gt;</name>
    <filename>structSacado_1_1mpl_1_1for__each__no__kokkos_3_01Seq_00_01Iter1_00_01Iter1_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>for_each_no_kokkos</name>
      <anchorfile>structSacado_1_1mpl_1_1for__each__no__kokkos_3_01Seq_00_01Iter1_00_01Iter1_01_4.html</anchorfile>
      <anchor>a45923f922e625c1b7ad1dd8ae3396560</anchor>
      <arglist>(const Op &amp;op)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::Found</name>
    <filename>structSacado_1_1mpl_1_1Found.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>x</name>
      <anchorfile>structSacado_1_1mpl_1_1Found.html</anchorfile>
      <anchor>adb1d048a81118ee8497ad132b9223b3b</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Func4</name>
    <filename>structFunc4.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>structFunc4.html</anchorfile>
      <anchor>a0c5aeac704b2f5b27b8baef4bd99d935</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double *</type>
      <name>dom</name>
      <anchorfile>structFunc4.html</anchorfile>
      <anchor>a47861f24db3e0e9c20fdd92189d3fe59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ADVar_uf</type>
      <name>f1</name>
      <anchorfile>structFunc4.html</anchorfile>
      <anchor>a2963e74f0861c6235740483fb770f0ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DADVar_uf</type>
      <name>f2</name>
      <anchorfile>structFunc4.html</anchorfile>
      <anchor>a48a8334fa962e0723afdc1ea4edaccb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FDReal_uf</type>
      <name>f3</name>
      <anchorfile>structFunc4.html</anchorfile>
      <anchor>ab37824a7ef796c588b2135b74141cd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AFReal_uf</type>
      <name>f4</name>
      <anchorfile>structFunc4.html</anchorfile>
      <anchor>a9d7ee0304db73131f7a5b9ed60f46adb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Func42</name>
    <filename>structFunc42.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>structFunc42.html</anchorfile>
      <anchor>a3362ef859af026d8638010f6861ac3b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double *</type>
      <name>xdom</name>
      <anchorfile>structFunc42.html</anchorfile>
      <anchor>ab21d4dc9a3d31bfb82d0e7e9153a5ea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ADVar_uf2</type>
      <name>f1</name>
      <anchorfile>structFunc42.html</anchorfile>
      <anchor>a9e07b8fb25c521f4ec1fd637721c8e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DADVar_uf2</type>
      <name>f2</name>
      <anchorfile>structFunc42.html</anchorfile>
      <anchor>a745d3e184bf2b4faf0f1b8de0cbd036c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FDReal_uf2</type>
      <name>f3</name>
      <anchorfile>structFunc42.html</anchorfile>
      <anchor>a83c1d59e2f6b671b1e604a81160b6e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AFReal_uf2</type>
      <name>f4</name>
      <anchorfile>structFunc42.html</anchorfile>
      <anchor>a22d1b285470ba67f7048af73bf01ace1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::GeneralFad</name>
    <filename>classSacado_1_1Fad_1_1GeneralFad.html</filename>
    <templarg>T</templarg>
    <templarg>Storage</templarg>
    <member kind="typedef">
      <type>RemoveConst&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a02dd8babc9dba28ea0f7d450ad4c66c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ae0dd714c57e8311221add959935869e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>acfcac58cfcc5f1bcd7b676772efd98b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a8fa3fb40c16d87f52e6b99d0f4718c6b</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aa853a4d31c8004c25bfee556a1d9a7b6</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a2d1bcc5c013368c01c30895e1b7b8d0a</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a5691c37e56eb4a1141c6ca5af51582fe</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ab43b250ce83098c364211e8dd8eb3a17</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>acb3df063f7a50bc27f33142b81a26fed</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>adc83611e863d94d93b30979bcd95b9f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a5c40f1cb03793b9a455f39a99e92dea3</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ab44cbf8d615a3cf4cb28320567656b54</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a2d5d48ab197d49bd89015ef5ed1c137b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SACADO_ENABLE_EXPR_FUNC</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a75ba999c191cf060b733e07da95faff6</anchor>
      <arglist>(bool) isEqualTo(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a48952abc1ee06cbcd5139882ac34e6a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>acb812b23e9c0f423cf205750841ed037</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a4917c7b60c8a65d6815b8be506f9b74d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>af79f6af673d79fa0b945cbad28da7d2e</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::GeneralFad</name>
    <filename>classSacado_1_1CacheFad_1_1GeneralFad.html</filename>
    <templarg>T</templarg>
    <templarg>Storage</templarg>
    <member kind="typedef">
      <type>RemoveConst&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a945c52d6457d8b96606610ac63e5f020</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ace51eab839116b9674cc69497cb3654d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>acf03251483247b122a208b06e6f4c99c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ad9c50f4edf69271b5e91d3a09f7c0d52</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a13512e02e3b75090dcedc4ac90986e2d</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a2a42192a7b581365272d8b40bed3301e</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a0dee838d6fe4bb28909e02f4d27d4e7a</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a1d3b04814971c55de0516b772c07bb0d</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>afb1b9db580ca0da88b165e94796e0c12</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~GeneralFad</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a3d5926bb6a8cf4485493e7379934182c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a5293d730f95ebb37990c44cae20921a1</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ab1fc76eed22d5502eb9a4b00a6c57e20</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ae807820d23c812237a719614209ebf6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a2b6243cc70b504472b5647f60c7f0c4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SACADO_ENABLE_EXPR_FUNC</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a8166b6d38ab3d2b56f738666f088c2e1</anchor>
      <arglist>(bool) isEqualTo(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a21602d522474ef04cce0d6c80a9bcc77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>aa68af4ea78ec5c6f01f7061e165f89c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>aff30588daf223b163eefffaf8baf3d11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1CacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a98d0059a2741e55701b1ed884fc42f48</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::GeneralFad</name>
    <filename>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</filename>
    <templarg>T</templarg>
    <templarg>Storage</templarg>
    <class kind="struct">Sacado::ELRCacheFad::GeneralFad::SlowLocalAccumOp</class>
    <member kind="typedef">
      <type>RemoveConst&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a07249aea2146d8e8f9f6e2219b87ad42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a021bb79c7dc6991d1b4063294c5319c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SACADO_ENABLE_VALUE_FUNC</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ad882339f60fa83ae00312f6e14294e5b</anchor>
      <arglist>(GeneralFad &amp;) operator</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a87b6b49b7f5e37cfb1119ffc56fc8b20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>aea18ac77ca4924a8fe584ba75761beca</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ac4de5257d855b40db32d5c43ff51e833</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a10f75afe4068e0e247692103ed155d7f</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>aac77259c7a3f8fceccb4d9448b4a663f</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a7b4affcc124ff123af2eda11f34275c3</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>adb5908083c0c51deeb68ea7663242a19</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~GeneralFad</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>af1c8eb5446377f209c7e64d0d16cb594</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a5a959543dc49e41e8ffc2235ccebdd09</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a3586ab54f85ecdb3c553c34094f3df2f</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a513e13cc6b916d8e21ba59591a128a92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>cache</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>aa65a06a894bbf1b4e9d5034324789512</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SACADO_ENABLE_EXPR_FUNC</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a39336b4b4d5e036c3c9fd421c19fe5de</anchor>
      <arglist>(bool) isEqualTo(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a5b2235e2bd8462444e7cb5a45099f0f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a25e2ec3c3a6ba020d4843d4a854ebc3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>ab71d4d5c1803135073b35ef9c892183d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1ELRCacheFad_1_1GeneralFad.html</anchorfile>
      <anchor>a3e0020f427651c0ed11e2400067643cc</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::GeneralFad</name>
    <filename>classSacado_1_1ELRFad_1_1GeneralFad.html</filename>
    <templarg>T</templarg>
    <templarg>Storage</templarg>
    <class kind="struct">Sacado::ELRFad::GeneralFad::SlowLocalAccumOp</class>
    <member kind="typedef">
      <type>RemoveConst&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>aa4878e395dc4c6909ee7db1e5281518c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a55581f192a6f2a0d87e2756fb76d1a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SACADO_ENABLE_VALUE_FUNC</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a5a90313cad6311f27e10da07735c909f</anchor>
      <arglist>(GeneralFad &amp;) operator</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a79f644433a4bee516c948295fbf7c329</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>aa363cc963563698411ac3487338ec02f</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a20b957a4134ca38891c4a9cebbc109f2</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>ae80c79b9164ee6a2a99b45ab5ef291d1</anchor>
      <arglist>(const int sz, const int i, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>aced65302ff7002b2a31206ddc9f89ce4</anchor>
      <arglist>(const Storage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a8d6687a6c01b6008c8c417915c5a3cc7</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a37e19f6bb38ef39c88247c6a68034616</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~GeneralFad</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a57843301145f1d9db2d02bd6f7511ae1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>abb1b3dd98e93817a5070fee6c4e4e43e</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a1a9343a225db83af0e53064222f25155</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a8e104228933a89623a58f98dac799999</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SACADO_ENABLE_EXPR_FUNC</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a3c506fc3077feb451790d1d8344d637c</anchor>
      <arglist>(bool) isEqualTo(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a8ad48c31cb78f2001f77972976fcf06f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>a2d12de715ac152cf64918196b74fa8be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>ae25bedc076675a6606620e13d9e11944</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1ELRFad_1_1GeneralFad.html</anchorfile>
      <anchor>ade2907d6de59f8e21a24d27ad9e0d135</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GeneralFad&lt; ValueT, DynamicStorage&lt; ValueT &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1GeneralFad.html</filename>
    <base>DynamicStorage&lt; ValueT &gt;</base>
    <member kind="typedef">
      <type>RemoveConst&lt; ValueT &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a02dd8babc9dba28ea0f7d450ad4c66c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ae0dd714c57e8311221add959935869e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>acfcac58cfcc5f1bcd7b676772efd98b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a8fa3fb40c16d87f52e6b99d0f4718c6b</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>aa853a4d31c8004c25bfee556a1d9a7b6</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a2d1bcc5c013368c01c30895e1b7b8d0a</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a5691c37e56eb4a1141c6ca5af51582fe</anchor>
      <arglist>(const DynamicStorage&lt; ValueT &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ab43b250ce83098c364211e8dd8eb3a17</anchor>
      <arglist>(const GeneralFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>acb3df063f7a50bc27f33142b81a26fed</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~GeneralFad</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>adc83611e863d94d93b30979bcd95b9f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a5c40f1cb03793b9a455f39a99e92dea3</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>setUpdateValue</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>ab44cbf8d615a3cf4cb28320567656b54</anchor>
      <arglist>(bool update_val)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>updateValue</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a2d5d48ab197d49bd89015ef5ed1c137b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SACADO_ENABLE_EXPR_FUNC</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a75ba999c191cf060b733e07da95faff6</anchor>
      <arglist>(bool) isEqualTo(const Expr&lt; S &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>availableSize</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a48952abc1ee06cbcd5139882ac34e6a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>acb812b23e9c0f423cf205750841ed037</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>a4917c7b60c8a65d6815b8be506f9b74d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1Fad_1_1GeneralFad.html</anchorfile>
      <anchor>af79f6af673d79fa0b945cbad28da7d2e</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Handle</name>
    <filename>classSacado_1_1Handle.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>Handle</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a6eaee66950217a6ec6d2bbf3af861d94</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Handle</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>aabf8fd3fb4f1caa5f58ae3a7d363560c</anchor>
      <arglist>(const Handle &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Handle</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>ad759016f98d819a3efa8444a9848f4e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a08a7cc38ef36bb1093d99dffa4cafefe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>get</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a357aae389301cf06fd8ae2468a5b3968</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Assign</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a69f9e88f68a0a1f64a4361f27677ac3c</anchor>
      <arglist>(const Handle &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeOwnCopy</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>aaf510970f14009fc1ececf6bb3e45b48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Handle &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a923e0c6ca4ef03ac6ef328b583167dc9</anchor>
      <arglist>(const Handle &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a45d6de40b48855b443c30fc8efb937d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator*</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a68a50f5bb65a2a8a3cd6b1de8138142f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a325eaf7f066a92b67cf474dea84f6f83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>decrementRef</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>acf8290c98c3fbf5dec5255d38db1f9ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>rep</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a37d5a8ebcc07b2d61bf22f18e423463b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>count</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a6780e998aced1cb45419b2afec364350</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Handle&lt; Sacado::Tay::Taylor::TaylorData &gt;</name>
    <filename>classSacado_1_1Handle.html</filename>
    <member kind="function">
      <type></type>
      <name>Handle</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a6eaee66950217a6ec6d2bbf3af861d94</anchor>
      <arglist>(Sacado::Tay::Taylor::TaylorData *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Handle</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>aabf8fd3fb4f1caa5f58ae3a7d363560c</anchor>
      <arglist>(const Handle &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Handle</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>ad759016f98d819a3efa8444a9848f4e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Tay::Taylor::TaylorData *</type>
      <name>get</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a08a7cc38ef36bb1093d99dffa4cafefe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Sacado::Tay::Taylor::TaylorData *</type>
      <name>get</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a357aae389301cf06fd8ae2468a5b3968</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Assign</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a69f9e88f68a0a1f64a4361f27677ac3c</anchor>
      <arglist>(const Handle &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeOwnCopy</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>aaf510970f14009fc1ececf6bb3e45b48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Handle &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a923e0c6ca4ef03ac6ef328b583167dc9</anchor>
      <arglist>(const Handle &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Tay::Taylor::TaylorData *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a45d6de40b48855b443c30fc8efb937d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Sacado::Tay::Taylor::TaylorData &amp;</type>
      <name>operator*</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a68a50f5bb65a2a8a3cd6b1de8138142f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Sacado::Tay::Taylor::TaylorData &amp;</type>
      <name>operator*</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a325eaf7f066a92b67cf474dea84f6f83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>decrementRef</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>acf8290c98c3fbf5dec5255d38db1f9ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Sacado::Tay::Taylor::TaylorData *</type>
      <name>rep</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a37d5a8ebcc07b2d61bf22f18e423463b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>count</name>
      <anchorfile>classSacado_1_1Handle.html</anchorfile>
      <anchor>a6780e998aced1cb45419b2afec364350</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::has_type</name>
    <filename>structSacado_1_1mpl_1_1has__type.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1has__type.html</anchorfile>
      <anchor>aa35ad1d631704aba7a623f88009f608c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Kokkos::Example::HexElement_Data</name>
    <filename>classKokkos_1_1Example_1_1HexElement__Data.html</filename>
    <templarg>NodeCount</templarg>
    <member kind="function">
      <type></type>
      <name>HexElement_Data</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__Data.html</anchorfile>
      <anchor>a855c92b6f7994c4ebcd6021b0aec79a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HexElement_Data</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__Data.html</anchorfile>
      <anchor>a855c92b6f7994c4ebcd6021b0aec79a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>weights</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__Data.html</anchorfile>
      <anchor>a87f5650860e7cac68d6320b455607138</anchor>
      <arglist>[   integration_count]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>values</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__Data.html</anchorfile>
      <anchor>a81c4ffae47e8cf1389e480646193b6a0</anchor>
      <arglist>[       integration_count][function_count]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>gradients</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__Data.html</anchorfile>
      <anchor>afa032647aa8ae0010d8dcffee4d93630</anchor>
      <arglist>[integration_count][spatial_dimension][function_count]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>spatial_dimension</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__Data.html</anchorfile>
      <anchor>a77a9f4d5a3c4a2c130250a2798731a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>element_node_count</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__Data.html</anchorfile>
      <anchor>a2668a1b8771147d73872eefbb3791817</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>integration_count</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__Data.html</anchorfile>
      <anchor>a54ede914d009ad0b79cf3be5ddbd2419</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>function_count</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__Data.html</anchorfile>
      <anchor>ae9c7e26f73d55ce04ad5c02a45ccf047</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Kokkos::Example::HexElement_TensorData</name>
    <filename>classKokkos_1_1Example_1_1HexElement__TensorData.html</filename>
    <templarg>NodeCount</templarg>
  </compound>
  <compound kind="class">
    <name>Kokkos::Example::HexElement_TensorData&lt; 27 &gt;</name>
    <filename>classKokkos_1_1Example_1_1HexElement__TensorData_3_0127_01_4.html</filename>
    <member kind="function">
      <type></type>
      <name>HexElement_TensorData</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_0127_01_4.html</anchorfile>
      <anchor>ac6679e173464d1b5f53307e547bd42a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HexElement_TensorData</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_0127_01_4.html</anchorfile>
      <anchor>ac6679e173464d1b5f53307e547bd42a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>eval_value_1d</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_0127_01_4.html</anchorfile>
      <anchor>ac98e78c3d91553c251b31c92b5b15e20</anchor>
      <arglist>(const unsigned jf, const double p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>eval_deriv_1d</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_0127_01_4.html</anchorfile>
      <anchor>abd07d56d81559b7e6c86667d454ba87d</anchor>
      <arglist>(const unsigned jf, const double p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>eval_value_1d</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_0127_01_4.html</anchorfile>
      <anchor>ac98e78c3d91553c251b31c92b5b15e20</anchor>
      <arglist>(const unsigned jf, const double p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>eval_deriv_1d</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_0127_01_4.html</anchorfile>
      <anchor>abd07d56d81559b7e6c86667d454ba87d</anchor>
      <arglist>(const unsigned jf, const double p)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>values_1d</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_0127_01_4.html</anchorfile>
      <anchor>ad8e3806a036b55d735d7056d5764f3a4</anchor>
      <arglist>[function_count_1d][integration_count_1d]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>derivs_1d</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_0127_01_4.html</anchorfile>
      <anchor>a969c8514209a725f90174badb4739ef3</anchor>
      <arglist>[function_count_1d][integration_count_1d]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>weights_1d</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_0127_01_4.html</anchorfile>
      <anchor>a87749d7bf8b281b8a0d634444fc902d5</anchor>
      <arglist>[integration_count_1d]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>eval_map</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_0127_01_4.html</anchorfile>
      <anchor>a4df489f35c14ef54ee5c0d5703ad6043</anchor>
      <arglist>[element_node_count][4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>element_node_count</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_0127_01_4.html</anchorfile>
      <anchor>a097e87fa35092dd44dfb602024ffb156</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>spatial_dimension</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_0127_01_4.html</anchorfile>
      <anchor>a6b5eb4f340a5165455e130be8eaafef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>integration_count_1d</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_0127_01_4.html</anchorfile>
      <anchor>adc4301d3425bfe3bbb95fdc41bdd5e33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>function_count_1d</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_0127_01_4.html</anchorfile>
      <anchor>af11ea0b5cbc2a4e8026fd0ca6116280a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Kokkos::Example::HexElement_TensorData&lt; 8 &gt;</name>
    <filename>classKokkos_1_1Example_1_1HexElement__TensorData_3_018_01_4.html</filename>
    <member kind="function">
      <type></type>
      <name>HexElement_TensorData</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_018_01_4.html</anchorfile>
      <anchor>a3799d1597a9d20cb373970699f7a4c72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HexElement_TensorData</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_018_01_4.html</anchorfile>
      <anchor>a3799d1597a9d20cb373970699f7a4c72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>eval_value_1d</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_018_01_4.html</anchorfile>
      <anchor>af2d398072bb424f72559e80ccdc0f41a</anchor>
      <arglist>(const unsigned jf, const double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>eval_deriv_1d</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_018_01_4.html</anchorfile>
      <anchor>a4bc606a1de1c721472a0198f00be7258</anchor>
      <arglist>(const unsigned jf, const double)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>eval_value_1d</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_018_01_4.html</anchorfile>
      <anchor>af2d398072bb424f72559e80ccdc0f41a</anchor>
      <arglist>(const unsigned jf, const double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>eval_deriv_1d</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_018_01_4.html</anchorfile>
      <anchor>a4bc606a1de1c721472a0198f00be7258</anchor>
      <arglist>(const unsigned jf, const double)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>values_1d</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_018_01_4.html</anchorfile>
      <anchor>ab3af533a743b237f3240f1afad059d25</anchor>
      <arglist>[function_count_1d][integration_count_1d]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>derivs_1d</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_018_01_4.html</anchorfile>
      <anchor>ab1ea45cf9ab7e2b9e90ca99f6602bb53</anchor>
      <arglist>[function_count_1d][integration_count_1d]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>weights_1d</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_018_01_4.html</anchorfile>
      <anchor>a5a2446a859303429203ad9edd90ae144</anchor>
      <arglist>[integration_count_1d]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>eval_map</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_018_01_4.html</anchorfile>
      <anchor>adf86ae670ff0edd0efed1b5b23c54d74</anchor>
      <arglist>[element_node_count][4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>element_node_count</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_018_01_4.html</anchorfile>
      <anchor>a19c1f911bf3d3a6bb8746e72968fb31e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>spatial_dimension</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_018_01_4.html</anchorfile>
      <anchor>a84d9493de94ee3b701552f0a70e9a8f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>integration_count_1d</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_018_01_4.html</anchorfile>
      <anchor>a093be3c8fa6d0e970be2a7cd6f07f181</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>function_count_1d</name>
      <anchorfile>classKokkos_1_1Example_1_1HexElement__TensorData_3_018_01_4.html</anchorfile>
      <anchor>ab6acb588386377d7d038b89980c64b76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Kokkos::Example::HexElement_TensorEval</name>
    <filename>classKokkos_1_1Example_1_1HexElement__TensorEval.html</filename>
    <templarg>NodeCount</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::hk</name>
    <filename>structSacado_1_1mpl_1_1hk.html</filename>
    <templarg>k</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>F</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1hk.html</anchorfile>
      <anchor>af392900d0c1539770034cff83b0ae6f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::hk&lt; k, arg&lt; N &gt;, T1, T2, T3, T4, T5 &gt;</name>
    <filename>structSacado_1_1mpl_1_1hk_3_01k_00_01arg_3_01N_01_4_00_01T1_00_01T2_00_01T3_00_01T4_00_01T5_01_4.html</filename>
    <templarg>k</templarg>
    <templarg>N</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap&lt; arg&lt; N &gt;, T1, T2, T3, T4, T5 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::hk&lt; k, arg&lt;-1 &gt;, T1, T2, T3, T4, T5 &gt;</name>
    <filename>structSacado_1_1mpl_1_1hk_3_01k_00_01arg_3-1_01_4_00_01T1_00_01T2_00_01T3_00_01T4_00_01T5_01_4.html</filename>
    <templarg>k</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>apply_wrap&lt; arg&lt; k &gt;, T1, T2, T3, T4, T5 &gt;</base>
  </compound>
  <compound kind="class">
    <name>Sacado::Radnt::IndepADvar</name>
    <filename>classSacado_1_1Radnt_1_1IndepADvar.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>a9fed36ab6e5fcb0cee5651791cebc823</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>a094b44459f895f52b0c11791a0057c3c</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>a1478b81463e1f386fe50c87950dd44fe</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>a5aaa2dfcfc58e647a0f5771a80cde81d</anchor>
      <arglist>(long)</arglist>
    </member>
    <member kind="function">
      <type>IndepADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>ac84d0d70e1c885438eb30e328e0b4a17</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>a7b5a1587f1c99ab8c0bffe7d822f7f9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IndepADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>a39295a9d1871cfb5df81718fff106533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ADvari &amp;</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>ab0159c26cce6caa3cfb41302a13fdf3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ADvari &amp;</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>a0876f757d70bbe605938cf1c99f4d90d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>a9e281c20533022234ed7433ba8ab9245</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>adj</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>abf1df455a1f873feca2116c7fd6ffbf5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>a6df36563d61b835e4629fdb9782dbfbd</anchor>
      <arglist>(int wantgrad)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>ad24ef16bb1f7b55a1228ac0eb8d58f3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>aval_reset</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>aae30dc73823cd9459c07c121fa3a1a03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Weighted_Gradcomp</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>acc9cc620027c5e22ddd5f9dde4256d83</anchor>
      <arglist>(int n, ADvar **v, double *w)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>AD_Const</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>a7c111cb7c15dc76408d8b4883d6c32e1</anchor>
      <arglist>(const IndepADvar &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ADvari *</type>
      <name>cv</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>a57f83b0f2801b3a6b4c8a0be7aac3c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>IndepADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>ac7369670f04bea2f62ce8a550a490fab</anchor>
      <arglist>(const IndepADvar &amp;x)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>a3a881fa626c8a5fe214728b4532f2fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvar1</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>ab5be224245fd01d0afafee893f48026b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvarn</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>a52f28808cea8bd95003a9aa3ac478885</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADcontext</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>ae8715f86eb0a023c2832ee97e4c25977</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend IndepADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>aea696fb052e1d0fe0197f27147c0ab1a</anchor>
      <arglist>(IndepADvar *, const ADvari &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>AD_Const</name>
      <anchorfile>classSacado_1_1Radnt_1_1IndepADvar.html</anchorfile>
      <anchor>ac6c3ce28645d7f9130d5d987831f7d14</anchor>
      <arglist>(const IndepADvar &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2d::IndepADvar</name>
    <filename>classSacado_1_1Rad2d_1_1IndepADvar.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>a1f6264172678e806f96ad4d97f540859</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>ab496904accba58e3f7bd5fc07bf3f15c</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>af9f4503b4857b6146c19a9442e0f3eb7</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>a27795d214bd09244ee2159d72993e204</anchor>
      <arglist>(long)</arglist>
    </member>
    <member kind="function">
      <type>IndepADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>a98e3a8810e518bf158f2d2d33b75a5d3</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>a5039284a75285f9de4f98167d4b88a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IndepADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>ab0ef9d1637146c45017c159f6b24bef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ADvari &amp;</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>abe90dc284f39401e1c3230d3fd29200c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ADvari &amp;</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>ad8a9a89319f4a52d72b8c7fffc29687c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>a6b7800ad77acb986e51819a7b0145a70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>adj</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>ab465c7f40253c8cc3f19b980918feadd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>ad1873bacb926e7f64d59fb250a61d913</anchor>
      <arglist>(int wantgrad)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>a6ae18f04a20b3a666f243dc06ba32f62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Hvprod</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>ab5b625bec1577108dd7add2c6fa4af63</anchor>
      <arglist>(int n, ADvar **vp, double *v, double *hv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>aval_reset</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>a225ba8d2bcfe5cc39613c1e561e76344</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Weighted_Gradcomp</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>aa0c1df849503abdc6cf240a806c27632</anchor>
      <arglist>(int n, ADvar **v, double *w)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>AD_Const</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>ad777ee9164c3c537f97b6d0a599c2074</anchor>
      <arglist>(const IndepADvar &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ADvari *</type>
      <name>cv</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>a09ece94bdbd0f0068fcee9b10250b00e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>IndepADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>aace78064a2a106b76c67289806df54c4</anchor>
      <arglist>(const IndepADvar &amp;x)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvar</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>a3a881fa626c8a5fe214728b4532f2fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvar1</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>ab5be224245fd01d0afafee893f48026b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvarn</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>a52f28808cea8bd95003a9aa3ac478885</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADcontext</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>ae8715f86eb0a023c2832ee97e4c25977</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend IndepADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>aea696fb052e1d0fe0197f27147c0ab1a</anchor>
      <arglist>(IndepADvar *, const ADvari &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>AD_Const</name>
      <anchorfile>classSacado_1_1Rad2d_1_1IndepADvar.html</anchorfile>
      <anchor>ac6c3ce28645d7f9130d5d987831f7d14</anchor>
      <arglist>(const IndepADvar &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::IndepADvar</name>
    <filename>classSacado_1_1Rad_1_1IndepADvar.html</filename>
    <templarg>Double</templarg>
    <base protection="protected">Sacado::Rad::IndepADvar_base</base>
    <base>Base&lt; IndepADvar&lt; Double &gt; &gt;</base>
    <member kind="typedef">
      <type>Double</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a5b7eaa7c56754c5153e223c38e11b22b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>ae53feb88b976de8dc0b8aef06f4e1098</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADvar&lt; Double &gt;</type>
      <name>ADVar</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>ad2fa8bd053df00db930e6acd1d00b34c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Wantderiv</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a68a9f1e6108fafc22536e7aa2d28e5d4</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a5d951b3e6d6babefefb22d3f5c847266</anchor>
      <arglist>(Ttype)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a8ae60bb1db19bf8b88666d60c9ef4454</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>af5f0ddfb85e9a4f54cc20d00a92d72e6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>af928828da3485669546a616414d055a3</anchor>
      <arglist>(long)</arglist>
    </member>
    <member kind="function">
      <type>IndepADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a03ad804c9717ad0db0ea4a185ed9c9f5</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Wantderiv</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a283f42feec18b21eb1b437e74aa74d52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a1c7310983fd69fce0e0bb29160cd7da0</anchor>
      <arglist>() Allow_noderiv(</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IndepADvar</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a8a6798ca220e2696b2bcedaa1280b2a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ADVari &amp;</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a1845f9cb6a9b535ef039f5edcd88155c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ADVari *</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a54a30b4ff67e2b4f39630bcd032e164b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Double</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a67334d78b3698eb206b0d998cbb778ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Double</type>
      <name>adj</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a514c2045ea12afe867e84ef27468eed0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a9388a3efe617b327b247f219b6c0f9d0</anchor>
      <arglist>(int wantgrad)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a98db058f7571f4e5ced6408644d06cbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>aval_reset</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>afaf5d651e50a1869d87fe9fef0ee25fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Weighted_Gradcomp</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a75d64dd8fc5486743c87be10f2676e3e</anchor>
      <arglist>(size_t n, ADVar **v, Double *w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Outvar_Gradcomp</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>abff4c4a8817cdb8c2189e2633b05bb77</anchor>
      <arglist>(ADVar &amp;v)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>AD_Const</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a2b1be5e93988b6f3a24d0c00f1625c32</anchor>
      <arglist>(const IndepADvar &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ADvari&lt; Double &gt; *</type>
      <name>cv</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a63851786e8907850fca3fb2677db5a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>IndepADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a05534b6041c1431968f6abc40c43aa7e</anchor>
      <arglist>(IndepADvar &amp;x)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvar&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a8ca24241911fb1b9c51128cf2a710b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADcontext&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>aa9651e5b79313773bc28734706ce5b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvar1&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a9150e5801a55db99ae0705ead04a1b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvarn&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a78813af4e5afb13acbcb1dee5c24cd0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend IndepADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a35da6a300faa78224748fa401069a674</anchor>
      <arglist>(IndepADvar *, const ADVari &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>AD_Const1</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a895cde64f0ac05bc53d3ba6075532f2c</anchor>
      <arglist>(Double *, const IndepADvar &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADVari &amp;</type>
      <name>ADf1</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>aa5104bcb49424e72519780bcca15d4e0</anchor>
      <arglist>(Double, Double, const IndepADvar &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADVari &amp;</type>
      <name>ADf2</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a9d2902f5f41df795396c30939696d48f</anchor>
      <arglist>(Double, Double, Double, const IndepADvar &amp;, const IndepADvar &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADVari &amp;</type>
      <name>ADf2</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>a3a43781a937df96826f33054e92cd76b</anchor>
      <arglist>(Double, Double, Double, const ADVari &amp;, const IndepADvar &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADVari &amp;</type>
      <name>ADf2</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar.html</anchorfile>
      <anchor>aec42d94563754a427a85e3d2777c00bc</anchor>
      <arglist>(Double, Double, Double, const IndepADvar &amp;, const ADVari &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::IndepADvar</name>
    <filename>classSacado_1_1Rad2_1_1IndepADvar.html</filename>
    <templarg>Double</templarg>
    <member kind="typedef">
      <type>Double</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a77d2e96ccae164056d8fa455588f2521</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>aacc991fb316d5ec32e0213f2c20599d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADvar&lt; Double &gt;</type>
      <name>ADVar</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a6760bce049ea62348ffdc3f5a6d4cefa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a7c96ef818440f93ecbc100130ef314f9</anchor>
      <arglist>(Ttype)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a0a274f0471639554133677e861a22463</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a5096d8c5007e0674788a467ebc53973f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>ab223c1c69a79985b0d92dfadec0757a1</anchor>
      <arglist>(long)</arglist>
    </member>
    <member kind="function">
      <type>IndepADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a54f8c3d877cf304cc4ec8a2e400f9a2c</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a6b591ea1dea8523815d6ba74f1dbacd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IndepADvar</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a4e5c206c8eab7da35002f08c23da3837</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ADVari &amp;</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>ac89168c014d209f98e4b31cc50ec7df9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ADVari *</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>ab1413473c8fc75a49556d4eb70a141a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Double</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>ad0c9e07c12784cd014717e19e1aff988</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Double</type>
      <name>adj</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a5dea2b710db0030ebe442598f7b7e360</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>ae09b6fea9a13711a3f5d065844be4ff1</anchor>
      <arglist>(int wantgrad)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a9a39b9a6f5e39570b37971401f498309</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Hvprod</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>aa68bcff81ddbf8e28ab76ebfd339ba67</anchor>
      <arglist>(int n, ADVar **vp, Double *v, Double *hv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>aval_reset</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a3c11f0a6d18b8ea63af5129a7a1fe411</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Weighted_Gradcomp</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>aadfda86e11ecdfc27cc4911a9be81ae7</anchor>
      <arglist>(int n, ADVar **v, Double *w)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>AD_Const</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a8b40d907c92c37998608e146b4379650</anchor>
      <arglist>(const IndepADvar &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ADvari&lt; Double &gt; *</type>
      <name>cv</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a608e578b1ba5db45ae4c49d58236582d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>IndepADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>ac08fb2e8ccd2bcf0a2d88b0bad44eaaa</anchor>
      <arglist>(IndepADvar &amp;x)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvar&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a8ca24241911fb1b9c51128cf2a710b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADcontext&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>aa9651e5b79313773bc28734706ce5b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvar1&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a9150e5801a55db99ae0705ead04a1b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvarn&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a78813af4e5afb13acbcb1dee5c24cd0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend IndepADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a35da6a300faa78224748fa401069a674</anchor>
      <arglist>(IndepADvar *, const ADVari &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>AD_Const1</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a895cde64f0ac05bc53d3ba6075532f2c</anchor>
      <arglist>(Double *, const IndepADvar &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADVari &amp;</type>
      <name>ADf1</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>aa5104bcb49424e72519780bcca15d4e0</anchor>
      <arglist>(Double, Double, const IndepADvar &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADVari &amp;</type>
      <name>ADf2</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a9d2902f5f41df795396c30939696d48f</anchor>
      <arglist>(Double, Double, Double, const IndepADvar &amp;, const IndepADvar &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADVari &amp;</type>
      <name>ADf2</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>a3a43781a937df96826f33054e92cd76b</anchor>
      <arglist>(Double, Double, Double, const ADVari &amp;, const IndepADvar &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADVari &amp;</type>
      <name>ADf2</name>
      <anchorfile>classSacado_1_1Rad2_1_1IndepADvar.html</anchorfile>
      <anchor>aec42d94563754a427a85e3d2777c00bc</anchor>
      <arglist>(Double, Double, Double, const IndepADvar &amp;, const ADVari &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::IndepADvar</name>
    <filename>classSacado_1_1RadVec_1_1IndepADvar.html</filename>
    <templarg>Double</templarg>
    <member kind="typedef">
      <type>Double</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a8db43ad06aebe5fa4a022e3aaec0050e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADvari&lt; Double &gt;</type>
      <name>ADVari</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a267d4984a9899d4c232163e8b2222c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ADvar&lt; Double &gt;</type>
      <name>ADVar</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>ad536255f7d88c0bdc2bdc61dd583ac34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Wantderiv</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>ab6192be381548eb99e3088d97b28129b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a454579e6de8cdb0cd361f13f55ba4d85</anchor>
      <arglist>(Ttype)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a28ed974f3ffd056fc0409fc7ad27d5e6</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a1022002565902bb2f3cf028e0cacbc80</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>ac7d2c7854e699620966413d08a251bfd</anchor>
      <arglist>(long)</arglist>
    </member>
    <member kind="function">
      <type>IndepADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a7988ee865227557d8b5d6da18ba9aaa1</anchor>
      <arglist>(Double)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Wantderiv</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a5961c4ac659e3bc6d8a68957b962cb3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndepADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a7e0be488f7a43326e364fe65d117fdf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IndepADvar</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a5d94e5f841937bac1d0468ff9eea5c38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ADVari &amp;</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a920c39705ab11e508344aff1dfa5fa57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ADVari *</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a93062d583244f234697fde6ce8c6c02a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Double</type>
      <name>val</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>ac2f6d6797c3acfc01cb242227d57108a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Double</type>
      <name>adj</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a3c72244a332d9fe1c58e13755457b303</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Double</type>
      <name>adj</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>ac10b3a9722687be52889a09e4d8f64b1</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Gradcomp</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a0cf89027b10de2c6f612de2d20b594f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>aval_reset</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>af4bd81b107dae7ecdb7607e8612340ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Weighted_Gradcomp</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a3fbf9839fce04bf3559a9d69b4ab632e</anchor>
      <arglist>(size_t n, ADVar **v, Double *w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Weighted_GradcompVec</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>af6345ef372c7feaf936976fcab703596</anchor>
      <arglist>(size_t n, size_t *np, ADVar ***v, Double **w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Outvar_Gradcomp</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>abeda7408158768e42023f3bc413fe289</anchor>
      <arglist>(ADVar &amp;v)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>AD_Const</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a050424727975718c4a0cdd64b275a58f</anchor>
      <arglist>(const IndepADvar &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ADvari&lt; Double &gt; *</type>
      <name>cv</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>ac6cebd3abe521576e915a3bb3eca3a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>IndepADvar &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a245ac11a80001f5a9c23489eef60661d</anchor>
      <arglist>(IndepADvar &amp;x)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvar&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a8ca24241911fb1b9c51128cf2a710b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADcontext&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>aa9651e5b79313773bc28734706ce5b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvar1&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a9150e5801a55db99ae0705ead04a1b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ADvarn&lt; Double &gt;</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a78813af4e5afb13acbcb1dee5c24cd0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend IndepADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a35da6a300faa78224748fa401069a674</anchor>
      <arglist>(IndepADvar *, const ADVari &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>AD_Const1</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a895cde64f0ac05bc53d3ba6075532f2c</anchor>
      <arglist>(Double *, const IndepADvar &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADVari &amp;</type>
      <name>ADf1</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>aa5104bcb49424e72519780bcca15d4e0</anchor>
      <arglist>(Double, Double, const IndepADvar &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADVari &amp;</type>
      <name>ADf2</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a9d2902f5f41df795396c30939696d48f</anchor>
      <arglist>(Double, Double, Double, const IndepADvar &amp;, const IndepADvar &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADVari &amp;</type>
      <name>ADf2</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>a3a43781a937df96826f33054e92cd76b</anchor>
      <arglist>(Double, Double, Double, const ADVari &amp;, const IndepADvar &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend ADVari &amp;</type>
      <name>ADf2</name>
      <anchorfile>classSacado_1_1RadVec_1_1IndepADvar.html</anchorfile>
      <anchor>aec42d94563754a427a85e3d2777c00bc</anchor>
      <arglist>(Double, Double, Double, const IndepADvar &amp;, const ADVari &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::IndepADvar_base</name>
    <filename>classSacado_1_1Rad_1_1IndepADvar__base.html</filename>
    <templarg></templarg>
    <base>Sacado::Rad::IndepADvar_base0</base>
    <member kind="function">
      <type></type>
      <name>IndepADvar_base</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar__base.html</anchorfile>
      <anchor>a7f6a2195c8492ebf5864c892f36afcf3</anchor>
      <arglist>(Allow_noderiv(int wd))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IndepADvar_base</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar__base.html</anchorfile>
      <anchor>ae4c0ce0aaaf5e4aa14e521bdf7bebe4e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::IndepADvar_base0</name>
    <filename>classSacado_1_1Rad_1_1IndepADvar__base0.html</filename>
    <templarg>Double</templarg>
    <member kind="function">
      <type></type>
      <name>IndepADvar_base0</name>
      <anchorfile>classSacado_1_1Rad_1_1IndepADvar__base0.html</anchorfile>
      <anchor>aa17a73b4f02315189549fb21d751497f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::integral_c</name>
    <filename>structSacado_1_1mpl_1_1integral__c.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>integral_c&lt; T, N &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__c.html</anchorfile>
      <anchor>a08bf3d6b15a425ce7b26e9c44041d1fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__c.html</anchorfile>
      <anchor>ac8e379ad093e56cb8cf72389283f57cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integral_c&lt; T, N+1 &gt;</type>
      <name>next</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__c.html</anchorfile>
      <anchor>a6c89b8c3e06a552be5bc22fbe744f0f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integral_c&lt; T, N-1 &gt;</type>
      <name>prior</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__c.html</anchorfile>
      <anchor>ac1075a5c8865d43545bd037d4f18813e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__c.html</anchorfile>
      <anchor>a9e7521afe79d9172d60942f8c9aa99e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const T</type>
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__c.html</anchorfile>
      <anchor>a257e0ca8ad617695ddd286f6a6ecbd12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::integral_nonzero</name>
    <filename>structSacado_1_1integral__nonzero.html</filename>
    <templarg></templarg>
    <templarg>v</templarg>
    <templarg>NonZero</templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>structSacado_1_1integral__nonzero.html</anchorfile>
      <anchor>a7f5ad5e46122046d6c0d26d616cd2313a60f7ef7409eee6738be0c25cad061b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1integral__nonzero.html</anchorfile>
      <anchor>a3ba1e6175cfdd7773138fbb5940e9989</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integral_nonzero&lt; T, v &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1integral__nonzero.html</anchorfile>
      <anchor>ae0b40ccf176740916f7fbac774f67481</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>structSacado_1_1integral__nonzero.html</anchorfile>
      <anchor>a7f5ad5e46122046d6c0d26d616cd2313a60f7ef7409eee6738be0c25cad061b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>integral_nonzero</name>
      <anchorfile>structSacado_1_1integral__nonzero.html</anchorfile>
      <anchor>ad8ad65175b5aedc110042281c01940bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>integral_nonzero</name>
      <anchorfile>structSacado_1_1integral__nonzero.html</anchorfile>
      <anchor>a2fd6da126a5bffc3d68c7ea44683b120</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>integral_nonzero</name>
      <anchorfile>structSacado_1_1integral__nonzero.html</anchorfile>
      <anchor>aaf1744c8f3e754351516de280737b9c7</anchor>
      <arglist>(const integral_nonzero &amp;)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION integral_nonzero &amp;</type>
      <name>operator=</name>
      <anchorfile>structSacado_1_1integral__nonzero.html</anchorfile>
      <anchor>ac1e1e8101af06128937d237f10bf1588</anchor>
      <arglist>(const integral_nonzero &amp;)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION integral_nonzero &amp;</type>
      <name>operator=</name>
      <anchorfile>structSacado_1_1integral__nonzero.html</anchorfile>
      <anchor>a1c20f08cceccab9eab3ac74298637f00</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::integral_nonzero&lt; T, zero, false &gt;</name>
    <filename>structSacado_1_1integral__nonzero_3_01T_00_01zero_00_01false_01_4.html</filename>
    <templarg></templarg>
    <templarg>zero</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1integral__nonzero_3_01T_00_01zero_00_01false_01_4.html</anchorfile>
      <anchor>adea498e292658105ef44525b6231449a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integral_nonzero&lt; T, 0 &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1integral__nonzero_3_01T_00_01zero_00_01false_01_4.html</anchorfile>
      <anchor>a3b9b7397e1cf62db6b68daac3904cb0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>integral_nonzero</name>
      <anchorfile>structSacado_1_1integral__nonzero_3_01T_00_01zero_00_01false_01_4.html</anchorfile>
      <anchor>a68499aebaf62270857d5148ce24139da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>integral_nonzero</name>
      <anchorfile>structSacado_1_1integral__nonzero_3_01T_00_01zero_00_01false_01_4.html</anchorfile>
      <anchor>aa0c17bc392aa4c7fc9c17f9ce73ee397</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>integral_nonzero</name>
      <anchorfile>structSacado_1_1integral__nonzero_3_01T_00_01zero_00_01false_01_4.html</anchorfile>
      <anchor>acc8b9d5bcdaeb07723691774ee404fc5</anchor>
      <arglist>(const integral_nonzero &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION integral_nonzero &amp;</type>
      <name>operator=</name>
      <anchorfile>structSacado_1_1integral__nonzero_3_01T_00_01zero_00_01false_01_4.html</anchorfile>
      <anchor>a4360f14821faeebb80cde02d930dbc68</anchor>
      <arglist>(const integral_nonzero &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION integral_nonzero &amp;</type>
      <name>operator=</name>
      <anchorfile>structSacado_1_1integral__nonzero_3_01T_00_01zero_00_01false_01_4.html</anchorfile>
      <anchor>ac022b35228f59172fbd478ede22870e8</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>value</name>
      <anchorfile>structSacado_1_1integral__nonzero_3_01T_00_01zero_00_01false_01_4.html</anchorfile>
      <anchor>a9e409e54fdc24f748d1dc9afc4c184da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::integral_nonzero_constant</name>
    <filename>structSacado_1_1mpl_1_1integral__nonzero__constant.html</filename>
    <templarg>T</templarg>
    <templarg>v</templarg>
    <templarg>NonZero</templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__nonzero__constant.html</anchorfile>
      <anchor>af77379e56c5944ff750ed7edd9aea91fa528a08a019d07ed0dd855a2b3d683e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__nonzero__constant.html</anchorfile>
      <anchor>a1a144f0af0535164fdc4d9a2b2a43223</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integral_nonzero_constant&lt; T, v &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__nonzero__constant.html</anchorfile>
      <anchor>a39bd4cc7d5fbc671fbcbed9c9e4b0252</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__nonzero__constant.html</anchorfile>
      <anchor>af77379e56c5944ff750ed7edd9aea91fa528a08a019d07ed0dd855a2b3d683e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>integral_nonzero_constant</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__nonzero__constant.html</anchorfile>
      <anchor>adccef91eee6926ff297ea43a7fa111bc</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>integral_nonzero_constant&lt; int, static_length &gt;</name>
    <filename>structSacado_1_1mpl_1_1integral__nonzero__constant.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__nonzero__constant.html</anchorfile>
      <anchor>a1a144f0af0535164fdc4d9a2b2a43223</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integral_nonzero_constant&lt; int, v &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__nonzero__constant.html</anchorfile>
      <anchor>a39bd4cc7d5fbc671fbcbed9c9e4b0252</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__nonzero__constant.html</anchorfile>
      <anchor>af77379e56c5944ff750ed7edd9aea91fa528a08a019d07ed0dd855a2b3d683e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>integral_nonzero_constant</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__nonzero__constant.html</anchorfile>
      <anchor>adccef91eee6926ff297ea43a7fa111bc</anchor>
      <arglist>(const int &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>integral_nonzero_constant&lt; int, static_stride &gt;</name>
    <filename>structSacado_1_1mpl_1_1integral__nonzero__constant.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__nonzero__constant.html</anchorfile>
      <anchor>a1a144f0af0535164fdc4d9a2b2a43223</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integral_nonzero_constant&lt; int, v &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__nonzero__constant.html</anchorfile>
      <anchor>a39bd4cc7d5fbc671fbcbed9c9e4b0252</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__nonzero__constant.html</anchorfile>
      <anchor>af77379e56c5944ff750ed7edd9aea91fa528a08a019d07ed0dd855a2b3d683e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>integral_nonzero_constant</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__nonzero__constant.html</anchorfile>
      <anchor>adccef91eee6926ff297ea43a7fa111bc</anchor>
      <arglist>(const int &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::integral_nonzero_constant&lt; T, zero, false &gt;</name>
    <filename>structSacado_1_1mpl_1_1integral__nonzero__constant_3_01T_00_01zero_00_01false_01_4.html</filename>
    <templarg></templarg>
    <templarg>zero</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__nonzero__constant_3_01T_00_01zero_00_01false_01_4.html</anchorfile>
      <anchor>a3be90f877682006fcf35eb33581fee4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>integral_nonzero_constant&lt; T, 0 &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__nonzero__constant_3_01T_00_01zero_00_01false_01_4.html</anchorfile>
      <anchor>ab615a8ac3ba6758ad28f044b4527cfe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>integral_nonzero_constant</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__nonzero__constant_3_01T_00_01zero_00_01false_01_4.html</anchorfile>
      <anchor>a90020574c7eef7dabc81c2745d65c808</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="variable">
      <type>const T</type>
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1integral__nonzero__constant_3_01T_00_01zero_00_01false_01_4.html</anchorfile>
      <anchor>a71b3b7ba95332d31e8be618272f6c210</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_convertible</name>
    <filename>structSacado_1_1mpl_1_1is__convertible.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1is__convertible.html</anchorfile>
      <anchor>a612dea3b3a39b18eec5dba50427d857c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_placeholder</name>
    <filename>structSacado_1_1mpl_1_1is__placeholder.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1is__placeholder.html</anchorfile>
      <anchor>a10d2e3df27ccfe2ee67ee2cf9140675a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_placeholder&lt; arg&lt; N &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1is__placeholder_3_01arg_3_01N_01_4_01_4.html</filename>
    <templarg>N</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1is__placeholder_3_01arg_3_01N_01_4_01_4.html</anchorfile>
      <anchor>ac0a02e27a2fdc5432d2d82f5d726f6ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_placeholder&lt; F&lt; T1 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1is__placeholder_3_01F_3_01T1_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1is__placeholder_3_01F_3_01T1_01_4_01_4.html</anchorfile>
      <anchor>a21a362ec1c7c7b65262cea429effaf9e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_placeholder&lt; F&lt; T1, T2 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1is__placeholder_3_01F_3_01T1_00_01T2_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1is__placeholder_3_01F_3_01T1_00_01T2_01_4_01_4.html</anchorfile>
      <anchor>a1a5ace55c9d2d39107abd8a83a279720</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_placeholder&lt; F&lt; T1, T2, T3 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1is__placeholder_3_01F_3_01T1_00_01T2_00_01T3_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1is__placeholder_3_01F_3_01T1_00_01T2_00_01T3_01_4_01_4.html</anchorfile>
      <anchor>aa00c93509b695dc7c9e2a2f2909f7b3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_placeholder&lt; F&lt; T1, T2, T3, T4 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1is__placeholder_3_01F_3_01T1_00_01T2_00_01T3_00_01T4_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1is__placeholder_3_01F_3_01T1_00_01T2_00_01T3_00_01T4_01_4_01_4.html</anchorfile>
      <anchor>a319b0cdfcf80d7264d8d84a1f28a40d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_placeholder&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1is__placeholder_3_01F_3_01T1_00_01T2_00_01T3_00_01T4_00_01T5_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1is__placeholder_3_01F_3_01T1_00_01T2_00_01T3_00_01T4_00_01T5_01_4_01_4.html</anchorfile>
      <anchor>a943ea037b3779b0e51e461de59dbbb3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_same</name>
    <filename>structSacado_1_1mpl_1_1is__same.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1is__same.html</anchorfile>
      <anchor>a32cd796cdab7a9902d17875c60361c7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::is_same&lt; Kokkos::LayoutContiguous&lt; Layout &gt;, Layout &gt;</name>
    <filename>structstd_1_1is__same_3_01Kokkos_1_1LayoutContiguous_3_01Layout_01_4_00_01Layout_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structstd_1_1is__same_3_01Kokkos_1_1LayoutContiguous_3_01Layout_01_4_00_01Layout_01_4.html</anchorfile>
      <anchor>a8188339f4102609123381d0aaba7a385</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::is_same&lt; Layout, Kokkos::LayoutContiguous&lt; Layout &gt; &gt;</name>
    <filename>structstd_1_1is__same_3_01Layout_00_01Kokkos_1_1LayoutContiguous_3_01Layout_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structstd_1_1is__same_3_01Layout_00_01Kokkos_1_1LayoutContiguous_3_01Layout_01_4_01_4.html</anchorfile>
      <anchor>adc634fd8b5247084b0157fbbd52582f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::is_same&lt; T, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1is__same_3_01T_00_01T_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1is__same_3_01T_00_01T_01_4.html</anchorfile>
      <anchor>afe1f1bbb0fd448f86fac93bfa191dad9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType</name>
    <filename>structSacado_1_1IsADType.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType.html</anchorfile>
      <anchor>a8e2f7b4f2575bb223e247ed693a451bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a3ad62e87898629b3ad15fdb6cbbc9aaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; CacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ab840c15b433d27db30e9fce98def0c19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aac7b3cd8fe569c7293c48d2ecb272dba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aadf0704febaa757db8f5574496d8cb1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a961715293699e6b01b82a1c9c949e61c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a80f3aa37cceb907ca90382d391311780</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a5e8343d47a5aa79dac6cdf40a54e672a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a1a918e3f3340624de76a3d05b5cddc8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>afbf6d82ab82aa7f05348228ca75c9367</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>abf45549dae40529bf32482b4772f228d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>af3958eba365d22c5651022d066edfd43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a063d862d759ced495a177c31dd738b56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ad4484a4f2e43f3d407343ae136a5477c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a6021ac69de37341e9a08df6d2b176c67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>abcbc2010c84c308e4ac1329e2791bc6c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a1cca674436a13470b26c56f27f15f4ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a0c831dca04e056186f78603538a2a520</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>af45773b1653855ac34881265f73bd7a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Fad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a212634abdd4211148fff7d64a77bd521</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a877b0d497a1ab636a8e1f4fa2645bf2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ab18369fa829be709b37515ee8d773422</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af889689054491857dc81e3ec8d02a44b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>adfd5d8284182cbd747b2bcf0f8eb80ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</anchorfile>
      <anchor>a5a510c9c1ca169972016a96faee2f56f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; LFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a246fea4930cab563b16d0469e59b092c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a0936cf1e2f99da836ab0720a975a5224</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Rad2::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aedd58a7d7eec98b1369962fc7784cf06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Rad2::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Rad2_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01Rad2_1_1ADvari_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a149d6dab2c0af8bbad20ce558d30a0b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Rad::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a9dd9fae898ef9c988148ae0e32d7130f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Rad::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Rad_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01Rad_1_1ADvari_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aa36e559685e574bf6f01b1e410b92b47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; RadVec::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a9e9121ec72eb1ab0cdefc7f9231130e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; RadVec::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01RadVec_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01RadVec_1_1ADvari_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a8e70b0c4f8e9ada88319f9f2f352caf7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Tay::CacheTaylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>adf66a0bd65a4f92d9a66e2e3d7516d35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsADType&lt; Tay::Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsADType_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsADType_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a5b6e2e06eec8a47b939e1708e072410e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual</name>
    <filename>structSacado_1_1IsEqual.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual.html</anchorfile>
      <anchor>a68319b2d8c3cbac99907672351acabcd</anchor>
      <arglist>(const T &amp;x, const T &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a21c1dd289cb04db06e54877966ab6236</anchor>
      <arglist>(const CacheFad::DFad&lt; ValueT &gt; &amp;x, const CacheFad::DFad&lt; ValueT &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4720cd5a5a8133ced68b0e6adbe0bfe5</anchor>
      <arglist>(const CacheFad::SFad&lt; ValueT, Num &gt; &amp;x, const CacheFad::SFad&lt; ValueT, Num &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4de06f2beec5e2580442546eae67460d</anchor>
      <arglist>(const CacheFad::SLFad&lt; ValueT, Num &gt; &amp;x, const CacheFad::SLFad&lt; ValueT, Num &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>aea26f200b88f4b7ae5e51d3cfd2ad8cb</anchor>
      <arglist>(const CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &amp;x, const CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>acdc726bb60937532e64f7773dceb86c5</anchor>
      <arglist>(const ELRCacheFad::DFad&lt; ValueT &gt; &amp;x, const ELRCacheFad::DFad&lt; ValueT &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af1f9d77c244b7f998a04bbc7237bea80</anchor>
      <arglist>(const ELRCacheFad::SFad&lt; ValueT, Num &gt; &amp;x, const ELRCacheFad::SFad&lt; ValueT, Num &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac75358afd23863ad00165d7e42002798</anchor>
      <arglist>(const ELRCacheFad::SLFad&lt; ValueT, Num &gt; &amp;x, const ELRCacheFad::SLFad&lt; ValueT, Num &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a3c6a7b8960d9d56234817c3fb7f8589d</anchor>
      <arglist>(const ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &amp;x, const ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>acd0ffaa6293dc9a18dd8a525b67ceee8</anchor>
      <arglist>(const ELRFad::DFad&lt; ValueT &gt; &amp;x, const ELRFad::DFad&lt; ValueT &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a763577d019ed032dc58dd794f61b71d0</anchor>
      <arglist>(const ELRFad::SFad&lt; ValueT, Num &gt; &amp;x, const ELRFad::SFad&lt; ValueT, Num &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac98fa135c8ee3dbd3e95b2c567c24d0e</anchor>
      <arglist>(const ELRFad::SLFad&lt; ValueT, Num &gt; &amp;x, const ELRFad::SLFad&lt; ValueT, Num &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a89a3a9908684e32e6d044f10b2b8eeee</anchor>
      <arglist>(const ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &amp;x, const ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a7d1000904b25a40f2b2361a23fadd896</anchor>
      <arglist>(const Fad::DFad&lt; ValueT &gt; &amp;x, const Fad::DFad&lt; ValueT &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a79afe8dbf3f39e4144ce836ce9dc792a</anchor>
      <arglist>(const Fad::DMFad&lt; ValueT &gt; &amp;x, const Fad::DMFad&lt; ValueT &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a3937da63af8b7639fdc5e707d099b15a</anchor>
      <arglist>(const Fad::DVFad&lt; ValueT &gt; &amp;x, const Fad::DVFad&lt; ValueT &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a08dde9dcdc80dbea6d1443e841c98175</anchor>
      <arglist>(const Fad::SFad&lt; ValueT, Num &gt; &amp;x, const Fad::SFad&lt; ValueT, Num &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a81c7e97f3a5bb7207098f9deb999bbad</anchor>
      <arglist>(const Fad::SimpleFad&lt; ValueT &gt; &amp;x, const Fad::SimpleFad&lt; ValueT &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a31dcc730e25ce18b08c627816bc7a2f5</anchor>
      <arglist>(const Fad::SLFad&lt; ValueT, Num &gt; &amp;x, const Fad::SLFad&lt; ValueT, Num &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a41cc143356163ad841fb3e930751e91e</anchor>
      <arglist>(const Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &amp;x, const Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>ae46b84a009066dac8a6ef172cd732b19</anchor>
      <arglist>(const LFad::LogicalSparse&lt; ValT, LogT &gt; &amp;x, const LFad::LogicalSparse&lt; ValT, LogT &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; Tay::CacheTaylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a8fc2f1b5da24ae53a09b2c124f4d0466</anchor>
      <arglist>(const Tay::CacheTaylor&lt; T &gt; &amp;x, const Tay::CacheTaylor&lt; T &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsEqual&lt; Tay::Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsEqual_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1IsEqual_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>adbd4e510de9dc131bf651ea382b1ff34</anchor>
      <arglist>(const Tay::Taylor&lt; T &gt; &amp;x, const Tay::Taylor&lt; T &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr</name>
    <filename>structSacado_1_1IsExpr.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsExpr.html</anchorfile>
      <anchor>a2b0725deb1465457033583e4c6c5e3f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; CacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsExpr_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aa2122efa9ab5341ccb02a13118e778c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsExpr_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a40f5b7061774017e8ee86e06ea316541</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; ELRFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsExpr_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ad46c7854954113e37c921a1e13618b05</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; Fad::DMFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01Fad_1_1DMFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsExpr_3_01Fad_1_1DMFad_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ae9e7fa2f6afb2d29505e9995946cb318</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; Fad::DVFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01Fad_1_1DVFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsExpr_3_01Fad_1_1DVFad_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a6334a1c3c3cd137a77c31a286079396c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; Fad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsExpr_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a595d612fbd1e2810c548ef61edfb09d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; FAD_NS::DFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01FAD__NS_1_1DFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsExpr_3_01FAD__NS_1_1DFad_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a5b85647a44a7c7533102fef239a0fa9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; FAD_NS::SFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01FAD__NS_1_1SFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsExpr_3_01FAD__NS_1_1SFad_3_01T_00_01N_01_4_01_4.html</anchorfile>
      <anchor>a99d748c77d5a0902429bad40c7383627</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; FAD_NS::SLFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01FAD__NS_1_1SLFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsExpr_3_01FAD__NS_1_1SLFad_3_01T_00_01N_01_4_01_4.html</anchorfile>
      <anchor>aa84c85f6cd86bf430f829938c1d237cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; FAD_NS::ViewFad&lt; T, l, s, U &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01FAD__NS_1_1ViewFad_3_01T_00_01l_00_01s_00_01U_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>l</templarg>
    <templarg>s</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsExpr_3_01FAD__NS_1_1ViewFad_3_01T_00_01l_00_01s_00_01U_01_4_01_4.html</anchorfile>
      <anchor>add2aea60a9d85cb96ca0087f111c2257</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; LFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsExpr_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a272a6e51265c70dae19b2918c36c0759</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; LFad::LogicalSparse&lt; T, L &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01LFad_1_1LogicalSparse_3_01T_00_01L_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsExpr_3_01LFad_1_1LogicalSparse_3_01T_00_01L_01_4_01_4.html</anchorfile>
      <anchor>a7b073a4a6a08037ed21cb6635f1c7f3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsExpr&lt; Tay::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsExpr_3_01Tay_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsExpr_3_01Tay_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ac61bcd19405963442e591029afa9a462</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsFad</name>
    <filename>structSacado_1_1IsFad.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsFad.html</anchorfile>
      <anchor>af291c8314f5729b5b747d63f9e30ae96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsFad&lt; Fad::DMFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsFad_3_01Fad_1_1DMFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsFad_3_01Fad_1_1DMFad_3_01T_01_4_01_4.html</anchorfile>
      <anchor>af290d90251a4ffe7e934418cf1dc361d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsFad&lt; Fad::DVFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsFad_3_01Fad_1_1DVFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsFad_3_01Fad_1_1DVFad_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ab917b85a9d115d3a734db6abe3b72fc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsFad&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsFad_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsFad_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>afac993806619ccfd1fd51c54897d9013</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsFad&lt; FAD_NS::DFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsFad_3_01FAD__NS_1_1DFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsFad_3_01FAD__NS_1_1DFad_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ae94d1785fc5913b3dd3ca403c0dad637</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsFad&lt; FAD_NS::SFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1IsFad_3_01FAD__NS_1_1SFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsFad_3_01FAD__NS_1_1SFad_3_01T_00_01N_01_4_01_4.html</anchorfile>
      <anchor>a72a3f2d8a9a2e1941fddea3ee8428ed5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsFad&lt; FAD_NS::SLFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1IsFad_3_01FAD__NS_1_1SLFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsFad_3_01FAD__NS_1_1SLFad_3_01T_00_01N_01_4_01_4.html</anchorfile>
      <anchor>a00d0010b2b9828cb330d06f591eab701</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsFad&lt; FAD_NS::ViewFad&lt; T, l, s, U &gt; &gt;</name>
    <filename>structSacado_1_1IsFad_3_01FAD__NS_1_1ViewFad_3_01T_00_01l_00_01s_00_01U_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>l</templarg>
    <templarg>s</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsFad_3_01FAD__NS_1_1ViewFad_3_01T_00_01l_00_01s_00_01U_01_4_01_4.html</anchorfile>
      <anchor>ae4b8ad9fccb057f021a9d57a344e6e4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::IsFadExpr</name>
    <filename>structSacado_1_1Fad_1_1IsFadExpr.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1Fad_1_1IsFadExpr.html</anchorfile>
      <anchor>ab605af4b8e1dd3ca1b4370e2bb57e118</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::LFad::IsFadExpr</name>
    <filename>structSacado_1_1LFad_1_1IsFadExpr.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1LFad_1_1IsFadExpr.html</anchorfile>
      <anchor>a0611b9eb30274ba10acf75152f985fed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::IsFadExpr</name>
    <filename>structSacado_1_1ELRCacheFad_1_1IsFadExpr.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1ELRCacheFad_1_1IsFadExpr.html</anchorfile>
      <anchor>af67e5a9477d9e14614bd790282835e62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::CacheFad::IsFadExpr</name>
    <filename>structSacado_1_1CacheFad_1_1IsFadExpr.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1CacheFad_1_1IsFadExpr.html</anchorfile>
      <anchor>a6c7cb89a97a61dcb622f279241e48f19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::IsFadExpr</name>
    <filename>structSacado_1_1ELRFad_1_1IsFadExpr.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1ELRFad_1_1IsFadExpr.html</anchorfile>
      <anchor>ac48cbf66c1539a7122f28adc6d33c673</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::IsFadExpr&lt; DFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1IsFadExpr_3_01DFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1FAD__NS_1_1IsFadExpr_3_01DFad_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a740f866b702370ce18ad214c8fb20d41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::IsFadExpr&lt; DMFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1IsFadExpr_3_01DMFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1Fad_1_1IsFadExpr_3_01DMFad_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a4e40c1731a2f670567814bbf1fe9b990</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::IsFadExpr&lt; DVFad&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1IsFadExpr_3_01DVFad_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1Fad_1_1IsFadExpr_3_01DVFad_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a3b20bfc4c644a39ce7357d2f0222b5de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::CacheFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1CacheFad_1_1IsFadExpr_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1CacheFad_1_1IsFadExpr_3_01Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a6dab9a3f9385988b74c242b914548cf4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Fad_1_1IsFadExpr_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1Fad_1_1IsFadExpr_3_01Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a4395afba957b019d3dcf3213f318346f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ELRCacheFad_1_1IsFadExpr_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1ELRCacheFad_1_1IsFadExpr_3_01Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a563d8ddcdd0ba8f72600660d6ee71175</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::LFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1LFad_1_1IsFadExpr_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1LFad_1_1IsFadExpr_3_01Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a5fef609d033d776511c9908fcdbf733a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ELRFad_1_1IsFadExpr_3_01Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1ELRFad_1_1IsFadExpr_3_01Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a019e61a40bfb76a7c74c91856ea6ec01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::IsFadExpr&lt; SFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1IsFadExpr_3_01SFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1FAD__NS_1_1IsFadExpr_3_01SFad_3_01T_00_01N_01_4_01_4.html</anchorfile>
      <anchor>a8e96aefc089054160ab1166015f0fb68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::IsFadExpr&lt; SLFad&lt; T, N &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1IsFadExpr_3_01SLFad_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1FAD__NS_1_1IsFadExpr_3_01SLFad_3_01T_00_01N_01_4_01_4.html</anchorfile>
      <anchor>a61584d18b7092be4719d9916372b121c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::FAD_NS::IsFadExpr&lt; ViewFad&lt; T, l, s, U &gt; &gt;</name>
    <filename>structSacado_1_1FAD__NS_1_1IsFadExpr_3_01ViewFad_3_01T_00_01l_00_01s_00_01U_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>l</templarg>
    <templarg>s</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1FAD__NS_1_1IsFadExpr_3_01ViewFad_3_01T_00_01l_00_01s_00_01U_01_4_01_4.html</anchorfile>
      <anchor>a5f83b64a95b1f861fdb6ad4e1d4c4281</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType</name>
    <filename>structSacado_1_1IsScalarType.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType.html</anchorfile>
      <anchor>aba4c5383cc1bd5c26d173b726088ad03</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a55b1fc985bda09b12b47b884074c47f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; CacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ac2f2362cb25309e38e6904a61870003b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af74c8c6ba1215b3d9f381c1c4ddd1708</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a568b45ffa82970a2da3a37b945d0001d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a629603d9806fe29696795fe3e2f80c1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ad6ab589460bdd2fcbe602bdaec6e745a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a8b56f9d9bbe25780940aa601dbe628b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab623e95adec44da1b1100d645c12870b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a43ef4abba8c9170e2df594060ba40b57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a6c20f423aad54a668bf0dc9d703fc38a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a9b8d1f2bd56ef6d8ffce89188cb3a062</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ab37192d4c5ddfdfe4cebf502a0c6c53b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a54b26a7e4aeefb3ea4b5228fbb21dcfe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>afd328683539054e96d44d1060ded75cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a57f0e91d115576f2f3c73d10e0790f3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>afe7512bde5b9507004e75d6145100eb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a74048317df330af129014ba3d266b691</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>aa26b1f58cf18677787c0506ed394fe55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Fad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a7bf414e518ad55428f16c68902deef0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab28f6b644e16ea12122cc4731c9c879d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ad10c8e852486532f438e239ad5e70d5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a0921dffe1ea9a7ec25ccb93be5369640</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a86c8f7690e0159e60df82dbb836ff3a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</anchorfile>
      <anchor>aa664d59dff148c0e0176ea7c59fed53c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; LFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a27c067055bd0167b10cd4e6c7897ac46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a777a35b440b614aa7ccae0584a20f7c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Rad2::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a4922c5f21e4d935b55e4736d36015dc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Rad2::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Rad2_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01Rad2_1_1ADvari_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ae18f7a4461573476d4047f5984ef797d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Rad::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a982b5824a3e68eb3a15011e1b918c1ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Rad::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Rad_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01Rad_1_1ADvari_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a47c5b106b10384487ad632d10594b74c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; RadVec::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>acdcef611138ce398f10f2c44236bac69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; RadVec::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01RadVec_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01RadVec_1_1ADvari_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ad4688d4bd5fd11b3b2476ce79db50571</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Tay::CacheTaylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aafeac7e528566742f6700e276a741070</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsScalarType&lt; Tay::Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsScalarType_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsScalarType_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a18f3ca91793888eba7f37af3b8e3eae4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized</name>
    <filename>structSacado_1_1IsStaticallySized.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized.html</anchorfile>
      <anchor>a36ba99ee7c0792a301d1d50896953e92</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a8bf91487ec1c0cfd8bcba278104d8d1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>abbecfa713988a6ea945c157cdbce1185</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af2ed91cd3a0eac7cbb2a0a03b6fe58f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a125d8fe6909561bc942bf8c5268056be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01const_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a0d26ae1e3343cee7cc790873fdee30c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01const_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>abad67e3579f92868fc26a3c2c86a0122</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01const_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a9e3f66c910ee5b869b16051f4fc6b113</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01const_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a07bfa3c528d1c5bc6171a81599fde4fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01const_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab5a48aaf1e113c0670d55c40ae56180b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01const_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a3080f9190bbe2e7955a70e5caa030f3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01const_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ac4fcfd5e7d0860a6a7381cb2affe9399</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01const_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a1feb840dca8cfb62dda93d85a871f684</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01const_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aeaa852fc7738010552cf14a5f8d546c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01const_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ad349ead87cd14180cdb6e825e63130f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01const_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aec8cdcffc614a604ea0e5f84f4b7b14f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01const_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a275ca2dbd2f4e5598b011cecebfabc4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; const T &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01const_01T_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01const_01T_01_4.html</anchorfile>
      <anchor>a627575adcb68234c099043791ec59fd7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a59d81307c65f61e05196faec2baa7f53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a3cb78981c59463008200e5990f919fa4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab5e1cd1b0b0c356e979e4c0121e1916b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a0b6c72d08af3954a5e38c47994293fd8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ae67c7b3ad67d41f6f0956255ab04574f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a88a2b6d8342f7f43c805cb4aa4a7e1c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a59a52903a1b6e42b9fdd09451ff037b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a99ab0d2b8f627e45c88cefae0b603c09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ac065d12d334fb0645297f46f57c22a47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ad0c9e02ec6a88e54fc376f0170040cf4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ace8f8a3f78210092130afca693ab48f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a76286e47e6ff62b057c40c3a82fb5b9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>acf376586e18c4a923eed02e082e36a62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a548076a3b5161742d0e80c550557c25a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a4c6addd5804aacef48bc10b4219880c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</anchorfile>
      <anchor>ac72b6b289494d5baed45fe600fe6f25c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a28b4efb02750bec3a0b3aff92bca107f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; Tay::CacheTaylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ae22e871eb3cfd351465caa1fd37457f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsStaticallySized&lt; Tay::Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1IsStaticallySized_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsStaticallySized_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a9fcc4a8e4524bf57806379befec0a283</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsView</name>
    <filename>structSacado_1_1IsView.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsView.html</anchorfile>
      <anchor>ad1775dcb2759c64295ca47e2e9353316</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::IsView&lt; Sacado::FAD_NS::ViewFad&lt; T, l, s, U &gt; &gt;</name>
    <filename>structSacado_1_1IsView_3_01Sacado_1_1FAD__NS_1_1ViewFad_3_01T_00_01l_00_01s_00_01U_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>l</templarg>
    <templarg>s</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1IsView_3_01Sacado_1_1FAD__NS_1_1ViewFad_3_01T_00_01l_00_01s_00_01U_01_4_01_4.html</anchorfile>
      <anchor>a9d214d8b36a98f3477fd1f91d8bc07d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lambda</name>
    <filename>structSacado_1_1mpl_1_1lambda.html</filename>
    <templarg></templarg>
    <base>type_wrap&lt; F &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lambda&lt; F&lt; T1 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1lambda_3_01F_3_01T1_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <base>mpl_if&lt; is_placeholder&lt; F&lt; T1 &gt; &gt;, type_wrap&lt; bind1&lt; quote1&lt; F &gt;, lambda&lt; T1 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lambda&lt; F&lt; T1, T2 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1lambda_3_01F_3_01T1_00_01T2_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mpl_if&lt; is_placeholder&lt; F&lt; T1, T2 &gt; &gt;, type_wrap&lt; bind2&lt; quote2&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lambda&lt; F&lt; T1, T2, T3 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1lambda_3_01F_3_01T1_00_01T2_00_01T3_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mpl_if&lt; is_placeholder&lt; F&lt; T1, T2, T3 &gt; &gt;, type_wrap&lt; bind3&lt; quote3&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lambda&lt; F&lt; T1, T2, T3, T4 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1lambda_3_01F_3_01T1_00_01T2_00_01T3_00_01T4_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mpl_if&lt; is_placeholder&lt; F&lt; T1, T2, T3, T4 &gt; &gt;, type_wrap&lt; bind4&lt; quote4&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type, lambda&lt; T4 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3, T4 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lambda&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1lambda_3_01F_3_01T1_00_01T2_00_01T3_00_01T4_00_01T5_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mpl_if&lt; is_placeholder&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;, type_wrap&lt; bind5&lt; quote5&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type, lambda&lt; T4 &gt;::type, lambda&lt; T5 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>Teuchos::LAPACK&lt; OrdinalType, Sacado::Fad::DFad&lt; ScalarType &gt; &gt;</name>
    <filename>classTeuchos_1_1LAPACK_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DFad_3_01ScalarType_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Fad_LAPACK&lt; OrdinalType, Sacado::Fad::DFad&lt; ScalarType &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Kokkos::LayoutContiguous</name>
    <filename>structKokkos_1_1LayoutContiguous.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>LayoutContiguous</type>
      <name>array_layout</name>
      <anchorfile>structKokkos_1_1LayoutContiguous.html</anchorfile>
      <anchor>aed70d60e326512c7227ab11bd2ecedaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LayoutContiguous</name>
      <anchorfile>structKokkos_1_1LayoutContiguous.html</anchorfile>
      <anchor>ad901b8a2ee1248fd4b2b56df4d0656ec</anchor>
      <arglist>(LayoutContiguous const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LayoutContiguous</name>
      <anchorfile>structKokkos_1_1LayoutContiguous.html</anchorfile>
      <anchor>a0608fdda542a407ee2276616aaf4df33</anchor>
      <arglist>(LayoutContiguous &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>LayoutContiguous &amp;</type>
      <name>operator=</name>
      <anchorfile>structKokkos_1_1LayoutContiguous.html</anchorfile>
      <anchor>a609cfba0633746071ef4cfa6fa7f5e8a</anchor>
      <arglist>(LayoutContiguous const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>LayoutContiguous &amp;</type>
      <name>operator=</name>
      <anchorfile>structKokkos_1_1LayoutContiguous.html</anchorfile>
      <anchor>a3dbabaea35af981e83fb130dc1cccf2c</anchor>
      <arglist>(LayoutContiguous &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION constexpr</type>
      <name>LayoutContiguous</name>
      <anchorfile>structKokkos_1_1LayoutContiguous.html</anchorfile>
      <anchor>ad3871ebc7c568cef50d729f413533e24</anchor>
      <arglist>(size_t N0=0, size_t N1=0, size_t N2=0, size_t N3=0, size_t N4=0, size_t N5=0, size_t N6=0, size_t N7=0)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lazy_disable_if</name>
    <filename>structSacado_1_1mpl_1_1lazy__disable__if.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>lazy_disable_if_c&lt; Cond::value, T &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lazy_disable_if_c</name>
    <filename>structSacado_1_1mpl_1_1lazy__disable__if__c.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>lazy_disable_if_c&lt; Cond::value, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1lazy__disable__if__c.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lazy_disable_if_c&lt; false, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1lazy__disable__if__c_3_01false_00_01T_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1lazy__disable__if__c_3_01false_00_01T_01_4.html</anchorfile>
      <anchor>a5f79352d08cec1bd5bee6d9af01e5046</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lazy_enable_if</name>
    <filename>structSacado_1_1mpl_1_1lazy__enable__if.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>lazy_enable_if_c&lt; Cond::value, T &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lazy_enable_if_c</name>
    <filename>structSacado_1_1mpl_1_1lazy__enable__if__c.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>lazy_enable_if_c&lt; Cond::value, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1lazy__enable__if__c.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::lazy_enable_if_c&lt; true, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1lazy__enable__if__c_3_01true_00_01T_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1lazy__enable__if__c_3_01true_00_01T_01_4.html</anchorfile>
      <anchor>a5a73226efe3d3324871dfe35c23568bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::MemPool::Link</name>
    <filename>structSacado_1_1Fad_1_1MemPool_1_1Link.html</filename>
    <member kind="variable">
      <type>Link *</type>
      <name>next</name>
      <anchorfile>structSacado_1_1Fad_1_1MemPool_1_1Link.html</anchorfile>
      <anchor>a22304cc2ddabe675ee86f8bbe344aecf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;::LocalAccumOp</name>
    <filename>structSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</anchorfile>
      <anchor>abaf95d875b93e538de694e70bd8cb8b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>LocalAccumOp</name>
      <anchorfile>structSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</anchorfile>
      <anchor>a55acc724acccf68358bf56ebf5d1ccff</anchor>
      <arglist>(const ExprT &amp;x_)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>structSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</anchorfile>
      <anchor>a62a10f5ca2c4df17cdc57e1e94775f0b</anchor>
      <arglist>(ArgT arg) const </arglist>
    </member>
    <member kind="variable">
      <type>const ExprT &amp;</type>
      <name>x</name>
      <anchorfile>structSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</anchorfile>
      <anchor>a8ee9197c75dc2c7d512ee27a6897ff2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>t</name>
      <anchorfile>structSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</anchorfile>
      <anchor>a03fa29ac985622c74514838c3d0380e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>partials</name>
      <anchorfile>structSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</anchorfile>
      <anchor>a3413f16229bac96bf969d60189a11a1d</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i</name>
      <anchorfile>structSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</anchorfile>
      <anchor>addc2c763176eed2c8c7b0165568b3c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>N</name>
      <anchorfile>structSacado_1_1ELRCacheFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</anchorfile>
      <anchor>a6f9dec86afbd4e7ac1887da02efd69b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;::LocalAccumOp</name>
    <filename>structSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</anchorfile>
      <anchor>a49457380ba5afc67a282f5e6d401a105</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>LocalAccumOp</name>
      <anchorfile>structSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</anchorfile>
      <anchor>a507a88f899b9e57e80ee52a987adec00</anchor>
      <arglist>(const ExprT &amp;x_)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>getTangents</name>
      <anchorfile>structSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</anchorfile>
      <anchor>af3bcc4368bc9a02fa3ba357c115498b7</anchor>
      <arglist>(int i_)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>structSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</anchorfile>
      <anchor>aa766da4e9e3f2f46c275549982fe848d</anchor>
      <arglist>(ArgT arg) const </arglist>
    </member>
    <member kind="variable">
      <type>const ExprT &amp;</type>
      <name>x</name>
      <anchorfile>structSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</anchorfile>
      <anchor>a06ca30e27ccb942d404a34d8be2e5cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>t</name>
      <anchorfile>structSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</anchorfile>
      <anchor>a9d8b74a4e7745ee959089bd27774fa62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>partials</name>
      <anchorfile>structSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</anchorfile>
      <anchor>ab1696f32b2e5a68032a0edc2e793b359</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i</name>
      <anchorfile>structSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</anchorfile>
      <anchor>aaf56d197ba295b244bb9b0795e7b4790</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>N</name>
      <anchorfile>structSacado_1_1ELRFad_1_1Expr_3_01SFadExprTag_3_01T_00_01Num_01_4_01_4_1_1LocalAccumOp.html</anchorfile>
      <anchor>a02f047d7c113e62fa3f2a9eea58a573f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::Log10ExprType</name>
    <filename>structSacado_1_1Tay_1_1Log10ExprType.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>UnaryExpr&lt; Expr&lt; T &gt;, LogOp &gt;</type>
      <name>T1</name>
      <anchorfile>structSacado_1_1Tay_1_1Log10ExprType.html</anchorfile>
      <anchor>aeb2cc907a8a613088aef6dfacd4ab656</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstExpr&lt; typename Expr&lt; T &gt;::value_type &gt;</type>
      <name>ConstT</name>
      <anchorfile>structSacado_1_1Tay_1_1Log10ExprType.html</anchorfile>
      <anchor>a6486643781242dc49a370769209cddd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinaryExpr&lt; Expr&lt; T1 &gt;, ConstT, DivisionOp &gt;</type>
      <name>T2</name>
      <anchorfile>structSacado_1_1Tay_1_1Log10ExprType.html</anchorfile>
      <anchor>a7b377c7dd7553b00a038060bbaceaaa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Expr&lt; T2 &gt;</type>
      <name>expr_type</name>
      <anchorfile>structSacado_1_1Tay_1_1Log10ExprType.html</anchorfile>
      <anchor>ad1da81fae70d63b285866fc029338a05</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::LogicalSparse</name>
    <filename>classSacado_1_1LFad_1_1LogicalSparse.html</filename>
    <templarg>ValT</templarg>
    <templarg>LogT</templarg>
    <base>Sacado::LFad::Expr&lt; LogicalSparseImp&lt; ValT, LogT &gt; &gt;</base>
    <class kind="struct">Sacado::LFad::LogicalSparse::apply</class>
    <member kind="typedef">
      <type>LogicalSparseImp&lt; ValT, LogT &gt;</type>
      <name>ImplType</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>a6a28e36bd9bed8d08f0aba1300c466fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Expr&lt; ImplType &gt;</type>
      <name>ExprType</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>aa2196fe9cda8af293cb028e8ab9a224b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>a9d31117a0d766af60987c5919ce3ebd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>ac25bfdf2548b9e56629c8b93ed5580de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>ac7452755d6059a6eb79a8b0373256434</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>ae79ff3f57c49b69c831cc8bdd8d6ab51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>a0d1b50e5414945ef384a18af1094033b</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>ae1921d9416b925932a7b2561165a8f55</anchor>
      <arglist>(const int sz, const ValT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>a232588c952c734902e2f636448dd6348</anchor>
      <arglist>(const int sz, const int i, const ValT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>a54c343792574a53dec07e5ed6f1c42c4</anchor>
      <arglist>(const LogicalSparse &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>ac325c0a710ecff679713137db9c98688</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LogicalSparse&lt; double, bool &gt;</name>
    <filename>classSacado_1_1LFad_1_1LogicalSparse.html</filename>
    <base>Sacado::LFad::Expr</base>
    <member kind="typedef">
      <type>LogicalSparseImp&lt; double, bool &gt;</type>
      <name>ImplType</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>a6a28e36bd9bed8d08f0aba1300c466fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Expr&lt; ImplType &gt;</type>
      <name>ExprType</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>aa2196fe9cda8af293cb028e8ab9a224b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>a9d31117a0d766af60987c5919ce3ebd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>ac25bfdf2548b9e56629c8b93ed5580de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>ac7452755d6059a6eb79a8b0373256434</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>ae79ff3f57c49b69c831cc8bdd8d6ab51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>a0d1b50e5414945ef384a18af1094033b</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>ae1921d9416b925932a7b2561165a8f55</anchor>
      <arglist>(const int sz, const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>a232588c952c734902e2f636448dd6348</anchor>
      <arglist>(const int sz, const int i, const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>a54c343792574a53dec07e5ed6f1c42c4</anchor>
      <arglist>(const LogicalSparse &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparse</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparse.html</anchorfile>
      <anchor>ac325c0a710ecff679713137db9c98688</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::LFad::LogicalSparseImp</name>
    <filename>classSacado_1_1LFad_1_1LogicalSparseImp.html</filename>
    <templarg>ValT</templarg>
    <templarg>LogT</templarg>
    <base>DynamicStorage&lt; ValT, LogT &gt;</base>
    <member kind="typedef">
      <type>ValT</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a09a93c69885054371341d50ac784510a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a187d2491ba02fda00d8294f93b31477d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LogT</type>
      <name>logical_type</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a153d492b64f527e61107647d1407dc70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Fad::DynamicStorage&lt; ValT, LogT &gt;</type>
      <name>Storage</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a5661576e4f76d3aecc4d8c3279102e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>aa0e669a9b63eac8086d65a1677ed0a39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>acd667ffef82aad32b6502adfdaeb32a4</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a791d934f749e039b987e7bdcebc7ffe8</anchor>
      <arglist>(const int sz, const value_type &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a0a2af48d022edd12e0bdde86fdddc1bb</anchor>
      <arglist>(const int sz, const int i, const value_type &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>add3529c396695356a2f9ec58f433da84</anchor>
      <arglist>(const LogicalSparseImp &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a0bb967ea2a45671f374ec3deef36d764</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LogicalSparseImp</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a526da3b5503a37d71e930346d8287599</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diff</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a8fd781d402b6da964fa7316df1aefb40</anchor>
      <arglist>(const int ith, const int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SACADO_ENABLE_EXPR_FUNC</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a57e3aa262e77909a8c31770bd1de2969</anchor>
      <arglist>(bool) isEqualTo(const Expr&lt; S &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a41172a5fc38b4b2450a8967c915b9c03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPassive</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>ae93ee02d5fefd8b25087f7ec2185d130</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConstant</name>
      <anchorfile>classSacado_1_1LFad_1_1LogicalSparseImp.html</anchorfile>
      <anchor>a14d918cb2f6d208b476170cc79eda2d5</anchor>
      <arglist>(bool is_const)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LogicalSparseOpsUnitTest</name>
    <filename>classLogicalSparseOpsUnitTest.html</filename>
    <member kind="function">
      <type></type>
      <name>LogicalSparseOpsUnitTest</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a73a61ab89385c6b08808c697dcc16c85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogicalSparseOpsUnitTest</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a0b44ed60ca258f7161176e4afc5ea847</anchor>
      <arglist>(int numComponents, double absolute_tolerance, double relative_tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUp</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a27c64d9de3a59a390c947373ddd041d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tearDown</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a07461d29ac2573f0727e99006e00078d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareFads</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a3e3897282d95dd6868451f527beb8e29</anchor>
      <arglist>(const DFadType &amp;x_dfad, const LSType &amp;x_ls)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareDoubles</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>aab0d31e1039634ab190e7ab4a7727708</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareBools</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a08adb9fca4b90e11885aaf6311e9b453</anchor>
      <arglist>(bool a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareDx</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>ae1a2a051e5a3d3fd240ece869726ff85</anchor>
      <arglist>(double a, bool b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>addef6a195fa4a5f344dc6b48d6f3505b</anchor>
      <arglist>(testAddition,+)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>aec7397d0fd1d824aacc6e3f5d14191f6</anchor>
      <arglist>(testSubtraction,-)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a5e76517c27b44ee467a3e05a96a50374</anchor>
      <arglist>(testMultiplication,*)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>ad0e533b1a94bf8cebce5251ac42a279a</anchor>
      <arglist>(testDivision,/)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a295cef048fdfc8df80406b555d03b820</anchor>
      <arglist>(testEquals,==)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a062f7a913a7bf78f1efb134441fff622</anchor>
      <arglist>(testNotEquals,!=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>adb8d743ce5552d76ff2dddd96322ab10</anchor>
      <arglist>(testLessThanOrEquals,&lt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>aac9589baa8cf6e6c54526ad18f72e5d1</anchor>
      <arglist>(testGreaterThanOrEquals, &gt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>ac20df88d7eb1814855ebd5cb8c928663</anchor>
      <arglist>(testLessThan,&lt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>abee2835993ec60edc5732e7b0e4ebcde</anchor>
      <arglist>(testGreaterThan, &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_FUNC_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a6c24577320796abdad227b2f5a81f7d7</anchor>
      <arglist>(testPow, pow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_OP_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>ac0ccaadc6936d022403f90deb5483dcb</anchor>
      <arglist>(testUnaryPlus,+)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_OP_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a64d73a57d0f2c5720eac99bb21f4eb79</anchor>
      <arglist>(testUnaryMinus,-)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>ae300f0a73728a7bf34b1d57a944ce14e</anchor>
      <arglist>(testExp, exp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a7c844abc6f5b202c967ad775781d0c90</anchor>
      <arglist>(testLog, log)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>aa71cf4b4c58fa766c4038270e7fc94c0</anchor>
      <arglist>(testLog10, log10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a09cfc44a3b70542ee52b9d20a1c63cde</anchor>
      <arglist>(testSqrt, sqrt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a868be95d0391c4d1ce5df09d5ed136c2</anchor>
      <arglist>(testCos, cos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a5e345bec25ab523f7020e8f218a8626b</anchor>
      <arglist>(testSin, sin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a84f34742fb99d1834a776212e2f91860</anchor>
      <arglist>(testTan, tan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a7185358a474a310abfb4eb871db962c7</anchor>
      <arglist>(testACos, acos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>acd0e970ca66e13356a11985d019182a6</anchor>
      <arglist>(testASin, asin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>aa26039fd5f886a403873fd42aaae38af</anchor>
      <arglist>(testATan, atan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a2ed09a05cc0eea10e7721ff5bda7e22f</anchor>
      <arglist>(testCosh, cosh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a181df4894a5444da267824676eb95a70</anchor>
      <arglist>(testSinh, sinh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>aa00e7b6f280957890b581941a55ec942</anchor>
      <arglist>(testTanh, tanh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a570ab33e49818a51f6611fa1eeba8897</anchor>
      <arglist>(testAbs, abs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a78e5f80fc4cb8b17ed282242fda481a0</anchor>
      <arglist>(testFAbs, fabs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a4e78c7bf6879998869ac55fa11e4fb20</anchor>
      <arglist>(testPlusEquals,+=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>aceec20edb220fe916bee1d2ccc1a7c24</anchor>
      <arglist>(testMinusEquals,-=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>ada0f4e3b1b905fc0a78eb3226b1ed746</anchor>
      <arglist>(testTimesEquals,*=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a0d1ec262e2f3d886bfbf89a3e05ff5c6</anchor>
      <arglist>(testDivideEquals,/=)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testMax</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a5270b448efc17eaedf43f039d49950bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testMin</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a821a7f80249bef13f0cb4ad267d7be13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScalarT</type>
      <name>composite1</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>aa5969876ddd95c6342c3b352ff9a77f1</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testComposite1</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>af77424fce0727ce5fbded73e151596e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testPlusLR</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a9574628f49ff21be4dbafb726aa2b2e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testMinusLR</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a20e4e274b2f1768befb97de8ec67579d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testTimesLR</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a1a8012faec32543c479a1019b1403af5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testDivideLR</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a14063402f6563685c3f73510cbcded48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DFadType</type>
      <name>a_dfad</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>ad08b26c335e5eeaf75e6cdbb8e60d04c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DFadType</type>
      <name>b_dfad</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>abaa0c3b7a4e3638c51f3a087e3c7839d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DFadType</type>
      <name>c_dfad</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a3f2cf4b99022388ed4e44121678fd250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LSType</type>
      <name>a_ls</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>ae41d8c7b41f12a7736998fbdf0b660ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LSType</type>
      <name>b_ls</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a5d111bceaa47b88456ab8cda06478ce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LSType</type>
      <name>c_ls</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>ad224cd5cf0ca7089ba4857329007ca5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Sacado::Random&lt; double &gt;</type>
      <name>urand</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a69d98c20f90f967f8be27e2be5828a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>n</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>ac48157bf3437d6cb57a828585543f632</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tol_a</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a62aec012872aab835969dd31122d93aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tol_r</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a8acae21b7e83b7e41f9ad2bf5200b19d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>ab3e60caff912f7213171ab8c10445626</anchor>
      <arglist>(LogicalSparseOpsUnitTest)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a1d5e6434d053e7e35bfb5926036a2e61</anchor>
      <arglist>(testAddition)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a6e1db4aeb9d41c8530413a110f20dadc</anchor>
      <arglist>(testSubtraction)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a97607373923069003fe8bbe545d3174d</anchor>
      <arglist>(testMultiplication)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a1a7b91d3886d691b786a9d34dd663da3</anchor>
      <arglist>(testDivision)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>abbc81fd38c7f83c84537f88feb1cba7a</anchor>
      <arglist>(testEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>ab79631831e5f465dee038edf389ef1e9</anchor>
      <arglist>(testNotEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>add00c7ccf0d80ceee7bbbb3a4cce0887</anchor>
      <arglist>(testLessThanOrEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>acd1d8484ee1fbb69e2c967ab6ae4c4f3</anchor>
      <arglist>(testGreaterThanOrEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a9bde0e1666acabf7f676f66fcd65c250</anchor>
      <arglist>(testLessThan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a3aa76b9b368ae723b69124b3649ec6bf</anchor>
      <arglist>(testGreaterThan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a1070dc87e2ecbe2050c1e61c4415f8d1</anchor>
      <arglist>(testPow)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>af8497125b76043dffe85b3547380aeb4</anchor>
      <arglist>(testMax)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a442f91abdd8dc4b01e68f7beb81cb49a</anchor>
      <arglist>(testMin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a9dd26ab1d2fb4d4f7cca1da4cfd819a5</anchor>
      <arglist>(testUnaryPlus)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a04d610c8dea19e526dbd17095c60dace</anchor>
      <arglist>(testUnaryMinus)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a2eba66dd67ffa25f26b7cf2ba26fdd13</anchor>
      <arglist>(testExp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a9fc69797b7e5eb8709ed9ea26aaaf0d6</anchor>
      <arglist>(testLog)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>acbafed28f8c70ec70a74c715c85fe992</anchor>
      <arglist>(testLog10)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>ab3ca1ae0d87db5a47ff02091efe45331</anchor>
      <arglist>(testSqrt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a69f94931de813e13dd4b63c7c2dd4304</anchor>
      <arglist>(testCos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a0e1ffdc6ea9a89baf4b9f8e30efbc9fe</anchor>
      <arglist>(testSin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>af44ecd5744ddbb6d4f91256ee38283e6</anchor>
      <arglist>(testTan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a637e40b867d5016581312aae50dd0a9b</anchor>
      <arglist>(testACos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>ad437ffbc9ae00222255231b80937b98e</anchor>
      <arglist>(testASin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>afa09cc96bd2cf0e975a3998414e857c7</anchor>
      <arglist>(testATan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>ab688cafd3ed9f20dff281ccf17de2db9</anchor>
      <arglist>(testCosh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>ace25b2ff957aac8f9f301c1be2696b3a</anchor>
      <arglist>(testSinh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a86f6c75eb24c186113917bfbd7aef4d3</anchor>
      <arglist>(testTanh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a112662ccb09896d5021ecca4393b9acc</anchor>
      <arglist>(testAbs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a5ff4f582e21af7f4b50299e4fc18f08a</anchor>
      <arglist>(testFAbs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a27f37eeeb538ad370542b1dfc6ce6874</anchor>
      <arglist>(testPlusEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>ae4c70fb4086aee798e3ddcc85111383e</anchor>
      <arglist>(testMinusEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>ad6a6fd43f45f89cf67910f860996236a</anchor>
      <arglist>(testTimesEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a884f18cbad26c5e5ef8e1758159e75d5</anchor>
      <arglist>(testDivideEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a0e2240cd3552736d95c41b7a7a945f34</anchor>
      <arglist>(testComposite1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>ac08bb83b0e926c0532c99f783271388f</anchor>
      <arglist>(testPlusLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a6ce2b8cbda4d95ee6b317c3fc2897ddf</anchor>
      <arglist>(testMinusLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a9f9d05aa4bbe579ba8a812c9de2d7430</anchor>
      <arglist>(testTimesLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a0c05ee71ebfdbb8dc0e3bb2e9d149aa7</anchor>
      <arglist>(testDivideLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_END</name>
      <anchorfile>classLogicalSparseOpsUnitTest.html</anchorfile>
      <anchor>a3bca8c18868e41c1a2fcd3b5055fc024</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::LogOp</name>
    <filename>classSacado_1_1Tay_1_1LogOp.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1LogOp.html</anchorfile>
      <anchor>a6ba4b560da0a92cfb2b1b90fcd81fd7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1LogOp.html</anchorfile>
      <anchor>a3c0a86a1243218fd0405f93432809380</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1LogOp.html</anchorfile>
      <anchor>a53069af3654375ee6db63d1873bd6061</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogOp</name>
      <anchorfile>classSacado_1_1Tay_1_1LogOp.html</anchorfile>
      <anchor>a823e4205236504138654bfad1bfe53b2</anchor>
      <arglist>(const ExprT &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1LogOp.html</anchorfile>
      <anchor>aac4a8a37ff9537f82a9cb0eab7402f18</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1LogOp.html</anchorfile>
      <anchor>a487c77a31db3574d57f43c1ad230bc74</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1LogOp.html</anchorfile>
      <anchor>a73b17e408788ab9a7b42dfb0ab44882f</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::valarray&lt; value_type &gt;</type>
      <name>c</name>
      <anchorfile>classSacado_1_1Tay_1_1LogOp.html</anchorfile>
      <anchor>aeb082bae5b5df3c92fcf03dec9e73b5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dc</name>
      <anchorfile>classSacado_1_1Tay_1_1LogOp.html</anchorfile>
      <anchor>ac8b0388d09c6453d0d1bc8869bbae269</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Example::MapGridUnitCube</name>
    <filename>structKokkos_1_1Example_1_1MapGridUnitCube.html</filename>
    <member kind="function">
      <type></type>
      <name>MapGridUnitCube</name>
      <anchorfile>structKokkos_1_1Example_1_1MapGridUnitCube.html</anchorfile>
      <anchor>a730c862eda2331bcb398f4454f12f3c4</anchor>
      <arglist>(const unsigned grid_max_x, const unsigned grid_max_y, const unsigned grid_max_z, const double bubble_x, const double bubble_y, const double bubble_z)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>structKokkos_1_1Example_1_1MapGridUnitCube.html</anchorfile>
      <anchor>a299ee529698f1a9881256097443474ed</anchor>
      <arglist>(int grid_x, int grid_y, int grid_z, Scalar &amp;coord_x, Scalar &amp;coord_y, Scalar &amp;coord_z) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MapGridUnitCube</name>
      <anchorfile>structKokkos_1_1Example_1_1MapGridUnitCube.html</anchorfile>
      <anchor>a730c862eda2331bcb398f4454f12f3c4</anchor>
      <arglist>(const unsigned grid_max_x, const unsigned grid_max_y, const unsigned grid_max_z, const double bubble_x, const double bubble_y, const double bubble_z)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>structKokkos_1_1Example_1_1MapGridUnitCube.html</anchorfile>
      <anchor>a299ee529698f1a9881256097443474ed</anchor>
      <arglist>(int grid_x, int grid_y, int grid_z, Scalar &amp;coord_x, Scalar &amp;coord_y, Scalar &amp;coord_z) const </arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>m_a</name>
      <anchorfile>structKokkos_1_1Example_1_1MapGridUnitCube.html</anchorfile>
      <anchor>a316091ea53f43e185a92081a40823ba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>m_b</name>
      <anchorfile>structKokkos_1_1Example_1_1MapGridUnitCube.html</anchorfile>
      <anchor>a8f2fbeadda5804410381ed64ca15d3c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>m_c</name>
      <anchorfile>structKokkos_1_1Example_1_1MapGridUnitCube.html</anchorfile>
      <anchor>a06c90d2bc925279ea3cdb1bb862e4ece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>m_max_x</name>
      <anchorfile>structKokkos_1_1Example_1_1MapGridUnitCube.html</anchorfile>
      <anchor>a4272e46eb6e342b7d525246f4d2c5d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>m_max_y</name>
      <anchorfile>structKokkos_1_1Example_1_1MapGridUnitCube.html</anchorfile>
      <anchor>ac688548f16a7d4c73aaa5bab61b7b676</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned</type>
      <name>m_max_z</name>
      <anchorfile>structKokkos_1_1Example_1_1MapGridUnitCube.html</anchorfile>
      <anchor>af636900eaa6715c72858311c1ebc17e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::MarkConstant</name>
    <filename>structSacado_1_1MarkConstant.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION void</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1MarkConstant.html</anchorfile>
      <anchor>a42e3beaca5f4749bc6c6ffcab72a40f3</anchor>
      <arglist>(T &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::MarkConstant&lt; Rad2::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1MarkConstant_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1MarkConstant_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a747bcbbcc99a1b95075bff19d0264d5c</anchor>
      <arglist>(Rad2::ADvar&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::MarkConstant&lt; Rad2::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1MarkConstant_3_01Rad2_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1MarkConstant_3_01Rad2_1_1ADvari_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a8f4ef9571e2a0983edf7fdf3a2fea1ac</anchor>
      <arglist>(Rad2::ADvari&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::MarkConstant&lt; Rad::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1MarkConstant_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1MarkConstant_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a336ef8e28e37798358bcd423017c3df1</anchor>
      <arglist>(Rad::ADvar&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::MarkConstant&lt; Rad::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1MarkConstant_3_01Rad_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1MarkConstant_3_01Rad_1_1ADvari_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a206e84ba858d41df319a9d593b45baac</anchor>
      <arglist>(Rad::ADvari&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::MarkConstant&lt; RadVec::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1MarkConstant_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1MarkConstant_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>af252c90cbe73455089e566777e60259c</anchor>
      <arglist>(RadVec::ADvar&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::MarkConstant&lt; RadVec::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1MarkConstant_3_01RadVec_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1MarkConstant_3_01RadVec_1_1ADvari_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ad79647b29c908bde4b7f1d48fa952a1e</anchor>
      <arglist>(RadVec::ADvari&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MatVecDerivFunctor</name>
    <filename>structMatVecDerivFunctor.html</filename>
    <templarg>ViewTypeA</templarg>
    <templarg>ViewTypeB</templarg>
    <templarg>ViewTypeC</templarg>
    <member kind="typedef">
      <type>ViewTypeC::value_type</type>
      <name>scalar_type</name>
      <anchorfile>structMatVecDerivFunctor.html</anchorfile>
      <anchor>aba5cd876c97469eb16e2cc2d019d39fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>size_type</name>
      <anchorfile>structMatVecDerivFunctor.html</anchorfile>
      <anchor>aa0aac638a92ff8818fc6b312566d9fc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ViewTypeC::execution_space</type>
      <name>execution_space</name>
      <anchorfile>structMatVecDerivFunctor.html</anchorfile>
      <anchor>a32ea30af006c6ecb81829a3af73b5834</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatVecDerivFunctor</name>
      <anchorfile>structMatVecDerivFunctor.html</anchorfile>
      <anchor>a92cbb8ba4d071008fae923ff37f898e3</anchor>
      <arglist>(const ViewTypeA &amp;A_arg, const ViewTypeB &amp;b_arg, const ViewTypeC &amp;c_arg)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>structMatVecDerivFunctor.html</anchorfile>
      <anchor>ae4cc8895c02ebb79da78c136f157bf87</anchor>
      <arglist>(const size_type i) const </arglist>
    </member>
    <member kind="variable">
      <type>const ViewTypeA</type>
      <name>A</name>
      <anchorfile>structMatVecDerivFunctor.html</anchorfile>
      <anchor>aec31c054b11e9278e049356e7795e1e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ViewTypeB</type>
      <name>b</name>
      <anchorfile>structMatVecDerivFunctor.html</anchorfile>
      <anchor>aa724c3755747ed322ba58144261166cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ViewTypeC</type>
      <name>c</name>
      <anchorfile>structMatVecDerivFunctor.html</anchorfile>
      <anchor>a19a2a9a32c22b56def798a4ea2f0701e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_type</type>
      <name>n</name>
      <anchorfile>structMatVecDerivFunctor.html</anchorfile>
      <anchor>ae64af15f3ca1bb1d5da106c9528aa538</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_type</type>
      <name>p</name>
      <anchorfile>structMatVecDerivFunctor.html</anchorfile>
      <anchor>afb8203c51536e214c747ed55f5101535</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MatVecFunctor</name>
    <filename>structMatVecFunctor.html</filename>
    <templarg>ViewTypeA</templarg>
    <templarg>ViewTypeB</templarg>
    <templarg>ViewTypeC</templarg>
    <member kind="typedef">
      <type>ViewTypeC::value_type</type>
      <name>scalar_type</name>
      <anchorfile>structMatVecFunctor.html</anchorfile>
      <anchor>ac772e7d41081a7aae86a6fba612f39e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>size_type</name>
      <anchorfile>structMatVecFunctor.html</anchorfile>
      <anchor>abe7e0e34b398e6f45afd256895424ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ViewTypeC::execution_space</type>
      <name>execution_space</name>
      <anchorfile>structMatVecFunctor.html</anchorfile>
      <anchor>afd89cdde99c60e6b833d0b120a4703ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatVecFunctor</name>
      <anchorfile>structMatVecFunctor.html</anchorfile>
      <anchor>a583156a5f9ebc6de36451f0f363e7320</anchor>
      <arglist>(const ViewTypeA &amp;A_arg, const ViewTypeB &amp;b_arg, const ViewTypeC &amp;c_arg)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>structMatVecFunctor.html</anchorfile>
      <anchor>af2fafbb59d959ffe0a097eab9e55717e</anchor>
      <arglist>(const size_type i) const </arglist>
    </member>
    <member kind="variable">
      <type>const ViewTypeA</type>
      <name>A</name>
      <anchorfile>structMatVecFunctor.html</anchorfile>
      <anchor>a21a478eadab231015ed83ac58f2c0a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ViewTypeB</type>
      <name>b</name>
      <anchorfile>structMatVecFunctor.html</anchorfile>
      <anchor>a40723bd0eaf705a43b878518b26b6b26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ViewTypeC</type>
      <name>c</name>
      <anchorfile>structMatVecFunctor.html</anchorfile>
      <anchor>ad7d391fce1da4bc0923d26630465bbc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_type</type>
      <name>n</name>
      <anchorfile>structMatVecFunctor.html</anchorfile>
      <anchor>a25c9f5016d6849d0a70fbaa24b70bcc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::MaxOp</name>
    <filename>classSacado_1_1Tay_1_1MaxOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>value_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp.html</anchorfile>
      <anchor>a43a0559a0f9587bd409827e305705e1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::value_type</type>
      <name>value_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp.html</anchorfile>
      <anchor>a017970c31d057164b1cf8b8dfc3b9d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; value_type_1, value_type_2 &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp.html</anchorfile>
      <anchor>a1c85e3c23b3e0f86ca3bb05c4fa249d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::scalar_type</type>
      <name>scalar_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp.html</anchorfile>
      <anchor>a5eff6e9fcef6e6bdc8d9665499e98ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::scalar_type</type>
      <name>scalar_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp.html</anchorfile>
      <anchor>ac0d9e6187fd8876d74d55c489fe99a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; scalar_type_1, scalar_type_2 &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp.html</anchorfile>
      <anchor>ab6872e8706598569fbaada2b16a4a815</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::base_expr_type</type>
      <name>base_expr_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp.html</anchorfile>
      <anchor>ad8d89b8eeac66c52c6b3e99823506242</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::base_expr_type</type>
      <name>base_expr_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp.html</anchorfile>
      <anchor>a227554c5a04f269e99605e5e51bd0c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; base_expr_type_1, base_expr_type_2 &gt;::type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp.html</anchorfile>
      <anchor>ac5b8befe14fbaddade7f8a75999c84d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxOp</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp.html</anchorfile>
      <anchor>a098bee1e19b680c1fd73325ef4934372</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp.html</anchorfile>
      <anchor>ab8742afd7004b61e6382a2899df23497</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp.html</anchorfile>
      <anchor>a13650d66b8841fa4739a80a0cf8a65dc</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp.html</anchorfile>
      <anchor>a40a882362620477c91e8fb15e70d223e</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::MaxOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</name>
    <filename>classSacado_1_1Tay_1_1MaxOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT2::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>ae9c4a54607b4ff0f3798c9c179bb89e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a77eee4455300dd96547895c4e0767e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a5dc6dcfade46c72df87bf66c08c095a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstExpr&lt; typename ExprT2::value_type &gt;</type>
      <name>ExprT1</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a72112eb0d12c383fbdf0bb34fc72375e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxOp</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a67de1214414766e20f3d00277c646c32</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>aa40d14288b6da00bd8d689d8c8b4378e</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>ac6b5dc416b93dd66f240f57a89c84d66</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>ab823bbdebf32cca568e0399d1fadf94a</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::MaxOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</name>
    <filename>classSacado_1_1Tay_1_1MaxOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>aa8195f44d669939dfe4b269c7f7cfc24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a1bb80deaac5e3ff864624217ddcc1b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a56a93742cb5e5b27773254209473b4c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstExpr&lt; typename ExprT1::value_type &gt;</type>
      <name>ExprT2</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a80f7861dda2742014831e0ac3a00a2af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxOp</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a3481784f3f3277b07e4da4a47237fd34</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>aebcdb6965a10bcc79d49862045b450dc</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a15b2069bd89d21c3cfdcd8adf4a209b0</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1MaxOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>af5fcc5ccc7594199d091b1dd25f488c4</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::MemPool</name>
    <filename>classSacado_1_1Fad_1_1MemPool.html</filename>
    <class kind="struct">Sacado::Fad::MemPool::Chunk</class>
    <class kind="struct">Sacado::Fad::MemPool::Link</class>
    <member kind="function">
      <type></type>
      <name>MemPool</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>abbdde77bb590608bfce15b5b13a724a5</anchor>
      <arglist>(unsigned int elem_size, unsigned int n_elem, unsigned int pre_alloc=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemPool</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>acda1dc8964fea0fbdb04329a29f6df4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>alloc</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>a4154c53ba4a4fc21275c52a6a7b968e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>a4244450d68430b56be7afc830bb7c40d</anchor>
      <arglist>(void *b)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numChunks</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>a45a2d16920130be854dccd76cbc8c24a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const unsigned int</type>
      <name>esize</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>a843be62537d34615a22d5b057673abe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const unsigned int</type>
      <name>n</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>a1a7de07696214c7cdaf839fa7b0e8a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const unsigned int</type>
      <name>csize</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>a5c60e8b17440b197e3aff4c7e319b0bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Chunk *</type>
      <name>chunks</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>a4e6ecabd11be2a8e5e4c68f13e3143db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Link *</type>
      <name>head</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>a9791c569a205bae0a5a218b15630747d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>num_chunks</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>aa33c650222cd06269e2f85621cdf22fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MemPool</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>a7fd704ce1cb17c783f3a5a3d1620e73d</anchor>
      <arglist>(const MemPool &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>MemPool &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>adca3776a930018eab79c5b67a270d5f8</anchor>
      <arglist>(const MemPool &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>grow</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPool.html</anchorfile>
      <anchor>ad8325cd647e2081741b2447f3cabe007</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::MemPoolManager</name>
    <filename>classSacado_1_1Fad_1_1MemPoolManager.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>MemPoolManager</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>a38cd19d814c6efbe0d8611d1e6097184</anchor>
      <arglist>(unsigned int nfad)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemPoolManager</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>a3b5c77df1bd6db0b5623d8d6cabf4bf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MemPool *</type>
      <name>getMemoryPool</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>ae26f68fa9264e2af172c9972cb1b045c</anchor>
      <arglist>(unsigned int dim)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; unsigned int, MemPool * &gt;</type>
      <name>MapType</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>a4b6026378803210ee04129e5a23ba950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>num_fad</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>ad242677d3ba6c10b1380da7ac82989cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MapType</type>
      <name>poolMap</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>aab52ed5b9667e07f833e9d770fa9837e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MemPoolManager</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>a3bea35a31d9b3dcfc1f63d21b80f39ab</anchor>
      <arglist>(const MemPoolManager &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>MemPoolManager &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>ac2ab54d4b70f6e01b79cce38282b2ee0</anchor>
      <arglist>(const MemPoolManager &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MemPoolManager&lt; double &gt;</name>
    <filename>classSacado_1_1Fad_1_1MemPoolManager.html</filename>
    <member kind="function">
      <type></type>
      <name>MemPoolManager</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>a38cd19d814c6efbe0d8611d1e6097184</anchor>
      <arglist>(unsigned int nfad)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemPoolManager</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>a3b5c77df1bd6db0b5623d8d6cabf4bf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MemPool *</type>
      <name>getMemoryPool</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>ae26f68fa9264e2af172c9972cb1b045c</anchor>
      <arglist>(unsigned int dim)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; unsigned int, MemPool * &gt;</type>
      <name>MapType</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>a4b6026378803210ee04129e5a23ba950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>num_fad</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>ad242677d3ba6c10b1380da7ac82989cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MapType</type>
      <name>poolMap</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>aab52ed5b9667e07f833e9d770fa9837e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MemPoolManager</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>a3bea35a31d9b3dcfc1f63d21b80f39ab</anchor>
      <arglist>(const MemPoolManager &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>MemPoolManager &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>ac2ab54d4b70f6e01b79cce38282b2ee0</anchor>
      <arglist>(const MemPoolManager &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MemPoolManager&lt; Sacado::Fad::DMFad&lt; double &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1MemPoolManager.html</filename>
    <member kind="function">
      <type></type>
      <name>MemPoolManager</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>a38cd19d814c6efbe0d8611d1e6097184</anchor>
      <arglist>(unsigned int nfad)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemPoolManager</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>a3b5c77df1bd6db0b5623d8d6cabf4bf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MemPool *</type>
      <name>getMemoryPool</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>ae26f68fa9264e2af172c9972cb1b045c</anchor>
      <arglist>(unsigned int dim)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; unsigned int, MemPool * &gt;</type>
      <name>MapType</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>a4b6026378803210ee04129e5a23ba950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>num_fad</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>ad242677d3ba6c10b1380da7ac82989cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MapType</type>
      <name>poolMap</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>aab52ed5b9667e07f833e9d770fa9837e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MemPoolManager</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>a3bea35a31d9b3dcfc1f63d21b80f39ab</anchor>
      <arglist>(const MemPoolManager &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>MemPoolManager &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolManager.html</anchorfile>
      <anchor>ac2ab54d4b70f6e01b79cce38282b2ee0</anchor>
      <arglist>(const MemPoolManager &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::MemPoolStorage</name>
    <filename>classSacado_1_1Fad_1_1MemPoolStorage.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>aecc2e070c76b67ed93161089eba7746d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemPoolStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>af37f0af91ba73ef48e3062414c31fc71</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemPoolStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a10d86f2f42801087e79759b3b09d0a0a</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemPoolStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a0785913504f594191ef2ec8cd384946e</anchor>
      <arglist>(const MemPoolStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemPoolStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a003748350976f5a03c26fab23f1d5399</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MemPoolStorage &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a9484cca739516fc6f1d164ce58af72b3</anchor>
      <arglist>(const MemPoolStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>ae61711485d4b7293e11845f95e312cb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a0eb2c4c245844016797d2348fee71669</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeAndZero</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a71f4e9a6f4f1cbfda54a01c5c2ff8abe</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>af1f27f3f11686182b8cfe3fa3ee10d69</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a35102abe46855cacb9e967ab56ec56e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a21cdaab521e015c95524cedcf5a52d8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a03af752964e2d777b72bab896504dc6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>acb81c70af59b2d7474608c84c09a69f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>af161a2e39137bd673e40bb152693472d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a8d8fe679379c5e1bbcecb293fe25942a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>aaad2a52252782d2adc946ab58ad9c5f7</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::MemPool *</type>
      <name>defaultPool_</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a8be076e9fe01656d6f83c65cbee090f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::MemPool *</type>
      <name>defaultPool_</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a8be076e9fe01656d6f83c65cbee090f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::MemPool *</type>
      <name>defaultPool_</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a8be076e9fe01656d6f83c65cbee090f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::MemPool *</type>
      <name>defaultPool_</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a8be076e9fe01656d6f83c65cbee090f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::MemPool *</type>
      <name>defaultPool_</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a8be076e9fe01656d6f83c65cbee090f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::MemPool *</type>
      <name>defaultPool_</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a6c6c9542bf7adf0fcb77d79cceda542b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::MemPool *</type>
      <name>defaultPool_</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a8be076e9fe01656d6f83c65cbee090f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::MemPool *</type>
      <name>defaultPool_</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a6c6c9542bf7adf0fcb77d79cceda542b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::MemPool *</type>
      <name>defaultPool_</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a8be076e9fe01656d6f83c65cbee090f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Sacado::Fad::MemPool *</type>
      <name>defaultPool_</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a6c6c9542bf7adf0fcb77d79cceda542b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MemPool *</type>
      <name>defaultPool_</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>aa4859afcf9d54eb0491543658fd8c721</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MemPool *</type>
      <name>myPool_</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a4f1503ac0ac603eb64b0448acf8f3a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a2987b38fe14a319e018edd05689b355b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>sz_</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>aaaa5baad5fd6e8b85f5ef85447fd4e15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>len_</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>ac5477c8386d66b4d1ab346eb7006e897</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>dx_</name>
      <anchorfile>classSacado_1_1Fad_1_1MemPoolStorage.html</anchorfile>
      <anchor>a0aec36fdf4cf1141507248de5d4a7a64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::MinOp</name>
    <filename>classSacado_1_1Tay_1_1MinOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>value_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp.html</anchorfile>
      <anchor>a4fa42dcef6b4a6b459002d5ec2724e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::value_type</type>
      <name>value_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp.html</anchorfile>
      <anchor>a462dc4ccf9516e13959188c6857ce205</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; value_type_1, value_type_2 &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp.html</anchorfile>
      <anchor>aa0d1cd6833992751323be6558ac0331f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::scalar_type</type>
      <name>scalar_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp.html</anchorfile>
      <anchor>acb6ddbe7ee3e624f629859a378ea6fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::scalar_type</type>
      <name>scalar_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp.html</anchorfile>
      <anchor>a86634431e6df76dae4fbb806450ac830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; scalar_type_1, scalar_type_2 &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp.html</anchorfile>
      <anchor>a62e45d27fb50b036b2ffa63b831bc64d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::base_expr_type</type>
      <name>base_expr_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp.html</anchorfile>
      <anchor>acecdeeff02a00314d748db2943c8752b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::base_expr_type</type>
      <name>base_expr_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp.html</anchorfile>
      <anchor>a2d4ccd1c3b83ecade8d6ad1e89db6300</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; base_expr_type_1, base_expr_type_2 &gt;::type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp.html</anchorfile>
      <anchor>ad2de85d0099edc7230f83fd911c77ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MinOp</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp.html</anchorfile>
      <anchor>ab697fe0d3a9fbb34c89056a66092f2e3</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp.html</anchorfile>
      <anchor>a3103d4e7f0d03eb7608e66851ea12636</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp.html</anchorfile>
      <anchor>aaed479d40a567fcaaa07d34853f54873</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp.html</anchorfile>
      <anchor>a055bc1ecdb204092ed6e6150f2efd325</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::MinOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</name>
    <filename>classSacado_1_1Tay_1_1MinOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT2::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>aec4209b88e78a7356b03a268f9038450</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>af02212d23bd876d775a4b5fb30b3ec22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a277737288313dcaf066161f5f2a5c4d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstExpr&lt; typename ExprT2::value_type &gt;</type>
      <name>ExprT1</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>ab0c63128d2c049d35b586e6fb0c82894</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MinOp</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>af0974f432c5426c06aeed5f0538c926b</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a75f9f0b2db174ee18becaf2f37781f5c</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a090a80796b7a27e1c30dfed341f88c58</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>afb961aa694a93666a6d002c64bdba529</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::MinOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</name>
    <filename>classSacado_1_1Tay_1_1MinOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>ad380a72f695100fe19998c3551171e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a5795a95908c399350962fd951c56129a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>abd1b22848d1405a874115f23aa587509</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstExpr&lt; typename ExprT1::value_type &gt;</type>
      <name>ExprT2</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>ae72f686f288b91b4823839c93e366ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MinOp</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a473f748c31abbd183851fd1fbad03c79</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a1fb02e5bac80e5a99c0d3887beab4139</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a9071db40abdd22f7c65b95715fda4501</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1MinOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>aa6eb1780518a853bdb3df37f43ff42bf</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::mp_array</name>
    <filename>structSacado_1_1Fad_1_1mp__array.html</filename>
    <templarg></templarg>
    <templarg>isScalar</templarg>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>get</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array.html</anchorfile>
      <anchor>a2c861a6f13b4fef975a3b4cd3b42ed6f</anchor>
      <arglist>(int sz, MemPool *pool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>get_and_fill</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array.html</anchorfile>
      <anchor>adcd9f94c819d523a2cd412a4c63ed95e</anchor>
      <arglist>(int sz, MemPool *pool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>get_and_fill</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array.html</anchorfile>
      <anchor>aeaa4691260bed71eb2c13a28e5a8fab5</anchor>
      <arglist>(const T *src, int sz, MemPool *pool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array.html</anchorfile>
      <anchor>ae55b84e1a848d4bd42831c50e41893bd</anchor>
      <arglist>(const T *src, T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>zero</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array.html</anchorfile>
      <anchor>ae563a9fbde8d278d5802281d06fb61a9</anchor>
      <arglist>(T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy_and_release</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array.html</anchorfile>
      <anchor>a77766a8703c8ebb324521cb0e7ec5d39</anchor>
      <arglist>(T *m, int sz, MemPool *pool)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::mp_array&lt; T, true &gt;</name>
    <filename>structSacado_1_1Fad_1_1mp__array_3_01T_00_01true_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>get</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a0b3faa964fd5a3f96dfc8bfb12206ca1</anchor>
      <arglist>(int sz, MemPool *pool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>get_and_fill</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>ad6173f703df4ed66775448ad159b8c1c</anchor>
      <arglist>(int sz, MemPool *pool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>get_and_fill</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a13b146fb98b396c00045884f79d9a594</anchor>
      <arglist>(const T *src, int sz, MemPool *pool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a8561e682bb1cca01457addaf8cead243</anchor>
      <arglist>(const T *src, T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>zero</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a3a84ad688e443732f310fc720dab1908</anchor>
      <arglist>(T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy_and_release</name>
      <anchorfile>structSacado_1_1Fad_1_1mp__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>ae79db0dac2ad2cc76a98dec6aa5ab658</anchor>
      <arglist>(T *m, int sz, MemPool *pool)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::mpl_if</name>
    <filename>structSacado_1_1mpl_1_1mpl__if.html</filename>
    <templarg>C</templarg>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <base>mpl_if_c&lt; C::value, T1, T2 &gt;</base>
  </compound>
  <compound kind="class">
    <name>mpl_if&lt; is_placeholder&lt; F&lt; T1 &gt; &gt;, type_wrap&lt; bind1&lt; quote1&lt; F &gt;, lambda&lt; T1 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if.html</filename>
    <base>mpl_if_c&lt; is_placeholder&lt; F&lt; T1 &gt; &gt;::value, type_wrap&lt; bind1&lt; quote1&lt; F &gt;, lambda&lt; T1 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>mpl_if&lt; is_placeholder&lt; F&lt; T1, T2 &gt; &gt;, type_wrap&lt; bind2&lt; quote2&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if.html</filename>
    <base>mpl_if_c&lt; is_placeholder&lt; F&lt; T1, T2 &gt; &gt;::value, type_wrap&lt; bind2&lt; quote2&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>mpl_if&lt; is_placeholder&lt; F&lt; T1, T2, T3 &gt; &gt;, type_wrap&lt; bind3&lt; quote3&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if.html</filename>
    <base>mpl_if_c&lt; is_placeholder&lt; F&lt; T1, T2, T3 &gt; &gt;::value, type_wrap&lt; bind3&lt; quote3&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>mpl_if&lt; is_placeholder&lt; F&lt; T1, T2, T3, T4 &gt; &gt;, type_wrap&lt; bind4&lt; quote4&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type, lambda&lt; T4 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3, T4 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if.html</filename>
    <base>mpl_if_c&lt; is_placeholder&lt; F&lt; T1, T2, T3, T4 &gt; &gt;::value, type_wrap&lt; bind4&lt; quote4&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type, lambda&lt; T4 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3, T4 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>mpl_if&lt; is_placeholder&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;, type_wrap&lt; bind5&lt; quote5&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type, lambda&lt; T4 &gt;::type, lambda&lt; T5 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if.html</filename>
    <base>mpl_if_c&lt; is_placeholder&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;::value, type_wrap&lt; bind5&lt; quote5&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type, lambda&lt; T4 &gt;::type, lambda&lt; T5 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::mpl_if_c</name>
    <filename>structSacado_1_1mpl_1_1mpl__if__c.html</filename>
    <templarg>cond</templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>mpl_if_c&lt; C::value, T1, T2 &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if__c.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::mpl_if_c&lt; false, T1, T2 &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if__c_3_01false_00_01T1_00_01T2_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>type_wrap&lt; T2 &gt;</base>
  </compound>
  <compound kind="class">
    <name>mpl_if_c&lt; is_placeholder&lt; F&lt; T1 &gt; &gt;::value, type_wrap&lt; bind1&lt; quote1&lt; F &gt;, lambda&lt; T1 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if__c.html</filename>
  </compound>
  <compound kind="class">
    <name>mpl_if_c&lt; is_placeholder&lt; F&lt; T1, T2 &gt; &gt;::value, type_wrap&lt; bind2&lt; quote2&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if__c.html</filename>
  </compound>
  <compound kind="class">
    <name>mpl_if_c&lt; is_placeholder&lt; F&lt; T1, T2, T3 &gt; &gt;::value, type_wrap&lt; bind3&lt; quote3&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if__c.html</filename>
  </compound>
  <compound kind="class">
    <name>mpl_if_c&lt; is_placeholder&lt; F&lt; T1, T2, T3, T4 &gt; &gt;::value, type_wrap&lt; bind4&lt; quote4&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type, lambda&lt; T4 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3, T4 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if__c.html</filename>
  </compound>
  <compound kind="class">
    <name>mpl_if_c&lt; is_placeholder&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;::value, type_wrap&lt; bind5&lt; quote5&lt; F &gt;, lambda&lt; T1 &gt;::type, lambda&lt; T2 &gt;::type, lambda&lt; T3 &gt;::type, lambda&lt; T4 &gt;::type, lambda&lt; T5 &gt;::type &gt; &gt;, type_wrap&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if__c.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::mpl_if_c&lt; true, T1, T2 &gt;</name>
    <filename>structSacado_1_1mpl_1_1mpl__if__c_3_01true_00_01T1_00_01T2_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>type_wrap&lt; T1 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::mult</name>
    <filename>structExprFuncs_1_1mult.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::mult&lt; T, 1 &gt;</name>
    <filename>structExprFuncs_1_1mult_3_01T_00_011_01_4.html</filename>
    <templarg></templarg>
    <base>mult_base&lt; T, 1 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1mult_3_01T_00_011_01_4.html</anchorfile>
      <anchor>a74ef3144df305bca1520306faf32635f</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::mult&lt; T, 10 &gt;</name>
    <filename>structExprFuncs_1_1mult_3_01T_00_0110_01_4.html</filename>
    <templarg></templarg>
    <base>mult_base&lt; T, 10 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1mult_3_01T_00_0110_01_4.html</anchorfile>
      <anchor>a6b6a0ace2cd6f9a41f1b4cd96e64f60b</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::mult&lt; T, 15 &gt;</name>
    <filename>structExprFuncs_1_1mult_3_01T_00_0115_01_4.html</filename>
    <templarg></templarg>
    <base>mult_base&lt; T, 15 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1mult_3_01T_00_0115_01_4.html</anchorfile>
      <anchor>a1c297b28ff7ad79672bc945d333b9487</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::mult&lt; T, 2 &gt;</name>
    <filename>structExprFuncs_1_1mult_3_01T_00_012_01_4.html</filename>
    <templarg></templarg>
    <base>mult_base&lt; T, 2 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1mult_3_01T_00_012_01_4.html</anchorfile>
      <anchor>a8e1d9f8f5dd6c9f96c43e42eb84da876</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::mult&lt; T, 20 &gt;</name>
    <filename>structExprFuncs_1_1mult_3_01T_00_0120_01_4.html</filename>
    <templarg></templarg>
    <base>mult_base&lt; T, 20 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1mult_3_01T_00_0120_01_4.html</anchorfile>
      <anchor>ae589863dc773d382e5d67c15ae9ace81</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::mult&lt; T, 3 &gt;</name>
    <filename>structExprFuncs_1_1mult_3_01T_00_013_01_4.html</filename>
    <templarg></templarg>
    <base>mult_base&lt; T, 3 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1mult_3_01T_00_013_01_4.html</anchorfile>
      <anchor>a81463b3cc630cef5f5f08ff030110f6c</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::mult&lt; T, 4 &gt;</name>
    <filename>structExprFuncs_1_1mult_3_01T_00_014_01_4.html</filename>
    <templarg></templarg>
    <base>mult_base&lt; T, 4 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1mult_3_01T_00_014_01_4.html</anchorfile>
      <anchor>ac2bc9d8e86e0fef04ac903f6fde38119</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::mult&lt; T, 5 &gt;</name>
    <filename>structExprFuncs_1_1mult_3_01T_00_015_01_4.html</filename>
    <templarg></templarg>
    <base>mult_base&lt; T, 5 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1mult_3_01T_00_015_01_4.html</anchorfile>
      <anchor>a7b2e264df8caac6221578bb77287bf55</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::mult_base</name>
    <filename>structExprFuncs_1_1mult__base.html</filename>
    <templarg>T</templarg>
    <templarg>N</templarg>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1mult__base.html</anchorfile>
      <anchor>a6598dc79f2fb4c84b49e57ea48e0af2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mult_base&lt; T, 1 &gt;</name>
    <filename>structExprFuncs_1_1mult__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1mult__base.html</anchorfile>
      <anchor>a6598dc79f2fb4c84b49e57ea48e0af2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mult_base&lt; T, 10 &gt;</name>
    <filename>structExprFuncs_1_1mult__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1mult__base.html</anchorfile>
      <anchor>a6598dc79f2fb4c84b49e57ea48e0af2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mult_base&lt; T, 15 &gt;</name>
    <filename>structExprFuncs_1_1mult__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1mult__base.html</anchorfile>
      <anchor>a6598dc79f2fb4c84b49e57ea48e0af2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mult_base&lt; T, 2 &gt;</name>
    <filename>structExprFuncs_1_1mult__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1mult__base.html</anchorfile>
      <anchor>a6598dc79f2fb4c84b49e57ea48e0af2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mult_base&lt; T, 20 &gt;</name>
    <filename>structExprFuncs_1_1mult__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1mult__base.html</anchorfile>
      <anchor>a6598dc79f2fb4c84b49e57ea48e0af2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mult_base&lt; T, 3 &gt;</name>
    <filename>structExprFuncs_1_1mult__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1mult__base.html</anchorfile>
      <anchor>a6598dc79f2fb4c84b49e57ea48e0af2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mult_base&lt; T, 4 &gt;</name>
    <filename>structExprFuncs_1_1mult__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1mult__base.html</anchorfile>
      <anchor>a6598dc79f2fb4c84b49e57ea48e0af2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mult_base&lt; T, 5 &gt;</name>
    <filename>structExprFuncs_1_1mult__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1mult__base.html</anchorfile>
      <anchor>a6598dc79f2fb4c84b49e57ea48e0af2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::MultiplicationOp</name>
    <filename>classSacado_1_1Tay_1_1MultiplicationOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>value_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp.html</anchorfile>
      <anchor>a9fdc95ff2f896d6f4781b22a87883f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::value_type</type>
      <name>value_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp.html</anchorfile>
      <anchor>acd8e287a69acd85002607ffa10902b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; value_type_1, value_type_2 &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp.html</anchorfile>
      <anchor>ab9bc4f98b65cfb5a6df230aa6174e3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::scalar_type</type>
      <name>scalar_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp.html</anchorfile>
      <anchor>aa4736118f6edd8561f8de73a657a12fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::scalar_type</type>
      <name>scalar_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp.html</anchorfile>
      <anchor>a3161680a972a3dd77473de5abeda1f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; scalar_type_1, scalar_type_2 &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp.html</anchorfile>
      <anchor>ab1d3d3cca7916b901ff4e97109d929f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::base_expr_type</type>
      <name>base_expr_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp.html</anchorfile>
      <anchor>a44ce1442f21a7a1dcfd3fa6c4aa19288</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::base_expr_type</type>
      <name>base_expr_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp.html</anchorfile>
      <anchor>a643af6e2a897ebb2ba57651aae2a6cbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; base_expr_type_1, base_expr_type_2 &gt;::type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp.html</anchorfile>
      <anchor>a2c654934fd4ffe1bc6916c27b725de58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiplicationOp</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp.html</anchorfile>
      <anchor>a9eee960efe00cf176510736a2f76cb82</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp.html</anchorfile>
      <anchor>a46a3bc1d606f539d2267fba9c6eac426</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp.html</anchorfile>
      <anchor>a4bcced4721ae40783d32d6bd2fed72aa</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp.html</anchorfile>
      <anchor>a91447a519ae730c8cff2d9047a3e5f9a</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::valarray&lt; value_type &gt;</type>
      <name>c</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp.html</anchorfile>
      <anchor>acf829fed97ca95a5b88c539f20462e37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dc</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp.html</anchorfile>
      <anchor>abaab6801e237eadf30e01dd123ae8fde</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::MultiplicationOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</name>
    <filename>classSacado_1_1Tay_1_1MultiplicationOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT2::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>aa9f4ed3215307815c082cf208df9aad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>aa00df46ea48fe8117966ae397fb46dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a4382178b54003ef0ed16d04375d2f067</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstExpr&lt; typename ExprT2::value_type &gt;</type>
      <name>ExprT1</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a3c908502cccdb620ab4b580bb32c78a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiplicationOp</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a89632ba16586620eed14d6ea6b0d8784</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a3d281a5d663bf287d30ede73f48c778b</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a7b788c49c7ffb2efde077c7acd150bf0</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a4e1e4856017f3d285f812e2e4ebf2bee</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::MultiplicationOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</name>
    <filename>classSacado_1_1Tay_1_1MultiplicationOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>ab1c56a43ef705e3965617c6c5ce42fa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a76af98d4b6ffc2d27a58279dbacd45b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a522f561bd74a99fc86093535a20624d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstExpr&lt; typename ExprT1::value_type &gt;</type>
      <name>ExprT2</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a4a2af04378fa5dc000457e4937c28a1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiplicationOp</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a7a3168e13806edf3ae74af94460d9b20</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a0066801fa9c6da3a6123196536090bbd</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a8d4627c07d31cd82182508b8659bc530</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1MultiplicationOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>ac289a4066fc5a875b5aaeca3e635812c</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MultiplyKernel</name>
    <filename>structMultiplyKernel.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>InputViewType1::execution_space</type>
      <name>execution_space</name>
      <anchorfile>structMultiplyKernel.html</anchorfile>
      <anchor>aa352d0900aedba820db59a5547ee518b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InputViewType1::size_type</type>
      <name>size_type</name>
      <anchorfile>structMultiplyKernel.html</anchorfile>
      <anchor>a5955af4b9c86ab146175612c00c53f3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiplyKernel</name>
      <anchorfile>structMultiplyKernel.html</anchorfile>
      <anchor>aa61a0e8ac9d0f4e77b72c761fbed725f</anchor>
      <arglist>(const InputViewType1 v1, const InputViewType2 v2, const OutputViewType v3, const bool update)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>structMultiplyKernel.html</anchorfile>
      <anchor>abf32547d4c3544122176ff3c04db79a4</anchor>
      <arglist>(const size_type i) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structMultiplyKernel.html</anchorfile>
      <anchor>a4adc19936b36c0dc0cf0be8b455b6db6</anchor>
      <arglist>(const InputViewType1 v1, const InputViewType2 v2, const OutputViewType v3, const bool update=false)</arglist>
    </member>
    <member kind="variable">
      <type>const InputViewType1</type>
      <name>m_v1</name>
      <anchorfile>structMultiplyKernel.html</anchorfile>
      <anchor>a67547a004a97f4efceb0f2dc211e9947</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const InputViewType2</type>
      <name>m_v2</name>
      <anchorfile>structMultiplyKernel.html</anchorfile>
      <anchor>ac68e43a560d5e7b75f26fd2d4fee3981</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OutputViewType</type>
      <name>m_v3</name>
      <anchorfile>structMultiplyKernel.html</anchorfile>
      <anchor>a69a9c33802086eb684589794c958d0ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>m_update</name>
      <anchorfile>structMultiplyKernel.html</anchorfile>
      <anchor>a1a7e90a8e6d1f8ea196b4e135352a2fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MyClass</name>
    <filename>structMyClass.html</filename>
    <templarg></templarg>
    <member kind="variable">
      <type>T</type>
      <name>x</name>
      <anchorfile>structMyClass.html</anchorfile>
      <anchor>adcd51f9e3a7e7a8f8000eccf3e9cb78d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::nest</name>
    <filename>structExprFuncs_1_1nest.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::nest&lt; T, 1 &gt;</name>
    <filename>structExprFuncs_1_1nest_3_01T_00_011_01_4.html</filename>
    <templarg></templarg>
    <base>nest_base&lt; T, 1 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1nest_3_01T_00_011_01_4.html</anchorfile>
      <anchor>a9daa9c477c95c0e6b83e9a11f2cafc1d</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::nest&lt; T, 10 &gt;</name>
    <filename>structExprFuncs_1_1nest_3_01T_00_0110_01_4.html</filename>
    <templarg></templarg>
    <base>nest_base&lt; T, 10 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1nest_3_01T_00_0110_01_4.html</anchorfile>
      <anchor>a85cb317a57a803218de38c3d0094175a</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::nest&lt; T, 15 &gt;</name>
    <filename>structExprFuncs_1_1nest_3_01T_00_0115_01_4.html</filename>
    <templarg></templarg>
    <base>nest_base&lt; T, 15 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1nest_3_01T_00_0115_01_4.html</anchorfile>
      <anchor>a0d39c2502b2f4bc729e40f5641f0aaa3</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::nest&lt; T, 2 &gt;</name>
    <filename>structExprFuncs_1_1nest_3_01T_00_012_01_4.html</filename>
    <templarg></templarg>
    <base>nest_base&lt; T, 2 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1nest_3_01T_00_012_01_4.html</anchorfile>
      <anchor>ae921dac62313a3e434a9570065c0e371</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::nest&lt; T, 20 &gt;</name>
    <filename>structExprFuncs_1_1nest_3_01T_00_0120_01_4.html</filename>
    <templarg></templarg>
    <base>nest_base&lt; T, 20 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1nest_3_01T_00_0120_01_4.html</anchorfile>
      <anchor>ab272d211ca61c7f891b4eac53cb545f5</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::nest&lt; T, 3 &gt;</name>
    <filename>structExprFuncs_1_1nest_3_01T_00_013_01_4.html</filename>
    <templarg></templarg>
    <base>nest_base&lt; T, 3 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1nest_3_01T_00_013_01_4.html</anchorfile>
      <anchor>ae067a8600745d743be7d5492882ae665</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::nest&lt; T, 4 &gt;</name>
    <filename>structExprFuncs_1_1nest_3_01T_00_014_01_4.html</filename>
    <templarg></templarg>
    <base>nest_base&lt; T, 4 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1nest_3_01T_00_014_01_4.html</anchorfile>
      <anchor>a8be9252a185fa275fe1276d0e6ca5ca7</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::nest&lt; T, 5 &gt;</name>
    <filename>structExprFuncs_1_1nest_3_01T_00_015_01_4.html</filename>
    <templarg></templarg>
    <base>nest_base&lt; T, 5 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structExprFuncs_1_1nest_3_01T_00_015_01_4.html</anchorfile>
      <anchor>a8f14a279e2ab270b5caf2ac2e668e0c0</anchor>
      <arglist>(const T x[], T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ExprFuncs::nest_base</name>
    <filename>structExprFuncs_1_1nest__base.html</filename>
    <templarg>T</templarg>
    <templarg>N</templarg>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1nest__base.html</anchorfile>
      <anchor>a368f793a8cf8e212532815a96349b98d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>nest_base&lt; T, 1 &gt;</name>
    <filename>structExprFuncs_1_1nest__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1nest__base.html</anchorfile>
      <anchor>a368f793a8cf8e212532815a96349b98d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>nest_base&lt; T, 10 &gt;</name>
    <filename>structExprFuncs_1_1nest__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1nest__base.html</anchorfile>
      <anchor>a368f793a8cf8e212532815a96349b98d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>nest_base&lt; T, 15 &gt;</name>
    <filename>structExprFuncs_1_1nest__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1nest__base.html</anchorfile>
      <anchor>a368f793a8cf8e212532815a96349b98d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>nest_base&lt; T, 2 &gt;</name>
    <filename>structExprFuncs_1_1nest__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1nest__base.html</anchorfile>
      <anchor>a368f793a8cf8e212532815a96349b98d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>nest_base&lt; T, 20 &gt;</name>
    <filename>structExprFuncs_1_1nest__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1nest__base.html</anchorfile>
      <anchor>a368f793a8cf8e212532815a96349b98d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>nest_base&lt; T, 3 &gt;</name>
    <filename>structExprFuncs_1_1nest__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1nest__base.html</anchorfile>
      <anchor>a368f793a8cf8e212532815a96349b98d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>nest_base&lt; T, 4 &gt;</name>
    <filename>structExprFuncs_1_1nest__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1nest__base.html</anchorfile>
      <anchor>a368f793a8cf8e212532815a96349b98d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>nest_base&lt; T, 5 &gt;</name>
    <filename>structExprFuncs_1_1nest__base.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>n</name>
      <anchorfile>structExprFuncs_1_1nest__base.html</anchorfile>
      <anchor>a368f793a8cf8e212532815a96349b98d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::next</name>
    <filename>structSacado_1_1mpl_1_1next.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::next&lt; range_c_iterator&lt; Range, Pos &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1next_3_01range__c__iterator_3_01Range_00_01Pos_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Pos</templarg>
    <member kind="typedef">
      <type>range_c_iterator&lt; Range, Pos+1 &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1next_3_01range__c__iterator_3_01Range_00_01Pos_01_4_01_4.html</anchorfile>
      <anchor>a81b70d3555b4283e20cea966e338a0ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Kokkos::Example::FENL::NodeNodeGraph</name>
    <filename>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</filename>
    <templarg>ElemNodeIdView</templarg>
    <templarg>CrsGraphType</templarg>
    <templarg>ElemNode</templarg>
    <class kind="struct">Kokkos::Example::FENL::NodeNodeGraph::TagFillElementGraph</class>
    <class kind="struct">Kokkos::Example::FENL::NodeNodeGraph::TagFillGraphEntries</class>
    <class kind="struct">Kokkos::Example::FENL::NodeNodeGraph::TagFillNodeSet</class>
    <class kind="struct">Kokkos::Example::FENL::NodeNodeGraph::TagScanNodeCount</class>
    <class kind="struct">Kokkos::Example::FENL::NodeNodeGraph::TagSortGraphEntries</class>
    <class kind="struct">Kokkos::Example::FENL::NodeNodeGraph::Times</class>
    <member kind="typedef">
      <type>ElemNodeIdView::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>acb064efca3070624a60f28891149e078</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pair&lt; unsigned, unsigned &gt;</type>
      <name>key_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a2a41499c2eafde0b5dea6709e71ab7bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::UnorderedMap&lt; key_type, void, execution_space &gt;</type>
      <name>SetType</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a724b4f572d8b7a1ac0a64ca35c7eeaa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CrsGraphType::row_map_type::non_const_type</type>
      <name>RowMapType</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>afce1accae1073c49d9460302edff8c69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; unsigned, execution_space &gt;</type>
      <name>UnsignedValue</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>acf60467e78182d278d64dcd2d580c4c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; unsigned *[ElemNode][ElemNode], execution_space &gt;</type>
      <name>ElemGraphType</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>ac45057fcd1678c9d041a65c20b66e108</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned</type>
      <name>value_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>ad22e8363cec1bf544287dd079c704755</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElemNodeIdView::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>acb064efca3070624a60f28891149e078</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pair&lt; unsigned, unsigned &gt;</type>
      <name>key_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a2a41499c2eafde0b5dea6709e71ab7bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::UnorderedMap&lt; key_type, void, execution_space &gt;</type>
      <name>SetType</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a724b4f572d8b7a1ac0a64ca35c7eeaa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CrsGraphType::row_map_type::non_const_type</type>
      <name>RowMapType</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>afce1accae1073c49d9460302edff8c69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; unsigned, execution_space &gt;</type>
      <name>UnsignedValue</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>acf60467e78182d278d64dcd2d580c4c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; unsigned *[ElemNode][ElemNode], execution_space &gt;</type>
      <name>ElemGraphType</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>ac45057fcd1678c9d041a65c20b66e108</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned</type>
      <name>value_type</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>ad22e8363cec1bf544287dd079c704755</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeNodeGraph</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>af4fe3a108c00dd52d4dd034d974dad5b</anchor>
      <arglist>(const ElemNodeIdView &amp;arg_elem_node_id, const unsigned arg_node_count, Times &amp;results)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a5546e6e724e9fca5cb221b8b946f6a92</anchor>
      <arglist>(const TagFillNodeSet &amp;, unsigned ielem, unsigned &amp;count) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>fill_graph_entries</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a27ed239302e7a758f45c66bdff6c5ffc</anchor>
      <arglist>(const unsigned iset) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>sort_graph_entries</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a8edd6b67b4d77f93f7880786fc6fb874</anchor>
      <arglist>(const unsigned irow) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>fill_elem_graph_map</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a8e93b3af2bc554732efc37006fd2ab25</anchor>
      <arglist>(const unsigned ielem) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a0dc90a835272fa890a4b59c788341fda</anchor>
      <arglist>(const unsigned iwork) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7034e8a24081fe88f49f7000e792cd96</anchor>
      <arglist>(const unsigned irow, unsigned &amp;update, const bool final) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>init</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>abf07f3d0c876ee2239cab544b9011a1a</anchor>
      <arglist>(const TagFillNodeSet &amp;, unsigned &amp;update) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>join</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>af303367f70b6962d1dbc6f0e001b1e5d</anchor>
      <arglist>(const TagFillNodeSet &amp;, volatile unsigned &amp;update, volatile const unsigned &amp;input) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>init</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>ac19e2687a91829dd2176e92888283d06</anchor>
      <arglist>(unsigned &amp;update) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>join</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>ad8b6a75066f08c4603d8c51e837154b7</anchor>
      <arglist>(volatile unsigned &amp;update, volatile const unsigned &amp;input) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeNodeGraph</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>af4fe3a108c00dd52d4dd034d974dad5b</anchor>
      <arglist>(const ElemNodeIdView &amp;arg_elem_node_id, const unsigned arg_node_count, Times &amp;results)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a5546e6e724e9fca5cb221b8b946f6a92</anchor>
      <arglist>(const TagFillNodeSet &amp;, unsigned ielem, unsigned &amp;count) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>fill_graph_entries</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a27ed239302e7a758f45c66bdff6c5ffc</anchor>
      <arglist>(const unsigned iset) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>sort_graph_entries</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a8edd6b67b4d77f93f7880786fc6fb874</anchor>
      <arglist>(const unsigned irow) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>fill_elem_graph_map</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a8e93b3af2bc554732efc37006fd2ab25</anchor>
      <arglist>(const unsigned ielem) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a0dc90a835272fa890a4b59c788341fda</anchor>
      <arglist>(const unsigned iwork) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7034e8a24081fe88f49f7000e792cd96</anchor>
      <arglist>(const unsigned irow, unsigned &amp;update, const bool final) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>init</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>abf07f3d0c876ee2239cab544b9011a1a</anchor>
      <arglist>(const TagFillNodeSet &amp;, unsigned &amp;update) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>join</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>af303367f70b6962d1dbc6f0e001b1e5d</anchor>
      <arglist>(const TagFillNodeSet &amp;, volatile unsigned &amp;update, volatile const unsigned &amp;input) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>init</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>ac19e2687a91829dd2176e92888283d06</anchor>
      <arglist>(unsigned &amp;update) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>join</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>ad8b6a75066f08c4603d8c51e837154b7</anchor>
      <arglist>(volatile unsigned &amp;update, volatile const unsigned &amp;input) const </arglist>
    </member>
    <member kind="variable">
      <type>CrsGraphType</type>
      <name>graph</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a2e0f4b36ac5bcdf902ca1e5fe3fa4f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ElemGraphType</type>
      <name>elem_graph</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a62e3da6ee45053c760254312f871d583</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration" protection="private">
      <type></type>
      <name>PhaseType</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>FILL_NODE_SET</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1bafd6875edc31e60fb0fb52738b027a1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>SCAN_NODE_COUNT</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1ba218809a2106030de1ab977c8da62074f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>FILL_GRAPH_ENTRIES</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1ba8a2cc6f06265f5182bef9aec0210033a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>SORT_GRAPH_ENTRIES</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1ba09eef8032733800d028f0b224c93deff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>FILL_ELEMENT_GRAPH</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1bae918f538051eba5e39c143995189b1ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>FILL_NODE_SET</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1bafd6875edc31e60fb0fb52738b027a1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>SCAN_NODE_COUNT</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1ba218809a2106030de1ab977c8da62074f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>FILL_GRAPH_ENTRIES</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1ba8a2cc6f06265f5182bef9aec0210033a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>SORT_GRAPH_ENTRIES</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1ba09eef8032733800d028f0b224c93deff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>FILL_ELEMENT_GRAPH</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1bae918f538051eba5e39c143995189b1ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration" protection="private">
      <type></type>
      <name>PhaseType</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>FILL_NODE_SET</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1bafd6875edc31e60fb0fb52738b027a1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>SCAN_NODE_COUNT</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1ba218809a2106030de1ab977c8da62074f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>FILL_GRAPH_ENTRIES</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1ba8a2cc6f06265f5182bef9aec0210033a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>SORT_GRAPH_ENTRIES</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1ba09eef8032733800d028f0b224c93deff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>FILL_ELEMENT_GRAPH</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1bae918f538051eba5e39c143995189b1ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>FILL_NODE_SET</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1bafd6875edc31e60fb0fb52738b027a1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>SCAN_NODE_COUNT</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1ba218809a2106030de1ab977c8da62074f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>FILL_GRAPH_ENTRIES</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1ba8a2cc6f06265f5182bef9aec0210033a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>SORT_GRAPH_ENTRIES</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1ba09eef8032733800d028f0b224c93deff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>FILL_ELEMENT_GRAPH</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1bae918f538051eba5e39c143995189b1ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>FILL_NODE_SET</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1bafd6875edc31e60fb0fb52738b027a1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>SCAN_NODE_COUNT</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1ba218809a2106030de1ab977c8da62074f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>FILL_GRAPH_ENTRIES</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1ba8a2cc6f06265f5182bef9aec0210033a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>SORT_GRAPH_ENTRIES</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1ba09eef8032733800d028f0b224c93deff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>FILL_ELEMENT_GRAPH</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a7cf0da5c76769adb61e29d00c0b3ee1bae918f538051eba5e39c143995189b1ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const unsigned</type>
      <name>node_count</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>ace5d2aa87581a20197612d2bc82397c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ElemNodeIdView</type>
      <name>elem_node_id</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a714a03d014ca088e9d89256d51adad1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UnsignedValue</type>
      <name>row_total</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>adfdf48c6cabd13e492131ce5d21b69f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RowMapType</type>
      <name>row_count</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a0900b20e0daa721c4095ee03290ed2eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RowMapType</type>
      <name>row_map</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a48974b0d94b5bc18e61ea060aa5a83da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SetType</type>
      <name>node_node_set</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a213ae4515e3f0fdd013eaac878d7becc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PhaseType</type>
      <name>phase</name>
      <anchorfile>classKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph.html</anchorfile>
      <anchor>a768248b1616afbeea1347992992a28a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::none</name>
    <filename>structSacado_1_1mpl_1_1none.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::OverrideDefaultPromote</name>
    <filename>structSacado_1_1OverrideDefaultPromote.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structSacado_1_1OverrideDefaultPromote.html</anchorfile>
      <anchor>af15b676d44b72645f3292b3e69b56272</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ParameterAccessor</name>
    <filename>classSacado_1_1ParameterAccessor.html</filename>
    <templarg>EvalType</templarg>
    <templarg>EvalTypeTraits</templarg>
    <member kind="typedef">
      <type>ScalarParameterLibrary&lt; EvalTypeTraits &gt;</type>
      <name>ParamLib</name>
      <anchorfile>classSacado_1_1ParameterAccessor.html</anchorfile>
      <anchor>a166f835cd48d1035a44e84b4be0c907c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterAccessor</name>
      <anchorfile>classSacado_1_1ParameterAccessor.html</anchorfile>
      <anchor>a986a23b1c819c79995abd7896453eea4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ScalarT &amp;</type>
      <name>getValue</name>
      <anchorfile>classSacado_1_1ParameterAccessor.html</anchorfile>
      <anchor>a781c5e6678cf4b832cfaa6866648bf50</anchor>
      <arglist>(const std::string &amp;n)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classSacado_1_1ParameterAccessor.html</anchorfile>
      <anchor>aa9439b23e6be8cf4f259ca2de4b75b33</anchor>
      <arglist>(const std::string &amp;n, const ScalarT &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSacadoParameter</name>
      <anchorfile>classSacado_1_1ParameterAccessor.html</anchorfile>
      <anchor>ab19c2fbcf38b195822332aea37d107b2</anchor>
      <arglist>(const std::string &amp;name, ParamLib &amp;paramLib)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSacadoParameter</name>
      <anchorfile>classSacado_1_1ParameterAccessor.html</anchorfile>
      <anchor>a257b773f8a759d7b866e8c186786cda4</anchor>
      <arglist>(const std::string &amp;name, const Teuchos::RCP&lt; ParamLib &gt; &amp;paramLib)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>EvalTypeTraits::template apply&lt; EvalType &gt;::type</type>
      <name>ScalarT</name>
      <anchorfile>classSacado_1_1ParameterAccessor.html</anchorfile>
      <anchor>ae363a9cb9e4be811eb8ec670ef83281d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; ParameterRegistration&lt; EvalType, EvalTypeTraits &gt; &gt; &gt;</type>
      <name>pr_</name>
      <anchorfile>classSacado_1_1ParameterAccessor.html</anchorfile>
      <anchor>af907f694c2b8bcb874dcd150e396a2b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ParameterFamilyBase</name>
    <filename>classSacado_1_1ParameterFamilyBase.html</filename>
    <templarg>EntryBase</templarg>
    <templarg>EntryType</templarg>
    <member kind="function">
      <type></type>
      <name>ParameterFamilyBase</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a54bc1c4f5c8000d06ce81b9ef7903809</anchor>
      <arglist>(const std::string &amp;name, bool supports_ad, bool supports_analytic)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterFamilyBase</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>ad030241b8e25dcfb4012bc68610e78bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a2f2508a34f8171d527b156335c388f1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supportsAD</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a1afeb2a0dc6f7e2a9a7733bb73319abc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supportsAnalytic</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a7e05589647ebd32f4e8d7c1d3ee3e4bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasType</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>adca1f717bba0870f782ae5225308d5ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addEntry</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a9caa3c0ef2a186c8660b098237b78a3e</anchor>
      <arglist>(const Teuchos::RCP&lt; typename Sacado::mpl::apply&lt; EntryType, EvalType &gt;::type &gt; &amp;entry, const bool allow_overwrite=false)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; typename Sacado::mpl::apply&lt; EntryType, EvalType &gt;::type &gt;</type>
      <name>getEntry</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a18fc5ceebf1cbe69e16d7d3ca149a2fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const typename Sacado::mpl::apply&lt; EntryType, EvalType &gt;::type &gt;</type>
      <name>getEntry</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a5db2c9f91c38027e4622caeff23a3597</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a9f4c345384e82ec408d682e6b25a76de</anchor>
      <arglist>(std::ostream &amp;os, bool print_values=false) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, Teuchos::RCP&lt; EntryBase &gt; &gt;</type>
      <name>EvalMap</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a2737b83c238b24ba7842d20cc8b89492</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>EvalMap::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>ab86522e4cdfd7d6ffabad8f91d463c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>EvalMap::iterator</type>
      <name>iterator</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>ae43ebbda119aaeb7c65e0053bc301bc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getTypeName</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>ab3e8de2a225e27d2fcc6cb3a4f978693</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EvalMap</type>
      <name>family</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>aa4eb5b541d2a6473ee9ed8b6947c5430</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::string</type>
      <name>name</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>acfcae6d0c2979ab085703eb0031fc878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>supports_ad</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a3b5dceb70cb1a10b633270e1be38cbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>supports_analytic</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>adb01f0040e00c16555236384060df0f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ParameterFamilyBase</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>ac4120c7862aeba5a383f95fce49205bb</anchor>
      <arglist>(const ParameterFamilyBase &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ParameterFamilyBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a83495148e919b4ac4e701be740c5eb00</anchor>
      <arglist>(const ParameterFamilyBase &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParameterFamilyBase&lt; AbstractScalarParameterEntry, ScalarParameterEntry&lt; _, EvalTypeTraits &gt; &gt;</name>
    <filename>classSacado_1_1ParameterFamilyBase.html</filename>
    <member kind="function">
      <type></type>
      <name>ParameterFamilyBase</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a54bc1c4f5c8000d06ce81b9ef7903809</anchor>
      <arglist>(const std::string &amp;name, bool supports_ad, bool supports_analytic)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterFamilyBase</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>ad030241b8e25dcfb4012bc68610e78bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a2f2508a34f8171d527b156335c388f1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supportsAD</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a1afeb2a0dc6f7e2a9a7733bb73319abc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supportsAnalytic</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a7e05589647ebd32f4e8d7c1d3ee3e4bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasType</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>adca1f717bba0870f782ae5225308d5ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addEntry</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a9caa3c0ef2a186c8660b098237b78a3e</anchor>
      <arglist>(const Teuchos::RCP&lt; typename Sacado::mpl::apply&lt; ScalarParameterEntry&lt; _, EvalTypeTraits &gt;, EvalType &gt;::type &gt; &amp;entry, const bool allow_overwrite=false)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; typename Sacado::mpl::apply&lt; ScalarParameterEntry&lt; _, EvalTypeTraits &gt;, EvalType &gt;::type &gt;</type>
      <name>getEntry</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a18fc5ceebf1cbe69e16d7d3ca149a2fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const typename Sacado::mpl::apply&lt; ScalarParameterEntry&lt; _, EvalTypeTraits &gt;, EvalType &gt;::type &gt;</type>
      <name>getEntry</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a5db2c9f91c38027e4622caeff23a3597</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a9f4c345384e82ec408d682e6b25a76de</anchor>
      <arglist>(std::ostream &amp;os, bool print_values=false) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, Teuchos::RCP&lt; AbstractScalarParameterEntry &gt; &gt;</type>
      <name>EvalMap</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a2737b83c238b24ba7842d20cc8b89492</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>EvalMap::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>ab86522e4cdfd7d6ffabad8f91d463c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>EvalMap::iterator</type>
      <name>iterator</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>ae43ebbda119aaeb7c65e0053bc301bc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getTypeName</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>ab3e8de2a225e27d2fcc6cb3a4f978693</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EvalMap</type>
      <name>family</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>aa4eb5b541d2a6473ee9ed8b6947c5430</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::string</type>
      <name>name</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>acfcae6d0c2979ab085703eb0031fc878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>supports_ad</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a3b5dceb70cb1a10b633270e1be38cbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>supports_analytic</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>adb01f0040e00c16555236384060df0f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ParameterFamilyBase</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>ac4120c7862aeba5a383f95fce49205bb</anchor>
      <arglist>(const ParameterFamilyBase &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ParameterFamilyBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ParameterFamilyBase.html</anchorfile>
      <anchor>a83495148e919b4ac4e701be740c5eb00</anchor>
      <arglist>(const ParameterFamilyBase &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ParameterLibraryBase</name>
    <filename>classSacado_1_1ParameterLibraryBase.html</filename>
    <templarg>FamilyType</templarg>
    <templarg>EntryType</templarg>
    <member kind="typedef">
      <type>FamilyMap::iterator</type>
      <name>iterator</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>af80fda11bb34c1815071c10250c5b78c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FamilyMap::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a524a052cceff33d438da7a227db4dcbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterLibraryBase</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a54db69935f9b75d867b0ff38a4b22c89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterLibraryBase</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a2362b070246ca20d47b70d04d5d0e28f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParameter</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a9bb458de1af374752794f70691df0864</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParameterForType</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>ab647ac107b6c7b37bf4265a737eac36f</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addParameterFamily</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a474243319337de2f82344470ed928861</anchor>
      <arglist>(const std::string &amp;name, bool supports_ad, bool supports_analytic)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addEntry</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a2520269c6505d7290e8ccdf4f816af7c</anchor>
      <arglist>(const std::string &amp;name, const Teuchos::RCP&lt; typename Sacado::mpl::apply&lt; EntryType, EvalType &gt;::type &gt; &amp;entry, const bool allow_overwrite=false)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; typename Sacado::mpl::apply&lt; EntryType, EvalType &gt;::type &gt;</type>
      <name>getEntry</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>acd84836409021859cd17a83f5e82d1b4</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const typename Sacado::mpl::apply&lt; EntryType, EvalType &gt;::type &gt;</type>
      <name>getEntry</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a77e6e4fb66fa16561dc35c435048c2a6</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>addf5d49382fdbcadf0112be41e95e5a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a14e9fad7a4ae6946e086174424a06b79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a3cc1036ebb61ba84625d059cabc39d0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>aa47da37dca38164794cacefa1e3d36e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a581eb5a9ab87e38994219f815ff12482</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillVector</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>af51261f4dc7d0700c21cc30d76aba609</anchor>
      <arglist>(const Teuchos::Array&lt; std::string &gt; &amp;names, const Teuchos::Array&lt; BaseValueType &gt; &amp;values, ParameterVectorBase&lt; FamilyType, BaseValueType &gt; &amp;pv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>aed211bce5ff0b76c7fcec4b4747f7376</anchor>
      <arglist>(std::ostream &amp;os, bool print_values=false) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; string, Teuchos::RCP&lt; FamilyType &gt; &gt;</type>
      <name>FamilyMap</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a9166c1370af4ebe8455b440147e31065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FamilyMap</type>
      <name>library</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a2d65e3804e96e2beb8d6c1109e86b465</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ParameterLibraryBase</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>ac0f92ebf3e8a36d690c2b6499b9e5f05</anchor>
      <arglist>(const ParameterLibraryBase &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ParameterLibraryBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a35957d09ea2471e4d6e3c97ef1d0a447</anchor>
      <arglist>(const ParameterLibraryBase &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParameterLibraryBase&lt; ScalarParameterFamily&lt; EvalTypeTraits &gt;, ScalarParameterEntry&lt; _, EvalTypeTraits &gt; &gt;</name>
    <filename>classSacado_1_1ParameterLibraryBase.html</filename>
    <member kind="typedef">
      <type>FamilyMap::iterator</type>
      <name>iterator</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>af80fda11bb34c1815071c10250c5b78c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FamilyMap::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a524a052cceff33d438da7a227db4dcbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterLibraryBase</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a54db69935f9b75d867b0ff38a4b22c89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterLibraryBase</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a2362b070246ca20d47b70d04d5d0e28f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParameter</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a9bb458de1af374752794f70691df0864</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParameterForType</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>ab647ac107b6c7b37bf4265a737eac36f</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addParameterFamily</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a474243319337de2f82344470ed928861</anchor>
      <arglist>(const std::string &amp;name, bool supports_ad, bool supports_analytic)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addEntry</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a2520269c6505d7290e8ccdf4f816af7c</anchor>
      <arglist>(const std::string &amp;name, const Teuchos::RCP&lt; typename Sacado::mpl::apply&lt; ScalarParameterEntry&lt; _, EvalTypeTraits &gt;, EvalType &gt;::type &gt; &amp;entry, const bool allow_overwrite=false)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; typename Sacado::mpl::apply&lt; ScalarParameterEntry&lt; _, EvalTypeTraits &gt;, EvalType &gt;::type &gt;</type>
      <name>getEntry</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>acd84836409021859cd17a83f5e82d1b4</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const typename Sacado::mpl::apply&lt; ScalarParameterEntry&lt; _, EvalTypeTraits &gt;, EvalType &gt;::type &gt;</type>
      <name>getEntry</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a77e6e4fb66fa16561dc35c435048c2a6</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>addf5d49382fdbcadf0112be41e95e5a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a14e9fad7a4ae6946e086174424a06b79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a3cc1036ebb61ba84625d059cabc39d0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>aa47da37dca38164794cacefa1e3d36e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a581eb5a9ab87e38994219f815ff12482</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillVector</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>af51261f4dc7d0700c21cc30d76aba609</anchor>
      <arglist>(const Teuchos::Array&lt; std::string &gt; &amp;names, const Teuchos::Array&lt; BaseValueType &gt; &amp;values, ParameterVectorBase&lt; ScalarParameterFamily&lt; EvalTypeTraits &gt;, BaseValueType &gt; &amp;pv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>aed211bce5ff0b76c7fcec4b4747f7376</anchor>
      <arglist>(std::ostream &amp;os, bool print_values=false) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; string, Teuchos::RCP&lt; ScalarParameterFamily&lt; EvalTypeTraits &gt; &gt; &gt;</type>
      <name>FamilyMap</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a9166c1370af4ebe8455b440147e31065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FamilyMap</type>
      <name>library</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a2d65e3804e96e2beb8d6c1109e86b465</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ParameterLibraryBase</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>ac0f92ebf3e8a36d690c2b6499b9e5f05</anchor>
      <arglist>(const ParameterLibraryBase &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ParameterLibraryBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ParameterLibraryBase.html</anchorfile>
      <anchor>a35957d09ea2471e4d6e3c97ef1d0a447</anchor>
      <arglist>(const ParameterLibraryBase &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ParameterRegistration</name>
    <filename>classSacado_1_1ParameterRegistration.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::ScalarParameterEntry</base>
    <member kind="typedef">
      <type>ScalarParameterLibrary&lt; EvalTypeTraits &gt;</type>
      <name>ParamLib</name>
      <anchorfile>classSacado_1_1ParameterRegistration.html</anchorfile>
      <anchor>a22f11dcaa587cbafd5f08700f100dcc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterRegistration</name>
      <anchorfile>classSacado_1_1ParameterRegistration.html</anchorfile>
      <anchor>a6362ecf98db3eb85255079a047cc8073</anchor>
      <arglist>(const std::string &amp;name_, ParameterAccessor&lt; EvalType, EvalTypeTraits &gt; *access_, ParamLib &amp;paramLib)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterRegistration</name>
      <anchorfile>classSacado_1_1ParameterRegistration.html</anchorfile>
      <anchor>a3c0ce2ada4640b10509ca22538ce007e</anchor>
      <arglist>(const std::string &amp;name_, ParameterAccessor&lt; EvalType, EvalTypeTraits &gt; *access_, const Teuchos::RCP&lt; ParamLib &gt; &amp;paramLib)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterRegistration</name>
      <anchorfile>classSacado_1_1ParameterRegistration.html</anchorfile>
      <anchor>a3cc1215eb44a668965748eb4f4f9142b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRealValue</name>
      <anchorfile>classSacado_1_1ParameterRegistration.html</anchorfile>
      <anchor>a4bb06b9ffaf299fae742b8bec0e4389c</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classSacado_1_1ParameterRegistration.html</anchorfile>
      <anchor>add8ec36c46738d6953c3ed94ced7ac85</anchor>
      <arglist>(const ScalarT &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ScalarT &amp;</type>
      <name>getValue</name>
      <anchorfile>classSacado_1_1ParameterRegistration.html</anchorfile>
      <anchor>a9099bc79b57f68f6cd7ea2b58491ae48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParameterAccessor&lt; EvalType, EvalTypeTraits &gt; *</type>
      <name>access</name>
      <anchorfile>classSacado_1_1ParameterRegistration.html</anchorfile>
      <anchor>aa0bcc740cb8d32864b8f4b626e89021b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::string</type>
      <name>name</name>
      <anchorfile>classSacado_1_1ParameterRegistration.html</anchorfile>
      <anchor>a8f80fc27d5761e79a9e1ae0f943b6604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>EvalTypeTraits::template apply&lt; EvalType &gt;::type</type>
      <name>ScalarT</name>
      <anchorfile>classSacado_1_1ParameterRegistration.html</anchorfile>
      <anchor>ac03753d978bb2df5a6fd1e0f289d9c73</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ParameterVectorBase</name>
    <filename>classSacado_1_1ParameterVectorBase.html</filename>
    <templarg>FamilyType</templarg>
    <templarg>BaseValueType</templarg>
    <class kind="struct">Sacado::ParameterVectorBase::Entry</class>
    <member kind="typedef">
      <type>EntryVector::iterator</type>
      <name>iterator</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>ac50661fb760b188b5e984335ec46b1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntryVector::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>ae10a06d0d0f79402a4ad04f64a3b5f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterVectorBase</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>af4e8b5cc9833f57910fc67f1480c8161</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterVectorBase</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>ab4c7674ff2fd9a33cec2138ebca5b5d2</anchor>
      <arglist>(const ParameterVectorBase &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterVectorBase</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a9c500b87c6b5ae4a613fe2318fa64866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParameterVectorBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>adcecf013ec8e38f475b29e6e34a2451a</anchor>
      <arglist>(const ParameterVectorBase &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParam</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a3209ba60c0bd374f34c737bd7559f5a5</anchor>
      <arglist>(const Teuchos::RCP&lt; FamilyType &gt; &amp;family, BaseValueType baseValue)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a972f9a5484f788a63739676179533ade</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Entry &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>adc6b2094508fa8b3edb28047674a5b0c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const Entry &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a53fcf10868abc690ff3f41c89e626eb2</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>aa9542bfdb2e419bbbe86b98a3ae777eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a07c9ce67e363db570db9948f1afb77a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>ae95835455aeb738b6c23054d18b36bb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a0bb08d36e15b3ebdfb7884ce8f77fbaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterParameters</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a196a6f0528902d5dcd7b8875dff814a5</anchor>
      <arglist>(ParameterVectorBase &amp;ad, ParameterVectorBase &amp;analytic, ParameterVectorBase &amp;other, std::vector&lt; int &gt; &amp;index_ad, std::vector&lt; int &gt; &amp;index_analytic, std::vector&lt; int &gt; &amp;index_other)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Teuchos::Array&lt; Entry &gt;</type>
      <name>EntryVector</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a7188680f3c3361cfa383a56b6d453f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntryVector</type>
      <name>params</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a3d7cedb79e9e31797e0eafe466bb52ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParameterVectorBase&lt; ScalarParameterFamily&lt; EvalTypeTraits &gt;, double &gt;</name>
    <filename>classSacado_1_1ParameterVectorBase.html</filename>
    <member kind="typedef">
      <type>EntryVector::iterator</type>
      <name>iterator</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>ac50661fb760b188b5e984335ec46b1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntryVector::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>ae10a06d0d0f79402a4ad04f64a3b5f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterVectorBase</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>af4e8b5cc9833f57910fc67f1480c8161</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterVectorBase</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>ab4c7674ff2fd9a33cec2138ebca5b5d2</anchor>
      <arglist>(const ParameterVectorBase &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParameterVectorBase</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a9c500b87c6b5ae4a613fe2318fa64866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParameterVectorBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>adcecf013ec8e38f475b29e6e34a2451a</anchor>
      <arglist>(const ParameterVectorBase &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParam</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a3209ba60c0bd374f34c737bd7559f5a5</anchor>
      <arglist>(const Teuchos::RCP&lt; ScalarParameterFamily&lt; EvalTypeTraits &gt; &gt; &amp;family, double baseValue)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a972f9a5484f788a63739676179533ade</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entry &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>adc6b2094508fa8b3edb28047674a5b0c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const Entry &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a53fcf10868abc690ff3f41c89e626eb2</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>aa9542bfdb2e419bbbe86b98a3ae777eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a07c9ce67e363db570db9948f1afb77a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>ae95835455aeb738b6c23054d18b36bb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a0bb08d36e15b3ebdfb7884ce8f77fbaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterParameters</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a196a6f0528902d5dcd7b8875dff814a5</anchor>
      <arglist>(ParameterVectorBase &amp;ad, ParameterVectorBase &amp;analytic, ParameterVectorBase &amp;other, std::vector&lt; int &gt; &amp;index_ad, std::vector&lt; int &gt; &amp;index_analytic, std::vector&lt; int &gt; &amp;index_other)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Teuchos::Array&lt; Entry &gt;</type>
      <name>EntryVector</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a7188680f3c3361cfa383a56b6d453f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntryVector</type>
      <name>params</name>
      <anchorfile>classSacado_1_1ParameterVectorBase.html</anchorfile>
      <anchor>a3d7cedb79e9e31797e0eafe466bb52ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Perf</name>
    <filename>structPerf.html</filename>
    <member kind="function">
      <type></type>
      <name>Perf</name>
      <anchorfile>structPerf.html</anchorfile>
      <anchor>a3dbd0815611aaaeff54987747b8ee1d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>structPerf.html</anchorfile>
      <anchor>afa64f8c36945b240f49b6d7648a67732</anchor>
      <arglist>(const Perf &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>structPerf.html</anchorfile>
      <anchor>a37df5b7de95740fd6966691812b7b0d6</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Perf</name>
      <anchorfile>structPerf.html</anchorfile>
      <anchor>a3dbd0815611aaaeff54987747b8ee1d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>structPerf.html</anchorfile>
      <anchor>afa64f8c36945b240f49b6d7648a67732</anchor>
      <arglist>(const Perf &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>structPerf.html</anchorfile>
      <anchor>a37df5b7de95740fd6966691812b7b0d6</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>time</name>
      <anchorfile>structPerf.html</anchorfile>
      <anchor>a31519c1ac57c0390c9a1d0318ed62755</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>flops</name>
      <anchorfile>structPerf.html</anchorfile>
      <anchor>a40f0c1b2fc197f12ee841a4ddf8ced65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>throughput</name>
      <anchorfile>structPerf.html</anchorfile>
      <anchor>a912385d11ecd4261706c0d75357a0db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>global_elem_count</name>
      <anchorfile>structPerf.html</anchorfile>
      <anchor>af06a63536affb9d6f48743e61c81cd55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>global_node_count</name>
      <anchorfile>structPerf.html</anchorfile>
      <anchor>a8b5ba5ebbc23bdb4854da0890c0d4393</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>fill_time</name>
      <anchorfile>structPerf.html</anchorfile>
      <anchor>ad4a8a950de2a37b871a90c9c46216dd6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::PowExprType</name>
    <filename>structSacado_1_1Tay_1_1PowExprType.html</filename>
    <templarg>ExprT1</templarg>
    <templarg>ExprT2</templarg>
    <member kind="typedef">
      <type>UnaryExpr&lt; ExprT1, LogOp &gt;</type>
      <name>T3</name>
      <anchorfile>structSacado_1_1Tay_1_1PowExprType.html</anchorfile>
      <anchor>aefe1f62aed30104fdb0b7c7e6a26adeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinaryExpr&lt; ExprT2, Expr&lt; T3 &gt;, MultiplicationOp &gt;</type>
      <name>T4</name>
      <anchorfile>structSacado_1_1Tay_1_1PowExprType.html</anchorfile>
      <anchor>aa5941c981054d8d2283d82732eaa44d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnaryExpr&lt; Expr&lt; T4 &gt;, ExpOp &gt;</type>
      <name>T5</name>
      <anchorfile>structSacado_1_1Tay_1_1PowExprType.html</anchorfile>
      <anchor>ad63e94ece7aca767bb37f00590b4bbb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Expr&lt; T5 &gt;</type>
      <name>expr_type</name>
      <anchorfile>structSacado_1_1Tay_1_1PowExprType.html</anchorfile>
      <anchor>a981a24e8e1c8c6a0e4a273f478870120</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::PowExprType&lt; ExprT1, typename ExprT1::value_type &gt;</name>
    <filename>structSacado_1_1Tay_1_1PowExprType_3_01ExprT1_00_01typename_01ExprT1_1_1value__type_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>T2</name>
      <anchorfile>structSacado_1_1Tay_1_1PowExprType_3_01ExprT1_00_01typename_01ExprT1_1_1value__type_01_4.html</anchorfile>
      <anchor>ad2ebafb1b8a0d54b8a27360e76fe1933</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnaryExpr&lt; ExprT1, LogOp &gt;</type>
      <name>T3</name>
      <anchorfile>structSacado_1_1Tay_1_1PowExprType_3_01ExprT1_00_01typename_01ExprT1_1_1value__type_01_4.html</anchorfile>
      <anchor>a156ce0dd1c3f727d27e8de7aa40d471a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinaryExpr&lt; ConstExpr&lt; T2 &gt;, Expr&lt; T3 &gt;, MultiplicationOp &gt;</type>
      <name>T4</name>
      <anchorfile>structSacado_1_1Tay_1_1PowExprType_3_01ExprT1_00_01typename_01ExprT1_1_1value__type_01_4.html</anchorfile>
      <anchor>ab13c58419bc870918780d9b420c0e555</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnaryExpr&lt; Expr&lt; T4 &gt;, ExpOp &gt;</type>
      <name>T5</name>
      <anchorfile>structSacado_1_1Tay_1_1PowExprType_3_01ExprT1_00_01typename_01ExprT1_1_1value__type_01_4.html</anchorfile>
      <anchor>a6633df3c75083c74e34f82f11dec291e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Expr&lt; T5 &gt;</type>
      <name>expr_type</name>
      <anchorfile>structSacado_1_1Tay_1_1PowExprType_3_01ExprT1_00_01typename_01ExprT1_1_1value__type_01_4.html</anchorfile>
      <anchor>a00a399dc8d40f63110b157c69d757509</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::PowExprType&lt; typename ExprT2::value_type, ExprT2 &gt;</name>
    <filename>structSacado_1_1Tay_1_1PowExprType_3_01typename_01ExprT2_1_1value__type_00_01ExprT2_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT2::value_type</type>
      <name>T1</name>
      <anchorfile>structSacado_1_1Tay_1_1PowExprType_3_01typename_01ExprT2_1_1value__type_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a8e5c91c381bae986c4020e2ec9d054ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinaryExpr&lt; ExprT2, ConstExpr&lt; T1 &gt;, MultiplicationOp &gt;</type>
      <name>T4</name>
      <anchorfile>structSacado_1_1Tay_1_1PowExprType_3_01typename_01ExprT2_1_1value__type_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a5d31152de05c2e45fd0b8f9f7b8336fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnaryExpr&lt; Expr&lt; T4 &gt;, ExpOp &gt;</type>
      <name>T5</name>
      <anchorfile>structSacado_1_1Tay_1_1PowExprType_3_01typename_01ExprT2_1_1value__type_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a83a87123a6c5a319796a1f0d67bab45f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Expr&lt; T5 &gt;</type>
      <name>expr_type</name>
      <anchorfile>structSacado_1_1Tay_1_1PowExprType_3_01typename_01ExprT2_1_1value__type_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a27f5356c401f1b6efef7beaeaca05e3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote</name>
    <filename>structSacado_1_1Promote.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; A, A,                                                                                                                           typename mpl::enable_if_c&lt; !OverrideDefaultPromote&lt; A &gt;::value &gt;::type &gt;</name>
    <filename>structSacado_1_1Promote_3_01A_00_01A_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01569f54590ad70824d2ab7172c5277749.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>BaseExprType&lt; A &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Promote_3_01A_00_01A_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01569f54590ad70824d2ab7172c5277749.html</anchorfile>
      <anchor>a3b1f642f75a2fb95bba1b26aacbe0007</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; !mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   !mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   IsExpr&lt; A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   IsExpr&lt; B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   mpl::is_same&lt; typename BaseExprType&lt; typename A::value_type &gt;::type,                                                                                                                                                                                                                                                                                                                                                                                                                                                                   typename BaseExprType&lt; typename B::value_type &gt;::type &gt;::value                                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</name>
    <filename>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_010278e8e9602681c7b2e427d90e48239c.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BaseExprType&lt; A &gt;::type</type>
      <name>A_base_expr_type</name>
      <anchorfile>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_010278e8e9602681c7b2e427d90e48239c.html</anchorfile>
      <anchor>aef9788e9a6d25dfeb5ef714ac1d91046</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseExprType&lt; B &gt;::type</type>
      <name>B_base_expr_type</name>
      <anchorfile>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_010278e8e9602681c7b2e427d90e48239c.html</anchorfile>
      <anchor>ade5f19521b0ebae85851fa737c0eebbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Promote&lt; A_base_expr_type, B_base_expr_type &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_010278e8e9602681c7b2e427d90e48239c.html</anchorfile>
      <anchor>a0d184b2d6895118b73c4b25d227754db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; !mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   !mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   IsExpr&lt; A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   mpl::is_convertible&lt; B, typename BaseExprType&lt; typename A::value_type &gt;::type &gt;::value                                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</name>
    <filename>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_0172513836036ea9f38c44af841c7cc802.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BaseExprType&lt; A &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_0172513836036ea9f38c44af841c7cc802.html</anchorfile>
      <anchor>a8f6172287d153cd3eaf9ee4e72a047a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; !mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   !mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   IsExpr&lt; B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                           mpl::is_convertible&lt; A, typename BaseExprType&lt; typename B::value_type &gt;::type &gt;::value                                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</name>
    <filename>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01d560a6d7d561e685e5ea5666ee784693.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BaseExprType&lt; B &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01d560a6d7d561e685e5ea5666ee784693.html</anchorfile>
      <anchor>a5e3083b8363cc61b9de791947e34a548</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !OverrideDefaultPromote&lt; A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !OverrideDefaultPromote&lt; B &gt;::value                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</name>
    <filename>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01fa19777bba2aa1a9dc4173a09dc91886.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BaseExprType&lt; B &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01fa19777bba2aa1a9dc4173a09dc91886.html</anchorfile>
      <anchor>a819087a49ba0b8caa937a928e9ef3a44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !OverrideDefaultPromote&lt; A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !OverrideDefaultPromote&lt; B &gt;::value                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</name>
    <filename>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01328b7bce7de7c35898286b195b912500.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BaseExprType&lt; A &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01328b7bce7de7c35898286b195b912500.html</anchorfile>
      <anchor>a93e6b400d35920690e0f9a6c89ce46cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::push_back</name>
    <filename>structSacado_1_1mpl_1_1push__back.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::push_back_impl</name>
    <filename>structSacado_1_1mpl_1_1push__back__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote</name>
    <filename>structSacado_1_1mpl_1_1quote.html</filename>
    <templarg></templarg>
    <base>Sacado::mpl::quote0</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote0</name>
    <filename>structSacado_1_1mpl_1_1quote0.html</filename>
    <templarg></templarg>
    <class kind="struct">Sacado::mpl::quote0::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote1</name>
    <filename>structSacado_1_1mpl_1_1quote1.html</filename>
    <templarg>F</templarg>
    <class kind="struct">Sacado::mpl::quote1::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote2</name>
    <filename>structSacado_1_1mpl_1_1quote2.html</filename>
    <templarg>F</templarg>
    <class kind="struct">Sacado::mpl::quote2::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote3</name>
    <filename>structSacado_1_1mpl_1_1quote3.html</filename>
    <templarg>F</templarg>
    <class kind="struct">Sacado::mpl::quote3::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote4</name>
    <filename>structSacado_1_1mpl_1_1quote4.html</filename>
    <templarg>F</templarg>
    <class kind="struct">Sacado::mpl::quote4::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote5</name>
    <filename>structSacado_1_1mpl_1_1quote5.html</filename>
    <templarg>F</templarg>
    <class kind="struct">Sacado::mpl::quote5::apply</class>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote&lt; F&lt; T1 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1quote_3_01F_3_01T1_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <base>Sacado::mpl::quote1</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote&lt; F&lt; T1, T2 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1quote_3_01F_3_01T1_00_01T2_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::mpl::quote2</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote&lt; F&lt; T1, T2, T3 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1quote_3_01F_3_01T1_00_01T2_00_01T3_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::mpl::quote3</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote&lt; F&lt; T1, T2, T3, T4 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1quote_3_01F_3_01T1_00_01T2_00_01T3_00_01T4_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::mpl::quote4</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::quote&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1quote_3_01F_3_01T1_00_01T2_00_01T3_00_01T4_00_01T5_01_4_01_4.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Sacado::mpl::quote5</base>
  </compound>
  <compound kind="class">
    <name>Sacado::RadVec::RAD_DoubleIgnore</name>
    <filename>classSacado_1_1RadVec_1_1RAD__DoubleIgnore.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad::RAD_DoubleIgnore</name>
    <filename>classSacado_1_1Rad_1_1RAD__DoubleIgnore.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::Rad2::RAD_DoubleIgnore</name>
    <filename>classSacado_1_1Rad2_1_1RAD__DoubleIgnore.html</filename>
  </compound>
  <compound kind="class">
    <name>Sacado::Random</name>
    <filename>classSacado_1_1Random.html</filename>
    <templarg>ScalarT</templarg>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a1f1323ec0ca6e767d78d33d2c1c8cd88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a0c41cafb42aba0cb5f8f8b98f565e7ba</anchor>
      <arglist>(ScalarT a_, ScalarT b_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a2bef033ba18fc2dd6e8ec2625ebd9e79</anchor>
      <arglist>(ScalarT a_, ScalarT b_, int s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Random</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a6f9851c07a02eb138313c973fb811ec3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a58ad527c9fcfe31088e2c84c8d47d5c0</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>ScalarT</type>
      <name>number</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>ae0b7378e78d72fa0350b23c43fcea97a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>checkSeed</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>abde0370f90803c1f5b2efa785ad1f5e0</anchor>
      <arglist>(const std::string &amp;func, int s)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScalarT</type>
      <name>a</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a5eca0c79e7025b463fa37dad0e93c002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScalarT</type>
      <name>b</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>adcd140ad582f5f125cca44d3eebc641c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScalarT</type>
      <name>seed</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a7ceb009026da49a92266f5f12173ff67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Random&lt; double &gt;</name>
    <filename>classSacado_1_1Random.html</filename>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a1f1323ec0ca6e767d78d33d2c1c8cd88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a0c41cafb42aba0cb5f8f8b98f565e7ba</anchor>
      <arglist>(double a_, double b_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a2bef033ba18fc2dd6e8ec2625ebd9e79</anchor>
      <arglist>(double a_, double b_, int s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Random</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a6f9851c07a02eb138313c973fb811ec3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a58ad527c9fcfe31088e2c84c8d47d5c0</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>number</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>ae0b7378e78d72fa0350b23c43fcea97a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>checkSeed</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>abde0370f90803c1f5b2efa785ad1f5e0</anchor>
      <arglist>(const std::string &amp;func, int s)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>a</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a5eca0c79e7025b463fa37dad0e93c002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>b</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>adcd140ad582f5f125cca44d3eebc641c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>seed</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a7ceb009026da49a92266f5f12173ff67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Random&lt; ScalarType &gt;</name>
    <filename>classSacado_1_1Random.html</filename>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a1f1323ec0ca6e767d78d33d2c1c8cd88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a0c41cafb42aba0cb5f8f8b98f565e7ba</anchor>
      <arglist>(ScalarType a_, ScalarType b_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Random</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a2bef033ba18fc2dd6e8ec2625ebd9e79</anchor>
      <arglist>(ScalarType a_, ScalarType b_, int s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Random</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a6f9851c07a02eb138313c973fb811ec3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a58ad527c9fcfe31088e2c84c8d47d5c0</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>ScalarType</type>
      <name>number</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>ae0b7378e78d72fa0350b23c43fcea97a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>checkSeed</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>abde0370f90803c1f5b2efa785ad1f5e0</anchor>
      <arglist>(const std::string &amp;func, int s)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScalarType</type>
      <name>a</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a5eca0c79e7025b463fa37dad0e93c002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScalarType</type>
      <name>b</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>adcd140ad582f5f125cca44d3eebc641c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScalarType</type>
      <name>seed</name>
      <anchorfile>classSacado_1_1Random.html</anchorfile>
      <anchor>a7ceb009026da49a92266f5f12173ff67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::range_c</name>
    <filename>structSacado_1_1mpl_1_1range__c.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg>M</templarg>
    <templarg>Delta</templarg>
    <member kind="typedef">
      <type>range_c_tag</type>
      <name>tag</name>
      <anchorfile>structSacado_1_1mpl_1_1range__c.html</anchorfile>
      <anchor>addac454950a94b6d3e70d7b5a8b0b472</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>range_c</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1range__c.html</anchorfile>
      <anchor>a8fb4e816a35ad16105cbf36447eab991</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>integral_type</name>
      <anchorfile>structSacado_1_1mpl_1_1range__c.html</anchorfile>
      <anchor>a6fb6d6a2b9f166ca26b1833cdd052b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>sz</name>
      <anchorfile>structSacado_1_1mpl_1_1range__c.html</anchorfile>
      <anchor>a08a767f095406ebc7313d2ed31522597</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>start_value</name>
      <anchorfile>structSacado_1_1mpl_1_1range__c.html</anchorfile>
      <anchor>a98a7c9750de0e4553fa668a00913dae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>end_value</name>
      <anchorfile>structSacado_1_1mpl_1_1range__c.html</anchorfile>
      <anchor>a280882b815c611258d571eb0413fd47f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>step_value</name>
      <anchorfile>structSacado_1_1mpl_1_1range__c.html</anchorfile>
      <anchor>a76ccce45c5c5a833f0bd481175b379cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::range_c_iterator</name>
    <filename>structSacado_1_1mpl_1_1range__c__iterator.html</filename>
    <templarg></templarg>
    <templarg>Pos</templarg>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>value</name>
      <anchorfile>structSacado_1_1mpl_1_1range__c__iterator.html</anchorfile>
      <anchor>a255f989d743422becfc4f2eeed2e46a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::range_c_tag</name>
    <filename>structSacado_1_1mpl_1_1range__c__tag.html</filename>
  </compound>
  <compound kind="class">
    <name>RealFadOpsUnitTest2</name>
    <filename>classRealFadOpsUnitTest2.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>FadOpsUnitTest2</base>
    <member kind="function">
      <type></type>
      <name>RealFadOpsUnitTest2</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>af024ec6b3aa7b7082b94c63c796dd15f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealFadOpsUnitTest2</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a21001517c17b0cb019d9b6a16bb1aa48</anchor>
      <arglist>(int numComponents, double absolute_tolerance, double relative_tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testLessThanOrEquals</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>ab5df93229c19dd9f0edce9cbe7891f10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGreaterThanOrEquals</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a220a70c4728a7830c1bbf40b2d3785ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testLessThan</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>ae9f7395f9d9c5ce02b3f5cb9cbeddd98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testGreaterThan</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a0c38ddfe0628546a21fa09f3033b868e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testACos</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>ac2f5e6a289c1999b4bf33836087e5bba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testASin</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>ad9c66f05b60e9d374ece41f0b42af288</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testATan</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>acfa4b064d8b8597e46e0e609f1186a80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testACosh</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a07b7c1b8b8b24de7567b6d0e821ca281</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testASinh</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>af41598d3ccbcf440aa6a3a4e244a639f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testATanh</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>ac8a287255060d40883366d5a5f53e2ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testAbs</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a0ce2f5a15460dbb43d11ecf921f24a9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testFAbs</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>ab8fbb726999342a9b90a509376005610</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testATan2</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>aa65e8f1adc3617d3e70078a0d0c8216b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testMax</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a7c1812151353359ed57ede516d0ba3d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testMin</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a1a096126bcd8878e472506ecece0232c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>ad6951f42aa27cd2aedad5a39898d56e8</anchor>
      <arglist>(RealFadOpsUnitTest2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>adc859c77e1340db6145d36d8dd9ecfc5</anchor>
      <arglist>(testAddition)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a16aff81857f22b4e77bb21ea5b4c5622</anchor>
      <arglist>(testSubtraction)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>afaf7debd903ae88a6d2d1902e14bf8c5</anchor>
      <arglist>(testMultiplication)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>afdcd7a3f570c8830e63152600588e35d</anchor>
      <arglist>(testDivision)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a2502b95a491076a32d8f16bc117ff4ec</anchor>
      <arglist>(testEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a5734b0a8865cdff20b979585b493f5f3</anchor>
      <arglist>(testNotEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>aafec1dad4fd8eebb1ca0ef0660daaaf1</anchor>
      <arglist>(testLessThanOrEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a5e3dc19f9ad1ea27fd108c8c9c49048f</anchor>
      <arglist>(testGreaterThanOrEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a2eb8ff055930dc352c6ca7c95587b473</anchor>
      <arglist>(testLessThan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>ab01aab6181be8c31586598439640ade5</anchor>
      <arglist>(testGreaterThan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a451a68234db6ad3e79390489570f0f31</anchor>
      <arglist>(testPow)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a86aba22686d94e81ae1a22416381eb20</anchor>
      <arglist>(testATan2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a2e7fd1a5112ebfacfd2b5637b611bd99</anchor>
      <arglist>(testMax)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a196b6afe421238937e56ced6bbd851d4</anchor>
      <arglist>(testMin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a0117784a96572d67ce76cc99c2d14ee2</anchor>
      <arglist>(testUnaryPlus)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a0dac4336fef1d1a439c3cd2756b81ce2</anchor>
      <arglist>(testUnaryMinus)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a9f25903669bbd6ee6116d745512b2a71</anchor>
      <arglist>(testExp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a87f48747704ddf7175c0eaf5565d93cf</anchor>
      <arglist>(testLog)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a9af612f38b8d881a17f6de5adc8daf37</anchor>
      <arglist>(testLog10)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a5407d7284bab2c10f98c0303b95b996b</anchor>
      <arglist>(testSqrt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a61ceef96b9d276a2bacc9e2b17e0cf59</anchor>
      <arglist>(testCos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a810708649834c46e54381f2ecb35aae8</anchor>
      <arglist>(testSin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>ac60ac0aa0f1ca63566b32abb5ddfa335</anchor>
      <arglist>(testTan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>aeb95cffdf2178820789ea4b940128913</anchor>
      <arglist>(testACos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a6273a1bcc60e54a2f167aed34bfc4fe0</anchor>
      <arglist>(testASin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a7fe76970c98be7de17459324e0edc315</anchor>
      <arglist>(testATan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>aa834f68858c2c4797c3ab8488dda08f2</anchor>
      <arglist>(testCosh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a84219a90d1bad4ece3b4af583840797d</anchor>
      <arglist>(testSinh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a0d12841cc07234326d9f4f209251b94d</anchor>
      <arglist>(testTanh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a6e34ba63cfe86b51cdac31db807a44c3</anchor>
      <arglist>(testACosh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a4dff83cceb7d710516f9668deab4e873</anchor>
      <arglist>(testASinh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a26505b3a3a30d3c5f4e75773ce6ad860</anchor>
      <arglist>(testATanh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>ad322252be256f04ec395b71fc6e3ae77</anchor>
      <arglist>(testAbs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>af78f1e79089b8d41bb132f740bd88950</anchor>
      <arglist>(testFAbs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>aa848fa0ad4b3a4b4338b1f4c6fa3c72b</anchor>
      <arglist>(testPlusEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a95296267cd129100039b319f0dc6d0a0</anchor>
      <arglist>(testMinusEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>afea00d4cf3a26551398a60793eb291b3</anchor>
      <arglist>(testTimesEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a4be08799097fa400e4401769ecb71705</anchor>
      <arglist>(testDivideEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a06d5b36ac070c3a1cde7ec8ee21ae956</anchor>
      <arglist>(testEqualsLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>aaebd4b8e58c25f3960da8a08eaac8785</anchor>
      <arglist>(testPlusEqualsLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a27d132196daa591df3f52892a4c1259a</anchor>
      <arglist>(testMinusEqualsLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>aded3098bd6fcc433c528c80256e9adbf</anchor>
      <arglist>(testTimesEqualsLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a39d5d66b8341624017543855cdf83f00</anchor>
      <arglist>(testDivideEqualsLR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>ad30424ce3d41589a2f92737f3e28579e</anchor>
      <arglist>(testResizeBug6135)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a721cad481d1b4354207ba287e85d1205</anchor>
      <arglist>(testEquality)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a2d86ec3d5fd9b2bd2394e7842d970bb3</anchor>
      <arglist>(testEqualityConstL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a78f38e55bf0ab5655e16f16b8e2ee76a</anchor>
      <arglist>(testEqualityConstR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_END</name>
      <anchorfile>classRealFadOpsUnitTest2.html</anchorfile>
      <anchor>a393a131c8ff564d2607baa548ef4328a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::RemoveConst</name>
    <filename>structSacado_1_1RemoveConst.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structSacado_1_1RemoveConst.html</anchorfile>
      <anchor>acfcec1951cb1d9ec04e16a70348c4553</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::RemoveConst&lt; const T &gt;</name>
    <filename>structSacado_1_1RemoveConst_3_01const_01T_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structSacado_1_1RemoveConst_3_01const_01T_01_4.html</anchorfile>
      <anchor>a095c7dbed31d398ad5980559af49f480</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ScalarAssignKernel</name>
    <filename>structScalarAssignKernel.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ViewType::execution_space</type>
      <name>execution_space</name>
      <anchorfile>structScalarAssignKernel.html</anchorfile>
      <anchor>a36bf7274b36cbab7d1fa7330eff3289e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ViewType::size_type</type>
      <name>size_type</name>
      <anchorfile>structScalarAssignKernel.html</anchorfile>
      <anchor>a0d10a15f0933186e41b10bae9d9b990b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarAssignKernel</name>
      <anchorfile>structScalarAssignKernel.html</anchorfile>
      <anchor>aa2e9a741a327a5ca6ed7ea1e83ed3131</anchor>
      <arglist>(const ViewType &amp;v, const ScalarType &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>structScalarAssignKernel.html</anchorfile>
      <anchor>ae3ebf2d3860198fa0e5c5d9b14402d6a</anchor>
      <arglist>(const size_type i) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structScalarAssignKernel.html</anchorfile>
      <anchor>a0366156daeb7cace6eb0fc841f43e2a5</anchor>
      <arglist>(const ViewType &amp;v, const ScalarType &amp;s)</arglist>
    </member>
    <member kind="variable">
      <type>const ViewType</type>
      <name>m_v</name>
      <anchorfile>structScalarAssignKernel.html</anchorfile>
      <anchor>a05ea3747b13530930ebd2fcdebe6a46a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ScalarType</type>
      <name>m_s</name>
      <anchorfile>structScalarAssignKernel.html</anchorfile>
      <anchor>aaf3c50f6eff956e460a128f4e8110d91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::FlopCounterPack::ScalarFlopCounter</name>
    <filename>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</filename>
    <templarg>T</templarg>
    <base>Base&lt; ScalarFlopCounter&lt; T &gt; &gt;</base>
    <class kind="struct">Sacado::FlopCounterPack::ScalarFlopCounter::apply</class>
    <member kind="typedef">
      <type>RemoveConst&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a38f0441abe5c8808801f615dba0e15e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a2307fa3e82c2f5df62717543bc79327b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a0782c0b0e835c20cf354d08c6f462ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static FlopCounts</type>
      <name>flopCounts_</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a590cb695775889b5d5d7c922d6ed5c9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetCounters</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a97dfdbc7fd9e1030ee5936a151260056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>finalizeCounters</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>ae0d9ee66fc5d1cdada68a0e437533fdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FlopCounts</type>
      <name>getCounters</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a612d9e35af02af85278e2d88b6c07b06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>printCounters</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a886ad91da1959897f8f945d2275dd220</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarFlopCounter</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>acf3007d9715f7986f6879b30e748b646</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarFlopCounter</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>af917ed0fe0a03b1b8f8d4df529dfbe82</anchor>
      <arglist>(const S &amp;v, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a672021afb5bd5645298e9781177e0d73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>val</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a68ab4e2153fa4ce1aec756466e5a612a</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCALAR_FLOP_COUNTER_BINARY_OP_ASSIGN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a86b711a23bdb1df29b6626bd62cf14ee</anchor>
      <arglist>(=, FlopCounts::ASSIGN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCALAR_FLOP_COUNTER_BINARY_OP_ASSIGN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a8d4f2b8307937fd4b80562787ad61134</anchor>
      <arglist>(+=, FlopCounts::PLUS_ASSIGN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCALAR_FLOP_COUNTER_BINARY_OP_ASSIGN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a2fcd41739e8d9907ac902c1e17e23161</anchor>
      <arglist>(-=, FlopCounts::MINUS_ASSIGN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCALAR_FLOP_COUNTER_BINARY_OP_ASSIGN</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a5349c1b29bc036bb959f2a119cef5fcf</anchor>
      <arglist>(/=, FlopCounts::DIVIDE_ASSIGN)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>incrCounter</name>
      <anchorfile>classSacado_1_1FlopCounterPack_1_1ScalarFlopCounter.html</anchorfile>
      <anchor>a609f8c5af22fc60f254f45e80df6c083</anchor>
      <arglist>(const FlopCounts::EFlopType &amp;ft)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ScalarParameterEntry</name>
    <filename>classSacado_1_1ScalarParameterEntry.html</filename>
    <templarg>EvalType</templarg>
    <templarg>EvalTypeTraits</templarg>
    <base>Sacado::AbstractScalarParameterEntry</base>
    <member kind="typedef">
      <type>EvalTypeTraits::template apply&lt; EvalType &gt;::type</type>
      <name>ScalarT</name>
      <anchorfile>classSacado_1_1ScalarParameterEntry.html</anchorfile>
      <anchor>a4df97292dbecf40b655c238832adee6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarParameterEntry</name>
      <anchorfile>classSacado_1_1ScalarParameterEntry.html</anchorfile>
      <anchor>ad3377606fd4f323bd775451ba86af0ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarParameterEntry</name>
      <anchorfile>classSacado_1_1ScalarParameterEntry.html</anchorfile>
      <anchor>a6719591c61b7db2018189df50fe89f18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classSacado_1_1ScalarParameterEntry.html</anchorfile>
      <anchor>a2159dbec8c10b053a6ab31395a6b28b5</anchor>
      <arglist>(const ScalarT &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const ScalarT &amp;</type>
      <name>getValue</name>
      <anchorfile>classSacado_1_1ScalarParameterEntry.html</anchorfile>
      <anchor>a7073d0414aff4da2b34c582db879c1fe</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRealValue</name>
      <anchorfile>classSacado_1_1ScalarParameterEntry.html</anchorfile>
      <anchor>a5fcb2577aafa7e4d81d3243e150ad8fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSacado_1_1ScalarParameterEntry.html</anchorfile>
      <anchor>a4cdcce7d7eeb557f406edc1f83289378</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ScalarParameterFamily</name>
    <filename>classSacado_1_1ScalarParameterFamily.html</filename>
    <templarg>EvalTypeTraits</templarg>
    <base>ParameterFamilyBase&lt; AbstractScalarParameterEntry, ScalarParameterEntry&lt; _, EvalTypeTraits &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>ScalarParameterFamily</name>
      <anchorfile>classSacado_1_1ScalarParameterFamily.html</anchorfile>
      <anchor>a913957118849b9cf1e18d7f97b670e0a</anchor>
      <arglist>(const std::string &amp;name_, bool supports_ad_, bool supports_analytic_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarParameterFamily</name>
      <anchorfile>classSacado_1_1ScalarParameterFamily.html</anchorfile>
      <anchor>adb9bdb3404b6cc591fb2a7248515ae37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRealValueForAllTypes</name>
      <anchorfile>classSacado_1_1ScalarParameterFamily.html</anchorfile>
      <anchor>a767e56ee362f435c77d9eff1ebfd50a5</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRealValue</name>
      <anchorfile>classSacado_1_1ScalarParameterFamily.html</anchorfile>
      <anchor>abe2b752d3a0c505d16bb0705b57e208e</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSacado_1_1ScalarParameterFamily.html</anchorfile>
      <anchor>ad16652b53110e5ffea39144145f7c8ac</anchor>
      <arglist>(const typename EvalTypeTraits::template apply&lt; EvalType &gt;::type &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRealValue</name>
      <anchorfile>classSacado_1_1ScalarParameterFamily.html</anchorfile>
      <anchor>ad39bcff205acf3e28d7426cf40a2e2fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const EvalTypeTraits::template apply&lt; EvalType &gt;::type &amp;</type>
      <name>getValue</name>
      <anchorfile>classSacado_1_1ScalarParameterFamily.html</anchorfile>
      <anchor>a9b3c438aec7d146f3af9ce5612393f23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::ParameterFamilyBase&lt; AbstractScalarParameterEntry, ScalarParameterEntry&lt; _, EvalTypeTraits &gt; &gt;</type>
      <name>BaseT</name>
      <anchorfile>classSacado_1_1ScalarParameterFamily.html</anchorfile>
      <anchor>a0cd7de167f3e9435a208c24b46620f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ScalarParameterFamily</name>
      <anchorfile>classSacado_1_1ScalarParameterFamily.html</anchorfile>
      <anchor>a01655dca909fd37f145c44b14f2ea1fa</anchor>
      <arglist>(const ScalarParameterFamily &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ScalarParameterFamily &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ScalarParameterFamily.html</anchorfile>
      <anchor>abc567d91d9c2631f29dcd06f6b0704c5</anchor>
      <arglist>(const ScalarParameterFamily &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Sacado::ScalarParameterEntry&lt; EvalType &gt;::ScalarT</type>
      <name>getValue</name>
      <anchorfile>classSacado_1_1ScalarParameterFamily.html</anchorfile>
      <anchor>ad8a9bf36b698953c3cc1e7cb30e0d809</anchor>
      <arglist>(const ScalarParameterFamily&lt; EvalTypeTraits &gt; &amp;spf)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ScalarParameterLibrary</name>
    <filename>classSacado_1_1ScalarParameterLibrary.html</filename>
    <templarg></templarg>
    <base>ParameterLibraryBase&lt; ScalarParameterFamily&lt; EvalTypeTraits &gt;, ScalarParameterEntry&lt; _, EvalTypeTraits &gt; &gt;</base>
    <member kind="typedef">
      <type>ParameterLibraryBase&lt; ScalarParameterFamily&lt; EvalTypeTraits &gt;, ScalarParameterEntry&lt; _, EvalTypeTraits &gt; &gt;</type>
      <name>BaseT</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>a42f825db3c42f357d27e5ad14106face</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarParameterLibrary</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>a289fef40bc546c4a26f337c59ded7f72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarParameterLibrary</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>a68017f0ef59fd487a4c81b7ced2c92dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRealValueForAllTypes</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>a6928a021ecd9165173280dc74a4f8e51</anchor>
      <arglist>(const std::string &amp;name, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRealValue</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>a2712d7fa5b82c98084922aeec4c36a37</anchor>
      <arglist>(const std::string &amp;name, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>a5f51dee1446f09f6799c7fa09030ae63</anchor>
      <arglist>(const std::string &amp;name, const typename EvalTypeTraits::template apply&lt; EvalType &gt;::type &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRealValue</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>aa8df116638adf2c3a840f2baf7d5900e</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const EvalTypeTraits::template apply&lt; EvalType &gt;::type &amp;</type>
      <name>getValue</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>a78e450ea012dba35ee0858e4b804f60e</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillVector</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>a584e45496649f87272bb229a6e5f92e9</anchor>
      <arglist>(const Teuchos::Array&lt; std::string &gt; &amp;names, ScalarParameterVector&lt; EvalTypeTraits &gt; &amp;pv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ScalarParameterLibrary &amp;</type>
      <name>getInstance</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>a2d43cddae2fd1f7d3dc9d465aee11e65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ScalarParameterLibrary</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>ab89f8ecbd97cb2c62bd976b711fe04ff</anchor>
      <arglist>(const ScalarParameterLibrary &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ScalarParameterLibrary &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ScalarParameterLibrary.html</anchorfile>
      <anchor>a9dc68ce903f21eade3542b641c862fb1</anchor>
      <arglist>(const ScalarParameterLibrary &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ScalarParameterVector</name>
    <filename>classSacado_1_1ScalarParameterVector.html</filename>
    <templarg>EvalTypeTraits</templarg>
    <base>ParameterVectorBase&lt; ScalarParameterFamily&lt; EvalTypeTraits &gt;, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>ScalarParameterVector</name>
      <anchorfile>classSacado_1_1ScalarParameterVector.html</anchorfile>
      <anchor>a5544f2649d56f5e620717fd3a5d84625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarParameterVector</name>
      <anchorfile>classSacado_1_1ScalarParameterVector.html</anchorfile>
      <anchor>a7a7ddc4c2b1df98159c3399b67695046</anchor>
      <arglist>(const ScalarParameterVector &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarParameterVector</name>
      <anchorfile>classSacado_1_1ScalarParameterVector.html</anchorfile>
      <anchor>a2cd55fb7744ceeabaf9d4850bfbc0b17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScalarParameterVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1ScalarParameterVector.html</anchorfile>
      <anchor>a394d784157ddf69ff8853e119a76091a</anchor>
      <arglist>(const ScalarParameterVector &amp;source)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType</name>
    <filename>structSacado_1_1ScalarType.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType.html</anchorfile>
      <anchor>a531306ed7dfbb8cac7514592ad9e93ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>CacheFad::DFad&lt; ValueT &gt;::ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>af65108333a794c49d4c61eac0fb50b4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; CacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ScalarType&lt; typename CacheFad::Expr&lt; T &gt;::value_type &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a707c97f7f386132ca96b20817698cf3e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>CacheFad::SFad&lt; ValueT, Num &gt;::ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4c94f1a7f0d60ac1c17151bbd2130ebf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>CacheFad::SLFad&lt; ValueT, Num &gt;::ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a8accc3f49a84dc29354cd308ee37f380</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt;::ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a79a41bb9e3bf5b80b7ced59b1375594a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; const T &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01const_01T_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>const ScalarType&lt; T &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01const_01T_01_4.html</anchorfile>
      <anchor>a345f5168eb5568ee450157d0c88fc7dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ELRCacheFad::DFad&lt; ValueT &gt;::ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ab8dd29e90bc3e2e63dc85f90d4b3ec6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ScalarType&lt; typename ELRCacheFad::Expr&lt; T &gt;::value_type &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a86bed18913cb98d20f620fe9480af95e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ELRCacheFad::SFad&lt; ValueT, Num &gt;::ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab9f3491b732587e6e59d945f0d1f1311</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ELRCacheFad::SLFad&lt; ValueT, Num &gt;::ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ad875c13946d5642bb454369d0e0b5a47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt;::ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a10c28a2c53b2f116e1858f82f16abd62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ELRFad::DFad&lt; ValueT &gt;::ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a134c6775f0f7bdea6f3198a3dc4e7189</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ScalarType&lt; typename ELRFad::Expr&lt; T &gt;::value_type &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a5e59a96f26c4e656d43e5075c8427bb6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ELRFad::SFad&lt; ValueT, Num &gt;::ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac95cf6e7ac2a73fc529ecb142f52bdc7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ELRFad::SLFad&lt; ValueT, Num &gt;::ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a46716a7c69bdb3d9b1d5126838c2eb48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt;::ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a6d1888f0b4cc0eaff69e8f8a7776086d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Fad::DFad&lt; ValueT &gt;::ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a9e81efac9ac4ddf6a632edd0171446b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Fad::DMFad&lt; ValueT &gt;::ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a50e15a3685016ac5805431d252aeddd6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Fad::DVFad&lt; ValueT &gt;::ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a3ffd322b088ff27da66bd4a2de436c90</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Fad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ScalarType&lt; typename Fad::Expr&lt; T &gt;::value_type &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a0ce92acf416101bd6fee50f965aa327d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>Fad::SFad&lt; ValueT, Num &gt;::ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a8d68ded0fb5f76b3912bffce59110a15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Fad::SimpleFad&lt; ValueT &gt;::ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a8cbe0c2ceb948a84127d83a090273b4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>Fad::SLFad&lt; ValueT, Num &gt;::ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aa6487a4e4385a2eb009b7c06c36052d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt;::ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>ab2c4dca5214f5673a6a07538bbbe55b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ScalarType&lt; ScalarT &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</anchorfile>
      <anchor>a7b4ec8cff2d5b2e07261782de1861f33</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; LFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ScalarType&lt; typename LFad::Expr&lt; T &gt;::value_type &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a152f4b2bc5ae24d200e5e7a53e9609b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ScalarType&lt; typename LFad::LogicalSparse&lt; ValT, LogT &gt;::value_type &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a0edd91d81e03cb7997945763cc42d57b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Rad2::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ScalarType&lt; T &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a7bd4ee64600013b24bb60bd40916dfaa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Rad2::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Rad2_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ScalarType&lt; T &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01Rad2_1_1ADvari_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a11f17fd1a309e3b44761f416730abdad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Rad::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ScalarType&lt; T &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a586a946e6aed6fc455ea7c7d51d22771</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Rad::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Rad_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ScalarType&lt; T &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01Rad_1_1ADvari_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a85e8bc4543a758d6438f13c55f309290</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; RadVec::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ScalarType&lt; T &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>acc625ed0079452f887b94e783946f342</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; RadVec::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01RadVec_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ScalarType&lt; T &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01RadVec_1_1ADvari_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aa02136a9085c7b0e6dd0aca8a6966c89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Tay::CacheTaylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ScalarType&lt; T &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a90122b87f728f9e53f5d906ebb37db56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarType&lt; Tay::Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarType_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ScalarType&lt; T &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ScalarType_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a9b89f20380577d3cd7dcacf89ff80ed3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue</name>
    <filename>structSacado_1_1ScalarValue.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue.html</anchorfile>
      <anchor>a2e98d7a371932dd992a7d20141ed7cc2</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; CacheFad::DFad&lt; ValueT &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a061518358fd43db5c78db9b613780631</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; CacheFad::DFad&lt; ValueT &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ab7d3eaa868bb4f7b20e017da60d298e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a1866387a360b0f76486fabb28846914c</anchor>
      <arglist>(const CacheFad::DFad&lt; ValueT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; CacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; CacheFad::Expr&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ac2fc661b6daa9fca4c688fb4bfe6d408</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; CacheFad::Expr&lt; T &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a81d2e85293b20c1b769f142c8f1208c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>acb55a7916349489b84a7cf66ae6c98e8</anchor>
      <arglist>(const CacheFad::Expr&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueType&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae58fd6c6da389c2a8e1deefc072cbee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a43286d3487ccdb2c8b46a4452592660c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae03852182fe0034c5245a9b80c6d6023</anchor>
      <arglist>(const CacheFad::SFad&lt; ValueT, Num &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueType&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7243b2cc2b713815bce47ffe99829a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a65aeb72d22e5516b4793bd24a8e7bee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a18904a13b231087e91004117a5f9787a</anchor>
      <arglist>(const CacheFad::SLFad&lt; ValueT, Num &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a5738dedaaf8d87f0772e3ea47587532e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>aaa1e2edcb139d605125c0aa65e1a04d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>acae529889c2a55bfe450272b04c2558c</anchor>
      <arglist>(const CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a3e1a4ef87725b83bea174a1e55c9c757</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a2330b6d3ddf8b3d0b06a66a83d8f49fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a347fbb792adb9f2907131e24c5a034b7</anchor>
      <arglist>(const ELRCacheFad::DFad&lt; ValueT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a6f5d237500d1e8bc9f783e9de9e1ade5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a517034a1e8933b63ac57d19e819a00b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a0e23c363a3954e3a9a773c30d9656d74</anchor>
      <arglist>(const ELRCacheFad::Expr&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7cf640c7bbe31d138394f64abc728e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a27c1c8fd975893f8eca9c94619cf981b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a088421b528a385043396f0032af24a50</anchor>
      <arglist>(const ELRCacheFad::SFad&lt; ValueT, Num &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac7835cf66da4a1a6690ea657017e5ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a713bd891096bba5767d709a82243cc16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>acec119a524a81407935b3707de7db1c7</anchor>
      <arglist>(const ELRCacheFad::SLFad&lt; ValueT, Num &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a1b545699a0c9e853edb9434562a9f7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a924c2c8f36b358076687e5018f3432a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>aae525d4b1f36c2d6e16bdba11b1913a9</anchor>
      <arglist>(const ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRFad::DFad&lt; ValueT &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ad5ecf04c72bb89fee089577528ba1a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ELRFad::DFad&lt; ValueT &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a05379b6e3f3ee31fdea2f52d9fa20c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ad94cad0ca9f9f7faff8a55cc684eccfe</anchor>
      <arglist>(const ELRFad::DFad&lt; ValueT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRFad::Expr&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a8eea04f82ab74b7ebebb321112b25539</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ELRFad::Expr&lt; T &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a9de1972ba97742a507e69be0837bfe05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a15b1fa8ec72acd89b38be58016016a86</anchor>
      <arglist>(const ELRFad::Expr&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>afaf2f4244c4d602662fb467be96a4f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a05519c729ddac9190867d30a336ca99b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>abb86f1fc8bcf5d7bb00d4461645b11bd</anchor>
      <arglist>(const ELRFad::SFad&lt; ValueT, Num &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a38ecc31c648a60f6d11a82bbed5e8967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a4dbbfab923026fdc07da0a9c147e816d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>abccbc5b35b1bb66a9965e93cbb790ff5</anchor>
      <arglist>(const ELRFad::SLFad&lt; ValueT, Num &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a960e40a7fa18437f678ef5d8baa58186</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a472e123008c09d2474da14dc356640ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a1704e55e2f775b899aa90999c44dd0dc</anchor>
      <arglist>(const ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Fad::DFad&lt; ValueT &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>af30a659723a39e77249e815cb55a2391</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; Fad::DFad&lt; ValueT &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ab1116bd07a25797a5c477d2ed2675882</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a6aee1fc57e3ea90a09228c2415b7637f</anchor>
      <arglist>(const Fad::DFad&lt; ValueT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Fad::DMFad&lt; ValueT &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a5ea773ab0351f614b9305c61d6ad246a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; Fad::DMFad&lt; ValueT &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a49453ff53dd32707ab17d7c253186c6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a7483062c93b3f1ce06ad29416ac94879</anchor>
      <arglist>(const Fad::DMFad&lt; ValueT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Fad::DVFad&lt; ValueT &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ad316be981c67147639290a41b4de9f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; Fad::DVFad&lt; ValueT &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ad179e4ed12fc9c3152527aa5aadc05b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a0f5a51bd3a2384edea1d34353777f8e5</anchor>
      <arglist>(const Fad::DVFad&lt; ValueT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Fad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Fad::Expr&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a3829e44f160a01d05cdd72362ec5638a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; Fad::Expr&lt; T &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a4883b47ac51591fdcf456922580a90f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a16b1dee86dcc265a32fd83b9f0575b4e</anchor>
      <arglist>(const Fad::Expr&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueType&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>abf6238ad0b7ea9cd346882edf0f4fadd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a6c2061fc49fe1a5c9a759d55b97c0d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae67364b6b492b193632bfb7165c474ed</anchor>
      <arglist>(const Fad::SFad&lt; ValueT, Num &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a0e3c6045245a1d8acb7508847dd600a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ade973765de3a02629b6ae2326481eca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a55ad0c95859643d9cafd6b7691cb7162</anchor>
      <arglist>(const Fad::SimpleFad&lt; ValueT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueType&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7ed0d2782a28aa64d3b8cce9b6f410c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a99ff65c0f1c9e82c1cd0e5bbcdd236a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a3e738a9ae87f5f0c11b6bf48c657d0d4</anchor>
      <arglist>(const Fad::SLFad&lt; ValueT, Num &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>aca0b87f82773281593b73e4046272899</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>ad71466f2dc0f1b904c425f62bade7a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a7447769bdd0815a1d3838f31a8d2fd52</anchor>
      <arglist>(const Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</anchorfile>
      <anchor>a6e1ad0ea1f2edcf8e679cc0441398957</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</anchorfile>
      <anchor>a84f1dbba7f141b2e3d79eadce354468f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</anchorfile>
      <anchor>aeac41dff2ff932e8db8cd8c163a6ce21</anchor>
      <arglist>(const FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; LFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; LFad::Expr&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ab86571c02a7e2ad4d76c5a63732c7190</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; LFad::Expr&lt; T &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aa2ef142c84d1b9f08ceb80c653bf3dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a1bc1517e3b7bd125e3e93945e9257bfd</anchor>
      <arglist>(const LFad::Expr&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a19c960718d55db99cb5602cdcbb6aa31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a3dd45edcac7c6e11ee5b804efcca1874</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>ae6789a4094fb55a706f3213ef725671c</anchor>
      <arglist>(const LFad::LogicalSparse&lt; ValT, LogT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Rad2::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Rad2::ADvar&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a3567d931a5ce68acad3f0817c5b0ddc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; Rad2::ADvar&lt; T &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a683309facfef433312c44a7d9a0a3456</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static scalar_type</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a39fc4a03cbf0e42462f307b56b345ac4</anchor>
      <arglist>(const Rad2::ADvar&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Rad::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Rad::ADvar&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a90f647746f74efa55cba5730551c3718</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; Rad::ADvar&lt; T &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a2291986a949ba6413ade4453c9f86eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static scalar_type</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ad87f591343a01db17043a8457ad346d9</anchor>
      <arglist>(const Rad::ADvar&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; RadVec::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; RadVec::ADvar&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a4e8fcb1ed072c689bd6d49955e2c089e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; RadVec::ADvar&lt; T &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>afde4f673cb63531988722c53880bdec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static scalar_type</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a15bb1f75552d3aa2977911168b170e1f</anchor>
      <arglist>(const RadVec::ADvar&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Tay::CacheTaylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Tay::CacheTaylor&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ab13ac471ee8b502c74af51ce99b8dd3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; Tay::CacheTaylor&lt; T &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a019545594294d5bd284a566ef7529799</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a5ae918ccf1c29eecc16cb8df3157dcfa</anchor>
      <arglist>(const Tay::CacheTaylor&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ScalarValue&lt; Tay::Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ScalarValue_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Tay::Taylor&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>afd95dd4ceb00f62a37dc0f90e305cf81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; Tay::Taylor&lt; T &gt; &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a4fe6b027c36d07f4d3d0a40b5aa72a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const scalar_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1ScalarValue_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a82d5ca897bcb54fcff68a0cb12d6cce6</anchor>
      <arglist>(const Tay::Taylor&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SetFunctor</name>
    <filename>structSetFunctor.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>SetFunctor</name>
      <anchorfile>structSetFunctor.html</anchorfile>
      <anchor>ad5e7a1f62c7b216a43679e7759af2af5</anchor>
      <arglist>(Container &amp;c, double v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structSetFunctor.html</anchorfile>
      <anchor>a58618b02287f93f94f100a568ccf53f0</anchor>
      <arglist>(T) const </arglist>
    </member>
    <member kind="variable">
      <type>Container &amp;</type>
      <name>container</name>
      <anchorfile>structSetFunctor.html</anchorfile>
      <anchor>a0db5783024d69e8cb7738ab62d75ea4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>val</name>
      <anchorfile>structSetFunctor.html</anchorfile>
      <anchor>a09edb68e1ac9b6467614faafa9ab473f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::SFad</name>
    <filename>classSacado_1_1Fad_1_1SFad.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::FAD_NS::SFad</name>
    <filename>classSacado_1_1FAD__NS_1_1SFad.html</filename>
    <templarg>ValueT</templarg>
    <templarg>Num</templarg>
    <class kind="struct">Sacado::FAD_NS::SFad::apply</class>
    <member kind="typedef">
      <type>Expr&lt; SFadExprTag&lt; ValueT, Num &gt; &gt;</type>
      <name>ExprType</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a590e1f0bf8fb932af51a41cbe30133e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a8f48f7fc04661b78487cab9644ac3b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a1ef9ce7ef968541ba239721d4995afa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ValueT &gt;::type</type>
      <name>ScalarT</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>aa664bc475be713947c72c556403f8502</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a7087eac2f4fb9ffc78d68b85fb31a1e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a0b38d48146518f190428b541c7035d50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a99eb16db54f759cf5e33125fb072d478</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a375be0d3f3d52b772ab3f0baf9e071ca</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a521f3b5f04c4b8cb05ffb9c2592b33ed</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a1a0fbc797535829084419e9442562636</anchor>
      <arglist>(const SFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SFad.html</anchorfile>
      <anchor>a3d244ec957945432b6812f29dc1de187</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::SFad</name>
    <filename>classSacado_1_1CacheFad_1_1SFad.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::SFad</name>
    <filename>classSacado_1_1ELRCacheFad_1_1SFad.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::SFad</name>
    <filename>classSacado_1_1ELRFad_1_1SFad.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::SFadExprTag</name>
    <filename>structSacado_1_1ELRFad_1_1SFadExprTag.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Fad::SFadExprTag</name>
    <filename>structSacado_1_1Fad_1_1SFadExprTag.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::CacheFad::SFadExprTag</name>
    <filename>structSacado_1_1CacheFad_1_1SFadExprTag.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::SFadExprTag</name>
    <filename>structSacado_1_1ELRCacheFad_1_1SFadExprTag.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::SimpleFad</name>
    <filename>classSacado_1_1Fad_1_1SimpleFad.html</filename>
    <templarg>ValueT</templarg>
    <base>GeneralFad&lt; ValueT, DynamicStorage&lt; ValueT &gt; &gt;</base>
    <class kind="struct">Sacado::Fad::SimpleFad::apply</class>
    <member kind="typedef">
      <type>DynamicStorage&lt; ValueT &gt;</type>
      <name>StorageType</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a30f3ef95946b35e4d3ec2ebebf8e2657</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeneralFad&lt; ValueT, StorageType &gt;</type>
      <name>GeneralFadType</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>addf61156b53f40c6970abb7691482cab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeneralFadType::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a930a64634152f4df988c1c46bf6b4b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeneralFadType::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a8b767419721823cac398217b64ee736b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ValueT &gt;::type</type>
      <name>ScalarT</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a10e644e3cdf751f081d424d39acc6ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a51fe893e36d90c1bd52b6a8629943e7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a341bdc4adf45529ed0dbf84c833186c3</anchor>
      <arglist>(const SimpleFad &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>ae7d1a202920d6142324192c781b480c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a6894e48ffa223163a7cf606ccf65b5e9</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a1b0ba70cb47c585caacfa6d2ab894f75</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>ab2c314c4c01d14cd6943c85259906d29</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a98613d2688b3867cb470dfaa10f2598b</anchor>
      <arglist>(const SimpleFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFad</name>
      <anchorfile>classSacado_1_1Fad_1_1SimpleFad.html</anchorfile>
      <anchor>a6d5b37610775f53d1161083796d0093a</anchor>
      <arglist>(const SimpleFad &amp;x, const ValueT &amp;v, const ValueT &amp;partial)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::SinhOp</name>
    <filename>classSacado_1_1Tay_1_1SinhOp.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1SinhOp.html</anchorfile>
      <anchor>a27e05004cdc07be1bde5b2547a55a82c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1SinhOp.html</anchorfile>
      <anchor>abda05c38d1c9ba95741ffdfdbfb9e2cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1SinhOp.html</anchorfile>
      <anchor>aa3ef313e5596a6ea482f48d7472a570c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SinhOp</name>
      <anchorfile>classSacado_1_1Tay_1_1SinhOp.html</anchorfile>
      <anchor>a213704907197c440d929388ff8148a51</anchor>
      <arglist>(const ExprT &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1SinhOp.html</anchorfile>
      <anchor>a0dc3191869f011f655b00cb19ba3497f</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1SinhOp.html</anchorfile>
      <anchor>a441c9676d33dfefbdd152c2bd78b7116</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1SinhOp.html</anchorfile>
      <anchor>a20d67f284133817eec39e29d1e064369</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::valarray&lt; value_type &gt;</type>
      <name>c</name>
      <anchorfile>classSacado_1_1Tay_1_1SinhOp.html</anchorfile>
      <anchor>ac285e47cf40de7ee02d9547a98ea6b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::valarray&lt; value_type &gt;</type>
      <name>s</name>
      <anchorfile>classSacado_1_1Tay_1_1SinhOp.html</anchorfile>
      <anchor>a0b8b7e043f08b3453eb6b2d90b3606e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dc</name>
      <anchorfile>classSacado_1_1Tay_1_1SinhOp.html</anchorfile>
      <anchor>a7e731e04894a8e5bb2fe6f59ff353c70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::SinOp</name>
    <filename>classSacado_1_1Tay_1_1SinOp.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1SinOp.html</anchorfile>
      <anchor>ad59b9c9c3a70a2d7737721d0585ff069</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1SinOp.html</anchorfile>
      <anchor>a24689ebef066ffab6b40fc2d76b4d51f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1SinOp.html</anchorfile>
      <anchor>abc7ff5f6ad3cb00c57b584aa7be327e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SinOp</name>
      <anchorfile>classSacado_1_1Tay_1_1SinOp.html</anchorfile>
      <anchor>a4ab6663e2fc282a1d37b72c318e8f7aa</anchor>
      <arglist>(const ExprT &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1SinOp.html</anchorfile>
      <anchor>a1ce1aa27749dff9e3a955de4480ab2de</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1SinOp.html</anchorfile>
      <anchor>af7bde21233ec64a65a6bd730301bfce1</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1SinOp.html</anchorfile>
      <anchor>a32b4f879d56f6294f881eaa7fe98f68e</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::valarray&lt; value_type &gt;</type>
      <name>c</name>
      <anchorfile>classSacado_1_1Tay_1_1SinOp.html</anchorfile>
      <anchor>a3582c000ee03fafc2e369715bd00c9af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::valarray&lt; value_type &gt;</type>
      <name>s</name>
      <anchorfile>classSacado_1_1Tay_1_1SinOp.html</anchorfile>
      <anchor>a1fe6291f06c7278a2a8e261a2c626999</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dc</name>
      <anchorfile>classSacado_1_1Tay_1_1SinOp.html</anchorfile>
      <anchor>aacde91324c0c13c10b391b5116b33faa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::size</name>
    <filename>structSacado_1_1mpl_1_1size.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::size_impl</name>
    <filename>structSacado_1_1mpl_1_1size__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::size_impl&lt; range_c_tag &gt;</name>
    <filename>structSacado_1_1mpl_1_1size__impl_3_01range__c__tag_01_4.html</filename>
    <class kind="struct">Sacado::mpl::size_impl&lt; range_c_tag &gt;::apply</class>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::SLFad</name>
    <filename>classSacado_1_1ELRCacheFad_1_1SLFad.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::FAD_NS::SLFad</name>
    <filename>classSacado_1_1FAD__NS_1_1SLFad.html</filename>
    <templarg>ValueT</templarg>
    <templarg>Num</templarg>
    <class kind="struct">Sacado::FAD_NS::SLFad::apply</class>
    <member kind="typedef">
      <type>Fad::StaticStorage&lt; ValueT, Num &gt;</type>
      <name>StorageType</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a3edfe5e286eba7aa9718df202523f880</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeneralFad&lt; ValueT, StorageType &gt;</type>
      <name>GeneralFadType</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a6673b4adbc1e0542f2fef39bea9f3d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Expr&lt; GeneralFadType &gt;</type>
      <name>ExprType</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a78a05e7ca09d7a89a010e168c8d8ab60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a75b687fb03377a0f2aca49ec1b1d8945</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>aa64bb228a6ed12194e83429f9c8aef32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ValueT &gt;::type</type>
      <name>ScalarT</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a8fedc089f1a9c279e39a3693bca9b67e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a193eef9c0f72c80516e1d8c0290d958f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a8c431f10edccf269fba60dfdfa84ed41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a7464e6c49c4c75dd1751d066dd5585bf</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a72e3ea6c3cdb23f19d44193fbdf12c29</anchor>
      <arglist>(const int sz, const ValueT &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a1e877ae91708911a93e8dee7a13bb4b1</anchor>
      <arglist>(const int sz, const int i, const ValueT &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>aeeab6cad71c51c714a67da411cafefcf</anchor>
      <arglist>(const SLFad &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SLFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1SLFad.html</anchorfile>
      <anchor>a2bed32b9d5011cc7b53214d9c288dc8b</anchor>
      <arglist>(const Expr&lt; S &gt; &amp;x, SACADO_ENABLE_EXPR_CTOR_DECL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::SLFad</name>
    <filename>classSacado_1_1ELRFad_1_1SLFad.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::SLFad</name>
    <filename>classSacado_1_1Fad_1_1SLFad.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::SLFad</name>
    <filename>classSacado_1_1CacheFad_1_1SLFad.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="struct">
    <name>SLMatVecDerivFunctor</name>
    <filename>structSLMatVecDerivFunctor.html</filename>
    <templarg>ViewTypeA</templarg>
    <templarg>ViewTypeB</templarg>
    <templarg>ViewTypeC</templarg>
    <templarg>MaxP</templarg>
    <member kind="typedef">
      <type>ViewTypeC::value_type</type>
      <name>scalar_type</name>
      <anchorfile>structSLMatVecDerivFunctor.html</anchorfile>
      <anchor>a6558946b8be986fa6b90300a409d2c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>size_type</name>
      <anchorfile>structSLMatVecDerivFunctor.html</anchorfile>
      <anchor>acd5587ab79daadc3ee80588b9e667b08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ViewTypeC::execution_space</type>
      <name>execution_space</name>
      <anchorfile>structSLMatVecDerivFunctor.html</anchorfile>
      <anchor>a2ccabcbee7826612fc1791ecdf345dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLMatVecDerivFunctor</name>
      <anchorfile>structSLMatVecDerivFunctor.html</anchorfile>
      <anchor>ab0c45987ddc7c37cc2a1a70c66c5e7c3</anchor>
      <arglist>(const ViewTypeA &amp;A_arg, const ViewTypeB &amp;b_arg, const ViewTypeC &amp;c_arg)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>structSLMatVecDerivFunctor.html</anchorfile>
      <anchor>a984230f9b187188ac0a10e928520e409</anchor>
      <arglist>(const size_type i) const </arglist>
    </member>
    <member kind="variable">
      <type>const ViewTypeA</type>
      <name>A</name>
      <anchorfile>structSLMatVecDerivFunctor.html</anchorfile>
      <anchor>a9c8cb790ba15e377eacdb5bac3a67951</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ViewTypeB</type>
      <name>b</name>
      <anchorfile>structSLMatVecDerivFunctor.html</anchorfile>
      <anchor>ae8e6ce80d057446a43674abf106223c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ViewTypeC</type>
      <name>c</name>
      <anchorfile>structSLMatVecDerivFunctor.html</anchorfile>
      <anchor>a358ea5cb91d417dd1f11c4df7f1d6b87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_type</type>
      <name>n</name>
      <anchorfile>structSLMatVecDerivFunctor.html</anchorfile>
      <anchor>aa1b16b7cfde0896241fc74d3a8ecb8b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_type</type>
      <name>p</name>
      <anchorfile>structSLMatVecDerivFunctor.html</anchorfile>
      <anchor>ae446a2ab2d29e87560af45e3c3e0bfa5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRCacheFad::GeneralFad::SlowLocalAccumOp</name>
    <filename>structSacado_1_1ELRCacheFad_1_1GeneralFad_1_1SlowLocalAccumOp.html</filename>
    <templarg>ExprT</templarg>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SlowLocalAccumOp</name>
      <anchorfile>structSacado_1_1ELRCacheFad_1_1GeneralFad_1_1SlowLocalAccumOp.html</anchorfile>
      <anchor>a8cab2adbde76994a0351ad6d7a219650</anchor>
      <arglist>(const ExprT &amp;x_)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>structSacado_1_1ELRCacheFad_1_1GeneralFad_1_1SlowLocalAccumOp.html</anchorfile>
      <anchor>a6bec4b1253ba14d55f4887f9e46e0639</anchor>
      <arglist>(ArgT arg) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ELRFad::GeneralFad::SlowLocalAccumOp</name>
    <filename>structSacado_1_1ELRFad_1_1GeneralFad_1_1SlowLocalAccumOp.html</filename>
    <templarg>ExprT</templarg>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>SlowLocalAccumOp</name>
      <anchorfile>structSacado_1_1ELRFad_1_1GeneralFad_1_1SlowLocalAccumOp.html</anchorfile>
      <anchor>a1368b817305dbd4f17fa4f371b351831</anchor>
      <arglist>(const ExprT &amp;x_)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>structSacado_1_1ELRFad_1_1GeneralFad_1_1SlowLocalAccumOp.html</anchorfile>
      <anchor>a395697c06cdbbd433cbeddec59b39973</anchor>
      <arglist>(ArgT arg) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SMatVecDerivFunctor</name>
    <filename>structSMatVecDerivFunctor.html</filename>
    <templarg>ViewTypeA</templarg>
    <templarg>ViewTypeB</templarg>
    <templarg>ViewTypeC</templarg>
    <templarg>p</templarg>
    <member kind="typedef">
      <type>ViewTypeC::value_type</type>
      <name>scalar_type</name>
      <anchorfile>structSMatVecDerivFunctor.html</anchorfile>
      <anchor>abf0e865784eaf2e1c59ae3a4e62448bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>size_type</name>
      <anchorfile>structSMatVecDerivFunctor.html</anchorfile>
      <anchor>a10b4091f07e0c0b9abb891b251dab796</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ViewTypeC::execution_space</type>
      <name>execution_space</name>
      <anchorfile>structSMatVecDerivFunctor.html</anchorfile>
      <anchor>ad2ca68063d36571dc4caff4367bad74b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SMatVecDerivFunctor</name>
      <anchorfile>structSMatVecDerivFunctor.html</anchorfile>
      <anchor>a83254d0b78545dadbd1d18f50cd1365c</anchor>
      <arglist>(const ViewTypeA &amp;A_arg, const ViewTypeB &amp;b_arg, const ViewTypeC &amp;c_arg)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>operator()</name>
      <anchorfile>structSMatVecDerivFunctor.html</anchorfile>
      <anchor>a73ad578d9fcd5c999f4fb176d8e23d4b</anchor>
      <arglist>(const size_type i) const </arglist>
    </member>
    <member kind="variable">
      <type>const ViewTypeA</type>
      <name>A</name>
      <anchorfile>structSMatVecDerivFunctor.html</anchorfile>
      <anchor>a3c15371a4604e67f20b4d5db493d2caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ViewTypeB</type>
      <name>b</name>
      <anchorfile>structSMatVecDerivFunctor.html</anchorfile>
      <anchor>a42a7ac5d41cb63ce02b93e6e04c118d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ViewTypeC</type>
      <name>c</name>
      <anchorfile>structSMatVecDerivFunctor.html</anchorfile>
      <anchor>a9163280c4666338704083b588d67b029</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_type</type>
      <name>n</name>
      <anchorfile>structSMatVecDerivFunctor.html</anchorfile>
      <anchor>ae3099777e82d17b8ac272600eaadda3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::SqrtOp</name>
    <filename>classSacado_1_1Tay_1_1SqrtOp.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1SqrtOp.html</anchorfile>
      <anchor>aa7d2d687f726092dfe6813fd55dd3775</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1SqrtOp.html</anchorfile>
      <anchor>aad0e56e14a004795d25e945f0b5d0596</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1SqrtOp.html</anchorfile>
      <anchor>a8e16e5b292cf56243b1d1cba84d8a42b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SqrtOp</name>
      <anchorfile>classSacado_1_1Tay_1_1SqrtOp.html</anchorfile>
      <anchor>ae2a95dcb6377b24a6176175fbf7e03c5</anchor>
      <arglist>(const ExprT &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1SqrtOp.html</anchorfile>
      <anchor>a6350f89b948cefc06a1f8911988e5497</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1SqrtOp.html</anchorfile>
      <anchor>ade510fdfab6b05d1faeb1b04bade8860</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1SqrtOp.html</anchorfile>
      <anchor>aa8163da00e13c5000936fa268550533a</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::valarray&lt; value_type &gt;</type>
      <name>c</name>
      <anchorfile>classSacado_1_1Tay_1_1SqrtOp.html</anchorfile>
      <anchor>a099b8ab02cd3b29b55c1689e4b4d87ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dc</name>
      <anchorfile>classSacado_1_1Tay_1_1SqrtOp.html</anchorfile>
      <anchor>a9b8a740d93658505e012a38fd4cf3d55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ss_array</name>
    <filename>structSacado_1_1ss__array.html</filename>
    <templarg></templarg>
    <templarg>isScalar</templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION void</type>
      <name>copy</name>
      <anchorfile>structSacado_1_1ss__array.html</anchorfile>
      <anchor>aacfa4538f53380db18803ace347fd27f</anchor>
      <arglist>(const T *src, T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION void</type>
      <name>zero</name>
      <anchorfile>structSacado_1_1ss__array.html</anchorfile>
      <anchor>aabf069c514c691351883027776931f36</anchor>
      <arglist>(T *dest, int sz)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ss_array&lt; T, true &gt;</name>
    <filename>structSacado_1_1ss__array_3_01T_00_01true_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION void</type>
      <name>copy</name>
      <anchorfile>structSacado_1_1ss__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>ac3fa82b0c325cc8cd9c97d85c506cd9f</anchor>
      <arglist>(const T *src, T *dest, int sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION void</type>
      <name>zero</name>
      <anchorfile>structSacado_1_1ss__array_3_01T_00_01true_01_4.html</anchorfile>
      <anchor>a41a2247a73ef9b50dbfb80d35d8fb7dc</anchor>
      <arglist>(T *dest, int sz)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StaticSize</name>
    <filename>structSacado_1_1StaticSize.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1StaticSize.html</anchorfile>
      <anchor>ada79ff96785dfb31ae78c4e70263f749</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StaticSize&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StaticSize_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1StaticSize_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af2433cc7ab8c51c53c431a9b8570d624</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StaticSize&lt; const CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StaticSize_3_01const_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1StaticSize_3_01const_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a14d239e5479ef5d4e83cf19c9ba96f42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StaticSize&lt; const ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StaticSize_3_01const_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1StaticSize_3_01const_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a46fa8a90d99982857d8c1b5b03b17a0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StaticSize&lt; const ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StaticSize_3_01const_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1StaticSize_3_01const_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aa706aa41decb3a13968740a335758faf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StaticSize&lt; const Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StaticSize_3_01const_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1StaticSize_3_01const_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>aeaa7b259c6bf1d195e46b0aca064ae2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StaticSize&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StaticSize_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1StaticSize_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac91d9243b2ef2ec8ff59bc84cefe0477</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StaticSize&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StaticSize_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1StaticSize_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac16fcfc9027bf7c5565302c6daa772f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StaticSize&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StaticSize_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>value</name>
      <anchorfile>structSacado_1_1StaticSize_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a31e9b98a00bc737f574f7a8195e3bbdb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::FAD_NS::StaticStorage</name>
    <filename>classSacado_1_1FAD__NS_1_1StaticStorage.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::StaticStorage</name>
    <filename>classSacado_1_1Fad_1_1StaticStorage.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a3be331530674412d6a917751992b991a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>StaticStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>ae74b5b46eded06c5ca16c311f89e1f4a</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>StaticStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>ad4a1fc4be52f428a1f743f24f6ffc8f7</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>StaticStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a241119e18b4f03dba2fec9dd96368087</anchor>
      <arglist>(const StaticStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~StaticStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a1b3aaa5742473a12c374221f2d4635a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION StaticStorage &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>acc375346459a869f0e4efee367db83e1</anchor>
      <arglist>(const StaticStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a55231ddfc2eda84e11edc90e749f4ea0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>length</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a8844446c81b07c1e1c55bc7eb7a35ab7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>acc4d084bc04e35666ea7ef174c3ab255</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>resizeAndZero</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a225d70633765aeadc8c37cd9f5891c86</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a43cb19e14a67fced985bcc9ba846735e</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a838b0ce636a981a22be8e463c9da7ea4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a341985cbc4954bb893a294928da8e96a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>af119bb44214b730dcd60083eba4bc8d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>aff6f68bc3f05e7652564d76626d4fef7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION T</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>aa6010e61f89693e7bd2c7ccab23b786b</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a6564f6bcc8653062f0875121d33f7797</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a8373e04825a67e53fb588e0124e3d92c</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a4e8ca8455e71fcc7ec50feb5d1c72e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>dx_</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>aa87fc2c24d0879fd5dbb8e71222b52d6</anchor>
      <arglist>[Num]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sz_</name>
      <anchorfile>classSacado_1_1Fad_1_1StaticStorage.html</anchorfile>
      <anchor>a49ac17da798cbf1acb245ec134b68549</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName</name>
    <filename>structSacado_1_1StringName.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName.html</anchorfile>
      <anchor>a8541ff52add9364f3d53117ed5d8b50b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a66a2dbe9ca4497b52c7761cfce1ad220</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a571665cbf5fefe64c61258fdf91311d6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a85baa1f4e95ee85f7f6bc34b39d556d8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>aef3bbaec311b8ef44445ae1368d38b14</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a8440969dc0f81eb005da997d4a5f15cf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>affaba6d1c75ba5e0d3295c13f27171f9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a451e0959de6d47a1b839461a720e130f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>aefe68df533132c6befd74b759aea2013</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ab1f2b93a56c465638939c408a38c1b4c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a1e32b60416f228eeb62ad06dd6b33ca6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a95c7d7fcd4c532f2fb1b3736c1752b38</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a963bcc9d2756cea8c669447b69a2ccb3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a317e66f4a8ddbea7c1a26f49fe7c41d6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a95cfea18411ff44db1ce10f4e336d3f8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a4ac492a8d60f8ce05e75ca1085783395</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a8422f8537c18d3a18b9628e96c427e85</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a01176cd3de6ebdfd75c2fc3c8e74080e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a81ece99c7149172daa0f1419c48892a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a77f73589a5fc1341f447f58d3f62f4e2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</anchorfile>
      <anchor>ae4c50fd08c1c07eeacb08f4ff5233c60</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a0ba084a58b8d89ab1e91399c99949d8b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Rad2::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aba09c946305d2df2b8b0ae9addfa600c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Rad::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a9dcbe12992bae6faa2519a334291606a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; RadVec::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a6f0fa7f5959c0d64df0dcd33a484e0e9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Tay::CacheTaylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a1b850b50e1c23c82f9e501c85fb6d6bc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::StringName&lt; Tay::Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1StringName_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1StringName_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a6653b3ecd928bcaa523e35e2dfc0ed9f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::SubtractionOp</name>
    <filename>classSacado_1_1Tay_1_1SubtractionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>value_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp.html</anchorfile>
      <anchor>ac3410ae8fbb5e82b01e7fd731776b378</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::value_type</type>
      <name>value_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp.html</anchorfile>
      <anchor>a0f6ff6554b155671e88929bbc1330e43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; value_type_1, value_type_2 &gt;::type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp.html</anchorfile>
      <anchor>a3c627deed118f36f5524c7dc90cdee21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::scalar_type</type>
      <name>scalar_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp.html</anchorfile>
      <anchor>a8ee4618b79db02a70564b954c62f13e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::scalar_type</type>
      <name>scalar_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp.html</anchorfile>
      <anchor>ace971a01f9e1f27b8f72699ee2968f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; scalar_type_1, scalar_type_2 &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp.html</anchorfile>
      <anchor>a0a0ee10085e3f7136cb3f44f08b45fff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::base_expr_type</type>
      <name>base_expr_type_1</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp.html</anchorfile>
      <anchor>a7083abc143b9043864f0b87a2b1a2509</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::base_expr_type</type>
      <name>base_expr_type_2</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp.html</anchorfile>
      <anchor>a670f7715c4591e2cef2102682d034d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sacado::Promote&lt; base_expr_type_1, base_expr_type_2 &gt;::type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp.html</anchorfile>
      <anchor>a15ccd3e5af3cf604ab2b6b14eff5746d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubtractionOp</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp.html</anchorfile>
      <anchor>a47927b5a06ca6ec80b285362545ef96e</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp.html</anchorfile>
      <anchor>af982b43031ad0e21004abf77fc451646</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp.html</anchorfile>
      <anchor>ac51dbd6749377304fd06d34ca469a9f2</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp.html</anchorfile>
      <anchor>a830221c4abd399e38bb48f610048eb97</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::SubtractionOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</name>
    <filename>classSacado_1_1Tay_1_1SubtractionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT2::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a0c8d63705cc727643abe6429e4e63b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a846ba21512d83666aef577c7f85d4e27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT2::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>aff950825bbe85cc613e2c47d75863047</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstExpr&lt; typename ExprT2::value_type &gt;</type>
      <name>ExprT1</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a6691ecfa707b8d0275caf599d2314946</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubtractionOp</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>abbff30743d02c394f029fdabdcff91fb</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a4b1a1e2f95d9b5df411fa4585472604b</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a9b740f71554874adb1deb8ff9b339c58</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp_3_01ConstExpr_3_01typename_01ExprT2_1_1value__type_01_4_00_01ExprT2_01_4.html</anchorfile>
      <anchor>a5eea51baa7929c96471ad34e7ccc4f2f</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::SubtractionOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</name>
    <filename>classSacado_1_1Tay_1_1SubtractionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT1::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a8dd51941be80e03a58294e9ba77c9d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a012d23dbcdb2c00d45d7ee0ffe251d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT1::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>aec4365d1fbfe255da197e14ce3fc605f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstExpr&lt; typename ExprT1::value_type &gt;</type>
      <name>ExprT2</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a6a5888747b0631953f94983515c7ef59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubtractionOp</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a72f133b6bb5ad1932ce4c3c5d02f092b</anchor>
      <arglist>(const ExprT1 &amp;expr1, const ExprT2 expr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a3f73c3702d05d0ae8f0656b4dee0f8cf</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>aeb3e3afa1419d086dbb09a4e389a1c4e</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1SubtractionOp_3_01ExprT1_00_01ConstExpr_3_01typename_01ExprT1_1_1value__type_01_4_01_4.html</anchorfile>
      <anchor>a72485bddfb45203b5870ebca13f9dbd0</anchor>
      <arglist>(int i, const ExprT1 &amp;expr1, const ExprT2 &amp;expr2) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Example::FENL::NodeNodeGraph::TagFillElementGraph</name>
    <filename>structKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph_1_1TagFillElementGraph.html</filename>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Example::FENL::NodeNodeGraph::TagFillGraphEntries</name>
    <filename>structKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph_1_1TagFillGraphEntries.html</filename>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Example::FENL::NodeNodeGraph::TagFillNodeSet</name>
    <filename>structKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph_1_1TagFillNodeSet.html</filename>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Example::FENL::NodeNodeGraph::TagScanNodeCount</name>
    <filename>structKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph_1_1TagScanNodeCount.html</filename>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Example::FENL::NodeNodeGraph::TagSortGraphEntries</name>
    <filename>structKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph_1_1TagSortGraphEntries.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::TanExprType</name>
    <filename>structSacado_1_1Tay_1_1TanExprType.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>UnaryExpr&lt; Expr&lt; T &gt;, SinOp &gt;</type>
      <name>T1</name>
      <anchorfile>structSacado_1_1Tay_1_1TanExprType.html</anchorfile>
      <anchor>a0f7556a8f85af7c18bca2ad5d8c3235a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnaryExpr&lt; Expr&lt; T &gt;, CosOp &gt;</type>
      <name>T2</name>
      <anchorfile>structSacado_1_1Tay_1_1TanExprType.html</anchorfile>
      <anchor>a28a1ed5fb413eae005a514da5eb5e8ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinaryExpr&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt;, DivisionOp &gt;</type>
      <name>T3</name>
      <anchorfile>structSacado_1_1Tay_1_1TanExprType.html</anchorfile>
      <anchor>a5adfd7f2ee7bb14e1503cb2adfb3fcec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Expr&lt; T3 &gt;</type>
      <name>expr_type</name>
      <anchorfile>structSacado_1_1Tay_1_1TanExprType.html</anchorfile>
      <anchor>a81b3d33d0953be055030823ad804ecad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::TanhExprType</name>
    <filename>structSacado_1_1Tay_1_1TanhExprType.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>UnaryExpr&lt; Expr&lt; T &gt;, SinhOp &gt;</type>
      <name>T1</name>
      <anchorfile>structSacado_1_1Tay_1_1TanhExprType.html</anchorfile>
      <anchor>a4a1dda692546a482321d59fdd4fdae1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnaryExpr&lt; Expr&lt; T &gt;, CoshOp &gt;</type>
      <name>T2</name>
      <anchorfile>structSacado_1_1Tay_1_1TanhExprType.html</anchorfile>
      <anchor>a6cc8bdf99130f6e16147fe6cd52729c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinaryExpr&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt;, DivisionOp &gt;</type>
      <name>T3</name>
      <anchorfile>structSacado_1_1Tay_1_1TanhExprType.html</anchorfile>
      <anchor>a3d791616248b9024dd94c8a64f70e90f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Expr&lt; T3 &gt;</type>
      <name>expr_type</name>
      <anchorfile>structSacado_1_1Tay_1_1TanhExprType.html</anchorfile>
      <anchor>aa4e76ea0d76b28ebd917abb47f6deb9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::Taylor</name>
    <filename>classSacado_1_1Tay_1_1Taylor.html</filename>
    <templarg>T</templarg>
    <base>Base&lt; Taylor&lt; T &gt; &gt;</base>
    <class kind="struct">Sacado::Tay::Taylor::apply</class>
    <class kind="struct">Sacado::Tay::Taylor::TaylorData</class>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a8cbc00caaf4c2a9f1ebd0fb134bb6876</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>ac14eb72df4330ce692db940eebc1b719</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>af49aa8064c7819a6d41645ab9e0c5429</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a6fc9b2d0a2fef082cbea1c4c7062bdd4</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a36e063a53062b20181cc4492cf968ea3</anchor>
      <arglist>(const typename dummy&lt; value_type, scalar_type &gt;::type &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>aae502dadfc4a7455471c93f97272f2a1</anchor>
      <arglist>(int d, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>ad16d8fdf3699d2a1312faaca969670ef</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a30feeb66c816737dd44451281a061b50</anchor>
      <arglist>(const Taylor &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a8c6d81474bbb44d4454fa3886fe756ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>ac469df1ba9c5dd21ebe0648edc07d78c</anchor>
      <arglist>(int d, bool keep_coeffs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a297afd624690da7796c0f006b9ecf9e9</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyForWrite</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a58174f3b485800a17f2e9bda4b9fadac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a7eb251e136e59a420dbc46714e053a7a</anchor>
      <arglist>(const Taylor &amp;x) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>length</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>acc10a4bea1d26cda05216560ecb2cee8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resizeCoeffs</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a20d1da29e1c7a8bcff11b338047e26c4</anchor>
      <arglist>(int len)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Sacado::Handle&lt; TaylorData &gt;</type>
      <name>th</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a0c81f473d90e64b8af0a8844dbfcd23a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a2f8cea83c7eba99013ff69c8db3e2250</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a2ab6d111bcc4ae9c3fa2dcd5266c2083</anchor>
      <arglist>(const typename dummy&lt; value_type, scalar_type &gt;::type &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>acd216552e11050bee7ebfcce01435618</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>adc3d0d175c6f7188e32ddbdb13043d84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>afadb5739340bf7366613ad1a229fce8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a552a5085d6d145ff4a515fcc5beb20eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>ac5c5f2ccfc476a6d945c3b3af6fd5fee</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>ac6ea85f553d69f79fc7a4ec6c011c9db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a445a3e2ee91a7d8808cf32ad674aefa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a0712abcf96dd3a1138c0c53b5fa24236</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a8da17eb2091f82a191af38c93da35a27</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a36dd8bb4b980794d03b681edc8b0831b</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a555dc23f5e235bcbd079c0bcd893f9d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>aeb25a6d993e5c6bf934c3cc21e90f15c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a4c2e9678bd604178db8fc7052eae3ba8</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a0684f9fd35b2e8c14575ad58b2ac7131</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a55d3f2dbbcc707d969f07f42e2cfeaee</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a0a445670328fa5b784997534129a25ec</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a9a1e588d2cfe0135ff9be5a1885ad566</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a84b7e3aa871bfe3750166b39e170174a</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a41ac82b23e8d019f5c44f2b15c932dd2</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>abf2c417b01ab28ad2a8d2f48136dc7e0</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Taylor&lt; double &gt;</name>
    <filename>classSacado_1_1Tay_1_1Taylor.html</filename>
    <base>Sacado::Base</base>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a8cbc00caaf4c2a9f1ebd0fb134bb6876</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; value_type &gt;::type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>ac14eb72df4330ce692db940eebc1b719</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>af49aa8064c7819a6d41645ab9e0c5429</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a6fc9b2d0a2fef082cbea1c4c7062bdd4</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a36e063a53062b20181cc4492cf968ea3</anchor>
      <arglist>(const typename dummy&lt; value_type, scalar_type &gt;::type &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>aae502dadfc4a7455471c93f97272f2a1</anchor>
      <arglist>(int d, const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>ad16d8fdf3699d2a1312faaca969670ef</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a30feeb66c816737dd44451281a061b50</anchor>
      <arglist>(const Taylor &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Taylor</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a8c6d81474bbb44d4454fa3886fe756ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>ac469df1ba9c5dd21ebe0648edc07d78c</anchor>
      <arglist>(int d, bool keep_coeffs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a297afd624690da7796c0f006b9ecf9e9</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyForWrite</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a58174f3b485800a17f2e9bda4b9fadac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEqualTo</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a7eb251e136e59a420dbc46714e053a7a</anchor>
      <arglist>(const Taylor &amp;x) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>length</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>acc10a4bea1d26cda05216560ecb2cee8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resizeCoeffs</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a20d1da29e1c7a8bcff11b338047e26c4</anchor>
      <arglist>(int len)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Sacado::Handle&lt; TaylorData &gt;</type>
      <name>th</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a0c81f473d90e64b8af0a8844dbfcd23a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; double &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a2f8cea83c7eba99013ff69c8db3e2250</anchor>
      <arglist>(const double &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; double &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a2ab6d111bcc4ae9c3fa2dcd5266c2083</anchor>
      <arglist>(const typename dummy&lt; value_type, scalar_type &gt;::type &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; double &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>acd216552e11050bee7ebfcce01435618</anchor>
      <arglist>(const Taylor&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>adc3d0d175c6f7188e32ddbdb13043d84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>afadb5739340bf7366613ad1a229fce8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a552a5085d6d145ff4a515fcc5beb20eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>ac5c5f2ccfc476a6d945c3b3af6fd5fee</anchor>
      <arglist>(int d) const</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>ac6ea85f553d69f79fc7a4ec6c011c9db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a445a3e2ee91a7d8808cf32ad674aefa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a0712abcf96dd3a1138c0c53b5fa24236</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a8da17eb2091f82a191af38c93da35a27</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a36dd8bb4b980794d03b681edc8b0831b</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; double &gt;</type>
      <name>operator+</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a555dc23f5e235bcbd079c0bcd893f9d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; double &gt;</type>
      <name>operator-</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>aeb25a6d993e5c6bf934c3cc21e90f15c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; double &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a4c2e9678bd604178db8fc7052eae3ba8</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; double &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a9a1e588d2cfe0135ff9be5a1885ad566</anchor>
      <arglist>(const Taylor&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; double &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a0684f9fd35b2e8c14575ad58b2ac7131</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; double &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a84b7e3aa871bfe3750166b39e170174a</anchor>
      <arglist>(const Taylor&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; double &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a55d3f2dbbcc707d969f07f42e2cfeaee</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; double &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a41ac82b23e8d019f5c44f2b15c932dd2</anchor>
      <arglist>(const Taylor&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; double &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>a0a445670328fa5b784997534129a25ec</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; double &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSacado_1_1Tay_1_1Taylor.html</anchorfile>
      <anchor>abf2c417b01ab28ad2a8d2f48136dc7e0</anchor>
      <arglist>(const Taylor&lt; double &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Tay::Taylor::TaylorData</name>
    <filename>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</filename>
    <member kind="function">
      <type></type>
      <name>TaylorData</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>ad9dc7d16079276f18436106b69d17bdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaylorData</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>ae10a2c40e6d521f0e77eabbb2099df8b</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaylorData</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>a4f8593a885103c3ae3276a1a81d3c187</anchor>
      <arglist>(int d, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaylorData</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>ab23f4b4f05002b7df642f6af742fd071</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaylorData</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>a134da53d009456add72c732e3dbac577</anchor>
      <arglist>(int d, int l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaylorData</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>acb59e84eb373d91fb83325f41c20cbea</anchor>
      <arglist>(const TaylorData &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TaylorData</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>afafb2441e8b3e90870cf15d417ad1c1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TaylorData &amp;</type>
      <name>operator=</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>a47a91231dbda4ab83f8aca30d705f30f</anchor>
      <arglist>(const TaylorData &amp;x)</arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>coeff_</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>a4570eec2118fbff29bb26bb22d6a9691</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>deg_</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>a888bca6415be9a9bdb6fc7992f982b10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>len_</name>
      <anchorfile>structSacado_1_1Tay_1_1Taylor_1_1TaylorData.html</anchorfile>
      <anchor>a9167b80a515a65a3ce00acf839909df3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TaylorOpsUnitTest</name>
    <filename>classTaylorOpsUnitTest.html</filename>
    <templarg>TaylorType</templarg>
    <member kind="function">
      <type></type>
      <name>TaylorOpsUnitTest</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa259bf12ed227b123326bbed9f79297b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaylorOpsUnitTest</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa14164bb42b0236261488d52026b31e7</anchor>
      <arglist>(int degree, double absolute_tolerance, double relative_tolerance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TaylorOpsUnitTest</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>addb00bb8d994b6afc4d97a36c20e721b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUp</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa75ca68912bef5eba195ff977e3db7b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tearDown</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aafb4a88e793015abf156076c833c345d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a2e5abc901a38731b7c9bded08d81b7f2</anchor>
      <arglist>(testAddition,+)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a8f19ba6fbdf2125face20412e7bb0696</anchor>
      <arglist>(testSubtraction,-)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a99760bd9e5e2d0b411ec9b483563c76c</anchor>
      <arglist>(testMultiplication,*)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a461b90202d942b6db20a71f33ebf3e85</anchor>
      <arglist>(testDivision,/)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a09d9741015a1436b554f13f456bc4c29</anchor>
      <arglist>(testEquals,==)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ac29c4784b9183e808bc4c23ed5310c55</anchor>
      <arglist>(testNotEquals,!=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a5993d48c9481e38684ea432b79485c87</anchor>
      <arglist>(testLessThanOrEquals,&lt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aaa8e4543bfbf1cb7a7b00d827065b160</anchor>
      <arglist>(testGreaterThanOrEquals, &gt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a86e8c30452f4a74d2a1eb42559ef9f70</anchor>
      <arglist>(testLessThan,&lt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a341a6932e317b419278ff61f1d8eb2c2</anchor>
      <arglist>(testGreaterThan, &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a1dd519b8bbe06dad43d9431f07b2a607</anchor>
      <arglist>(testPow, pow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a5744bcc1e64a8e4ff53d5e53897132f2</anchor>
      <arglist>(testMax, max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a17df7a0199314ec7bf0826d3ae35a2ad</anchor>
      <arglist>(testMin, min)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa379bedcf88475cb7ba2e156a81e0b75</anchor>
      <arglist>(testUnaryPlus,+)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a823fe63cc069736760043499566922b2</anchor>
      <arglist>(testUnaryMinus,-)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a3dbb07c041542844096d9a8c08212853</anchor>
      <arglist>(testExp, exp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a57218398c535691fe91f89b4e12e50e9</anchor>
      <arglist>(testLog, log)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>afa621e0bf6e8fa0d212496c3229f8aa6</anchor>
      <arglist>(testLog10, log10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a24ad0fe210a77e1871b853a6be227058</anchor>
      <arglist>(testSqrt, sqrt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>adfba29a8012db88d1abe936d84459bef</anchor>
      <arglist>(testCos, cos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a940453f5f07b84ed432a1d62da59be87</anchor>
      <arglist>(testSin, sin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a7027719426cbf4559e2ea0fc2b8e43cb</anchor>
      <arglist>(testTan, tan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>af901c76b0a1dc633848e0241c7a6b85c</anchor>
      <arglist>(testACos, acos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ab9f0f68ae71ddc31d227045f15bf17a5</anchor>
      <arglist>(testASin, asin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a40a87e3e32150cb4dc54c45fe9e018ee</anchor>
      <arglist>(testATan, atan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>adf785699df34f96e3fa6e31d69da267a</anchor>
      <arglist>(testCosh, cosh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a0ff5e7cf1a5910dfcfc5a46de9658b60</anchor>
      <arglist>(testSinh, sinh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a79e426d298c92613a23bedb1cabf902b</anchor>
      <arglist>(testTanh, tanh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>afe029a0d66c1490a0ac454a65817cd67</anchor>
      <arglist>(testFAbs, fabs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ae00f71edf47a07719239639b4139dafa</anchor>
      <arglist>(testPlusEquals,+=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a71207b50be4947b928b6dff98a79e7a9</anchor>
      <arglist>(testMinusEquals,-=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>af8662affc4524abe4214032dc1d85ea8</anchor>
      <arglist>(testTimesEquals,*=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a758e9920e37293647a52634fd0bdbee3</anchor>
      <arglist>(testDivideEquals,/=)</arglist>
    </member>
    <member kind="function">
      <type>ScalarT</type>
      <name>composite1</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>abdde092a10335095259d0d52ca09e9df</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testComposite1</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a4147dfc644bdb88955b8610ecd3b1279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testDiff1</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a75fbf54ced35eb8b475a3c889ed1432f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testDiff3</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>af352a82f7e88f954dad9aece3383c48d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_poly</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a3909e8580d85075bbcc53c048aa5f19b</anchor>
      <arglist>(double *x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_diff</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a0ccf1f82efb1b1d44386833d2c00db95</anchor>
      <arglist>(const TaylorType &amp;x_dtay, double *x_adolc)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TaylorType</type>
      <name>a_dtay</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a28a29d05b664370b6ac83e8e31294a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TaylorType</type>
      <name>b_dtay</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a5d3eef020bc36ed9e84ea7f29a54a5ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TaylorType</type>
      <name>c_dtay</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a962bc784bb4cf19af8562973f8beac4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double **</type>
      <name>X</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ad1ca633160b29963c3a8eee27f22cb29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double **</type>
      <name>Y</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a74e55a97462fcc0d7a5e3f0c64779a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Sacado::Random&lt; double &gt;</type>
      <name>urand</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa5494a7fa536628490a6f3616f05333a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>d</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a3d60552df19a75d7d38faeed8b8d0121</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tol_a</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ac9e5f4609e0bc3969d1a5bbcb394f470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tol_r</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>afed2c9bc5e48ea1568360a184706ba98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>abb74e02c33ece6ba25342197066feff3</anchor>
      <arglist>(TaylorOpsUnitTest)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>abc3c2be3ff7fdc9e7a6c3ada0679722c</anchor>
      <arglist>(testAddition)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>abf1ecd818490d4a6a8f0b7b9ee9af773</anchor>
      <arglist>(testSubtraction)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>af2c307f5cc63a039b0e9c1c234dc669a</anchor>
      <arglist>(testMultiplication)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a3da441686e17dddc50e4fa4c9f0e36b2</anchor>
      <arglist>(testDivision)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>abea463b9301b8ce9ebc5e5173e855c4e</anchor>
      <arglist>(testEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa38484459e7f3bdd89b92d2b760ebcc3</anchor>
      <arglist>(testNotEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a34f4da44bed8d42c04a0f07d44ccbf59</anchor>
      <arglist>(testLessThanOrEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a3f6867560512a8f4a0ef01532b254173</anchor>
      <arglist>(testGreaterThanOrEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aeb1d2b6a40ac352ae250a4801512a8cf</anchor>
      <arglist>(testLessThan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a8e1a46a22173cc0e2e82723994933680</anchor>
      <arglist>(testGreaterThan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a9dbb6b76e5899f94e51a8c73c1883819</anchor>
      <arglist>(testPow)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>af773a9fb0f45863e9b29d21c5619977e</anchor>
      <arglist>(testMax)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a3a19008383c28d2789aa8ccb8cf7b787</anchor>
      <arglist>(testMin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a2f58a2d835aab6ea2993ad58f21510ce</anchor>
      <arglist>(testUnaryPlus)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a13c8e69fb97a0ab8514944935e44ff5c</anchor>
      <arglist>(testUnaryMinus)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ac32607e1cdc1f0bb9d9b7a8955c5f87c</anchor>
      <arglist>(testExp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a40c96ae57ae5027d0b14b52ca8eb724c</anchor>
      <arglist>(testLog)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ab5b069cbee83ea9a529f0232d4e960fe</anchor>
      <arglist>(testLog10)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a69411cd8c66728cb0423b90f6202aec6</anchor>
      <arglist>(testSqrt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a5a886481d356a2d4972e253f926a850a</anchor>
      <arglist>(testCos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa082002363dbdf3c4b71e7e13232ca0d</anchor>
      <arglist>(testSin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a5ced12f888ff9cd4714bd85a7c70e0e4</anchor>
      <arglist>(testTan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa91ac2a46133364c1593f64de86866e9</anchor>
      <arglist>(testACos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa64deea6ee737b40b431e8835d6b98df</anchor>
      <arglist>(testASin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a5e665b77d9f6f3c7b45ddb415a643074</anchor>
      <arglist>(testATan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ab43797ada49949ff0429d6e4868bbd85</anchor>
      <arglist>(testCosh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>afa657786489d0c1a3c4894241431afa2</anchor>
      <arglist>(testSinh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>acec59127448b4062ebd81ee4fd53d8ea</anchor>
      <arglist>(testTanh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aadc071c88ed3caa23434a73938aad6f3</anchor>
      <arglist>(testFAbs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ae6147a9d64046a317d8929e199be588d</anchor>
      <arglist>(testPlusEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>af52497dcad6f3714d28eed7f2fa4dd7c</anchor>
      <arglist>(testMinusEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>adaca04224ef1abf121c1a02df202ad47</anchor>
      <arglist>(testTimesEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a61c5a3247b9c53f9cf7204e67aea44c9</anchor>
      <arglist>(testDivideEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ac5260a100df27fc4ddc94184e523c19f</anchor>
      <arglist>(testComposite1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ae67eca6f0c7eca750a338c735feb35d5</anchor>
      <arglist>(testDiff1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a1e4fb7102242bb0e29e0178d7eadc79a</anchor>
      <arglist>(testDiff3)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_END</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa5b0ae46895294c22fb8e978dab0a818</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TaylorOpsUnitTest&lt; Sacado::Tay::CacheTaylor&lt; double &gt; &gt;</name>
    <filename>classTaylorOpsUnitTest.html</filename>
    <member kind="function">
      <type></type>
      <name>TaylorOpsUnitTest</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa259bf12ed227b123326bbed9f79297b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaylorOpsUnitTest</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa14164bb42b0236261488d52026b31e7</anchor>
      <arglist>(int degree, double absolute_tolerance, double relative_tolerance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TaylorOpsUnitTest</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>addb00bb8d994b6afc4d97a36c20e721b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUp</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa75ca68912bef5eba195ff977e3db7b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tearDown</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aafb4a88e793015abf156076c833c345d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a2e5abc901a38731b7c9bded08d81b7f2</anchor>
      <arglist>(testAddition,+)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a8f19ba6fbdf2125face20412e7bb0696</anchor>
      <arglist>(testSubtraction,-)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a99760bd9e5e2d0b411ec9b483563c76c</anchor>
      <arglist>(testMultiplication,*)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a461b90202d942b6db20a71f33ebf3e85</anchor>
      <arglist>(testDivision,/)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a09d9741015a1436b554f13f456bc4c29</anchor>
      <arglist>(testEquals,==)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ac29c4784b9183e808bc4c23ed5310c55</anchor>
      <arglist>(testNotEquals,!=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a5993d48c9481e38684ea432b79485c87</anchor>
      <arglist>(testLessThanOrEquals,&lt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aaa8e4543bfbf1cb7a7b00d827065b160</anchor>
      <arglist>(testGreaterThanOrEquals, &gt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a86e8c30452f4a74d2a1eb42559ef9f70</anchor>
      <arglist>(testLessThan,&lt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a341a6932e317b419278ff61f1d8eb2c2</anchor>
      <arglist>(testGreaterThan, &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a1dd519b8bbe06dad43d9431f07b2a607</anchor>
      <arglist>(testPow, pow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a5744bcc1e64a8e4ff53d5e53897132f2</anchor>
      <arglist>(testMax, max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BINARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a17df7a0199314ec7bf0826d3ae35a2ad</anchor>
      <arglist>(testMin, min)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa379bedcf88475cb7ba2e156a81e0b75</anchor>
      <arglist>(testUnaryPlus,+)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a823fe63cc069736760043499566922b2</anchor>
      <arglist>(testUnaryMinus,-)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a3dbb07c041542844096d9a8c08212853</anchor>
      <arglist>(testExp, exp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a57218398c535691fe91f89b4e12e50e9</anchor>
      <arglist>(testLog, log)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>afa621e0bf6e8fa0d212496c3229f8aa6</anchor>
      <arglist>(testLog10, log10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a24ad0fe210a77e1871b853a6be227058</anchor>
      <arglist>(testSqrt, sqrt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>adfba29a8012db88d1abe936d84459bef</anchor>
      <arglist>(testCos, cos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a940453f5f07b84ed432a1d62da59be87</anchor>
      <arglist>(testSin, sin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a7027719426cbf4559e2ea0fc2b8e43cb</anchor>
      <arglist>(testTan, tan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>af901c76b0a1dc633848e0241c7a6b85c</anchor>
      <arglist>(testACos, acos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ab9f0f68ae71ddc31d227045f15bf17a5</anchor>
      <arglist>(testASin, asin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a40a87e3e32150cb4dc54c45fe9e018ee</anchor>
      <arglist>(testATan, atan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>adf785699df34f96e3fa6e31d69da267a</anchor>
      <arglist>(testCosh, cosh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a0ff5e7cf1a5910dfcfc5a46de9658b60</anchor>
      <arglist>(testSinh, sinh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a79e426d298c92613a23bedb1cabf902b</anchor>
      <arglist>(testTanh, tanh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>afe029a0d66c1490a0ac454a65817cd67</anchor>
      <arglist>(testFAbs, fabs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ae00f71edf47a07719239639b4139dafa</anchor>
      <arglist>(testPlusEquals,+=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a71207b50be4947b928b6dff98a79e7a9</anchor>
      <arglist>(testMinusEquals,-=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>af8662affc4524abe4214032dc1d85ea8</anchor>
      <arglist>(testTimesEquals,*=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a758e9920e37293647a52634fd0bdbee3</anchor>
      <arglist>(testDivideEquals,/=)</arglist>
    </member>
    <member kind="function">
      <type>ScalarT</type>
      <name>composite1</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>abdde092a10335095259d0d52ca09e9df</anchor>
      <arglist>(const ScalarT &amp;a, const ScalarT &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testComposite1</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a4147dfc644bdb88955b8610ecd3b1279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testDiff1</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a75fbf54ced35eb8b475a3c889ed1432f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testDiff3</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>af352a82f7e88f954dad9aece3383c48d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_poly</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a3909e8580d85075bbcc53c048aa5f19b</anchor>
      <arglist>(double *x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_diff</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a0ccf1f82efb1b1d44386833d2c00db95</anchor>
      <arglist>(const Sacado::Tay::CacheTaylor&lt; double &gt; &amp;x_dtay, double *x_adolc)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Sacado::Tay::CacheTaylor&lt; double &gt;</type>
      <name>a_dtay</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a28a29d05b664370b6ac83e8e31294a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Sacado::Tay::CacheTaylor&lt; double &gt;</type>
      <name>b_dtay</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a5d3eef020bc36ed9e84ea7f29a54a5ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Sacado::Tay::CacheTaylor&lt; double &gt;</type>
      <name>c_dtay</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a962bc784bb4cf19af8562973f8beac4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double **</type>
      <name>X</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ad1ca633160b29963c3a8eee27f22cb29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double **</type>
      <name>Y</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a74e55a97462fcc0d7a5e3f0c64779a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Sacado::Random&lt; double &gt;</type>
      <name>urand</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa5494a7fa536628490a6f3616f05333a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>d</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a3d60552df19a75d7d38faeed8b8d0121</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tol_a</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ac9e5f4609e0bc3969d1a5bbcb394f470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tol_r</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>afed2c9bc5e48ea1568360a184706ba98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>abb74e02c33ece6ba25342197066feff3</anchor>
      <arglist>(TaylorOpsUnitTest)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>abc3c2be3ff7fdc9e7a6c3ada0679722c</anchor>
      <arglist>(testAddition)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>abf1ecd818490d4a6a8f0b7b9ee9af773</anchor>
      <arglist>(testSubtraction)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>af2c307f5cc63a039b0e9c1c234dc669a</anchor>
      <arglist>(testMultiplication)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a3da441686e17dddc50e4fa4c9f0e36b2</anchor>
      <arglist>(testDivision)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>abea463b9301b8ce9ebc5e5173e855c4e</anchor>
      <arglist>(testEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa38484459e7f3bdd89b92d2b760ebcc3</anchor>
      <arglist>(testNotEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a34f4da44bed8d42c04a0f07d44ccbf59</anchor>
      <arglist>(testLessThanOrEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a3f6867560512a8f4a0ef01532b254173</anchor>
      <arglist>(testGreaterThanOrEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aeb1d2b6a40ac352ae250a4801512a8cf</anchor>
      <arglist>(testLessThan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_RELOP_OP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a8e1a46a22173cc0e2e82723994933680</anchor>
      <arglist>(testGreaterThan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a9dbb6b76e5899f94e51a8c73c1883819</anchor>
      <arglist>(testPow)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>af773a9fb0f45863e9b29d21c5619977e</anchor>
      <arglist>(testMax)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_BINARY_FUNC_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a3a19008383c28d2789aa8ccb8cf7b787</anchor>
      <arglist>(testMin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a2f58a2d835aab6ea2993ad58f21510ce</anchor>
      <arglist>(testUnaryPlus)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a13c8e69fb97a0ab8514944935e44ff5c</anchor>
      <arglist>(testUnaryMinus)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ac32607e1cdc1f0bb9d9b7a8955c5f87c</anchor>
      <arglist>(testExp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a40c96ae57ae5027d0b14b52ca8eb724c</anchor>
      <arglist>(testLog)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ab5b069cbee83ea9a529f0232d4e960fe</anchor>
      <arglist>(testLog10)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a69411cd8c66728cb0423b90f6202aec6</anchor>
      <arglist>(testSqrt)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a5a886481d356a2d4972e253f926a850a</anchor>
      <arglist>(testCos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa082002363dbdf3c4b71e7e13232ca0d</anchor>
      <arglist>(testSin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a5ced12f888ff9cd4714bd85a7c70e0e4</anchor>
      <arglist>(testTan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa91ac2a46133364c1593f64de86866e9</anchor>
      <arglist>(testACos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa64deea6ee737b40b431e8835d6b98df</anchor>
      <arglist>(testASin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a5e665b77d9f6f3c7b45ddb415a643074</anchor>
      <arglist>(testATan)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ab43797ada49949ff0429d6e4868bbd85</anchor>
      <arglist>(testCosh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>afa657786489d0c1a3c4894241431afa2</anchor>
      <arglist>(testSinh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>acec59127448b4062ebd81ee4fd53d8ea</anchor>
      <arglist>(testTanh)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aadc071c88ed3caa23434a73938aad6f3</anchor>
      <arglist>(testFAbs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ac5260a100df27fc4ddc94184e523c19f</anchor>
      <arglist>(testComposite1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ae67eca6f0c7eca750a338c735feb35d5</anchor>
      <arglist>(testDiff1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a1e4fb7102242bb0e29e0178d7eadc79a</anchor>
      <arglist>(testDiff3)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>ae6147a9d64046a317d8929e199be588d</anchor>
      <arglist>(testPlusEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>af52497dcad6f3714d28eed7f2fa4dd7c</anchor>
      <arglist>(testMinusEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>adaca04224ef1abf121c1a02df202ad47</anchor>
      <arglist>(testTimesEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_UNARY_ASSIGNOP_TEST</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>a61c5a3247b9c53f9cf7204e67aea44c9</anchor>
      <arglist>(testDivideEquals)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_END</name>
      <anchorfile>classTaylorOpsUnitTest.html</anchorfile>
      <anchor>aa5b0ae46895294c22fb8e978dab0a818</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::TemplateIterator</name>
    <filename>classSacado_1_1TemplateIterator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>TemplateIterator</name>
      <anchorfile>classSacado_1_1TemplateIterator.html</anchorfile>
      <anchor>a7a51c588b9226617938ee055b2c40ce6</anchor>
      <arglist>(typename std::vector&lt; Teuchos::RCP&lt; BaseT &gt; &gt;::iterator p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSacado_1_1TemplateIterator.html</anchorfile>
      <anchor>a707092ff16129ff11ca9cf5f3f8eb632</anchor>
      <arglist>(const TemplateIterator &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSacado_1_1TemplateIterator.html</anchorfile>
      <anchor>a10e6e9b59f6a6da1816df7af02141583</anchor>
      <arglist>(const TemplateIterator &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::TemplateIterator&lt; BaseT &gt;::reference</type>
      <name>operator*</name>
      <anchorfile>classSacado_1_1TemplateIterator.html</anchorfile>
      <anchor>a6c36bd698808faf457ea74bb48c39b7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::TemplateIterator&lt; BaseT &gt;::pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classSacado_1_1TemplateIterator.html</anchorfile>
      <anchor>a10447111a82606e0b67d3c7265f5dddc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TemplateIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSacado_1_1TemplateIterator.html</anchorfile>
      <anchor>aae43b536229b2553b28948cf05f1f743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TemplateIterator</type>
      <name>operator++</name>
      <anchorfile>classSacado_1_1TemplateIterator.html</anchorfile>
      <anchor>ae7952b69c0a3cb8995606a4bcc113168</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; BaseT &gt;</type>
      <name>rcp</name>
      <anchorfile>classSacado_1_1TemplateIterator.html</anchorfile>
      <anchor>ae8d40bb5a86ead290b02dc44c275be7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; BaseT &gt; &gt;::iterator</type>
      <name>object_iterator</name>
      <anchorfile>classSacado_1_1TemplateIterator.html</anchorfile>
      <anchor>ac48e5f7db43894654a34609ba6dbe42d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::TemplateManager</name>
    <filename>classSacado_1_1TemplateManager.html</filename>
    <templarg>TypeSeq</templarg>
    <templarg>BaseT</templarg>
    <templarg>ObjectT</templarg>
    <class kind="struct">Sacado::TemplateManager::BuildObject</class>
    <class kind="struct">Sacado::TemplateManager::DefaultBuilderOp</class>
    <class kind="struct">Sacado::TemplateManager::type_info_less</class>
    <member kind="typedef">
      <type>TemplateIterator&lt; BaseT &gt;</type>
      <name>iterator</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>a6ccc912217f27d5b69bbbaab683438a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstTemplateIterator&lt; BaseT &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>a8d842647171eb568feec8c81b70995b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TemplateManager</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>a29f4db87cd909424153223a2977fd7e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TemplateManager</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>af856bfd47f7d13658fb62d3d5a976b55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildObjects</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>a33ee085b965a371a4f78b49d18b3b4b6</anchor>
      <arglist>(const BuilderOpT &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildObjects</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>af8e494f43691e020ae718f7d645f3a60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; BaseT &gt;</type>
      <name>getAsBase</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>adf8905a9f382563b62f77f41259f555e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const BaseT &gt;</type>
      <name>getAsBase</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>a58b611a03e7a2c0719d715201eb48594</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; typename Sacado::mpl::apply&lt; ObjectT, ScalarT &gt;::type &gt;</type>
      <name>getAsObject</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>a2672debbb70237561da54158b48769e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const typename Sacado::mpl::apply&lt; ObjectT, ScalarT &gt;::type &gt;</type>
      <name>getAsObject</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>af64dcd0dc293e2200e9c8dfd0361e95e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::TemplateManager&lt; TypeSeq, BaseT, ObjectT &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>a679fb3b282c7c5db301c2bb79ba3c540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Sacado::TemplateManager&lt; TypeSeq, BaseT, ObjectT &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>a4ffa3c72475c8c056a220a3b0c6bf45d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Sacado::TemplateManager&lt; TypeSeq, BaseT, ObjectT &gt;::iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>a28f21385a07ac6ef55edad76964a2f9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Sacado::TemplateManager&lt; TypeSeq, BaseT, ObjectT &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>ac0f6843af6f8f6c3f800e9fec7fa882f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; BaseT &gt; &gt;</type>
      <name>objects</name>
      <anchorfile>classSacado_1_1TemplateManager.html</anchorfile>
      <anchor>aab84886133b1c409cf84082b466f0f8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Kokkos::Example::FENL::NodeNodeGraph::Times</name>
    <filename>structKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph_1_1Times.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>ratio</name>
      <anchorfile>structKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph_1_1Times.html</anchorfile>
      <anchor>a22387ebc342b53b5689196df75c772d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>fill_node_set</name>
      <anchorfile>structKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph_1_1Times.html</anchorfile>
      <anchor>af0a83010a58fbf1cd67c91e6b7bc0408</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>scan_node_count</name>
      <anchorfile>structKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph_1_1Times.html</anchorfile>
      <anchor>a7e8f7f73994725423cfe47fb293075b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>fill_graph_entries</name>
      <anchorfile>structKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph_1_1Times.html</anchorfile>
      <anchor>a6d071cde305050e8aeffd0c294fbbdc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sort_graph_entries</name>
      <anchorfile>structKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph_1_1Times.html</anchorfile>
      <anchor>aaf91002848ce4b7f959dee1c8c7936ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>fill_element_graph</name>
      <anchorfile>structKokkos_1_1Example_1_1FENL_1_1NodeNodeGraph_1_1Times.html</anchorfile>
      <anchor>a36163129c0361e2ef81bd296937a5cbb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TraitsTests</name>
    <filename>classTraitsTests.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>TraitsTests</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>ac3761f0d9662d5a20eb9c0b27916dfe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TraitsTests</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>a6e69e58cd82b42100a3e8910b6a70346</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUp</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>a1381f2a2410101a94600d9df056687d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tearDown</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>aca111d41f4351fea4d147acd49421726</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testScalarType</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>a6a467aa922717d7a2ea9b34781cdae36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testValueType</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>a5a5adf32e6dd521a2c6aa12a8ea58347</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testIsADType</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>a5f539a59a27c23c31796ee4d80e8df1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testIsScalarType</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>a5612a98f6c944f77886c55ded862430f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testValue</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>a2256b8f241c865b1448c3283dac5511d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testScalarValue</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>affb79515fa8bac0c03785ba3ef7ddb9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testStringName</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>a76e7a193bab0acad13c7c8dd747127e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sacado::mpl::apply&lt; ADType, double &gt;::type</type>
      <name>ad1_t</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>a767cd2e16d5f48e4c142ab7a9d9db37c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sacado::mpl::apply&lt; ADType, ad1_t &gt;::type</type>
      <name>ad2_t</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>aa9f7ffe8c12ab720ec71cfdb9827ba94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Sacado::Random&lt; double &gt;</type>
      <name>urand</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>a5dacff8acc3c245317f71b6e003f774e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Sacado::Fad::MemPoolManager&lt; double &gt;</type>
      <name>poolManager</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>a6720d6a57954909d4183e7e60c92aeb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Sacado::Fad::MemPoolManager&lt; Sacado::Fad::DMFad&lt; double &gt; &gt;</type>
      <name>poolManager2</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>a76602be63b9a0c4aadf7d665c90b336b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>af0c6adff465374d57b8afbbb6eec798c</anchor>
      <arglist>(TraitsTests)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>ab393c642b7b247744ca48ad326990042</anchor>
      <arglist>(testScalarType)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>afcee3a81e9a0476b84340797ee13a76e</anchor>
      <arglist>(testValueType)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>ac0e1a1ff839c0b868ad978fced03e801</anchor>
      <arglist>(testIsADType)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>a3f76ded36c51d4dd2b364ab23349fb7f</anchor>
      <arglist>(testIsScalarType)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>a671e3b26bf0a7f064179be4f3e6166c5</anchor>
      <arglist>(testValue)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>a82b472f4e5e131c0522774d1b66c0141</anchor>
      <arglist>(testScalarValue)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>a477da30c4f15efe2b0d60b2b2a7f91b4</anchor>
      <arglist>(testStringName)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CPPUNIT_TEST_SUITE_END</name>
      <anchorfile>classTraitsTests.html</anchorfile>
      <anchor>a0645dab5ffadd3312cd34d95c86b1b1a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::TemplateManager::type_info_less</name>
    <filename>structSacado_1_1TemplateManager_1_1type__info__less.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structSacado_1_1TemplateManager_1_1type__info__less.html</anchorfile>
      <anchor>a6e748d13b3252d66abad19957ae6a492</anchor>
      <arglist>(const std::type_info *a, const std::type_info *b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::type_wrap</name>
    <filename>structSacado_1_1mpl_1_1type__wrap.html</filename>
    <templarg>T</templarg>
    <base>type_wrap_impl&lt; mpl::has_type&lt; T &gt;::value, T &gt;</base>
  </compound>
  <compound kind="class">
    <name>type_wrap&lt; F &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap.html</filename>
    <base>type_wrap_impl&lt; mpl::has_type&lt; F &gt;::value, F &gt;</base>
  </compound>
  <compound kind="class">
    <name>type_wrap&lt; F&lt; T1 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap.html</filename>
    <base>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1 &gt; &gt;::value, F&lt; T1 &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>type_wrap&lt; F&lt; T1, T2 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap.html</filename>
    <base>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1, T2 &gt; &gt;::value, F&lt; T1, T2 &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>type_wrap&lt; F&lt; T1, T2, T3 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap.html</filename>
    <base>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1, T2, T3 &gt; &gt;::value, F&lt; T1, T2, T3 &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>type_wrap&lt; F&lt; T1, T2, T3, T4 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap.html</filename>
    <base>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1, T2, T3, T4 &gt; &gt;::value, F&lt; T1, T2, T3, T4 &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>type_wrap&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap.html</filename>
    <base>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;::value, F&lt; T1, T2, T3, T4, T5 &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>type_wrap&lt; T1 &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap.html</filename>
    <base>type_wrap_impl&lt; mpl::has_type&lt; T1 &gt;::value, T1 &gt;</base>
  </compound>
  <compound kind="class">
    <name>type_wrap&lt; T2 &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap.html</filename>
    <base>type_wrap_impl&lt; mpl::has_type&lt; T2 &gt;::value, T2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::type_wrap_impl</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
    <templarg>cond</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::type_wrap_impl&lt; false, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl_3_01false_00_01T_01_4.html</filename>
    <templarg></templarg>
    <base>Sacado::mpl::add_type</base>
  </compound>
  <compound kind="class">
    <name>type_wrap_impl&lt; mpl::has_type&lt; F &gt;::value, F &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
  </compound>
  <compound kind="class">
    <name>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1 &gt; &gt;::value, F&lt; T1 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
  </compound>
  <compound kind="class">
    <name>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1, T2 &gt; &gt;::value, F&lt; T1, T2 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
  </compound>
  <compound kind="class">
    <name>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1, T2, T3 &gt; &gt;::value, F&lt; T1, T2, T3 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
  </compound>
  <compound kind="class">
    <name>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1, T2, T3, T4 &gt; &gt;::value, F&lt; T1, T2, T3, T4 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
  </compound>
  <compound kind="class">
    <name>type_wrap_impl&lt; mpl::has_type&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;::value, F&lt; T1, T2, T3, T4, T5 &gt; &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
  </compound>
  <compound kind="class">
    <name>type_wrap_impl&lt; mpl::has_type&lt; T &gt;::value, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
  </compound>
  <compound kind="class">
    <name>type_wrap_impl&lt; mpl::has_type&lt; T1 &gt;::value, T1 &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
  </compound>
  <compound kind="class">
    <name>type_wrap_impl&lt; mpl::has_type&lt; T2 &gt;::value, T2 &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl.html</filename>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::type_wrap_impl&lt; true, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1type__wrap__impl_3_01true_00_01T_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::mpl::TypeSequenceDoesNotContainType</name>
    <filename>classSacado_1_1mpl_1_1TypeSequenceDoesNotContainType.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::UnaryExpr</name>
    <filename>classSacado_1_1Tay_1_1UnaryExpr.html</filename>
    <templarg></templarg>
    <templarg>Op</templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>abd3fc71dc32192921c981e13f19f34c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>a9c2cad0dfff980268c58fca0446c316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>afe9b4e9c491d3cc002eea37d29d5002e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryExpr</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>aedfc395072499cbcba7750f89f0427c8</anchor>
      <arglist>(const ExprT &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>ab7d7f51ee0354ae76040dcd3759374bf</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>degree</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>a4d1f8f0811bc20631140c1647d19930a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFastAccess</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>a52b1273fe70d56cde8f214cb619a87bf</anchor>
      <arglist>(unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>coeff</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>a9efc0b88dd7fa8ae1b485797155b223b</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>a8a2bf94c7d151cf4c891bec66f05bcdb</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExprT</type>
      <name>expr_</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>a46a7109ffb23f26f50879ed6973f5de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Op&lt; ExprT &gt;</type>
      <name>op_</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryExpr.html</anchorfile>
      <anchor>a9e6e29dce6e9ee11185521ba04acd970</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::UnaryMinusOp</name>
    <filename>classSacado_1_1CacheFad_1_1UnaryMinusOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::UnaryMinusOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1UnaryMinusOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::UnaryMinusOp</name>
    <filename>classSacado_1_1Tay_1_1UnaryMinusOp.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryMinusOp.html</anchorfile>
      <anchor>a3295f4af6e5470cb92ec3630c78336aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryMinusOp.html</anchorfile>
      <anchor>a7fea5d4a019a6f023080b64004aedb2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryMinusOp.html</anchorfile>
      <anchor>a5fe83712c84b63091d84b5c92dfb2444</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryMinusOp</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryMinusOp.html</anchorfile>
      <anchor>a6cd66b869e4d68a6d81201fdc1304cce</anchor>
      <arglist>(const ExprT &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryMinusOp.html</anchorfile>
      <anchor>aa3eedb895dbbe5a53562be369fef971f</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryMinusOp.html</anchorfile>
      <anchor>a102e0dc8c2cb43e7eed4d2e7e4385588</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryMinusOp.html</anchorfile>
      <anchor>ad12cbe21e868bc905bb6aa351cd4afb8</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::UnaryPlusOp</name>
    <filename>classSacado_1_1ELRCacheFad_1_1UnaryPlusOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::Tay::UnaryPlusOp</name>
    <filename>classSacado_1_1Tay_1_1UnaryPlusOp.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExprT::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryPlusOp.html</anchorfile>
      <anchor>ad34c8f69c210a56ea930567b50b288dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryPlusOp.html</anchorfile>
      <anchor>a13fcbe0ac8a04b4b7b6607c82c35ff20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprT::base_expr_type</type>
      <name>base_expr_type</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryPlusOp.html</anchorfile>
      <anchor>a2170a58c463e1e23ad2fb50cfa5cc43e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryPlusOp</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryPlusOp.html</anchorfile>
      <anchor>a719ed05ed522492bf4b0923cb0adbbf6</anchor>
      <arglist>(const ExprT &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateCache</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryPlusOp.html</anchorfile>
      <anchor>a732d98a462e80e3c5fa3738166428bc0</anchor>
      <arglist>(int d) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryPlusOp.html</anchorfile>
      <anchor>a630da8013df5d6ffbf80d92b10665329</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeFastAccessCoeff</name>
      <anchorfile>classSacado_1_1Tay_1_1UnaryPlusOp.html</anchorfile>
      <anchor>a80d8b9ede24869234f575e6f417c9379</anchor>
      <arglist>(int i, const ExprT &amp;expr) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::UnaryPlusOp</name>
    <filename>classSacado_1_1CacheFad_1_1UnaryPlusOp.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::Promote&lt; A, B,                                                                                                                                                                                                                                                   typename mpl::enable_if_c&lt; mpl::is_convertible&lt; A, B &gt;::value &amp;&ampmpl::is_convertible&lt; B, A &gt;::value &amp;&ampmpl::is_same&lt; A, B &gt;::value &amp;&ampsExpr&lt; A &gt;::value||sExpr&lt; B &gt;::value</name>
    <filename>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_018106233313dda4b50878621839f73b2c.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BaseExprType&lt; A &gt;::type</type>
      <name>A_base_fad_type</name>
      <anchorfile>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_018106233313dda4b50878621839f73b2c.html</anchorfile>
      <anchor>ad3849b062ea09b55d3d0719cd7084bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseExprType&lt; B &gt;::type</type>
      <name>B_base_fad_type</name>
      <anchorfile>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_018106233313dda4b50878621839f73b2c.html</anchorfile>
      <anchor>a49dcb6a0dbee1a196cd5a0e1adf4115e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Promote&lt; A_base_fad_type, B_base_fad_type &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1Promote_3_01A_00_01B_00_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_01_018106233313dda4b50878621839f73b2c.html</anchorfile>
      <anchor>aeddd8bb97065684a0a07b7872b8f0389</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value</name>
    <filename>structSacado_1_1Value.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value.html</anchorfile>
      <anchor>ac4b9c95cb3c770ffc625ee0d79e6b6f0</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; CacheFad::DFad&lt; ValueT &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a89c1d83faab15a385082178d106ec67e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a7516f928e4e3d2365e0b592f31afe8bb</anchor>
      <arglist>(const CacheFad::DFad&lt; ValueT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; CacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; CacheFad::Expr&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aaac90d34ea1153b925638501c2389e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a682046ee706df2c2100f1d896211eb04</anchor>
      <arglist>(const CacheFad::Expr&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueType&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ad4d4b95c307a81660c7711a718ab01d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae2cd32eae940974ac4c051b90d86f16d</anchor>
      <arglist>(const CacheFad::SFad&lt; ValueT, Num &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueType&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a7bb1a428a5e8609d14cbe25d4e9e5c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae59ea6452aac751102639ef7efc5fbdd</anchor>
      <arglist>(const CacheFad::SLFad&lt; ValueT, Num &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>ac51630036d2dfe41723703086beeff2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>afc85a3398849508f6f06a2772f8823be</anchor>
      <arglist>(const CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a65def0f52550ff805d41751cc6b72d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a48f4ddf70201acacbfac45b1e19696f2</anchor>
      <arglist>(const ELRCacheFad::DFad&lt; ValueT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ab369e20e4eac93891383601419bcd0aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a33ce62537f9937ca5bbaeeceb0a40833</anchor>
      <arglist>(const ELRCacheFad::Expr&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ad8002786465bc20c63ba5859dd12e9f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae5abafbceaa8fb4c58e6ee9776946a96</anchor>
      <arglist>(const ELRCacheFad::SFad&lt; ValueT, Num &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a8d009e80da8ea85c879ddb03427113fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ab21a716170a0454ce721d01082b6c27d</anchor>
      <arglist>(const ELRCacheFad::SLFad&lt; ValueT, Num &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a4c6f08d386b06ef9ca7387b34dfe2588</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a7ff40b14953e8f72adea3822d12d2a4f</anchor>
      <arglist>(const ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRFad::DFad&lt; ValueT &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a0691b7a655dc74ee793e6c4b648851b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>afd1bf289b2cc1b34015ad759262f8ec3</anchor>
      <arglist>(const ELRFad::DFad&lt; ValueT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRFad::Expr&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a6e596274f27678b18103e7ae26f48d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aaf9a744c8013adb925a61db8fd9b9380</anchor>
      <arglist>(const ELRFad::Expr&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a2333a14d63243d69ed27f8c2225f8151</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a0ee5109d4e38b7e84486371f027abc7b</anchor>
      <arglist>(const ELRFad::SFad&lt; ValueT, Num &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a2912a5af4f745fc418355b0fcd080bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae5957d607f9150ff0de76cf3ae33d71b</anchor>
      <arglist>(const ELRFad::SLFad&lt; ValueT, Num &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>acd2ac5cb78700e30c19025423d0ed2af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a55be7840778706fbc95f19b9be453d5c</anchor>
      <arglist>(const ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Fad::DFad&lt; ValueT &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a0a18674d7f4cb8528bb17f9036ad13f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>accb3f05fc8c1b3067190c988919f62cd</anchor>
      <arglist>(const Fad::DFad&lt; ValueT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Fad::DMFad&lt; ValueT &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>af5ab3f26e57fbf359817e9ded90e8cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a326e139e279378b205e1a9c74fe7a97b</anchor>
      <arglist>(const Fad::DMFad&lt; ValueT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Fad::DVFad&lt; ValueT &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a1e9fdc9d382901cd3a183df3d8b1dee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a510f5dc6ba564a06f030b133ba062568</anchor>
      <arglist>(const Fad::DVFad&lt; ValueT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Fad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Fad::Expr&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a78c6603bb9cc5161e2e7d77cb459a56b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a909349f874280eb3bd5c19e6a8b7a701</anchor>
      <arglist>(const Fad::Expr&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueType&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a167f33d85110ee139b2580c2055f7c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a3f96b303610729c50968d6611a42e379</anchor>
      <arglist>(const Fad::SFad&lt; ValueT, Num &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a4d4fd999b493713b08140b33584fd5ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>abf2a93541bcc317b674565d3d3f8dd36</anchor>
      <arglist>(const Fad::SimpleFad&lt; ValueT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueType&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a38094a1be743e06b58ead6ae14b1c0b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>af877c22357c941c0c6be2a6af3be9783</anchor>
      <arglist>(const Fad::SLFad&lt; ValueT, Num &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>abbba472ff5017b4244aebc3ab46f07fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KOKKOS_INLINE_FUNCTION const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a3a54c9b832bca21fe67f59e99d030f8c</anchor>
      <arglist>(const Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</anchorfile>
      <anchor>a269beda73a499eb6cbdb8eca72e7dbcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</anchorfile>
      <anchor>a09ec9df77ca00646dd3e5b925d76cd99</anchor>
      <arglist>(const FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; LFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; LFad::Expr&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a475a26f5dd7c9399b59dc4afaf90a163</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a9742132198dff37f4419fef1f0cb51fc</anchor>
      <arglist>(const LFad::Expr&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a7d8d891ba259abb2ad0d2278a828b66e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a13b02170277a6280f4973390ea32aa5d</anchor>
      <arglist>(const LFad::LogicalSparse&lt; ValT, LogT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Rad2::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Rad2::ADvar&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a4407ea535420b495dfdc19d2218284ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static value_type</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a5f30bd85b5e5d6450e669a4850409521</anchor>
      <arglist>(const Rad2::ADvar&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Rad::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Rad::ADvar&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a59cee856db8dc1e4ba66666866dd8c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static value_type</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ade083c1f94920e11ae4f44e72487ae3b</anchor>
      <arglist>(const Rad::ADvar&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; RadVec::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; RadVec::ADvar&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a064932782ce2f707cdcd8962117a1401</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static value_type</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a320b90886c7a0a706eb65e36f9848130</anchor>
      <arglist>(const RadVec::ADvar&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Tay::CacheTaylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Tay::CacheTaylor&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a35b263fb2033610a1554755036cc69f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>af05a4eea134ee0ce5aa1ce59d514f8d3</anchor>
      <arglist>(const Tay::CacheTaylor&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::Value&lt; Tay::Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1Value_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType&lt; Tay::Taylor&lt; T &gt; &gt;::type</type>
      <name>value_type</name>
      <anchorfile>structSacado_1_1Value_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a73a2162dc7daca293e55aa612464fe89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const value_type &amp;</type>
      <name>eval</name>
      <anchorfile>structSacado_1_1Value_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a1bd2e2a092425b1d12a5aff4b06f6827</anchor>
      <arglist>(const Tay::Taylor&lt; T &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType</name>
    <filename>structSacado_1_1ValueType.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType.html</anchorfile>
      <anchor>a06e391e776319e6de41515a7955a3d69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01CacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a5d2d55dd9b0e74a5d2b1462c50a678d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; CacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>CacheFad::Expr&lt; T &gt;::value_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01CacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>abf93a88063361c8020afb689c692e045</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01CacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a34b2771bd5af41be69609aa550237987</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01CacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a11be7c64386f7659e46be53253e0cca6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01CacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>ae0ae9e90322a906aad20deb159730a55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; const T &gt;</name>
    <filename>structSacado_1_1ValueType_3_01const_01T_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>const ValueType&lt; T &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01const_01T_01_4.html</anchorfile>
      <anchor>a9ba6ec0be3d4b529054b8f4d2d017bb6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01ELRCacheFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>acbfdd19f12b10cbc9887666ff322d903</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ELRCacheFad::Expr&lt; T &gt;::value_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01ELRCacheFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a141344af91452b033cb15065a1cf320f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01ELRCacheFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a2349e0cd44a1cdf395f400eee19859ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01ELRCacheFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ac9ee4a3b51aefbe8e997e920b7ba46a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01ELRCacheFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a0d1ec2b49f61304c649315e5c241bb91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01ELRFad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a0933e54b1892d59509da8a43c2f4af23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ELRFad::Expr&lt; T &gt;::value_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01ELRFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>acbecebd5abb5064864ac698e63ef62f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01ELRFad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a6e39bbd490371a5e91b09bfe94d17630</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01ELRFad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a160429bc02475b29ad8320e7939d334c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01ELRFad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>a50167905f8617eb8150117ac819bc681</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Fad::ConstExpr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Fad_1_1ConstExpr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Fad::ConstExpr&lt; T &gt;::value_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01Fad_1_1ConstExpr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a296555e1130d9eac836e3ef97ac25da0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Fad::DFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01Fad_1_1DFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a67a17fe11cb9a79a6de98085d6e5f1c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Fad::DMFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01Fad_1_1DMFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>ac42184712d1aa82770a5eea45458c4ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Fad::DVFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01Fad_1_1DVFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>aa0758a5e63158e946458eed2eb81d442</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Fad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Fad::Expr&lt; T &gt;::value_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01Fad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>adee0ef2557210e199b113628765339f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01Fad_1_1SFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>a343efb7ca359464f14529f1fdad33969</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01Fad_1_1SimpleFad_3_01ValueT_01_4_01_4.html</anchorfile>
      <anchor>a62f97ea01e91ac2b5df68774cf9376b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Num</templarg>
    <member kind="typedef">
      <type>ValueT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01Fad_1_1SLFad_3_01ValueT_00_01Num_01_4_01_4.html</anchorfile>
      <anchor>ae61f596f665c68644f07ce91ebbd6862</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <templarg>Stride</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01Fad_1_1ViewFad_3_01ValueT_00_01Size_00_01Stride_00_01Base_01_4_01_4.html</anchorfile>
      <anchor>ae893b18682b9865ac5da22768fd6f8ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ScalarT</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01FlopCounterPack_1_1ScalarFlopCounter_3_01ScalarT_01_4_01_4.html</anchorfile>
      <anchor>ab73b6ee0aef34b53f45d2c2948f2ed9a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; LFad::Expr&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>LFad::Expr&lt; T &gt;::value_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01LFad_1_1Expr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a59073bf330e6bfe6cb96c6f24fda72c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LFad::LogicalSparse&lt; ValT, LogT &gt;::value_type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01LFad_1_1LogicalSparse_3_01ValT_00_01LogT_01_4_01_4.html</anchorfile>
      <anchor>a97f24f7a3cd70dc87e9c4da693ac0f17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Rad2::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01Rad2_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a2299b0401f7068aa5ab4b3457d16c4cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Rad2::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Rad2_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01Rad2_1_1ADvari_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ac56dbe895931d6f82d12a2728f6dbe84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Rad::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01Rad_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a325141f5ffe8e11fd845216cee66894c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Rad::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Rad_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01Rad_1_1ADvari_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aaea4bdab1b713294c7c3cb74a0255636</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; RadVec::ADvar&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01RadVec_1_1ADvar_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a12196cc651a925cf53ba8e3569069cdc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; RadVec::ADvari&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01RadVec_1_1ADvari_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01RadVec_1_1ADvari_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a113952bdbef4a7e4a7759c5d2658ab63</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Tay::CacheTaylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01Tay_1_1CacheTaylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a8cd0363e02b8b3f95fd4eff4a4cb04e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ValueType&lt; Tay::Taylor&lt; T &gt; &gt;</name>
    <filename>structSacado_1_1ValueType_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ValueType_3_01Tay_1_1Taylor_3_01T_01_4_01_4.html</anchorfile>
      <anchor>abf679d6c055a6eb5b773322365389d5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Vector</name>
    <filename>classSacado_1_1Fad_1_1Vector.html</filename>
    <templarg>OrdinalType</templarg>
    <templarg>FadType</templarg>
    <member kind="typedef">
      <type>Sacado::ValueType&lt; FadType &gt;::type</type>
      <name>ValueType</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>a8d8c3d0934a9e5908d9103b14d609412</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>a7e3651be333d63dd3ebe25871e05a797</anchor>
      <arglist>(OrdinalType vec_size, OrdinalType deriv_sz, VectorDerivOrientation orient=Row)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>ae0ae6f5de7143b10882d89d5df264428</anchor>
      <arglist>(const Vector &amp;fv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Vector</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>a068e70579418a68a0ddd45ceb8c53730</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>ae60cfa7854b9c534c051634a5ee4ec9b</anchor>
      <arglist>(const Vector &amp;fv)</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>a5e5fcdb2e50979592e3a43713cf9e790</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>deriv_size</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>afd6217bf725b87d7f9935503a5dd8e8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>deriv_stride</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>ab131d26f354114aa8811a1a3fa7938e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorDerivOrientation</type>
      <name>deriv_orientation</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>ae3a7c5a31f64a9f8892cec4929825203</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FadType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>a29115e92c155992752109dfcac72d755</anchor>
      <arglist>(OrdinalType i)</arglist>
    </member>
    <member kind="function">
      <type>const FadType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>ad00a6ed82d7e7141ed4f76dd89d85c9d</anchor>
      <arglist>(OrdinalType i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrdinalType</type>
      <name>deriv_size_</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>a9afde922ac5dd792ec1fa1ea2ff6729d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; FadType &gt;</type>
      <name>vec_</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector.html</anchorfile>
      <anchor>a65b5ba2b14c609c93fea56b76b4ef4ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::Vector&lt; OrdinalType, Sacado::Fad::DVFad&lt; ValueType &gt; &gt;</name>
    <filename>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Sacado::Fad::DVFad&lt; ValueType &gt;</type>
      <name>FadType</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a2256a5ed799b990c64d3df0d46fa6551</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a15cac03eeb331ea761183e6123e25c40</anchor>
      <arglist>(OrdinalType vec_size, OrdinalType deriv_size, VectorDerivOrientation orient=Row)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a38cbbc965301f9b0a0865c1303f6b771</anchor>
      <arglist>(const Vector &amp;fv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Vector</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>ac71b25229f1371d0ca956303b5b8eefd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a996df52d033d9b38cc213d3bb97f62f5</anchor>
      <arglist>(const Vector &amp;fv)</arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>abe5c10d0a7f921530b30f1d85438e460</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>deriv_size</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>ac6c9309813e997f98488d74c7351918f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OrdinalType</type>
      <name>deriv_stride</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a746d9169814f7816f3ecef951f7369fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorDerivOrientation</type>
      <name>deriv_orientation</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a0939128a0a09c31aa619e1ee8cf66af5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FadType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>abab765547e28606c89adcee087412209</anchor>
      <arglist>(OrdinalType i)</arglist>
    </member>
    <member kind="function">
      <type>const FadType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a8210f1ab557a26a32ecfd2fcab31db07</anchor>
      <arglist>(OrdinalType i) const </arglist>
    </member>
    <member kind="function">
      <type>ValueType *</type>
      <name>vals</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>ae3210274f023d43fa3e962ae836b33e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *</type>
      <name>vals</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>ae65c1266916dbf9d210f559c6409bb02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ValueType *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>aca77dbcbaa29198f9f60795434ef7799</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a3afc9ccbb80c2b87b1cb721aff665bab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrdinalType</type>
      <name>deriv_size_</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a12b70f3cddd152290ab6c05e2f031472</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorDerivOrientation</type>
      <name>orient_</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a8ddf33daa0484f49ab8c896cf4889f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrdinalType</type>
      <name>stride_</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>a37c4a98d99d91cad6daeec0977e9736c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; FadType &gt;</type>
      <name>vec_</name>
      <anchorfile>classSacado_1_1Fad_1_1Vector_3_01OrdinalType_00_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_01_4.html</anchorfile>
      <anchor>ae35bf0a5b26221cf7d0ae49c167af69d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::vector_at</name>
    <filename>structSacado_1_1mpl_1_1vector__at.html</filename>
    <templarg></templarg>
    <templarg>Pos</templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::vector_at&lt; mpl::vector&lt; T, Args... &gt;, 0 &gt;</name>
    <filename>structSacado_1_1mpl_1_1vector__at_3_01mpl_1_1vector_3_01T_00_01Args_8_8_8_01_4_00_010_01_4.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1vector__at_3_01mpl_1_1vector_3_01T_00_01Args_8_8_8_01_4_00_010_01_4.html</anchorfile>
      <anchor>ac658ca9754076a9907154e476b796f38</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::vector_at&lt; mpl::vector&lt; T, Args... &gt;, Pos &gt;</name>
    <filename>structSacado_1_1mpl_1_1vector__at_3_01mpl_1_1vector_3_01T_00_01Args_8_8_8_01_4_00_01Pos_01_4.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
    <templarg>Pos</templarg>
    <member kind="typedef">
      <type>vector_at&lt; mpl::vector&lt; Args... &gt;, Pos-1 &gt;::type</type>
      <name>type</name>
      <anchorfile>structSacado_1_1mpl_1_1vector__at_3_01mpl_1_1vector_3_01T_00_01Args_8_8_8_01_4_00_01Pos_01_4.html</anchorfile>
      <anchor>aea5f1ddb3a08877fa30ce2f31bd580d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::vector_push_back</name>
    <filename>structSacado_1_1mpl_1_1vector__push__back.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::vector_push_back&lt; mpl::vector&lt; Args... &gt;, T &gt;</name>
    <filename>structSacado_1_1mpl_1_1vector__push__back_3_01mpl_1_1vector_3_01Args_8_8_8_01_4_00_01T_01_4.html</filename>
    <templarg>Args</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::mpl::vector_size</name>
    <filename>structSacado_1_1mpl_1_1vector__size.html</filename>
    <templarg>Args</templarg>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>sz</name>
      <anchorfile>structSacado_1_1mpl_1_1vector__size.html</anchorfile>
      <anchor>a347c61c4288940c58508f11c89a4bcfb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::VectorDynamicStorage</name>
    <filename>classSacado_1_1Fad_1_1VectorDynamicStorage.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>ace0f4686ff96d8f434390a20e04e54df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>VectorDynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a10d32dcf46d0717c3ee6d3568b88304a</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>VectorDynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a88ccc97375cb7ebc7177326eb2f2f0a8</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>VectorDynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>aa4e8dbb972b0c3f11a2155de7b5b50f7</anchor>
      <arglist>(const int sz, T *x, U *dx_p, const int stride, bool zero_out)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>VectorDynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>ae76736a1d6bca17f7366163bfa50f2bb</anchor>
      <arglist>(const VectorDynamicStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~VectorDynamicStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a85dfe006dd999d55fdca16b69c790d16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION VectorDynamicStorage &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a3bf1fa68f506f62a634bfddf3ea6d25d</anchor>
      <arglist>(const VectorDynamicStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>ab20b50555ead7f7430b8c761afa501fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>length</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a7ecc1bf266afe3a37ba288c0e7c0bc51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>aa2f74e276478c4cfe3cb113b70b2c47d</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>resizeAndZero</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a3673ff293730dd02f9574112b2efdda8</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a49ba39afe09cd5f8d83dc3bfb0fd068b</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a0880a1805220ca31e519fbaa07d6b7ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>setMemory</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>ac0fc154190fa8f5293b05c880d530b1c</anchor>
      <arglist>(int sz, T *x, U *dx_p, int stride)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a0929ed753250b8fa67896ac0f7e1f987</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a3a007eb0a3aa6a3bb5efdc2b65dd3b2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const U *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a2a68fd888771a1d5725c49ef54b4cdb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION U</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a48fa1c03a4a26a8d10ecff4a72615a27</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION U &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>aea4059e98bde4d88c869ede22691c5f0</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const U &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>ab25656104335f6ff8e2e15f75392a5a7</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>v_</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a041fcf3b50db2a10abdf7c7fbbee461f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>owns_mem</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a251843a4d0638d5b3eb11206432bc0bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>sz_</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>aa415bbc126f6dfb90cdb34a73c102ce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>len_</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a3bbd43963974fb58a1865e74f2725de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>stride_</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>aae60b82ab851d9338a7bde51c1afe112</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>aa135087903cf9946fd2c0770b69403db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>U *</type>
      <name>dx_</name>
      <anchorfile>classSacado_1_1Fad_1_1VectorDynamicStorage.html</anchorfile>
      <anchor>a362c66593698d8296099af3d021a8aa2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::FAD_NS::ViewFad</name>
    <filename>classSacado_1_1FAD__NS_1_1ViewFad.html</filename>
    <templarg></templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
    <templarg></templarg>
    <class kind="struct">Sacado::FAD_NS::ViewFad::apply</class>
    <member kind="typedef">
      <type>Fad::ViewStorage&lt; ValueT, length, stride, BaseFadT &gt;</type>
      <name>StorageType</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>acdcf88d02bc95a1a858e5a6dda0367e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeneralFad&lt; ValueT, StorageType &gt;</type>
      <name>GeneralFadType</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>a1a76f8acd1be3ec8c1d12aa178f71a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Expr&lt; GeneralFadType &gt;</type>
      <name>ExprType</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>a6fefddb5596747af656ba3a4a1ade1ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::value_type</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>a70d5d64b31e6fde07336b72029f6813f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExprType::scalar_type</type>
      <name>scalar_type</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>a88b6fa1dc8fdac319a5f7e02572a6580</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarType&lt; ValueT &gt;::type</type>
      <name>ScalarT</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>ab7eb2479f23760369b36da8a58a15c2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseFadT</type>
      <name>base_fad_type</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>a85a0c86c52e47897a328f6fed0b6f26a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~ViewFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>ac34c861f736c58b1853b696cee41d200</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>ViewFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>a981df03e4ffe1aae172178435367373e</anchor>
      <arglist>(const StorageType &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>ViewFad</name>
      <anchorfile>classSacado_1_1FAD__NS_1_1ViewFad.html</anchorfile>
      <anchor>a59c515bc3c45b9aec8ac540b3b747ff7</anchor>
      <arglist>(ValueT *v, const int arg_size=0, const int arg_stride=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::ViewFad</name>
    <filename>classSacado_1_1Fad_1_1ViewFad.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::CacheFad::ViewFad</name>
    <filename>classSacado_1_1CacheFad_1_1ViewFad.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRFad::ViewFad</name>
    <filename>classSacado_1_1ELRFad_1_1ViewFad.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Sacado::ELRCacheFad::ViewFad</name>
    <filename>classSacado_1_1ELRCacheFad_1_1ViewFad.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType</name>
    <filename>structSacado_1_1ViewFadType.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; const Sacado::Fad::DMFad&lt; ValueType &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01const_01Sacado_1_1Fad_1_1DMFad_3_01ValueType_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
    <member kind="typedef">
      <type>Sacado::Fad::ViewFad&lt; const ValueType, length, stride, Sacado::Fad::DMFad&lt; const ValueType &gt; &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ViewFadType_3_01const_01Sacado_1_1Fad_1_1DMFad_3_01ValueType_01_4_00_01length_00_01stride_01_4.html</anchorfile>
      <anchor>a1e3f73e0e20efe3783b4eb153498467b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; const Sacado::Fad::DVFad&lt; ValueType &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01const_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
    <member kind="typedef">
      <type>Sacado::Fad::ViewFad&lt; const ValueType, length, stride, Sacado::Fad::DVFad&lt; const ValueType &gt; &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ViewFadType_3_01const_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_00_01length_00_01stride_01_4.html</anchorfile>
      <anchor>a4e0001b22b7efe3ab7856e35bb83d47b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; const Sacado::FAD_NS::DFad&lt; ValueType &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01const_01Sacado_1_1FAD__NS_1_1DFad_3_01ValueType_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
    <member kind="typedef">
      <type>Sacado::FAD_NS::ViewFad&lt; const ValueType, length, stride, Sacado::FAD_NS::DFad&lt; ValueType &gt; &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ViewFadType_3_01const_01Sacado_1_1FAD__NS_1_1DFad_3_01ValueType_01_4_00_01length_00_01stride_01_4.html</anchorfile>
      <anchor>a93e7f7b487bb3e734adb1f2bfec45f77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; const Sacado::FAD_NS::SFad&lt; ValueType, N &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01const_01Sacado_1_1FAD__NS_1_1SFad_3_01ValueType_00_01N_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
    <member kind="typedef">
      <type>Sacado::FAD_NS::ViewFad&lt; const ValueType, length, stride, Sacado::FAD_NS::SFad&lt; ValueType, N &gt; &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ViewFadType_3_01const_01Sacado_1_1FAD__NS_1_1SFad_3_01ValueType_00_01N_01_4_00_01length_00_01stride_01_4.html</anchorfile>
      <anchor>aa940115c1e60ad7001ec4fadb0146615</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; const Sacado::FAD_NS::SLFad&lt; ValueType, N &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01const_01Sacado_1_1FAD__NS_1_1SLFad_3_01ValueType_00_01N_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
    <member kind="typedef">
      <type>Sacado::FAD_NS::ViewFad&lt; const ValueType, length, stride, Sacado::FAD_NS::SLFad&lt; ValueType, N &gt; &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ViewFadType_3_01const_01Sacado_1_1FAD__NS_1_1SLFad_3_01ValueType_00_01N_01_4_00_01length_00_01stride_01_4.html</anchorfile>
      <anchor>a3a5e50192bb647c6df49e4e0fcca76b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; Sacado::Fad::DMFad&lt; ValueType &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01Sacado_1_1Fad_1_1DMFad_3_01ValueType_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
    <member kind="typedef">
      <type>Sacado::Fad::ViewFad&lt; ValueType, length, stride, Sacado::Fad::DMFad&lt; ValueType &gt; &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ViewFadType_3_01Sacado_1_1Fad_1_1DMFad_3_01ValueType_01_4_00_01length_00_01stride_01_4.html</anchorfile>
      <anchor>a36a257e5ca186d4bb9c577174c3de6ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; Sacado::Fad::DVFad&lt; ValueType &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
    <member kind="typedef">
      <type>Sacado::Fad::ViewFad&lt; ValueType, length, stride, Sacado::Fad::DVFad&lt; ValueType &gt; &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ViewFadType_3_01Sacado_1_1Fad_1_1DVFad_3_01ValueType_01_4_00_01length_00_01stride_01_4.html</anchorfile>
      <anchor>ac22b17eefb17c143ee15d625eb341fa6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; Sacado::FAD_NS::DFad&lt; ValueType &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01Sacado_1_1FAD__NS_1_1DFad_3_01ValueType_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
    <member kind="typedef">
      <type>Sacado::FAD_NS::ViewFad&lt; ValueType, length, stride, Sacado::FAD_NS::DFad&lt; ValueType &gt; &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ViewFadType_3_01Sacado_1_1FAD__NS_1_1DFad_3_01ValueType_01_4_00_01length_00_01stride_01_4.html</anchorfile>
      <anchor>a6f29e5747528fbca3894934f0775d5b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; Sacado::FAD_NS::SFad&lt; ValueType, N &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01Sacado_1_1FAD__NS_1_1SFad_3_01ValueType_00_01N_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
    <member kind="typedef">
      <type>Sacado::FAD_NS::ViewFad&lt; ValueType, length, stride, Sacado::FAD_NS::SFad&lt; ValueType, N &gt; &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ViewFadType_3_01Sacado_1_1FAD__NS_1_1SFad_3_01ValueType_00_01N_01_4_00_01length_00_01stride_01_4.html</anchorfile>
      <anchor>ab43a694472b24af09896d86b23b427b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sacado::ViewFadType&lt; Sacado::FAD_NS::SLFad&lt; ValueType, N &gt;, length, stride &gt;</name>
    <filename>structSacado_1_1ViewFadType_3_01Sacado_1_1FAD__NS_1_1SLFad_3_01ValueType_00_01N_01_4_00_01length_00_01stride_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg>length</templarg>
    <templarg>stride</templarg>
    <member kind="typedef">
      <type>Sacado::FAD_NS::ViewFad&lt; ValueType, length, stride, Sacado::FAD_NS::SLFad&lt; ValueType, N &gt; &gt;</type>
      <name>type</name>
      <anchorfile>structSacado_1_1ViewFadType_3_01Sacado_1_1FAD__NS_1_1SLFad_3_01ValueType_00_01N_01_4_00_01length_00_01stride_01_4.html</anchorfile>
      <anchor>af2cbd643a985401cc2c615e41db6a2d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sacado::Fad::ViewStorage</name>
    <filename>classSacado_1_1Fad_1_1ViewStorage.html</filename>
    <templarg></templarg>
    <templarg>static_length</templarg>
    <templarg>static_stride</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>add84aa06d9d2b63212e39bcca11dab01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>ViewStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>aef9ba756d9b87e915e8ec898e08f926e</anchor>
      <arglist>(const S &amp;x, SACADO_ENABLE_VALUE_CTOR_DECL)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>ViewStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a31cbae88886ff4f7e64da03c2da56f36</anchor>
      <arglist>(const int sz, const T &amp;x, const DerivInit zero_out=InitDerivArray)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>ViewStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>ad3585a34e2cc456589b493194d5d6450</anchor>
      <arglist>(T *v, const int arg_size=0, const int arg_stride=0)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>ViewStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a838c88210bfde44ea875b689860fd93d</anchor>
      <arglist>(const ViewStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION</type>
      <name>~ViewStorage</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a3984199019c3cd914e2b9a42ee43bd73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION ViewStorage &amp;</type>
      <name>operator=</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>ac0789afc107c457ddde46f9b960960d2</anchor>
      <arglist>(const ViewStorage &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>size</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a4c12caa6a7c4cf9240dee9d5c826692d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION int</type>
      <name>length</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>aadb37f86c506eb34816682508c649fda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>resize</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>ad825f7ceb7d1dce2d9606a6706e82fe2</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>resizeAndZero</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a04e795634ca5ff29e404b2ce0c1a09e5</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>expand</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>af74f0c8dd89829183d24f32d9bbc54f1</anchor>
      <arglist>(int sz)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>zero</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a43c01ab504fc73ca6605e9db3198ea01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a8008afa03fc6e540a34b6dfee11ea843</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION T &amp;</type>
      <name>val</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a15c7786de0e23215553c80f788bfe9f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T *</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a7007d257c816df00c8fd546bb1144250</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION T</type>
      <name>dx</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a2782d801ae3cf3eea54edc9b196b9bf1</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>abcb4f39a13962d96ca56d9466c35ea28</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION const T &amp;</type>
      <name>fastAccessDx</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a850d142bdeff7f296ae193beae1f4036</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mpl::integral_nonzero_constant&lt; int, static_length &gt;</type>
      <name>sz_</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a32659ad764d30482a747857e1bf6520b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mpl::integral_nonzero_constant&lt; int, static_stride &gt;</type>
      <name>stride_</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a4c90ced312b75ba9b49bc76890640b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>val_</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a6fc5f14053287463d82e84c77a279cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>dx_</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a0e87ebaa8a34bf4e7d1d5b172f6782f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>stride_one</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a2239b2ea6a7ee0542c58175961fe1049a6f665a9234d7395de32eb9d9deba1140</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>stride_one</name>
      <anchorfile>classSacado_1_1Fad_1_1ViewStorage.html</anchorfile>
      <anchor>a2239b2ea6a7ee0542c58175961fe1049a6f665a9234d7395de32eb9d9deba1140</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Kokkos</name>
    <filename>namespaceKokkos.html</filename>
    <namespace>Kokkos::Example</namespace>
    <namespace>Kokkos::Impl</namespace>
    <class kind="struct">Kokkos::LayoutContiguous</class>
  </compound>
  <compound kind="namespace">
    <name>Kokkos::Example</name>
    <filename>namespaceKokkos_1_1Example.html</filename>
    <namespace>Kokkos::Example::FENL</namespace>
    <class kind="class">Kokkos::Example::BoxElemFixture</class>
    <class kind="class">Kokkos::Example::BoxElemPart</class>
    <class kind="class">Kokkos::Example::HexElement_Data</class>
    <class kind="class">Kokkos::Example::HexElement_TensorData</class>
    <class kind="class">Kokkos::Example::HexElement_TensorData&lt; 27 &gt;</class>
    <class kind="class">Kokkos::Example::HexElement_TensorData&lt; 8 &gt;</class>
    <class kind="class">Kokkos::Example::HexElement_TensorEval</class>
    <class kind="struct">Kokkos::Example::MapGridUnitCube</class>
    <member kind="function">
      <type>void</type>
      <name>box_partition</name>
      <anchorfile>namespaceKokkos_1_1Example.html</anchorfile>
      <anchor>a36dc6cb93aab2f39efbd99f535d2b83e</anchor>
      <arglist>(const unsigned global_size, const unsigned global_rank, const unsigned global_box[][2], unsigned box[][2])</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>box_intersect</name>
      <anchorfile>namespaceKokkos_1_1Example.html</anchorfile>
      <anchor>a00ef0b96b35ecfb10194aea04772577d</anchor>
      <arglist>(unsigned box[][2], const unsigned boxA[][2], const unsigned boxB[][2])</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION size_t</type>
      <name>box_count</name>
      <anchorfile>namespaceKokkos_1_1Example.html</anchorfile>
      <anchor>a33f503b93ff8e28a27fb61f0df40ab1e</anchor>
      <arglist>(const unsigned box[][2])</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION void</type>
      <name>box_ghost_layer</name>
      <anchorfile>namespaceKokkos_1_1Example.html</anchorfile>
      <anchor>a5663ac4d1e306a110062cfdec84a2a2e</anchor>
      <arglist>(const unsigned global_box[][2], const unsigned local_box[][2], const unsigned ghost_layer, unsigned ghost_box[][2])</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Kokkos::Example::FENL</name>
    <filename>namespaceKokkos_1_1Example_1_1FENL.html</filename>
    <class kind="struct">Kokkos::Example::FENL::CrsMatrix</class>
    <class kind="class">Kokkos::Example::FENL::ElementComputation</class>
    <class kind="class">Kokkos::Example::FENL::ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;,           CrsMatrix&lt; ScalarType, ExecutionSpace &gt;,           Analytic &gt;</class>
    <class kind="class">Kokkos::Example::FENL::ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;,           CrsMatrix&lt; ScalarType, ExecutionSpace &gt;,           FadElement &gt;</class>
    <class kind="class">Kokkos::Example::FENL::ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;,           CrsMatrix&lt; ScalarType, ExecutionSpace &gt;,           FadElementOptimized &gt;</class>
    <class kind="class">Kokkos::Example::FENL::ElementComputation&lt; Kokkos::Example::BoxElemFixture&lt; ExecutionSpace, Order, CoordinateMap &gt;,           CrsMatrix&lt; ScalarType, ExecutionSpace &gt;,           FadQuadPoint &gt;</class>
    <class kind="class">Kokkos::Example::FENL::ElementComputationBase</class>
    <class kind="class">Kokkos::Example::FENL::NodeNodeGraph</class>
    <member kind="enumeration">
      <type></type>
      <name>AssemblyMethod</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Analytic</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da221e1e05ef7c41d03cf6f4ff060b73dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadElement</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2dad03f8f65f438bf5898dec7c734088d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadElementOptimized</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da72713d5774d2191696c3397072a61942</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadQuadPoint</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da65bc0a58dc4b3da612ac61c2cd1fc6c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Analytic</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da221e1e05ef7c41d03cf6f4ff060b73dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadElement</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2dad03f8f65f438bf5898dec7c734088d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadElementOptimized</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da72713d5774d2191696c3397072a61942</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadQuadPoint</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da65bc0a58dc4b3da612ac61c2cd1fc6c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AssemblyMethod</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Analytic</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da221e1e05ef7c41d03cf6f4ff060b73dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadElement</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2dad03f8f65f438bf5898dec7c734088d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadElementOptimized</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da72713d5774d2191696c3397072a61942</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadQuadPoint</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da65bc0a58dc4b3da612ac61c2cd1fc6c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Analytic</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da221e1e05ef7c41d03cf6f4ff060b73dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadElement</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2dad03f8f65f438bf5898dec7c734088d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadElementOptimized</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da72713d5774d2191696c3397072a61942</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FadQuadPoint</name>
      <anchorfile>namespaceKokkos_1_1Example_1_1FENL.html</anchorfile>
      <anchor>a6bc3dff525d24441d239a8d1a34c4f2da65bc0a58dc4b3da612ac61c2cd1fc6c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Kokkos::Impl</name>
    <filename>namespaceKokkos_1_1Impl.html</filename>
    <class kind="struct">Kokkos::Impl::AnalyzeSacadoShape</class>
    <class kind="struct">Kokkos::Impl::AnalyzeSacadoShape&lt; const T, Layout &gt;</class>
    <class kind="struct">Kokkos::Impl::AnalyzeSacadoShape&lt; const T[], Layout &gt;</class>
    <class kind="struct">Kokkos::Impl::AnalyzeSacadoShape&lt; const T[N], Layout &gt;</class>
    <class kind="struct">Kokkos::Impl::AnalyzeSacadoShape&lt; T *, Layout &gt;</class>
    <class kind="struct">Kokkos::Impl::AnalyzeSacadoShape&lt; T[], Layout &gt;</class>
    <class kind="struct">Kokkos::Impl::AnalyzeSacadoShape&lt; T[N], Layout &gt;</class>
    <class kind="struct">Kokkos::Impl::AnalyzeSacadoShape&lt; void, Layout &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>Sacado</name>
    <filename>namespaceSacado.html</filename>
    <namespace>Sacado::CacheFad</namespace>
    <namespace>Sacado::ELRCacheFad</namespace>
    <namespace>Sacado::ELRFad</namespace>
    <namespace>Sacado::Fad</namespace>
    <namespace>Sacado::FAD_NS</namespace>
    <namespace>Sacado::FlopCounterPack</namespace>
    <namespace>Sacado::LFad</namespace>
    <namespace>Sacado::mpl</namespace>
    <namespace>Sacado::Rad</namespace>
    <namespace>Sacado::Rad2</namespace>
    <namespace>Sacado::Rad2d</namespace>
    <namespace>Sacado::Radnt</namespace>
    <namespace>Sacado::RadVec</namespace>
    <namespace>Sacado::Tay</namespace>
    <class kind="class">Sacado::AbstractScalarParameterEntry</class>
    <class kind="struct">Sacado::Base</class>
    <class kind="struct">Sacado::BaseExprType</class>
    <class kind="struct">Sacado::BaseExprType&lt; CacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; ELRFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; Fad::DMFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; Fad::DVFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; Fad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; FAD_NS::DFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; FAD_NS::SFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; FAD_NS::SLFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; FAD_NS::ViewFad&lt; T, l, s, U &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; LFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; LFad::LogicalSparse&lt; T, L &gt; &gt;</class>
    <class kind="struct">Sacado::BaseExprType&lt; Tay::Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::ConstTemplateIterator</class>
    <class kind="struct">Sacado::DefaultEvalTypeTraits</class>
    <class kind="struct">Sacado::ds_array</class>
    <class kind="struct">Sacado::ds_array&lt; T, true &gt;</class>
    <class kind="struct">Sacado::dummy</class>
    <class kind="struct">Sacado::dummy&lt; T, T &gt;</class>
    <class kind="struct">Sacado::dummy_arg</class>
    <class kind="class">Sacado::Handle</class>
    <class kind="struct">Sacado::integral_nonzero</class>
    <class kind="struct">Sacado::integral_nonzero&lt; T, zero, false &gt;</class>
    <class kind="struct">Sacado::IsADType</class>
    <class kind="struct">Sacado::IsADType&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; CacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Fad::DMFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Fad::DVFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Fad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; LFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Rad2::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Rad2::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Rad::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Rad::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; RadVec::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; RadVec::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Tay::CacheTaylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsADType&lt; Tay::Taylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual</class>
    <class kind="struct">Sacado::IsEqual&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; Fad::DMFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; Fad::DVFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; Tay::CacheTaylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsEqual&lt; Tay::Taylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr</class>
    <class kind="struct">Sacado::IsExpr&lt; CacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; ELRFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; Fad::DMFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; Fad::DVFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; Fad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; FAD_NS::DFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; FAD_NS::SFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; FAD_NS::SLFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; FAD_NS::ViewFad&lt; T, l, s, U &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; LFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; LFad::LogicalSparse&lt; T, L &gt; &gt;</class>
    <class kind="struct">Sacado::IsExpr&lt; Tay::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsFad</class>
    <class kind="struct">Sacado::IsFad&lt; Fad::DMFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsFad&lt; Fad::DVFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsFad&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsFad&lt; FAD_NS::DFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsFad&lt; FAD_NS::SFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::IsFad&lt; FAD_NS::SLFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::IsFad&lt; FAD_NS::ViewFad&lt; T, l, s, U &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType</class>
    <class kind="struct">Sacado::IsScalarType&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; CacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Fad::DMFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Fad::DVFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Fad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; LFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Rad2::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Rad2::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Rad::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Rad::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; RadVec::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; RadVec::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Tay::CacheTaylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsScalarType&lt; Tay::Taylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; const T &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; Fad::DMFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; Fad::DVFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; Tay::CacheTaylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsStaticallySized&lt; Tay::Taylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::IsView</class>
    <class kind="struct">Sacado::IsView&lt; Sacado::FAD_NS::ViewFad&lt; T, l, s, U &gt; &gt;</class>
    <class kind="struct">Sacado::MarkConstant</class>
    <class kind="struct">Sacado::MarkConstant&lt; Rad2::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::MarkConstant&lt; Rad2::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::MarkConstant&lt; Rad::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::MarkConstant&lt; Rad::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::MarkConstant&lt; RadVec::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::MarkConstant&lt; RadVec::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::OverrideDefaultPromote</class>
    <class kind="class">Sacado::ParameterAccessor</class>
    <class kind="class">Sacado::ParameterFamilyBase</class>
    <class kind="class">Sacado::ParameterLibraryBase</class>
    <class kind="class">Sacado::ParameterRegistration</class>
    <class kind="class">Sacado::ParameterVectorBase</class>
    <class kind="struct">Sacado::Promote</class>
    <class kind="struct">Sacado::Promote&lt; A, A,                                                                                                                           typename mpl::enable_if_c&lt; !OverrideDefaultPromote&lt; A &gt;::value &gt;::type &gt;</class>
    <class kind="struct">Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; !mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   !mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   IsExpr&lt; A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   IsExpr&lt; B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   mpl::is_same&lt; typename BaseExprType&lt; typename A::value_type &gt;::type,                                                                                                                                                                                                                                                                                                                                                                                                                                                                   typename BaseExprType&lt; typename B::value_type &gt;::type &gt;::value                                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</class>
    <class kind="struct">Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; !mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   !mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   IsExpr&lt; A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   mpl::is_convertible&lt; B, typename BaseExprType&lt; typename A::value_type &gt;::type &gt;::value                                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</class>
    <class kind="struct">Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; !mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   !mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                   IsExpr&lt; B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                                           mpl::is_convertible&lt; A, typename BaseExprType&lt; typename B::value_type &gt;::type &gt;::value                                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</class>
    <class kind="struct">Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !OverrideDefaultPromote&lt; A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !OverrideDefaultPromote&lt; B &gt;::value                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</class>
    <class kind="struct">Sacado::Promote&lt; A, B,                                                                                                                           typename mpl::enable_if_c&lt; mpl::is_convertible&lt; B, A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !mpl::is_convertible&lt; A, B &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !OverrideDefaultPromote&lt; A &gt;::value &amp;&amp;                                                                                                                                                                                                                                                                                                                                           !OverrideDefaultPromote&lt; B &gt;::value                                                                                                                                                                                                                                                                                                                                   &gt;::type &gt;</class>
    <class kind="class">Sacado::Random</class>
    <class kind="struct">Sacado::RemoveConst</class>
    <class kind="struct">Sacado::RemoveConst&lt; const T &gt;</class>
    <class kind="class">Sacado::ScalarParameterEntry</class>
    <class kind="class">Sacado::ScalarParameterFamily</class>
    <class kind="class">Sacado::ScalarParameterLibrary</class>
    <class kind="class">Sacado::ScalarParameterVector</class>
    <class kind="struct">Sacado::ScalarType</class>
    <class kind="struct">Sacado::ScalarType&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; CacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; const T &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; Fad::DMFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; Fad::DVFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; Fad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; LFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; Rad2::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; Rad2::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; Rad::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; Rad::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; RadVec::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; RadVec::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; Tay::CacheTaylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarType&lt; Tay::Taylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue</class>
    <class kind="struct">Sacado::ScalarValue&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; CacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Fad::DMFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Fad::DVFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Fad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; LFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Rad2::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Rad::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; RadVec::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Tay::CacheTaylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ScalarValue&lt; Tay::Taylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ss_array</class>
    <class kind="struct">Sacado::ss_array&lt; T, true &gt;</class>
    <class kind="struct">Sacado::StaticSize</class>
    <class kind="struct">Sacado::StaticSize&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StaticSize&lt; const CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StaticSize&lt; const ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StaticSize&lt; const ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StaticSize&lt; const Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StaticSize&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StaticSize&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StaticSize&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StringName</class>
    <class kind="struct">Sacado::StringName&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Fad::DMFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Fad::DVFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Rad2::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Rad::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; RadVec::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Tay::CacheTaylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::StringName&lt; Tay::Taylor&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::TemplateIterator</class>
    <class kind="class">Sacado::TemplateManager</class>
    <class kind="struct">Sacado::Value</class>
    <class kind="struct">Sacado::Promote&lt; A, B,                                                                                                                                                                                                                                                   typename mpl::enable_if_c&lt; mpl::is_convertible&lt; A, B &gt;::value &amp;&ampmpl::is_convertible&lt; B, A &gt;::value &amp;&ampmpl::is_same&lt; A, B &gt;::value &amp;&ampsExpr&lt; A &gt;::value||sExpr&lt; B &gt;::value</class>
    <class kind="struct">Sacado::Value&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; CacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Fad::DMFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Fad::DVFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Fad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; LFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Rad2::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Rad::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; RadVec::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Tay::CacheTaylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Value&lt; Tay::Taylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType</class>
    <class kind="struct">Sacado::ValueType&lt; CacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; CacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; CacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; CacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; CacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; const T &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRCacheFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRCacheFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRCacheFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRCacheFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRCacheFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRFad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRFad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRFad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; ELRFad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Fad::ConstExpr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Fad::DFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Fad::DMFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Fad::DVFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Fad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Fad::SFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Fad::SimpleFad&lt; ValueT &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Fad::SLFad&lt; ValueT, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Fad::ViewFad&lt; ValueT, Size, Stride, Base &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; FlopCounterPack::ScalarFlopCounter&lt; ScalarT &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; LFad::Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; LFad::LogicalSparse&lt; ValT, LogT &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Rad2::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Rad2::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Rad::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Rad::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; RadVec::ADvar&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; RadVec::ADvari&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Tay::CacheTaylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ValueType&lt; Tay::Taylor&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ViewFadType</class>
    <class kind="struct">Sacado::ViewFadType&lt; const Sacado::Fad::DMFad&lt; ValueType &gt;, length, stride &gt;</class>
    <class kind="struct">Sacado::ViewFadType&lt; const Sacado::Fad::DVFad&lt; ValueType &gt;, length, stride &gt;</class>
    <class kind="struct">Sacado::ViewFadType&lt; const Sacado::FAD_NS::DFad&lt; ValueType &gt;, length, stride &gt;</class>
    <class kind="struct">Sacado::ViewFadType&lt; const Sacado::FAD_NS::SFad&lt; ValueType, N &gt;, length, stride &gt;</class>
    <class kind="struct">Sacado::ViewFadType&lt; const Sacado::FAD_NS::SLFad&lt; ValueType, N &gt;, length, stride &gt;</class>
    <class kind="struct">Sacado::ViewFadType&lt; Sacado::Fad::DMFad&lt; ValueType &gt;, length, stride &gt;</class>
    <class kind="struct">Sacado::ViewFadType&lt; Sacado::Fad::DVFad&lt; ValueType &gt;, length, stride &gt;</class>
    <class kind="struct">Sacado::ViewFadType&lt; Sacado::FAD_NS::DFad&lt; ValueType &gt;, length, stride &gt;</class>
    <class kind="struct">Sacado::ViewFadType&lt; Sacado::FAD_NS::SFad&lt; ValueType, N &gt;, length, stride &gt;</class>
    <class kind="struct">Sacado::ViewFadType&lt; Sacado::FAD_NS::SLFad&lt; ValueType, N &gt;, length, stride &gt;</class>
    <member kind="enumeration">
      <type></type>
      <name>DerivInit</name>
      <anchorfile>namespaceSacado.html</anchorfile>
      <anchor>adca2d4063fa57ca300410934bd6f61db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoInitDerivArray</name>
      <anchorfile>namespaceSacado.html</anchorfile>
      <anchor>adca2d4063fa57ca300410934bd6f61dba6dc173df9d3659b71cb8107147b0f66e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InitDerivArray</name>
      <anchorfile>namespaceSacado.html</anchorfile>
      <anchor>adca2d4063fa57ca300410934bd6f61dba5f4d1858e76a2c4ca69276edec61580a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSacado.html</anchorfile>
      <anchor>a0ad90f5d4de6afaf6736179a2e162a9a</anchor>
      <arglist>(std::ostream &amp;os, const ParameterLibraryBase&lt; FamilyType, EntryType &gt; &amp;pl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado.html</anchorfile>
      <anchor>ac3639a589ecf092129b7ea7aad975e4e</anchor>
      <arglist>(const Handle&lt; T &gt; &amp;h1, const Handle&lt; T &gt; &amp;h2)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Sacado::CacheFad</name>
    <filename>namespaceSacado_1_1CacheFad.html</filename>
    <class kind="class">Sacado::CacheFad::AbsOp</class>
    <class kind="struct">Sacado::CacheFad::BaseExpr</class>
    <class kind="class">Sacado::CacheFad::ConstExpr</class>
    <class kind="class">Sacado::CacheFad::DFad</class>
    <class kind="class">Sacado::CacheFad::Expr</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; AbsOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; FAbsOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; UnaryMinusOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::Expr&lt; UnaryPlusOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::CacheFad::ExprLevel</class>
    <class kind="struct">Sacado::CacheFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::FAbsOp</class>
    <class kind="class">Sacado::CacheFad::GeneralFad</class>
    <class kind="struct">Sacado::CacheFad::IsFadExpr</class>
    <class kind="struct">Sacado::CacheFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::CacheFad::SFad</class>
    <class kind="struct">Sacado::CacheFad::SFadExprTag</class>
    <class kind="class">Sacado::CacheFad::SLFad</class>
    <class kind="class">Sacado::CacheFad::UnaryMinusOp</class>
    <class kind="class">Sacado::CacheFad::UnaryPlusOp</class>
    <class kind="class">Sacado::CacheFad::ViewFad</class>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION Expr&lt; UnaryPlusOp&lt; Expr&lt; T &gt; &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1CacheFad.html</anchorfile>
      <anchor>a2891242ec2e61ab1522a7ae5915f3c53</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION Expr&lt; UnaryMinusOp&lt; Expr&lt; T &gt; &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1CacheFad.html</anchorfile>
      <anchor>aed4c4572f580827a289aaddef5afb88a</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION Expr&lt; AbsOp&lt; Expr&lt; T &gt; &gt; &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSacado_1_1CacheFad.html</anchorfile>
      <anchor>a67f04b9f901dc20cc7e880863d3ae08e</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION Expr&lt; FAbsOp&lt; Expr&lt; T &gt; &gt; &gt;</type>
      <name>fabs</name>
      <anchorfile>namespaceSacado_1_1CacheFad.html</anchorfile>
      <anchor>a9ce7185cad80799b31ed66fd2ba74f16</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>operator!</name>
      <anchorfile>namespaceSacado_1_1CacheFad.html</anchorfile>
      <anchor>a898c5fd9e7eab9f012c5e75faa8bf945</anchor>
      <arglist>(const Expr&lt; ExprT &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>toBool</name>
      <anchorfile>namespaceSacado_1_1CacheFad.html</anchorfile>
      <anchor>a1d990f5ee276cefab6633077b17cdb40</anchor>
      <arglist>(const Expr&lt; ExprT &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSacado_1_1CacheFad.html</anchorfile>
      <anchor>ab6413c34ee787a505157a4005b4cb335</anchor>
      <arglist>(std::ostream &amp;os, const Expr&lt; ExprT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Sacado::ELRCacheFad</name>
    <filename>namespaceSacado_1_1ELRCacheFad.html</filename>
    <class kind="class">Sacado::ELRCacheFad::AbsOp</class>
    <class kind="struct">Sacado::ELRCacheFad::BaseExpr</class>
    <class kind="class">Sacado::ELRCacheFad::ConstExpr</class>
    <class kind="class">Sacado::ELRCacheFad::DFad</class>
    <class kind="class">Sacado::ELRCacheFad::Expr</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; AbsOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; FAbsOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; UnaryMinusOp&lt; ExprT &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::Expr&lt; UnaryPlusOp&lt; ExprT &gt; &gt;</class>
    <class kind="struct">Sacado::ELRCacheFad::ExprConstRef</class>
    <class kind="struct">Sacado::ELRCacheFad::ExprConstRef&lt; ConstExpr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ELRCacheFad::ExprLevel</class>
    <class kind="struct">Sacado::ELRCacheFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::FAbsOp</class>
    <class kind="class">Sacado::ELRCacheFad::GeneralFad</class>
    <class kind="struct">Sacado::ELRCacheFad::IsFadExpr</class>
    <class kind="struct">Sacado::ELRCacheFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::ELRCacheFad::SFad</class>
    <class kind="struct">Sacado::ELRCacheFad::SFadExprTag</class>
    <class kind="class">Sacado::ELRCacheFad::SLFad</class>
    <class kind="class">Sacado::ELRCacheFad::UnaryMinusOp</class>
    <class kind="class">Sacado::ELRCacheFad::UnaryPlusOp</class>
    <class kind="class">Sacado::ELRCacheFad::ViewFad</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSacado_1_1ELRCacheFad.html</anchorfile>
      <anchor>a9a5a123816c5b077f41c67c188f4364c</anchor>
      <arglist>(std::ostream &amp;os, const GeneralFad&lt; T, Storage &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION Expr&lt; UnaryPlusOp&lt; Expr&lt; T &gt; &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1ELRCacheFad.html</anchorfile>
      <anchor>a64020b36780f8e94c013f7f1eb017a08</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION Expr&lt; UnaryMinusOp&lt; Expr&lt; T &gt; &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1ELRCacheFad.html</anchorfile>
      <anchor>aac6cd8c5f5e9d5bb0800e648dd8340a4</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION Expr&lt; AbsOp&lt; Expr&lt; T &gt; &gt; &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSacado_1_1ELRCacheFad.html</anchorfile>
      <anchor>a99debbc1ee11c9e04df38d3150bfb01c</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION Expr&lt; FAbsOp&lt; Expr&lt; T &gt; &gt; &gt;</type>
      <name>fabs</name>
      <anchorfile>namespaceSacado_1_1ELRCacheFad.html</anchorfile>
      <anchor>a270644230a423f82b6fa7eb456dffc56</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>operator!</name>
      <anchorfile>namespaceSacado_1_1ELRCacheFad.html</anchorfile>
      <anchor>aa4b214149037f1fd8446e20964abcc72</anchor>
      <arglist>(const Expr&lt; ExprT &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>KOKKOS_INLINE_FUNCTION bool</type>
      <name>toBool</name>
      <anchorfile>namespaceSacado_1_1ELRCacheFad.html</anchorfile>
      <anchor>a4ac4b2d5928f14c880064464adcb6e10</anchor>
      <arglist>(const Expr&lt; ExprT &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSacado_1_1ELRCacheFad.html</anchorfile>
      <anchor>adec945901ad7019eb5b44e080752335e</anchor>
      <arglist>(std::ostream &amp;os, const Expr&lt; ExprT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Sacado::ELRFad</name>
    <filename>namespaceSacado_1_1ELRFad.html</filename>
    <class kind="struct">Sacado::ELRFad::BaseExpr</class>
    <class kind="class">Sacado::ELRFad::ConstExpr</class>
    <class kind="class">Sacado::ELRFad::DFad</class>
    <class kind="class">Sacado::ELRFad::Expr</class>
    <class kind="class">Sacado::ELRFad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::Expr&lt; SFadExprTag&lt; T, Num &gt; &gt;</class>
    <class kind="struct">Sacado::ELRFad::ExprConstRef</class>
    <class kind="struct">Sacado::ELRFad::ExprConstRef&lt; ConstExpr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::ELRFad::ExprLevel</class>
    <class kind="struct">Sacado::ELRFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::GeneralFad</class>
    <class kind="struct">Sacado::ELRFad::IsFadExpr</class>
    <class kind="struct">Sacado::ELRFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::ELRFad::SFad</class>
    <class kind="struct">Sacado::ELRFad::SFadExprTag</class>
    <class kind="class">Sacado::ELRFad::SLFad</class>
    <class kind="class">Sacado::ELRFad::ViewFad</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSacado_1_1ELRFad.html</anchorfile>
      <anchor>a758474af6daaba5d32e6500de5acb05f</anchor>
      <arglist>(std::ostream &amp;os, const GeneralFad&lt; T, Storage &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Sacado::Fad</name>
    <filename>namespaceSacado_1_1Fad.html</filename>
    <class kind="class">Sacado::Fad::ArrayTraits</class>
    <class kind="struct">Sacado::Fad::ArrayValueType</class>
    <class kind="struct">Sacado::Fad::BaseExpr</class>
    <class kind="struct">Sacado::Fad::BaseExpr&lt; GeneralFad&lt; T, Fad::MemPoolStorage&lt; T &gt; &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::BaseExpr&lt; GeneralFad&lt; T, Fad::VectorDynamicStorage&lt; T &gt; &gt; &gt;</class>
    <class kind="class">Sacado::Fad::BLAS</class>
    <class kind="class">Sacado::Fad::ConstExpr</class>
    <class kind="class">Sacado::Fad::DFad</class>
    <class kind="class">Sacado::Fad::DMFad</class>
    <class kind="class">Sacado::Fad::DVFad</class>
    <class kind="class">Sacado::Fad::DynamicStorage</class>
    <class kind="class">Sacado::Fad::Expr</class>
    <class kind="class">Sacado::Fad::Expr&lt; GeneralFad&lt; T, Storage &gt; &gt;</class>
    <class kind="class">Sacado::Fad::Expr&lt; SFadExprTag&lt; T, Num &gt;, ExprSpecDefault &gt;</class>
    <class kind="struct">Sacado::Fad::ExprLevel</class>
    <class kind="struct">Sacado::Fad::ExprLevel&lt; DMFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprLevel&lt; DVFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprLevel&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpec</class>
    <class kind="struct">Sacado::Fad::ExprSpec&lt; Expr&lt; ExprT, Spec &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::ExprSpecDefault</class>
    <class kind="class">Sacado::Fad::Fad_LAPACK</class>
    <class kind="class">Sacado::Fad::GeneralFad</class>
    <class kind="struct">Sacado::Fad::IsFadExpr</class>
    <class kind="struct">Sacado::Fad::IsFadExpr&lt; DMFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::IsFadExpr&lt; DVFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::Fad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::Fad::MemPool</class>
    <class kind="class">Sacado::Fad::MemPoolManager</class>
    <class kind="class">Sacado::Fad::MemPoolStorage</class>
    <class kind="struct">Sacado::Fad::mp_array</class>
    <class kind="struct">Sacado::Fad::mp_array&lt; T, true &gt;</class>
    <class kind="class">Sacado::Fad::SFad</class>
    <class kind="struct">Sacado::Fad::SFadExprTag</class>
    <class kind="class">Sacado::Fad::SimpleFad</class>
    <class kind="class">Sacado::Fad::SLFad</class>
    <class kind="class">Sacado::Fad::StaticStorage</class>
    <class kind="class">Sacado::Fad::Vector</class>
    <class kind="class">Sacado::Fad::Vector&lt; OrdinalType, Sacado::Fad::DVFad&lt; ValueType &gt; &gt;</class>
    <class kind="class">Sacado::Fad::VectorDynamicStorage</class>
    <class kind="class">Sacado::Fad::ViewFad</class>
    <class kind="class">Sacado::Fad::ViewStorage</class>
    <member kind="enumeration">
      <type></type>
      <name>VectorDerivOrientation</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a0dd78c50f081900d819c9588e944addf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Row</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a0dd78c50f081900d819c9588e944addfa1deea0f6e99534c0ef2fbb62e3c74b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Column</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a0dd78c50f081900d819c9588e944addfaaa10cbcec904e961ff97edff796f11a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>ae9c5fe24c224b4487ceb41d43fabf1bf</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a5a68d284f5f7185f628f130bc384800a</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>exp</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a38e9de03465276b030c0786576fc0830</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>log</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a6503354dc19c1e0c29c05c2cbf414978</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>log10</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>ad386a2e651865a45bbc02efd1c5e7c97</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>sqrt</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a10c35516bc7eb5447972c07468434757</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>cos</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>aaa2b6e9bbd05495f826c3b7cba5cf0cf</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>sin</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>ad9fa19aa13abca10928eba5b7f884278</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>tan</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a397a1ba92ef1e3bb877d36c65ad7a4ef</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>acos</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>abe8710dfaaafae1c38660642362ef14a</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>asin</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a0cc613446c8d7f6a83ec278d06b74818</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>atan</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a39f96326944b765b69fd9ab1f0bd6653</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>cosh</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a5a05ba0585a946846bd1d2f1dfb1fe69</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>sinh</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a7cb71a7dfc473ceacf575b71607d341a</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>tanh</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>aa0c4d73692dcb7b7e72b6fc6cb9e8eec</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>acosh</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>ad600f23cb25e0b2f9ea71b190b491ae4</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>asinh</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>aeab64cea7b8cf45086f5644a2dee7c17</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>atanh</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a471d3e5f3c3e96dc4f299d371f6bb2ca</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>adcd9504e6dd413cc73342488a80769ee</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>fabs</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>aa001e3f89cfbb673e5c9c773b62d0173</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>af4d62764ff937a0097f0d54943a89fb3</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a3bbfe7efdfa95d2ee9a56b121cb4aa6c</anchor>
      <arglist>(const typename SimpleFad&lt; ValueT &gt;::value_type &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a3d32ada319b3b8a9a168f6704efb7140</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const typename SimpleFad&lt; ValueT &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a7ad5d89f4094a81cc50496eacae91410</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a0495dbd2c834fd6f05a331dd73c996f6</anchor>
      <arglist>(const typename SimpleFad&lt; ValueT &gt;::value_type &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a54b72661ef7d1b77db2b907f464a904e</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const typename SimpleFad&lt; ValueT &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a7551e0e7a2ad456ead99ad0311c29005</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>acfea298bd10c32ac88c784db630999f3</anchor>
      <arglist>(const typename SimpleFad&lt; ValueT &gt;::value_type &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>ae5c67c829832df1ffe73bf8946361a8f</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const typename SimpleFad&lt; ValueT &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>ac9d8d0e66f242794c7eb74f0cf602474</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a5748f16687e209a7fbccdf88c0f9d4b8</anchor>
      <arglist>(const typename SimpleFad&lt; ValueT &gt;::value_type &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a60632733609e64f1bbdd2561aadebc56</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const typename SimpleFad&lt; ValueT &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a0824ca2fb614f193ab61be067b4370fa</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a9743b793195b47cd3e1fcc0f23efbfaa</anchor>
      <arglist>(const typename SimpleFad&lt; ValueT &gt;::value_type &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>ad407a0317f1da677a8e6e11df49e249d</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const typename SimpleFad&lt; ValueT &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>acf472305a360b9157280d67e9f2d9e39</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>aa9468337aa6a2a181fd2e352d227f924</anchor>
      <arglist>(const typename SimpleFad&lt; ValueT &gt;::value_type &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a90c0378c42914f8ca8a3ad19b48425b4</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const typename SimpleFad&lt; ValueT &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a4b7012fb5c12b7e4828c444fb18dde5c</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>ada01b0a433e934e2f3164465358a41db</anchor>
      <arglist>(const typename SimpleFad&lt; ValueT &gt;::value_type &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a2fd01470007493b205e51379940aca46</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const typename SimpleFad&lt; ValueT &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a793e4fdad4d66b1f8e920a65deced0f9</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>ad6a11737d4f4fd72b9f7973acb944c46</anchor>
      <arglist>(const typename SimpleFad&lt; ValueT &gt;::value_type &amp;a, const SimpleFad&lt; ValueT &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SimpleFad&lt; ValueT &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a3e71d1e806ed75d1649137fa16820d13</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a, const typename SimpleFad&lt; ValueT &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a7f2af5c533adda70c79161c684c7216a</anchor>
      <arglist>(const SimpleFad&lt; ValueT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toBool</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a9d860ac386960c4690a65620118b5149</anchor>
      <arglist>(const SimpleFad&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSacado_1_1Fad.html</anchorfile>
      <anchor>a2c37c6aacf670ee05fa12175a50ea7db</anchor>
      <arglist>(std::ostream &amp;os, const SimpleFad&lt; ValueT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Sacado::FAD_NS</name>
    <filename>namespaceSacado_1_1FAD__NS.html</filename>
    <class kind="struct">Sacado::FAD_NS::BaseExpr&lt; GeneralFad&lt; T, Fad::DynamicStorage&lt; T &gt; &gt; &gt;</class>
    <class kind="struct">Sacado::FAD_NS::BaseExpr&lt; GeneralFad&lt; T, Fad::StaticStorage&lt; T, N &gt; &gt; &gt;</class>
    <class kind="struct">Sacado::FAD_NS::BaseExpr&lt; GeneralFad&lt; T, Fad::ViewStorage&lt; T, l, s, U &gt; &gt; &gt;</class>
    <class kind="class">Sacado::FAD_NS::DFad</class>
    <class kind="struct">Sacado::FAD_NS::ExprLevel&lt; DFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::FAD_NS::ExprLevel&lt; SFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::FAD_NS::ExprLevel&lt; SLFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::FAD_NS::ExprLevel&lt; ViewFad&lt; T, l, s, U &gt; &gt;</class>
    <class kind="struct">Sacado::FAD_NS::IsFadExpr&lt; DFad&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::FAD_NS::IsFadExpr&lt; SFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::FAD_NS::IsFadExpr&lt; SLFad&lt; T, N &gt; &gt;</class>
    <class kind="struct">Sacado::FAD_NS::IsFadExpr&lt; ViewFad&lt; T, l, s, U &gt; &gt;</class>
    <class kind="class">Sacado::FAD_NS::SFad</class>
    <class kind="class">Sacado::FAD_NS::SLFad</class>
    <class kind="class">Sacado::FAD_NS::StaticStorage</class>
    <class kind="class">Sacado::FAD_NS::ViewFad</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSacado_1_1FAD__NS.html</anchorfile>
      <anchor>a561964236698eb6b061587435855fabb</anchor>
      <arglist>(std::ostream &amp;os, const Expr&lt; SFadExprTag&lt; T, Num &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Sacado::FlopCounterPack</name>
    <filename>namespaceSacado_1_1FlopCounterPack.html</filename>
    <class kind="class">Sacado::FlopCounterPack::FlopCounts</class>
    <class kind="class">Sacado::FlopCounterPack::ScalarFlopCounter</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printCountersTable</name>
      <anchorfile>namespaceSacado_1_1FlopCounterPack.html</anchorfile>
      <anchor>a63fbe6db4a1d0aa0916652ebe0a27d0a</anchor>
      <arglist>(const int n, const char *names[], const char *abbr[], const FlopCounts counts[], std::ostream &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Sacado::LFad</name>
    <filename>namespaceSacado_1_1LFad.html</filename>
    <class kind="class">Sacado::LFad::Expr</class>
    <class kind="class">Sacado::LFad::Expr&lt; LogicalSparseImp&lt; ValT, LogT &gt; &gt;</class>
    <class kind="struct">Sacado::LFad::ExprLevel</class>
    <class kind="struct">Sacado::LFad::ExprLevel&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="struct">Sacado::LFad::ExprLevel&lt; LogicalSparse&lt; T, L &gt; &gt;</class>
    <class kind="struct">Sacado::LFad::IsFadExpr</class>
    <class kind="struct">Sacado::LFad::IsFadExpr&lt; Expr&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::LFad::LogicalSparse</class>
    <class kind="class">Sacado::LFad::LogicalSparseImp</class>
  </compound>
  <compound kind="namespace">
    <name>Sacado::mpl</name>
    <filename>namespaceSacado_1_1mpl.html</filename>
    <namespace>Sacado::mpl::placeholders</namespace>
    <class kind="struct">Sacado::mpl::add_type</class>
    <class kind="struct">Sacado::mpl::apply</class>
    <class kind="struct">Sacado::mpl::apply0</class>
    <class kind="struct">Sacado::mpl::apply1</class>
    <class kind="struct">Sacado::mpl::apply2</class>
    <class kind="struct">Sacado::mpl::apply3</class>
    <class kind="struct">Sacado::mpl::apply4</class>
    <class kind="struct">Sacado::mpl::apply5</class>
    <class kind="struct">Sacado::mpl::apply_wrap</class>
    <class kind="struct">Sacado::mpl::apply_wrap0</class>
    <class kind="struct">Sacado::mpl::apply_wrap1</class>
    <class kind="struct">Sacado::mpl::apply_wrap2</class>
    <class kind="struct">Sacado::mpl::apply_wrap3</class>
    <class kind="struct">Sacado::mpl::apply_wrap4</class>
    <class kind="struct">Sacado::mpl::apply_wrap5</class>
    <class kind="struct">Sacado::mpl::apply_wrap&lt; F, A1, A2, A3, A4, mpl::none &gt;</class>
    <class kind="struct">Sacado::mpl::apply_wrap&lt; F, A1, A2, A3, mpl::none, mpl::none &gt;</class>
    <class kind="struct">Sacado::mpl::apply_wrap&lt; F, A1, A2, mpl::none, mpl::none, mpl::none &gt;</class>
    <class kind="struct">Sacado::mpl::apply_wrap&lt; F, A1, mpl::none, mpl::none, mpl::none, mpl::none &gt;</class>
    <class kind="struct">Sacado::mpl::apply_wrap&lt; F, mpl::none, mpl::none, mpl::none, mpl::none, mpl::none &gt;</class>
    <class kind="struct">Sacado::mpl::arg</class>
    <class kind="struct">Sacado::mpl::arg&lt; 1 &gt;</class>
    <class kind="struct">Sacado::mpl::arg&lt; 2 &gt;</class>
    <class kind="struct">Sacado::mpl::arg&lt; 3 &gt;</class>
    <class kind="struct">Sacado::mpl::arg&lt; 4 &gt;</class>
    <class kind="struct">Sacado::mpl::arg&lt; 5 &gt;</class>
    <class kind="struct">Sacado::mpl::at</class>
    <class kind="struct">Sacado::mpl::at_impl</class>
    <class kind="struct">Sacado::mpl::at_impl&lt; range_c_tag, Pos &gt;</class>
    <class kind="struct">Sacado::mpl::begin</class>
    <class kind="struct">Sacado::mpl::begin_impl</class>
    <class kind="struct">Sacado::mpl::begin_impl&lt; range_c_tag &gt;</class>
    <class kind="struct">Sacado::mpl::bind1</class>
    <class kind="struct">Sacado::mpl::bind2</class>
    <class kind="struct">Sacado::mpl::bind3</class>
    <class kind="struct">Sacado::mpl::bind4</class>
    <class kind="struct">Sacado::mpl::bind5</class>
    <class kind="struct">Sacado::mpl::convertible_impl</class>
    <class kind="struct">Sacado::mpl::deref</class>
    <class kind="struct">Sacado::mpl::deref&lt; range_c_iterator&lt; Range, Pos &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::disable_if</class>
    <class kind="struct">Sacado::mpl::disable_if_c</class>
    <class kind="struct">Sacado::mpl::disable_if_c&lt; false, T &gt;</class>
    <class kind="struct">Sacado::mpl::enable_if</class>
    <class kind="struct">Sacado::mpl::enable_if_c</class>
    <class kind="struct">Sacado::mpl::enable_if_c&lt; true, T &gt;</class>
    <class kind="struct">Sacado::mpl::end</class>
    <class kind="struct">Sacado::mpl::end_impl</class>
    <class kind="struct">Sacado::mpl::end_impl&lt; range_c_tag &gt;</class>
    <class kind="struct">Sacado::mpl::find</class>
    <class kind="struct">Sacado::mpl::find&lt; Seq, T, Iter1, Iter1 &gt;</class>
    <class kind="struct">Sacado::mpl::for_each</class>
    <class kind="struct">Sacado::mpl::for_each&lt; Seq, Iter1, Iter1 &gt;</class>
    <class kind="struct">Sacado::mpl::for_each_no_kokkos</class>
    <class kind="struct">Sacado::mpl::for_each_no_kokkos&lt; Seq, Iter1, Iter1 &gt;</class>
    <class kind="struct">Sacado::mpl::Found</class>
    <class kind="struct">Sacado::mpl::has_type</class>
    <class kind="struct">Sacado::mpl::hk</class>
    <class kind="struct">Sacado::mpl::hk&lt; k, arg&lt; N &gt;, T1, T2, T3, T4, T5 &gt;</class>
    <class kind="struct">Sacado::mpl::hk&lt; k, arg&lt;-1 &gt;, T1, T2, T3, T4, T5 &gt;</class>
    <class kind="struct">Sacado::mpl::integral_c</class>
    <class kind="struct">Sacado::mpl::integral_nonzero_constant</class>
    <class kind="struct">Sacado::mpl::integral_nonzero_constant&lt; T, zero, false &gt;</class>
    <class kind="struct">Sacado::mpl::is_convertible</class>
    <class kind="struct">Sacado::mpl::is_placeholder</class>
    <class kind="struct">Sacado::mpl::is_placeholder&lt; arg&lt; N &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::is_placeholder&lt; F&lt; T1 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::is_placeholder&lt; F&lt; T1, T2 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::is_placeholder&lt; F&lt; T1, T2, T3 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::is_placeholder&lt; F&lt; T1, T2, T3, T4 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::is_placeholder&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::is_same</class>
    <class kind="struct">Sacado::mpl::is_same&lt; T, T &gt;</class>
    <class kind="struct">Sacado::mpl::lambda</class>
    <class kind="struct">Sacado::mpl::lambda&lt; F&lt; T1 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::lambda&lt; F&lt; T1, T2 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::lambda&lt; F&lt; T1, T2, T3 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::lambda&lt; F&lt; T1, T2, T3, T4 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::lambda&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::lazy_disable_if</class>
    <class kind="struct">Sacado::mpl::lazy_disable_if_c</class>
    <class kind="struct">Sacado::mpl::lazy_disable_if_c&lt; false, T &gt;</class>
    <class kind="struct">Sacado::mpl::lazy_enable_if</class>
    <class kind="struct">Sacado::mpl::lazy_enable_if_c</class>
    <class kind="struct">Sacado::mpl::lazy_enable_if_c&lt; true, T &gt;</class>
    <class kind="struct">Sacado::mpl::mpl_if</class>
    <class kind="struct">Sacado::mpl::mpl_if_c</class>
    <class kind="struct">Sacado::mpl::mpl_if_c&lt; false, T1, T2 &gt;</class>
    <class kind="struct">Sacado::mpl::mpl_if_c&lt; true, T1, T2 &gt;</class>
    <class kind="struct">Sacado::mpl::next</class>
    <class kind="struct">Sacado::mpl::next&lt; range_c_iterator&lt; Range, Pos &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::none</class>
    <class kind="struct">Sacado::mpl::push_back</class>
    <class kind="struct">Sacado::mpl::push_back_impl</class>
    <class kind="struct">Sacado::mpl::quote</class>
    <class kind="struct">Sacado::mpl::quote0</class>
    <class kind="struct">Sacado::mpl::quote1</class>
    <class kind="struct">Sacado::mpl::quote2</class>
    <class kind="struct">Sacado::mpl::quote3</class>
    <class kind="struct">Sacado::mpl::quote4</class>
    <class kind="struct">Sacado::mpl::quote5</class>
    <class kind="struct">Sacado::mpl::quote&lt; F&lt; T1 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::quote&lt; F&lt; T1, T2 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::quote&lt; F&lt; T1, T2, T3 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::quote&lt; F&lt; T1, T2, T3, T4 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::quote&lt; F&lt; T1, T2, T3, T4, T5 &gt; &gt;</class>
    <class kind="struct">Sacado::mpl::range_c</class>
    <class kind="struct">Sacado::mpl::range_c_iterator</class>
    <class kind="struct">Sacado::mpl::range_c_tag</class>
    <class kind="struct">Sacado::mpl::size</class>
    <class kind="struct">Sacado::mpl::size_impl</class>
    <class kind="struct">Sacado::mpl::size_impl&lt; range_c_tag &gt;</class>
    <class kind="struct">Sacado::mpl::type_wrap</class>
    <class kind="struct">Sacado::mpl::type_wrap_impl</class>
    <class kind="struct">Sacado::mpl::type_wrap_impl&lt; false, T &gt;</class>
    <class kind="struct">Sacado::mpl::type_wrap_impl&lt; true, T &gt;</class>
    <class kind="class">Sacado::mpl::TypeSequenceDoesNotContainType</class>
    <class kind="struct">Sacado::mpl::vector_at</class>
    <class kind="struct">Sacado::mpl::vector_at&lt; mpl::vector&lt; T, Args... &gt;, 0 &gt;</class>
    <class kind="struct">Sacado::mpl::vector_at&lt; mpl::vector&lt; T, Args... &gt;, Pos &gt;</class>
    <class kind="struct">Sacado::mpl::vector_push_back</class>
    <class kind="struct">Sacado::mpl::vector_push_back&lt; mpl::vector&lt; Args... &gt;, T &gt;</class>
    <class kind="struct">Sacado::mpl::vector_size</class>
    <member kind="typedef">
      <type>char</type>
      <name>NotFound</name>
      <anchorfile>namespaceSacado_1_1mpl.html</anchorfile>
      <anchor>af3c5c8cb770cfc5ec96ac62b3351626b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Found</type>
      <name>testHasType</name>
      <anchorfile>namespaceSacado_1_1mpl.html</anchorfile>
      <anchor>abc774ce485ddc293ac83428c3256a969</anchor>
      <arglist>(typename T::type *)</arglist>
    </member>
    <member kind="function">
      <type>NotFound</type>
      <name>testHasType</name>
      <anchorfile>namespaceSacado_1_1mpl.html</anchorfile>
      <anchor>abadcde770bc9c863853dd0d3c0c28f86</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Sacado::mpl::placeholders</name>
    <filename>namespaceSacado_1_1mpl_1_1placeholders.html</filename>
    <member kind="typedef">
      <type>arg&lt; 1 &gt;</type>
      <name>_1</name>
      <anchorfile>namespaceSacado_1_1mpl_1_1placeholders.html</anchorfile>
      <anchor>a7b2402396edc94638820a46965c7761b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>arg&lt; 2 &gt;</type>
      <name>_2</name>
      <anchorfile>namespaceSacado_1_1mpl_1_1placeholders.html</anchorfile>
      <anchor>a09cbdde4075616ad1c7291b53e542969</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>arg&lt; 3 &gt;</type>
      <name>_3</name>
      <anchorfile>namespaceSacado_1_1mpl_1_1placeholders.html</anchorfile>
      <anchor>a7ef501b0193d8e4c0ebd10aeed618c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>arg&lt; 4 &gt;</type>
      <name>_4</name>
      <anchorfile>namespaceSacado_1_1mpl_1_1placeholders.html</anchorfile>
      <anchor>a30710a5a880234a53f5a315b3696d44c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>arg&lt; 5 &gt;</type>
      <name>_5</name>
      <anchorfile>namespaceSacado_1_1mpl_1_1placeholders.html</anchorfile>
      <anchor>a155c4af13344ab421b6262f6a3e27c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>arg&lt;-1 &gt;</type>
      <name>_</name>
      <anchorfile>namespaceSacado_1_1mpl_1_1placeholders.html</anchorfile>
      <anchor>af386ebc3c8983782aa3f363d31a2ae82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Sacado::Rad</name>
    <filename>namespaceSacado_1_1Rad.html</filename>
    <class kind="class">Sacado::Rad::ADcontext</class>
    <class kind="struct">Sacado::Rad::ADmemblock</class>
    <class kind="class">Sacado::Rad::ADvar</class>
    <class kind="class">Sacado::Rad::ADvar1</class>
    <class kind="class">Sacado::Rad::ADvar1s</class>
    <class kind="class">Sacado::Rad::ADvar2</class>
    <class kind="class">Sacado::Rad::ADvar2q</class>
    <class kind="class">Sacado::Rad::ADvari</class>
    <class kind="class">Sacado::Rad::ADvarn</class>
    <class kind="class">Sacado::Rad::CADcontext</class>
    <class kind="class">Sacado::Rad::ConstADvar</class>
    <class kind="class">Sacado::Rad::ConstADvari</class>
    <class kind="class">Sacado::Rad::Derp</class>
    <class kind="class">Sacado::Rad::DoubleAvoid</class>
    <class kind="class">Sacado::Rad::DoubleAvoid&lt; double &gt;</class>
    <class kind="class">Sacado::Rad::DoubleAvoid&lt; int &gt;</class>
    <class kind="class">Sacado::Rad::DoubleAvoid&lt; long &gt;</class>
    <class kind="class">Sacado::Rad::IndepADvar</class>
    <class kind="class">Sacado::Rad::IndepADvar_base</class>
    <class kind="class">Sacado::Rad::IndepADvar_base0</class>
    <class kind="class">Sacado::Rad::RAD_DoubleIgnore</class>
    <member kind="function">
      <type>T F</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a49ab12b8a9ca705adf1f3763d3b894a0</anchor>
      <arglist>(AI)</arglist>
    </member>
    <member kind="function">
      <type>T F</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a4a87ef4f48362d7dc089b063eda44c39</anchor>
      <arglist>(Ai)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a323b5f4fb9c95e3fbeb100c76902f9a1</anchor>
      <arglist>(Double f, Double g, const IndepADvar&lt; Double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a8eaeac9c878687098d64f8859ab0626a</anchor>
      <arglist>(Double f, Double gx, Double gy, const IndepADvar&lt; Double &gt; &amp;x, const IndepADvar&lt; Double &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>abb8410fda4fa1717c2666a8537250676</anchor>
      <arglist>(Double f, int n, const IndepADvar&lt; Double &gt; *x, const Double *g)</arglist>
    </member>
    <member kind="function">
      <type>IndepADvar&lt; Double &gt; &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a500aa366dc02e58b5c397542c95d38d3</anchor>
      <arglist>(IndepADvar&lt; Double &gt; *, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar&lt; Double &gt; &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>aa9e61a98a00af5b79b9ac365b60dc963</anchor>
      <arglist>(ADvar&lt; Double &gt; *, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Const</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a8d5a64302168f08a7fe1720018258f5a</anchor>
      <arglist>(const IndepADvar&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Const1</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a3e7d37885d55666b11c7de8afaffbccb</anchor>
      <arglist>(Double *, const IndepADvar&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a156378c04429f795b99fa20f9848b5ca</anchor>
      <arglist>(Double, Double, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>aaf9b0e263dcf5c2d9bda6957dbcf80a9</anchor>
      <arglist>(Double, Double, Double, const ADvari&lt; Double &gt; &amp;, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ab64f1347519903e81c7a5f6e51296e89</anchor>
      <arglist>(Double, Double, Double, const IndepADvar&lt; Double &gt; &amp;, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a69405e30f8f9e142f2b24cb16514469a</anchor>
      <arglist>(Double, Double, Double, const ADvari&lt; Double &gt; &amp;, const IndepADvar&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Double</type>
      <name>val</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a8cd698955dcc82ac03cda999ab141c01</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a9d6f891467272c5103dc701fe8d18684</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;TT)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a3da6726c9280e18ab3dcac1efc9ef3bc</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a2d0726e1754da87544cb6cc61cf796bd</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a666dc797db992631a8e898fcfc8531d0</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>abafd30391e1f0656e15a7aa7b215f549</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ac203244099749ab475946e5f337c7dba</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ad8de12e74c12fd71a6aca1fe385a44a1</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a1aa82cc41a22c59fa8c64f5d38ef78a8</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a8b66f75dcde4a551a54e8aa0cb69f0cb</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a6a16cb17e1d92cc2966ba77583ca1d3a</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a486a67ae58fe151b93e6261bf4ef821a</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>af6767e822c6fd049e055e563515b6112</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a29298e4c815efa29605df37f635663df</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ae739fb889e9cf1a2c09a500cd3e0ea34</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a62c05988a3f022b730f2ee4b0b1c8678</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ab24b4b9e2a5a9ec11c5ed950b76e871e</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a5aa2448a063ed19aaabc64420216a82c</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ac084389a6d0ca53e2306a6e3e6708473</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a443fad65a9c96030b3e0fb114dbfb251</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a136905c0e31d33c2be86dd5da550cb22</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;TT)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a7354aa245488f5a599351f1e395b8186</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ae3d566744ecd243b33008cbe057a5928</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>acd5fc3d3c1865cdd890fab98bd6e3812</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a70b52692e7174c3575e9ac499bae1c8d</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a5e42258ea4108325aca18ad6fd2732f1</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>af0fc9760358e26017453cbc7710d72a5</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a21fd5a480a39d99019083190830e1204</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a19fb7f4ad7be72430cb9ae47deb43f52</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ac724303b46a1ae126b2780b00aaa51ca</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ab4d9d4de112f2cb781b5fcc74c6011b4</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a8fb1001cc8aa34ef0274062b30676bdf</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ad367f96a4b63be770dcc8a7e4e5404ee</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>acos</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a42781dd8a71665a9d878bffa1ec8ff61</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>acosh</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a10bf37b3e8cacb222c0d647274d2d705</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>asin</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a4838fb7a24c05386467c8d9f496daafb</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>asinh</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>aa60bf1b9abf615a20b19095a1d7f15f0</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ae31a11f476099c6c247f175b07e6f925</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atanh</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a13d1b94f0e92c724e40241739c11ed25</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a92b51892c3abbdf2faafbc3093d76cbe</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a8abfdfb620fa742e58b518e39c006b4e</anchor>
      <arglist>(Double x, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a5401446cd7826140510dd2248914fdce</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a929e6553eaba4c19fa3c94894d98166a</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a61f3a9573df0dd3e54c9c91018788699</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a3266d59a4ed0523481003a4ca113768b</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ac1fc5d5de6fc18bb6df20c187b3f5442</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ad2da83cade36039392fefe5996f504ee</anchor>
      <arglist>(Double L, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>aeead30d7bda29d2c130d203adb55d793</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>cos</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>af5606da4726796885c0159c957e2997b</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>cosh</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a1f4a5dde08667699c8fa5e977cfee136</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>exp</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a5e18d3ef8b82ea880dafa1d5686f38a7</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>log</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>aa7ce1c679292f8f5a524c5bbdc644961</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>log10</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>afdcc59edfd430e8dbc8a7e543ee54a11</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a430fa6d29090ea8fdd1c0bf906bb669f</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a8986da4cc88258520884356007849702</anchor>
      <arglist>(Double x, const Base&lt; ADvari&lt; Double &gt; &gt; &amp;RR)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>aac408b0d31b0b6327b1be45c1465e6ad</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;LL, Double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>sin</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ae9c2f292bdd8a95f6b76da069faae64e</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>sinh</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a45988282081e142bdc7569fe3fa56c7e</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>sqrt</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ac384db671331b9d34974346c7436ea41</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>tan</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>ac9a519fec184c077e85d16c2a84845d6</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>tanh</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a31555e02f5ff66a8b5032860f1a3d476</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>abs</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>adaa934bfd58542c8c9399d0ec1e18bad</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>fabs</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a3d809c2ecab60ac8a77742a602e09025</anchor>
      <arglist>(const Base&lt; ADvari&lt; Double &gt; &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1Rad.html</anchorfile>
      <anchor>a9743927ad3217ab1f2239d00553907b2</anchor>
      <arglist>(Double f, int n, const ADvar&lt; Double &gt; *x, const Double *g)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Sacado::Rad2</name>
    <filename>namespaceSacado_1_1Rad2.html</filename>
    <class kind="class">Sacado::Rad2::ADcontext</class>
    <class kind="struct">Sacado::Rad2::ADmemblock</class>
    <class kind="class">Sacado::Rad2::ADvar</class>
    <class kind="class">Sacado::Rad2::ADvar1</class>
    <class kind="class">Sacado::Rad2::ADvar1g</class>
    <class kind="class">Sacado::Rad2::ADvar1s</class>
    <class kind="class">Sacado::Rad2::ADvar2</class>
    <class kind="class">Sacado::Rad2::ADvar2g</class>
    <class kind="class">Sacado::Rad2::ADvar2q</class>
    <class kind="class">Sacado::Rad2::ADvari</class>
    <class kind="class">Sacado::Rad2::ADvari_block</class>
    <class kind="class">Sacado::Rad2::ADvarn</class>
    <class kind="class">Sacado::Rad2::CADcontext</class>
    <class kind="class">Sacado::Rad2::ConstADvar</class>
    <class kind="class">Sacado::Rad2::ConstADvari</class>
    <class kind="class">Sacado::Rad2::Derp</class>
    <class kind="class">Sacado::Rad2::DoubleAvoid</class>
    <class kind="class">Sacado::Rad2::DoubleAvoid&lt; double &gt;</class>
    <class kind="class">Sacado::Rad2::IndepADvar</class>
    <class kind="class">Sacado::Rad2::RAD_DoubleIgnore</class>
    <member kind="enumeration">
      <type></type>
      <name>Advari_Opclass</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_const</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaa72d41695f0728e6ca4fb3a2a92b797f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_copy</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaae3039be455f9c78e70b7477a0ab023fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_binary</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaa53a73f0ed2a9522cf978e83182b83d3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_unary</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaa62388755b8e4ee5a1ca9caa9498ea6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_negate</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaa786fe89fb559f7c382267d085c9c005f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_plusLR</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaa196daf868c4df8e832eff0dd5a23f435</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_minusLR</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaaa7e1291d0208b047fef5c6bf7c1ee9a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_timesL</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaa66d722610d99140f8909879358d3a935</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_timesLR</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaa6f1eeecef9a683fc7b9343083507bb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_quotLR</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaa29c49e659fd7af8eb27f692dec2ee7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_nary</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a39d5820fb642878e1fdd26a1b529c7eaa3b117c01f240e10a305ad762145ad4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T F</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>aa92cae024e4f5a6a1d70bbccbf40dcbe</anchor>
      <arglist>(AI)</arglist>
    </member>
    <member kind="function">
      <type>T F</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a278ba9c8673abfab8e7f0b0125c9e27a</anchor>
      <arglist>(Ai)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a5ca97b52c82e2d75732ca97372f8a435</anchor>
      <arglist>(Double f, Double g, const IndepADvar&lt; Double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a29956984a6d0cd340513a27b3afb8523</anchor>
      <arglist>(Double f, Double gx, Double gy, const IndepADvar&lt; Double &gt; &amp;x, const IndepADvar&lt; Double &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a8d265a0102d7dc653ccbcbc5ea6f25cb</anchor>
      <arglist>(Double f, int n, const IndepADvar&lt; Double &gt; *x, const Double *g)</arglist>
    </member>
    <member kind="function">
      <type>IndepADvar&lt; Double &gt; &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>add8240188bb745cf3c8a1ac906aa5ead</anchor>
      <arglist>(IndepADvar&lt; Double &gt; *, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar&lt; Double &gt; &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>acb9166f5ca8d6ec40d5bc01782c997ba</anchor>
      <arglist>(ADvar&lt; Double &gt; *, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Const</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a15ff342c5755ee039e0fb704aa981a06</anchor>
      <arglist>(const IndepADvar&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Const1</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a0faaf4a9c571e65b5876a774c8fceea1</anchor>
      <arglist>(Double *, const IndepADvar&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a6d565afb0fb76029f036fc91dc21a12e</anchor>
      <arglist>(Double, Double, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a3182a0b205155eb741d75aaf68585042</anchor>
      <arglist>(Double, Double, Double, const ADvari&lt; Double &gt; &amp;, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a53ea2da13f03a480d8fd3d03b4aa3cf9</anchor>
      <arglist>(Double, Double, Double, const IndepADvar&lt; Double &gt; &amp;, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a0dced0c3264a90faa5ef07f8803d5236</anchor>
      <arglist>(Double, Double, Double, const ADvari&lt; Double &gt; &amp;, const IndepADvar&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Double</type>
      <name>val</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ad85bb29bebc1b36daf35bdf7ab586b3c</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a2e806f40ef0092d28836d365f6d1bcbb</anchor>
      <arglist>(Double f, Double g, Double h, const ADvari&lt; Double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a32d64d7db4ccf4bb8f5ed50412b53312</anchor>
      <arglist>(Double f, Double gx, Double gy, Double hxx, Double hxy, Double hyy, const ADvari&lt; Double &gt; &amp;x, const ADvari&lt; Double &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a165ea2eee436a8820d1f02419f498568</anchor>
      <arglist>(Double f, int n, const IndepADvar&lt; Double &gt; *x, const Double *g, const Double *h)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>aec5348a65f8281c6c9490cf0c984c344</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>acc3feef717d30ff53273f9a8fb7b8d93</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a415526dbcfe31f82365f8d9634dd1242</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ace7359ebcac201b6ceef193295d88b9b</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a42d263f125ec02f388fa3074fdb3cc14</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>abca7fa14ceafa90261b12624662d15b9</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>aff77eb7c0e56df515ade8abf1ad4fa22</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a95409434ba3da6569d5a6937673df1e5</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a6c2eef1c3a4c2a606a9ebf5399497f14</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a86445208c518dddb65a64dbcbc48f33b</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>af3e1a3d718909ecc0b048e543fa7bf6b</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a5f7d3f4a8ab8b0e446398aadd676cb33</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>acb8281b798f6927fa11c0614d14611d8</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>aa4e23e4fcb675df38af1d940ffd64431</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ad50ce533f8580d0c035ea8dee87cb368</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a537da0a39bbf01fa8eb635e7428f6d8d</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a8534b7ecd3401c33fd188731b8732801</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a2c7eb6ad51dc5e167daf5fefe13851a6</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ab2e1b36dbbd19d0b62bbea01596a769a</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a00d0faadbe778c27aa2aa9f6a05ce0ee</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ab6118432524ece7f018214a7b7e1e6fc</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a4128c86a051e04dd6207aa07bee829b7</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a3c97d84d24813efb7f8e1571f192b5d0</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>af6f30bc31921854facb602150de8d3a1</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a34e648905cd06b5645a5a5804717b065</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a86952159479615a6dbbd4f61a3e6be0c</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a69861a1c96fe3b02ac9bdb45e990c48a</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a524b8bc8b66f874aa1a163f92b09a50d</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>acc637d881935300ec52f6e3ae29f5855</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>aa78c17dfa5e05f0c7fff134fef232770</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a2eb40840d090fea72f05ca289b673368</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a848e69726af1f7f341c6153f81dcf8cd</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>acos</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a121486c9f18e3acb4322618b04a28be6</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>acosh</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a6370b22b7e92634877266a61649072e9</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>asin</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a70632fdb54cfb11e1afd4ee224a662c7</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>asinh</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a70fd4566c20996cc7f247b917f862aab</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a10aa88a74633142f66b92a2321e7eea2</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atanh</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a6fe7dad29a32a92b1a91283db1666d44</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a46b454d9b3b7c69fbe6f8a1a73560e37</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a8bc5b4d4cb5c0dcb41da762e173e3c9f</anchor>
      <arglist>(Double x, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a4f7b06f1085b4ceaa532e215eee29b70</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a306533c2aa139dc010fe12161e1e9f8f</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ae45a0a23ffcfb5cde7026610a305acca</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a612113d318b48f8a0dde8ef706743ab9</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a28f464dd9da6e5dd4c5c6809890d27c8</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>aaa7aad6f706ccb5ad072bc68fd78606a</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ad20e9067a1cc877afc7f0ef488620ac2</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>cos</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a58daa63d8ceef0ad5b346be655335b21</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>cosh</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a9c6cf6435d3c4ed98783af5ecf97fda9</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>exp</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a70b28efc6363212eeb4d54ef6f798a16</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>log</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>af7ffd01e32f23282198a00f0d008494a</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>log10</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a13b8053793995b851136b55dd5e2caf9</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a45613cdb1d58d7eabf9e65e3b51ee565</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>addcf8457c96c5b091e931201e37541f6</anchor>
      <arglist>(Double x, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a7cef9d084656ed4ab76387d5c83ebd97</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>sin</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a7c252cba79ca54ed5d2b6f935a5a3b83</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>sinh</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a9aad5157342895da0ffacce68d002049</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>sqrt</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a09eba3dd0736023311c0fcbd57f882cb</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>tan</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a214296351e7e42102f57e33a44f29444</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>tanh</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a22317a2b52ba8505946439884d00f4d8</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>abs</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>abe20177e6a9dae1be865ead38c8947af</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>fabs</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ae3c5f0f2fbd886632dd4cdd41535468b</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>a769b8d75b1653a2fe8d1f78f22bb3b74</anchor>
      <arglist>(Double f, Double g, Double h, const IndepADvar&lt; Double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ad94faa0a7e7c9a7532953acd13f8b7cb</anchor>
      <arglist>(Double f, Double gx, Double gy, Double hxx, Double hxy, Double hyy, const ADvari&lt; Double &gt; &amp;x, const IndepADvar&lt; Double &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ae2181d17d3c7262938bb4001dc8076b7</anchor>
      <arglist>(Double f, Double gx, Double gy, Double hxx, Double hxy, Double hyy, const IndepADvar&lt; Double &gt; &amp;x, const ADvari&lt; Double &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>ac96a226aba9adbd7cfbffed57545f546</anchor>
      <arglist>(Double f, Double gx, Double gy, Double hxx, Double hxy, Double hyy, const IndepADvar&lt; Double &gt; &amp;x, const IndepADvar&lt; Double &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1Rad2.html</anchorfile>
      <anchor>aa9929800da424d6a5c00b2ecb933be53</anchor>
      <arglist>(Double f, int n, const ADvar&lt; Double &gt; *x, const Double *g, const Double *h)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Sacado::Rad2d</name>
    <filename>namespaceSacado_1_1Rad2d.html</filename>
    <class kind="class">Sacado::Rad2d::ADcontext</class>
    <class kind="struct">Sacado::Rad2d::ADmemblock</class>
    <class kind="class">Sacado::Rad2d::ADvar</class>
    <class kind="class">Sacado::Rad2d::ADvar1</class>
    <class kind="class">Sacado::Rad2d::ADvar1g</class>
    <class kind="class">Sacado::Rad2d::ADvar1s</class>
    <class kind="class">Sacado::Rad2d::ADvar2</class>
    <class kind="class">Sacado::Rad2d::ADvar2g</class>
    <class kind="class">Sacado::Rad2d::ADvar2q</class>
    <class kind="class">Sacado::Rad2d::ADvari</class>
    <class kind="struct">Sacado::Rad2d::ADvari_block</class>
    <class kind="class">Sacado::Rad2d::ADvarn</class>
    <class kind="class">Sacado::Rad2d::CADcontext</class>
    <class kind="class">Sacado::Rad2d::ConstADvar</class>
    <class kind="class">Sacado::Rad2d::ConstADvari</class>
    <class kind="class">Sacado::Rad2d::Derp</class>
    <class kind="class">Sacado::Rad2d::IndepADvar</class>
    <member kind="enumeration">
      <type></type>
      <name>Advari_Opclass</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_const</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4faac89b37659f9969d7b6dbb259890cee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_copy</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4faebdb1809c635d4a8c1d24da11cf91ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_binary</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4fa3b51dad9c4717ccc6831536cca292670</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_unary</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4fafa41647153a98f327a761354be15c945</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_negate</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4fa98ae7b3769caf27fb6eba22c927f64a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_plusLR</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4fa5885b6273bcad5d544d285ec5d58b489</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_minusLR</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4fafc74948b7463dcb094747e4228fc8ae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_timesL</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4fa9ae8d495a38342b44dd57fbc99e7631f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_timesLR</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4fa89bb9a5456b3b39e3a28fe4159fd700c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_quotLR</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4faab597f7883472b976572d7df5e1fafd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hv_nary</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29bcb5f7532c24edcca229ad64881d4fab22c048c28910a306d58d15b7f1e24c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>aac75a276ff571e7bd63b540cd8f46770</anchor>
      <arglist>(double f, double g, double h, const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a29593f6d7fb17c50788b83aeda6fb70a</anchor>
      <arglist>(double f, double gx, double gy, double hxx, double hxy, double hyy, const ADvari &amp;x, const ADvari &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ada67b777e5f6a7e841eb29e393443dc2</anchor>
      <arglist>(double f, int n, const ADvar *x, const double *g, const double *h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Const</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>aef33d2e7060f1e3b4f7220718f17c6b7</anchor>
      <arglist>(const IndepADvar &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a315b502f0ef2458d041e8ce3a64a3cbf</anchor>
      <arglist>(ADvari &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a241c8fc7e4248c9e0be4fb17a763acb5</anchor>
      <arglist>(const ADvari &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a4883b8845714b37c7a798dc7c6226287</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a191ebff4cdd43489ba3a89cf63338369</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a4375c2d4436584d21f679cda9edcff2b</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a683fc29fdc0450ca1b47b5a1d7582460</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>abfeca6dd6cff55226a460ce059b7c157</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ab7ac2905f22894b2e21909585508dbb3</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>aac10a63b496acc6a9bb5bd3a03c0de33</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a1a26ad66e2949eef1b3914d17c3c7d9d</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>af11bcd0556b75314c17b23dbb26b0417</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ab9a72d19db325836613391a8a28021bb</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a7557efe2654764f0520e358b1480fa63</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a4ce1b4dc4ec681724435545ccb189503</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>afea9e8ec01dab3576903e3aa81012815</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a0486b3e27e6a5121b25295dc4a748f34</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ae81ac56a8765330d8eee6dfb6c9132d8</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>af4f34986bc7424ba35db1f87a8f12d75</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ad15b75f314cbe932f3b598d5016cb987</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>aec0332e51c9d0d7cfe49c8541a9750ac</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a564af42ae93c2b93459eb2836f8d00f3</anchor>
      <arglist>(const IndepADvar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a8ca0c4262a90d9e6aea92233fe4cda39</anchor>
      <arglist>(const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>abs</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a7b7f3239a9eacf6ff6e521f1bd4934cc</anchor>
      <arglist>(const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ad6a49ac2ea48f3b877bcc7db00c7155c</anchor>
      <arglist>(ADvar *This, const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>IndepADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a510abc1db30562058d0da792874ddc79</anchor>
      <arglist>(IndepADvar *This, const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a3733e87ebb52a48182e300326da05ce8</anchor>
      <arglist>(const ADvari &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a783665264a264a3188ce1986b3d1ce1f</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a7cc447dee765b48f1187c75327321f50</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a380ec616c660a9405695f85cdcc75b69</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a909ab1562692001e4bf61acf8f85f174</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a729bab8ecc4f773cda15fab6aabd2881</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a8cefa7349ec3a0522e3264b4bde8ec99</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a6813033723283127bda4616541fdc8dc</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a15c1e34c19c831f45d6ea7ba0b75b03c</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a35cfc405b80ce86351e70782a4ef0072</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a542a5b16a76c7b5a4a35a876b959264e</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a4818bd0f0fc46643c8f3a9a94b1ed6c6</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a2f649cc2498b9891a27d618487b2d7c7</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>acos</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a01ebcc494a358b1f18fba61fbd0f279b</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>acosh</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a2d046143dadad5fe998ddae8b7227529</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>asin</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a4638a93074efcafc54c7f0d4c8bbfcb6</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>asinh</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a14fc4b118775c0e5376738b5c4e54a6e</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atan</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>affe7a3493c667c2fe6d748069d7dfd59</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atanh</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a9d922c9677daba8b7731e0ce967b1704</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a6f89be94c330d71b5eb3c4f740de6d8a</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ae91b0a86cec1420a382e8aede65e84a8</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a9f32c6fa1561b5cc3326639c1ce94732</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ae92f8711c7f20bc90a459fb40f7d4c59</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a4e56bb9ae85516ee1f5d688fc1089b58</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a11d91f3194ca71fd9917dc61387aaa88</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a42d3cef16e74edb967de551eac72e626</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a4e3f36f36040eb0a7106d9e2cbda9a05</anchor>
      <arglist>(double x, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>af288c013df4f34d2a1d441b99a984619</anchor>
      <arglist>(const ADvari &amp;L, double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>cos</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>aeb09f8ce2b28e6f3f5354ed5e298b202</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>cosh</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ad058d0bbfc89bd528fca0819ad078f7b</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>exp</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ad1827d3c3213552fb28173ba00372955</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>log</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ad715de135cea157a26273a084705c5b7</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>log10</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a66c2715fd06cc3e0f230aaf8e59d7978</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a90f61908830af15ff10e89ddee4f8228</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>acecab2991766dcffa47c675f6470a259</anchor>
      <arglist>(double x, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a8607dfa4b27d945952aab8ba5968e5f4</anchor>
      <arglist>(const ADvari &amp;L, double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>sin</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a097d3684dbed2e08d3d5e8ea1daec3aa</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>sinh</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a923880208c48f9d8a39bcfcfd044284d</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>sqrt</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a0b3a7a0fe259eeb90491b2c9ab3d25c8</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>tan</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>afe4adda15227843806d0cb68e6588b9b</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>tanh</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>ad71d8da5cda5f0faddf1d6665c9fff72</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>fabs</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>addd03fa49b25cf2bfd72380fd595b2a2</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rad_need_reinit</name>
      <anchorfile>namespaceSacado_1_1Rad2d.html</anchorfile>
      <anchor>a5eb8c5b3fd05e063ab39ef81a5fc9816</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Sacado::Radnt</name>
    <filename>namespaceSacado_1_1Radnt.html</filename>
    <class kind="class">Sacado::Radnt::ADcontext</class>
    <class kind="struct">Sacado::Radnt::ADmemblock</class>
    <class kind="class">Sacado::Radnt::ADvar</class>
    <class kind="class">Sacado::Radnt::ADvar1</class>
    <class kind="class">Sacado::Radnt::ADvar1s</class>
    <class kind="class">Sacado::Radnt::ADvar2</class>
    <class kind="class">Sacado::Radnt::ADvar2q</class>
    <class kind="class">Sacado::Radnt::ADvari</class>
    <class kind="class">Sacado::Radnt::ADvarn</class>
    <class kind="class">Sacado::Radnt::CADcontext</class>
    <class kind="class">Sacado::Radnt::ConstADvar</class>
    <class kind="class">Sacado::Radnt::ConstADvari</class>
    <class kind="class">Sacado::Radnt::Derp</class>
    <class kind="class">Sacado::Radnt::IndepADvar</class>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a7a00b800019efac1de528681b1de48f7</anchor>
      <arglist>(double f, double g, const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a537002d1cbe4ed49829b588abdae8271</anchor>
      <arglist>(double f, double gx, double gy, const ADvari &amp;x, const ADvari &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a1e643369b516b46a98a3861c74481ba9</anchor>
      <arglist>(double f, int n, const ADvar *x, const double *g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Const</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a577a6e343643420cf8f0c140dbf27c6f</anchor>
      <arglist>(const IndepADvar &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a67ca2f2c7fc39576f82d49486f586e55</anchor>
      <arglist>(ADvari &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a063cb4e5259febee6d5b178ceec4cf9e</anchor>
      <arglist>(const ADvari &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a416650256b177762cc3032151bb1fa3f</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ad6be4083f9269cec95da31666688b4a0</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a986fbe02c5ae19226ba3e71c357d42c7</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a0a74b0383b3f152555eb72e59046a593</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a145b3d21abb13b897ea48e78db642a99</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>afa8527ef71dbb93d731906e736c5affd</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ac49695ee56911b0f08f5849f6c02b80c</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a8aaf01745ecdc583296faf4d12f1ad8f</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>aad637fa8160a7f255a7de4dd8a81ea33</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a784bcd84bc294dd67c82599b3c80c4ea</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a5a768f6b11017ce93178a07d0ed3d104</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a64841c53e5d401612c60755826650c2a</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>abd110868baecbaaaacdf98d1b33ce0f7</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ade5b0a76e29bed3927b47c938a701288</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ad2ef6cbf1a7ae7420d1c1ad501e1455b</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>af66a89bf29e600d53efab9489427bc5d</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>afd66897ba69826c548659c259cdc516e</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a2e3e54b2bc0a2a92b7de7c3d74adc619</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>abba56d630841500c6d0f37962ed747ba</anchor>
      <arglist>(const IndepADvar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>af421ca54e7be1aedbe07ac125c795d86</anchor>
      <arglist>(const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>abs</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a2ee2b9b9db6ac414df7f6047ec026e16</anchor>
      <arglist>(const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a8948b6acbb2d016f8cb269106d1d857a</anchor>
      <arglist>(ADvar *This, const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>IndepADvar &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>accbea5db703c93cff1f1313e6ea5b311</anchor>
      <arglist>(IndepADvar *This, const ADvari &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a048b26c6f81400817c9f3d15677e2cdc</anchor>
      <arglist>(const ADvari &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a9ec5f0b81580c555fdc81333ba0b0b09</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ae29fe1716ae347fe927c6ababefd4ef5</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a0b7a03ff3743718634a4ab42c7819d56</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a1f7f61ef238b664fac7f6fb0e7412fa5</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a275be7cb2ecf4318928cb9e52eecda47</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a28ed1dae3aeacd153aa34951718ac01d</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a98487b8217f4334e64db53fd06ce00b7</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a2bb1e457c01832c733d6384045d3990e</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a612a08520bb4d77b69a6062fba960fd3</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ae0acbf9b394bda27b9c7baee0ab9e406</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a049a64d4dc63cb33dc8f99334440e818</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a04d6a93e06c608589fda5a5cf1337742</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>acos</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a2204e88e9f184edafe57fa61c5df6817</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>acosh</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ad22e7450afb07934f2b12618ffb74218</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>asin</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a3d88c93076f12904f34fc0b2be2fe222</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>asinh</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ab826ebb3a51bbadf00d415725b864fe8</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atan</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>afad2bfe1ffaf73676d8342030c0ff96d</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atanh</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a061c2caffec4658e9e740d272f146bf9</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a53bcbb06c619cfa4624d8070b72e2235</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>af2ab5da94fcf2aff328be914df6a84be</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>aaa3edf3f12ea62fc2b900b9c51b318f7</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ae80f9f983a319bc99ceddb62ad5d8880</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a8d05ac0e31696a811553ee93b2723a07</anchor>
      <arglist>(double L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>aa247d05d9914c7e71ac95c00f4602256</anchor>
      <arglist>(const ADvari &amp;L, double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a6a0be58cd3871a8f5e54fa46d36d2a09</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>aa6d6048dd4e4129ae6f024e033fc50af</anchor>
      <arglist>(double x, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a82b3e587a722d5b613d322bded8b7a07</anchor>
      <arglist>(const ADvari &amp;L, double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>cos</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a5bed3a503e91c96611a7cd33d0dca320</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>cosh</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a333b60a8abd9eb383fb629f59330c07c</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>exp</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a123271636adf56e29f94d36a6c6d2cda</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>log</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a274798ca5dc656a498173287efb51dd4</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>log10</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>adb7a7d5f42091164966f4f7d52e66eb3</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>abb4317e981c1218c8ff7e3d4a1e5d9a8</anchor>
      <arglist>(const ADvari &amp;L, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ac823981a004858c291193ed4e28416de</anchor>
      <arglist>(double x, const ADvari &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a3a91e7585788b5c0e9fad880727c25a3</anchor>
      <arglist>(const ADvari &amp;L, double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>sin</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>aa13143af5f6998fdb84271cd62986601</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>sinh</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>aaf402af87811571afe2406b19a76a277</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>sqrt</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>ac810dee84045c113f540e0700a3324e9</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>tan</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a6442afa3dc649e41f315a601b55afcc0</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>tanh</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a80f5a9ef6eef0605ac85775f803b25d1</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari &amp;</type>
      <name>fabs</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a8ca41e374231d50a89f9abaea74f1189</anchor>
      <arglist>(const ADvari &amp;v)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rad_need_reinit</name>
      <anchorfile>namespaceSacado_1_1Radnt.html</anchorfile>
      <anchor>a774e0e3be6a31f2080263d5c08c3396b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Sacado::RadVec</name>
    <filename>namespaceSacado_1_1RadVec.html</filename>
    <class kind="class">Sacado::RadVec::ADcontext</class>
    <class kind="struct">Sacado::RadVec::ADmemblock</class>
    <class kind="class">Sacado::RadVec::ADvar</class>
    <class kind="class">Sacado::RadVec::ADvar1</class>
    <class kind="class">Sacado::RadVec::ADvar1s</class>
    <class kind="class">Sacado::RadVec::ADvar2</class>
    <class kind="class">Sacado::RadVec::ADvar2q</class>
    <class kind="class">Sacado::RadVec::ADvari</class>
    <class kind="class">Sacado::RadVec::ADvarn</class>
    <class kind="class">Sacado::RadVec::CADcontext</class>
    <class kind="class">Sacado::RadVec::ConstADvar</class>
    <class kind="class">Sacado::RadVec::ConstADvari</class>
    <class kind="class">Sacado::RadVec::Derp</class>
    <class kind="class">Sacado::RadVec::DoubleAvoid</class>
    <class kind="class">Sacado::RadVec::DoubleAvoid&lt; double &gt;</class>
    <class kind="class">Sacado::RadVec::IndepADvar</class>
    <class kind="class">Sacado::RadVec::RAD_DoubleIgnore</class>
    <member kind="function">
      <type>T F</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a511a99bf74c4aff982b89fe267fc3d7f</anchor>
      <arglist>(AI)</arglist>
    </member>
    <member kind="function">
      <type>T F</type>
      <name>copy</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a29ae758aaeeb1160914ad5da1aa8eb42</anchor>
      <arglist>(Ai)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a2ee54c4b38e68b651ead815b5a4d84aa</anchor>
      <arglist>(Double f, Double g, const IndepADvar&lt; Double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a96426479dbc471623f1047d619d859bf</anchor>
      <arglist>(Double f, Double gx, Double gy, const IndepADvar&lt; Double &gt; &amp;x, const IndepADvar&lt; Double &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a9b1d90835df5c0469fd158cd76543142</anchor>
      <arglist>(Double f, int n, const IndepADvar&lt; Double &gt; *x, const Double *g)</arglist>
    </member>
    <member kind="function">
      <type>IndepADvar&lt; Double &gt; &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a2338c35ab86a62494013a543e828abdb</anchor>
      <arglist>(IndepADvar&lt; Double &gt; *, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvar&lt; Double &gt; &amp;</type>
      <name>ADvar_operatoreq</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a1459471c0e246b87eacc82c016d756bd</anchor>
      <arglist>(ADvar&lt; Double &gt; *, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Const</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a74008ee2680ce0cae327bd64a4e52978</anchor>
      <arglist>(const IndepADvar&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AD_Const1</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a34733b5eeb1bdd29d9f46561cb13fb82</anchor>
      <arglist>(Double *, const IndepADvar&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf1</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>af390b00e23d603fb4088924e668babea</anchor>
      <arglist>(Double, Double, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a4c8274a0b8f96a3074e92d9425a523a9</anchor>
      <arglist>(Double, Double, Double, const ADvari&lt; Double &gt; &amp;, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a984b15d90c5bcf9a6f4cae8125966abf</anchor>
      <arglist>(Double, Double, Double, const IndepADvar&lt; Double &gt; &amp;, const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADf2</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>aaac8b4ae6092f3d2009fb7a2fc257072</anchor>
      <arglist>(Double, Double, Double, const ADvari&lt; Double &gt; &amp;, const IndepADvar&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Double</type>
      <name>val</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a99a7bce404d7675b1dfe352a19dac56a</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a775e80086638e600f20935ce01dfb502</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a73e48250d9fce4ea6852cf669d00ada9</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ade83ceccc780c769db2c20019f687901</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a1b1fda4844dfd453ad8f6165341a2ecb</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a1658f55a416c2e8f5b8c80a6a09d6409</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a5f49c717adbb86c9143ee7a2e042c153</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a1ee6924d0f7bd4c05684872ea865cf75</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a19efe7ed620a30ba0f2e7512ec37a4d7</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a1028a146c5a75fb9965a0cbf138fe722</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a9066a2217065b6e4a8317d5ad7bbbd72</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ad4ee02522f953e2f75f5e365d5c197c3</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>acd0909ec8df4918f3b509665f12b2e31</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>afaaa642d77aae07b50e290f843b5ac8f</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ae726746210b4ab16b00438a6b0a7d5ab</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a3750dae59b33ea9f4d1da928b1502eba</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>afbad245237b545e08024b772fafc9d3a</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a74458d80583adfc3a01212ee3f881259</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>afcb759825bc5b8eb3e8501048564553c</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ae7f760112ba176bc1c0bb13460d6272c</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>aa6ab10587becc9539f660d5bcdbfceb2</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>afe882f96a600a9081af5a806a073780b</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a096bb50ea250b8b69607d4932e04362c</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a084118bfd002931d7261465cb435593f</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a68d83d658536eed2168c996cfe5c77ef</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ae1edc9aaf2bb6e77f775218cee0b8a16</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>af0a45617fa885ab647bbf70b9a607ef1</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a3e852b468bfbc6664dca9f63189a181c</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ab12e2c9dd9cdae62b04db3822d074f11</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a2f579e1524e7ae2edf0badbe26e87ea0</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a1b6afb5f2f989fa482934eef528fb43d</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>aaf708046a4fd0e85005b8e5ae53ef5a6</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ab5fe66024eeb6609c63baab410cd72e8</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>acos</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a5846175919c17789dcdfb53b8e7f691e</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>acosh</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>af6a3fb9014e6ab2c51ea241a59e90ae3</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>asin</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>af6d7f20bb70726926464635ae31b8931</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>asinh</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ae3b8fbfdd9fd6a079d96ce6588fb3907</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a5a5f91b8840e1693b58b25ce6432dd56</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atanh</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>adc5bc07b7d601d815ce93d764061b792</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a2e9d5f250d8b728f307b0b3a850a1db5</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>af2023883e3129db17bf30a0ed8cc13a9</anchor>
      <arglist>(Double x, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a4698a61843d77c7dd7845ffcf08b446e</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>aa00b806c9c56ddf17bab6f6e40888504</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a15c1d79e12937fba4039209fee0a5f92</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ad789ff9312653b5871130548e769fd6e</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a76225bef56f39098c30fe7cfded38080</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a8683a384246cc6fa5a085282737f0124</anchor>
      <arglist>(Double L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a89edd628055d95f2d77ce6e3d2317d93</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>cos</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>ad7578f61d7c18fa1fbb4195defcf2086</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>cosh</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a1ab217756a6c844a363183c422b82810</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>exp</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>aa7d7d21521fa28824590a1039023fa9d</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>log</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>af544a5db6031b5fdb4fcdd20271e0603</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>log10</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a672ad0dae1db32f8082e76f822e00b1f</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a0722480fd86db82c6ca74f62545820de</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>adfb2ac07fb730d8670736a5e05eb9fc2</anchor>
      <arglist>(Double x, const ADvari&lt; Double &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>af79dd8b78204c16f73ac5342527550b6</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;L, Double y)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>sin</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>add43cefd94789e163be949589bd2264a</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>sinh</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>afa0e3f6b43b4ee7e71634bf8176e51bb</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>sqrt</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a8696a6704aac7133cf9e2f5fcfe7d234</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>tan</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>afd1186af5386f3307e23cb84ffc6f164</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>tanh</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a375e27db7f12a16d702bbec8328575f3</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>abs</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>a24f54c90a122d6f0d28e44e78061653f</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>fabs</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>af658629021c9c646b83d6335f7df8dc5</anchor>
      <arglist>(const ADvari&lt; Double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ADvari&lt; Double &gt; &amp;</type>
      <name>ADfn</name>
      <anchorfile>namespaceSacado_1_1RadVec.html</anchorfile>
      <anchor>aaee6e8f1477e6049b767a7a6d65f1ef2</anchor>
      <arglist>(Double f, int n, const ADvar&lt; Double &gt; *x, const Double *g)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Sacado::Tay</name>
    <filename>namespaceSacado_1_1Tay.html</filename>
    <class kind="struct">Sacado::Tay::ACosExprType</class>
    <class kind="class">Sacado::Tay::ACosQuadOp</class>
    <class kind="class">Sacado::Tay::AdditionOp</class>
    <class kind="class">Sacado::Tay::AdditionOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::AdditionOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</class>
    <class kind="struct">Sacado::Tay::ASinExprType</class>
    <class kind="class">Sacado::Tay::ASinQuadOp</class>
    <class kind="struct">Sacado::Tay::ATanExprType</class>
    <class kind="class">Sacado::Tay::ATanQuadOp</class>
    <class kind="class">Sacado::Tay::BinaryExpr</class>
    <class kind="class">Sacado::Tay::BinaryExpr&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2, Op &gt;</class>
    <class kind="class">Sacado::Tay::BinaryExpr&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt;, Op &gt;</class>
    <class kind="class">Sacado::Tay::CacheTaylor</class>
    <class kind="class">Sacado::Tay::CacheTaylorImplementation</class>
    <class kind="class">Sacado::Tay::ConstExpr</class>
    <class kind="class">Sacado::Tay::CoshOp</class>
    <class kind="class">Sacado::Tay::CosOp</class>
    <class kind="class">Sacado::Tay::DivisionOp</class>
    <class kind="class">Sacado::Tay::DivisionOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::DivisionOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</class>
    <class kind="class">Sacado::Tay::ExpOp</class>
    <class kind="class">Sacado::Tay::Expr</class>
    <class kind="class">Sacado::Tay::Expr&lt; CacheTaylorImplementation&lt; T &gt; &gt;</class>
    <class kind="class">Sacado::Tay::FAbsOp</class>
    <class kind="struct">Sacado::Tay::Log10ExprType</class>
    <class kind="class">Sacado::Tay::LogOp</class>
    <class kind="class">Sacado::Tay::MaxOp</class>
    <class kind="class">Sacado::Tay::MaxOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::MaxOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</class>
    <class kind="class">Sacado::Tay::MinOp</class>
    <class kind="class">Sacado::Tay::MinOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::MinOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</class>
    <class kind="class">Sacado::Tay::MultiplicationOp</class>
    <class kind="class">Sacado::Tay::MultiplicationOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::MultiplicationOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</class>
    <class kind="struct">Sacado::Tay::PowExprType</class>
    <class kind="struct">Sacado::Tay::PowExprType&lt; ExprT1, typename ExprT1::value_type &gt;</class>
    <class kind="struct">Sacado::Tay::PowExprType&lt; typename ExprT2::value_type, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::SinhOp</class>
    <class kind="class">Sacado::Tay::SinOp</class>
    <class kind="class">Sacado::Tay::SqrtOp</class>
    <class kind="class">Sacado::Tay::SubtractionOp</class>
    <class kind="class">Sacado::Tay::SubtractionOp&lt; ConstExpr&lt; typename ExprT2::value_type &gt;, ExprT2 &gt;</class>
    <class kind="class">Sacado::Tay::SubtractionOp&lt; ExprT1, ConstExpr&lt; typename ExprT1::value_type &gt; &gt;</class>
    <class kind="struct">Sacado::Tay::TanExprType</class>
    <class kind="struct">Sacado::Tay::TanhExprType</class>
    <class kind="class">Sacado::Tay::Taylor</class>
    <class kind="class">Sacado::Tay::UnaryExpr</class>
    <class kind="class">Sacado::Tay::UnaryMinusOp</class>
    <class kind="class">Sacado::Tay::UnaryPlusOp</class>
    <member kind="function">
      <type>Expr&lt; BinaryExpr&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt;, ASinQuadOp &gt; &gt;</type>
      <name>asin_quad</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ad747c6fc426e103541b58ece0ee7b45e</anchor>
      <arglist>(const Expr&lt; T1 &gt; &amp;expr1, const Expr&lt; T2 &gt; &amp;expr2)</arglist>
    </member>
    <member kind="function">
      <type>Expr&lt; BinaryExpr&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt;, ACosQuadOp &gt; &gt;</type>
      <name>acos_quad</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ac964510e4d71dde3faf290e0c96ff26a</anchor>
      <arglist>(const Expr&lt; T1 &gt; &amp;expr1, const Expr&lt; T2 &gt; &amp;expr2)</arglist>
    </member>
    <member kind="function">
      <type>Expr&lt; BinaryExpr&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt;, ATanQuadOp &gt; &gt;</type>
      <name>atan_quad</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a302bad1d329cdc418b3d30e4da91d39a</anchor>
      <arglist>(const Expr&lt; T1 &gt; &amp;expr1, const Expr&lt; T2 &gt; &amp;expr2)</arglist>
    </member>
    <member kind="function">
      <type>PowExprType&lt; Expr&lt; T1 &gt;, Expr&lt; T2 &gt; &gt;::expr_type</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a77fda6c08c533ed565dbb4f8d13ad89e</anchor>
      <arglist>(const Expr&lt; T1 &gt; &amp;expr1, const Expr&lt; T2 &gt; &amp;expr2)</arglist>
    </member>
    <member kind="function">
      <type>PowExprType&lt; typename Expr&lt; T &gt;::value_type, Expr&lt; T &gt; &gt;::expr_type</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>affae41cfd03b5832a0a87905faec147e</anchor>
      <arglist>(const typename Expr&lt; T &gt;::value_type &amp;c, const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>PowExprType&lt; Expr&lt; T &gt;, typename Expr&lt; T &gt;::value_type &gt;::expr_type</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ad3a5d32d68032641b90d0483e27fe2d2</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr, const typename Expr&lt; T &gt;::value_type &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Log10ExprType&lt; T &gt;::expr_type</type>
      <name>log10</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aea02fc66de226af3ee8447e6815b3e7b</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>TanExprType&lt; T &gt;::expr_type</type>
      <name>tan</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ab7d6b487b3da6058e6d502c1c409803c</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>ASinExprType&lt; T &gt;::expr_type</type>
      <name>asin</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ac009f97d38408396dc441f301fbd52fc</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>ACosExprType&lt; T &gt;::expr_type</type>
      <name>acos</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a8fcf53249471997d971ba15da4e272f6</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>ATanExprType&lt; T &gt;::expr_type</type>
      <name>atan</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a91535e1be86f03c9ee3b046cc781b569</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>TanhExprType&lt; T &gt;::expr_type</type>
      <name>tanh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a3c27c8a0ab6b9ae4fc9e1a9ca8035ec1</anchor>
      <arglist>(const Expr&lt; T &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a4969519cc74dc0d2ff8fe718c6a9498e</anchor>
      <arglist>(const Expr&lt; ExprT &gt; &amp;expr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toBool2</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ab9cba93bbd17cade5a0a4d6176942fb7</anchor>
      <arglist>(const Expr&lt; ExprT &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aabae2f6f8aded91d59ab821ca494e385</anchor>
      <arglist>(std::ostream &amp;os, const Expr&lt; ExprT &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>CacheTaylor&lt; T &gt;</type>
      <name>diff</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>abf5f500b86c429b7cec135cb0b022850</anchor>
      <arglist>(const CacheTaylor&lt; T &gt; &amp;x, int n=1)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>diff</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a1476cccb465b0b240ef034e558db8d98</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x, int n=1)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a3b1442906ce8dcdf2ced30d61dd2640e</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a9d8c8ffe514924219a2eed9dcd2a2a28</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aee966d5534cfe50ca84339fa32300266</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a0fb7bc081f198a99502d08e65c982f81</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>af12d2af93e8e2dd1e5a93635bcf44819</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a6c12d91716f05583d5dd4f7d5fae8cf9</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a09930e54ea94b71c66527795cc6a1d2b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>adcfd434fdcf2279f4476139ac1842871</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aa52d11161b039691bda00ac1eb3c4a4e</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a5fd42ac1572d03a5f5e88363f01c354c</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aa1b35ee5d2ca13d52a339ebdf688ca5f</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a6c9e640e621343106ccc4d651af8a079</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>exp</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a81eb93027802beaf4c269daacaf0f09d</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>log</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a3f86b0688ca5de6fa130589a830189c2</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>log10</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a7b069952a021e48ab551521a49e2b872</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>sqrt</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>abbe6b46c1205f2d6c7aeb2312f0ba557</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>abef7c6afc52a30c76844904cbbbcb0f5</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a6304bdbd4077bf4635b548cf4ed26804</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>pow</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a6cfa5234c5039354d6b63dc15b2797ba</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sincos</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a671dfa0c230a0f79d1f971b343ef18a6</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, Taylor&lt; T &gt; &amp;s, Taylor&lt; T &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>cos</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a2d404bfc8069ad8c05bb34f6be0aea68</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>sin</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ab1a7fa1b496995cfbef390ac5b641675</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>tan</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a226422edee7130eed8e239068357e8c3</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sinhcosh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a73a1c67399f9474817fbacad26753504</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, Taylor&lt; T &gt; &amp;s, Taylor&lt; T &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>cosh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ad85d72ff8933fe4ca100fa758b06e50e</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>sinh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a952906b7d447092126eca57fcc50584b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>tanh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ad3b248204aa79b21e67d13cd91ca6941</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>quad</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ae1a2a180344d68c844399f30d72d19af</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;c0, const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>acos</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a5d7bf76ec1a0deee6922db137d2cb32c</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>asin</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>afb008a126e6855a9947988b6fc9b1c0e</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>atan</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a22644603ed892be3213d89521b36be4b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a8479214382eebf93915f02425f3e3bd6</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a5ee35a2e7678bfe688daf6a5ad359428</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>atan2</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ab66de7f3c608c0b6557fb4b10fd21196</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>acosh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a3cdc22b6b89abdb9d42e2f9287f44bea</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>asinh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a32c75025914f7d063a7626da411b8c8b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>atanh</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aae147899e3af9809616b819e79fbea24</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a840315796f7a154bd2e0974bd6e744af</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>fabs</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ae36d22eaceccba08795d6da7a62b449f</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a148fbd2e0c37f12efc54077936980f2b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a0c8e0e6755716bda0f1db6f5239a6071</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a767f933082fae38395bd3117f9bb2f43</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a1ec21bb61e42f2d7df22669a2da868a4</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a9059aaa0416c5f4de26615f5aaa01148</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Taylor&lt; T &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a905635d56795c2d3a6e0cc056d749cf4</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a387b62427cc4eda86cba97e1cf26f767</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a4a2347c7d72d0a449a429f8db184499e</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ab0b289eb647662768850f4c18d92fc8f</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a4bc8745ab920de6e613b0527e80c4300</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ae1de0cea2dd6178c667f35a6e37c84e9</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aa9d470dbc6e9385c1c8b93ce4e38d31e</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ad27d853c477df65d7769dec0d35b6f91</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>af4bf537ac803b4f4761a6a07e3a4401a</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a75587f3a462a01c20f82bbada130c9dc</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a5710aeb6f988b0516ea5dcc654a96202</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a3005284b32e7e0cb9fba9e3c11c91c3f</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a54ead763bac2686dddacb1cbefcc83fd</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aff60f1313f8c3ebe9986b93368d3b002</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a41d3bacf0522350bc3d8c3f2c59dc67e</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a0e84cf1b3bc7b9618da0274fe612b672</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a9cd89197cd1aa52f2e7f2134d989637b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a3c360a6979e8a2a1a0bcf9bacf349c99</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a4dfe0bfa6f532a60af10a527bd9aff7b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;a, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a85c7d534ae9334ed838582c5064c9820</anchor>
      <arglist>(std::ostream &amp;os, const Base&lt; Taylor&lt; T &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toBool</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ad4d41b96be4bd56c4b04f89e8bae73e7</anchor>
      <arglist>(const Taylor&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&amp;&amp;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a702cb1bf5291a9476cfd424dc6103c6b</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;xx1, const Base&lt; Taylor&lt; T &gt; &gt; &amp;xx2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&amp;&amp;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>aadf860e0c9effce0f8c64dc1c3921236</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;xx2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&amp;&amp;</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a96c9dcfbe0d6d472ff44872429f10949</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;xx1, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator||</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>a8928bb949e573a94129c958c56324c04</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;xx1, const Base&lt; Taylor&lt; T &gt; &gt; &amp;xx2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator||</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>ac9d28161f40173d4a84df3f5c410336c</anchor>
      <arglist>(const typename Taylor&lt; T &gt;::value_type &amp;a, const Base&lt; Taylor&lt; T &gt; &gt; &amp;xx2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator||</name>
      <anchorfile>namespaceSacado_1_1Tay.html</anchorfile>
      <anchor>abdbfd12fb2e60b55bd3ce0fa47cba019</anchor>
      <arglist>(const Base&lt; Taylor&lt; T &gt; &gt; &amp;xx1, const typename Taylor&lt; T &gt;::value_type &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>std</name>
    <filename>namespacestd.html</filename>
    <class kind="struct">std::is_same&lt; Kokkos::LayoutContiguous&lt; Layout &gt;, Layout &gt;</class>
    <class kind="struct">std::is_same&lt; Layout, Kokkos::LayoutContiguous&lt; Layout &gt; &gt;</class>
    <member kind="function">
      <type>float</type>
      <name>acosh</name>
      <anchorfile>namespacestd.html</anchorfile>
      <anchor>aebda5185a97b99d5067faa5356e10728</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>asinh</name>
      <anchorfile>namespacestd.html</anchorfile>
      <anchor>adb4730cf4787ae191bbe0538663ad7b4</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>atanh</name>
      <anchorfile>namespacestd.html</anchorfile>
      <anchor>a3d4acde659090e251a2af9b0ff4c5d19</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>acosh</name>
      <anchorfile>namespacestd.html</anchorfile>
      <anchor>a7067cee729ba91c01060753ca4586f72</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>asinh</name>
      <anchorfile>namespacestd.html</anchorfile>
      <anchor>aa7f135b48e11d01349367c85e7251884</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>atanh</name>
      <anchorfile>namespacestd.html</anchorfile>
      <anchor>ab8237c9d425a20e355adc5e42a6ff9d0</anchor>
      <arglist>(double x)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Teuchos</name>
    <filename>namespaceTeuchos.html</filename>
    <class kind="class">Teuchos::LAPACK&lt; OrdinalType, Sacado::Fad::DFad&lt; ScalarType &gt; &gt;</class>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Sacado Package Browser (Single Doxygen Collection)</title>
    <filename>index</filename>
  </compound>
</tagfile>
