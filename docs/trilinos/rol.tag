<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>test/function/CMakeLists.txt</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/function/</path>
    <filename>test_2function_2CMakeLists_8txt</filename>
  </compound>
  <compound kind="file">
    <name>test/step/CMakeLists.txt</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/step/</path>
    <filename>test_2step_2CMakeLists_8txt</filename>
    <member kind="function">
      <type></type>
      <name>TRIBITS_ADD_EXECUTABLE_AND_TEST</name>
      <anchorfile>test_2step_2CMakeLists_8txt.html</anchorfile>
      <anchor>a9f5b04ae66c98b5c9744b46fd0d6ee3e</anchor>
      <arglist>(LineSearch SOURCES test_01.cpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE_AND_TEST(TrustRegion SOURCES test_02.cpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE_AND_TEST(BoxConstrained_LineSearch SOURCES test_03.cpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE_AND_TEST(BoxConstrained_TrustRegion SOURCES test_04.cpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE_AND_TEST(BoxConstrained_PrimalDualActiveSet SOURCES test_05.cpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE_AND_TEST(LineSearchTypes SOURCES test_06.cpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE_AND_TEST(InteriorPoint SOURCES test_07.cpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE_AND_TEST(InteriorPointIneq SOURCES test_08.cpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE_AND_TEST(InteriorPointBound SOURCES test_10.cpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE_AND_TEST(InteriorPointBoundIneq SOURCES test_11.cpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE_AND_TEST(StepNotImplemented SOURCES test_12.cpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_COPY_FILES_TO_BINARY_DIR(StepTestDataCopy SOURCE_FILES input.xml SOURCE_DIR&quot;$</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test/step/krylov/CMakeLists.txt</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/step/krylov/</path>
    <filename>test_2step_2krylov_2CMakeLists_8txt</filename>
  </compound>
  <compound kind="file">
    <name>test/vector/CMakeLists.txt</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/vector/</path>
    <filename>test_2vector_2CMakeLists_8txt</filename>
  </compound>
  <compound kind="file">
    <name>example/rosenbrock/CMakeLists.txt</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/rosenbrock/</path>
    <filename>example_2rosenbrock_2CMakeLists_8txt</filename>
  </compound>
  <compound kind="file">
    <name>example/json/CMakeLists.txt</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/json/</path>
    <filename>example_2json_2CMakeLists_8txt</filename>
    <member kind="function">
      <type></type>
      <name>include_directories</name>
      <anchorfile>example_2json_2CMakeLists_8txt.html</anchorfile>
      <anchor>a4449ddbc271100590be241b0d1dae13b</anchor>
      <arglist>(${JSONCPP_INCLUDE_DIRS}) TRIBITS_ADD_EXECUTABLE_AND_TEST(example_01 SOURCES example_01.cpp IMPORTEDLIBS jsoncpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_COPY_FILES_TO_BINARY_DIR(JsonDataCopy SOURCE_FILES parameters.json SOURCE_DIR&quot;$</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/sacado/CMakeLists.txt</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/sacado/</path>
    <filename>example_2sacado_2CMakeLists_8txt</filename>
    <member kind="function">
      <type></type>
      <name>TRIBITS_ADD_EXECUTABLE_AND_TEST</name>
      <anchorfile>example_2sacado_2CMakeLists_8txt.html</anchorfile>
      <anchor>a11b0dd9097da0306f58817fa98a994e1</anchor>
      <arglist>(example_01a SOURCES example_01a.cpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE_AND_TEST(example_01b SOURCES example_01b.cpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE_AND_TEST(example_02 SOURCES example_02.cpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_COPY_FILES_TO_BINARY_DIR(SacadoDataCopy SOURCE_FILES parameters.xml SOURCE_DIR&quot;$</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/zakharov/CMakeLists.txt</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/zakharov/</path>
    <filename>example_2zakharov_2CMakeLists_8txt</filename>
    <member kind="function">
      <type></type>
      <name>TRIBITS_ADD_EXECUTABLE_AND_TEST</name>
      <anchorfile>example_2zakharov_2CMakeLists_8txt.html</anchorfile>
      <anchor>ab227515ddb2cc71975914b304455c79e</anchor>
      <arglist>(example_01 SOURCES example_01.cpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE_AND_TEST(example_02 SOURCES example_02.cpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_COPY_FILES_TO_BINARY_DIR(ZakharovDataCopy SOURCE_FILES parameters.xml SOURCE_DIR&quot;$</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/dual-spaces/rosenbrock-1/CMakeLists.txt</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/dual-spaces/rosenbrock-1/</path>
    <filename>example_2dual-spaces_2rosenbrock-1_2CMakeLists_8txt</filename>
  </compound>
  <compound kind="file">
    <name>example/dual-spaces/simple-eq-constr-1/CMakeLists.txt</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/dual-spaces/simple-eq-constr-1/</path>
    <filename>example_2dual-spaces_2simple-eq-constr-1_2CMakeLists_8txt</filename>
  </compound>
  <compound kind="file">
    <name>example/burgers-control/CMakeLists.txt</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/burgers-control/</path>
    <filename>example_2burgers-control_2CMakeLists_8txt</filename>
    <member kind="function">
      <type></type>
      <name>TRIBITS_ADD_EXECUTABLE</name>
      <anchorfile>example_2burgers-control_2CMakeLists_8txt.html</anchorfile>
      <anchor>a9c22a307177b6cd3bab16a0cbda879d6</anchor>
      <arglist>(example_01 SOURCES example_01.cpp ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE(example_02 SOURCES example_02.cpp ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE(example_03 SOURCES example_03.cpp ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE(example_04 SOURCES example_04.cpp ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE(example_05 SOURCES example_05.cpp ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE(example_06 SOURCES example_06.cpp ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE(example_07 SOURCES example_07.cpp ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE(example_08 SOURCES example_08.cpp ADD_DIR_TO_NAME) TRIBITS_COPY_FILES_TO_BINARY_DIR(BurgersControlDataCopy SOURCE_FILES input.xml SOURCE_DIR&quot;$</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/poisson-control/CMakeLists.txt</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/poisson-control/</path>
    <filename>example_2poisson-control_2CMakeLists_8txt</filename>
    <member kind="function">
      <type></type>
      <name>TRIBITS_ADD_EXECUTABLE_AND_TEST</name>
      <anchorfile>example_2poisson-control_2CMakeLists_8txt.html</anchorfile>
      <anchor>a0a5a662fc037343fd087f228affb3383</anchor>
      <arglist>(example_01 SOURCES example_01.cpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE_AND_TEST(example_02 SOURCES example_02.cpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_COPY_FILES_TO_BINARY_DIR(PoissonControlDataCopy SOURCE_FILES input.xml example_02.xml SOURCE_DIR&quot;$</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example/poisson-inversion/CMakeLists.txt</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/poisson-inversion/</path>
    <filename>example_2poisson-inversion_2CMakeLists_8txt</filename>
  </compound>
  <compound kind="file">
    <name>example/gross-pitaevskii/CMakeLists.txt</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/gross-pitaevskii/</path>
    <filename>example_2gross-pitaevskii_2CMakeLists_8txt</filename>
    <member kind="function">
      <type></type>
      <name>TRIBITS_ADD_EXECUTABLE_AND_TEST</name>
      <anchorfile>example_2gross-pitaevskii_2CMakeLists_8txt.html</anchorfile>
      <anchor>a1e689b25a47b919e96487149b75db81c</anchor>
      <arglist>(example_01 SOURCES example_01.cpp ARGS PrintItAll NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_ADD_EXECUTABLE_AND_TEST(example_02 SOURCES example_02.cpp ARGS&quot;default&quot;&quot;exactsolve&quot;NUM_MPI_PROCS 1 PASS_REGULAR_EXPRESSION&quot;TEST PASSED&quot;ADD_DIR_TO_NAME) TRIBITS_COPY_FILES_TO_BINARY_DIR(GrossPitaevskiiDataCopy SOURCE_FILES parameters.xml SOURCE_DIR&quot;$</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rosenbrock/example_01.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/rosenbrock/</path>
    <filename>rosenbrock_2example__01_8cpp</filename>
    <includes id="ROL__Rosenbrock_8hpp" name="ROL_Rosenbrock.hpp" local="yes" imported="no">ROL_Rosenbrock.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__LineSearchStep_8hpp" name="ROL_LineSearchStep.hpp" local="yes" imported="no">ROL_LineSearchStep.hpp</includes>
    <includes id="ROL__StatusTest_8hpp" name="ROL_StatusTest.hpp" local="yes" imported="no">ROL_StatusTest.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>USE_HESSVEC</name>
      <anchorfile>rosenbrock_2example__01_8cpp.html</anchorfile>
      <anchor>a20e5c8c2c257a6862ccf6bce9cccc6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>rosenbrock_2example__01_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>rosenbrock_2example__01_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>json/example_01.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/json/</path>
    <filename>json_2example__01_8cpp</filename>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Zakharov_8hpp" name="ROL_Zakharov.hpp" local="yes" imported="no">ROL_Zakharov.hpp</includes>
    <includes id="json_2example__01_8hpp" name="json/example_01.hpp" local="yes" imported="no">example_01.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>json_2example__01_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>json_2example__01_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>zakharov/example_01.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/zakharov/</path>
    <filename>zakharov_2example__01_8cpp</filename>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__LineSearchStep_8hpp" name="ROL_LineSearchStep.hpp" local="yes" imported="no">ROL_LineSearchStep.hpp</includes>
    <includes id="ROL__RandomVector_8hpp" name="ROL_RandomVector.hpp" local="yes" imported="no">ROL_RandomVector.hpp</includes>
    <includes id="ROL__StatusTest_8hpp" name="ROL_StatusTest.hpp" local="yes" imported="no">ROL_StatusTest.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Zakharov_8hpp" name="ROL_Zakharov.hpp" local="yes" imported="no">ROL_Zakharov.hpp</includes>
    <includes id="ROL__ParameterListConverters_8hpp" name="ROL_ParameterListConverters.hpp" local="yes" imported="no">ROL_ParameterListConverters.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>USE_HESSVEC</name>
      <anchorfile>zakharov_2example__01_8cpp.html</anchorfile>
      <anchor>a20e5c8c2c257a6862ccf6bce9cccc6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>zakharov_2example__01_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>zakharov_2example__01_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dual-spaces/rosenbrock-1/example_01.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/dual-spaces/rosenbrock-1/</path>
    <filename>dual-spaces_2rosenbrock-1_2example__01_8cpp</filename>
    <includes id="ROL__Rosenbrock_8hpp" name="ROL_Rosenbrock.hpp" local="yes" imported="no">ROL_Rosenbrock.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__TrustRegionStep_8hpp" name="ROL_TrustRegionStep.hpp" local="yes" imported="no">ROL_TrustRegionStep.hpp</includes>
    <includes id="ROL__StatusTest_8hpp" name="ROL_StatusTest.hpp" local="yes" imported="no">ROL_StatusTest.hpp</includes>
    <class kind="class">OptStdVector</class>
    <class kind="class">OptDualStdVector</class>
    <class kind="class">OptStdVector</class>
    <class kind="class">OptDualStdVector</class>
    <member kind="define">
      <type>#define</type>
      <name>USE_HESSVEC</name>
      <anchorfile>dual-spaces_2rosenbrock-1_2example__01_8cpp.html</anchorfile>
      <anchor>a20e5c8c2c257a6862ccf6bce9cccc6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>dual-spaces_2rosenbrock-1_2example__01_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>dual-spaces_2rosenbrock-1_2example__01_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dual-spaces/simple-eq-constr-1/example_01.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/dual-spaces/simple-eq-constr-1/</path>
    <filename>dual-spaces_2simple-eq-constr-1_2example__01_8cpp</filename>
    <includes id="ROL__SimpleEqConstrained_8hpp" name="ROL_SimpleEqConstrained.hpp" local="yes" imported="no">ROL_SimpleEqConstrained.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__ConstraintStatusTest_8hpp" name="ROL_ConstraintStatusTest.hpp" local="yes" imported="no">ROL_ConstraintStatusTest.hpp</includes>
    <includes id="ROL__CompositeStep_8hpp" name="ROL_CompositeStep.hpp" local="yes" imported="no">ROL_CompositeStep.hpp</includes>
    <class kind="class">OptStdVector</class>
    <class kind="class">OptDualStdVector</class>
    <class kind="class">ConStdVector</class>
    <class kind="class">ConDualStdVector</class>
    <class kind="class">OptStdVector</class>
    <class kind="class">OptDualStdVector</class>
    <class kind="class">ConStdVector</class>
    <class kind="class">ConDualStdVector</class>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>dual-spaces_2simple-eq-constr-1_2example__01_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>dual-spaces_2simple-eq-constr-1_2example__01_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>burgers-control/example_01.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/burgers-control/</path>
    <filename>burgers-control_2example__01_8cpp</filename>
    <includes id="burgers-control_2example__01_8hpp" name="burgers-control/example_01.hpp" local="yes" imported="no">example_01.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>burgers-control_2example__01_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>burgers-control_2example__01_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>poisson-control/example_01.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/poisson-control/</path>
    <filename>poisson-control_2example__01_8cpp</filename>
    <includes id="ROL__PoissonControl_8hpp" name="ROL_PoissonControl.hpp" local="yes" imported="no">ROL_PoissonControl.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__PrimalDualActiveSetStep_8hpp" name="ROL_PrimalDualActiveSetStep.hpp" local="yes" imported="no">ROL_PrimalDualActiveSetStep.hpp</includes>
    <includes id="ROL__TrustRegionStep_8hpp" name="ROL_TrustRegionStep.hpp" local="yes" imported="no">ROL_TrustRegionStep.hpp</includes>
    <includes id="ROL__StatusTest_8hpp" name="ROL_StatusTest.hpp" local="yes" imported="no">ROL_StatusTest.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <class kind="class">StatusTest_PDAS</class>
    <member kind="define">
      <type>#define</type>
      <name>USE_HESSVEC</name>
      <anchorfile>poisson-control_2example__01_8cpp.html</anchorfile>
      <anchor>a20e5c8c2c257a6862ccf6bce9cccc6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>poisson-control_2example__01_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>poisson-control_2example__01_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>poisson-inversion/example_01.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/poisson-inversion/</path>
    <filename>poisson-inversion_2example__01_8cpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__PoissonInversion_8hpp" name="ROL_PoissonInversion.hpp" local="yes" imported="no">ROL_PoissonInversion.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__LineSearchStep_8hpp" name="ROL_LineSearchStep.hpp" local="yes" imported="no">ROL_LineSearchStep.hpp</includes>
    <includes id="ROL__TrustRegionStep_8hpp" name="ROL_TrustRegionStep.hpp" local="yes" imported="no">ROL_TrustRegionStep.hpp</includes>
    <includes id="ROL__StatusTest_8hpp" name="ROL_StatusTest.hpp" local="yes" imported="no">ROL_StatusTest.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>USE_HESSVEC</name>
      <anchorfile>poisson-inversion_2example__01_8cpp.html</anchorfile>
      <anchor>a20e5c8c2c257a6862ccf6bce9cccc6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>poisson-inversion_2example__01_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>poisson-inversion_2example__01_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gross-pitaevskii/example_01.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/gross-pitaevskii/</path>
    <filename>gross-pitaevskii_2example__01_8cpp</filename>
    <includes id="gross-pitaevskii_2example__01_8hpp" name="gross-pitaevskii/example_01.hpp" local="yes" imported="no">example_01.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>gross-pitaevskii_2example__01_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>gross-pitaevskii_2example__01_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>json/example_01.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/json/</path>
    <filename>json_2example__01_8hpp</filename>
    <namespace>ROL</namespace>
    <member kind="function">
      <type>void</type>
      <name>addJSONBlockToPL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a7358fd7a2ae28905ea9aece579eb72af</anchor>
      <arglist>(const Json::Value &amp;block, Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addJSONPairToPL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a9b8982075b92d378e7a1d8f6daef4cf3</anchor>
      <arglist>(const Json::Value &amp;block, const std::string &amp;key, Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JSON_Parameters</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a9caa60bf59a6b16f9122bb1512b4d67f</anchor>
      <arglist>(const std::string &amp;jsonFileName, Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stepFactory</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a7dd2f89bf4f64b253c8c881588e6d922</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, Teuchos::RCP&lt; ROL::Step&lt; Real &gt; &gt; &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>burgers-control/example_01.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/burgers-control/</path>
    <filename>burgers-control_2example__01_8hpp</filename>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <class kind="class">Objective_BurgersControl</class>
    <class kind="class">BoundConstraint_BurgersControl</class>
  </compound>
  <compound kind="file">
    <name>gross-pitaevskii/example_01.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/gross-pitaevskii/</path>
    <filename>gross-pitaevskii_2example__01_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__EqualityConstraint_8hpp" name="ROL_EqualityConstraint.hpp" local="yes" imported="no">ROL_EqualityConstraint.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__CompositeStep_8hpp" name="ROL_CompositeStep.hpp" local="yes" imported="no">ROL_CompositeStep.hpp</includes>
    <includes id="ROL__ConstraintStatusTest_8hpp" name="ROL_ConstraintStatusTest.hpp" local="yes" imported="no">ROL_ConstraintStatusTest.hpp</includes>
    <class kind="class">Objective_GrossPitaevskii</class>
    <class kind="class">Normalization_Constraint</class>
  </compound>
  <compound kind="file">
    <name>example_01a.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/sacado/</path>
    <filename>example__01a_8cpp</filename>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__LineSearchStep_8hpp" name="ROL_LineSearchStep.hpp" local="yes" imported="no">ROL_LineSearchStep.hpp</includes>
    <includes id="ROL__StatusTest_8hpp" name="ROL_StatusTest.hpp" local="yes" imported="no">ROL_StatusTest.hpp</includes>
    <includes id="example__01a_8hpp" name="example_01a.hpp" local="yes" imported="no">example_01a.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>example__01a_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example__01a_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example_01a.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/sacado/</path>
    <filename>example__01a_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <class kind="class">Zakharov</class>
  </compound>
  <compound kind="file">
    <name>example_01b.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/sacado/</path>
    <filename>example__01b_8cpp</filename>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__LineSearchStep_8hpp" name="ROL_LineSearchStep.hpp" local="yes" imported="no">ROL_LineSearchStep.hpp</includes>
    <includes id="ROL__StatusTest_8hpp" name="ROL_StatusTest.hpp" local="yes" imported="no">ROL_StatusTest.hpp</includes>
    <includes id="example__01b_8hpp" name="example_01b.hpp" local="yes" imported="no">example_01b.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>example__01b_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example__01b_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example_01b.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/sacado/</path>
    <filename>example__01b_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <class kind="class">FunctionZakharov</class>
    <class kind="class">Zakharov_Sacado_Objective</class>
  </compound>
  <compound kind="file">
    <name>sacado/example_02.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/sacado/</path>
    <filename>sacado_2example__02_8cpp</filename>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__CompositeStep_8hpp" name="ROL_CompositeStep.hpp" local="yes" imported="no">ROL_CompositeStep.hpp</includes>
    <includes id="ROL__ConstraintStatusTest_8hpp" name="ROL_ConstraintStatusTest.hpp" local="yes" imported="no">ROL_ConstraintStatusTest.hpp</includes>
    <includes id="ROL__EqualityConstraint_8hpp" name="ROL_EqualityConstraint.hpp" local="yes" imported="no">ROL_EqualityConstraint.hpp</includes>
    <includes id="sacado_2example__02_8hpp" name="sacado/example_02.hpp" local="yes" imported="no">example_02.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>sacado_2example__02_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>sacado_2example__02_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>zakharov/example_02.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/zakharov/</path>
    <filename>zakharov_2example__02_8cpp</filename>
    <includes id="ROL__LineSearchStep_8hpp" name="ROL_LineSearchStep.hpp" local="yes" imported="no">ROL_LineSearchStep.hpp</includes>
    <includes id="ROL__TrustRegionStep_8hpp" name="ROL_TrustRegionStep.hpp" local="yes" imported="no">ROL_TrustRegionStep.hpp</includes>
    <includes id="ROL__RandomVector_8hpp" name="ROL_RandomVector.hpp" local="yes" imported="no">ROL_RandomVector.hpp</includes>
    <includes id="ROL__StatusTest_8hpp" name="ROL_StatusTest.hpp" local="yes" imported="no">ROL_StatusTest.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Zakharov_8hpp" name="ROL_Zakharov.hpp" local="yes" imported="no">ROL_Zakharov.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>zakharov_2example__02_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>zakharov_2example__02_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>burgers-control/example_02.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/burgers-control/</path>
    <filename>burgers-control_2example__02_8cpp</filename>
    <includes id="burgers-control_2example__02_8hpp" name="burgers-control/example_02.hpp" local="yes" imported="no">example_02.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>burgers-control_2example__02_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>burgers-control_2example__02_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>poisson-control/example_02.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/poisson-control/</path>
    <filename>poisson-control_2example__02_8cpp</filename>
    <includes id="poisson-control_2example__02_8hpp" name="poisson-control/example_02.hpp" local="yes" imported="no">example_02.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__StdTeuchosBatchManager_8hpp" name="ROL_StdTeuchosBatchManager.hpp" local="yes" imported="no">ROL_StdTeuchosBatchManager.hpp</includes>
    <includes id="ROL__MonteCarloGenerator_8hpp" name="ROL_MonteCarloGenerator.hpp" local="yes" imported="no">ROL_MonteCarloGenerator.hpp</includes>
    <includes id="ROL__Reduced__ParametrizedObjective__SimOpt_8hpp" name="ROL_Reduced_ParametrizedObjective_SimOpt.hpp" local="yes" imported="no">ROL_Reduced_ParametrizedObjective_SimOpt.hpp</includes>
    <includes id="ROL__RiskNeutralObjective_8hpp" name="ROL_RiskNeutralObjective.hpp" local="yes" imported="no">ROL_RiskNeutralObjective.hpp</includes>
    <includes id="ROL__Vector__SimOpt_8hpp" name="ROL_Vector_SimOpt.hpp" local="yes" imported="no">ROL_Vector_SimOpt.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>poisson-control_2example__02_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>poisson-inversion/example_02.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/poisson-inversion/</path>
    <filename>poisson-inversion_2example__02_8cpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__PrimalDualActiveSetStep_8hpp" name="ROL_PrimalDualActiveSetStep.hpp" local="yes" imported="no">ROL_PrimalDualActiveSetStep.hpp</includes>
    <includes id="ROL__TrustRegionStep_8hpp" name="ROL_TrustRegionStep.hpp" local="yes" imported="no">ROL_TrustRegionStep.hpp</includes>
    <includes id="ROL__StatusTest_8hpp" name="ROL_StatusTest.hpp" local="yes" imported="no">ROL_StatusTest.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">Objective_PoissonInversion</class>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>poisson-inversion_2example__02_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>poisson-inversion_2example__02_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gross-pitaevskii/example_02.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/gross-pitaevskii/</path>
    <filename>gross-pitaevskii_2example__02_8cpp</filename>
    <includes id="gross-pitaevskii_2example__02_8hpp" name="gross-pitaevskii/example_02.hpp" local="yes" imported="no">example_02.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>gross-pitaevskii_2example__02_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>gross-pitaevskii_2example__02_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sacado/example_02.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/sacado/</path>
    <filename>sacado_2example__02_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <class kind="class">Example_Objective</class>
  </compound>
  <compound kind="file">
    <name>burgers-control/example_02.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/burgers-control/</path>
    <filename>burgers-control_2example__02_8hpp</filename>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Vector__SimOpt_8hpp" name="ROL_Vector_SimOpt.hpp" local="yes" imported="no">ROL_Vector_SimOpt.hpp</includes>
    <includes id="ROL__EqualityConstraint__SimOpt_8hpp" name="ROL_EqualityConstraint_SimOpt.hpp" local="yes" imported="no">ROL_EqualityConstraint_SimOpt.hpp</includes>
    <includes id="ROL__Objective__SimOpt_8hpp" name="ROL_Objective_SimOpt.hpp" local="yes" imported="no">ROL_Objective_SimOpt.hpp</includes>
    <includes id="ROL__Reduced__Objective__SimOpt_8hpp" name="ROL_Reduced_Objective_SimOpt.hpp" local="yes" imported="no">ROL_Reduced_Objective_SimOpt.hpp</includes>
    <class kind="class">EqualityConstraint_BurgersControl</class>
    <class kind="class">Objective_BurgersControl</class>
  </compound>
  <compound kind="file">
    <name>poisson-control/example_02.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/poisson-control/</path>
    <filename>poisson-control_2example__02_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__ParametrizedObjective__SimOpt_8hpp" name="ROL_ParametrizedObjective_SimOpt.hpp" local="yes" imported="no">ROL_ParametrizedObjective_SimOpt.hpp</includes>
    <includes id="ROL__ParametrizedEqualityConstraint__SimOpt_8hpp" name="ROL_ParametrizedEqualityConstraint_SimOpt.hpp" local="yes" imported="no">ROL_ParametrizedEqualityConstraint_SimOpt.hpp</includes>
    <class kind="class">FEM</class>
    <class kind="class">DiffusionEqualityConstraint</class>
    <class kind="class">DiffusionObjective</class>
  </compound>
  <compound kind="file">
    <name>gross-pitaevskii/example_02.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/gross-pitaevskii/</path>
    <filename>gross-pitaevskii_2example__02_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__EqualityConstraint_8hpp" name="ROL_EqualityConstraint.hpp" local="yes" imported="no">ROL_EqualityConstraint.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__CompositeStep_8hpp" name="ROL_CompositeStep.hpp" local="yes" imported="no">ROL_CompositeStep.hpp</includes>
    <includes id="ROL__ConstraintStatusTest_8hpp" name="ROL_ConstraintStatusTest.hpp" local="yes" imported="no">ROL_ConstraintStatusTest.hpp</includes>
    <includes id="FiniteDifference_8hpp" name="FiniteDifference.hpp" local="yes" imported="no">numerics/FiniteDifference.hpp</includes>
    <class kind="class">OptStdVector</class>
    <class kind="class">OptDualStdVector</class>
    <class kind="class">ConStdVector</class>
    <class kind="class">ConDualStdVector</class>
    <class kind="class">OptStdVector</class>
    <class kind="class">OptDualStdVector</class>
    <class kind="class">ConStdVector</class>
    <class kind="class">ConDualStdVector</class>
    <class kind="class">Objective_GrossPitaevskii</class>
    <class kind="class">Normalization_Constraint</class>
  </compound>
  <compound kind="file">
    <name>example_03.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/burgers-control/</path>
    <filename>example__03_8cpp</filename>
    <includes id="example__03_8hpp" name="example_03.hpp" local="yes" imported="no">example_03.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>example__03_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example__03_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example_03.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/burgers-control/</path>
    <filename>example__03_8hpp</filename>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Vector__SimOpt_8hpp" name="ROL_Vector_SimOpt.hpp" local="yes" imported="no">ROL_Vector_SimOpt.hpp</includes>
    <includes id="ROL__EqualityConstraint__SimOpt_8hpp" name="ROL_EqualityConstraint_SimOpt.hpp" local="yes" imported="no">ROL_EqualityConstraint_SimOpt.hpp</includes>
    <includes id="ROL__Objective__SimOpt_8hpp" name="ROL_Objective_SimOpt.hpp" local="yes" imported="no">ROL_Objective_SimOpt.hpp</includes>
    <includes id="ROL__Reduced__Objective__SimOpt_8hpp" name="ROL_Reduced_Objective_SimOpt.hpp" local="yes" imported="no">ROL_Reduced_Objective_SimOpt.hpp</includes>
    <class kind="class">EqualityConstraint_BurgersControl</class>
    <class kind="class">Objective_BurgersControl</class>
  </compound>
  <compound kind="file">
    <name>example_04.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/burgers-control/</path>
    <filename>example__04_8cpp</filename>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__BoundConstraint__SimOpt_8hpp" name="ROL_BoundConstraint_SimOpt.hpp" local="yes" imported="no">ROL_BoundConstraint_SimOpt.hpp</includes>
    <includes id="ROL__Vector__SimOpt_8hpp" name="ROL_Vector_SimOpt.hpp" local="yes" imported="no">ROL_Vector_SimOpt.hpp</includes>
    <includes id="example__04_8hpp" name="example_04.hpp" local="yes" imported="no">example_04.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>example__04_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorPrimal&lt; RealT &gt;</type>
      <name>PrimalStateVector</name>
      <anchorfile>example__04_8cpp.html</anchorfile>
      <anchor>a6159c1334039c63190981d917d026b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorDual&lt; RealT &gt;</type>
      <name>DualStateVector</name>
      <anchorfile>example__04_8cpp.html</anchorfile>
      <anchor>a69c735ef2cf81efffee9d1d3f39642bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>L2VectorPrimal&lt; RealT &gt;</type>
      <name>PrimalControlVector</name>
      <anchorfile>example__04_8cpp.html</anchorfile>
      <anchor>a344b21392e5228b681d334bd88c52226</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>L2VectorDual&lt; RealT &gt;</type>
      <name>DualControlVector</name>
      <anchorfile>example__04_8cpp.html</anchorfile>
      <anchor>ac6e94d03951cc341df24bbf9b1e236bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorDual&lt; RealT &gt;</type>
      <name>PrimalConstraintVector</name>
      <anchorfile>example__04_8cpp.html</anchorfile>
      <anchor>af3b0d51319521bcbd56534c24b9372d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorPrimal&lt; RealT &gt;</type>
      <name>DualConstraintVector</name>
      <anchorfile>example__04_8cpp.html</anchorfile>
      <anchor>a415c9830b80acf8e656ac04255549c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example__04_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example_04.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/burgers-control/</path>
    <filename>example__04_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__EqualityConstraint__SimOpt_8hpp" name="ROL_EqualityConstraint_SimOpt.hpp" local="yes" imported="no">ROL_EqualityConstraint_SimOpt.hpp</includes>
    <includes id="ROL__Objective__SimOpt_8hpp" name="ROL_Objective_SimOpt.hpp" local="yes" imported="no">ROL_Objective_SimOpt.hpp</includes>
    <class kind="class">L2VectorPrimal</class>
    <class kind="class">L2VectorDual</class>
    <class kind="class">H1VectorPrimal</class>
    <class kind="class">H1VectorDual</class>
    <class kind="class">BurgersFEM</class>
    <class kind="class">L2VectorPrimal</class>
    <class kind="class">L2VectorDual</class>
    <class kind="class">H1VectorPrimal</class>
    <class kind="class">H1VectorDual</class>
    <class kind="class">EqualityConstraint_BurgersControl</class>
    <class kind="class">Objective_BurgersControl</class>
    <class kind="class">L2BoundConstraint</class>
    <class kind="class">H1BoundConstraint</class>
  </compound>
  <compound kind="file">
    <name>example_05.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/burgers-control/</path>
    <filename>example__05_8cpp</filename>
    <includes id="example__05_8hpp" name="example_05.hpp" local="yes" imported="no">example_05.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>example__05_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>random</name>
      <anchorfile>example__05_8cpp.html</anchorfile>
      <anchor>a150261e4dfba2f6c815a0d780bad17b6</anchor>
      <arglist>(const Teuchos::RCP&lt; const Teuchos::Comm&lt; int &gt; &gt; &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example__05_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example_05.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/burgers-control/</path>
    <filename>example__05_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__ParametrizedObjective__SimOpt_8hpp" name="ROL_ParametrizedObjective_SimOpt.hpp" local="yes" imported="no">ROL_ParametrizedObjective_SimOpt.hpp</includes>
    <includes id="ROL__ParametrizedEqualityConstraint__SimOpt_8hpp" name="ROL_ParametrizedEqualityConstraint_SimOpt.hpp" local="yes" imported="no">ROL_ParametrizedEqualityConstraint_SimOpt.hpp</includes>
    <includes id="ROL__Reduced__ParametrizedObjective__SimOpt_8hpp" name="ROL_Reduced_ParametrizedObjective_SimOpt.hpp" local="yes" imported="no">ROL_Reduced_ParametrizedObjective_SimOpt.hpp</includes>
    <includes id="ROL__StochasticProblem_8hpp" name="ROL_StochasticProblem.hpp" local="yes" imported="no">ROL_StochasticProblem.hpp</includes>
    <includes id="ROL__MonteCarloGenerator_8hpp" name="ROL_MonteCarloGenerator.hpp" local="yes" imported="no">ROL_MonteCarloGenerator.hpp</includes>
    <includes id="ROL__StdTeuchosBatchManager_8hpp" name="ROL_StdTeuchosBatchManager.hpp" local="yes" imported="no">ROL_StdTeuchosBatchManager.hpp</includes>
    <class kind="class">EqualityConstraint_BurgersControl</class>
    <class kind="class">Objective_BurgersControl</class>
  </compound>
  <compound kind="file">
    <name>example_06.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/burgers-control/</path>
    <filename>example__06_8cpp</filename>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__Reduced__ParametrizedObjective__SimOpt_8hpp" name="ROL_Reduced_ParametrizedObjective_SimOpt.hpp" local="yes" imported="no">ROL_Reduced_ParametrizedObjective_SimOpt.hpp</includes>
    <includes id="ROL__HMCRObjective_8hpp" name="ROL_HMCRObjective.hpp" local="yes" imported="no">ROL_HMCRObjective.hpp</includes>
    <includes id="ROL__RiskVector_8hpp" name="ROL_RiskVector.hpp" local="yes" imported="no">ROL_RiskVector.hpp</includes>
    <includes id="ROL__MonteCarloGenerator_8hpp" name="ROL_MonteCarloGenerator.hpp" local="yes" imported="no">ROL_MonteCarloGenerator.hpp</includes>
    <includes id="example__06_8hpp" name="example_06.hpp" local="yes" imported="no">example_06.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>example__06_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorPrimal&lt; RealT &gt;</type>
      <name>PrimalStateVector</name>
      <anchorfile>example__06_8cpp.html</anchorfile>
      <anchor>a6159c1334039c63190981d917d026b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorDual&lt; RealT &gt;</type>
      <name>DualStateVector</name>
      <anchorfile>example__06_8cpp.html</anchorfile>
      <anchor>a69c735ef2cf81efffee9d1d3f39642bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>L2VectorPrimal&lt; RealT &gt;</type>
      <name>PrimalControlVector</name>
      <anchorfile>example__06_8cpp.html</anchorfile>
      <anchor>a344b21392e5228b681d334bd88c52226</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>L2VectorDual&lt; RealT &gt;</type>
      <name>DualControlVector</name>
      <anchorfile>example__06_8cpp.html</anchorfile>
      <anchor>ac6e94d03951cc341df24bbf9b1e236bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorDual&lt; RealT &gt;</type>
      <name>PrimalConstraintVector</name>
      <anchorfile>example__06_8cpp.html</anchorfile>
      <anchor>af3b0d51319521bcbd56534c24b9372d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorPrimal&lt; RealT &gt;</type>
      <name>DualConstraintVector</name>
      <anchorfile>example__06_8cpp.html</anchorfile>
      <anchor>a415c9830b80acf8e656ac04255549c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example__06_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example_06.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/burgers-control/</path>
    <filename>example__06_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__ParametrizedEqualityConstraint__SimOpt_8hpp" name="ROL_ParametrizedEqualityConstraint_SimOpt.hpp" local="yes" imported="no">ROL_ParametrizedEqualityConstraint_SimOpt.hpp</includes>
    <includes id="ROL__ParametrizedObjective__SimOpt_8hpp" name="ROL_ParametrizedObjective_SimOpt.hpp" local="yes" imported="no">ROL_ParametrizedObjective_SimOpt.hpp</includes>
    <includes id="ROL__TeuchosBatchManager_8hpp" name="ROL_TeuchosBatchManager.hpp" local="yes" imported="no">ROL_TeuchosBatchManager.hpp</includes>
    <class kind="class">L2VectorPrimal</class>
    <class kind="class">L2VectorDual</class>
    <class kind="class">H1VectorPrimal</class>
    <class kind="class">H1VectorDual</class>
    <class kind="class">BurgersFEM</class>
    <class kind="class">L2VectorPrimal</class>
    <class kind="class">L2VectorDual</class>
    <class kind="class">H1VectorPrimal</class>
    <class kind="class">H1VectorDual</class>
    <class kind="class">EqualityConstraint_BurgersControl</class>
    <class kind="class">Objective_BurgersControl</class>
    <class kind="class">L2BoundConstraint</class>
    <class kind="class">H1BoundConstraint</class>
    <class kind="class">L2VectorBatchManager</class>
    <class kind="class">H1VectorBatchManager</class>
    <member kind="function">
      <type>Real</type>
      <name>random</name>
      <anchorfile>example__06_8hpp.html</anchorfile>
      <anchor>a150261e4dfba2f6c815a0d780bad17b6</anchor>
      <arglist>(const Teuchos::RCP&lt; const Teuchos::Comm&lt; int &gt; &gt; &amp;comm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example_07.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/burgers-control/</path>
    <filename>example__07_8cpp</filename>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__Reduced__ParametrizedObjective__SimOpt_8hpp" name="ROL_Reduced_ParametrizedObjective_SimOpt.hpp" local="yes" imported="no">ROL_Reduced_ParametrizedObjective_SimOpt.hpp</includes>
    <includes id="ROL__BPOEObjective_8hpp" name="ROL_BPOEObjective.hpp" local="yes" imported="no">ROL_BPOEObjective.hpp</includes>
    <includes id="ROL__RiskBoundConstraint_8hpp" name="ROL_RiskBoundConstraint.hpp" local="yes" imported="no">ROL_RiskBoundConstraint.hpp</includes>
    <includes id="ROL__RiskVector_8hpp" name="ROL_RiskVector.hpp" local="yes" imported="no">ROL_RiskVector.hpp</includes>
    <includes id="ROL__MonteCarloGenerator_8hpp" name="ROL_MonteCarloGenerator.hpp" local="yes" imported="no">ROL_MonteCarloGenerator.hpp</includes>
    <includes id="example__07_8hpp" name="example_07.hpp" local="yes" imported="no">example_07.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>example__07_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorPrimal&lt; RealT &gt;</type>
      <name>PrimalStateVector</name>
      <anchorfile>example__07_8cpp.html</anchorfile>
      <anchor>a6159c1334039c63190981d917d026b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorDual&lt; RealT &gt;</type>
      <name>DualStateVector</name>
      <anchorfile>example__07_8cpp.html</anchorfile>
      <anchor>a69c735ef2cf81efffee9d1d3f39642bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>L2VectorPrimal&lt; RealT &gt;</type>
      <name>PrimalControlVector</name>
      <anchorfile>example__07_8cpp.html</anchorfile>
      <anchor>a344b21392e5228b681d334bd88c52226</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>L2VectorDual&lt; RealT &gt;</type>
      <name>DualControlVector</name>
      <anchorfile>example__07_8cpp.html</anchorfile>
      <anchor>ac6e94d03951cc341df24bbf9b1e236bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorDual&lt; RealT &gt;</type>
      <name>PrimalConstraintVector</name>
      <anchorfile>example__07_8cpp.html</anchorfile>
      <anchor>af3b0d51319521bcbd56534c24b9372d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorPrimal&lt; RealT &gt;</type>
      <name>DualConstraintVector</name>
      <anchorfile>example__07_8cpp.html</anchorfile>
      <anchor>a415c9830b80acf8e656ac04255549c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example__07_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example_07.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/burgers-control/</path>
    <filename>example__07_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__ParametrizedEqualityConstraint__SimOpt_8hpp" name="ROL_ParametrizedEqualityConstraint_SimOpt.hpp" local="yes" imported="no">ROL_ParametrizedEqualityConstraint_SimOpt.hpp</includes>
    <includes id="ROL__ParametrizedObjective__SimOpt_8hpp" name="ROL_ParametrizedObjective_SimOpt.hpp" local="yes" imported="no">ROL_ParametrizedObjective_SimOpt.hpp</includes>
    <includes id="ROL__TeuchosBatchManager_8hpp" name="ROL_TeuchosBatchManager.hpp" local="yes" imported="no">ROL_TeuchosBatchManager.hpp</includes>
    <class kind="class">L2VectorPrimal</class>
    <class kind="class">L2VectorDual</class>
    <class kind="class">H1VectorPrimal</class>
    <class kind="class">H1VectorDual</class>
    <class kind="class">BurgersFEM</class>
    <class kind="class">L2VectorPrimal</class>
    <class kind="class">L2VectorDual</class>
    <class kind="class">H1VectorPrimal</class>
    <class kind="class">H1VectorDual</class>
    <class kind="class">EqualityConstraint_BurgersControl</class>
    <class kind="class">Objective_BurgersControl</class>
    <class kind="class">L2BoundConstraint</class>
    <class kind="class">H1BoundConstraint</class>
    <class kind="class">L2VectorBatchManager</class>
    <class kind="class">H1VectorBatchManager</class>
    <member kind="function">
      <type>Real</type>
      <name>random</name>
      <anchorfile>example__07_8hpp.html</anchorfile>
      <anchor>a150261e4dfba2f6c815a0d780bad17b6</anchor>
      <arglist>(const Teuchos::RCP&lt; const Teuchos::Comm&lt; int &gt; &gt; &amp;comm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example_08.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/burgers-control/</path>
    <filename>example__08_8cpp</filename>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__Reduced__ParametrizedObjective__SimOpt_8hpp" name="ROL_Reduced_ParametrizedObjective_SimOpt.hpp" local="yes" imported="no">ROL_Reduced_ParametrizedObjective_SimOpt.hpp</includes>
    <includes id="ROL__MonteCarloGenerator_8hpp" name="ROL_MonteCarloGenerator.hpp" local="yes" imported="no">ROL_MonteCarloGenerator.hpp</includes>
    <includes id="ROL__StochasticProblem_8hpp" name="ROL_StochasticProblem.hpp" local="yes" imported="no">ROL_StochasticProblem.hpp</includes>
    <includes id="example__08_8hpp" name="example_08.hpp" local="yes" imported="no">example_08.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>example__08_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorPrimal&lt; RealT &gt;</type>
      <name>PrimalStateVector</name>
      <anchorfile>example__08_8cpp.html</anchorfile>
      <anchor>a6159c1334039c63190981d917d026b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorDual&lt; RealT &gt;</type>
      <name>DualStateVector</name>
      <anchorfile>example__08_8cpp.html</anchorfile>
      <anchor>a69c735ef2cf81efffee9d1d3f39642bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>L2VectorPrimal&lt; RealT &gt;</type>
      <name>PrimalControlVector</name>
      <anchorfile>example__08_8cpp.html</anchorfile>
      <anchor>a344b21392e5228b681d334bd88c52226</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>L2VectorDual&lt; RealT &gt;</type>
      <name>DualControlVector</name>
      <anchorfile>example__08_8cpp.html</anchorfile>
      <anchor>ac6e94d03951cc341df24bbf9b1e236bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorDual&lt; RealT &gt;</type>
      <name>PrimalConstraintVector</name>
      <anchorfile>example__08_8cpp.html</anchorfile>
      <anchor>af3b0d51319521bcbd56534c24b9372d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorPrimal&lt; RealT &gt;</type>
      <name>DualConstraintVector</name>
      <anchorfile>example__08_8cpp.html</anchorfile>
      <anchor>a415c9830b80acf8e656ac04255549c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>example__08_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>example_08.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/burgers-control/</path>
    <filename>example__08_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__ParametrizedEqualityConstraint__SimOpt_8hpp" name="ROL_ParametrizedEqualityConstraint_SimOpt.hpp" local="yes" imported="no">ROL_ParametrizedEqualityConstraint_SimOpt.hpp</includes>
    <includes id="ROL__ParametrizedObjective__SimOpt_8hpp" name="ROL_ParametrizedObjective_SimOpt.hpp" local="yes" imported="no">ROL_ParametrizedObjective_SimOpt.hpp</includes>
    <includes id="ROL__TeuchosBatchManager_8hpp" name="ROL_TeuchosBatchManager.hpp" local="yes" imported="no">ROL_TeuchosBatchManager.hpp</includes>
    <class kind="class">L2VectorPrimal</class>
    <class kind="class">L2VectorDual</class>
    <class kind="class">H1VectorPrimal</class>
    <class kind="class">H1VectorDual</class>
    <class kind="class">BurgersFEM</class>
    <class kind="class">L2VectorPrimal</class>
    <class kind="class">L2VectorDual</class>
    <class kind="class">H1VectorPrimal</class>
    <class kind="class">H1VectorDual</class>
    <class kind="class">EqualityConstraint_BurgersControl</class>
    <class kind="class">Objective_BurgersControl</class>
    <class kind="class">L2BoundConstraint</class>
    <class kind="class">H1BoundConstraint</class>
    <class kind="class">L2VectorBatchManager</class>
    <class kind="class">H1VectorBatchManager</class>
    <member kind="function">
      <type>Real</type>
      <name>random</name>
      <anchorfile>example__08_8hpp.html</anchorfile>
      <anchor>a150261e4dfba2f6c815a0d780bad17b6</anchor>
      <arglist>(const Teuchos::RCP&lt; const Teuchos::Comm&lt; int &gt; &gt; &amp;comm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FiniteDifference.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/gross-pitaevskii/numerics/</path>
    <filename>FiniteDifference_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <class kind="class">FiniteDifference</class>
  </compound>
  <compound kind="file">
    <name>InnerProductMatrix.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/gross-pitaevskii/numerics/</path>
    <filename>InnerProductMatrix_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <class kind="class">InnerProductMatrix</class>
    <class kind="class">InnerProductMatrixSolver</class>
  </compound>
  <compound kind="file">
    <name>Lagrange.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/gross-pitaevskii/numerics/</path>
    <filename>Lagrange_8hpp</filename>
    <class kind="class">Lagrange</class>
  </compound>
  <compound kind="file">
    <name>LinearAlgebra.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/gross-pitaevskii/numerics/</path>
    <filename>LinearAlgebra_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <member kind="function">
      <type>void</type>
      <name>trisolve</name>
      <anchorfile>LinearAlgebra_8hpp.html</anchorfile>
      <anchor>a22a933b149769502fed49687ef9f5a6e</anchor>
      <arglist>(Teuchos::RCP&lt; Teuchos::LAPACK&lt; int, Real &gt; &gt; lapack, const std::vector&lt; Real &gt; &amp;a, const std::vector&lt; Real &gt; &amp;b, const std::vector&lt; Real &gt; &amp;c, const std::vector&lt; Real &gt; &amp;r, std::vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lusolve</name>
      <anchorfile>LinearAlgebra_8hpp.html</anchorfile>
      <anchor>abfc4a4813feec03b67a7e48faf8470c2</anchor>
      <arglist>(Teuchos::RCP&lt; Teuchos::LAPACK&lt; int, Real &gt; &gt; lapack, const std::vector&lt; Real &gt; &amp;A, const std::vector&lt; Real &gt; &amp;B, std::vector&lt; Real &gt; &amp;X)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cholsolve</name>
      <anchorfile>LinearAlgebra_8hpp.html</anchorfile>
      <anchor>a96afa8dfaf4ef95c430e394ab7a71157</anchor>
      <arglist>(Teuchos::RCP&lt; Teuchos::LAPACK&lt; int, Real &gt; &gt; lapack, const std::vector&lt; Real &gt; &amp;A, const std::vector&lt; Real &gt; &amp;B, std::vector&lt; Real &gt; &amp;X)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodalBasis.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/gross-pitaevskii/numerics/</path>
    <filename>NodalBasis_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="OrthogonalPolynomials_8hpp" name="OrthogonalPolynomials.hpp" local="yes" imported="no">OrthogonalPolynomials.hpp</includes>
    <includes id="Lagrange_8hpp" name="Lagrange.hpp" local="yes" imported="no">Lagrange.hpp</includes>
    <includes id="LinearAlgebra_8hpp" name="LinearAlgebra.hpp" local="yes" imported="no">LinearAlgebra.hpp</includes>
    <class kind="struct">NodalBasis</class>
    <member kind="define">
      <type>#define</type>
      <name>__NODAL_BASIS__</name>
      <anchorfile>NodalBasis_8hpp.html</anchorfile>
      <anchor>a794239faae537aa58f5121a5709e7bd9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OrthogonalPolynomials.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/gross-pitaevskii/numerics/</path>
    <filename>OrthogonalPolynomials_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="LinearAlgebra_8hpp" name="LinearAlgebra.hpp" local="yes" imported="no">LinearAlgebra.hpp</includes>
    <member kind="function">
      <type>void</type>
      <name>rec_jacobi</name>
      <anchorfile>OrthogonalPolynomials_8hpp.html</anchorfile>
      <anchor>a3ad49d75b0b0720b828ada29fcf6b91c</anchor>
      <arglist>(Teuchos::RCP&lt; Teuchos::LAPACK&lt; int, Real &gt; &gt; lapack, const double alpha, const double beta, std::vector&lt; Real &gt; &amp;a, std::vector&lt; Real &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vandermonde</name>
      <anchorfile>OrthogonalPolynomials_8hpp.html</anchorfile>
      <anchor>a172ccf25ac9bfc152240884c9f61e6ae</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;a, const std::vector&lt; Real &gt; &amp;b, const std::vector&lt; Real &gt; &amp;x, std::vector&lt; Real &gt; &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gauss</name>
      <anchorfile>OrthogonalPolynomials_8hpp.html</anchorfile>
      <anchor>a587209e0825d4f57ad6dc4829a40e290</anchor>
      <arglist>(Teuchos::RCP&lt; Teuchos::LAPACK&lt; int, Real &gt; &gt; lapack, const std::vector&lt; Real &gt; &amp;a, const std::vector&lt; Real &gt; &amp;b, std::vector&lt; Real &gt; &amp;x, std::vector&lt; Real &gt; &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rec_lobatto</name>
      <anchorfile>OrthogonalPolynomials_8hpp.html</anchorfile>
      <anchor>ababac01d58bd58f655486bcda31e1273</anchor>
      <arglist>(Teuchos::RCP&lt; Teuchos::LAPACK&lt; int, Real &gt; &gt; const lapack, const double xl1, const double xl2, std::vector&lt; Real &gt; &amp;a, std::vector&lt; Real &gt; &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_AbsoluteValue.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__AbsoluteValue_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__PositiveFunction_8hpp" name="ROL_PositiveFunction.hpp" local="yes" imported="no">ROL_PositiveFunction.hpp</includes>
    <class kind="class">ROL::AbsoluteValue</class>
    <namespace>ROL</namespace>
    <member kind="enumeration">
      <type></type>
      <name>EAbsoluteValue</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae055efa411e6c0cbef222268f10728c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABSOLUTEVALUE_TRUE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae055efa411e6c0cbef222268f10728c3ae228927305eb3876fc6b82fd166e7e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABSOLUTEVALUE_SQUAREROOT</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae055efa411e6c0cbef222268f10728c3a52cfcc0f35e78b483e457a5f364a0849</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABSOLUTEVALUE_SQRTDENOM</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae055efa411e6c0cbef222268f10728c3ae3df9487b6249765cd5e2037fc0b8e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABSOLUTEVALUE_C2</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae055efa411e6c0cbef222268f10728c3a5dc19eb6c55abbc14927a34bdff0fa04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABSOLUTEVALUE_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae055efa411e6c0cbef222268f10728c3a9b219d884f614ee9a897d304d38a3c23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_Algorithm.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/algorithm/</path>
    <filename>ROL__Algorithm_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Step_8hpp" name="ROL_Step.hpp" local="yes" imported="no">ROL_Step.hpp</includes>
    <includes id="ROL__StepFactory_8hpp" name="ROL_StepFactory.hpp" local="yes" imported="no">ROL_StepFactory.hpp</includes>
    <includes id="ROL__StatusTest_8hpp" name="ROL_StatusTest.hpp" local="yes" imported="no">ROL_StatusTest.hpp</includes>
    <includes id="ROL__StatusTestFactory_8hpp" name="ROL_StatusTestFactory.hpp" local="yes" imported="no">ROL_StatusTestFactory.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__EqualityConstraint_8hpp" name="ROL_EqualityConstraint.hpp" local="yes" imported="no">ROL_EqualityConstraint.hpp</includes>
    <includes id="ROL__OptimizationProblem_8hpp" name="ROL_OptimizationProblem.hpp" local="yes" imported="no">ROL_OptimizationProblem.hpp</includes>
    <class kind="class">ROL::StepFactory</class>
    <class kind="class">ROL::StatusTestFactory</class>
    <class kind="class">ROL::Algorithm</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Arcsine.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/distribution/</path>
    <filename>ROL__Arcsine_8hpp</filename>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <class kind="class">ROL::Arcsine</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_AtomVector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/sampler/SROM/</path>
    <filename>ROL__AtomVector_8hpp</filename>
    <includes id="ROL__BatchStdVector_8hpp" name="ROL_BatchStdVector.hpp" local="yes" imported="no">ROL_BatchStdVector.hpp</includes>
    <class kind="class">ROL::PrimalAtomVector</class>
    <class kind="class">ROL::DualAtomVector</class>
    <class kind="class">ROL::AtomVector</class>
    <class kind="class">ROL::PrimalAtomVector</class>
    <class kind="class">ROL::DualAtomVector</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_AugmentedLagrangian.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__AugmentedLagrangian_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__EqualityConstraint_8hpp" name="ROL_EqualityConstraint.hpp" local="yes" imported="no">ROL_EqualityConstraint.hpp</includes>
    <includes id="ROL__QuadraticPenalty_8hpp" name="ROL_QuadraticPenalty.hpp" local="yes" imported="no">ROL_QuadraticPenalty.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::AugmentedLagrangian</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_AugmentedLagrangian_SimOpt.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__AugmentedLagrangian__SimOpt_8hpp</filename>
    <includes id="ROL__Objective__SimOpt_8hpp" name="ROL_Objective_SimOpt.hpp" local="yes" imported="no">ROL_Objective_SimOpt.hpp</includes>
    <includes id="ROL__EqualityConstraint__SimOpt_8hpp" name="ROL_EqualityConstraint_SimOpt.hpp" local="yes" imported="no">ROL_EqualityConstraint_SimOpt.hpp</includes>
    <includes id="ROL__QuadraticPenalty__SimOpt_8hpp" name="ROL_QuadraticPenalty_SimOpt.hpp" local="yes" imported="no">ROL_QuadraticPenalty_SimOpt.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::AugmentedLagrangian_SimOpt</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_AugmentedLagrangianStep.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/</path>
    <filename>ROL__AugmentedLagrangianStep_8hpp</filename>
    <includes id="ROL__AugmentedLagrangian_8hpp" name="ROL_AugmentedLagrangian.hpp" local="yes" imported="no">ROL_AugmentedLagrangian.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__EqualityConstraint_8hpp" name="ROL_EqualityConstraint.hpp" local="yes" imported="no">ROL_EqualityConstraint.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__StatusTest_8hpp" name="ROL_StatusTest.hpp" local="yes" imported="no">ROL_StatusTest.hpp</includes>
    <includes id="ROL__Step_8hpp" name="ROL_Step.hpp" local="yes" imported="no">ROL_Step.hpp</includes>
    <includes id="ROL__LineSearchStep_8hpp" name="ROL_LineSearchStep.hpp" local="yes" imported="no">ROL_LineSearchStep.hpp</includes>
    <includes id="ROL__TrustRegionStep_8hpp" name="ROL_TrustRegionStep.hpp" local="yes" imported="no">ROL_TrustRegionStep.hpp</includes>
    <class kind="class">ROL::AugmentedLagrangianStep</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_BackTracking.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/linesearch/</path>
    <filename>ROL__BackTracking_8hpp</filename>
    <includes id="ROL__LineSearch_8hpp" name="ROL_LineSearch.hpp" local="yes" imported="no">ROL_LineSearch.hpp</includes>
    <class kind="class">ROL::BackTracking</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_BarzilaiBorwein.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/secant/</path>
    <filename>ROL__BarzilaiBorwein_8hpp</filename>
    <includes id="ROL__Secant_8hpp" name="ROL_Secant.hpp" local="yes" imported="no">ROL_Secant.hpp</includes>
    <class kind="class">ROL::BarzilaiBorwein</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_BatchManager.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/sampler/</path>
    <filename>ROL__BatchManager_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <class kind="class">ROL::BatchManager</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_BatchStdVector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/sampler/SROM/</path>
    <filename>ROL__BatchStdVector_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__BatchManager_8hpp" name="ROL_BatchManager.hpp" local="yes" imported="no">ROL_BatchManager.hpp</includes>
    <class kind="class">ROL::BatchStdVector</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Beale.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__Beale_8hpp</filename>
    <includes id="ROL__ScaledStdVector_8hpp" name="ROL_ScaledStdVector.hpp" local="yes" imported="no">ROL_ScaledStdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_Beale</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROL_BEALE_HPP</name>
      <anchorfile>ROL__Beale_8hpp.html</anchorfile>
      <anchor>a5d6f833d83facd4058d3cbe8767a97ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBeale</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a312f5e5a7dc65d8c1b4eb8afc3232aeb</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_Beta.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/distribution/</path>
    <filename>ROL__Beta_8hpp</filename>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <class kind="class">ROL::Beta</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Bisection.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/linesearch/</path>
    <filename>ROL__Bisection_8hpp</filename>
    <includes id="ROL__LineSearch_8hpp" name="ROL_LineSearch.hpp" local="yes" imported="no">ROL_LineSearch.hpp</includes>
    <includes id="ROL__BackTracking_8hpp" name="ROL_BackTracking.hpp" local="yes" imported="no">ROL_BackTracking.hpp</includes>
    <class kind="class">ROL::Bisection</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_BlockOperator.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__BlockOperator_8hpp</filename>
    <includes id="ROL__LinearOperator_8hpp" name="ROL_LinearOperator.hpp" local="yes" imported="no">ROL_LinearOperator.hpp</includes>
    <includes id="ROL__PartitionedVector_8hpp" name="ROL_PartitionedVector.hpp" local="yes" imported="no">ROL_PartitionedVector.hpp</includes>
    <class kind="class">ROL::BlockOperator</class>
    <class kind="class">ROL::BlockOperator2</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_BoundConstraint.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__BoundConstraint_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::BoundConstraint</class>
    <class kind="class">ROL::BoundConstraint::Active</class>
    <class kind="class">ROL::BoundConstraint::UpperBinding</class>
    <class kind="class">ROL::BoundConstraint::LowerBinding</class>
    <class kind="class">ROL::BoundConstraint::PruneBinding</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_BoundConstraint_Partitioned.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__BoundConstraint__Partitioned_8hpp</filename>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>ROL_BoundConstraint_SimOpt.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__BoundConstraint__SimOpt_8hpp</filename>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__Vector__SimOpt_8hpp" name="ROL_Vector_SimOpt.hpp" local="yes" imported="no">ROL_Vector_SimOpt.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::BoundConstraint_SimOpt</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_BoundInequalityConstraint.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__BoundInequalityConstraint_8hpp</filename>
    <includes id="ROL__InequalityConstraint_8hpp" name="ROL_InequalityConstraint.hpp" local="yes" imported="no">ROL_InequalityConstraint.hpp</includes>
    <includes id="ROL__LowerBoundInequalityConstraint_8hpp" name="ROL_LowerBoundInequalityConstraint.hpp" local="yes" imported="no">ROL_LowerBoundInequalityConstraint.hpp</includes>
    <includes id="ROL__UpperBoundInequalityConstraint_8hpp" name="ROL_UpperBoundInequalityConstraint.hpp" local="yes" imported="no">ROL_UpperBoundInequalityConstraint.hpp</includes>
    <class kind="class">ROL::BoundInequalityConstraint</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_BPOEObjective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__BPOEObjective_8hpp</filename>
    <includes id="ROL__RiskVector_8hpp" name="ROL_RiskVector.hpp" local="yes" imported="no">ROL_RiskVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__ParametrizedObjective_8hpp" name="ROL_ParametrizedObjective.hpp" local="yes" imported="no">ROL_ParametrizedObjective.hpp</includes>
    <includes id="ROL__SampleGenerator_8hpp" name="ROL_SampleGenerator.hpp" local="yes" imported="no">ROL_SampleGenerator.hpp</includes>
    <class kind="class">ROL::BPOEObjective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Brents.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/linesearch/</path>
    <filename>ROL__Brents_8hpp</filename>
    <includes id="ROL__LineSearch_8hpp" name="ROL_LineSearch.hpp" local="yes" imported="no">ROL_LineSearch.hpp</includes>
    <includes id="ROL__BackTracking_8hpp" name="ROL_BackTracking.hpp" local="yes" imported="no">ROL_BackTracking.hpp</includes>
    <class kind="class">ROL::Brents</class>
    <class kind="class">ROL::Brents::testFunction</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Bundle.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/bundle/</path>
    <filename>ROL__Bundle_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <class kind="class">ROL::Bundle</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Bundle_TT.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/bundle/</path>
    <filename>ROL__Bundle__TT_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Bundle_8hpp" name="ROL_Bundle.hpp" local="yes" imported="no">ROL_Bundle.hpp</includes>
    <class kind="class">ROL::Bundle_TT</class>
    <namespace>ROL</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_TT</name>
      <anchorfile>ROL__Bundle__TT_8hpp.html</anchorfile>
      <anchor>ae15507a4a3845127cd91a5323b8656d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXACT</name>
      <anchorfile>ROL__Bundle__TT_8hpp.html</anchorfile>
      <anchor>aead07e32d2b0b04225ec49fc8a7d38b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TABOO_LIST</name>
      <anchorfile>ROL__Bundle__TT_8hpp.html</anchorfile>
      <anchor>a7b6bfea18e7eb56e34f4dd60ed207911</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FIRST_VIOLATED</name>
      <anchorfile>ROL__Bundle__TT_8hpp.html</anchorfile>
      <anchor>ae09b142f58ade1fe4ad5a8e0de741d19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_BundleStatusTest.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/status/</path>
    <filename>ROL__BundleStatusTest_8hpp</filename>
    <includes id="ROL__StatusTest_8hpp" name="ROL_StatusTest.hpp" local="yes" imported="no">ROL_StatusTest.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::BundleStatusTest</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_BundleStep.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/</path>
    <filename>ROL__BundleStep_8hpp</filename>
    <includes id="ROL__Bundle_8hpp" name="ROL_Bundle.hpp" local="yes" imported="no">ROL_Bundle.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Step_8hpp" name="ROL_Step.hpp" local="yes" imported="no">ROL_Step.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__LineSearch_8hpp" name="ROL_LineSearch.hpp" local="yes" imported="no">ROL_LineSearch.hpp</includes>
    <class kind="class">ROL::BundleStep</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_BVP.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__BVP_8hpp</filename>
    <includes id="ROL__ScaledStdVector_8hpp" name="ROL_ScaledStdVector.hpp" local="yes" imported="no">ROL_ScaledStdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_BVP</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROL_BVP_HPP</name>
      <anchorfile>ROL__BVP_8hpp.html</anchorfile>
      <anchor>a08111974f63d70d6d2c904b7e7feb72d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBVP</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>acfeb562f968fc4bd56cb455794353470</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_CArrayVector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/vector/</path>
    <filename>ROL__CArrayVector_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <class kind="class">ROL::CArrayVector</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Cauchy.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/distribution/</path>
    <filename>ROL__Cauchy_8hpp</filename>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <class kind="class">ROL::Cauchy</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_CauchyPoint.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/trustregion/</path>
    <filename>ROL__CauchyPoint_8hpp</filename>
    <includes id="ROL__TrustRegion_8hpp" name="ROL_TrustRegion.hpp" local="yes" imported="no">ROL_TrustRegion.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__HelperFunctions_8hpp" name="ROL_HelperFunctions.hpp" local="yes" imported="no">ROL_HelperFunctions.hpp</includes>
    <class kind="class">ROL::CauchyPoint</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_CDFObjective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/sampler/SROM/</path>
    <filename>ROL__CDFObjective_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BatchManager_8hpp" name="ROL_BatchManager.hpp" local="yes" imported="no">ROL_BatchManager.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <class kind="class">ROL::CDFObjective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ChebyshevKusuoka.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/</path>
    <filename>ROL__ChebyshevKusuoka_8hpp</filename>
    <includes id="ROL__SingletonKusuoka_8hpp" name="ROL_SingletonKusuoka.hpp" local="yes" imported="no">ROL_SingletonKusuoka.hpp</includes>
    <class kind="class">ROL::ChebyshevKusuoka</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Chi2Divergence.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/fdivergence/</path>
    <filename>ROL__Chi2Divergence_8hpp</filename>
    <includes id="ROL__FDivergence_8hpp" name="ROL_FDivergence.hpp" local="yes" imported="no">ROL_FDivergence.hpp</includes>
    <class kind="class">ROL::Chi2Divergence</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_CoherentExpUtility.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/</path>
    <filename>ROL__CoherentExpUtility_8hpp</filename>
    <includes id="ROL__RiskMeasure_8hpp" name="ROL_RiskMeasure.hpp" local="yes" imported="no">ROL_RiskMeasure.hpp</includes>
    <class kind="class">ROL::CoherentExpUtility</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_CompositeConstraint.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__CompositeConstraint_8hpp</filename>
    <includes id="ROL__PartitionedVector_8hpp" name="ROL_PartitionedVector.hpp" local="yes" imported="no">ROL_PartitionedVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__InequalityConstraint_8hpp" name="ROL_InequalityConstraint.hpp" local="yes" imported="no">ROL_InequalityConstraint.hpp</includes>
    <class kind="class">ROL::CompositeConstraint</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_CompositeObjective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__CompositeObjective_8hpp</filename>
    <includes id="ROL__StdObjective_8hpp" name="ROL_StdObjective.hpp" local="yes" imported="no">ROL_StdObjective.hpp</includes>
    <class kind="class">ROL::CompositeObjective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_CompositeObjective_SimOpt.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__CompositeObjective__SimOpt_8hpp</filename>
    <includes id="ROL__StdObjective_8hpp" name="ROL_StdObjective.hpp" local="yes" imported="no">ROL_StdObjective.hpp</includes>
    <includes id="ROL__Objective__SimOpt_8hpp" name="ROL_Objective_SimOpt.hpp" local="yes" imported="no">ROL_Objective_SimOpt.hpp</includes>
    <class kind="class">ROL::CompositeObjective_SimOpt</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_CompositeStep.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/</path>
    <filename>ROL__CompositeStep_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Step_8hpp" name="ROL_Step.hpp" local="yes" imported="no">ROL_Step.hpp</includes>
    <class kind="class">ROL::CompositeStep</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ConjugateGradients.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/krylov/</path>
    <filename>ROL__ConjugateGradients_8hpp</filename>
    <includes id="ROL__Krylov_8hpp" name="ROL_Krylov.hpp" local="yes" imported="no">ROL_Krylov.hpp</includes>
    <includes id="ROL__LinearOperator_8hpp" name="ROL_LinearOperator.hpp" local="yes" imported="no">ROL_LinearOperator.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::ConjugateGradients</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ConjugateResiduals.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/krylov/</path>
    <filename>ROL__ConjugateResiduals_8hpp</filename>
    <includes id="ROL__Krylov_8hpp" name="ROL_Krylov.hpp" local="yes" imported="no">ROL_Krylov.hpp</includes>
    <includes id="ROL__LinearOperator_8hpp" name="ROL_LinearOperator.hpp" local="yes" imported="no">ROL_LinearOperator.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::ConjugateResiduals</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Constraints.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__Constraints_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__EqualityConstraint_8hpp" name="ROL_EqualityConstraint.hpp" local="yes" imported="no">ROL_EqualityConstraint.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::Constraints</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ConstraintStatusTest.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/status/</path>
    <filename>ROL__ConstraintStatusTest_8hpp</filename>
    <includes id="ROL__StatusTest_8hpp" name="ROL_StatusTest.hpp" local="yes" imported="no">ROL_StatusTest.hpp</includes>
    <class kind="class">ROL::ConstraintStatusTest</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ConvexCombinationRiskMeasure.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/</path>
    <filename>ROL__ConvexCombinationRiskMeasure_8hpp</filename>
    <includes id="ROL__RiskMeasureFactory_8hpp" name="ROL_RiskMeasureFactory.hpp" local="yes" imported="no">ROL_RiskMeasureFactory.hpp</includes>
    <class kind="class">ROL::ConvexCombinationRiskMeasure</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_CubicInterp.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/linesearch/</path>
    <filename>ROL__CubicInterp_8hpp</filename>
    <includes id="ROL__LineSearch_8hpp" name="ROL_LineSearch.hpp" local="yes" imported="no">ROL_LineSearch.hpp</includes>
    <class kind="class">ROL::CubicInterp</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_CVaR.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/</path>
    <filename>ROL__CVaR_8hpp</filename>
    <includes id="ROL__RiskMeasure_8hpp" name="ROL_RiskMeasure.hpp" local="yes" imported="no">ROL_RiskMeasure.hpp</includes>
    <includes id="ROL__PlusFunction_8hpp" name="ROL_PlusFunction.hpp" local="yes" imported="no">ROL_PlusFunction.hpp</includes>
    <includes id="ROL__RiskVector_8hpp" name="ROL_RiskVector.hpp" local="yes" imported="no">ROL_RiskVector.hpp</includes>
    <class kind="class">ROL::CVaR</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_DiagonalOperator.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__DiagonalOperator_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__LinearOperator_8hpp" name="ROL_LinearOperator.hpp" local="yes" imported="no">ROL_LinearOperator.hpp</includes>
    <class kind="class">ROL::DiagonalOperator</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_DiodeCircuit.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__DiodeCircuit_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__ScaledStdVector_8hpp" name="ROL_ScaledStdVector.hpp" local="yes" imported="no">ROL_ScaledStdVector.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_DiodeCircuit</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Dirac.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/distribution/</path>
    <filename>ROL__Dirac_8hpp</filename>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <class kind="class">ROL::Dirac</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Distribution.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__Distribution_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::Distribution</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_DistributionFactory.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/distribution/</path>
    <filename>ROL__DistributionFactory_8hpp</filename>
    <includes id="ROL__Dirac_8hpp" name="ROL_Dirac.hpp" local="yes" imported="no">ROL_Dirac.hpp</includes>
    <includes id="ROL__Gaussian_8hpp" name="ROL_Gaussian.hpp" local="yes" imported="no">ROL_Gaussian.hpp</includes>
    <includes id="ROL__TruncatedGaussian_8hpp" name="ROL_TruncatedGaussian.hpp" local="yes" imported="no">ROL_TruncatedGaussian.hpp</includes>
    <includes id="ROL__Uniform_8hpp" name="ROL_Uniform.hpp" local="yes" imported="no">ROL_Uniform.hpp</includes>
    <includes id="ROL__Logistic_8hpp" name="ROL_Logistic.hpp" local="yes" imported="no">ROL_Logistic.hpp</includes>
    <includes id="ROL__Triangle_8hpp" name="ROL_Triangle.hpp" local="yes" imported="no">ROL_Triangle.hpp</includes>
    <includes id="ROL__Parabolic_8hpp" name="ROL_Parabolic.hpp" local="yes" imported="no">ROL_Parabolic.hpp</includes>
    <includes id="ROL__RaisedCosine_8hpp" name="ROL_RaisedCosine.hpp" local="yes" imported="no">ROL_RaisedCosine.hpp</includes>
    <includes id="ROL__Laplace_8hpp" name="ROL_Laplace.hpp" local="yes" imported="no">ROL_Laplace.hpp</includes>
    <includes id="ROL__Cauchy_8hpp" name="ROL_Cauchy.hpp" local="yes" imported="no">ROL_Cauchy.hpp</includes>
    <includes id="ROL__Smale_8hpp" name="ROL_Smale.hpp" local="yes" imported="no">ROL_Smale.hpp</includes>
    <includes id="ROL__Arcsine_8hpp" name="ROL_Arcsine.hpp" local="yes" imported="no">ROL_Arcsine.hpp</includes>
    <includes id="ROL__Kumaraswamy_8hpp" name="ROL_Kumaraswamy.hpp" local="yes" imported="no">ROL_Kumaraswamy.hpp</includes>
    <includes id="ROL__Exponential_8hpp" name="ROL_Exponential.hpp" local="yes" imported="no">ROL_Exponential.hpp</includes>
    <includes id="ROL__TruncatedExponential_8hpp" name="ROL_TruncatedExponential.hpp" local="yes" imported="no">ROL_TruncatedExponential.hpp</includes>
    <includes id="ROL__Gamma_8hpp" name="ROL_Gamma.hpp" local="yes" imported="no">ROL_Gamma.hpp</includes>
    <includes id="ROL__Beta_8hpp" name="ROL_Beta.hpp" local="yes" imported="no">ROL_Beta.hpp</includes>
    <namespace>ROL</namespace>
    <member kind="enumeration">
      <type></type>
      <name>EDistribution</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_ARCSINE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2adfbd78741aab214d8eebdf69a7d75917</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_BETA</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a8d30fc7153275cedb23a53754b62e928</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_CAUCHY</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2adc08b181bc96c81638c8a49f609e954e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_DIRAC</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2aa3afd2f9bf28d938ae7c152b77de6979</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_EXPONENTIAL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a2dadfda956e202f25ba3a9372557aefb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_GAMMA</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a50f71c8b04f20b48e43a3b15e37be1a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_GAUSSIAN</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a849f23f1f9c3d6f5599fbc3744259a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_KUMARASWAMY</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2afb3c7a987b57e9dac7cac804c5d9a151</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_LAPLACE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a3ba53bb8a86d3836c7d94c753d101e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_LOGISTIC</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a949efdc8f55c1ff6300c22d91b52108e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_PARABOLIC</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2adddc2a26f5e7e56061c697a82cd6b06d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_RAISEDCOSINE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a33c1c6e66d45b003d6c64bfa590cceeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_SMALE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a097af45a6a8edc8171e1e9b0743a9957</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_TRIANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a1138228d95af65843c543178b80f9a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_TRUNCATEDEXPONENTIAL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2acf4d61042b3021a27baec487c9965c6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_TRUNCATEDGAUSSIAN</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2ad69fc3d212c8cd6625db63739d5a04b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_UNIFORM</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a2499c81b3d550b5c619c6488c8285a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a6a4a7d1f7591b02d80d247f1551217bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>EDistributionToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae637c125cd0f156a2c916b630ae73127</anchor>
      <arglist>(EDistribution ed)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidDistribution</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>af420fb200817b0a7d16bff95b3e9e8bd</anchor>
      <arglist>(EDistribution ed)</arglist>
    </member>
    <member kind="function">
      <type>EDistribution &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a20b2373a8421a15703791294b78716e1</anchor>
      <arglist>(EDistribution &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EDistribution</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a64c509d8d1254810cf9534f599996d1a</anchor>
      <arglist>(EDistribution &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EDistribution &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a1386958f8e61eb23a9f067396f843d4f</anchor>
      <arglist>(EDistribution &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EDistribution</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a278feb3f77b973dd9c5c5b181c11ba37</anchor>
      <arglist>(EDistribution &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EDistribution</type>
      <name>StringToEDistribution</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a70f4ed0508e9a2c380c7e8cc98b8a3a0</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Distribution&lt; Real &gt; &gt;</type>
      <name>DistributionFactory</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a890a543d5e5754d66c96f5c2374096cc</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_DogLeg.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/trustregion/</path>
    <filename>ROL__DogLeg_8hpp</filename>
    <includes id="ROL__TrustRegion_8hpp" name="ROL_TrustRegion.hpp" local="yes" imported="no">ROL_TrustRegion.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__HelperFunctions_8hpp" name="ROL_HelperFunctions.hpp" local="yes" imported="no">ROL_HelperFunctions.hpp</includes>
    <class kind="class">ROL::DogLeg</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_DoubleDogLeg.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/trustregion/</path>
    <filename>ROL__DoubleDogLeg_8hpp</filename>
    <includes id="ROL__TrustRegion_8hpp" name="ROL_TrustRegion.hpp" local="yes" imported="no">ROL_TrustRegion.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__HelperFunctions_8hpp" name="ROL_HelperFunctions.hpp" local="yes" imported="no">ROL_HelperFunctions.hpp</includes>
    <class kind="class">ROL::DoubleDogLeg</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ElementwiseVector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/vector/</path>
    <filename>ROL__ElementwiseVector_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <class kind="class">ROL::ElementwiseVector</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_EqualityConstraint.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__EqualityConstraint_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__EqualityConstraintDef_8hpp" name="ROL_EqualityConstraintDef.hpp" local="yes" imported="no">ROL_EqualityConstraintDef.hpp</includes>
    <class kind="class">ROL::EqualityConstraint</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_EqualityConstraint_Partitioned.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__EqualityConstraint__Partitioned_8hpp</filename>
    <includes id="ROL__EqualityConstraint_8hpp" name="ROL_EqualityConstraint.hpp" local="yes" imported="no">ROL_EqualityConstraint.hpp</includes>
    <includes id="ROL__PartitionedVector_8hpp" name="ROL_PartitionedVector.hpp" local="yes" imported="no">ROL_PartitionedVector.hpp</includes>
    <class kind="class">ROL::EqualityConstraint_Partitioned</class>
    <namespace>ROL</namespace>
    <member kind="function">
      <type>Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt;</type>
      <name>CreateEqualityConstraintPartitioned</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac255b9f42c5de4620807bacf29a44a38</anchor>
      <arglist>(const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;con1, const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;con2)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt;</type>
      <name>CreateEqualityConstraintPartitioned</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a7535476fdde0475ca3d9fdeaba3de2ed</anchor>
      <arglist>(const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;con1, const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;con2, const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;con3)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_EqualityConstraint_SimOpt.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__EqualityConstraint__SimOpt_8hpp</filename>
    <includes id="ROL__EqualityConstraint_8hpp" name="ROL_EqualityConstraint.hpp" local="yes" imported="no">ROL_EqualityConstraint.hpp</includes>
    <includes id="ROL__Vector__SimOpt_8hpp" name="ROL_Vector_SimOpt.hpp" local="yes" imported="no">ROL_Vector_SimOpt.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::EqualityConstraint_SimOpt</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_EqualityConstraintDef.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__EqualityConstraintDef_8hpp</filename>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ExpectationQuad.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/</path>
    <filename>ROL__ExpectationQuad_8hpp</filename>
    <includes id="ROL__RiskVector_8hpp" name="ROL_RiskVector.hpp" local="yes" imported="no">ROL_RiskVector.hpp</includes>
    <includes id="ROL__RiskMeasure_8hpp" name="ROL_RiskMeasure.hpp" local="yes" imported="no">ROL_RiskMeasure.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::ExpectationQuad</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ExperimentDesignObjective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/example/PDE-OPT/adv-diff-react/</path>
    <filename>ROL__ExperimentDesignObjective_8hpp</filename>
    <includes id="ROL__Reduced__Objective__SimOpt_8hpp" name="ROL_Reduced_Objective_SimOpt.hpp" local="yes" imported="no">ROL_Reduced_Objective_SimOpt.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <class kind="class">ROL::ExperimentDesignInterface</class>
    <class kind="class">ROL::ExperimentDesignObjective</class>
    <class kind="class">ROL::ExperimentDesignObjective::ReducedHessian</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Exponential.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/distribution/</path>
    <filename>ROL__Exponential_8hpp</filename>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <class kind="class">ROL::Exponential</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ExpUtility.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/</path>
    <filename>ROL__ExpUtility_8hpp</filename>
    <includes id="ROL__RiskMeasure_8hpp" name="ROL_RiskMeasure.hpp" local="yes" imported="no">ROL_RiskMeasure.hpp</includes>
    <class kind="class">ROL::ExpUtility</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_FDivergence.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/</path>
    <filename>ROL__FDivergence_8hpp</filename>
    <includes id="ROL__RiskVector_8hpp" name="ROL_RiskVector.hpp" local="yes" imported="no">ROL_RiskVector.hpp</includes>
    <includes id="ROL__RiskMeasure_8hpp" name="ROL_RiskMeasure.hpp" local="yes" imported="no">ROL_RiskMeasure.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::FDivergence</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_FreudensteinRoth.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__FreudensteinRoth_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_FreudensteinRoth</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROL_FREUDENSTEINROTH_HPP</name>
      <anchorfile>ROL__FreudensteinRoth_8hpp.html</anchorfile>
      <anchor>ab0411fbf7638391611992b093342229f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFreudensteinRoth</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>aede93e86827434180fd8beaccd31fb33</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_Gamma.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/distribution/</path>
    <filename>ROL__Gamma_8hpp</filename>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <class kind="class">ROL::Gamma</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Gaussian.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/distribution/</path>
    <filename>ROL__Gaussian_8hpp</filename>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <class kind="class">ROL::Gaussian</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_GMRES.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/krylov/</path>
    <filename>ROL__GMRES_8hpp</filename>
    <includes id="ROL__Krylov_8hpp" name="ROL_Krylov.hpp" local="yes" imported="no">ROL_Krylov.hpp</includes>
    <includes id="ROL__LinearOperator_8hpp" name="ROL_LinearOperator.hpp" local="yes" imported="no">ROL_LinearOperator.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::GMRES</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_GoldenSection.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/linesearch/</path>
    <filename>ROL__GoldenSection_8hpp</filename>
    <includes id="ROL__LineSearch_8hpp" name="ROL_LineSearch.hpp" local="yes" imported="no">ROL_LineSearch.hpp</includes>
    <includes id="ROL__BackTracking_8hpp" name="ROL_BackTracking.hpp" local="yes" imported="no">ROL_BackTracking.hpp</includes>
    <class kind="class">ROL::GoldenSection</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_GradientStep.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/</path>
    <filename>ROL__GradientStep_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Step_8hpp" name="ROL_Step.hpp" local="yes" imported="no">ROL_Step.hpp</includes>
    <includes id="ROL__Secant_8hpp" name="ROL_Secant.hpp" local="yes" imported="no">ROL_Secant.hpp</includes>
    <class kind="class">ROL::GradientStep</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_HelperFunctions.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__HelperFunctions_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__Secant_8hpp" name="ROL_Secant.hpp" local="yes" imported="no">ROL_Secant.hpp</includes>
    <class kind="class">ROL::ProjectedObjective</class>
    <namespace>ROL</namespace>
    <member kind="function">
      <type>Teuchos::SerialDenseMatrix&lt; int, Real &gt;</type>
      <name>computeDenseHessian</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3383567e23310d0192bc1a8f733e5d4</anchor>
      <arglist>(Objective&lt; Real &gt; &amp;obj, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::SerialDenseMatrix&lt; int, Real &gt;</type>
      <name>computeDotMatrix</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a9c04a3777e97507f4307004ce170f61b</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>computeEigenvalues</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a93f480c7db4b895ba9b14b6d5c619735</anchor>
      <arglist>(const Teuchos::SerialDenseMatrix&lt; int, Real &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>computeGenEigenvalues</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad6f03ad58f4e8cbc9cb3bb2d45167bc3</anchor>
      <arglist>(const Teuchos::SerialDenseMatrix&lt; int, Real &gt; &amp;A, const Teuchos::SerialDenseMatrix&lt; int, Real &gt; &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::SerialDenseMatrix&lt; int, Real &gt;</type>
      <name>computeInverse</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ace1facbd0a5d6e4afe671a39f3125ec1</anchor>
      <arglist>(const Teuchos::SerialDenseMatrix&lt; int, Real &gt; &amp;mat)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_HMCR.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/</path>
    <filename>ROL__HMCR_8hpp</filename>
    <includes id="ROL__RiskMeasure_8hpp" name="ROL_RiskMeasure.hpp" local="yes" imported="no">ROL_RiskMeasure.hpp</includes>
    <includes id="ROL__PlusFunction_8hpp" name="ROL_PlusFunction.hpp" local="yes" imported="no">ROL_PlusFunction.hpp</includes>
    <includes id="ROL__RiskVector_8hpp" name="ROL_RiskVector.hpp" local="yes" imported="no">ROL_RiskVector.hpp</includes>
    <class kind="class">ROL::HMCR</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_HMCRObjective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__HMCRObjective_8hpp</filename>
    <includes id="ROL__RiskVector_8hpp" name="ROL_RiskVector.hpp" local="yes" imported="no">ROL_RiskVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__ParametrizedObjective_8hpp" name="ROL_ParametrizedObjective.hpp" local="yes" imported="no">ROL_ParametrizedObjective.hpp</includes>
    <includes id="ROL__SampleGenerator_8hpp" name="ROL_SampleGenerator.hpp" local="yes" imported="no">ROL_SampleGenerator.hpp</includes>
    <class kind="class">ROL::HMCRObjective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_HS1.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__HS1_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_HS1</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROL_HS1_HPP</name>
      <anchorfile>ROL__HS1_8hpp.html</anchorfile>
      <anchor>a610c95650175020ef8d34c164c3cc35d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHS1</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a3d20ab35ac1eabf6397bbb37c998c181</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_HS2.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__HS2_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_HS2</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROL_HS2_HPP</name>
      <anchorfile>ROL__HS2_8hpp.html</anchorfile>
      <anchor>a4458b7f17f26488a38bee2f52d9e9b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHS2</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a4ab31eee7b6d7bcd88355035b0ac8ba9</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_HS24.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__HS24_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__InequalityConstraint_8hpp" name="ROL_InequalityConstraint.hpp" local="yes" imported="no">ROL_InequalityConstraint.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_HS24</class>
    <class kind="class">ROL::ZOO::InequalityConstraint_HS24</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="function">
      <type>Teuchos::RCP&lt; Objective&lt; Real &gt; &gt;</type>
      <name>getObjective_HS24</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a580af92fe83555ec27f3553b0e4ec63e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; InequalityConstraint&lt; Real &gt; &gt;</type>
      <name>getInequalityConstraint_HS24</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>abfcc81a0e92195effe0c66ce9ef439d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt;</type>
      <name>getBoundConstraint_HS24</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>ad11cef7d088c9e4caf9cb565aa54a474</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getInitialGuess_HS24</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a31b67550e33e207cf2b026536b8c9f98</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getSolution_HS24</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a2d8ce8a870821fa6805c26ff45cab824</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getInequalityMultiplier_HS24</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a67939ec355842dc4362e5e3a862add0e</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_HS25.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__HS25_8hpp</filename>
    <includes id="ROL__ScaledStdVector_8hpp" name="ROL_ScaledStdVector.hpp" local="yes" imported="no">ROL_ScaledStdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_HS25</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROL_HS25_HPP</name>
      <anchorfile>ROL__HS25_8hpp.html</anchorfile>
      <anchor>a369fb65ace151a037fbad55cc2f7ca0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHS25</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a433ef48ce22be1bfcf9bfd11b0c14f0f</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_HS29.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__HS29_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__InequalityConstraint_8hpp" name="ROL_InequalityConstraint.hpp" local="yes" imported="no">ROL_InequalityConstraint.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_HS29</class>
    <class kind="class">ROL::ZOO::InequalityConstraint_HS29</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_HS3.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__HS3_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_HS3</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROL_HS3_HPP</name>
      <anchorfile>ROL__HS3_8hpp.html</anchorfile>
      <anchor>a1fa8b0bf31c1593eb72ba8545644017d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHS3</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a60c50b9364911d74e8d9371e77e5ff90</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_HS32.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__HS32_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__InequalityConstraint_8hpp" name="ROL_InequalityConstraint.hpp" local="yes" imported="no">ROL_InequalityConstraint.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_HS32</class>
    <class kind="class">ROL::ZOO::EqualityConstraint_HS32</class>
    <class kind="class">ROL::ZOO::InequalityConstraint_HS32</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_HS38.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__HS38_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_HS38</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROL_HS38_HPP</name>
      <anchorfile>ROL__HS38_8hpp.html</anchorfile>
      <anchor>a07fde67ec383b58e6949a1d0c79d1f98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHS38</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>ae412f94cbbc73dfe71ec9ca6bffaa77c</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_HS39.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__HS39_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__EqualityConstraint__Partitioned_8hpp" name="ROL_EqualityConstraint_Partitioned.hpp" local="yes" imported="no">ROL_EqualityConstraint_Partitioned.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_HS39</class>
    <class kind="class">ROL::ZOO::EqualityConstraint_HS39a</class>
    <class kind="class">ROL::ZOO::EqualityConstraint_HS39b</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_HS4.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__HS4_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_HS4</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROL_HS4_HPP</name>
      <anchorfile>ROL__HS4_8hpp.html</anchorfile>
      <anchor>ac07da2a761e6705d84cea13968c98ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHS4</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a18b76002089e6ea349dfee35b4f06c1a</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_HS45.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__HS45_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_HS45</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROL_HS45_HPP</name>
      <anchorfile>ROL__HS45_8hpp.html</anchorfile>
      <anchor>af5d1d2ff64d8315328ced7f884b54e4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHS45</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>abeff395ec33bd6edee69dcd788ea0329</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_HS5.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__HS5_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_HS5</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROL_HS5_HPP</name>
      <anchorfile>ROL__HS5_8hpp.html</anchorfile>
      <anchor>a938a83d1c8c8cb102b935d644286a035</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHS5</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a846b6e3558cff5c5831feff3a337fdc1</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_InequalityConstraint.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__InequalityConstraint_8hpp</filename>
    <includes id="ROL__EqualityConstraint_8hpp" name="ROL_EqualityConstraint.hpp" local="yes" imported="no">ROL_EqualityConstraint.hpp</includes>
    <class kind="class">ROL::InequalityConstraint</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_InteriorPoint.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/interiorpoint/</path>
    <filename>ROL__InteriorPoint_8hpp</filename>
    <includes id="ROL__PartitionedVector_8hpp" name="ROL_PartitionedVector.hpp" local="yes" imported="no">ROL_PartitionedVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__InequalityConstraint_8hpp" name="ROL_InequalityConstraint.hpp" local="yes" imported="no">ROL_InequalityConstraint.hpp</includes>
    <class kind="class">ROL::InteriorPoint::PenalizedObjective</class>
    <class kind="class">ROL::InteriorPoint::CompositeConstraint</class>
    <namespace>ROL</namespace>
    <namespace>ROL::InteriorPoint</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_InteriorPointPrimalDualResidual.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/interiorpoint/</path>
    <filename>ROL__InteriorPointPrimalDualResidual_8hpp</filename>
    <includes id="ROL__EqualityConstraint_8hpp" name="ROL_EqualityConstraint.hpp" local="yes" imported="no">ROL_EqualityConstraint.hpp</includes>
    <includes id="ROL__LinearOperator_8hpp" name="ROL_LinearOperator.hpp" local="yes" imported="no">ROL_LinearOperator.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__PartitionedVector_8hpp" name="ROL_PartitionedVector.hpp" local="yes" imported="no">ROL_PartitionedVector.hpp</includes>
    <class kind="class">ROL::InteriorPoint::PrimalDualSymmetrizer</class>
    <class kind="class">ROL::InteriorPoint::PrimalDualResidual</class>
    <class kind="class">ROL::InteriorPoint::PrimalDualSymmetrizer</class>
    <namespace>ROL</namespace>
    <namespace>ROL::InteriorPoint</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_InteriorPointStep.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/</path>
    <filename>ROL__InteriorPointStep_8hpp</filename>
    <includes id="ROL__CompositeStep_8hpp" name="ROL_CompositeStep.hpp" local="yes" imported="no">ROL_CompositeStep.hpp</includes>
    <includes id="ROL__ConstraintStatusTest_8hpp" name="ROL_ConstraintStatusTest.hpp" local="yes" imported="no">ROL_ConstraintStatusTest.hpp</includes>
    <includes id="ROL__InteriorPoint_8hpp" name="ROL_InteriorPoint.hpp" local="yes" imported="no">ROL_InteriorPoint.hpp</includes>
    <includes id="ROL__ObjectiveFromBoundConstraint_8hpp" name="ROL_ObjectiveFromBoundConstraint.hpp" local="yes" imported="no">ROL_ObjectiveFromBoundConstraint.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::InteriorPointStep</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_IterationScaling.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/linesearch/</path>
    <filename>ROL__IterationScaling_8hpp</filename>
    <includes id="ROL__LineSearch_8hpp" name="ROL_LineSearch.hpp" local="yes" imported="no">ROL_LineSearch.hpp</includes>
    <class kind="class">ROL::IterationScaling</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_KLDivergence.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/</path>
    <filename>ROL__KLDivergence_8hpp</filename>
    <includes id="ROL__RiskMeasure_8hpp" name="ROL_RiskMeasure.hpp" local="yes" imported="no">ROL_RiskMeasure.hpp</includes>
    <class kind="class">ROL::KLDivergence</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Krylov.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/krylov/</path>
    <filename>ROL__Krylov_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__LinearOperator_8hpp" name="ROL_LinearOperator.hpp" local="yes" imported="no">ROL_LinearOperator.hpp</includes>
    <includes id="ROL__KrylovFactory_8hpp" name="ROL_KrylovFactory.hpp" local="yes" imported="no">ROL_KrylovFactory.hpp</includes>
    <class kind="class">ROL::Krylov</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_KrylovFactory.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/krylov/</path>
    <filename>ROL__KrylovFactory_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Krylov_8hpp" name="ROL_Krylov.hpp" local="yes" imported="no">ROL_Krylov.hpp</includes>
    <includes id="ROL__GMRES_8hpp" name="ROL_GMRES.hpp" local="yes" imported="no">ROL_GMRES.hpp</includes>
    <includes id="ROL__ConjugateGradients_8hpp" name="ROL_ConjugateGradients.hpp" local="yes" imported="no">ROL_ConjugateGradients.hpp</includes>
    <includes id="ROL__ConjugateResiduals_8hpp" name="ROL_ConjugateResiduals.hpp" local="yes" imported="no">ROL_ConjugateResiduals.hpp</includes>
    <class kind="class">ROL::GMRES</class>
    <namespace>ROL</namespace>
    <member kind="function">
      <type>Teuchos::RCP&lt; Krylov&lt; Real &gt; &gt;</type>
      <name>KrylovFactory</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a7d0a1c08460a9710d7af7724f8ab65db</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_Kumaraswamy.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/distribution/</path>
    <filename>ROL__Kumaraswamy_8hpp</filename>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <class kind="class">ROL::Kumaraswamy</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Laplace.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/distribution/</path>
    <filename>ROL__Laplace_8hpp</filename>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <class kind="class">ROL::Laplace</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_lBFGS.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/secant/</path>
    <filename>ROL__lBFGS_8hpp</filename>
    <includes id="ROL__Secant_8hpp" name="ROL_Secant.hpp" local="yes" imported="no">ROL_Secant.hpp</includes>
    <class kind="class">ROL::lBFGS</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_lDFP.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/secant/</path>
    <filename>ROL__lDFP_8hpp</filename>
    <includes id="ROL__Secant_8hpp" name="ROL_Secant.hpp" local="yes" imported="no">ROL_Secant.hpp</includes>
    <class kind="class">ROL::lDFP</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_LeastSquares.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__LeastSquares_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_LeastSquares</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROL_LEASTSQUARES_HPP</name>
      <anchorfile>ROL__LeastSquares_8hpp.html</anchorfile>
      <anchor>a08dfb8a827f14477fd1111d031362a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLeastSquares</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a18faef2004834cd27371f0ea2759eee4</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_LinearCombinationObjective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__LinearCombinationObjective_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <class kind="class">ROL::LinearCombinationObjective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_LinearObjective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__LinearObjective_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <class kind="class">ROL::LinearObjective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_LinearOperator.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__LinearOperator_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <class kind="class">ROL::LinearOperator</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_LineSearch.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/linesearch/</path>
    <filename>ROL__LineSearch_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__LineSearchFactory_8hpp" name="ROL_LineSearchFactory.hpp" local="yes" imported="no">ROL_LineSearchFactory.hpp</includes>
    <class kind="class">ROL::LineSearch</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_LineSearchFactory.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/linesearch/</path>
    <filename>ROL__LineSearchFactory_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__LineSearch_8hpp" name="ROL_LineSearch.hpp" local="yes" imported="no">ROL_LineSearch.hpp</includes>
    <includes id="ROL__IterationScaling_8hpp" name="ROL_IterationScaling.hpp" local="yes" imported="no">ROL_IterationScaling.hpp</includes>
    <includes id="ROL__PathBasedTargetLevel_8hpp" name="ROL_PathBasedTargetLevel.hpp" local="yes" imported="no">ROL_PathBasedTargetLevel.hpp</includes>
    <includes id="ROL__BackTracking_8hpp" name="ROL_BackTracking.hpp" local="yes" imported="no">ROL_BackTracking.hpp</includes>
    <includes id="ROL__CubicInterp_8hpp" name="ROL_CubicInterp.hpp" local="yes" imported="no">ROL_CubicInterp.hpp</includes>
    <includes id="ROL__Bisection_8hpp" name="ROL_Bisection.hpp" local="yes" imported="no">ROL_Bisection.hpp</includes>
    <includes id="ROL__GoldenSection_8hpp" name="ROL_GoldenSection.hpp" local="yes" imported="no">ROL_GoldenSection.hpp</includes>
    <includes id="ROL__Brents_8hpp" name="ROL_Brents.hpp" local="yes" imported="no">ROL_Brents.hpp</includes>
    <includes id="ROL__ScalarMinimizationLineSearch_8hpp" name="ROL_ScalarMinimizationLineSearch.hpp" local="yes" imported="no">ROL_ScalarMinimizationLineSearch.hpp</includes>
    <namespace>ROL</namespace>
    <member kind="function">
      <type>Teuchos::RCP&lt; LineSearch&lt; Real &gt; &gt;</type>
      <name>LineSearchFactory</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac1a6d95dd1d6ca06704d8b1daf5a433c</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_LineSearchStep.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/</path>
    <filename>ROL__LineSearchStep_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__HelperFunctions_8hpp" name="ROL_HelperFunctions.hpp" local="yes" imported="no">ROL_HelperFunctions.hpp</includes>
    <includes id="ROL__Step_8hpp" name="ROL_Step.hpp" local="yes" imported="no">ROL_Step.hpp</includes>
    <includes id="ROL__LineSearch_8hpp" name="ROL_LineSearch.hpp" local="yes" imported="no">ROL_LineSearch.hpp</includes>
    <includes id="ROL__GradientStep_8hpp" name="ROL_GradientStep.hpp" local="yes" imported="no">ROL_GradientStep.hpp</includes>
    <includes id="ROL__NonlinearCGStep_8hpp" name="ROL_NonlinearCGStep.hpp" local="yes" imported="no">ROL_NonlinearCGStep.hpp</includes>
    <includes id="ROL__SecantStep_8hpp" name="ROL_SecantStep.hpp" local="yes" imported="no">ROL_SecantStep.hpp</includes>
    <includes id="ROL__NewtonStep_8hpp" name="ROL_NewtonStep.hpp" local="yes" imported="no">ROL_NewtonStep.hpp</includes>
    <includes id="ROL__NewtonKrylovStep_8hpp" name="ROL_NewtonKrylovStep.hpp" local="yes" imported="no">ROL_NewtonKrylovStep.hpp</includes>
    <includes id="ROL__ProjectedSecantStep_8hpp" name="ROL_ProjectedSecantStep.hpp" local="yes" imported="no">ROL_ProjectedSecantStep.hpp</includes>
    <includes id="ROL__ProjectedNewtonStep_8hpp" name="ROL_ProjectedNewtonStep.hpp" local="yes" imported="no">ROL_ProjectedNewtonStep.hpp</includes>
    <includes id="ROL__ProjectedNewtonKrylovStep_8hpp" name="ROL_ProjectedNewtonKrylovStep.hpp" local="yes" imported="no">ROL_ProjectedNewtonKrylovStep.hpp</includes>
    <class kind="class">ROL::LineSearchStep</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_LogBarrierObjective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__LogBarrierObjective_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <class kind="class">ROL::LogBarrierObjective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_LogExponentialQuadrangle.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/quadrangle/</path>
    <filename>ROL__LogExponentialQuadrangle_8hpp</filename>
    <includes id="ROL__ExpectationQuad_8hpp" name="ROL_ExpectationQuad.hpp" local="yes" imported="no">ROL_ExpectationQuad.hpp</includes>
    <class kind="class">ROL::LogExponentialQuadrangle</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Logistic.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/distribution/</path>
    <filename>ROL__Logistic_8hpp</filename>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <class kind="class">ROL::Logistic</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_LogQuantileQuadrangle.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/quadrangle/</path>
    <filename>ROL__LogQuantileQuadrangle_8hpp</filename>
    <includes id="ROL__ExpectationQuad_8hpp" name="ROL_ExpectationQuad.hpp" local="yes" imported="no">ROL_ExpectationQuad.hpp</includes>
    <includes id="ROL__PlusFunction_8hpp" name="ROL_PlusFunction.hpp" local="yes" imported="no">ROL_PlusFunction.hpp</includes>
    <class kind="class">ROL::LogQuantileQuadrangle</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_LowerBoundInequalityConstraint.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__LowerBoundInequalityConstraint_8hpp</filename>
    <includes id="ROL__InequalityConstraint_8hpp" name="ROL_InequalityConstraint.hpp" local="yes" imported="no">ROL_InequalityConstraint.hpp</includes>
    <class kind="class">ROL::LowerBoundInequalityConstraint</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_lSR1.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/secant/</path>
    <filename>ROL__lSR1_8hpp</filename>
    <includes id="ROL__Secant_8hpp" name="ROL_Secant.hpp" local="yes" imported="no">ROL_Secant.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::lSR1</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_MeanDeviation.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/</path>
    <filename>ROL__MeanDeviation_8hpp</filename>
    <includes id="ROL__RiskMeasure_8hpp" name="ROL_RiskMeasure.hpp" local="yes" imported="no">ROL_RiskMeasure.hpp</includes>
    <includes id="ROL__PositiveFunction_8hpp" name="ROL_PositiveFunction.hpp" local="yes" imported="no">ROL_PositiveFunction.hpp</includes>
    <includes id="ROL__PlusFunction_8hpp" name="ROL_PlusFunction.hpp" local="yes" imported="no">ROL_PlusFunction.hpp</includes>
    <includes id="ROL__AbsoluteValue_8hpp" name="ROL_AbsoluteValue.hpp" local="yes" imported="no">ROL_AbsoluteValue.hpp</includes>
    <class kind="class">ROL::MeanDeviation</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_MeanDeviationFromTarget.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/</path>
    <filename>ROL__MeanDeviationFromTarget_8hpp</filename>
    <includes id="ROL__RiskMeasure_8hpp" name="ROL_RiskMeasure.hpp" local="yes" imported="no">ROL_RiskMeasure.hpp</includes>
    <includes id="ROL__PositiveFunction_8hpp" name="ROL_PositiveFunction.hpp" local="yes" imported="no">ROL_PositiveFunction.hpp</includes>
    <includes id="ROL__PlusFunction_8hpp" name="ROL_PlusFunction.hpp" local="yes" imported="no">ROL_PlusFunction.hpp</includes>
    <includes id="ROL__AbsoluteValue_8hpp" name="ROL_AbsoluteValue.hpp" local="yes" imported="no">ROL_AbsoluteValue.hpp</includes>
    <class kind="class">ROL::MeanDeviationFromTarget</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_MeanVariance.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/</path>
    <filename>ROL__MeanVariance_8hpp</filename>
    <includes id="ROL__RiskMeasure_8hpp" name="ROL_RiskMeasure.hpp" local="yes" imported="no">ROL_RiskMeasure.hpp</includes>
    <includes id="ROL__PositiveFunction_8hpp" name="ROL_PositiveFunction.hpp" local="yes" imported="no">ROL_PositiveFunction.hpp</includes>
    <includes id="ROL__PlusFunction_8hpp" name="ROL_PlusFunction.hpp" local="yes" imported="no">ROL_PlusFunction.hpp</includes>
    <includes id="ROL__AbsoluteValue_8hpp" name="ROL_AbsoluteValue.hpp" local="yes" imported="no">ROL_AbsoluteValue.hpp</includes>
    <class kind="class">ROL::MeanVariance</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_MeanVarianceFromTarget.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/</path>
    <filename>ROL__MeanVarianceFromTarget_8hpp</filename>
    <includes id="ROL__RiskMeasure_8hpp" name="ROL_RiskMeasure.hpp" local="yes" imported="no">ROL_RiskMeasure.hpp</includes>
    <includes id="ROL__PositiveFunction_8hpp" name="ROL_PositiveFunction.hpp" local="yes" imported="no">ROL_PositiveFunction.hpp</includes>
    <includes id="ROL__PlusFunction_8hpp" name="ROL_PlusFunction.hpp" local="yes" imported="no">ROL_PlusFunction.hpp</includes>
    <includes id="ROL__AbsoluteValue_8hpp" name="ROL_AbsoluteValue.hpp" local="yes" imported="no">ROL_AbsoluteValue.hpp</includes>
    <class kind="class">ROL::MeanVarianceFromTarget</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_MeanVarianceQuadrangle.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/quadrangle/</path>
    <filename>ROL__MeanVarianceQuadrangle_8hpp</filename>
    <includes id="ROL__ExpectationQuad_8hpp" name="ROL_ExpectationQuad.hpp" local="yes" imported="no">ROL_ExpectationQuad.hpp</includes>
    <class kind="class">ROL::MeanVarianceQuadrangle</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_MeritFunction.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/interiorpoint/</path>
    <filename>ROL__MeritFunction_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__InequalityConstraint_8hpp" name="ROL_InequalityConstraint.hpp" local="yes" imported="no">ROL_InequalityConstraint.hpp</includes>
    <includes id="ROL__PartitionedVector_8hpp" name="ROL_PartitionedVector.hpp" local="yes" imported="no">ROL_PartitionedVector.hpp</includes>
    <class kind="class">ROL::InteriorPoint::MeritFunction</class>
    <namespace>ROL</namespace>
    <namespace>ROL::InteriorPoint</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Minimax1.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__Minimax1_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <class kind="class">ROL::Minimax1</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Minimax2.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__Minimax2_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <class kind="class">ROL::Minimax2</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Minimax3.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__Minimax3_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <class kind="class">ROL::Minimax3</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_MixedQuantileQuadrangle.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/quadrangle/</path>
    <filename>ROL__MixedQuantileQuadrangle_8hpp</filename>
    <includes id="ROL__RiskMeasure_8hpp" name="ROL_RiskMeasure.hpp" local="yes" imported="no">ROL_RiskMeasure.hpp</includes>
    <includes id="ROL__PlusFunction_8hpp" name="ROL_PlusFunction.hpp" local="yes" imported="no">ROL_PlusFunction.hpp</includes>
    <includes id="ROL__RiskVector_8hpp" name="ROL_RiskVector.hpp" local="yes" imported="no">ROL_RiskVector.hpp</includes>
    <class kind="class">ROL::MixedQuantileQuadrangle</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_MomentObjective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/sampler/SROM/</path>
    <filename>ROL__MomentObjective_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BatchManager_8hpp" name="ROL_BatchManager.hpp" local="yes" imported="no">ROL_BatchManager.hpp</includes>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <includes id="ROL__SROMVector_8hpp" name="ROL_SROMVector.hpp" local="yes" imported="no">ROL_SROMVector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::MomentObjective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_MonteCarloGenerator.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/sampler/</path>
    <filename>ROL__MonteCarloGenerator_8hpp</filename>
    <includes id="ROL__SampleGenerator_8hpp" name="ROL_SampleGenerator.hpp" local="yes" imported="no">ROL_SampleGenerator.hpp</includes>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <class kind="class">ROL::MonteCarloGenerator</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_MoreauYosidaCVaR.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/quadrangle/</path>
    <filename>ROL__MoreauYosidaCVaR_8hpp</filename>
    <includes id="ROL__ExpectationQuad_8hpp" name="ROL_ExpectationQuad.hpp" local="yes" imported="no">ROL_ExpectationQuad.hpp</includes>
    <class kind="class">ROL::MoreauYosidaCVaR</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_MoreauYosidaPenalty.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__MoreauYosidaPenalty_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::MoreauYosidaPenalty</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_MoreauYosidaPenaltyStep.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/</path>
    <filename>ROL__MoreauYosidaPenaltyStep_8hpp</filename>
    <includes id="ROL__MoreauYosidaPenalty_8hpp" name="ROL_MoreauYosidaPenalty.hpp" local="yes" imported="no">ROL_MoreauYosidaPenalty.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__EqualityConstraint_8hpp" name="ROL_EqualityConstraint.hpp" local="yes" imported="no">ROL_EqualityConstraint.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <class kind="class">ROL::MoreauYosidaPenaltyStep</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_MultiVector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/vector/</path>
    <filename>ROL__MultiVector_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <class kind="class">ROL::MultiVector</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_MultiVectorDefault.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/vector/</path>
    <filename>ROL__MultiVectorDefault_8hpp</filename>
    <includes id="ROL__MultiVector_8hpp" name="ROL_MultiVector.hpp" local="yes" imported="no">ROL_MultiVector.hpp</includes>
    <class kind="class">ROL::MultiVectorDefault</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_NewtonKrylovStep.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/</path>
    <filename>ROL__NewtonKrylovStep_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Step_8hpp" name="ROL_Step.hpp" local="yes" imported="no">ROL_Step.hpp</includes>
    <includes id="ROL__Secant_8hpp" name="ROL_Secant.hpp" local="yes" imported="no">ROL_Secant.hpp</includes>
    <includes id="ROL__Krylov_8hpp" name="ROL_Krylov.hpp" local="yes" imported="no">ROL_Krylov.hpp</includes>
    <includes id="ROL__LinearOperator_8hpp" name="ROL_LinearOperator.hpp" local="yes" imported="no">ROL_LinearOperator.hpp</includes>
    <class kind="class">ROL::NewtonKrylovStep</class>
    <class kind="class">ROL::NewtonKrylovStep::HessianNK</class>
    <class kind="class">ROL::NewtonKrylovStep::PrecondNK</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_NewtonStep.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/</path>
    <filename>ROL__NewtonStep_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Step_8hpp" name="ROL_Step.hpp" local="yes" imported="no">ROL_Step.hpp</includes>
    <class kind="class">ROL::NewtonStep</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_NonlinearCG.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/nonlinearcg/</path>
    <filename>ROL__NonlinearCG_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
  </compound>
  <compound kind="file">
    <name>ROL_NonlinearCGStep.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/</path>
    <filename>ROL__NonlinearCGStep_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Step_8hpp" name="ROL_Step.hpp" local="yes" imported="no">ROL_Step.hpp</includes>
    <includes id="ROL__NonlinearCG_8hpp" name="ROL_NonlinearCG.hpp" local="yes" imported="no">ROL_NonlinearCG.hpp</includes>
    <class kind="class">ROL::NonlinearCGStep</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_NonlinearLeastSquaresObjective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__NonlinearLeastSquaresObjective_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__EqualityConstraint_8hpp" name="ROL_EqualityConstraint.hpp" local="yes" imported="no">ROL_EqualityConstraint.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::NonlinearLeastSquaresObjective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Objective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__Objective_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__ObjectiveDef_8hpp" name="ROL_ObjectiveDef.hpp" local="no" imported="no">ROL_ObjectiveDef.hpp</includes>
    <class kind="class">ROL::Objective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Objective_sav.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__Objective__sav_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__ObjectiveDef_8hpp" name="ROL_ObjectiveDef.hpp" local="no" imported="no">ROL_ObjectiveDef.hpp</includes>
    <class kind="class">ROL::Objective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Objective_SimOpt.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__Objective__SimOpt_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__Vector__SimOpt_8hpp" name="ROL_Vector_SimOpt.hpp" local="yes" imported="no">ROL_Vector_SimOpt.hpp</includes>
    <class kind="class">ROL::Objective_SimOpt</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ObjectiveDef.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__ObjectiveDef_8hpp</filename>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ObjectiveDef_sav.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__ObjectiveDef__sav_8hpp</filename>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ObjectiveFromBoundConstraint.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__ObjectiveFromBoundConstraint_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <class kind="class">ROL::ObjectiveFromBoundConstraint</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_OptimizationProblem.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/algorithm/</path>
    <filename>ROL__OptimizationProblem_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__InteriorPoint_8hpp" name="ROL_InteriorPoint.hpp" local="yes" imported="no">ROL_InteriorPoint.hpp</includes>
    <includes id="ROL__LogBarrierObjective_8hpp" name="ROL_LogBarrierObjective.hpp" local="yes" imported="no">ROL_LogBarrierObjective.hpp</includes>
    <includes id="ROL__InequalityConstraint_8hpp" name="ROL_InequalityConstraint.hpp" local="yes" imported="no">ROL_InequalityConstraint.hpp</includes>
    <includes id="ROL__BoundInequalityConstraint_8hpp" name="ROL_BoundInequalityConstraint.hpp" local="yes" imported="no">ROL_BoundInequalityConstraint.hpp</includes>
    <includes id="ROL__ObjectiveFromBoundConstraint_8hpp" name="ROL_ObjectiveFromBoundConstraint.hpp" local="yes" imported="no">ROL_ObjectiveFromBoundConstraint.hpp</includes>
    <includes id="ROL__RandomVector_8hpp" name="ROL_RandomVector.hpp" local="yes" imported="no">ROL_RandomVector.hpp</includes>
    <class kind="class">ROL::OptimizationProblem</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_OptimizationProblemRefactor.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/algorithm/</path>
    <filename>ROL__OptimizationProblemRefactor_8hpp</filename>
    <includes id="ROL__BoundConstraint__Partitioned_8hpp" name="ROL_BoundConstraint_Partitioned.hpp" local="yes" imported="no">ROL_BoundConstraint_Partitioned.hpp</includes>
    <includes id="ROL__CompositeConstraint_8hpp" name="ROL_CompositeConstraint.hpp" local="yes" imported="no">ROL_CompositeConstraint.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <class kind="class">ROL::OptimizationProblem</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Parabolic.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/distribution/</path>
    <filename>ROL__Parabolic_8hpp</filename>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <class kind="class">ROL::Parabolic</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ParameterListConverters.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__ParameterListConverters_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <namespace>ROL</namespace>
    <namespace>ROL::StringList</namespace>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>join</name>
      <anchorfile>namespaceROL_1_1StringList.html</anchorfile>
      <anchor>a45b6592309348878213181bfd37359a5</anchor>
      <arglist>(const std::string &amp;s1, const std::string &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>join</name>
      <anchorfile>namespaceROL_1_1StringList.html</anchorfile>
      <anchor>af5e7be5365cd9968c6252f5c4d61e4cd</anchor>
      <arglist>(const std::string &amp;s1, const std::string &amp;s2, const std::string &amp;s3)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>join</name>
      <anchorfile>namespaceROL_1_1StringList.html</anchorfile>
      <anchor>a6f48164eb174b99526e24016cfe9ab6e</anchor>
      <arglist>(const std::string &amp;s1, const std::string &amp;s2, const std::string &amp;s3, const std::string &amp;s4)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>join</name>
      <anchorfile>namespaceROL_1_1StringList.html</anchorfile>
      <anchor>a395c44bab87665c6542936877eab5c61</anchor>
      <arglist>(const std::string &amp;s1, const std::string &amp;s2, const std::string &amp;s3, const std::string &amp;s4, const std::string &amp;s5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameter</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a2aa1fa2f03930bb3e87985070a8aef70</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const std::vector&lt; std::string &gt; &amp;location, const std::vector&lt; std::string &gt;::iterator iter, ParameterType value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tierParameterList</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a32b34a08883f1afbdfa82bdbdcbfdbaf</anchor>
      <arglist>(Teuchos::ParameterList &amp;outList, const Teuchos::ParameterList &amp;inList)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_Parametrize.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__Parametrize_8hpp</filename>
    <class kind="class">ROL::Parametrize</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ParametrizedCompositeObjective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__ParametrizedCompositeObjective_8hpp</filename>
    <includes id="ROL__ParametrizedStdObjective_8hpp" name="ROL_ParametrizedStdObjective.hpp" local="yes" imported="no">ROL_ParametrizedStdObjective.hpp</includes>
    <class kind="class">ROL::ParametrizedCompositeObjective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ParametrizedCompositeObjective_SimOpt.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__ParametrizedCompositeObjective__SimOpt_8hpp</filename>
    <includes id="ROL__ParametrizedStdObjective_8hpp" name="ROL_ParametrizedStdObjective.hpp" local="yes" imported="no">ROL_ParametrizedStdObjective.hpp</includes>
    <includes id="ROL__ParametrizedObjective__SimOpt_8hpp" name="ROL_ParametrizedObjective_SimOpt.hpp" local="yes" imported="no">ROL_ParametrizedObjective_SimOpt.hpp</includes>
    <class kind="class">ROL::ParametrizedCompositeObjective_SimOpt</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ParametrizedEqualityConstraint.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__ParametrizedEqualityConstraint_8hpp</filename>
    <includes id="ROL__EqualityConstraint_8hpp" name="ROL_EqualityConstraint.hpp" local="yes" imported="no">ROL_EqualityConstraint.hpp</includes>
    <includes id="ROL__Parametrize_8hpp" name="ROL_Parametrize.hpp" local="yes" imported="no">ROL_Parametrize.hpp</includes>
    <class kind="class">ROL::ParametrizedEqualityConstraint</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ParametrizedEqualityConstraint_SimOpt.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__ParametrizedEqualityConstraint__SimOpt_8hpp</filename>
    <includes id="ROL__EqualityConstraint__SimOpt_8hpp" name="ROL_EqualityConstraint_SimOpt.hpp" local="yes" imported="no">ROL_EqualityConstraint_SimOpt.hpp</includes>
    <includes id="ROL__ParametrizedEqualityConstraint_8hpp" name="ROL_ParametrizedEqualityConstraint.hpp" local="yes" imported="no">ROL_ParametrizedEqualityConstraint.hpp</includes>
    <class kind="class">ROL::ParametrizedEqualityConstraint_SimOpt</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ParametrizedObjective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__ParametrizedObjective_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__Parametrize_8hpp" name="ROL_Parametrize.hpp" local="yes" imported="no">ROL_Parametrize.hpp</includes>
    <class kind="class">ROL::ParametrizedObjective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ParametrizedObjective_SimOpt.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__ParametrizedObjective__SimOpt_8hpp</filename>
    <includes id="ROL__Objective__SimOpt_8hpp" name="ROL_Objective_SimOpt.hpp" local="yes" imported="no">ROL_Objective_SimOpt.hpp</includes>
    <includes id="ROL__ParametrizedObjective_8hpp" name="ROL_ParametrizedObjective.hpp" local="yes" imported="no">ROL_ParametrizedObjective.hpp</includes>
    <class kind="class">ROL::ParametrizedObjective_SimOpt</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ParametrizedStdObjective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__ParametrizedStdObjective_8hpp</filename>
    <includes id="ROL__StdObjective_8hpp" name="ROL_StdObjective.hpp" local="yes" imported="no">ROL_StdObjective.hpp</includes>
    <includes id="ROL__ParametrizedObjective_8hpp" name="ROL_ParametrizedObjective.hpp" local="yes" imported="no">ROL_ParametrizedObjective.hpp</includes>
    <class kind="class">ROL::ParametrizedStdObjective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_PartitionedVector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/vector/</path>
    <filename>ROL__PartitionedVector_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <class kind="class">ROL::PartitionedVector</class>
    <namespace>ROL</namespace>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>CreatePartitionedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a36d98bfa33209a0b667d12384d254c25</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>CreatePartitionedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4d160f6a07da05ec6d48000bae2a1c48</anchor>
      <arglist>(const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>CreatePartitionedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a95d333365077fe46dc37a16e76d814cf</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>CreatePartitionedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>af73f407b6ed1109437c585ca6699153a</anchor>
      <arglist>(const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>CreatePartitionedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a9a9e97b3a107a5ed1ecf747988db7d80</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>CreatePartitionedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a089123184b4bd1d7a6386ce72466a8a6</anchor>
      <arglist>(const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>CreatePartitionedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada4e00089f66bca689ff037b1c43e4ae</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;c, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>CreatePartitionedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a267d27b6e2b98626543d7f4f7f16e7a2</anchor>
      <arglist>(const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;c, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_PathBasedTargetLevel.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/linesearch/</path>
    <filename>ROL__PathBasedTargetLevel_8hpp</filename>
    <includes id="ROL__LineSearch_8hpp" name="ROL_LineSearch.hpp" local="yes" imported="no">ROL_LineSearch.hpp</includes>
    <class kind="class">ROL::PathBasedTargetLevel</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_PlusFunction.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__PlusFunction_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__PositiveFunction_8hpp" name="ROL_PositiveFunction.hpp" local="yes" imported="no">ROL_PositiveFunction.hpp</includes>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <includes id="ROL__DistributionFactory_8hpp" name="ROL_DistributionFactory.hpp" local="yes" imported="no">ROL_DistributionFactory.hpp</includes>
    <class kind="class">ROL::PlusFunction</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_PointwiseCDFObjective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/sampler/SROM/</path>
    <filename>ROL__PointwiseCDFObjective_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BatchManager_8hpp" name="ROL_BatchManager.hpp" local="yes" imported="no">ROL_BatchManager.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <class kind="class">ROL::PointwiseCDFObjective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_PoissonControl.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__PoissonControl_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_PoissonControl</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROL_POISSONCONTROL_HPP</name>
      <anchorfile>ROL__PoissonControl_8hpp.html</anchorfile>
      <anchor>aac89ef5c86fdbf6f7564e889286999d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPoissonControl</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>af676d610fa93306653570dea7eb0939d</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_PoissonInversion.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__PoissonInversion_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__HelperFunctions_8hpp" name="ROL_HelperFunctions.hpp" local="yes" imported="no">ROL_HelperFunctions.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_PoissonInversion</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROL_POISSONINVERSION_HPP</name>
      <anchorfile>ROL__PoissonInversion_8hpp.html</anchorfile>
      <anchor>a71140561d3ea17d63a32ba21b3deb588</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPoissonInversion</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>aa3be56daf1a62ec90619ebaac49c61fc</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_PositiveFunction.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__PositiveFunction_8hpp</filename>
    <class kind="class">ROL::PositiveFunction</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Powell.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__Powell_8hpp</filename>
    <includes id="ROL__ScaledStdVector_8hpp" name="ROL_ScaledStdVector.hpp" local="yes" imported="no">ROL_ScaledStdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_Powell</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROL_POWELL_HPP</name>
      <anchorfile>ROL__Powell_8hpp.html</anchorfile>
      <anchor>a6033f3452a4ddb16e772ad0c9373094c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPowell</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>af0b31f5d149b1720911ef0556b3390f5</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_PrimalDualActiveSetStep.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/</path>
    <filename>ROL__PrimalDualActiveSetStep_8hpp</filename>
    <includes id="ROL__Step_8hpp" name="ROL_Step.hpp" local="yes" imported="no">ROL_Step.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Krylov_8hpp" name="ROL_Krylov.hpp" local="yes" imported="no">ROL_Krylov.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Secant_8hpp" name="ROL_Secant.hpp" local="yes" imported="no">ROL_Secant.hpp</includes>
    <class kind="class">ROL::PrimalDualActiveSetStep</class>
    <class kind="class">ROL::PrimalDualActiveSetStep::HessianPD</class>
    <class kind="class">ROL::PrimalDualActiveSetStep::PrecondPD</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ProbabilityVector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/sampler/SROM/</path>
    <filename>ROL__ProbabilityVector_8hpp</filename>
    <includes id="ROL__BatchStdVector_8hpp" name="ROL_BatchStdVector.hpp" local="yes" imported="no">ROL_BatchStdVector.hpp</includes>
    <class kind="class">ROL::PrimalProbabilityVector</class>
    <class kind="class">ROL::DualProbabilityVector</class>
    <class kind="class">ROL::ProbabilityVector</class>
    <class kind="class">ROL::PrimalProbabilityVector</class>
    <class kind="class">ROL::DualProbabilityVector</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ProjectedNewtonKrylovStep.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/</path>
    <filename>ROL__ProjectedNewtonKrylovStep_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Step_8hpp" name="ROL_Step.hpp" local="yes" imported="no">ROL_Step.hpp</includes>
    <includes id="ROL__Secant_8hpp" name="ROL_Secant.hpp" local="yes" imported="no">ROL_Secant.hpp</includes>
    <includes id="ROL__Krylov_8hpp" name="ROL_Krylov.hpp" local="yes" imported="no">ROL_Krylov.hpp</includes>
    <includes id="ROL__LinearOperator_8hpp" name="ROL_LinearOperator.hpp" local="yes" imported="no">ROL_LinearOperator.hpp</includes>
    <class kind="class">ROL::ProjectedNewtonKrylovStep</class>
    <class kind="class">ROL::ProjectedNewtonKrylovStep::HessianPNK</class>
    <class kind="class">ROL::ProjectedNewtonKrylovStep::PrecondPNK</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ProjectedNewtonStep.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/</path>
    <filename>ROL__ProjectedNewtonStep_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Step_8hpp" name="ROL_Step.hpp" local="yes" imported="no">ROL_Step.hpp</includes>
    <class kind="class">ROL::ProjectedNewtonStep</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ProjectedSecantStep.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/</path>
    <filename>ROL__ProjectedSecantStep_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Step_8hpp" name="ROL_Step.hpp" local="yes" imported="no">ROL_Step.hpp</includes>
    <includes id="ROL__Secant_8hpp" name="ROL_Secant.hpp" local="yes" imported="no">ROL_Secant.hpp</includes>
    <class kind="class">ROL::ProjectedSecantStep</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_QuadraticObjective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__QuadraticObjective_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <class kind="class">ROL::QuadraticObjective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_QuadraticPenalty.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__QuadraticPenalty_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__EqualityConstraint_8hpp" name="ROL_EqualityConstraint.hpp" local="yes" imported="no">ROL_EqualityConstraint.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::QuadraticPenalty</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_QuadraticPenalty_SimOpt.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__QuadraticPenalty__SimOpt_8hpp</filename>
    <includes id="ROL__Objective__SimOpt_8hpp" name="ROL_Objective_SimOpt.hpp" local="yes" imported="no">ROL_Objective_SimOpt.hpp</includes>
    <includes id="ROL__EqualityConstraint__SimOpt_8hpp" name="ROL_EqualityConstraint_SimOpt.hpp" local="yes" imported="no">ROL_EqualityConstraint_SimOpt.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::QuadraticPenalty_SimOpt</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_QuantileQuadrangle.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/quadrangle/</path>
    <filename>ROL__QuantileQuadrangle_8hpp</filename>
    <includes id="ROL__ExpectationQuad_8hpp" name="ROL_ExpectationQuad.hpp" local="yes" imported="no">ROL_ExpectationQuad.hpp</includes>
    <includes id="ROL__PlusFunction_8hpp" name="ROL_PlusFunction.hpp" local="yes" imported="no">ROL_PlusFunction.hpp</includes>
    <class kind="class">ROL::QuantileQuadrangle</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_QuantileRadiusQuadrangle.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/quadrangle/</path>
    <filename>ROL__QuantileRadiusQuadrangle_8hpp</filename>
    <includes id="ROL__RiskMeasure_8hpp" name="ROL_RiskMeasure.hpp" local="yes" imported="no">ROL_RiskMeasure.hpp</includes>
    <includes id="ROL__PlusFunction_8hpp" name="ROL_PlusFunction.hpp" local="yes" imported="no">ROL_PlusFunction.hpp</includes>
    <includes id="ROL__RiskVector_8hpp" name="ROL_RiskVector.hpp" local="yes" imported="no">ROL_RiskVector.hpp</includes>
    <class kind="class">ROL::QuantileRadiusQuadrangle</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_RaisedCosine.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/distribution/</path>
    <filename>ROL__RaisedCosine_8hpp</filename>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <class kind="class">ROL::RaisedCosine</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_RandomVector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/vector/</path>
    <filename>ROL__RandomVector_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <namespace>ROL</namespace>
    <member kind="function">
      <type>void</type>
      <name>RandomizeVector</name>
      <anchorfile>group__la__group.html</anchorfile>
      <anchor>ga70323bf6909aaa2841a19255d5ce1976</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Real &amp;lower=0.0, const Real &amp;upper=1.0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_Reduced_AugmentedLagrangian_SimOpt.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__Reduced__AugmentedLagrangian__SimOpt_8hpp</filename>
    <includes id="ROL__Objective__SimOpt_8hpp" name="ROL_Objective_SimOpt.hpp" local="yes" imported="no">ROL_Objective_SimOpt.hpp</includes>
    <includes id="ROL__Reduced__Objective__SimOpt_8hpp" name="ROL_Reduced_Objective_SimOpt.hpp" local="yes" imported="no">ROL_Reduced_Objective_SimOpt.hpp</includes>
    <includes id="ROL__EqualityConstraint__SimOpt_8hpp" name="ROL_EqualityConstraint_SimOpt.hpp" local="yes" imported="no">ROL_EqualityConstraint_SimOpt.hpp</includes>
    <includes id="ROL__AugmentedLagrangian__SimOpt_8hpp" name="ROL_AugmentedLagrangian_SimOpt.hpp" local="yes" imported="no">ROL_AugmentedLagrangian_SimOpt.hpp</includes>
    <includes id="ROL__AugmentedLagrangian_8hpp" name="ROL_AugmentedLagrangian.hpp" local="yes" imported="no">ROL_AugmentedLagrangian.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::Reduced_AugmentedLagrangian_SimOpt</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Reduced_Objective_SimOpt.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__Reduced__Objective__SimOpt_8hpp</filename>
    <includes id="ROL__Objective__SimOpt_8hpp" name="ROL_Objective_SimOpt.hpp" local="yes" imported="no">ROL_Objective_SimOpt.hpp</includes>
    <includes id="ROL__EqualityConstraint__SimOpt_8hpp" name="ROL_EqualityConstraint_SimOpt.hpp" local="yes" imported="no">ROL_EqualityConstraint_SimOpt.hpp</includes>
    <class kind="class">ROL::Reduced_Objective_SimOpt</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Reduced_ParametrizedObjective_SimOpt.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__Reduced__ParametrizedObjective__SimOpt_8hpp</filename>
    <includes id="ROL__ParametrizedObjective_8hpp" name="ROL_ParametrizedObjective.hpp" local="yes" imported="no">ROL_ParametrizedObjective.hpp</includes>
    <includes id="ROL__ParametrizedObjective__SimOpt_8hpp" name="ROL_ParametrizedObjective_SimOpt.hpp" local="yes" imported="no">ROL_ParametrizedObjective_SimOpt.hpp</includes>
    <includes id="ROL__ParametrizedEqualityConstraint__SimOpt_8hpp" name="ROL_ParametrizedEqualityConstraint_SimOpt.hpp" local="yes" imported="no">ROL_ParametrizedEqualityConstraint_SimOpt.hpp</includes>
    <includes id="ROL__Vector__SimOpt_8hpp" name="ROL_Vector_SimOpt.hpp" local="yes" imported="no">ROL_Vector_SimOpt.hpp</includes>
    <class kind="class">ROL::Reduced_ParametrizedObjective_SimOpt</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_RiskAverseObjective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__RiskAverseObjective_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__ParametrizedObjective_8hpp" name="ROL_ParametrizedObjective.hpp" local="yes" imported="no">ROL_ParametrizedObjective.hpp</includes>
    <includes id="ROL__SampleGenerator_8hpp" name="ROL_SampleGenerator.hpp" local="yes" imported="no">ROL_SampleGenerator.hpp</includes>
    <includes id="ROL__RiskMeasureFactory_8hpp" name="ROL_RiskMeasureFactory.hpp" local="yes" imported="no">ROL_RiskMeasureFactory.hpp</includes>
    <includes id="ROL__ConvexCombinationRiskMeasure_8hpp" name="ROL_ConvexCombinationRiskMeasure.hpp" local="yes" imported="no">ROL_ConvexCombinationRiskMeasure.hpp</includes>
    <class kind="class">ROL::RiskAverseObjective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_RiskBoundConstraint.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__RiskBoundConstraint_8hpp</filename>
    <includes id="ROL__StdBoundConstraint_8hpp" name="ROL_StdBoundConstraint.hpp" local="yes" imported="no">ROL_StdBoundConstraint.hpp</includes>
    <includes id="ROL__RiskVector_8hpp" name="ROL_RiskVector.hpp" local="yes" imported="no">ROL_RiskVector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::RiskBoundConstraint</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_RiskMeasure.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__RiskMeasure_8hpp</filename>
    <includes id="ROL__RiskVector_8hpp" name="ROL_RiskVector.hpp" local="yes" imported="no">ROL_RiskVector.hpp</includes>
    <class kind="class">ROL::RiskMeasure</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_RiskMeasureFactory.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/</path>
    <filename>ROL__RiskMeasureFactory_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__CVaR_8hpp" name="ROL_CVaR.hpp" local="yes" imported="no">ROL_CVaR.hpp</includes>
    <includes id="ROL__CoherentExpUtility_8hpp" name="ROL_CoherentExpUtility.hpp" local="yes" imported="no">ROL_CoherentExpUtility.hpp</includes>
    <includes id="ROL__ExpUtility_8hpp" name="ROL_ExpUtility.hpp" local="yes" imported="no">ROL_ExpUtility.hpp</includes>
    <includes id="ROL__HMCR_8hpp" name="ROL_HMCR.hpp" local="yes" imported="no">ROL_HMCR.hpp</includes>
    <includes id="ROL__MeanDeviationFromTarget_8hpp" name="ROL_MeanDeviationFromTarget.hpp" local="yes" imported="no">ROL_MeanDeviationFromTarget.hpp</includes>
    <includes id="ROL__MeanDeviation_8hpp" name="ROL_MeanDeviation.hpp" local="yes" imported="no">ROL_MeanDeviation.hpp</includes>
    <includes id="ROL__MeanVarianceFromTarget_8hpp" name="ROL_MeanVarianceFromTarget.hpp" local="yes" imported="no">ROL_MeanVarianceFromTarget.hpp</includes>
    <includes id="ROL__MeanVariance_8hpp" name="ROL_MeanVariance.hpp" local="yes" imported="no">ROL_MeanVariance.hpp</includes>
    <includes id="ROL__MoreauYosidaCVaR_8hpp" name="ROL_MoreauYosidaCVaR.hpp" local="yes" imported="no">ROL_MoreauYosidaCVaR.hpp</includes>
    <includes id="ROL__LogExponentialQuadrangle_8hpp" name="ROL_LogExponentialQuadrangle.hpp" local="yes" imported="no">ROL_LogExponentialQuadrangle.hpp</includes>
    <includes id="ROL__LogQuantileQuadrangle_8hpp" name="ROL_LogQuantileQuadrangle.hpp" local="yes" imported="no">ROL_LogQuantileQuadrangle.hpp</includes>
    <includes id="ROL__MeanVarianceQuadrangle_8hpp" name="ROL_MeanVarianceQuadrangle.hpp" local="yes" imported="no">ROL_MeanVarianceQuadrangle.hpp</includes>
    <includes id="ROL__MixedQuantileQuadrangle_8hpp" name="ROL_MixedQuantileQuadrangle.hpp" local="yes" imported="no">ROL_MixedQuantileQuadrangle.hpp</includes>
    <includes id="ROL__SuperQuantileQuadrangle_8hpp" name="ROL_SuperQuantileQuadrangle.hpp" local="yes" imported="no">ROL_SuperQuantileQuadrangle.hpp</includes>
    <includes id="ROL__ChebyshevKusuoka_8hpp" name="ROL_ChebyshevKusuoka.hpp" local="yes" imported="no">ROL_ChebyshevKusuoka.hpp</includes>
    <includes id="ROL__SingletonKusuoka_8hpp" name="ROL_SingletonKusuoka.hpp" local="yes" imported="no">ROL_SingletonKusuoka.hpp</includes>
    <includes id="ROL__QuantileQuadrangle_8hpp" name="ROL_QuantileQuadrangle.hpp" local="yes" imported="no">ROL_QuantileQuadrangle.hpp</includes>
    <includes id="ROL__QuantileRadiusQuadrangle_8hpp" name="ROL_QuantileRadiusQuadrangle.hpp" local="yes" imported="no">ROL_QuantileRadiusQuadrangle.hpp</includes>
    <includes id="ROL__SmoothedWorstCaseQuadrangle_8hpp" name="ROL_SmoothedWorstCaseQuadrangle.hpp" local="yes" imported="no">ROL_SmoothedWorstCaseQuadrangle.hpp</includes>
    <includes id="ROL__TruncatedMeanQuadrangle_8hpp" name="ROL_TruncatedMeanQuadrangle.hpp" local="yes" imported="no">ROL_TruncatedMeanQuadrangle.hpp</includes>
    <includes id="ROL__Chi2Divergence_8hpp" name="ROL_Chi2Divergence.hpp" local="yes" imported="no">ROL_Chi2Divergence.hpp</includes>
    <includes id="ROL__KLDivergence_8hpp" name="ROL_KLDivergence.hpp" local="yes" imported="no">ROL_KLDivergence.hpp</includes>
    <namespace>ROL</namespace>
    <member kind="enumeration">
      <type></type>
      <name>ERiskMeasure</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_CVAR</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa7e3fa8eeb45773dda1bb56e5692dd201</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_COHERENTEXPUTILITY</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa41589d3ea061fa244391b79043eed657</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_EXPUTILITY</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa24b11e2d9509e89b247b0656589092f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_HMCR</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa90267503ba3a4858856d7ff89e720626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_MEANDEVIATIONFROMTARGET</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa5076fd2cda916c365f2afa8a6233c8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_MEANDEVIATION</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa5738a023ea5d6eda79be0fa285f7b55e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_MEANVARIANCEFROMTARGET</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa8c0c33947dc09d6e5264d6de4047c60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_MEANVARIANCE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa60b9ce7ae3f3f7b7236326015d5c5aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_MOREAUYOSIDACVAR</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa22fbb24274257a4f1062ba09b9c119b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_LOGEXPONENTIALQUADRANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa0769a3d1c258c50d804e428d35a1af74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_LOGQUANTILEQUADRANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aaf5039f31ab3057fbd68325a8c205913a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_MEANVARIANCEQUADRANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aaef5662718145a239e964f8c37aadbbcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_MIXEDQUANTILEQUADRANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa593c46af85f4551ec3c04fbc08fbafc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_QUANTILEQUADRANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aab80caf2af5fea7c335d73d3f8e9884cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_QUANTILERADIUSQUADRANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aadbe0a372a2c73274e158fabe8539db23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_SMOOTHEDWORSTCASEQUADRANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aabea5553a01cc5d66c69a1eb439604e12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_SUPERQUANTILEQUADRANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa4dde9b0b81903d0253cd81fecdc2de99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_CHEBYSHEVKUSUOKA</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aabc13126c5994039d1f58db778d847f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_SINGLETONKUSUOKA</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aabe1470a704b35f9bea5fbae6bac95229</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_TRUNCATEDMEANQUADRANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aae2c36c384e39f1ad6d900659a01c0c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_CHI2DIVERGENCE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa0065d6f7a3fa014debaca7753df2f07e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_KLDIVERGENCE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aaae7c5fa2b662e91336d961abfdcee9b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa323b19e156cf72aedd6b67bf05b90ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ERiskMeasureToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a30b57d576dcdb890c513a3100ad88999</anchor>
      <arglist>(ERiskMeasure ed)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidRiskMeasure</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a027c8c697689b1b718a2415541838426</anchor>
      <arglist>(ERiskMeasure ed)</arglist>
    </member>
    <member kind="function">
      <type>ERiskMeasure &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6c23367f6963137f46d6eecbcd5df6e6</anchor>
      <arglist>(ERiskMeasure &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ERiskMeasure</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac3316aeca62d6a936283df16228c5e9a</anchor>
      <arglist>(ERiskMeasure &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ERiskMeasure &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a1d5291b16c6ca995ded6aca67d8bb1d0</anchor>
      <arglist>(ERiskMeasure &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ERiskMeasure</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8aeb50b29e327587667e98c11e44d6eb</anchor>
      <arglist>(ERiskMeasure &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ERiskMeasure</type>
      <name>StringToERiskMeasure</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6d5a43267b71889ba733527ffda5963a</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; RiskMeasure&lt; Real &gt; &gt;</type>
      <name>RiskMeasureFactory</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aab2419b8e371fd08230708f8910802bf</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_RiskMeasureInfo.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/</path>
    <filename>ROL__RiskMeasureInfo_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <namespace>ROL</namespace>
    <member kind="function">
      <type>void</type>
      <name>RiskMeasureInfo</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a130be271bb941fe6c2509f5c4b83738b</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, std::string &amp;name, int &amp;nStatistic, std::vector&lt; Real &gt; &amp;lower, std::vector&lt; Real &gt; &amp;upper, bool &amp;isBoundActivated, const bool printToStream=false, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_RiskNeutralObjective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__RiskNeutralObjective_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__ParametrizedObjective_8hpp" name="ROL_ParametrizedObjective.hpp" local="yes" imported="no">ROL_ParametrizedObjective.hpp</includes>
    <includes id="ROL__SampleGenerator_8hpp" name="ROL_SampleGenerator.hpp" local="yes" imported="no">ROL_SampleGenerator.hpp</includes>
    <class kind="class">ROL::RiskNeutralObjective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_RiskVector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/vector/</path>
    <filename>ROL__RiskVector_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__RiskMeasureInfo_8hpp" name="ROL_RiskMeasureInfo.hpp" local="yes" imported="no">ROL_RiskMeasureInfo.hpp</includes>
    <class kind="class">ROL::RiskVector</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Rosenbrock.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__Rosenbrock_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_Rosenbrock</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROL_ROSENBROCK_HPP</name>
      <anchorfile>ROL__Rosenbrock_8hpp.html</anchorfile>
      <anchor>a72ed52204a67159b9cdff7c725c09724</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRosenbrock</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a45f2f6b9509bb6c59f9b420e254a3f08</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_SampleGenerator.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/sampler/</path>
    <filename>ROL__SampleGenerator_8hpp</filename>
    <includes id="ROL__BatchManager_8hpp" name="ROL_BatchManager.hpp" local="yes" imported="no">ROL_BatchManager.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <class kind="class">ROL::SampleGenerator</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ScalarLinearEqualityConstraint.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__ScalarLinearEqualityConstraint_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__EqualityConstraint_8hpp" name="ROL_EqualityConstraint.hpp" local="yes" imported="no">ROL_EqualityConstraint.hpp</includes>
    <class kind="class">ROL::ScalarLinearEqualityConstraint</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ScalarMinimizationLineSearch.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/linesearch/</path>
    <filename>ROL__ScalarMinimizationLineSearch_8hpp</filename>
    <includes id="ROL__LineSearch_8hpp" name="ROL_LineSearch.hpp" local="yes" imported="no">ROL_LineSearch.hpp</includes>
    <class kind="class">ROL::ScalarMinimizationLineSearch</class>
    <class kind="class">ROL::ScalarMinimizationLineSearch::Phi</class>
    <class kind="class">ROL::ScalarMinimizationLineSearch::LineSearchStatusTest</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_ScaledStdVector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/vector/</path>
    <filename>ROL__ScaledStdVector_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <class kind="class">ROL::PrimalScaledStdVector</class>
    <class kind="class">ROL::DualScaledStdVector</class>
    <class kind="class">ROL::PrimalScaledStdVector</class>
    <class kind="class">ROL::DualScaledStdVector</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Secant.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/secant/</path>
    <filename>ROL__Secant_8hpp</filename>
    <includes id="ROL__LinearOperator_8hpp" name="ROL_LinearOperator.hpp" local="yes" imported="no">ROL_LinearOperator.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__SecantFactory_8hpp" name="ROL_SecantFactory.hpp" local="yes" imported="no">ROL_SecantFactory.hpp</includes>
    <class kind="struct">ROL::SecantState</class>
    <class kind="class">ROL::Secant</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_SecantFactory.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/secant/</path>
    <filename>ROL__SecantFactory_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Secant_8hpp" name="ROL_Secant.hpp" local="yes" imported="no">ROL_Secant.hpp</includes>
    <includes id="ROL__lBFGS_8hpp" name="ROL_lBFGS.hpp" local="yes" imported="no">ROL_lBFGS.hpp</includes>
    <includes id="ROL__lDFP_8hpp" name="ROL_lDFP.hpp" local="yes" imported="no">ROL_lDFP.hpp</includes>
    <includes id="ROL__lSR1_8hpp" name="ROL_lSR1.hpp" local="yes" imported="no">ROL_lSR1.hpp</includes>
    <includes id="ROL__BarzilaiBorwein_8hpp" name="ROL_BarzilaiBorwein.hpp" local="yes" imported="no">ROL_BarzilaiBorwein.hpp</includes>
    <namespace>ROL</namespace>
    <member kind="function">
      <type>Teuchos::RCP&lt; Secant&lt; Real &gt; &gt;</type>
      <name>getSecant</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a795416f5d021e2cd3ddca8343646ee27</anchor>
      <arglist>(ESecant esec=SECANT_LBFGS, int L=10, int BBtype=1)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Secant&lt; Real &gt; &gt;</type>
      <name>SecantFactory</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab50bf6927b737fd79badaf232e175417</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_SecantStep.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/</path>
    <filename>ROL__SecantStep_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Step_8hpp" name="ROL_Step.hpp" local="yes" imported="no">ROL_Step.hpp</includes>
    <includes id="ROL__Secant_8hpp" name="ROL_Secant.hpp" local="yes" imported="no">ROL_Secant.hpp</includes>
    <class kind="class">ROL::SecantStep</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_SimpleEqConstrained.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__SimpleEqConstrained_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__EqualityConstraint_8hpp" name="ROL_EqualityConstraint.hpp" local="yes" imported="no">ROL_EqualityConstraint.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_SimpleEqConstrained</class>
    <class kind="class">ROL::ZOO::EqualityConstraint_SimpleEqConstrained</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="function">
      <type>void</type>
      <name>getSimpleEqConstrained</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>ab96e1aa3531a1c3265cd007179743451</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;constr, Vector&lt; Real &gt; &amp;x0, Vector&lt; Real &gt; &amp;sol)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_SimulatedEqualityConstraint.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__SimulatedEqualityConstraint_8hpp</filename>
    <includes id="ROL__SimulatedVector_8hpp" name="ROL_SimulatedVector.hpp" local="yes" imported="no">ROL_SimulatedVector.hpp</includes>
    <includes id="ROL__RiskVector_8hpp" name="ROL_RiskVector.hpp" local="yes" imported="no">ROL_RiskVector.hpp</includes>
    <includes id="ROL__ParametrizedEqualityConstraint__SimOpt_8hpp" name="ROL_ParametrizedEqualityConstraint_SimOpt.hpp" local="yes" imported="no">ROL_ParametrizedEqualityConstraint_SimOpt.hpp</includes>
    <class kind="class">ROL::SimulatedEqualityConstraint</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_SimulatedObjective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__SimulatedObjective_8hpp</filename>
    <includes id="ROL__SimulatedVector_8hpp" name="ROL_SimulatedVector.hpp" local="yes" imported="no">ROL_SimulatedVector.hpp</includes>
    <includes id="ROL__ParametrizedObjective__SimOpt_8hpp" name="ROL_ParametrizedObjective_SimOpt.hpp" local="yes" imported="no">ROL_ParametrizedObjective_SimOpt.hpp</includes>
    <class kind="class">ROL::SimulatedObjective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_SimulatedObjectiveCVaR.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/</path>
    <filename>ROL__SimulatedObjectiveCVaR_8hpp</filename>
    <includes id="ROL__SimulatedVector_8hpp" name="ROL_SimulatedVector.hpp" local="yes" imported="no">ROL_SimulatedVector.hpp</includes>
    <includes id="ROL__PlusFunction_8hpp" name="ROL_PlusFunction.hpp" local="yes" imported="no">ROL_PlusFunction.hpp</includes>
    <includes id="ROL__RiskVector_8hpp" name="ROL_RiskVector.hpp" local="yes" imported="no">ROL_RiskVector.hpp</includes>
    <includes id="ROL__ParametrizedObjective__SimOpt_8hpp" name="ROL_ParametrizedObjective_SimOpt.hpp" local="yes" imported="no">ROL_ParametrizedObjective_SimOpt.hpp</includes>
    <class kind="class">ROL::SimulatedObjectiveCVaR</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_SimulatedVector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/vector/</path>
    <filename>ROL__SimulatedVector_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__BatchManager_8hpp" name="ROL_BatchManager.hpp" local="yes" imported="no">ROL_BatchManager.hpp</includes>
    <class kind="class">ROL::SimulatedVector</class>
    <namespace>ROL</namespace>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>CreateSimulatedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a53b612954e550d93342b6df073a82c46</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>CreateSimulatedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>af4c3ea94adf17fbf70c5e4d12f8fabae</anchor>
      <arglist>(const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>CreateSimulatedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>af98bb6335b7686447e5b12d861abcdd5</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>CreateSimulatedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ace4973e0b364f62ffaf8426095f47755</anchor>
      <arglist>(const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>CreateSimulatedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a570999eaa67739f4a4aab528aa59aaed</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;c, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>CreateSimulatedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a65448ea17d83e7ca503391bd32b41755</anchor>
      <arglist>(const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;c, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>CreateSimulatedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>afd1a3a7d1654fe6e41f5e847a6275b05</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;c, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;d, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>CreateSimulatedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>adcf1a04d79c03f166c8c95078687b1e6</anchor>
      <arglist>(const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;c, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;d, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_SingletonKusuoka.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/</path>
    <filename>ROL__SingletonKusuoka_8hpp</filename>
    <includes id="ROL__MixedQuantileQuadrangle_8hpp" name="ROL_MixedQuantileQuadrangle.hpp" local="yes" imported="no">ROL_MixedQuantileQuadrangle.hpp</includes>
    <includes id="ROL__DistributionFactory_8hpp" name="ROL_DistributionFactory.hpp" local="yes" imported="no">ROL_DistributionFactory.hpp</includes>
    <class kind="class">ROL::SingletonKusuoka</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Smale.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/distribution/</path>
    <filename>ROL__Smale_8hpp</filename>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <class kind="class">ROL::Smale</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_SmoothedWorstCaseQuadrangle.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/quadrangle/</path>
    <filename>ROL__SmoothedWorstCaseQuadrangle_8hpp</filename>
    <includes id="ROL__ExpectationQuad_8hpp" name="ROL_ExpectationQuad.hpp" local="yes" imported="no">ROL_ExpectationQuad.hpp</includes>
    <class kind="class">ROL::SmoothedWorstCaseQuadrangle</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_SROMGenerator.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/sampler/</path>
    <filename>ROL__SROMGenerator_8hpp</filename>
    <includes id="ROL__SampleGenerator_8hpp" name="ROL_SampleGenerator.hpp" local="yes" imported="no">ROL_SampleGenerator.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__ScalarLinearEqualityConstraint_8hpp" name="ROL_ScalarLinearEqualityConstraint.hpp" local="yes" imported="no">ROL_ScalarLinearEqualityConstraint.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__MomentObjective_8hpp" name="ROL_MomentObjective.hpp" local="yes" imported="no">ROL_MomentObjective.hpp</includes>
    <includes id="ROL__CDFObjective_8hpp" name="ROL_CDFObjective.hpp" local="yes" imported="no">ROL_CDFObjective.hpp</includes>
    <includes id="ROL__LinearCombinationObjective_8hpp" name="ROL_LinearCombinationObjective.hpp" local="yes" imported="no">ROL_LinearCombinationObjective.hpp</includes>
    <includes id="ROL__SROMVector_8hpp" name="ROL_SROMVector.hpp" local="yes" imported="no">ROL_SROMVector.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <class kind="class">ROL::SROMGenerator</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_SROMVector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/sampler/SROM/</path>
    <filename>ROL__SROMVector_8hpp</filename>
    <includes id="ROL__ProbabilityVector_8hpp" name="ROL_ProbabilityVector.hpp" local="yes" imported="no">ROL_ProbabilityVector.hpp</includes>
    <includes id="ROL__AtomVector_8hpp" name="ROL_AtomVector.hpp" local="yes" imported="no">ROL_AtomVector.hpp</includes>
    <class kind="class">ROL::SROMVector</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_StatusTest.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/status/</path>
    <filename>ROL__StatusTest_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::StatusTest</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_StatusTestFactory.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/status/</path>
    <filename>ROL__StatusTestFactory_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__StatusTest_8hpp" name="ROL_StatusTest.hpp" local="yes" imported="no">ROL_StatusTest.hpp</includes>
    <includes id="ROL__BundleStatusTest_8hpp" name="ROL_BundleStatusTest.hpp" local="yes" imported="no">ROL_BundleStatusTest.hpp</includes>
    <includes id="ROL__ConstraintStatusTest_8hpp" name="ROL_ConstraintStatusTest.hpp" local="yes" imported="no">ROL_ConstraintStatusTest.hpp</includes>
    <class kind="class">ROL::StatusTestFactory</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_StdBoundConstraint.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__StdBoundConstraint_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <class kind="class">ROL::StdBoundConstraint</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_StdObjective.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__StdObjective_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <class kind="class">ROL::StdObjective</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_StdTeuchosBatchManager.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/sampler/</path>
    <filename>ROL__StdTeuchosBatchManager_8hpp</filename>
    <includes id="ROL__TeuchosBatchManager_8hpp" name="ROL_TeuchosBatchManager.hpp" local="yes" imported="no">ROL_TeuchosBatchManager.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <class kind="class">ROL::StdTeuchosBatchManager</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_StdVector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/vector/</path>
    <filename>ROL__StdVector_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <class kind="class">ROL::StdVector</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Step.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/</path>
    <filename>ROL__Step_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__EqualityConstraint_8hpp" name="ROL_EqualityConstraint.hpp" local="yes" imported="no">ROL_EqualityConstraint.hpp</includes>
    <includes id="ROL__OptimizationProblem_8hpp" name="ROL_OptimizationProblem.hpp" local="yes" imported="no">ROL_OptimizationProblem.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">ROL::Algorithm</class>
    <class kind="class">ROL::Step</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_StepFactory.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/</path>
    <filename>ROL__StepFactory_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Step_8hpp" name="ROL_Step.hpp" local="yes" imported="no">ROL_Step.hpp</includes>
    <includes id="ROL__LineSearchStep_8hpp" name="ROL_LineSearchStep.hpp" local="yes" imported="no">ROL_LineSearchStep.hpp</includes>
    <includes id="ROL__TrustRegionStep_8hpp" name="ROL_TrustRegionStep.hpp" local="yes" imported="no">ROL_TrustRegionStep.hpp</includes>
    <includes id="ROL__PrimalDualActiveSetStep_8hpp" name="ROL_PrimalDualActiveSetStep.hpp" local="yes" imported="no">ROL_PrimalDualActiveSetStep.hpp</includes>
    <includes id="ROL__CompositeStep_8hpp" name="ROL_CompositeStep.hpp" local="yes" imported="no">ROL_CompositeStep.hpp</includes>
    <includes id="ROL__AugmentedLagrangianStep_8hpp" name="ROL_AugmentedLagrangianStep.hpp" local="yes" imported="no">ROL_AugmentedLagrangianStep.hpp</includes>
    <includes id="ROL__MoreauYosidaPenaltyStep_8hpp" name="ROL_MoreauYosidaPenaltyStep.hpp" local="yes" imported="no">ROL_MoreauYosidaPenaltyStep.hpp</includes>
    <includes id="ROL__BundleStep_8hpp" name="ROL_BundleStep.hpp" local="yes" imported="no">ROL_BundleStep.hpp</includes>
    <includes id="ROL__InteriorPointStep_8hpp" name="ROL_InteriorPointStep.hpp" local="yes" imported="no">ROL_InteriorPointStep.hpp</includes>
    <class kind="class">ROL::StepFactory</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_StochasticProblem.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/algorithm/</path>
    <filename>ROL__StochasticProblem_8hpp</filename>
    <includes id="ROL__OptimizationProblem_8hpp" name="ROL_OptimizationProblem.hpp" local="yes" imported="no">ROL_OptimizationProblem.hpp</includes>
    <includes id="ROL__SampleGenerator_8hpp" name="ROL_SampleGenerator.hpp" local="yes" imported="no">ROL_SampleGenerator.hpp</includes>
    <includes id="ROL__RiskNeutralObjective_8hpp" name="ROL_RiskNeutralObjective.hpp" local="yes" imported="no">ROL_RiskNeutralObjective.hpp</includes>
    <includes id="ROL__RiskAverseObjective_8hpp" name="ROL_RiskAverseObjective.hpp" local="yes" imported="no">ROL_RiskAverseObjective.hpp</includes>
    <includes id="ROL__RiskVector_8hpp" name="ROL_RiskVector.hpp" local="yes" imported="no">ROL_RiskVector.hpp</includes>
    <includes id="ROL__RiskBoundConstraint_8hpp" name="ROL_RiskBoundConstraint.hpp" local="yes" imported="no">ROL_RiskBoundConstraint.hpp</includes>
    <includes id="ROL__BPOEObjective_8hpp" name="ROL_BPOEObjective.hpp" local="yes" imported="no">ROL_BPOEObjective.hpp</includes>
    <class kind="class">ROL::StochasticProblem</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_SumOfSquares.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__SumOfSquares_8hpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_SumOfSquares</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROL_SUMOFSQUARES_HPP</name>
      <anchorfile>ROL__SumOfSquares_8hpp.html</anchorfile>
      <anchor>a9b9f4d466606c05a64be92239fe30f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSumOfSquares</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a92c497662d3dc98694c2b49585db219e</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_SuperQuantileQuadrangle.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/quadrangle/</path>
    <filename>ROL__SuperQuantileQuadrangle_8hpp</filename>
    <includes id="ROL__SingletonKusuoka_8hpp" name="ROL_SingletonKusuoka.hpp" local="yes" imported="no">ROL_SingletonKusuoka.hpp</includes>
    <class kind="class">ROL::SuperQuantileQuadrangle</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_TestObjectives.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__TestObjectives_8hpp</filename>
    <includes id="ROL__Rosenbrock_8hpp" name="ROL_Rosenbrock.hpp" local="yes" imported="no">ROL_Rosenbrock.hpp</includes>
    <includes id="ROL__FreudensteinRoth_8hpp" name="ROL_FreudensteinRoth.hpp" local="yes" imported="no">ROL_FreudensteinRoth.hpp</includes>
    <includes id="ROL__Beale_8hpp" name="ROL_Beale.hpp" local="yes" imported="no">ROL_Beale.hpp</includes>
    <includes id="ROL__Powell_8hpp" name="ROL_Powell.hpp" local="yes" imported="no">ROL_Powell.hpp</includes>
    <includes id="ROL__SumOfSquares_8hpp" name="ROL_SumOfSquares.hpp" local="yes" imported="no">ROL_SumOfSquares.hpp</includes>
    <includes id="ROL__LeastSquares_8hpp" name="ROL_LeastSquares.hpp" local="yes" imported="no">ROL_LeastSquares.hpp</includes>
    <includes id="ROL__PoissonControl_8hpp" name="ROL_PoissonControl.hpp" local="yes" imported="no">ROL_PoissonControl.hpp</includes>
    <includes id="ROL__PoissonInversion_8hpp" name="ROL_PoissonInversion.hpp" local="yes" imported="no">ROL_PoissonInversion.hpp</includes>
    <includes id="ROL__Zakharov_8hpp" name="ROL_Zakharov.hpp" local="yes" imported="no">ROL_Zakharov.hpp</includes>
    <includes id="ROL__HS1_8hpp" name="ROL_HS1.hpp" local="yes" imported="no">ROL_HS1.hpp</includes>
    <includes id="ROL__HS2_8hpp" name="ROL_HS2.hpp" local="yes" imported="no">ROL_HS2.hpp</includes>
    <includes id="ROL__HS3_8hpp" name="ROL_HS3.hpp" local="yes" imported="no">ROL_HS3.hpp</includes>
    <includes id="ROL__HS4_8hpp" name="ROL_HS4.hpp" local="yes" imported="no">ROL_HS4.hpp</includes>
    <includes id="ROL__HS5_8hpp" name="ROL_HS5.hpp" local="yes" imported="no">ROL_HS5.hpp</includes>
    <includes id="ROL__HS25_8hpp" name="ROL_HS25.hpp" local="yes" imported="no">ROL_HS25.hpp</includes>
    <includes id="ROL__HS38_8hpp" name="ROL_HS38.hpp" local="yes" imported="no">ROL_HS38.hpp</includes>
    <includes id="ROL__HS45_8hpp" name="ROL_HS45.hpp" local="yes" imported="no">ROL_HS45.hpp</includes>
    <includes id="ROL__BVP_8hpp" name="ROL_BVP.hpp" local="yes" imported="no">ROL_BVP.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <namespace>ROL</namespace>
    <member kind="function">
      <type>void</type>
      <name>getTestObjectives</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4a38a89725f26cccf42d00424c885767</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x, const ETestObjectives test)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTestObjectives</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac7a258a1ac755044d54c5cdf97657db6</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x, const ETestOptProblem test)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_TeuchosBatchManager.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/sampler/</path>
    <filename>ROL__TeuchosBatchManager_8hpp</filename>
    <includes id="ROL__BatchManager_8hpp" name="ROL_BatchManager.hpp" local="yes" imported="no">ROL_BatchManager.hpp</includes>
    <class kind="class">ROL::TeuchosBatchManager</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Triangle.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/distribution/</path>
    <filename>ROL__Triangle_8hpp</filename>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <class kind="class">ROL::Triangle</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_TruncatedCG.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/trustregion/</path>
    <filename>ROL__TruncatedCG_8hpp</filename>
    <includes id="ROL__TrustRegion_8hpp" name="ROL_TrustRegion.hpp" local="yes" imported="no">ROL_TrustRegion.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__HelperFunctions_8hpp" name="ROL_HelperFunctions.hpp" local="yes" imported="no">ROL_HelperFunctions.hpp</includes>
    <class kind="class">ROL::TruncatedCG</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_TruncatedExponential.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/distribution/</path>
    <filename>ROL__TruncatedExponential_8hpp</filename>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <class kind="class">ROL::TruncatedExponential</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_TruncatedGaussian.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/distribution/</path>
    <filename>ROL__TruncatedGaussian_8hpp</filename>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <includes id="ROL__Gaussian_8hpp" name="ROL_Gaussian.hpp" local="yes" imported="no">ROL_Gaussian.hpp</includes>
    <class kind="class">ROL::TruncatedGaussian</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_TruncatedMeanQuadrangle.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/riskmeasure/quadrangle/</path>
    <filename>ROL__TruncatedMeanQuadrangle_8hpp</filename>
    <includes id="ROL__ExpectationQuad_8hpp" name="ROL_ExpectationQuad.hpp" local="yes" imported="no">ROL_ExpectationQuad.hpp</includes>
    <class kind="class">ROL::TruncatedMeanQuadrangle</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_TrustRegion.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/trustregion/</path>
    <filename>ROL__TrustRegion_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__HelperFunctions_8hpp" name="ROL_HelperFunctions.hpp" local="yes" imported="no">ROL_HelperFunctions.hpp</includes>
    <includes id="ROL__TrustRegionFactory_8hpp" name="ROL_TrustRegionFactory.hpp" local="yes" imported="no">ROL_TrustRegionFactory.hpp</includes>
    <class kind="class">ROL::TrustRegion</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_TrustRegionFactory.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/trustregion/</path>
    <filename>ROL__TrustRegionFactory_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__TrustRegion_8hpp" name="ROL_TrustRegion.hpp" local="yes" imported="no">ROL_TrustRegion.hpp</includes>
    <includes id="ROL__CauchyPoint_8hpp" name="ROL_CauchyPoint.hpp" local="yes" imported="no">ROL_CauchyPoint.hpp</includes>
    <includes id="ROL__DogLeg_8hpp" name="ROL_DogLeg.hpp" local="yes" imported="no">ROL_DogLeg.hpp</includes>
    <includes id="ROL__DoubleDogLeg_8hpp" name="ROL_DoubleDogLeg.hpp" local="yes" imported="no">ROL_DoubleDogLeg.hpp</includes>
    <includes id="ROL__TruncatedCG_8hpp" name="ROL_TruncatedCG.hpp" local="yes" imported="no">ROL_TruncatedCG.hpp</includes>
    <namespace>ROL</namespace>
    <member kind="function">
      <type>Teuchos::RCP&lt; TrustRegion&lt; Real &gt; &gt;</type>
      <name>TrustRegionFactory</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a446b536ecd1b4e1f47b326c42ab581a8</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_TrustRegionStep.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/step/</path>
    <filename>ROL__TrustRegionStep_8hpp</filename>
    <includes id="ROL__Step_8hpp" name="ROL_Step.hpp" local="yes" imported="no">ROL_Step.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Secant_8hpp" name="ROL_Secant.hpp" local="yes" imported="no">ROL_Secant.hpp</includes>
    <includes id="ROL__TrustRegion_8hpp" name="ROL_TrustRegion.hpp" local="yes" imported="no">ROL_TrustRegion.hpp</includes>
    <class kind="class">ROL::TrustRegionStep</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Types.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__Types_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="no" imported="no">ROL_Vector.hpp</includes>
    <class kind="struct">ROL::AlgorithmState</class>
    <class kind="struct">ROL::StepState</class>
    <class kind="struct">ROL::removeSpecialCharacters</class>
    <class kind="struct">ROL::TypeCaster</class>
    <class kind="struct">ROL::TypeCaster&lt; Real, std::complex&lt; Real &gt; &gt;</class>
    <class kind="struct">ROL::TypeCaster&lt; double, float &gt;</class>
    <class kind="class">ROL::Exception::NotImplemented</class>
    <namespace>ROL</namespace>
    <namespace>ROL::Finite_Difference_Arrays</namespace>
    <namespace>ROL::Exception</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROL_VALIDATE</name>
      <anchorfile>ROL__Types_8hpp.html</anchorfile>
      <anchor>ac3fc595031fa31490ce4cf339518a60c</anchor>
      <arglist>(A)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROL_NUM_CHECKDERIV_STEPS</name>
      <anchorfile>ROL__Types_8hpp.html</anchorfile>
      <anchor>a5467e8be20bc0b7ab893e36fc8b055ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EStep</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_AUGMENTEDLAGRANGIAN</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123eba748d4eef76821dbafdcf66c81b16787b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_BUNDLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123eba56220ce0bd3140b912f1d63ceb04469e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_COMPOSITESTEP</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123eba7e219e09fa60f4e8073885ab8ada6caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_LINESEARCH</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123eba7555c81cf20a122f247d6c04bd1b8d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_MOREAUYOSIDAPENALTY</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123ebae044f59e48f92f546438334eacd4ec83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_PRIMALDUALACTIVESET</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123eba0e5f09ab677d4731d367ebf1ef6fb3e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_TRUSTREGION</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123ebaf97b4f8b124b21410712e4e884bfee86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_INTERIORPOINT</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123ebaa097411135dbab739f7261fcd6e4436b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123eba402149c150d35e9ff37b338dcf26250f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EBoundAlgorithm</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a665e14102bc5a5311ac561254fdd56fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUNDALGORITHM_PROJECTED</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a665e14102bc5a5311ac561254fdd56fea7113c07b2f35112e86346e793ef9ec85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUNDALGORITHM_PRIMALDUALACTIVESET</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a665e14102bc5a5311ac561254fdd56fea8c392d2c2266bc43d5c831813b27571b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUNDALGORITHM_INTERIORPOINTS</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a665e14102bc5a5311ac561254fdd56fea5b6ec9c15a8a2c5671ca3c8e538397df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUNDALGORITHM_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a665e14102bc5a5311ac561254fdd56fea1390b8f54e4804b817e6ae57dd82dfb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EDescent</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a52eb01de314ff83fa642ec78ba889049</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DESCENT_STEEPEST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a52eb01de314ff83fa642ec78ba889049aa19eed900d2dbd86741440416d32e8af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DESCENT_NONLINEARCG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a52eb01de314ff83fa642ec78ba889049aa5e35a50a821c7e5097be007343cdff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DESCENT_SECANT</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a52eb01de314ff83fa642ec78ba889049a2c9447dacd878b80b577746e641d2608</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DESCENT_NEWTON</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a52eb01de314ff83fa642ec78ba889049ae14dd487c2c5fc70349a5d1696d0c751</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DESCENT_NEWTONKRYLOV</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a52eb01de314ff83fa642ec78ba889049a121657bd454d6d7a485fad2ea0dfb86e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DESCENT_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a52eb01de314ff83fa642ec78ba889049a35c6ee90b7d4a95df06d9f956328e8be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ESecant</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5e778633e204e2268adc3b2dc8babe6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SECANT_LBFGS</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5e778633e204e2268adc3b2dc8babe6bad4dafaf72aaa91cbd1b01cadb715721d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SECANT_LDFP</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5e778633e204e2268adc3b2dc8babe6bab1bd486e01999dc8093f82667c3d7bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SECANT_LSR1</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5e778633e204e2268adc3b2dc8babe6ba0f1bd4484992339e2fa3f2da5d1f919a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SECANT_BARZILAIBORWEIN</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5e778633e204e2268adc3b2dc8babe6bafe8ac339799d93adf96677d8cbb7aec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SECANT_USERDEFINED</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5e778633e204e2268adc3b2dc8babe6ba81758750181dbdbae7275f5f3b9d0d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SECANT_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5e778633e204e2268adc3b2dc8babe6ba4cec8b6f31ee174101aa89f4dfe1b456</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EKrylov</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a888a8924d1738a33b69b6c3f23382f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KRYLOV_CG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a888a8924d1738a33b69b6c3f23382f5bafde056c371c26878b1a239c8d10d4924</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KRYLOV_CR</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a888a8924d1738a33b69b6c3f23382f5ba5db54e4f76d8fec76f4e7946b6ddd1b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KRYLOV_GMRES</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a888a8924d1738a33b69b6c3f23382f5ba261929392fc0a22fb7b3bac5837fb847</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KRYLOV_USERDEFINED</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a888a8924d1738a33b69b6c3f23382f5bab710ad626fd790f817583a5e0eea2fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KRYLOV_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a888a8924d1738a33b69b6c3f23382f5bae0132473d63d4ee9971cbac7b34c0097</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ENonlinearCG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_HESTENES_STIEFEL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752a7410a5c7a9a309afba364d92f8e24126</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_FLETCHER_REEVES</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752aa413583e4bc65c2fc4aa9bbc2b99f548</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_DANIEL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752a94db1f354f40c1b460c4cc803736c089</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_POLAK_RIBIERE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752a402f3776be446fef71a8031724a0b09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_FLETCHER_CONJDESC</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752ad977536f7895d48060843c4c43593111</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_LIU_STOREY</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752acd67a4c9e3fc4b66fcc0dfeb70407c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_DAI_YUAN</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752a790dee5ce9ac0a5dac4c53c47f95bad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_HAGER_ZHANG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752aaf3bd1e424a0adde358edb01359402fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_OREN_LUENBERGER</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752a7c4efe9b67c3f50a3c3fe55d7be69ea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_USERDEFINED</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752add043ebb33d929c41cf03fe6737bcbb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752a6bae59ebcebc2446945af58a9acde1e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ELineSearch</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINESEARCH_ITERATIONSCALING</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64aadfea73fd39754e9aac5c9fc1c90ecfe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINESEARCH_PATHBASEDTARGETLEVEL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64aa90e256e4de359800082ca57113bb66f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINESEARCH_BACKTRACKING</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64aa20d3624c104f62b8cebf99598542fccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINESEARCH_BISECTION</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64aa0f52739fc41b5f86fe339aa345d49a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINESEARCH_GOLDENSECTION</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64aa90b18a88cfe7c0af73e32411f8ec53e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINESEARCH_CUBICINTERP</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64aa5c4537ba5e435cd6e6158728ccc5d0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINESEARCH_BRENTS</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64aa8111cdb347985ffc9802b898278d892b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINESEARCH_USERDEFINED</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64aa623979d15d545f52ea24d1aaa2299e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINESEARCH_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64aa039c443d4ba4784da10ea43e556235c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ECurvatureCondition</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a55915452a678e4bde9969533bd645892</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CURVATURECONDITION_WOLFE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a55915452a678e4bde9969533bd645892a9065f4f32e16d200c09af9f7a0ac430c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CURVATURECONDITION_STRONGWOLFE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a55915452a678e4bde9969533bd645892ac3b9ecd43463e3c6a9d600a19c8b23fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CURVATURECONDITION_GENERALIZEDWOLFE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a55915452a678e4bde9969533bd645892a21192b1cc92ac890e7b111130d5cf6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CURVATURECONDITION_APPROXIMATEWOLFE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a55915452a678e4bde9969533bd645892a6d21f13764e9e40541403d4c6f871391</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CURVATURECONDITION_GOLDSTEIN</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a55915452a678e4bde9969533bd645892aee021a1865913003dbf179fc8cc63390</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CURVATURECONDITION_NULL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a55915452a678e4bde9969533bd645892aae3ac34e2cef05c41e2649fa7463e1c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CURVATURECONDITION_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a55915452a678e4bde9969533bd645892a3d27ed8bd00c503bde491c0e4d6a34ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ETrustRegion</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>add2e5c3d11354e548ca67cb049d682d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_CAUCHYPOINT</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>add2e5c3d11354e548ca67cb049d682d8abcc906fb7aa126d422bcc5a4ca809eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_TRUNCATEDCG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>add2e5c3d11354e548ca67cb049d682d8adec9489f221db2f45bcf2e1069f3badf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_DOGLEG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>add2e5c3d11354e548ca67cb049d682d8a515328269a4bbf7da3d841af5d47850c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_DOUBLEDOGLEG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>add2e5c3d11354e548ca67cb049d682d8ab24d71fec9a74423810b67fa4770444d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>add2e5c3d11354e548ca67cb049d682d8a05db0192640b986e1d018575d88d070f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ETrustRegionFlag</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3fdeb638bd18396322344addb2337e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_FLAG_SUCCESS</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3fdeb638bd18396322344addb2337e6af37a9054ce965a587c148da41c35849a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_FLAG_POSPREDNEG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3fdeb638bd18396322344addb2337e6a3bf991cf7d894a980032f2eefd2c73d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_FLAG_NPOSPREDPOS</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3fdeb638bd18396322344addb2337e6ad0ccd4b1e7a695128f2450352fcbeac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_FLAG_NPOSPREDNEG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3fdeb638bd18396322344addb2337e6a48c53ed2a95b5846aa56890a8c353a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_FLAG_QMINSUFDEC</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3fdeb638bd18396322344addb2337e6aa2e04d401cefc8d8f2577970111cd486</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_FLAG_NAN</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3fdeb638bd18396322344addb2337e6a1a02d2154e502bae295a76860f70e7f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_FLAG_UNDEFINED</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3fdeb638bd18396322344addb2337e6a4d54a2208e580036786a068f16f39036</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ECGFlag</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a80bbf6d56d6c5927d0e18ec6af5f8004</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CG_FLAG_SUCCESS</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a80bbf6d56d6c5927d0e18ec6af5f8004a917075a34024be2f8714875daa58b937</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CG_FLAG_ITEREXCEED</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a80bbf6d56d6c5927d0e18ec6af5f8004a0aad1e58a1593618745d0c07e7199ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CG_FLAG_NEGCURVE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a80bbf6d56d6c5927d0e18ec6af5f8004abcbf5577c470d0ee39d5f6fbb53f1944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CG_FLAG_TRRADEX</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a80bbf6d56d6c5927d0e18ec6af5f8004adfc0fd663a7876c7008057b7381a2a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CG_FLAG_UNDEFINED</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a80bbf6d56d6c5927d0e18ec6af5f8004a77155edf22d4c8047f3cdecaedcb8f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ETestObjectives</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_ROSENBROCK</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458a8d01929cb1268c8d7c40c3f5c3a7c7da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_FREUDENSTEINANDROTH</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458a879c84f3d270822d4db977a8dcce6ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_BEALE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458afeb5366a4a02535a4b8359ded4431831</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_POWELL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458a3eb2b24c3228ea7d037d3963882ce8d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_SUMOFSQUARES</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458a3fd33a02941cd4edd12890bc4594cc57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_LEASTSQUARES</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458a4bde1df6a418ae35b4147e5d9ef52661</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_POISSONCONTROL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458a25544d45405ec36b19b6621fcfd293a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_POISSONINVERSION</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458a16961c0bac13291c7c25758ecbcf6b40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_ZAKHAROV</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458a31edad868d080bc46495bd2ec387b10f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458a4db7eed0191f96bff63293a90a849344</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ETestOptProblem</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_HS1</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47a157e9a897e1073a11f15247b927abab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_HS2</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47a322ee700cc10604c890071b81fc962ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_HS3</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47a52e26fce384833bd5712f6fa69ca550b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_HS4</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47a9ad3eabb8beb0735a0f7d4a7bdebdcb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_HS5</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47a49f6a3a3ec6dccaacb8e2625bf30285a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_HS25</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47a3df9078c62bd1964d2fa85abc50b4dc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_HS38</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47adc0395b9e15e410373d61d13aae62830</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_HS45</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47ade87c4a42291d7e211e858cefdd14192</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_BVP</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47a8e149a8d458cd8b794d75f012bd2c38e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47a59e3487f07833fbc42f62ee85b867dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EConstraint</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab3b3414b98866106e079d41eb519cec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTRAINT_EQUALITY</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab3b3414b98866106e079d41eb519cec4a48755d08d993c66453dc8027e0717ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTRAINT_INEQUALITY</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab3b3414b98866106e079d41eb519cec4a700938bf1b8f9888d0dcbadc617649ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTRAINT_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab3b3414b98866106e079d41eb519cec4a6f6af079f9c6c52a8a5bd0e1d41a4bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>NumberToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a235ef4cbe875aa9cf50775a3f3dc526d</anchor>
      <arglist>(T Number)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>ROL_EPSILON</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a45e9b5eea97eec9d4af1b76141f331db</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>ROL_THRESHOLD</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aee9d620749a7ddc9fc740e6c857083e7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>ROL_OVERFLOW</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8f94b74f5e2292ab41c66a2c0e515c34</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>ROL_INF</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad5d1a45f51e1e29a34368fea5e0a7476</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>ROL_NINF</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3c4a092838aa073ef53f433ade875ab</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>ROL_UNDERFLOW</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aebaab26603b2cc156df880392af8effe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>removeStringFormat</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a382f23a5dc1b473769f467f943128601</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>EStepToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a049ae93a393eb6306387b488af36bf99</anchor>
      <arglist>(EStep tr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidStep</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a2d79198bc43f010fa4ed60ba283274f9</anchor>
      <arglist>(EStep ls)</arglist>
    </member>
    <member kind="function">
      <type>EStep &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6ddbea93b9f2411077d77fecb1d0d220</anchor>
      <arglist>(EStep &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EStep</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a883af171d73e079eb21a85e99c68466f</anchor>
      <arglist>(EStep &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EStep &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad06a022c24055d5ddc06b8b44dc5952d</anchor>
      <arglist>(EStep &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EStep</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a39912b46b056cf3a9d2b93a067d7f68c</anchor>
      <arglist>(EStep &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EStep</type>
      <name>StringToEStep</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae8f228ee0af1453012fa292ca03066a8</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>EBoundAlgorithmToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a21a3a2a132664f4c49e8831b325b6356</anchor>
      <arglist>(EBoundAlgorithm tr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidBoundAlgorithm</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a882eaad478a7703d01e889f095ec1646</anchor>
      <arglist>(EBoundAlgorithm d)</arglist>
    </member>
    <member kind="function">
      <type>EBoundAlgorithm &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a36b8a227924cf8ece4bf9c2b3a565856</anchor>
      <arglist>(EBoundAlgorithm &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EBoundAlgorithm</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>af50f1dc16e57010965fb0337f685dd1d</anchor>
      <arglist>(EBoundAlgorithm &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EBoundAlgorithm &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a90933fc0dd0b4c8fda7dee039301c69b</anchor>
      <arglist>(EBoundAlgorithm &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EBoundAlgorithm</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa70cd51c8e7d461ce09f92de25242b61</anchor>
      <arglist>(EBoundAlgorithm &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EBoundAlgorithm</type>
      <name>StringToEBoundAlgorithm</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a44332378e9757493324fb204fdf6cce2</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>EDescentToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5ee1462f969e3efca3859caba732eb97</anchor>
      <arglist>(EDescent tr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidDescent</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a11ae7fee16ad007829a8089edd742db1</anchor>
      <arglist>(EDescent d)</arglist>
    </member>
    <member kind="function">
      <type>EDescent &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aba55d65d49ed75a0a1928c4634b2992e</anchor>
      <arglist>(EDescent &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EDescent</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aacd151cfc9be90255e27e38173ec4aac</anchor>
      <arglist>(EDescent &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EDescent &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>af3a5c11ed4565985c18331d295553a36</anchor>
      <arglist>(EDescent &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EDescent</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4191e2bf0c5ebc659d57a21696812d70</anchor>
      <arglist>(EDescent &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EDescent</type>
      <name>StringToEDescent</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a123cc0305aac71ab1a919cb37e90af1e</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ESecantToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aafb9439cbac248a2ed408e3326acbc35</anchor>
      <arglist>(ESecant tr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidSecant</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>afbf29e3e6ecc86d39c8dcbc3ee96daba</anchor>
      <arglist>(ESecant s)</arglist>
    </member>
    <member kind="function">
      <type>ESecant &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4218c724b24501a9f9b6a60616444865</anchor>
      <arglist>(ESecant &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ESecant</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4bf180a54e92cd5bc6466fccfd6c37b2</anchor>
      <arglist>(ESecant &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ESecant &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a486b3bdc49d7ec996511c4929eb334d4</anchor>
      <arglist>(ESecant &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ESecant</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a4d39d5b119a2f77c3056371baea759</anchor>
      <arglist>(ESecant &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ESecant</type>
      <name>StringToESecant</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5c3acdc1ee862dc74ffe360d66004187</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>EKrylovToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a701532eb75c3b410a79ecf642f93fcd2</anchor>
      <arglist>(EKrylov tr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidKrylov</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a1c9c84dc34a73b48c0e3b08e1d937557</anchor>
      <arglist>(EKrylov d)</arglist>
    </member>
    <member kind="function">
      <type>EKrylov &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a155a0868d4b3b9a4fca9149524faf3af</anchor>
      <arglist>(EKrylov &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EKrylov</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a3f8b464db8c81109a8be7243146effa7</anchor>
      <arglist>(EKrylov &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EKrylov &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a54c490fc1c590a951065582358facbc7</anchor>
      <arglist>(EKrylov &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EKrylov</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a1fccc51244e5a0e9b03dd09f2a45d7c4</anchor>
      <arglist>(EKrylov &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EKrylov</type>
      <name>StringToEKrylov</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a07cbf7b5c5cd423383ad7713d6fbb271</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ENonlinearCGToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad5e2c0dab278309e81ab3a990d316ee2</anchor>
      <arglist>(ENonlinearCG tr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidNonlinearCG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a9444032f76a7bec521eaebc989b7adb9</anchor>
      <arglist>(ENonlinearCG s)</arglist>
    </member>
    <member kind="function">
      <type>ENonlinearCG &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a001618e8a9ec50a79abe82315034d0d5</anchor>
      <arglist>(ENonlinearCG &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ENonlinearCG</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a289402716596e18717f3ea83fb469a2f</anchor>
      <arglist>(ENonlinearCG &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ENonlinearCG &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a49170b853623137701925a08970b1d13</anchor>
      <arglist>(ENonlinearCG &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ENonlinearCG</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab6929c4c7bc601c1b4e495a214d33fe9</anchor>
      <arglist>(ENonlinearCG &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ENonlinearCG</type>
      <name>StringToENonlinearCG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a80d29f0d985357dddb247b94a78c4988</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ELineSearchToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a84207ff3db3a5048664ef0ea13e25637</anchor>
      <arglist>(ELineSearch ls)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidLineSearch</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a01d66b056b605ed90b1a6ff667077d5a</anchor>
      <arglist>(ELineSearch ls)</arglist>
    </member>
    <member kind="function">
      <type>ELineSearch &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a04c171f664350473038ee0011944ed5e</anchor>
      <arglist>(ELineSearch &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ELineSearch</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5df9f11582367c4b8bbf8e13c72fab5b</anchor>
      <arglist>(ELineSearch &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ELineSearch &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac3a6e658bfb88846105cd5d2b5173572</anchor>
      <arglist>(ELineSearch &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ELineSearch</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac2c343363ec9faf693e6111a0f605bc7</anchor>
      <arglist>(ELineSearch &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ELineSearch</type>
      <name>StringToELineSearch</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aee90e7737381ab10c8de66061db8d323</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ECurvatureConditionToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a61eefff65b69cab3b571080c0348aab5</anchor>
      <arglist>(ECurvatureCondition ls)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidCurvatureCondition</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a734c9839193e07a1c647d5131bd81811</anchor>
      <arglist>(ECurvatureCondition ls)</arglist>
    </member>
    <member kind="function">
      <type>ECurvatureCondition &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae74e803ca7e8d5c46ff5475282d0f51e</anchor>
      <arglist>(ECurvatureCondition &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ECurvatureCondition</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa5a3fa739bd36d6ca92b263e44b86292</anchor>
      <arglist>(ECurvatureCondition &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ECurvatureCondition &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa6e76e1d576e8deab7a95510625c08a9</anchor>
      <arglist>(ECurvatureCondition &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ECurvatureCondition</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8aa7650be6be132b203abd6a3b90bf20</anchor>
      <arglist>(ECurvatureCondition &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ECurvatureCondition</type>
      <name>StringToECurvatureCondition</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>af0e30b1c2b41bc783f181a77d3dded17</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ETrustRegionToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab94c324c0eb0178c72c0997ec146b2cd</anchor>
      <arglist>(ETrustRegion tr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ETrustRegionFlagToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab3f768a71397defa190e89d6195a35d0</anchor>
      <arglist>(ETrustRegionFlag trf)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ECGFlagToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad30fd1c34749622aa345dda3edeb4df4</anchor>
      <arglist>(ECGFlag cgf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidTrustRegion</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4505d9b2a522170c3abf4dd23ef7d161</anchor>
      <arglist>(ETrustRegion ls)</arglist>
    </member>
    <member kind="function">
      <type>ETrustRegion &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a02bd26917d4ff584d868277c4d13aa19</anchor>
      <arglist>(ETrustRegion &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ETrustRegion</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a53e05dc75be1a536b09551d94280d6b6</anchor>
      <arglist>(ETrustRegion &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ETrustRegion &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a71128708c3fb3e04812310b522bd3790</anchor>
      <arglist>(ETrustRegion &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ETrustRegion</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>acb2967707b7df50ff48baabee8ce94d8</anchor>
      <arglist>(ETrustRegion &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ETrustRegion</type>
      <name>StringToETrustRegion</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a768ff2511f22c3012e7244fb9f16692c</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ETestObjectivesToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a26c3073c3e583c6e62acb6abfa2bd91c</anchor>
      <arglist>(ETestObjectives to)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidTestObjectives</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5ce8e6508a96573b5ec08de4f1930bb8</anchor>
      <arglist>(ETestObjectives to)</arglist>
    </member>
    <member kind="function">
      <type>ETestObjectives &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5f9ca4834b67d36be7a0bd5a86c8a3da</anchor>
      <arglist>(ETestObjectives &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ETestObjectives</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a445038bc11769f90b4dab60c64a1d734</anchor>
      <arglist>(ETestObjectives &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ETestObjectives &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a7a5097cc02900f98256b72e6698c46e6</anchor>
      <arglist>(ETestObjectives &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ETestObjectives</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a400f732ccc801fc4b63352f23cfaa840</anchor>
      <arglist>(ETestObjectives &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ETestObjectives</type>
      <name>StringToETestObjectives</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>afe072c4c73ec170795f06bbd6d08ccf9</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ETestOptProblemToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a029e61ca6c1d0a7049714ed55ce09bc1</anchor>
      <arglist>(ETestOptProblem to)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidTestOptProblem</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a532ed492a0bb3e482cc3d58390dd8ae9</anchor>
      <arglist>(ETestOptProblem to)</arglist>
    </member>
    <member kind="function">
      <type>ETestOptProblem &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a57662133161d489c853eace208971667</anchor>
      <arglist>(ETestOptProblem &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ETestOptProblem</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a2c084d41372261459aa6c3c25ac05e1b</anchor>
      <arglist>(ETestOptProblem &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ETestOptProblem &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>afacf3abb781556d2e67265676336350f</anchor>
      <arglist>(ETestOptProblem &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ETestOptProblem</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a2f6ecd9e67d58a20fa99ec94677587ba</anchor>
      <arglist>(ETestOptProblem &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ETestOptProblem</type>
      <name>StringToETestOptProblem</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae744dfe6e92a26a5e1b9ef7874a1131c</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>EConstraintToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aaff5d8c1ed4f163934549f5a4586edfd</anchor>
      <arglist>(EConstraint c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidConstraint</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aafdcfe5f4e8baa7ed6af9e0f0aa03ef7</anchor>
      <arglist>(EConstraint c)</arglist>
    </member>
    <member kind="function">
      <type>EConstraint &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a54051929029d8e453c4cfdd7ed8f45bc</anchor>
      <arglist>(EConstraint &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EConstraint</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a56b2ed49f8db438943b4319bdf52466a</anchor>
      <arglist>(EConstraint &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EConstraint &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab77b41896cfc6b6bfd4d9894dd3f30e9</anchor>
      <arglist>(EConstraint &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EConstraint</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac26c1e7d115a2e8865a93cccd7cd2d58</anchor>
      <arglist>(EConstraint &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EConstraint</type>
      <name>StringToEConstraint</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab8afe582dc83128a397b3e5fc141fb80</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>rol_cast</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad2b17deeb2255048ae26ff5c49decf80</anchor>
      <arglist>(const Element &amp;val)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>shifts</name>
      <anchorfile>namespaceROL_1_1Finite__Difference__Arrays.html</anchorfile>
      <anchor>a26d91fcc2b987e3c8ca44154e6254d62</anchor>
      <arglist>[4][4]</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>weights</name>
      <anchorfile>namespaceROL_1_1Finite__Difference__Arrays.html</anchorfile>
      <anchor>ae20d14aebf71691013c1b446157796c3</anchor>
      <arglist>[4][5]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_Uniform.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/function/distribution/</path>
    <filename>ROL__Uniform_8hpp</filename>
    <includes id="ROL__Distribution_8hpp" name="ROL_Distribution.hpp" local="yes" imported="no">ROL_Distribution.hpp</includes>
    <class kind="class">ROL::Uniform</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_UpperBoundInequalityConstraint.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__UpperBoundInequalityConstraint_8hpp</filename>
    <includes id="ROL__InequalityConstraint_8hpp" name="ROL_InequalityConstraint.hpp" local="yes" imported="no">ROL_InequalityConstraint.hpp</includes>
    <class kind="class">ROL::UpperBoundInequalityConstraint</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_UserInputGenerator.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/sol/sampler/</path>
    <filename>ROL__UserInputGenerator_8hpp</filename>
    <includes id="ROL__SampleGenerator_8hpp" name="ROL_SampleGenerator.hpp" local="yes" imported="no">ROL_SampleGenerator.hpp</includes>
    <includes id="ROL__BatchManager_8hpp" name="ROL_BatchManager.hpp" local="yes" imported="no">ROL_BatchManager.hpp</includes>
    <class kind="class">ROL::UserInputGenerator</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Vector.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/vector/</path>
    <filename>ROL__Vector_8hpp</filename>
    <class kind="class">ROL::Vector</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_Vector_SimOpt.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/vector/</path>
    <filename>ROL__Vector__SimOpt_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <class kind="class">ROL::Vector_SimOpt</class>
    <namespace>ROL</namespace>
  </compound>
  <compound kind="file">
    <name>ROL_VectorNorms.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/function/</path>
    <filename>ROL__VectorNorms_8hpp</filename>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <namespace>ROL</namespace>
    <member kind="function">
      <type>Real</type>
      <name>normL1</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a091e77229ad4936cf8d1479d36bfa294</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>normLp</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5f0a33409d081e2a4f79058686c96c69</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Exponent p)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>normLinf</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8b245e063f9b89547d444f93ea3734f6</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ROL_Zakharov.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/src/zoo/</path>
    <filename>ROL__Zakharov_8hpp</filename>
    <includes id="ROL__Objective_8hpp" name="ROL_Objective.hpp" local="yes" imported="no">ROL_Objective.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <class kind="class">ROL::ZOO::Objective_Zakharov</class>
    <namespace>ROL</namespace>
    <namespace>ROL::ZOO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROL_ZAKHAROV_HPP</name>
      <anchorfile>ROL__Zakharov_8hpp.html</anchorfile>
      <anchor>a3ff47d5f9179eac32ba7e35452992839</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getZakharov</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a3737346ae0d69053561fb25ac76e6594</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>function/test_01.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/function/</path>
    <filename>function_2test__01_8cpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__TestObjectives_8hpp" name="ROL_TestObjectives.hpp" local="yes" imported="no">ROL_TestObjectives.hpp</includes>
    <includes id="ROL__HelperFunctions_8hpp" name="ROL_HelperFunctions.hpp" local="yes" imported="no">ROL_HelperFunctions.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>function_2test__01_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>function_2test__01_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>step/krylov/test_01.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/step/krylov/</path>
    <filename>step_2krylov_2test__01_8cpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__GMRES_8hpp" name="ROL_GMRES.hpp" local="yes" imported="no">ROL_GMRES.hpp</includes>
    <includes id="ROL__KrylovFactory_8hpp" name="ROL_KrylovFactory.hpp" local="yes" imported="no">ROL_KrylovFactory.hpp</includes>
    <includes id="ROL__RandomVector_8hpp" name="ROL_RandomVector.hpp" local="yes" imported="no">ROL_RandomVector.hpp</includes>
    <class kind="class">Identity</class>
    <class kind="class">TridiagonalToeplitzOperator</class>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>step_2krylov_2test__01_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>step_2krylov_2test__01_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>step/test_01.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/step/</path>
    <filename>step_2test__01_8cpp</filename>
    <includes id="ROL__TestObjectives_8hpp" name="ROL_TestObjectives.hpp" local="yes" imported="no">ROL_TestObjectives.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__LineSearchStep_8hpp" name="ROL_LineSearchStep.hpp" local="yes" imported="no">ROL_LineSearchStep.hpp</includes>
    <includes id="ROL__StatusTest_8hpp" name="ROL_StatusTest.hpp" local="yes" imported="no">ROL_StatusTest.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>USE_HESSVEC</name>
      <anchorfile>step_2test__01_8cpp.html</anchorfile>
      <anchor>a20e5c8c2c257a6862ccf6bce9cccc6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>step_2test__01_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>step_2test__01_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vector/test_01.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/vector/</path>
    <filename>vector_2test__01_8cpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>vector_2test__01_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>ElementT</name>
      <anchorfile>vector_2test__01_8cpp.html</anchorfile>
      <anchor>aa12aeb88656dac4985199055a00f4c92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>vector_2test__01_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>function/test_02.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/function/</path>
    <filename>function_2test__02_8cpp</filename>
    <includes id="ROL__RandomVector_8hpp" name="ROL_RandomVector.hpp" local="yes" imported="no">ROL_RandomVector.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__ObjectiveFromBoundConstraint_8hpp" name="ROL_ObjectiveFromBoundConstraint.hpp" local="yes" imported="no">ROL_ObjectiveFromBoundConstraint.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>function_2test__02_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>function_2test__02_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>step/test_02.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/step/</path>
    <filename>step_2test__02_8cpp</filename>
    <includes id="ROL__TestObjectives_8hpp" name="ROL_TestObjectives.hpp" local="yes" imported="no">ROL_TestObjectives.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>USE_HESSVEC</name>
      <anchorfile>step_2test__02_8cpp.html</anchorfile>
      <anchor>a20e5c8c2c257a6862ccf6bce9cccc6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>step_2test__02_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>step_2test__02_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vector/test_02.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/vector/</path>
    <filename>vector_2test__02_8cpp</filename>
    <includes id="ROL__CArrayVector_8hpp" name="ROL_CArrayVector.hpp" local="yes" imported="no">ROL_CArrayVector.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>vector_2test__02_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>ElementT</name>
      <anchorfile>vector_2test__02_8cpp.html</anchorfile>
      <anchor>aa12aeb88656dac4985199055a00f4c92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>vector_2test__02_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>function/test_03.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/function/</path>
    <filename>function_2test__03_8cpp</filename>
    <includes id="ROL__BlockOperator_8hpp" name="ROL_BlockOperator.hpp" local="yes" imported="no">ROL_BlockOperator.hpp</includes>
    <includes id="ROL__DiagonalOperator_8hpp" name="ROL_DiagonalOperator.hpp" local="yes" imported="no">ROL_DiagonalOperator.hpp</includes>
    <includes id="ROL__PartitionedVector_8hpp" name="ROL_PartitionedVector.hpp" local="yes" imported="no">ROL_PartitionedVector.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <class kind="class">DyadicOperator</class>
    <class kind="class">NullOperator</class>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>function_2test__03_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_vector</name>
      <anchorfile>function_2test__03_8cpp.html</anchorfile>
      <anchor>a06a28c48024bbc784c7398b993145aee</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>function_2test__03_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>step/test_03.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/step/</path>
    <filename>step_2test__03_8cpp</filename>
    <includes id="ROL__TestObjectives_8hpp" name="ROL_TestObjectives.hpp" local="yes" imported="no">ROL_TestObjectives.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>USE_HESSVEC</name>
      <anchorfile>step_2test__03_8cpp.html</anchorfile>
      <anchor>a20e5c8c2c257a6862ccf6bce9cccc6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>step_2test__03_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>step_2test__03_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vector/test_03.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/vector/</path>
    <filename>vector_2test__03_8cpp</filename>
    <includes id="ROL__MultiVectorDefault_8hpp" name="ROL_MultiVectorDefault.hpp" local="yes" imported="no">ROL_MultiVectorDefault.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>vector_2test__03_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm_sum</name>
      <anchorfile>vector_2test__03_8cpp.html</anchorfile>
      <anchor>a04f82749d2a0de4476ce42b096decc10</anchor>
      <arglist>(const MultiVector&lt; Real &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>vector_2test__03_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>function/test_04.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/function/</path>
    <filename>function_2test__04_8cpp</filename>
    <includes id="test__04_8hpp" name="test_04.hpp" local="yes" imported="no">test_04.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>function_2test__04_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorPrimal&lt; RealT &gt;</type>
      <name>PrimalStateVector</name>
      <anchorfile>function_2test__04_8cpp.html</anchorfile>
      <anchor>a6159c1334039c63190981d917d026b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorDual&lt; RealT &gt;</type>
      <name>DualStateVector</name>
      <anchorfile>function_2test__04_8cpp.html</anchorfile>
      <anchor>a69c735ef2cf81efffee9d1d3f39642bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>L2VectorPrimal&lt; RealT &gt;</type>
      <name>PrimalControlVector</name>
      <anchorfile>function_2test__04_8cpp.html</anchorfile>
      <anchor>a344b21392e5228b681d334bd88c52226</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>L2VectorDual&lt; RealT &gt;</type>
      <name>DualControlVector</name>
      <anchorfile>function_2test__04_8cpp.html</anchorfile>
      <anchor>ac6e94d03951cc341df24bbf9b1e236bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorDual&lt; RealT &gt;</type>
      <name>PrimalConstraintVector</name>
      <anchorfile>function_2test__04_8cpp.html</anchorfile>
      <anchor>af3b0d51319521bcbd56534c24b9372d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>H1VectorPrimal&lt; RealT &gt;</type>
      <name>DualConstraintVector</name>
      <anchorfile>function_2test__04_8cpp.html</anchorfile>
      <anchor>a415c9830b80acf8e656ac04255549c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>function_2test__04_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>step/test_04.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/step/</path>
    <filename>step_2test__04_8cpp</filename>
    <includes id="ROL__TestObjectives_8hpp" name="ROL_TestObjectives.hpp" local="yes" imported="no">ROL_TestObjectives.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>USE_HESSVEC</name>
      <anchorfile>step_2test__04_8cpp.html</anchorfile>
      <anchor>a20e5c8c2c257a6862ccf6bce9cccc6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>step_2test__04_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>step_2test__04_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vector/test_04.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/vector/</path>
    <filename>vector_2test__04_8cpp</filename>
    <includes id="ROL__PartitionedVector_8hpp" name="ROL_PartitionedVector.hpp" local="yes" imported="no">ROL_PartitionedVector.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>vector_2test__04_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_vector</name>
      <anchorfile>vector_2test__04_8cpp.html</anchorfile>
      <anchor>a06a28c48024bbc784c7398b993145aee</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>vector_2test__04_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_04.hpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/function/</path>
    <filename>test__04_8hpp</filename>
    <includes id="ROL__Types_8hpp" name="ROL_Types.hpp" local="yes" imported="no">ROL_Types.hpp</includes>
    <includes id="ROL__Vector_8hpp" name="ROL_Vector.hpp" local="yes" imported="no">ROL_Vector.hpp</includes>
    <includes id="ROL__BoundConstraint_8hpp" name="ROL_BoundConstraint.hpp" local="yes" imported="no">ROL_BoundConstraint.hpp</includes>
    <includes id="ROL__ParametrizedEqualityConstraint__SimOpt_8hpp" name="ROL_ParametrizedEqualityConstraint_SimOpt.hpp" local="yes" imported="no">ROL_ParametrizedEqualityConstraint_SimOpt.hpp</includes>
    <includes id="ROL__ParametrizedObjective__SimOpt_8hpp" name="ROL_ParametrizedObjective_SimOpt.hpp" local="yes" imported="no">ROL_ParametrizedObjective_SimOpt.hpp</includes>
    <includes id="ROL__TeuchosBatchManager_8hpp" name="ROL_TeuchosBatchManager.hpp" local="yes" imported="no">ROL_TeuchosBatchManager.hpp</includes>
    <class kind="class">L2VectorPrimal</class>
    <class kind="class">L2VectorDual</class>
    <class kind="class">H1VectorPrimal</class>
    <class kind="class">H1VectorDual</class>
    <class kind="class">BurgersFEM</class>
    <class kind="class">L2VectorPrimal</class>
    <class kind="class">L2VectorDual</class>
    <class kind="class">H1VectorPrimal</class>
    <class kind="class">H1VectorDual</class>
    <class kind="class">EqualityConstraint_BurgersControl</class>
  </compound>
  <compound kind="file">
    <name>function/test_05.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/function/</path>
    <filename>function_2test__05_8cpp</filename>
    <includes id="ROL__SimpleEqConstrained_8hpp" name="ROL_SimpleEqConstrained.hpp" local="yes" imported="no">ROL_SimpleEqConstrained.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__NonlinearLeastSquaresObjective_8hpp" name="ROL_NonlinearLeastSquaresObjective.hpp" local="yes" imported="no">ROL_NonlinearLeastSquaresObjective.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>function_2test__05_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>function_2test__05_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>step/test_05.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/step/</path>
    <filename>step_2test__05_8cpp</filename>
    <includes id="ROL__TestObjectives_8hpp" name="ROL_TestObjectives.hpp" local="yes" imported="no">ROL_TestObjectives.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>USE_HESSVEC</name>
      <anchorfile>step_2test__05_8cpp.html</anchorfile>
      <anchor>a20e5c8c2c257a6862ccf6bce9cccc6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>step_2test__05_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>step_2test__05_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vector/test_05.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/vector/</path>
    <filename>vector_2test__05_8cpp</filename>
    <includes id="ROL__ScaledStdVector_8hpp" name="ROL_ScaledStdVector.hpp" local="yes" imported="no">ROL_ScaledStdVector.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>vector_2test__05_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>ElementT</name>
      <anchorfile>vector_2test__05_8cpp.html</anchorfile>
      <anchor>aa12aeb88656dac4985199055a00f4c92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>vector_2test__05_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>function/test_06.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/function/</path>
    <filename>function_2test__06_8cpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__StdObjective_8hpp" name="ROL_StdObjective.hpp" local="yes" imported="no">ROL_StdObjective.hpp</includes>
    <class kind="class">ObjectiveFunctionTest06</class>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>function_2test__06_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomVector</name>
      <anchorfile>function_2test__06_8cpp.html</anchorfile>
      <anchor>aec67e5f181238d1db96e51bcf6ab5b07</anchor>
      <arglist>(std::vector&lt; RealT &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>function_2test__06_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>step/test_06.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/step/</path>
    <filename>step_2test__06_8cpp</filename>
    <includes id="ROL__TestObjectives_8hpp" name="ROL_TestObjectives.hpp" local="yes" imported="no">ROL_TestObjectives.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>USE_HESSVEC</name>
      <anchorfile>step_2test__06_8cpp.html</anchorfile>
      <anchor>a20e5c8c2c257a6862ccf6bce9cccc6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>step_2test__06_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>step_2test__06_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>function/test_07.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/function/</path>
    <filename>function_2test__07_8cpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__StdObjective_8hpp" name="ROL_StdObjective.hpp" local="yes" imported="no">ROL_StdObjective.hpp</includes>
    <includes id="ROL__CompositeObjective_8hpp" name="ROL_CompositeObjective.hpp" local="yes" imported="no">ROL_CompositeObjective.hpp</includes>
    <class kind="class">ObjectiveFunctionTest07_1</class>
    <class kind="class">ObjectiveFunctionTest07_2</class>
    <class kind="class">ObjectiveFunctionTest07_scalarize</class>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>function_2test__07_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomVector</name>
      <anchorfile>function_2test__07_8cpp.html</anchorfile>
      <anchor>aec67e5f181238d1db96e51bcf6ab5b07</anchor>
      <arglist>(std::vector&lt; RealT &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>function_2test__07_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>step/test_07.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/step/</path>
    <filename>step_2test__07_8cpp</filename>
    <includes id="ROL__HS32_8hpp" name="ROL_HS32.hpp" local="yes" imported="no">ROL_HS32.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>step_2test__07_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>step_2test__07_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>function/test_08.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/function/</path>
    <filename>function_2test__08_8cpp</filename>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__StdObjective_8hpp" name="ROL_StdObjective.hpp" local="yes" imported="no">ROL_StdObjective.hpp</includes>
    <includes id="ROL__Objective__SimOpt_8hpp" name="ROL_Objective_SimOpt.hpp" local="yes" imported="no">ROL_Objective_SimOpt.hpp</includes>
    <includes id="ROL__CompositeObjective__SimOpt_8hpp" name="ROL_CompositeObjective_SimOpt.hpp" local="yes" imported="no">ROL_CompositeObjective_SimOpt.hpp</includes>
    <class kind="class">ObjectiveFunctionTest08_1</class>
    <class kind="class">ObjectiveFunctionTest08_2</class>
    <class kind="class">ObjectiveFunctionTest08_scalarize</class>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>function_2test__08_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomVector</name>
      <anchorfile>function_2test__08_8cpp.html</anchorfile>
      <anchor>aec67e5f181238d1db96e51bcf6ab5b07</anchor>
      <arglist>(std::vector&lt; RealT &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>function_2test__08_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>step/test_08.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/step/</path>
    <filename>step_2test__08_8cpp</filename>
    <includes id="ROL__HS29_8hpp" name="ROL_HS29.hpp" local="yes" imported="no">ROL_HS29.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>step_2test__08_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>step_2test__08_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>function/test_09.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/function/</path>
    <filename>function_2test__09_8cpp</filename>
    <includes id="ROL__HS39_8hpp" name="ROL_HS39.hpp" local="yes" imported="no">ROL_HS39.hpp</includes>
    <includes id="ROL__RandomVector_8hpp" name="ROL_RandomVector.hpp" local="yes" imported="no">ROL_RandomVector.hpp</includes>
    <includes id="ROL__EqualityConstraint__Partitioned_8hpp" name="ROL_EqualityConstraint_Partitioned.hpp" local="yes" imported="no">ROL_EqualityConstraint_Partitioned.hpp</includes>
    <includes id="ROL__StdVector_8hpp" name="ROL_StdVector.hpp" local="yes" imported="no">ROL_StdVector.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>function_2test__09_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>function_2test__09_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>step/test_09.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/step/</path>
    <filename>step_2test__09_8cpp</filename>
    <includes id="ROL__HS32_8hpp" name="ROL_HS32.hpp" local="yes" imported="no">ROL_HS32.hpp</includes>
    <includes id="ROL__InteriorPointPrimalDualResidual_8hpp" name="ROL_InteriorPointPrimalDualResidual.hpp" local="yes" imported="no">ROL_InteriorPointPrimalDualResidual.hpp</includes>
    <includes id="ROL__RandomVector_8hpp" name="ROL_RandomVector.hpp" local="yes" imported="no">ROL_RandomVector.hpp</includes>
    <includes id="ROL__GMRES_8hpp" name="ROL_GMRES.hpp" local="yes" imported="no">ROL_GMRES.hpp</includes>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>step_2test__09_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>step_2test__09_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_10.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/step/</path>
    <filename>test__10_8cpp</filename>
    <includes id="ROL__TestObjectives_8hpp" name="ROL_TestObjectives.hpp" local="yes" imported="no">ROL_TestObjectives.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>USE_HESSVEC</name>
      <anchorfile>test__10_8cpp.html</anchorfile>
      <anchor>a20e5c8c2c257a6862ccf6bce9cccc6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>test__10_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test__10_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_11.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/step/</path>
    <filename>test__11_8cpp</filename>
    <includes id="ROL__HS24_8hpp" name="ROL_HS24.hpp" local="yes" imported="no">ROL_HS24.hpp</includes>
    <includes id="ROL__Algorithm_8hpp" name="ROL_Algorithm.hpp" local="yes" imported="no">ROL_Algorithm.hpp</includes>
    <includes id="ROL__ObjectiveFromBoundConstraint_8hpp" name="ROL_ObjectiveFromBoundConstraint.hpp" local="yes" imported="no">ROL_ObjectiveFromBoundConstraint.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test__11_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test_12.cpp</name>
    <path>/Users/sscoll/dist/trilinos/packages/rol/test/step/</path>
    <filename>test__12_8cpp</filename>
    <includes id="ROL__Step_8hpp" name="ROL_Step.hpp" local="yes" imported="no">ROL_Step.hpp</includes>
    <includes id="ROL__TestObjectives_8hpp" name="ROL_TestObjectives.hpp" local="yes" imported="no">ROL_TestObjectives.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>USE_HESSVEC</name>
      <anchorfile>test__12_8cpp.html</anchorfile>
      <anchor>a20e5c8c2c257a6862ccf6bce9cccc6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>RealT</name>
      <anchorfile>test__12_8cpp.html</anchorfile>
      <anchor>af9c10119629802b6795a33e6e79fd7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>test__12_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::AbsoluteValue</name>
    <filename>classROL_1_1AbsoluteValue.html</filename>
    <templarg></templarg>
    <base>ROL::PositiveFunction</base>
    <member kind="function">
      <type></type>
      <name>AbsoluteValue</name>
      <anchorfile>classROL_1_1AbsoluteValue.html</anchorfile>
      <anchor>aa0ffdd159a42af331233441de29c46c5</anchor>
      <arglist>(Real param=1., EAbsoluteValue eav=ABSOLUTEVALUE_TRUE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbsoluteValue</name>
      <anchorfile>classROL_1_1AbsoluteValue.html</anchorfile>
      <anchor>a909dfc2cee251e34402e13ff3cabde49</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluate</name>
      <anchorfile>classROL_1_1AbsoluteValue.html</anchorfile>
      <anchor>ac1b972230ca4926e4ff2646ca5fbc641</anchor>
      <arglist>(Real input, int deriv)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>true_absolute_value</name>
      <anchorfile>classROL_1_1AbsoluteValue.html</anchorfile>
      <anchor>a5ef637f12473c020608c8d1395028efc</anchor>
      <arglist>(Real input, int deriv)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>sqrt_absolute_value</name>
      <anchorfile>classROL_1_1AbsoluteValue.html</anchorfile>
      <anchor>aa3eaefdab2b0b9b827c6338550557f09</anchor>
      <arglist>(Real input, int deriv)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>sqrtd_absolute_value</name>
      <anchorfile>classROL_1_1AbsoluteValue.html</anchorfile>
      <anchor>aeff472d86875b52c9dec9324a632fe29</anchor>
      <arglist>(Real input, int deriv)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>c2_absolute_value</name>
      <anchorfile>classROL_1_1AbsoluteValue.html</anchorfile>
      <anchor>a745d0266188a54619943e6f02e210ded</anchor>
      <arglist>(Real input, int deriv)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>param_</name>
      <anchorfile>classROL_1_1AbsoluteValue.html</anchorfile>
      <anchor>a5cbab84e775d1c8692f549b120c3ed00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EAbsoluteValue</type>
      <name>eav_</name>
      <anchorfile>classROL_1_1AbsoluteValue.html</anchorfile>
      <anchor>a24cc97724ce42bacd06150e902c66cf3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::BoundConstraint::Active</name>
    <filename>classROL_1_1BoundConstraint_1_1Active.html</filename>
    <member kind="function">
      <type></type>
      <name>Active</name>
      <anchorfile>classROL_1_1BoundConstraint_1_1Active.html</anchorfile>
      <anchor>a34ebc57e968892e64ff164e653ed9f6d</anchor>
      <arglist>(Real offset)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>apply</name>
      <anchorfile>classROL_1_1BoundConstraint_1_1Active.html</anchorfile>
      <anchor>a894eefbcd9cbec448280481790901b44</anchor>
      <arglist>(const Real &amp;x, const Real &amp;y) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>offset_</name>
      <anchorfile>classROL_1_1BoundConstraint_1_1Active.html</anchorfile>
      <anchor>a681258701bec0263494dd79a5a4cdde8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Algorithm</name>
    <filename>classROL_1_1Algorithm.html</filename>
    <templarg>Real</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Algorithm</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>a3fc00c4ddaf85c269674f0458bc6f52b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Algorithm</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>a8ad60a5c4e2b80e35ea2b76b4f4b0e69</anchor>
      <arglist>(const Teuchos::RCP&lt; Step&lt; Real &gt; &gt; &amp;step, const Teuchos::RCP&lt; StatusTest&lt; Real &gt; &gt; &amp;status, bool printHeader=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Algorithm</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>a0c523a1ed040c0cb6bb918df67b9a048</anchor>
      <arglist>(const Teuchos::RCP&lt; Step&lt; Real &gt; &gt; &amp;step, const Teuchos::RCP&lt; StatusTest&lt; Real &gt; &gt; &amp;status, const Teuchos::RCP&lt; AlgorithmState&lt; Real &gt; &gt; &amp;state, bool printHeader=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Algorithm</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>a73101b70d03d38bf05873c09ff05c357</anchor>
      <arglist>(const std::string &amp;stepname, Teuchos::ParameterList &amp;parlist, bool printHeader=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>run</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>acf0eede1c23b1afa487129b21fbd70f8</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, bool print=false, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>run</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>a9c60d7b9956d2e4dbf86a8695d00f8af</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, bool print=false, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>run</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>a43475476b9ddf4cbcbf1b41f5c5173e3</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, bool print=false, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>run</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>a91801a8a9f22f9b72df1aa2e4d163be6</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, bool print=false, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>run</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>a8dc53c75c0f670affd26b50dca518e7d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, Vector&lt; Real &gt; &amp;l, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, bool print=false, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>run</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>a103327acfc89ef45f3edb69f77d57f77</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, Vector&lt; Real &gt; &amp;l, const Vector&lt; Real &gt; &amp;c, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, bool print=false, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>run</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>afd8214c668394fff96478d30de86b9f4</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, Vector&lt; Real &gt; &amp;l, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, BoundConstraint&lt; Real &gt; &amp;bnd, bool print=false, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>run</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>a9ad5c77dbc5c2e50b016bd76da050ab5</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, Vector&lt; Real &gt; &amp;l, const Vector&lt; Real &gt; &amp;c, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, BoundConstraint&lt; Real &gt; &amp;bnd, bool print=false, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>run</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>ad5f33f68a35405aa64f6c8a18969e69d</anchor>
      <arglist>(OptimizationProblem&lt; Real &gt; &amp;opt, bool print=false, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getIterHeader</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>abdccb15c605f295616f8b830e01e7d25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getIterInfo</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>a3da1bf041ec43362bc10a7843857732f</anchor>
      <arglist>(bool withHeader=false)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const AlgorithmState&lt; Real &gt; &gt;</type>
      <name>getState</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>a1fdfde28220a0bf733c465cfbcf9cf95</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>a94329774dec73561f1a12a4c0cf78937</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Step&lt; Real &gt; &gt;</type>
      <name>step_</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>a8dab46ce20bd02648df0a71b5016e10c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StatusTest&lt; Real &gt; &gt;</type>
      <name>status_</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>ad4a1b990857ab790f81caa531f9232e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; AlgorithmState&lt; Real &gt; &gt;</type>
      <name>state_</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>a85dd5c6f40838c3496ba0ff0d80d5f7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>printHeader_</name>
      <anchorfile>classROL_1_1Algorithm.html</anchorfile>
      <anchor>a7e19000e5056b47d66dee21acb3bc693</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ROL::AlgorithmState</name>
    <filename>structROL_1_1AlgorithmState.html</filename>
    <templarg>Real</templarg>
    <member kind="function">
      <type></type>
      <name>AlgorithmState</name>
      <anchorfile>structROL_1_1AlgorithmState.html</anchorfile>
      <anchor>a636d7e3df4436f12a5b1f5ff8bcfc818</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iter</name>
      <anchorfile>structROL_1_1AlgorithmState.html</anchorfile>
      <anchor>afcf5340580540ad463e8ba2c8c96264b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>minIter</name>
      <anchorfile>structROL_1_1AlgorithmState.html</anchorfile>
      <anchor>a8b36ac9687f90f83dcc8b58749df7d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nfval</name>
      <anchorfile>structROL_1_1AlgorithmState.html</anchorfile>
      <anchor>a910564ef05ea3d4e6199f8ec0b30b286</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ncval</name>
      <anchorfile>structROL_1_1AlgorithmState.html</anchorfile>
      <anchor>af1fb44e6b066aec4132fc0639a5568dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ngrad</name>
      <anchorfile>structROL_1_1AlgorithmState.html</anchorfile>
      <anchor>aa4a6908e9671c931fec5b97bf8ee21b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>value</name>
      <anchorfile>structROL_1_1AlgorithmState.html</anchorfile>
      <anchor>a1846ecf3c16c967444aff6c690e0e086</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>minValue</name>
      <anchorfile>structROL_1_1AlgorithmState.html</anchorfile>
      <anchor>aa34c3c1c258bafa001a7889c0e8589e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>gnorm</name>
      <anchorfile>structROL_1_1AlgorithmState.html</anchorfile>
      <anchor>a11d50b90c8919d9e0711f6e5e2587654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>cnorm</name>
      <anchorfile>structROL_1_1AlgorithmState.html</anchorfile>
      <anchor>a11bc716861e8846493b39678aacf5bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>snorm</name>
      <anchorfile>structROL_1_1AlgorithmState.html</anchorfile>
      <anchor>a5dc2e78e7a1175467855934f95ce69b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>aggregateGradientNorm</name>
      <anchorfile>structROL_1_1AlgorithmState.html</anchorfile>
      <anchor>a25cba9ead08dfe200542533b25dcdcaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>aggregateModelError</name>
      <anchorfile>structROL_1_1AlgorithmState.html</anchorfile>
      <anchor>a28992e4c4f161f03832a8da7e5f6cac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>flag</name>
      <anchorfile>structROL_1_1AlgorithmState.html</anchorfile>
      <anchor>aa7b05d3d4b9000c57cfdcab3d7f90619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>iterateVec</name>
      <anchorfile>structROL_1_1AlgorithmState.html</anchorfile>
      <anchor>a7372a842fd48ee6af94cdd16b2d69e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>lagmultVec</name>
      <anchorfile>structROL_1_1AlgorithmState.html</anchorfile>
      <anchor>aac760fea2e5cd2ba942fc4b9c6d4ba88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>minIterVec</name>
      <anchorfile>structROL_1_1AlgorithmState.html</anchorfile>
      <anchor>aff6197cf26f65a0f537d8a19be65b240</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Arcsine</name>
    <filename>classROL_1_1Arcsine.html</filename>
    <templarg></templarg>
    <base>ROL::Distribution</base>
    <member kind="function">
      <type></type>
      <name>Arcsine</name>
      <anchorfile>classROL_1_1Arcsine.html</anchorfile>
      <anchor>a3f16374cfff827b332b1db44e88e8d8b</anchor>
      <arglist>(const Real a=0., const Real b=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Arcsine</name>
      <anchorfile>classROL_1_1Arcsine.html</anchorfile>
      <anchor>a571fca7c70db5ba98cfd9e9cdf39d56f</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluatePDF</name>
      <anchorfile>classROL_1_1Arcsine.html</anchorfile>
      <anchor>a0f033eb28ecf56f0d2cd0489eddd30b5</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluateCDF</name>
      <anchorfile>classROL_1_1Arcsine.html</anchorfile>
      <anchor>a0440c526854d1821678ee6762874ee13</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>integrateCDF</name>
      <anchorfile>classROL_1_1Arcsine.html</anchorfile>
      <anchor>ab402c7ee394df804f845c5dd34be4209</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>invertCDF</name>
      <anchorfile>classROL_1_1Arcsine.html</anchorfile>
      <anchor>a9d4032c9aa15a91d2d57bd8374a0e10a</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>moment</name>
      <anchorfile>classROL_1_1Arcsine.html</anchorfile>
      <anchor>a089b98e6639303f46a95dd9c1159e4f9</anchor>
      <arglist>(const size_t m) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>lowerBound</name>
      <anchorfile>classROL_1_1Arcsine.html</anchorfile>
      <anchor>a9d2f4d4927e560590af80d6a95b797c1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>upperBound</name>
      <anchorfile>classROL_1_1Arcsine.html</anchorfile>
      <anchor>adb9661c762bfc8e8ba844460a86516dc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1Arcsine.html</anchorfile>
      <anchor>af04930cf9965b0b28af665559fe9352f</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>a_</name>
      <anchorfile>classROL_1_1Arcsine.html</anchorfile>
      <anchor>abf6725d3ed83f3b6c67e73b171425eab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>b_</name>
      <anchorfile>classROL_1_1Arcsine.html</anchorfile>
      <anchor>a4439ef51913197822a01a7042641a70d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::AtomVector</name>
    <filename>classROL_1_1AtomVector.html</filename>
    <templarg>Real</templarg>
    <base>ROL::BatchStdVector</base>
    <member kind="function">
      <type></type>
      <name>AtomVector</name>
      <anchorfile>classROL_1_1AtomVector.html</anchorfile>
      <anchor>a433550486a19d3e5c28ad503ce67aea6</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman, const int numMySamples, const int dimension)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getAtom</name>
      <anchorfile>classROL_1_1AtomVector.html</anchorfile>
      <anchor>a5e51de4f67c8e640d62872ef08c3a3da</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAtom</name>
      <anchorfile>classROL_1_1AtomVector.html</anchorfile>
      <anchor>aacd200ba0b6677067bb17bb4dd5f4d72</anchor>
      <arglist>(const int i, const std::vector&lt; Real &gt; &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumMyAtoms</name>
      <anchorfile>classROL_1_1AtomVector.html</anchorfile>
      <anchor>a43acd0826374fa76139873991f25e856</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDimension</name>
      <anchorfile>classROL_1_1AtomVector.html</anchorfile>
      <anchor>ab8438bd94795cae90cb366b132a01d64</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1AtomVector.html</anchorfile>
      <anchor>a53470e11043196e7811896027fbf99bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int</type>
      <name>numMySamples_</name>
      <anchorfile>classROL_1_1AtomVector.html</anchorfile>
      <anchor>a13c120a43d9caf528e7f275b7ffeeebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int</type>
      <name>dimension_</name>
      <anchorfile>classROL_1_1AtomVector.html</anchorfile>
      <anchor>aa9dd11542e19bbd5ddd935bbdb90664d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::AugmentedLagrangian</name>
    <filename>classROL_1_1AugmentedLagrangian.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>AugmentedLagrangian</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a20472b1b9579972eaba753b79293c308</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;con, const Vector&lt; Real &gt; &amp;multiplier, const Real penaltyParameter, const Vector&lt; Real &gt; &amp;optVec, const Vector&lt; Real &gt; &amp;conVec, Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AugmentedLagrangian</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>aee6756f714be546f37ac0f674ffc91b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a8f3c07d282d5182e953bb878b2fe9d84</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a962f6199f51cbff21e4431a4e1659ea2</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a93e3655825311ee2e0992ddf7aa1ffd0</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a6f925b040bcd17fec4f86942ce236917</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>getObjectiveValue</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a7fa445343cd4838cef6098dc92322ac8</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getConstraintVec</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a1d6ac8f1e91ecad07a52c6587f4efdc7</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumberConstraintEvaluations</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>afb72cba1c2eb62c2662c12b88d5bbdf9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumberFunctionEvaluations</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a5077c6be43fc7b55fc01c3b06d358fc2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumberGradientEvaluations</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a4271183ad5357f85ef411277a7fced48</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a6b9b950b675b79bf9656d473a1d6e1bf</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;multiplier, const Real penaltyParameter)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a6ff3c6087842c8eb577142964d676633</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; QuadraticPenalty&lt; Real &gt; &gt;</type>
      <name>pen_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>ab2da6e478c8d18de43c7163b643a1650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>penaltyParameter_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a7e52ef5d0b87efdb8604ace0c647a403</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualOptVector_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a9bc0ff592776065d3dbd05b078b7776a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>fval_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a0897aa544609b3f2d435e517e32c7bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gradient_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a2b07347efd153393ac4f07cf6d4b2b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nfval_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a91c3f7e65cb4e12f7f63c63ea5e71447</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ngval_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a285902095447a0e0d70d633d9b2fd678</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>scaleLagrangian_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a1768f9132df54d157e3e4f0d84ae4bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isValueComputed_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a01d5e8a280d12a2105a9396cd81bff50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isGradientComputed_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian.html</anchorfile>
      <anchor>a946f14eb11cf6ea4091305f8f6e99db0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::AugmentedLagrangian_SimOpt</name>
    <filename>classROL_1_1AugmentedLagrangian__SimOpt.html</filename>
    <templarg></templarg>
    <base>ROL::Objective_SimOpt</base>
    <member kind="function">
      <type></type>
      <name>AugmentedLagrangian_SimOpt</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>add124c8f0b1da3c4e952069ab940d382</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective_SimOpt&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; EqualityConstraint_SimOpt&lt; Real &gt; &gt; &amp;con, const Vector&lt; Real &gt; &amp;multiplier, const Real penaltyParameter, const Vector&lt; Real &gt; &amp;simVec, const Vector&lt; Real &gt; &amp;optVec, const Vector&lt; Real &gt; &amp;conVec, Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a79d44cf39d0163bb2ce28ea099ba0f1d</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a3e95c0fa3139aee39cd4a9193ac58895</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradient_1</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>afc55ee0a786fbb0eedf79390455646ca</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradient_2</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a7a0d9950f6638f1dec21ba389c049b91</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec_11</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>aac2778115bc446aeb0fd34ac74920441</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec_12</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a9a8669e57007ba9eeb10bf879bb91e62</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec_21</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>abcb7b103ad1475da183004f3a8e799c3</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec_22</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a5c481595e73de4f3c2f243bc6501c242</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>getObjectiveValue</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a02313d088e724faf43a05d6c50385294</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getConstraintVec</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a4467edd98a88bcb127fba9b62c1892da</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumberConstraintEvaluations</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a7f31409611a4f4c3856b2efb78ff3be7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumberFunctionEvaluations</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>ac0f959c8d02a09651747b1111a10c975</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumberGradientEvaluations</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>af89353433b3097f9d54ec8ddad9a320e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a84b7d02bbb4df5ea2b063f09529c9624</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;multiplier, const Real penaltyParameter)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Objective_SimOpt&lt; Real &gt; &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>afbe791942c2a1cba7516d4e5fdac8d60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; QuadraticPenalty_SimOpt&lt; Real &gt; &gt;</type>
      <name>pen_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a1ced0f7e7802b1171e57d4ec3a0638e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>penaltyParameter_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a7a5b1f9743fbf731a72239c11f057533</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualSimVector_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a4fc498945e44e84169dd4135a4004612</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualOptVector_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>ad4a2f5232c161d4200c38fc6b4f2123c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>fval_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a735a94560e5c6a90b45943b26b6adf76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gradient1_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a95bc32a4677e1bc54e2dea42c61ee9ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gradient2_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a7e03e13bc7073e9ba461d308501dc5c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nfval_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a94ec41e1b5d5c847ee557cd0c5efab4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ngval_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>abecbddf73686fc6f1e7d985721807a09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>scaleLagrangian_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>ab656240697fac7cddf5fed539b758278</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isValueComputed_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a21ec60466bba9bf8383be61be719cf2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isGradient1Computed_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>aa1d01ba5ee12ad2e0ae5cf2539725bd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isGradient2Computed_</name>
      <anchorfile>classROL_1_1AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a8905405e3728e43489c9f63057244308</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::AugmentedLagrangianStep</name>
    <filename>classROL_1_1AugmentedLagrangianStep.html</filename>
    <templarg></templarg>
    <base>ROL::Step</base>
    <member kind="function">
      <type></type>
      <name>~AugmentedLagrangianStep</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>af089bdce4a038ec1c2af5b645eb4a036</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AugmentedLagrangianStep</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>ac35151597538540ccb2b0b0852548eb3</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a7dd08f818288d39e7fb6a2504b9986bb</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, Vector&lt; Real &gt; &amp;l, const Vector&lt; Real &gt; &amp;c, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>acb0562a0104ae3d5d2b3005ecf6b92af</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;l, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a4472b9d4411ea53e54c2c8b8681ff8dc</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, Vector&lt; Real &gt; &amp;l, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printHeader</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>ab9dafb889b8e46aaab8b40bd1f5075fc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printName</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a834c8676222651d67bee2510aa6b7aa9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>print</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>ae5aad4915ae54b8851563b76a6f97428</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;algo_state, bool pHeader=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a85676fa3993457622ab5c9ff8b059275</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a2c409595bf994496b071d23f7be065c3</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>computeGradient</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a1d7f87101bfa7c1e596370f34a940441</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, const Real mu, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Algorithm&lt; Real &gt; &gt;</type>
      <name>algo_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>ac09d4c4e1035b6c9ead03e4ff54b4eb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>x_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a3ec4db55e922fae8290730b975e8155b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::ParameterList</type>
      <name>parlist_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a28b7ebf7cda979203d36053e36ec4219</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>scaleLagrangian_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a3d4c5af04d0b0dfa89f5fa55cc967259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>minPenaltyReciprocal_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>aa4efb79e75162f7545c1b49b2ddfc01e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>minPenaltyLowerBound_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a89dadf1e76fdd9a70fb5c1ad496b5845</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>penaltyUpdate_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>ab2f9a55fff9fdbbc8fca4c4b7c90dd02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>maxPenaltyParam_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a09c05b7bc90020d7a6a55d069eaa2388</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>optIncreaseExponent_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a315bf77ab272450309fc2b21c7c1bd4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>optDecreaseExponent_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a4ed875562c12b967f6a153655bef9a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>optToleranceInitial_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a921264af73bd0d0876cede99092501c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>optTolerance_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a2db1d56984baf96b51c99bc54da58db3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>feasIncreaseExponent_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a1dfa442cabbed3c8346a77f13bacaa00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>feasDecreaseExponent_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>acd0be9f7904804c0825b14019fe8356e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>feasToleranceInitial_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a5a23bd143224166770811361ce729acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>feasTolerance_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a95a6e4c0826691c2e291d3f5eb05a333</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>print_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a7f27377ecd49221e8c1b78cc7ce598d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxit_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a1a8475dfe8339a076f94930d14d438b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>subproblemIter_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a00cc3b7f4fd93550ce90ab2cdd592399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>subStep_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a004afc5b89a4cbeae0966b2e5894429d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>outerOptTolerance_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>ace4e488a93a3ff57b4db40c971c5bc25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>outerFeasTolerance_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>ad395647648d9d61802af6bc8460fd8d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>outerStepTolerance_</name>
      <anchorfile>classROL_1_1AugmentedLagrangianStep.html</anchorfile>
      <anchor>a1fea3d8ab8e5ca305ad83ea8d52e2bbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::BackTracking</name>
    <filename>classROL_1_1BackTracking.html</filename>
    <templarg></templarg>
    <base>ROL::LineSearch</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BackTracking</name>
      <anchorfile>classROL_1_1BackTracking.html</anchorfile>
      <anchor>a97a9f12f3d2957b56ecea68966803061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BackTracking</name>
      <anchorfile>classROL_1_1BackTracking.html</anchorfile>
      <anchor>a0203d86d388d3d1a404ba3f98eb342b9</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1BackTracking.html</anchorfile>
      <anchor>aa9df39e26460b056a35562029f2e46a6</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classROL_1_1BackTracking.html</anchorfile>
      <anchor>a6fd85ee68f5597730670229384803a25</anchor>
      <arglist>(Real &amp;alpha, Real &amp;fval, int &amp;ls_neval, int &amp;ls_ngrad, const Real &amp;gs, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>rho_</name>
      <anchorfile>classROL_1_1BackTracking.html</anchorfile>
      <anchor>af8e60c3367153f82ae616513f7a69d24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xnew_</name>
      <anchorfile>classROL_1_1BackTracking.html</anchorfile>
      <anchor>a6e9482c71cb8907be29db7c32839e8ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::BarzilaiBorwein</name>
    <filename>classROL_1_1BarzilaiBorwein.html</filename>
    <templarg></templarg>
    <base>ROL::Secant</base>
    <member kind="function">
      <type></type>
      <name>BarzilaiBorwein</name>
      <anchorfile>classROL_1_1BarzilaiBorwein.html</anchorfile>
      <anchor>a005b7da511945ec364b247c529b6cdc7</anchor>
      <arglist>(int type=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyH</name>
      <anchorfile>classROL_1_1BarzilaiBorwein.html</anchorfile>
      <anchor>a7196f1f054d2504a0573dea4c9511a47</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyB</name>
      <anchorfile>classROL_1_1BarzilaiBorwein.html</anchorfile>
      <anchor>a8e645e7343052a21d55774a433c2aae1</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Bv, const Vector&lt; Real &gt; &amp;v) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>type_</name>
      <anchorfile>classROL_1_1BarzilaiBorwein.html</anchorfile>
      <anchor>a9e43045b6fa8a2d955ea3af3e0af9937</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::BatchManager</name>
    <filename>classROL_1_1BatchManager.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BatchManager</name>
      <anchorfile>classROL_1_1BatchManager.html</anchorfile>
      <anchor>a862acaa32b7ebd4ebc235d8c30ac9427</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>batchID</name>
      <anchorfile>classROL_1_1BatchManager.html</anchorfile>
      <anchor>a103e6ef87d6d7302e59074b902c55d21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numBatches</name>
      <anchorfile>classROL_1_1BatchManager.html</anchorfile>
      <anchor>a99d26273148e3574bc293ba85f9fbaf1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sumAll</name>
      <anchorfile>classROL_1_1BatchManager.html</anchorfile>
      <anchor>a217b132781cdc204bf022b3085e4ec7e</anchor>
      <arglist>(Real *input, Real *output, int dim)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sumAll</name>
      <anchorfile>classROL_1_1BatchManager.html</anchorfile>
      <anchor>a76810eda8373ba1a2d12357db577a29d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;input, Vector&lt; Real &gt; &amp;output)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reduceAll</name>
      <anchorfile>classROL_1_1BatchManager.html</anchorfile>
      <anchor>a75b86608ea77d73a0b9ba749a0e78632</anchor>
      <arglist>(Real *input, Real *output, const Elementwise::ReductionOp&lt; Real &gt; &amp;r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>barrier</name>
      <anchorfile>classROL_1_1BatchManager.html</anchorfile>
      <anchor>afe0e6d16c628efff1387f9bab8f9b703</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::BatchStdVector</name>
    <filename>classROL_1_1BatchStdVector.html</filename>
    <templarg></templarg>
    <base>StdVector&lt; Real &gt;</base>
    <member kind="function">
      <type></type>
      <name>BatchStdVector</name>
      <anchorfile>classROL_1_1BatchStdVector.html</anchorfile>
      <anchor>a0cba8105756ed89e49d97f84a95966fe</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>dot</name>
      <anchorfile>classROL_1_1BatchStdVector.html</anchorfile>
      <anchor>a2b00524bfa2efed23d06a216a06fe57e</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classROL_1_1BatchStdVector.html</anchorfile>
      <anchor>aa51d8afabc5a412a1537eb63d4afe507</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classROL_1_1BatchStdVector.html</anchorfile>
      <anchor>ab10b081dabd191862bef8b4c89d5efdf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>reduce</name>
      <anchorfile>classROL_1_1BatchStdVector.html</anchorfile>
      <anchor>af57190ca2243aa6ac9a43ed186e8a2bb</anchor>
      <arglist>(const Elementwise::ReductionOp&lt; Real &gt; &amp;r) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt;</type>
      <name>getBatchManager</name>
      <anchorfile>classROL_1_1BatchStdVector.html</anchorfile>
      <anchor>a5165367149e55549403ff6da5baa8804</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1BatchStdVector.html</anchorfile>
      <anchor>a9dbd7e26f101e86273439019ff07e455</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt;</type>
      <name>bman_</name>
      <anchorfile>classROL_1_1BatchStdVector.html</anchorfile>
      <anchor>a7e40631cba45a59309b9b84de183a6dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Beta</name>
    <filename>classROL_1_1Beta.html</filename>
    <templarg></templarg>
    <base>ROL::Distribution</base>
    <member kind="function">
      <type></type>
      <name>Beta</name>
      <anchorfile>classROL_1_1Beta.html</anchorfile>
      <anchor>afd6a4495016e6e260882c9bcbb2f7ec3</anchor>
      <arglist>(const Real shape1=2., const Real shape2=2.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Beta</name>
      <anchorfile>classROL_1_1Beta.html</anchorfile>
      <anchor>aa5c7eb2852bd9004d478d7f7bada9731</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluatePDF</name>
      <anchorfile>classROL_1_1Beta.html</anchorfile>
      <anchor>a35e2d4621cc876e3188eaa8f95903d80</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluateCDF</name>
      <anchorfile>classROL_1_1Beta.html</anchorfile>
      <anchor>af1605c422699021867363fc5e3c82309</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>integrateCDF</name>
      <anchorfile>classROL_1_1Beta.html</anchorfile>
      <anchor>afab1b004647e3bdcc2321cf2906c5ef1</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>invertCDF</name>
      <anchorfile>classROL_1_1Beta.html</anchorfile>
      <anchor>a6194d7c1363f0adfeaddf051126f6eaa</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>moment</name>
      <anchorfile>classROL_1_1Beta.html</anchorfile>
      <anchor>ade4b422dd10d91eb4312e291ac442fb3</anchor>
      <arglist>(const size_t m) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>lowerBound</name>
      <anchorfile>classROL_1_1Beta.html</anchorfile>
      <anchor>a4835439a58ddd78d26592ef558f42082</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>upperBound</name>
      <anchorfile>classROL_1_1Beta.html</anchorfile>
      <anchor>aebfb08ba5f74a67da422a448021a61b6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1Beta.html</anchorfile>
      <anchor>abaa830a034638e9e069c5802590d0311</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeQuadrature</name>
      <anchorfile>classROL_1_1Beta.html</anchorfile>
      <anchor>a3f1eafaa3ec191777e1d1c590692568c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>ibeta</name>
      <anchorfile>classROL_1_1Beta.html</anchorfile>
      <anchor>ae401f8ddb723426b9f84ad18fcd316c1</anchor>
      <arglist>(const Real x) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>shape1_</name>
      <anchorfile>classROL_1_1Beta.html</anchorfile>
      <anchor>a30fc5ad5b788b6c25999fe8a2f9f3255</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>shape2_</name>
      <anchorfile>classROL_1_1Beta.html</anchorfile>
      <anchor>a961b35a7e4b3ae1ff8d58499798e7c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>coeff_</name>
      <anchorfile>classROL_1_1Beta.html</anchorfile>
      <anchor>a928db87dc07f6ca31a3a4628eb6d243b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>pts_</name>
      <anchorfile>classROL_1_1Beta.html</anchorfile>
      <anchor>a4af1ec8ae001b6597c7d13e7af36ea3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>wts_</name>
      <anchorfile>classROL_1_1Beta.html</anchorfile>
      <anchor>ae67d6148f60c2535a2d8687c3ff89056</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Bisection</name>
    <filename>classROL_1_1Bisection.html</filename>
    <templarg></templarg>
    <base>ROL::LineSearch</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Bisection</name>
      <anchorfile>classROL_1_1Bisection.html</anchorfile>
      <anchor>aad093b2be5b5add2b3352eab15480187</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bisection</name>
      <anchorfile>classROL_1_1Bisection.html</anchorfile>
      <anchor>afdcb3465741c8d88bceeedd3713d1cb3</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1Bisection.html</anchorfile>
      <anchor>a26be3c975bab5316b57643419f510e29</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classROL_1_1Bisection.html</anchorfile>
      <anchor>a6baf04b174ced69ffcd78dd6792e66f1</anchor>
      <arglist>(Real &amp;alpha, Real &amp;fval, int &amp;ls_neval, int &amp;ls_ngrad, const Real &amp;gs, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>tol_</name>
      <anchorfile>classROL_1_1Bisection.html</anchorfile>
      <anchor>a03db23a408cf76abf549f050d693bfc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xnew_</name>
      <anchorfile>classROL_1_1Bisection.html</anchorfile>
      <anchor>a3b06b4c04f919ddf6f6a4134dac7bd86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; LineSearch&lt; Real &gt; &gt;</type>
      <name>btls_</name>
      <anchorfile>classROL_1_1Bisection.html</anchorfile>
      <anchor>ae7201dbf0f86c8b634f9ee49aed90ef7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::BlockOperator</name>
    <filename>classROL_1_1BlockOperator.html</filename>
    <templarg></templarg>
    <base>ROL::LinearOperator</base>
    <member kind="function">
      <type></type>
      <name>BlockOperator</name>
      <anchorfile>classROL_1_1BlockOperator.html</anchorfile>
      <anchor>ad6ded72025672d6bad0abf13c52f2794</anchor>
      <arglist>(const Teuchos::RCP&lt; OpVec &gt; &amp;blocks)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classROL_1_1BlockOperator.html</anchorfile>
      <anchor>ad78f5d3a086d1e33256c097e894f4b9e</anchor>
      <arglist>(V &amp;Hv, const V &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1BlockOperator.html</anchorfile>
      <anchor>ac30554a42408099dcf47e8f76f9d2dd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PartitionedVector&lt; Real &gt;</type>
      <name>PV</name>
      <anchorfile>classROL_1_1BlockOperator.html</anchorfile>
      <anchor>a7da071d2b75f07c293a050568e2a211c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>LinearOperator&lt; Real &gt;</type>
      <name>OP</name>
      <anchorfile>classROL_1_1BlockOperator.html</anchorfile>
      <anchor>a538a8a702c0d3530938389f0141b5b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; OP &gt; &gt;</type>
      <name>OpVec</name>
      <anchorfile>classROL_1_1BlockOperator.html</anchorfile>
      <anchor>a7dc01c9eb89aa711da5a8ee629ef8370</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>OpVec::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1BlockOperator.html</anchorfile>
      <anchor>ab58da3dc217195f0d58ce034e8ee726e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; OpVec &gt;</type>
      <name>blocks_</name>
      <anchorfile>classROL_1_1BlockOperator.html</anchorfile>
      <anchor>a358bf70333dec211c7f44773822e1479</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::BlockOperator2</name>
    <filename>classROL_1_1BlockOperator2.html</filename>
    <templarg>Real</templarg>
    <base>ROL::LinearOperator</base>
    <member kind="function">
      <type></type>
      <name>BlockOperator2</name>
      <anchorfile>classROL_1_1BlockOperator2.html</anchorfile>
      <anchor>afc9ad1231601a92b62b5f070586891a6</anchor>
      <arglist>(Teuchos::RCP&lt; OP &gt; &amp;a11, Teuchos::RCP&lt; OP &gt; &amp;a21, Teuchos::RCP&lt; OP &gt; &amp;a12, Teuchos::RCP&lt; OP &gt; &amp;a22)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classROL_1_1BlockOperator2.html</anchorfile>
      <anchor>a5e3d5979f6bcd0cdd35bed60e2e10079</anchor>
      <arglist>(V &amp;Hv, const V &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1BlockOperator2.html</anchorfile>
      <anchor>ab3ffc32c3ff722ec6bc1c632cbdfd0cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>LinearOperator&lt; Real &gt;</type>
      <name>OP</name>
      <anchorfile>classROL_1_1BlockOperator2.html</anchorfile>
      <anchor>a2a29b717767a401a9624ced2db39588b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; OP &gt;</type>
      <name>bkop_</name>
      <anchorfile>classROL_1_1BlockOperator2.html</anchorfile>
      <anchor>a391e69d2a0bad87c388451de8774c170</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::BoundConstraint</name>
    <filename>classROL_1_1BoundConstraint.html</filename>
    <templarg>Real</templarg>
    <class kind="class">ROL::BoundConstraint::Active</class>
    <class kind="class">ROL::BoundConstraint::LowerBinding</class>
    <class kind="class">ROL::BoundConstraint::PruneBinding</class>
    <class kind="class">ROL::BoundConstraint::UpperBinding</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoundConstraint</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a5ad442929a2870674f720f2a88708404</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundConstraint</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>ad3de74460a9bbf887ff91b4e24402940</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundConstraint</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a5f23d57dd576773098f0b56ab9b845ae</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x_lo, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x_up, const Real scale=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>aebf1e9ca0c4cc8795a19f7cb79ed9378</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a74c4ff73a400cf92e2951bd69dcdead4</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>afeb7c1b5209e75d060767df93b1d38e5</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real eps=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>aeff3d87257fc0aecef5e375507b03e98</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real eps=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a082a08ccfa443dfb81dc84e06fe01914</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real eps=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a6bb6ebc98fdd11ad98327e1ae5ec590c</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real eps=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getLowerVectorRCP</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>ab0acb7000f4fc840dd2581f4cfdbb808</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getUpperVectorRCP</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a0a60fe46d20537d5e98887eb8f1806d7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVectorToUpperBound</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a14ad03848e0473b2f67b62af3bae11c2</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVectorToLowerBound</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>aab19f9a92ae52a243df93c59ad15a617</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pruneActive</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a97ce78338ef5fd16df37b4496a8b3592</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real eps=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pruneActive</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a69dc7b09fa8116757b5b88bda65492b2</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real eps=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFeasible</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a5fe1f0475e58c633762f7cdc938be63a</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>abbc775f45cb76a67d155eb960ab9e861</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deactivate</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a8b784f7fc686b56cb876d319dddd8aa7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActivated</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a9930ac6c0e4ead0599c6eec602ec8dbc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneInactive</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>ab9cd88ffab4c1ce3fc46ac60a5147441</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real eps=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerInactive</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>af2b4fae3df6bd861dffc9b9e4b0645ea</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real eps=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperInactive</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a9c2461fe82c9d59ab078d29bfd8fd076</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real eps=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneInactive</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a3b3bc8346e4edc3793e90b38c42ea48f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real eps=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerInactive</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a1829b4662c247db4f943ab8468130091</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real eps=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperInactive</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a09454ae8c67a1e1755817aef5913b09c</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real eps=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeProjectedGradient</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>aa2e64ab871a3240f86e56d17ae5cf30d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeProjectedStep</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a1de1cb05e9692516ff45e4b108fb46a3</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>dim_</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a2d3aeba623f37a049b86eea03953ae06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>x_lo_</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a9351dbd400b43be9c366391326263feb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>x_up_</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a558b0d55a40e431fe23a4e820ece144c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>scale_</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a9d2ddad05872f18a406726c232c0683f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>mask_</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a5b2276b2f0df9a6de74d03891cdd920d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>activated_</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a301906814fa7fddbaac7ff4268b98833</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>min_diff_</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a046a3988961fa48791d90923e5398073</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Elementwise::ReductionMin&lt; Real &gt;</type>
      <name>minimum_</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>a4c2953e0f5de6a1c18a89d008adfef07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ROL::BoundConstraint::PruneBinding</type>
      <name>prune_</name>
      <anchorfile>classROL_1_1BoundConstraint.html</anchorfile>
      <anchor>afca513ef5dee9b6a3cf801caecc7df49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BoundConstraint_BurgersControl</name>
    <filename>classBoundConstraint__BurgersControl.html</filename>
    <templarg></templarg>
    <base>ROL::BoundConstraint</base>
    <member kind="function">
      <type></type>
      <name>BoundConstraint_BurgersControl</name>
      <anchorfile>classBoundConstraint__BurgersControl.html</anchorfile>
      <anchor>a539824c88f341a938de014bb84de2a10</anchor>
      <arglist>(int dim)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classBoundConstraint__BurgersControl.html</anchorfile>
      <anchor>a0bb6e7edf0b47d183c47554ed510a77a</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classBoundConstraint__BurgersControl.html</anchorfile>
      <anchor>a3709a135de5812b2bdddc2e180e7c448</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classBoundConstraint__BurgersControl.html</anchorfile>
      <anchor>ad5c868dee87c21d43274e94132cf4251</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classBoundConstraint__BurgersControl.html</anchorfile>
      <anchor>a2465e3e43018eeb5b39651582a68ca69</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classBoundConstraint__BurgersControl.html</anchorfile>
      <anchor>af13f1dfdd664d9998281b93d5a1eef82</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classBoundConstraint__BurgersControl.html</anchorfile>
      <anchor>aee624af30aa8ede030bb48a65a0bd110</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToUpperBound</name>
      <anchorfile>classBoundConstraint__BurgersControl.html</anchorfile>
      <anchor>a004e270573d99595a8ec91063eecec1b</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToLowerBound</name>
      <anchorfile>classBoundConstraint__BurgersControl.html</anchorfile>
      <anchor>abcb1463bb100d353397ba940151afaae</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;l)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>dim_</name>
      <anchorfile>classBoundConstraint__BurgersControl.html</anchorfile>
      <anchor>ad2dcca2f289d22eeaf686835672b7d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>x_lo_</name>
      <anchorfile>classBoundConstraint__BurgersControl.html</anchorfile>
      <anchor>aaa843aa9e43fa161988b84067c2f99b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>x_up_</name>
      <anchorfile>classBoundConstraint__BurgersControl.html</anchorfile>
      <anchor>ad6c87209cc94adc2c5558fef789ff0cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>min_diff_</name>
      <anchorfile>classBoundConstraint__BurgersControl.html</anchorfile>
      <anchor>afe43bb11fcad1b8f931048db3de7cc15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::BoundConstraint_Partitioned</name>
    <filename>classROL_1_1BoundConstraint__Partitioned.html</filename>
  </compound>
  <compound kind="class">
    <name>ROL::BoundConstraint_SimOpt</name>
    <filename>classROL_1_1BoundConstraint__SimOpt.html</filename>
    <templarg>Real</templarg>
    <base>ROL::BoundConstraint</base>
    <member kind="function">
      <type></type>
      <name>~BoundConstraint_SimOpt</name>
      <anchorfile>classROL_1_1BoundConstraint__SimOpt.html</anchorfile>
      <anchor>af73c1fe5ec24108b491de9e5a60b7121</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundConstraint_SimOpt</name>
      <anchorfile>classROL_1_1BoundConstraint__SimOpt.html</anchorfile>
      <anchor>a29cebcad4febe1fb89f3c921ae98a6aa</anchor>
      <arglist>(const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;bnd1, const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;bnd2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1BoundConstraint__SimOpt.html</anchorfile>
      <anchor>a704c254ddbbeb5e7a938775e2a22bfb3</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classROL_1_1BoundConstraint__SimOpt.html</anchorfile>
      <anchor>a5bbfb8e64211de18afa0649554e856b6</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMultipliers</name>
      <anchorfile>classROL_1_1BoundConstraint__SimOpt.html</anchorfile>
      <anchor>a24a234fca1d11ed4070100fc2f45b9cf</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;l, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classROL_1_1BoundConstraint__SimOpt.html</anchorfile>
      <anchor>a91af3ad962b4d47a863651d8735704b3</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classROL_1_1BoundConstraint__SimOpt.html</anchorfile>
      <anchor>a013f55cf9fdd73abe32fb8fb897c92ef</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classROL_1_1BoundConstraint__SimOpt.html</anchorfile>
      <anchor>a95424a2c9de8e586cd378e6496f3f793</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classROL_1_1BoundConstraint__SimOpt.html</anchorfile>
      <anchor>a7a7cb2594adae3b97f5fb7d87bf75281</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getLowerVectorRCP</name>
      <anchorfile>classROL_1_1BoundConstraint__SimOpt.html</anchorfile>
      <anchor>a342bdda48b03f91f33c32269adafaea4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getUpperVectorRCP</name>
      <anchorfile>classROL_1_1BoundConstraint__SimOpt.html</anchorfile>
      <anchor>aaabb91643d58e3f763d5ffc9264426fc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToUpperBound</name>
      <anchorfile>classROL_1_1BoundConstraint__SimOpt.html</anchorfile>
      <anchor>a07d6e7bfa9496ccd6d74fd9e0b21360e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToLowerBound</name>
      <anchorfile>classROL_1_1BoundConstraint__SimOpt.html</anchorfile>
      <anchor>aab163808cd9352c19594e88e47863fd2</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classROL_1_1BoundConstraint__SimOpt.html</anchorfile>
      <anchor>a32a8a53b84285a9e4d77c6188f8957ea</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classROL_1_1BoundConstraint__SimOpt.html</anchorfile>
      <anchor>a688c9bbd79a8038a749695a368deadd0</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classROL_1_1BoundConstraint__SimOpt.html</anchorfile>
      <anchor>a2043a16372431e355a289caadfb90453</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt;</type>
      <name>bnd1_</name>
      <anchorfile>classROL_1_1BoundConstraint__SimOpt.html</anchorfile>
      <anchor>ab443296ea31a679db29d1a367dd49380</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt;</type>
      <name>bnd2_</name>
      <anchorfile>classROL_1_1BoundConstraint__SimOpt.html</anchorfile>
      <anchor>a7928b17e41c4b2f7f4419c974906a2ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::BoundInequalityConstraint</name>
    <filename>classROL_1_1BoundInequalityConstraint.html</filename>
    <templarg></templarg>
    <base>ROL::InequalityConstraint</base>
    <member kind="function">
      <type></type>
      <name>BoundInequalityConstraint</name>
      <anchorfile>classROL_1_1BoundInequalityConstraint.html</anchorfile>
      <anchor>a849d3fc0fcf217e8aab1570b0ae9908d</anchor>
      <arglist>(BoundConstraint&lt; Real &gt; &amp;bnd, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundInequalityConstraint</name>
      <anchorfile>classROL_1_1BoundInequalityConstraint.html</anchorfile>
      <anchor>a5d255464004665abd3944aba6916263f</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;lo, const Vector&lt; Real &gt; &amp;up)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classROL_1_1BoundInequalityConstraint.html</anchorfile>
      <anchor>ad268c7f505387b7ccf11e3e0ad43b2a6</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian</name>
      <anchorfile>classROL_1_1BoundInequalityConstraint.html</anchorfile>
      <anchor>ad557ded4993ea89f8f637b31013f4800</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classROL_1_1BoundInequalityConstraint.html</anchorfile>
      <anchor>a868cc2750ba9376f9d31d3f4f982211c</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian</name>
      <anchorfile>classROL_1_1BoundInequalityConstraint.html</anchorfile>
      <anchor>a9f7489638c5473fff2288f1a87f6c335</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahuv, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; InequalityConstraint&lt; Real &gt; &gt;</type>
      <name>lo_</name>
      <anchorfile>classROL_1_1BoundInequalityConstraint.html</anchorfile>
      <anchor>afe4d101dd60bece765107676964d37a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; InequalityConstraint&lt; Real &gt; &gt;</type>
      <name>up_</name>
      <anchorfile>classROL_1_1BoundInequalityConstraint.html</anchorfile>
      <anchor>a6835629a97cacd664a03678b6806b92c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>tmp_</name>
      <anchorfile>classROL_1_1BoundInequalityConstraint.html</anchorfile>
      <anchor>a816288e8b5a13c7d0f90e25168b73716</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::BPOEObjective</name>
    <filename>classROL_1_1BPOEObjective.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BPOEObjective</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>ad094d32fadcfe0ffb7d38c58eaa01ccb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BPOEObjective</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>a1e1678e1d3393535325efc487b8bb17e</anchor>
      <arglist>(const Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;pObj, const Real order, const Real threshold, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;vsampler, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;gsampler, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;hsampler, const bool storage=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BPOEObjective</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>a19a883a872feb6830a735ec077628f63</anchor>
      <arglist>(const Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;pObj, const Real order, const Real threshold, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;vsampler, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;gsampler, const bool storage=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BPOEObjective</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>abeb584b4150af0509b9ed8a41402f54b</anchor>
      <arglist>(const Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;pObj, const Real order, const Real threshold, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;sampler, const bool storage=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>af6f8fbc66d0853697f1ee99a19979471</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>a9f44531fb9a732b8dbed08688be7bbd3</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>a62a073acdcab019c6ebab5377c78ea70</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>a19775796772c72f74b7e4020c72b773e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>precond</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>a49ce3320641c4438ec02f277c0d8fe81</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Pv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>acfd2926a570a27284a9319db4a73c77d</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>unwrap_const_CVaR_vector</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>a33cf97f056f7288971d70a1939333e22</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;xvec, Real &amp;xvar, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>a1776f9b6b317a0cbb9d42c7b7c820010</anchor>
      <arglist>(Real &amp;val, const Vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;param, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>a5e7558262e96ebfb92a6ddc7df5c3497</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;param, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getHessVec</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>a784a3e090efefa19f606377729127e8f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;param, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt;</type>
      <name>ParametrizedObjective_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>a55c1fc621ced776a7ed3312e993bd00e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>order_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>a0abb3b5c35d8897e818d0e538b93d663</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>threshold_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>a47c2f7fcc28479a20c7db9f4959791dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt;</type>
      <name>ValueSampler_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>aae6874456ab6f00d2577a6caf13f8245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt;</type>
      <name>GradientSampler_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>aea03065a139b9bc29f6452e3ea1f1ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt;</type>
      <name>HessianSampler_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>ab1eb9a5cfd4ed7bdd8968fedc6c347e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>pointGrad_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>ac504d9b0b63d15972aea485647aafdf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>pointHess_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>aef523918045fd8178688b4da228b58d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gradient0_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>ae9b56418c5811c558c0d7fd5c63774db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>sumGrad0_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>a9c2427a8397ab017615a4c51a30ef886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gradient1_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>a37b36cbe6271720a1fe963a45ec9e70f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>sumGrad1_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>a8bb49980a3b3ea87f74edb6bb87ce358</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gradient2_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>a2349cc130ce9b0a3882b93bfeccd3fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>sumGrad2_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>aa97c515b242a79f3af799d173044a6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>hessvec_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>aa2809d1ea6fa29f2eaf7f7649d3c4d3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>sumHess_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>abbd83c51467636376106438b6acdcd33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>storage_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>ab7a0eb21151614ed6536e497340de6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>initialized_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>a3ada842ae34058ed250b6c74443831b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::vector&lt; Real &gt;, Real &gt;</type>
      <name>value_storage_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>a5345cfd4a44e32920b5000246f944aac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::vector&lt; Real &gt;, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>gradient_storage_</name>
      <anchorfile>classROL_1_1BPOEObjective.html</anchorfile>
      <anchor>abdd96e55d33666feb9fe7d3d24563798</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Brents</name>
    <filename>classROL_1_1Brents.html</filename>
    <templarg></templarg>
    <base>ROL::LineSearch</base>
    <class kind="class">ROL::Brents::testFunction</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Brents</name>
      <anchorfile>classROL_1_1Brents.html</anchorfile>
      <anchor>af8890213583d11c49f0b00232685a807</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Brents</name>
      <anchorfile>classROL_1_1Brents.html</anchorfile>
      <anchor>a9daeb13191a79be364da774c77d6eda8</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1Brents.html</anchorfile>
      <anchor>afe7d0bf1a2b34f0c8be5fa4fb134796f</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classROL_1_1Brents.html</anchorfile>
      <anchor>a28f187cf368038162312953d48538be0</anchor>
      <arglist>(Real &amp;alpha, Real &amp;fval, int &amp;ls_neval, int &amp;ls_ngrad, const Real &amp;gs, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>run_brents</name>
      <anchorfile>classROL_1_1Brents.html</anchorfile>
      <anchor>a9db1385494ca7db29b8d884a21b69da7</anchor>
      <arglist>(int &amp;neval, Real &amp;fval, Real &amp;alpha, typename LineSearch&lt; Real &gt;::ScalarFunction &amp;phi, const Real A, const Real B) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>test_brents</name>
      <anchorfile>classROL_1_1Brents.html</anchorfile>
      <anchor>a94aac91046ac6d9f5f58a3bf84407efa</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>tol_</name>
      <anchorfile>classROL_1_1Brents.html</anchorfile>
      <anchor>ae0a971c3128c8a6897c3d30b7abf6437</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>niter_</name>
      <anchorfile>classROL_1_1Brents.html</anchorfile>
      <anchor>a29a7551e24cb469fe9c2989f57afc7c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>test_</name>
      <anchorfile>classROL_1_1Brents.html</anchorfile>
      <anchor>ad1257f04e5c7eca4ba68d18debe61a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xnew_</name>
      <anchorfile>classROL_1_1Brents.html</anchorfile>
      <anchor>a0e7668b81f03a3d29388266b490dcfe7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Bundle</name>
    <filename>classROL_1_1Bundle.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Bundle</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>acae699845c15a86745910f45e470908a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bundle</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>abf66557e0ae98952aae61f6c421b0bf3</anchor>
      <arglist>(const unsigned maxSize=10, const Real coeff=0.0, const unsigned remSize=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a11aaa29d7ce68bc0ea2afe75bce12deb</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>const Real</type>
      <name>linearizationError</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>adb8dc5317af2dc428b686ecee33d9178</anchor>
      <arglist>(const unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>const Real</type>
      <name>distanceMeasure</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>af08fd7a6bc2c6eaed6f418ce3d05c34a</anchor>
      <arglist>(const unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; Real &gt; &amp;</type>
      <name>subgradient</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a687ea93161e49384ec4638c33c38079f</anchor>
      <arglist>(const unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>const Real</type>
      <name>computeAlpha</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a55ea489bf5c3697eb5d9063e32d34d95</anchor>
      <arglist>(const Real dm, const Real le) const </arglist>
    </member>
    <member kind="function">
      <type>const Real</type>
      <name>alpha</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>af29e0d21401390a2ddaa26298ac6cf65</anchor>
      <arglist>(const unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a9a1314d04defb49928894d3d4401b3a7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>aggregate</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>aae2657ff51b466db1e5a74a0438293b4</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;aggSubGrad, Real &amp;aggLinErr, Real &amp;aggDistMeas) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>ad5876af6149d22c294b007ec3346d089</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;g, const Real le, const Real dm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a39de221a960dbe0cdc2126ad09e92ffd</anchor>
      <arglist>(const bool flag, const Real linErr, const Real distMeas, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>solveDual</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a3e1afdfe19c248604eadc9463a94113c</anchor>
      <arglist>(const Real t, const unsigned maxit=1000, const Real tol=1.e-8)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Real</type>
      <name>getDualVariables</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>aaaf9050e1629f32a9f95686fcd69fdba</anchor>
      <arglist>(const unsigned i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDualVariables</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a74c97b93f233d8c4d229303a307704a8</anchor>
      <arglist>(const unsigned i, const Real val)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resetDualVariables</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a48da046c79cd7da923539f676712c3fc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>tG_</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a78a8b6a54e30c3237f77db0840fcee92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>eG_</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a2e6c447c57a0b13539196fa8b53a57e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>yG_</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>ad761b627dac6c15047cc0af2da6f6f0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gx_</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a112322bb07d30f7a662225c428e71740</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>ge_</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a21b0363908fdc239c2607e38960ac5e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a7b0619804d9219e2d3bf5fc455e82a52</anchor>
      <arglist>(const std::vector&lt; unsigned &gt; &amp;ind)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a24c86746365ed5b41f3e0e0cb3ed8ce5</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;g, const Real le, const Real dm)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeDualSolver</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a9b9125151187ac1f58436dfc22707bfd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>evaluateObjective</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a7294764d65ace5cccb0d12499658d55e</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;g, const std::vector&lt; Real &gt; &amp;x, const Real t) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>applyFullMatrix</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a54b1af640f73386981c8c4cbfdc39e84</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Hx, const std::vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>applyMatrix</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>ad8a8b37fcc20e11d6c66128496f4edeb</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Hx, const std::vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeLagMult</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a5378b155c3b548954d5426e0b83a7cc0</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;lam, const Real mu, const std::vector&lt; Real &gt; &amp;g) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>isNonnegative</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a0489d7be54494737f4a2a62bb1d290e8</anchor>
      <arglist>(unsigned &amp;ind, const std::vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>computeAlpha</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>af204f9426c17c23c2ab9252297e74df2</anchor>
      <arglist>(unsigned &amp;ind, const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;p) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>unsigned</type>
      <name>solveEQPsubproblem</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>aef9c7493f5dfabd5bac3c8dda733d0f6</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;s, Real &amp;mu, const std::vector&lt; Real &gt; &amp;g, const Real tol) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>applyPreconditioner</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a181c8bf4805fbe831177fce4df24b905</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Px, const std::vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>applyG</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a5bb9949424a3b0ff06ed2456dd741315</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Gx, const std::vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>applyPreconditioner_Identity</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a4eadb01121fdca7e51d237b0e387a468</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Px, const std::vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>applyG_Identity</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a3af055484ebf4be0d725592e2beef6e0</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Gx, const std::vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>applyPreconditioner_Jacobi</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>abd7478f48a8041e8a1355fc70cafd5a7</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Px, const std::vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>applyG_Jacobi</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a5dec3eb8a3d8c95b8e388757042e7c6e</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Gx, const std::vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>applyPreconditioner_SymGS</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a92107ce839409696022b527aa1c68842</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Px, const std::vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>applyG_SymGS</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a91cc8477e721331636c05b311cd9bca6</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Gx, const std::vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeResidualUpdate</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a09a2e8ba7a30c9ac8cbc2f70967f0f1b</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;r, std::vector&lt; Real &gt; &amp;g) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>unsigned</type>
      <name>projectedCG</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a91043ad99594a3399bad9b3609853a51</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;x, Real &amp;mu, const std::vector&lt; Real &gt; &amp;b, const Real tol) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a97b41de8d2106a8cece2a6732066e42d</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>aa3cbaef1aaef0d09310fb3793e92ea6e</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>af88ae0600b1268ca50f4eed39de06010</anchor>
      <arglist>(const Real a, const std::vector&lt; Real &gt; &amp;x, std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a1a9d39f45539a727587fcd1910fda5a7</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;x, const Real a) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a75e762f5109389aa780676db53462487</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;x, const Real a, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>unsigned</type>
      <name>solveDual_dim1</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>af4123cf8a7bed5d4381e0af79b79ae5c</anchor>
      <arglist>(const Real t, const unsigned maxit=1000, const Real tol=1.e-8)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>unsigned</type>
      <name>solveDual_dim2</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>ac5b7d53804dcdce8b8747b46a7bd2dfd</anchor>
      <arglist>(const Real t, const unsigned maxit=1000, const Real tol=1.e-8)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>unsigned</type>
      <name>solveDual_arbitrary</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a6170a8ef62b4be1c270809a73023b728</anchor>
      <arglist>(const Real t, const unsigned maxit=1000, const Real tol=1.e-8)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>project</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a1ca12b472d7ff3829210f24ba11e7031</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;v) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>computeCriticality</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>aa0c726476d3965cf1b2ce16538e7f5e6</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;g)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>subgradients_</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a27aa9b314ee21e9c37dfcb6a05cae680</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>linearizationErrors_</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a804095b2a6524d222b4420cdfcc1a2f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>distanceMeasures_</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>ae68942999dd5f5f3a6b5ce0b9e48f982</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>dualVariables_</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a2bcd2b15ec5ad020d5bddc19a4d9313d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>size_</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a95c5c0124a67780c38cc65ffc61a082a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>maxSize_</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>ad471179321e96b16bfcbcc69e8ea9c2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>remSize_</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>af79c13dab4b4292c654393f1d4896a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>coeff_</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a50df9de8a25c786243675cf1a45dc9f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isInitialized_</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>a3e6afe51ab453ce6038cbf0cd22ddfbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::set&lt; unsigned &gt;</type>
      <name>workingSet_</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>af4fce26f8dcc379b680e2329c4d34d1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::set&lt; unsigned &gt;</type>
      <name>nworkingSet_</name>
      <anchorfile>classROL_1_1Bundle.html</anchorfile>
      <anchor>ac283eb3779bef2fdaa357edd05047d3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Bundle_TT</name>
    <filename>classROL_1_1Bundle__TT.html</filename>
    <templarg></templarg>
    <base>ROL::Bundle</base>
    <member kind="function">
      <type></type>
      <name>Bundle_TT</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a53cd82078e79e2973b8496afde744e45</anchor>
      <arglist>(const unsigned maxSize=10, const Real coeff=0.0, const unsigned remSize=2)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GiTGj</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>aa927fd72fcadc89a78ea4d0e2d893544</anchor>
      <arglist>(const int i, const int j)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>solveDual</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a3c559ca71cf3eb86764530db2b9cd3a2</anchor>
      <arglist>(const Real t, const unsigned maxit=1000, const Real tol=1.e-8)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkPrimary</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a1ed02c8e62b8b1ab5d32c33cb5ede19d</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;g, const std::vector&lt; Real &gt; &amp;x, const Real t) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>swapRowsL</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a1f2a4b70b1725b5d58690c3628a0c7b1</anchor>
      <arglist>(unsigned ind1, unsigned ind2, bool trans=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateK</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>ad2afd762cd97af0a0108911dfb3f99d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addSubgradToBase</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a84d21d3d7717bc1ea50e7fbe8b73a2ea</anchor>
      <arglist>(unsigned ind, Real delta)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>deleteSubgradFromBase</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a2770f6bb6b8f37932a6231efee97345c</anchor>
      <arglist>(unsigned ind, Real tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>evaluateObjective</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>adc92c104265787fce8c5fb47cd7b351f</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;g, const std::vector&lt; Real &gt; &amp;x, const Real t) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>unsigned</type>
      <name>solveDual_dim1</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a114643bc2e0bc9ff453338b8dc73b336</anchor>
      <arglist>(const Real t, const unsigned maxit=1000, const Real tol=1.e-8)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>unsigned</type>
      <name>solveDual_dim2</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a312a126990db63a72c2dd338d3a80044</anchor>
      <arglist>(const Real t, const unsigned maxit=1000, const Real tol=1.e-8)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>solveSystem</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>aaaced3116ec4b565d1ec8c6fa15cef28</anchor>
      <arglist>(int size, char tran, Teuchos::SerialDenseMatrix&lt; int, Real &gt; &amp;L, Teuchos::SerialDenseVector&lt; int, Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>ab4a6b8e8711324669c859048900ffff1</anchor>
      <arglist>(Teuchos::SerialDenseVector&lt; int, Real &gt; &amp;v, const Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>unsigned</type>
      <name>solveDual_TT</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>ab93a394c42275143c9e043deb03d6e13</anchor>
      <arglist>(const Real t, const unsigned maxit=1000, const Real tol=1.e-8)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>maxSize_</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>ace03215ea1b26240c0ea8bcf08399c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::LAPACK&lt; int, Real &gt;</type>
      <name>lapack_</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>aebcc5c676948307e1e666fdc206eaeba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>QPStatus_</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>aaae6dfc24dd0f5b6e9b2ef49a97b90ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>INF</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a345f0cc165c3b5d4c21435d37cba575e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxind</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a76a4147957ef7865cc9f4e2209d61f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>entering_</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a400ae1c0970045ce6ab5a5a7ead6a746</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>taboo_</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a5a86191836a8b4b1f8f81edc1b1670f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>optimal_</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a8233487142fc5ea88dc67d95f4ec3a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>dependent_</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a6010759b2310f9e333fe272e55d76f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>rho_</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a6f1a348d07b26b3473428b416a6bb08e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>currSize_</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a610168e0970f1173bf451df51adaae97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>base</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a7632ec444b3e9ebfde0711ff2d9128f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::SerialDenseMatrix&lt; int, Real &gt;</type>
      <name>L</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>ae78d82ea2b1c0f699a16899c7e723417</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::SerialDenseMatrix&lt; int, Real &gt;</type>
      <name>Id</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a58fc9e5f707758431e8052098fbc71a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::SerialDenseVector&lt; int, Real &gt;</type>
      <name>tempv</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a0b100d71ee253946a485156c3b1a5617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::SerialDenseVector&lt; int, Real &gt;</type>
      <name>tempw1</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a68495b64933485f6cbfcc7c51f03842c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::SerialDenseVector&lt; int, Real &gt;</type>
      <name>tempw2</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a5d29b1b0e16968ff5816c7ff3bd1c14b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::SerialDenseVector&lt; int, Real &gt;</type>
      <name>lh</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a1a52b19e53c16b06f8cc60cd677f60b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::SerialDenseVector&lt; int, Real &gt;</type>
      <name>lj</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>ac4982499319e1339bd9f23b78b216574</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::SerialDenseVector&lt; int, Real &gt;</type>
      <name>z1</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a667f09d9a60c5d67208a21fd3beb60ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::SerialDenseVector&lt; int, Real &gt;</type>
      <name>z2</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a9ec1c378e540afd1a004dfe4715a510b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>lhNorm</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a89971cb779402f23ece877fe895f0cd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>ljNorm</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>aeae20e0cb3a35921db4efddf18cc6f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>z1Tz2</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>af1af0933e66645f6a9c7b8c5e7b17146</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>z1Tz1</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>af7d235518b6bb2c3f8cf394a358fa162</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>lhTz1</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a1274a66557beb43bc79ddaa3ac1aaab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>lhTz2</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a569aaa013273c1abc3170b503712ee8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>ljTz1</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a94fe5e0a66dfab4db0fc53017729c720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>LiMax</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a00e8deae86e07e5fd0025d30a95e0188</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>LiMin</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a1bd3b7850fe4f6f07af4aa1026efebf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>kappa</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a71d8cd02c6b973e617b3271f9748da36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>Quad</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>acda3aea0863710bf2e04d3e4401d27a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>Lin</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a41e12045319a54eba255f319e3b3ff96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>objval</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a1ea54530b2f4a6b9f9d53f1e412a6bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>minobjval</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a13cab25e78716db7da669cfb0aa7dcc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>deltaLh</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a100676c301a9d1ff989b868125132acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>deltaLj</name>
      <anchorfile>classROL_1_1Bundle__TT.html</anchorfile>
      <anchor>a0c5813a61a0fd7abce808755325a9b86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::BundleStatusTest</name>
    <filename>classROL_1_1BundleStatusTest.html</filename>
    <templarg></templarg>
    <base>ROL::StatusTest</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BundleStatusTest</name>
      <anchorfile>classROL_1_1BundleStatusTest.html</anchorfile>
      <anchor>ad36b2b46f9365f6effc6a47532d5183b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BundleStatusTest</name>
      <anchorfile>classROL_1_1BundleStatusTest.html</anchorfile>
      <anchor>a24834cf89fe995c680fb34ab760ccba4</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BundleStatusTest</name>
      <anchorfile>classROL_1_1BundleStatusTest.html</anchorfile>
      <anchor>a4ef2f61539b24019d7d434bf4d8bbd4b</anchor>
      <arglist>(Real tol=1.e-6, int max_iter=100)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>classROL_1_1BundleStatusTest.html</anchorfile>
      <anchor>ace485ea5726b832dccd66abdf4ad7740</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;state)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>tol_</name>
      <anchorfile>classROL_1_1BundleStatusTest.html</anchorfile>
      <anchor>addfc03be6a357e942b04928d872ee579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>max_iter_</name>
      <anchorfile>classROL_1_1BundleStatusTest.html</anchorfile>
      <anchor>a236404ed30e20d32c73a729fd7cdde57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::BundleStep</name>
    <filename>classROL_1_1BundleStep.html</filename>
    <templarg></templarg>
    <base>ROL::Step</base>
    <member kind="function">
      <type></type>
      <name>BundleStep</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a509bbecaf52a0dea629d7e64409d54d5</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a253c466ea3c4960cd397fbf78d1e0cd4</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>ae6cf8130200d117d7656cb2c9ab00691</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a2e6dbfecc750a109c9a9ab7a7e6b9acd</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printHeader</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a2ac47ff39605fb0a00056b230e5f3bb4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printName</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a4498d6428a976af966dec8f0bc554a4f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>print</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a4dfbbe366f621ee37191f2f35b278b22</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;algo_state, bool print_header=false) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Bundle&lt; Real &gt; &gt;</type>
      <name>bundle_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a68958e26de11e7ce1377f292b2833748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; LineSearch&lt; Real &gt; &gt;</type>
      <name>lineSearch_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a3959f67f88e9b75fc7d6e0f00f816bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>QPiter_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>aa5dc5455e932378f52229e8c79e939b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>QPmaxit_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a5c0f8285449818078e6a818abcfa2f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>QPtol_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a23dcc08aef4c335f2f94cccde5282353</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>step_flag_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a54a6d9c7def90eec3dafeb39aff0cbfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>y_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a3a1259c146c6372c89653accb258a9e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>linErrNew_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>ae2213da4b1e1b1e036166646946450fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>valueNew_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>aee45036e7353cc348ac0830717408dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>aggSubGradNew_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a8c8384369cbb6452f4032dabad73cc1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>aggSubGradOldNorm_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>aae74f0267fe7d86f1d0bd4a1e472158f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>aggLinErrNew_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>aa3cc6b5e899673bd9760f1e30d294053</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>aggLinErrOld_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>abe8de2d758b7ce8173357383e9e23eae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>aggDistMeasNew_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a069a221447de7809059273c50712ab4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>T_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>aacadc2edcf258612814866733b23619a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>tol_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>af693a68c5819afa12d94c3436f7fb1d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>m1_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>af86fa58e26938860d798cfb716371a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>m2_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a0bcbed1d42806d424107da834c5ae3a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>m3_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a34550fee0ceaf52ef04aafaeba61f254</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>nu_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a0288d5ac47f9d9fbeece2c7dbdfb0f08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ls_maxit_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a7d400362a6121e63747699cbd6c6be78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>first_print_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a782776d6e9bfcec85389bc0b536fed9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isConvex_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a6708dc57611d13fff8c071f46bbf435e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>ftol_</name>
      <anchorfile>classROL_1_1BundleStep.html</anchorfile>
      <anchor>a230a335d462c1f1ae23339d60b1bdeaa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BurgersFEM</name>
    <filename>classBurgersFEM.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BurgersFEM</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a74e8f254ab66b360280e01bd5aecd08f</anchor>
      <arglist>(int nx=128, Real nl=1.0, Real cH1=1.0, Real cL2=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_problem_data</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aa9488ac01096f3ef6bf2afeba7d6699d</anchor>
      <arglist>(const Real nu, const Real f, const Real u0, const Real u1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_dof</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aab13a70dfc9917533c1f7e446580d13b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>mesh_spacing</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a890955a71587e2d0da224c6cd0b5c924</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_L2_dot</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a29e6f02efcd6ebc221b7187ef6bf377e</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_L2_norm</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>adb24b38f5f3b97ec3477c55684243be2</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_mass</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>acdcbf0cdbf08ff7e02fe7d518df6836c</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_mass</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a0c1fff2f23894c1a7fb7bfcaf9105e26</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test_inverse_mass</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a70512313d1c9e7bd8ecb7c05ca60af51</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_H1_dot</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ad23935e4fb76d6fb5116064e1193528e</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_H1_norm</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aac24e9e37086cddad632809fa3ff8474</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_H1</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ac3cadcf77664607b1036b603bbf1a758</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_H1</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a08e68ea43cd035284fabd53d533077b9</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test_inverse_H1</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a734c4047b53183a5bfcd370155c061d3</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_residual</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aee1bb04d612ca12d921c622390b3f9a1</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;r, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a4153069d71feafe03cfc83afd3c37850</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;dl, std::vector&lt; Real &gt; &amp;d, std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>af5f8e187016823f58fb1d8d8c9af1d3a</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a369d1f92904a866f70aca95fced8098a</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ijv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>adea03f58e3d184864b8b56f8e71ee83f</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ajv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_adjoint_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>af29a2b40f80c70049f70a759e4f5c138</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;iajv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_control_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ae9637fa586c590473603b7a1967fbcd7</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_control_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ab82ede7457a93d1cb32e355b02470214</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_pde_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a88bba33cb8b20ffd19b79dfd6b9288bb</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_pde_control_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a4e6fb4820fa534520d8d7e783a4077a9</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_control_pde_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>acd76d24c2e220257581e90d2793d138b</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_control_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a5c5483dae63c1376543a41cd3e58edf7</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BurgersFEM</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a0c75fa782996c1ab7316114de7a2ea32</anchor>
      <arglist>(int nx=128, Real nu=1.e-2, Real nl=1.0, Real u0=1.0, Real u1=0.0, Real f=0.0, Real cH1=1.0, Real cL2=1.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_dof</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aab13a70dfc9917533c1f7e446580d13b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>mesh_spacing</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a890955a71587e2d0da224c6cd0b5c924</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_L2_dot</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a29e6f02efcd6ebc221b7187ef6bf377e</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_L2_norm</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>adb24b38f5f3b97ec3477c55684243be2</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_mass</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>acdcbf0cdbf08ff7e02fe7d518df6836c</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_mass</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a0c1fff2f23894c1a7fb7bfcaf9105e26</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test_inverse_mass</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a70512313d1c9e7bd8ecb7c05ca60af51</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_H1_dot</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ad23935e4fb76d6fb5116064e1193528e</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_H1_norm</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aac24e9e37086cddad632809fa3ff8474</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_H1</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ac3cadcf77664607b1036b603bbf1a758</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_H1</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a08e68ea43cd035284fabd53d533077b9</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test_inverse_H1</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a734c4047b53183a5bfcd370155c061d3</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_residual</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aee1bb04d612ca12d921c622390b3f9a1</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;r, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a4153069d71feafe03cfc83afd3c37850</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;dl, std::vector&lt; Real &gt; &amp;d, std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>af5f8e187016823f58fb1d8d8c9af1d3a</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a369d1f92904a866f70aca95fced8098a</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ijv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>adea03f58e3d184864b8b56f8e71ee83f</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ajv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_adjoint_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>af29a2b40f80c70049f70a759e4f5c138</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;iajv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_control_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ae9637fa586c590473603b7a1967fbcd7</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_control_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ab82ede7457a93d1cb32e355b02470214</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_pde_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a88bba33cb8b20ffd19b79dfd6b9288bb</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_pde_control_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a4e6fb4820fa534520d8d7e783a4077a9</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_control_pde_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>acd76d24c2e220257581e90d2793d138b</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_control_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a5c5483dae63c1376543a41cd3e58edf7</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BurgersFEM</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a74e8f254ab66b360280e01bd5aecd08f</anchor>
      <arglist>(int nx=128, Real nl=1.0, Real cH1=1.0, Real cL2=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_problem_data</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aa9488ac01096f3ef6bf2afeba7d6699d</anchor>
      <arglist>(const Real nu, const Real f, const Real u0, const Real u1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_dof</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aab13a70dfc9917533c1f7e446580d13b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>mesh_spacing</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a890955a71587e2d0da224c6cd0b5c924</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_L2_dot</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a29e6f02efcd6ebc221b7187ef6bf377e</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_L2_norm</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>adb24b38f5f3b97ec3477c55684243be2</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_mass</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>acdcbf0cdbf08ff7e02fe7d518df6836c</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_mass</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a0c1fff2f23894c1a7fb7bfcaf9105e26</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test_inverse_mass</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a70512313d1c9e7bd8ecb7c05ca60af51</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_H1_dot</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ad23935e4fb76d6fb5116064e1193528e</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_H1_norm</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aac24e9e37086cddad632809fa3ff8474</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_H1</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ac3cadcf77664607b1036b603bbf1a758</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_H1</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a08e68ea43cd035284fabd53d533077b9</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test_inverse_H1</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a734c4047b53183a5bfcd370155c061d3</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_residual</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aee1bb04d612ca12d921c622390b3f9a1</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;r, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a4153069d71feafe03cfc83afd3c37850</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;dl, std::vector&lt; Real &gt; &amp;d, std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>af5f8e187016823f58fb1d8d8c9af1d3a</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a369d1f92904a866f70aca95fced8098a</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ijv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>adea03f58e3d184864b8b56f8e71ee83f</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ajv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_adjoint_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>af29a2b40f80c70049f70a759e4f5c138</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;iajv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_control_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ae9637fa586c590473603b7a1967fbcd7</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_control_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ab82ede7457a93d1cb32e355b02470214</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_pde_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a88bba33cb8b20ffd19b79dfd6b9288bb</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_pde_control_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a4e6fb4820fa534520d8d7e783a4077a9</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_control_pde_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>acd76d24c2e220257581e90d2793d138b</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_control_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a5c5483dae63c1376543a41cd3e58edf7</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BurgersFEM</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a74e8f254ab66b360280e01bd5aecd08f</anchor>
      <arglist>(int nx=128, Real nl=1.0, Real cH1=1.0, Real cL2=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_problem_data</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aa9488ac01096f3ef6bf2afeba7d6699d</anchor>
      <arglist>(const Real nu, const Real f, const Real u0, const Real u1)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>get_viscosity</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>af44dae000812efdb8643c18a8653595c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_dof</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aab13a70dfc9917533c1f7e446580d13b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>mesh_spacing</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a890955a71587e2d0da224c6cd0b5c924</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_L2_dot</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a29e6f02efcd6ebc221b7187ef6bf377e</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_L2_norm</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>adb24b38f5f3b97ec3477c55684243be2</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_mass</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>acdcbf0cdbf08ff7e02fe7d518df6836c</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_mass</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a0c1fff2f23894c1a7fb7bfcaf9105e26</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test_inverse_mass</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a70512313d1c9e7bd8ecb7c05ca60af51</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_H1_dot</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ad23935e4fb76d6fb5116064e1193528e</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_H1_norm</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aac24e9e37086cddad632809fa3ff8474</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_H1</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ac3cadcf77664607b1036b603bbf1a758</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_H1</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a08e68ea43cd035284fabd53d533077b9</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test_inverse_H1</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a734c4047b53183a5bfcd370155c061d3</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_residual</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aee1bb04d612ca12d921c622390b3f9a1</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;r, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a4153069d71feafe03cfc83afd3c37850</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;dl, std::vector&lt; Real &gt; &amp;d, std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>af5f8e187016823f58fb1d8d8c9af1d3a</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a369d1f92904a866f70aca95fced8098a</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ijv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>adea03f58e3d184864b8b56f8e71ee83f</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ajv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_adjoint_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>af29a2b40f80c70049f70a759e4f5c138</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;iajv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_control_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ae9637fa586c590473603b7a1967fbcd7</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_control_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ab82ede7457a93d1cb32e355b02470214</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_pde_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a88bba33cb8b20ffd19b79dfd6b9288bb</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_pde_control_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a4e6fb4820fa534520d8d7e783a4077a9</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_control_pde_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>acd76d24c2e220257581e90d2793d138b</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_control_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a5c5483dae63c1376543a41cd3e58edf7</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BurgersFEM</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a74e8f254ab66b360280e01bd5aecd08f</anchor>
      <arglist>(int nx=128, Real nl=1.0, Real cH1=1.0, Real cL2=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_problem_data</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aa9488ac01096f3ef6bf2afeba7d6699d</anchor>
      <arglist>(const Real nu, const Real f, const Real u0, const Real u1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_dof</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aab13a70dfc9917533c1f7e446580d13b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>mesh_spacing</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a890955a71587e2d0da224c6cd0b5c924</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_L2_dot</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a29e6f02efcd6ebc221b7187ef6bf377e</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_L2_norm</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>adb24b38f5f3b97ec3477c55684243be2</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_mass</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>acdcbf0cdbf08ff7e02fe7d518df6836c</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_mass</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a0c1fff2f23894c1a7fb7bfcaf9105e26</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test_inverse_mass</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a70512313d1c9e7bd8ecb7c05ca60af51</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_H1_dot</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ad23935e4fb76d6fb5116064e1193528e</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>compute_H1_norm</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aac24e9e37086cddad632809fa3ff8474</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_H1</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ac3cadcf77664607b1036b603bbf1a758</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_H1</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a08e68ea43cd035284fabd53d533077b9</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test_inverse_H1</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a734c4047b53183a5bfcd370155c061d3</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_residual</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aee1bb04d612ca12d921c622390b3f9a1</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;r, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a4153069d71feafe03cfc83afd3c37850</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;dl, std::vector&lt; Real &gt; &amp;d, std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>af5f8e187016823f58fb1d8d8c9af1d3a</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a369d1f92904a866f70aca95fced8098a</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ijv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>adea03f58e3d184864b8b56f8e71ee83f</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ajv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_adjoint_pde_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>af29a2b40f80c70049f70a759e4f5c138</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;iajv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_control_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ae9637fa586c590473603b7a1967fbcd7</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_control_jacobian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ab82ede7457a93d1cb32e355b02470214</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_pde_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a88bba33cb8b20ffd19b79dfd6b9288bb</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_pde_control_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a4e6fb4820fa534520d8d7e783a4077a9</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_control_pde_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>acd76d24c2e220257581e90d2793d138b</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_control_hessian</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a5c5483dae63c1376543a41cd3e58edf7</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;ahwv, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>update</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a7a2e83bac9642404d1efb941ca7a00f5</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;s, const Real alpha=1.0) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a59f953a0834a563588267da84f217c56</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;out, const Real a, const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ac8d9f28e5e51666b688c488f5df9b3d2</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const Real alpha=0.0) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>linear_solve</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ae61e8f32911035658fd47c052d7e1e5b</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, std::vector&lt; Real &gt; &amp;dl, std::vector&lt; Real &gt; &amp;d, std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;r, const bool transpose=false) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>update</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a7a2e83bac9642404d1efb941ca7a00f5</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;s, const Real alpha=1.0) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a59f953a0834a563588267da84f217c56</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;out, const Real a, const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ac8d9f28e5e51666b688c488f5df9b3d2</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const Real alpha=0.0) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>linear_solve</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ae61e8f32911035658fd47c052d7e1e5b</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, std::vector&lt; Real &gt; &amp;dl, std::vector&lt; Real &gt; &amp;d, std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;r, const bool transpose=false) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>update</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a7a2e83bac9642404d1efb941ca7a00f5</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;s, const Real alpha=1.0) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a59f953a0834a563588267da84f217c56</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;out, const Real a, const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ac8d9f28e5e51666b688c488f5df9b3d2</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const Real alpha=0.0) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>linear_solve</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ae61e8f32911035658fd47c052d7e1e5b</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, std::vector&lt; Real &gt; &amp;dl, std::vector&lt; Real &gt; &amp;d, std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;r, const bool transpose=false) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>update</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a7a2e83bac9642404d1efb941ca7a00f5</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;s, const Real alpha=1.0) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a59f953a0834a563588267da84f217c56</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;out, const Real a, const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ac8d9f28e5e51666b688c488f5df9b3d2</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const Real alpha=0.0) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>linear_solve</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ae61e8f32911035658fd47c052d7e1e5b</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, std::vector&lt; Real &gt; &amp;dl, std::vector&lt; Real &gt; &amp;d, std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;r, const bool transpose=false) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>update</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a7a2e83bac9642404d1efb941ca7a00f5</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;s, const Real alpha=1.0) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a59f953a0834a563588267da84f217c56</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;out, const Real a, const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ac8d9f28e5e51666b688c488f5df9b3d2</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const Real alpha=0.0) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>linear_solve</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ae61e8f32911035658fd47c052d7e1e5b</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, std::vector&lt; Real &gt; &amp;dl, std::vector&lt; Real &gt; &amp;d, std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;r, const bool transpose=false) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nx_</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a626c3ce121baa928355aa7fd09f2e5dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>dx_</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a37a0e5b1fee0fa6435e7316b2ba01268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>nu_</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a7390e279ae2bc8d4f597869d4493baa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>nl_</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>aa1871c4061dfd09d4f1399476ec91cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>u0_</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a9b1172d5f0f051a71f2d567185f73a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>u1_</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>a306073bcb8d749f4c243a885e3d555f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>f_</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>ae1294d5843ddbab09937458a0a18dcfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>cH1_</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>af4a1d262ff0a04ecfb35f9b39aa189ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>cL2_</name>
      <anchorfile>classBurgersFEM.html</anchorfile>
      <anchor>af9540bcab05370eb99964e0f784229f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::CArrayVector</name>
    <filename>classROL_1_1CArrayVector.html</filename>
    <templarg>Real</templarg>
    <templarg>Element</templarg>
    <base>ROL::Vector</base>
    <member kind="function">
      <type></type>
      <name>CArrayVector</name>
      <anchorfile>classROL_1_1CArrayVector.html</anchorfile>
      <anchor>ad698f5a436abdba7a6e3cd9ea3f8792a</anchor>
      <arglist>(Element *array, unsigned int dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CArrayVector</name>
      <anchorfile>classROL_1_1CArrayVector.html</anchorfile>
      <anchor>a4131e708c6238c7b3bc7f71293beb45e</anchor>
      <arglist>(const Teuchos::ArrayRCP&lt; Element &gt; array)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CArrayVector</name>
      <anchorfile>classROL_1_1CArrayVector.html</anchorfile>
      <anchor>ac6d41dfacd39039964f32587ddd6eef1</anchor>
      <arglist>(unsigned int dim)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ArrayRCP&lt; Element &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1CArrayVector.html</anchorfile>
      <anchor>a4557633c17befd9d9eeba888d18e6fda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::ArrayRCP&lt; Element &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1CArrayVector.html</anchorfile>
      <anchor>a25bceb2c60ff6e3923cf5be8f09b2fd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classROL_1_1CArrayVector.html</anchorfile>
      <anchor>a2b9408e6df00a97eff5c571e616f8a05</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classROL_1_1CArrayVector.html</anchorfile>
      <anchor>a0d01a73b9fa2f0ba1f10fa191c540818</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classROL_1_1CArrayVector.html</anchorfile>
      <anchor>ac2b91adf209291b84379213bfaf3da0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classROL_1_1CArrayVector.html</anchorfile>
      <anchor>a0d7e01713fa121eaab097215b135ed10</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classROL_1_1CArrayVector.html</anchorfile>
      <anchor>a7a5222177656be514a87502a2c4b9e43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classROL_1_1CArrayVector.html</anchorfile>
      <anchor>a45b22b6f45b16d81f65c8d741131621f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classROL_1_1CArrayVector.html</anchorfile>
      <anchor>a28393592fc5bf5eb2f6fa3944ed76413</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>dim_</name>
      <anchorfile>classROL_1_1CArrayVector.html</anchorfile>
      <anchor>a5214d075c3c2204533050cdafe953dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::ArrayRCP&lt; Element &gt;</type>
      <name>array_</name>
      <anchorfile>classROL_1_1CArrayVector.html</anchorfile>
      <anchor>a5b87a1caf3caad07907b899ab0bf8443</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Cauchy</name>
    <filename>classROL_1_1Cauchy.html</filename>
    <templarg></templarg>
    <base>ROL::Distribution</base>
    <member kind="function">
      <type></type>
      <name>Cauchy</name>
      <anchorfile>classROL_1_1Cauchy.html</anchorfile>
      <anchor>a5da655d5ef74bcac13af0282bd45c233</anchor>
      <arglist>(const Real loc=0., const Real scale=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cauchy</name>
      <anchorfile>classROL_1_1Cauchy.html</anchorfile>
      <anchor>a04770f0bdc86711865a5c85fa37be9f7</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluatePDF</name>
      <anchorfile>classROL_1_1Cauchy.html</anchorfile>
      <anchor>a5189d44a58db0e4797e2db8680465a95</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluateCDF</name>
      <anchorfile>classROL_1_1Cauchy.html</anchorfile>
      <anchor>a6a2200b7a61933dc891e73a21a44a79a</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>integrateCDF</name>
      <anchorfile>classROL_1_1Cauchy.html</anchorfile>
      <anchor>a7abba0575e37c1d1ae6a0daea57929ca</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>invertCDF</name>
      <anchorfile>classROL_1_1Cauchy.html</anchorfile>
      <anchor>a2819c247607841e6b4e806092acadf3f</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>moment</name>
      <anchorfile>classROL_1_1Cauchy.html</anchorfile>
      <anchor>ac14434a577394652728ad3e09efd4be0</anchor>
      <arglist>(const size_t m) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>lowerBound</name>
      <anchorfile>classROL_1_1Cauchy.html</anchorfile>
      <anchor>a643673efbd105bcffdfcdf5c4cc12c01</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>upperBound</name>
      <anchorfile>classROL_1_1Cauchy.html</anchorfile>
      <anchor>ab1c72f90cad7847ecc78d145dc0381e3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1Cauchy.html</anchorfile>
      <anchor>a9d8f6ed966d8fde3220ee089cfca21c6</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>loc_</name>
      <anchorfile>classROL_1_1Cauchy.html</anchorfile>
      <anchor>a9bd916843a0923fb8dae0043f17c1394</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>scale_</name>
      <anchorfile>classROL_1_1Cauchy.html</anchorfile>
      <anchor>a7f55931c7c33d106a1c339619f07de01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::CauchyPoint</name>
    <filename>classROL_1_1CauchyPoint.html</filename>
    <templarg></templarg>
    <base>ROL::TrustRegion</base>
    <member kind="function">
      <type></type>
      <name>CauchyPoint</name>
      <anchorfile>classROL_1_1CauchyPoint.html</anchorfile>
      <anchor>a9b0c69bf0d171f7aab3a3fff14388b4a</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1CauchyPoint.html</anchorfile>
      <anchor>ab7025f8c7126e8678a4494ad300a02fc</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classROL_1_1CauchyPoint.html</anchorfile>
      <anchor>a0232fe121b65a7f0b9f55b2393211f65</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, Real &amp;snorm, Real &amp;del, int &amp;iflag, int &amp;iter, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;grad, const Real &amp;gnorm, ProjectedObjective&lt; Real &gt; &amp;pObj)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cauchypoint_unc</name>
      <anchorfile>classROL_1_1CauchyPoint.html</anchorfile>
      <anchor>a4255100dc4281df0996bcb8d01579bad</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, Real &amp;snorm, Real &amp;del, int &amp;iflag, int &amp;iter, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;grad, const Real &amp;gnorm, ProjectedObjective&lt; Real &gt; &amp;pObj)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cauchypoint_M</name>
      <anchorfile>classROL_1_1CauchyPoint.html</anchorfile>
      <anchor>a7d9c26bb34f20c6a9f418fd4471bb426</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, Real &amp;snorm, Real &amp;del, int &amp;iflag, int &amp;iter, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;grad, const Real &amp;gnorm, ProjectedObjective&lt; Real &gt; &amp;pObj)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cauchypoint_CGT</name>
      <anchorfile>classROL_1_1CauchyPoint.html</anchorfile>
      <anchor>a412be373f35351523db434f5149512ce</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, Real &amp;snorm, Real &amp;del, int &amp;iflag, int &amp;iter, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;grad, const Real &amp;gnorm, ProjectedObjective&lt; Real &gt; &amp;pObj)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>g_</name>
      <anchorfile>classROL_1_1CauchyPoint.html</anchorfile>
      <anchor>af5d082d7d074e1f443fef585e6e1bb96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>p_</name>
      <anchorfile>classROL_1_1CauchyPoint.html</anchorfile>
      <anchor>aba7036c1b38af82037b887b5344ac7ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>Hp_</name>
      <anchorfile>classROL_1_1CauchyPoint.html</anchorfile>
      <anchor>afa1b7492235cdcd3c3e21382b117c3b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>pRed_</name>
      <anchorfile>classROL_1_1CauchyPoint.html</anchorfile>
      <anchor>a40ec1064b2144510cfc746ad239d0cbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>eps_</name>
      <anchorfile>classROL_1_1CauchyPoint.html</anchorfile>
      <anchor>a26b369dbb56deef7cd44a55e89b8ae89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>alpha_</name>
      <anchorfile>classROL_1_1CauchyPoint.html</anchorfile>
      <anchor>a0ec30e6a27ac2e6c993bc039eb9f61af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useCGTCP_</name>
      <anchorfile>classROL_1_1CauchyPoint.html</anchorfile>
      <anchor>ad333552e19e236d35032fd134b71bf42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::CDFObjective</name>
    <filename>classROL_1_1CDFObjective.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>CDFObjective</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>ad49056c8377659f93b1e030dbee39cb4</anchor>
      <arglist>(const std::vector&lt; Teuchos::RCP&lt; Distribution&lt; Real &gt; &gt; &gt; &amp;dist, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman, const Real scale=1.e-2, const bool optProb=true, const bool optAtom=true)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>a4a6a2dff7dee85ca6e4f2bfa05a03483</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>ae76de83dfa15f073142e713612c2ed7e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>a8fcd6a421e3ca9b7b6103333c52bf9c9</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeQuadrature</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>a0a21ae8fdfc78afc84f4102c951738ee</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>valueCDF</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>afa98159c2553b38cfa7dd8f16310a800</anchor>
      <arglist>(const int dim, const Real loc, const ProbabilityVector&lt; Real &gt; &amp;prob, const AtomVector&lt; Real &gt; &amp;atom) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>gradientCDF</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>a49eb25d7c7eb41d24842eee277dcacee</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;gradx, std::vector&lt; Real &gt; &amp;gradp, const int dim, const Real loc, const ProbabilityVector&lt; Real &gt; &amp;prob, const AtomVector&lt; Real &gt; &amp;atom) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>hessVecCDF</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>a37de2664f5c45a1cd616eb7e2ce038f5</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;hvxx, std::vector&lt; Real &gt; &amp;hvxp, std::vector&lt; Real &gt; &amp;hvpx, std::vector&lt; Real &gt; &amp;gradx, std::vector&lt; Real &gt; &amp;gradp, Real &amp;sumx, Real &amp;sump, const int dim, const Real loc, const ProbabilityVector&lt; Real &gt; &amp;prob, const AtomVector&lt; Real &gt; &amp;atom, const ProbabilityVector&lt; Real &gt; &amp;vprob, const AtomVector&lt; Real &gt; &amp;vatom) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt;</type>
      <name>bman_</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>a09d19114be42c0551b2254ff3e284587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Distribution&lt; Real &gt; &gt; &gt;</type>
      <name>dist_</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>a23465e3c5be6d502e3b0a3d758ce62b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>lowerBound_</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>abb560fa268cde9756bd0f835c94acdf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>upperBound_</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>a5652872468a761bd92f95377a72dc01f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>dimension_</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>adaca2d408cfe6680d5137c3e1789f19b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>scale_</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>ab9f3e24af20e14f1aa1cb2adfd0a419f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>sqrt2_</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>a05f99744c6827b6a343d27bd6a612253</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>sqrtpi_</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>af72f9e88157962194495b971a45d0a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>optProb_</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>a5533aff9990cc512583200d3f1b15826</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>optAtom_</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>a1dcde667186060cdaf9b92871987002c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>pts_</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>acc001a097188bb3fdbea19378b8a20b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>wts_</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>a345571cdd72682d51d5b09a31e935205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numPoints_</name>
      <anchorfile>classROL_1_1CDFObjective.html</anchorfile>
      <anchor>a066ded0f4e820b81d241c775d496dc3e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ChebyshevKusuoka</name>
    <filename>classROL_1_1ChebyshevKusuoka.html</filename>
    <templarg>Real</templarg>
    <base>ROL::SingletonKusuoka</base>
    <member kind="function">
      <type></type>
      <name>ChebyshevKusuoka</name>
      <anchorfile>classROL_1_1ChebyshevKusuoka.html</anchorfile>
      <anchor>a8cfa60ad05d4e589da8fb35fb693bbb0</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChebyshevKusuoka</name>
      <anchorfile>classROL_1_1ChebyshevKusuoka.html</anchorfile>
      <anchor>a8cc0f96ca97c12f1f56accd34a996501</anchor>
      <arglist>(const Real lower, const Real upper, const int nQuad, const int wType, const Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt; &amp;pf)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1ChebyshevKusuoka.html</anchorfile>
      <anchor>a074d92bc979a4b98433b3611759e9235</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1ChebyshevKusuoka.html</anchorfile>
      <anchor>a9a11c253868380471eaa8969df447a41</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt;</type>
      <name>plusFunction_</name>
      <anchorfile>classROL_1_1ChebyshevKusuoka.html</anchorfile>
      <anchor>acf878e5f8871051d2c1ce5a1e000d700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>lower_</name>
      <anchorfile>classROL_1_1ChebyshevKusuoka.html</anchorfile>
      <anchor>a0857d7d216a82aeb2c9a1efc11efbb13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>upper_</name>
      <anchorfile>classROL_1_1ChebyshevKusuoka.html</anchorfile>
      <anchor>a1ca444edacd924b3f62c53b20b00ea7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nQuad_</name>
      <anchorfile>classROL_1_1ChebyshevKusuoka.html</anchorfile>
      <anchor>aa70f707294d45431d0ad30926ebeeb3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>wType_</name>
      <anchorfile>classROL_1_1ChebyshevKusuoka.html</anchorfile>
      <anchor>a2d3468c312e3975a4cf8f9faa0bbbbcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>wts_</name>
      <anchorfile>classROL_1_1ChebyshevKusuoka.html</anchorfile>
      <anchor>a5c93e05a8de61c561affef624fb7969a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>pts_</name>
      <anchorfile>classROL_1_1ChebyshevKusuoka.html</anchorfile>
      <anchor>a1a40927805313754ce077f35bf53c682</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Chi2Divergence</name>
    <filename>classROL_1_1Chi2Divergence.html</filename>
    <templarg></templarg>
    <base>ROL::FDivergence</base>
    <member kind="function">
      <type></type>
      <name>Chi2Divergence</name>
      <anchorfile>classROL_1_1Chi2Divergence.html</anchorfile>
      <anchor>a266d9c4fef3feafeb6c7e1d875b33383</anchor>
      <arglist>(const Real thresh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Chi2Divergence</name>
      <anchorfile>classROL_1_1Chi2Divergence.html</anchorfile>
      <anchor>af887daa7566bea47802565dee71b7d58</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>Fprimal</name>
      <anchorfile>classROL_1_1Chi2Divergence.html</anchorfile>
      <anchor>aa4aa94729baadd65361036bbcf08aa66</anchor>
      <arglist>(Real x, int deriv=0)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>Fdual</name>
      <anchorfile>classROL_1_1Chi2Divergence.html</anchorfile>
      <anchor>a66dc2e2ad2748f8cbdad35d92bcdee5d</anchor>
      <arglist>(Real x, int deriv=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::CoherentExpUtility</name>
    <filename>classROL_1_1CoherentExpUtility.html</filename>
    <templarg></templarg>
    <base>ROL::RiskMeasure</base>
    <member kind="function">
      <type></type>
      <name>CoherentExpUtility</name>
      <anchorfile>classROL_1_1CoherentExpUtility.html</anchorfile>
      <anchor>adca4567ab46751df3212d59b2c340e5c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1CoherentExpUtility.html</anchorfile>
      <anchor>add3ffa12ad374327e41342af5a166445</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1CoherentExpUtility.html</anchorfile>
      <anchor>aa5e577f9b4f1d525fb421b4fa226d0a7</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;v0, const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1CoherentExpUtility.html</anchorfile>
      <anchor>a154f0a4666dca71f1fa301706fbc73f4</anchor>
      <arglist>(const Real val, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getValue</name>
      <anchorfile>classROL_1_1CoherentExpUtility.html</anchorfile>
      <anchor>a4c56f1c21d16468dafed37ac617fa589</anchor>
      <arglist>(SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1CoherentExpUtility.html</anchorfile>
      <anchor>a74f2d497c1e56a55711a856da94817c3</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1CoherentExpUtility.html</anchorfile>
      <anchor>a9e251df0d6fd0414cd6c3b893aedc652</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1CoherentExpUtility.html</anchorfile>
      <anchor>a2cbcb29d4c882e039117cde4af8bc960</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real gv, const Vector&lt; Real &gt; &amp;hv, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHessVec</name>
      <anchorfile>classROL_1_1CoherentExpUtility.html</anchorfile>
      <anchor>a0f190f2f31096f905ab471dc2c1b75a0</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstReset_</name>
      <anchorfile>classROL_1_1CoherentExpUtility.html</anchorfile>
      <anchor>a99f66e193f3348b6524a9cfd60ee565a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>scaledGradient1_</name>
      <anchorfile>classROL_1_1CoherentExpUtility.html</anchorfile>
      <anchor>aa809bf194669ffd1a6694ccc4975d284</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>scaledGradient2_</name>
      <anchorfile>classROL_1_1CoherentExpUtility.html</anchorfile>
      <anchor>a9039a5edac9a592ed6f26e278104b209</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>dval1_</name>
      <anchorfile>classROL_1_1CoherentExpUtility.html</anchorfile>
      <anchor>adec4606d9fea8b45f0124a2c201547b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>dval2_</name>
      <anchorfile>classROL_1_1CoherentExpUtility.html</anchorfile>
      <anchor>a29f68437f3bcc1aa840f1c4b2dc78f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>dval3_</name>
      <anchorfile>classROL_1_1CoherentExpUtility.html</anchorfile>
      <anchor>a8e42448fb11b5d844e1a131646d88b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector1_</name>
      <anchorfile>classROL_1_1CoherentExpUtility.html</anchorfile>
      <anchor>a776a9354b2fbb6f4499500ba8bed0e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector2_</name>
      <anchorfile>classROL_1_1CoherentExpUtility.html</anchorfile>
      <anchor>aa36a2ee75ce884b6fa94d89096106332</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>xstat_</name>
      <anchorfile>classROL_1_1CoherentExpUtility.html</anchorfile>
      <anchor>a2485c841071d60ca7831acdc9ab32be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>vstat_</name>
      <anchorfile>classROL_1_1CoherentExpUtility.html</anchorfile>
      <anchor>acea05e2abe75e60e54bf6359b4003d80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::CompositeConstraint</name>
    <filename>classROL_1_1CompositeConstraint.html</filename>
    <templarg></templarg>
    <base>ROL::EqualityConstraint</base>
    <member kind="function">
      <type></type>
      <name>CompositeConstraint</name>
      <anchorfile>classROL_1_1CompositeConstraint.html</anchorfile>
      <anchor>a2da7e15c1e8266c9b9f9c364f6417ca8</anchor>
      <arglist>(const Teuchos::RCP&lt; InequalityConstraint&lt; Real &gt; &gt; &amp;incon, const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;eqcon)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompositeConstraint</name>
      <anchorfile>classROL_1_1CompositeConstraint.html</anchorfile>
      <anchor>a45bcc4ac0412c221f45d480f359919f6</anchor>
      <arglist>(const Teuchos::RCP&lt; InequalityConstraint&lt; Real &gt; &gt; &amp;incon)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberConstraintEvaluations</name>
      <anchorfile>classROL_1_1CompositeConstraint.html</anchorfile>
      <anchor>a18faa328f71597c5516d37e4849194b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1CompositeConstraint.html</anchorfile>
      <anchor>a33ea0e79f9ea1f2ec53e8f5ef8d71c1b</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classROL_1_1CompositeConstraint.html</anchorfile>
      <anchor>afcb39e73db4dadd9734e7bb744115b65</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian</name>
      <anchorfile>classROL_1_1CompositeConstraint.html</anchorfile>
      <anchor>af919dcea58b31533b1bad3fd9a5a9966</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classROL_1_1CompositeConstraint.html</anchorfile>
      <anchor>aef4e388d08551d004ba3ec49fbe33539</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian</name>
      <anchorfile>classROL_1_1CompositeConstraint.html</anchorfile>
      <anchor>aa70852b1023caad37fa606d514192c17</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahuv, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1CompositeConstraint.html</anchorfile>
      <anchor>a5144f68958cc3e06fde28ef2149149ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PartitionedVector&lt; Real &gt;</type>
      <name>PV</name>
      <anchorfile>classROL_1_1CompositeConstraint.html</anchorfile>
      <anchor>a1ba8512ecfc36817ee84ee21e7b229ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PV::size_type</type>
      <name>size_type</name>
      <anchorfile>classROL_1_1CompositeConstraint.html</anchorfile>
      <anchor>ad8f5644c1ce977ccfb34877b63e044c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; InequalityConstraint&lt; Real &gt; &gt;</type>
      <name>incon_</name>
      <anchorfile>classROL_1_1CompositeConstraint.html</anchorfile>
      <anchor>ae05f9c434a999d4092c98b31a615a61f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt;</type>
      <name>eqcon_</name>
      <anchorfile>classROL_1_1CompositeConstraint.html</anchorfile>
      <anchor>a4ecf25d84e567cf344a8c2449174916a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>hasEquality_</name>
      <anchorfile>classROL_1_1CompositeConstraint.html</anchorfile>
      <anchor>aa64e21d658d56e7d0e40bfac35e89f99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ncval_</name>
      <anchorfile>classROL_1_1CompositeConstraint.html</anchorfile>
      <anchor>a9c839526e6390eb12785b773c4acd220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>OPT</name>
      <anchorfile>classROL_1_1CompositeConstraint.html</anchorfile>
      <anchor>ad7d8ee78afe1e69f02d681013faff833</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>SLACK</name>
      <anchorfile>classROL_1_1CompositeConstraint.html</anchorfile>
      <anchor>a9512e78a551e453a9d1e3233b14b821d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>INEQ</name>
      <anchorfile>classROL_1_1CompositeConstraint.html</anchorfile>
      <anchor>ac01b954d0289da4ca7c0fbd52071492d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>EQUAL</name>
      <anchorfile>classROL_1_1CompositeConstraint.html</anchorfile>
      <anchor>a57aae38b8bf89ecfc2e610f9f3ff8379</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::InteriorPoint::CompositeConstraint</name>
    <filename>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</filename>
    <templarg></templarg>
    <base>ROL::EqualityConstraint</base>
    <member kind="function">
      <type></type>
      <name>CompositeConstraint</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</anchorfile>
      <anchor>a3240220065c7e57cf6bf8e919846d3d1</anchor>
      <arglist>(const Teuchos::RCP&lt; InequalityConstraint&lt; Real &gt; &gt; &amp;incon, const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;eqcon)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompositeConstraint</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</anchorfile>
      <anchor>a5dcfb277115c78a9997f8351a0b84df9</anchor>
      <arglist>(const Teuchos::RCP&lt; InequalityConstraint&lt; Real &gt; &gt; &amp;incon)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberConstraintEvaluations</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</anchorfile>
      <anchor>a42fb9f13000501d0696abd0e1f58e7d8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</anchorfile>
      <anchor>aede9b1eb0576c53040837921cb8050ad</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</anchorfile>
      <anchor>a1dd411e1bc2127355e0c83b4dd540aaa</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</anchorfile>
      <anchor>a0b27185844e44838308c489975943838</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</anchorfile>
      <anchor>a05a4457110f8ed10b585e77195aaf361</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</anchorfile>
      <anchor>afd8c1fc6a0c5115df161a0607b3d1ca8</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahuv, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</anchorfile>
      <anchor>a0dd4ddb8547438972226f00e4153108c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PartitionedVector&lt; Real &gt;</type>
      <name>PV</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</anchorfile>
      <anchor>a8129a9c3156212c7b28a01d271ea8915</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PV::size_type</type>
      <name>size_type</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</anchorfile>
      <anchor>acdd80859d9c6765d8b7bfaaf85c74b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; InequalityConstraint&lt; Real &gt; &gt;</type>
      <name>incon_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</anchorfile>
      <anchor>aa129728352682bcf8a8ba6ada833b567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt;</type>
      <name>eqcon_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</anchorfile>
      <anchor>a6dd57d452af19629667f8fac60159ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>hasEquality_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</anchorfile>
      <anchor>a2c880f8a5333d67aaa9f52363d14e4b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ncval_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</anchorfile>
      <anchor>a1b0d159f344e9abbc2959e654cc90673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>OPT</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</anchorfile>
      <anchor>afbb95b16501f19dce81d5d36f79688ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>SLACK</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</anchorfile>
      <anchor>a7f4dca343a7a4bf3e9fd93157d02005a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>INEQ</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</anchorfile>
      <anchor>aad22abc8172cdaca8aea2816d3c1ad65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>EQUAL</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1CompositeConstraint.html</anchorfile>
      <anchor>ad2b1eb46538fa05f934ee343d08adbc7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::CompositeObjective</name>
    <filename>classROL_1_1CompositeObjective.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>CompositeObjective</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>a816265a0fb083b31fb8f852ca4651fec</anchor>
      <arglist>(const std::vector&lt; Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &gt; &amp;obj_vec, const Teuchos::RCP&lt; StdObjective&lt; Real &gt; &gt; &amp;std_obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>a60dbee2b870e74a6a52279247091868c</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>a9df3534410522bb01d37293bb8f66640</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>ad44e183bbb6555c6a5a95d4e0a256ea4</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>a8667b29f8c3b40ec7af99ff1667256b1</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>a00b7d6694b539312fe20d44b5453760f</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>a50138e6702131f56a3accd4d455c2758</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeGradient</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>acc7ed085fc3b93b73366513a3feaca16</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeHessVec</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>aa02f6c8c502dc1c49c5c422007868765</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::vector&lt; Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &gt;</type>
      <name>obj_vec_</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>a13cbc9c6755f5d5930b84b2d77c02df7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; StdObjective&lt; Real &gt; &gt;</type>
      <name>std_obj_</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>a1d2b560a491ea3323338c86d0d815e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>obj_value_</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>aaf11a78f4f063643c7894d66e735e563</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>obj_grad_</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>ad7c064c38a58fa9639785bc2e4e131a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>obj_gv_</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>a7947b8a28bfd71c7cb4213d9bdc22e42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>obj_hess_</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>ac29be597d252a97b237e05bf8e23bc09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StdVector&lt; Real &gt; &gt;</type>
      <name>obj_value_vec_</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>ad7677ec33ffa308b082d035cf2d76e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StdVector&lt; Real &gt; &gt;</type>
      <name>obj_grad_vec_</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>a9df29b7c78030ef22d9f63b85b5f44dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StdVector&lt; Real &gt; &gt;</type>
      <name>obj_gv_vec_</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>aa90eaab0acfb325e76c12fa0ab34f0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StdVector&lt; Real &gt; &gt;</type>
      <name>obj_hess_vec_</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>ac957bfd2baef144397ec03157b28288b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>vec_grad_</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>aba194ec01ce5f060ff0147e18c1b24a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>vec_hess_</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>aba49ecdcc94cda76882fb830260b46b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isInitialized_</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>a9c84fba89e466152830be084d60ca168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isValueComputed_</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>aca2b4879b1f0047cfc8df0ddf91d82f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isGradientComputed_</name>
      <anchorfile>classROL_1_1CompositeObjective.html</anchorfile>
      <anchor>abffb7a6890b20935d3396de49cdb62ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::CompositeObjective_SimOpt</name>
    <filename>classROL_1_1CompositeObjective__SimOpt.html</filename>
    <templarg></templarg>
    <base>ROL::Objective_SimOpt</base>
    <member kind="function">
      <type></type>
      <name>CompositeObjective_SimOpt</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a4b70acd1174d69489bb944b4e4a096a2</anchor>
      <arglist>(const std::vector&lt; Teuchos::RCP&lt; Objective_SimOpt&lt; Real &gt; &gt; &gt; &amp;obj_vec, const Teuchos::RCP&lt; StdObjective&lt; Real &gt; &gt; &amp;std_obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>ae8a65c0a6071589cc243b5d34a6ece09</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>aec6eca56aa5a4f52a81a652607496cf2</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_1</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a72c113b9243eb1a0bab452c33e06ac3f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_2</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a832a6d34ea5a5c96a753cbd5610da6e5</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_11</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a848c5990dfd17a10dd2c7170e0866e51</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_12</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a8be7fb65163a02926990aa7b1ce6a0e8</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_21</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a3a1da92168fb17ae5c9038fd4b1cca21</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_22</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>abfa78793cc7aaf24f038a498e1937d68</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a43f56a1a63dbdc61dd8ebd58b945fa13</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>ac376b658013a801dc22388ff5dff6cdb</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeGradient</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a8d5004492ecb784193c7e351ae6d0aa2</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeGradient1</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a41f3eecdee7421566f064314b01234ad</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeGradient2</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a7faa01736420386c88180dce23a7728e</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeHessVec11</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a92bbb8bc89c92c7ef0162e01aea57b3f</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeHessVec12</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a66ad05cf3bddf077cf384d3373bb8483</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeHessVec21</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a39beed1269eb54dea17267dc418cb716</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeHessVec22</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a3a7619213b1bf834fbd1c795926262ca</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::vector&lt; Teuchos::RCP&lt; Objective_SimOpt&lt; Real &gt; &gt; &gt;</type>
      <name>obj_vec_</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a6888eb1e487080d8e9ac510c9b1605ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; StdObjective&lt; Real &gt; &gt;</type>
      <name>std_obj_</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a9ac2c23c0622295aad49d8b65d298f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>obj_value_</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a2769978f8274f96bcfe666df13c5117f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>obj_grad_</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a5690536ed2ada64fbcaddfbe703cb564</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>obj_gv_</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>ae4dc68bf76c6d0f18d835fb3dac38fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>obj_hess_</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a8eda479f82a45af11c481b829c21a6c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StdVector&lt; Real &gt; &gt;</type>
      <name>obj_value_vec_</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>ac463618c5fa93a531a0de27a46e67f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StdVector&lt; Real &gt; &gt;</type>
      <name>obj_grad_vec_</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>afca61e57dbb8f80438019b34a7319d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StdVector&lt; Real &gt; &gt;</type>
      <name>obj_gv_vec_</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>add2c486766a6f0a2d8f6fe6927176ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StdVector&lt; Real &gt; &gt;</type>
      <name>obj_hess_vec_</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a1e187a2a1029287aad09af5dcb87c8f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>vec_grad1_</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>ab7b0497167ffd8e084b817cc1f878e0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>vec_grad2_</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a9bbc5d84eeb502b55783140067ef68f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>vec_hess1_</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a6630becd522b0a399e028f3c73b4646d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>vec_hess2_</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a958ebfcf71ddfddf8737660dca2ee744</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isInitialized_</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a40141727efc39255262ee2935f3e8801</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isValueComputed_</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>ae04bc9c5e43dff36cf3d2d79722db10a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isGradientComputed_</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>ab1605f2016c1ffa7145be5cd35812f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isGradient1Computed_</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a0c93daed8d094b3b0fd464ead7005e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isGradient2Computed_</name>
      <anchorfile>classROL_1_1CompositeObjective__SimOpt.html</anchorfile>
      <anchor>a9f7fb6c42734f5393c17654479c09f74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::CompositeStep</name>
    <filename>classROL_1_1CompositeStep.html</filename>
    <templarg></templarg>
    <base>ROL::Step</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CompositeStep</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a7c0f1c8fd9c995902cb48f394237d9b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompositeStep</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>ab1beba14cd8d3db544180b5c3c2b4337</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a47a6ef3a40efd3a7515ad343cda6f206</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, Vector&lt; Real &gt; &amp;l, const Vector&lt; Real &gt; &amp;c, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a6d6bc1d1a7c25946e6d25593ab5386ec</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;l, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a284705572acef2a60af0959f065b8d9a</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, Vector&lt; Real &gt; &amp;l, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a176f8812aad06435861a64140a809855</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a1fbcbd1f4a751bfb426734897b52b7e4</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printHeader</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a390c08d233b8cd8fb87efdeb40093910</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printName</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a608490853dce7e56738bd98a938e9d06</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>print</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a1aacaf92941891c874554fba0a8b0beb</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;algo_state, bool pHeader=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLagrangeMultiplier</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a322349458773ae6233361ac20f9abb59</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;l, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;gf, EqualityConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeQuasinormalStep</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a4b05d8197eb14252550a5a75c581edc0</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;n, const Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x, Real delta, EqualityConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveTangentialSubproblem</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a0980b1ac52a91614ff78c3fcb5ce1585</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;t, Vector&lt; Real &gt; &amp;tCP, Vector&lt; Real &gt; &amp;Wg, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;n, const Vector&lt; Real &gt; &amp;l, Real delta, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accept</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a66e87643daca1c62b6762b43ec3b7309</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, Vector&lt; Real &gt; &amp;n, Vector&lt; Real &gt; &amp;t, Real f_new, Vector&lt; Real &gt; &amp;c_new, Vector&lt; Real &gt; &amp;gf_new, Vector&lt; Real &gt; &amp;l_new, Vector&lt; Real &gt; &amp;g_new, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;l, Real f, const Vector&lt; Real &gt; &amp;gf, const Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;g, Vector&lt; Real &gt; &amp;tCP, Vector&lt; Real &gt; &amp;Wg, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>sgn</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>ad251486da36c521478a49b945ec80796</anchor>
      <arglist>(T val)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>printInfoLS</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a8cafd1121c10b15de5c6861247e93cf6</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;res) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>setTolOSS</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a816b2da54ddfcf4d93d141b914029ffa</anchor>
      <arglist>(const Real intol) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xvec_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>ad01cc6c6df93ce964a19f72d59674ce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gvec_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a437e0b9c829e2b63e308b39e2398dbd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>cvec_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a70bf17ca96b555efbc633cd7ce87bb2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>lvec_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a4dcbe87f338e07b01b16251ae3140ea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>flagCG_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a006745850e38bae46c5a948aab8be64b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>flagAC_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a4d0d4a9eea7e6f38b04bdc70665b977d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>iterCG_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>aa74a20067016136080ee6e8df65920ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxiterCG_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>abb825073d0479ce2a929b08984f0fecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxiterOSS_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>ab2b74e3a68faf93348e16fe32481d2af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>tolCG_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a31b52f9ccab01690f724b06fb113ad61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>tolOSS_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a580624f93e4c746106558892f22d3c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>tolOSSfixed_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a77e68475d30e13e98b4511faae8c6c44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>lmhtol_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>aaf2f9b4713d8887da889528fc5e44318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>qntol_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a84c494e9e00f0bbfa6d110b042b4ec5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>pgtol_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>aeb6fca01a08022eb70718ab30685a426</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>projtol_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a47cc93e62f066ce8e12f02b742a46a99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>tangtol_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a7b256c10d7cfd93eb6c47d9ae4bf5da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>tntmax_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a581e9e86757457a63a610ffc09df370f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>zeta_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>ae3178686a7e621d450384b277b4617ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>Delta_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a7751edc13bc530a1a46b063be0d55cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>penalty_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a67a870f4fd1d434c500ac97aee0983c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>eta_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>af9757909384f66424113c6bbe507c0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>ared_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a3ee16ff70e9435981ef34ccb5b7b1624</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>pred_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a74ff2f3dbfab9bff1a6f76dc58cf0e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>snorm_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>aa54dc3274d77dd7d3a62af5f1172c608</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>nnorm_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>ae21f8d6b990af2521264dca6f758a788</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>tnorm_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>adf88670ad87c774a3cbd5f0ffdb64b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>infoQN_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>aedc6f79cf85666da6ccb34dd4bcbc11b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>infoLM_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a54d5f9920cdf519e1b949bd0f7235996</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>infoTS_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a60334ccbfda87e427218b5204e91ce4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>infoAC_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a3d72186e475d0144e4cafe3b35ac5718</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>infoLS_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a67bbf249c90e90cfa29bea80b4c9ccf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>infoALL_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a02b6f4f265f5b9a4c0fab39d1efd20e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>totalIterCG_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a7947c8c16d6513580a5a40d10af843a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>totalProj_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a93a3ad5c61a2dd9c69266bc8bd8fa8f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>totalNegCurv_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a5c7c390e1b915203b5c1733c5d39f80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>totalRef_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>aa35be906d4e8303ad7c74e22210b7e63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>totalCallLS_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>ab1716abfa576fcd3a789f6238807ac4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>totalIterLS_</name>
      <anchorfile>classROL_1_1CompositeStep.html</anchorfile>
      <anchor>a34d2d6d8dcac8ece2d8cd1181afb0999</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConDualStdVector</name>
    <filename>classConDualStdVector.html</filename>
    <templarg>Real</templarg>
    <templarg>Element</templarg>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <member kind="function">
      <type></type>
      <name>ConDualStdVector</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a5fc39bdac96deacd6e54e423ef2b432e</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt; &amp;std_vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a3f93c0ebd56ab4ee67615f84252d047b</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a68a93749b875d4a60517675c014b8bfc</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a533394ffaecff230b5d765e7c6e1b6a0</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a0edce531202b3c7c0ba4154a4d469b38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a449dc80eca8e7e27e9f0e36d0b6235b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a4fa03dd933123fda7135f29a6bed689e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>aee20be6f7280672fc3adbbbe0dab5681</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>aae1267fe189b409618410b93396c57fb</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a542561ee5b982c1cff1aceba5606c609</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a0f01ffea88cb1da6e9d7127f74b09ac0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConDualStdVector</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a5fc39bdac96deacd6e54e423ef2b432e</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt; &amp;std_vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a5d5cee481f0de6eb514b6ed7e12ad0b1</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a68a93749b875d4a60517675c014b8bfc</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>aa0ba53629099af1c66d6c07488bdc580</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a0edce531202b3c7c0ba4154a4d469b38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>aae4df7fb5da24fee53f33a83b2b06990</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a4fa03dd933123fda7135f29a6bed689e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>aee20be6f7280672fc3adbbbe0dab5681</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>af3b5b43dbc986174ffa8a4cb82eb4a99</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a542561ee5b982c1cff1aceba5606c609</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a680685dd52159faa6bdc297cc523008c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Element &gt;</type>
      <name>vector</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a442d0f853f4727414c1c0d9548accadc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ROL::Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a6edb7edbcf122e983689418666d45a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>ad3616650c4f8f90af09384370e69f345</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Element &gt;</type>
      <name>vector</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a442d0f853f4727414c1c0d9548accadc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>ad3616650c4f8f90af09384370e69f345</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt;</type>
      <name>std_vec_</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>acefa9941999b89debfc895023681b2ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; ConStdVector&lt; Real &gt; &gt;</type>
      <name>dual_vec_</name>
      <anchorfile>classConDualStdVector.html</anchorfile>
      <anchor>a0993faefa9ea907c3afd06e288ab2b59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ConjugateGradients</name>
    <filename>classROL_1_1ConjugateGradients.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Krylov</base>
    <member kind="function">
      <type></type>
      <name>ConjugateGradients</name>
      <anchorfile>classROL_1_1ConjugateGradients.html</anchorfile>
      <anchor>a82c6ba4eeffb59deb79d98033ea44b6e</anchor>
      <arglist>(Real absTol=1.e-4, Real relTol=1.e-2, unsigned maxit=100, bool useInexact=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classROL_1_1ConjugateGradients.html</anchorfile>
      <anchor>a754cef81f4ef553635ff1922eb3cad9b</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, LinearOperator&lt; Real &gt; &amp;A, const Vector&lt; Real &gt; &amp;b, LinearOperator&lt; Real &gt; &amp;M, int &amp;iter, int &amp;flag)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isInitialized_</name>
      <anchorfile>classROL_1_1ConjugateGradients.html</anchorfile>
      <anchor>ab6dba1c5d319dd3b1dd08b89ca5ffa96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useInexact_</name>
      <anchorfile>classROL_1_1ConjugateGradients.html</anchorfile>
      <anchor>a69f4c82df1d9df613b1ce98e6d5d6f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>r_</name>
      <anchorfile>classROL_1_1ConjugateGradients.html</anchorfile>
      <anchor>a4683bb82e38510c5d13f597114093fd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>v_</name>
      <anchorfile>classROL_1_1ConjugateGradients.html</anchorfile>
      <anchor>adad769208bdb4465406e0afe53164fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>p_</name>
      <anchorfile>classROL_1_1ConjugateGradients.html</anchorfile>
      <anchor>ae7765f9ee00ffef088d966b6221ec9e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>Ap_</name>
      <anchorfile>classROL_1_1ConjugateGradients.html</anchorfile>
      <anchor>abcbf13a82686c628aadf4fb3efd45332</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ConjugateResiduals</name>
    <filename>classROL_1_1ConjugateResiduals.html</filename>
    <templarg></templarg>
    <base>ROL::Krylov</base>
    <member kind="function">
      <type></type>
      <name>ConjugateResiduals</name>
      <anchorfile>classROL_1_1ConjugateResiduals.html</anchorfile>
      <anchor>ad61120cd7193542ecb931fe6caaf329d</anchor>
      <arglist>(Real absTol=1.e-4, Real relTol=1.e-2, int maxit=100, bool useInexact=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classROL_1_1ConjugateResiduals.html</anchorfile>
      <anchor>a820caa7416f76fe5d9cede1c7d4c1eff</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, LinearOperator&lt; Real &gt; &amp;A, const Vector&lt; Real &gt; &amp;b, LinearOperator&lt; Real &gt; &amp;M, int &amp;iter, int &amp;flag)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isInitialized_</name>
      <anchorfile>classROL_1_1ConjugateResiduals.html</anchorfile>
      <anchor>a3b7af2c824ad76e9e85948738664a11f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useInexact_</name>
      <anchorfile>classROL_1_1ConjugateResiduals.html</anchorfile>
      <anchor>afe8e97b213d37c1fdd660cce7de8c2ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>r_</name>
      <anchorfile>classROL_1_1ConjugateResiduals.html</anchorfile>
      <anchor>a6091cf8f75b70784fb50312116c0a3fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>v_</name>
      <anchorfile>classROL_1_1ConjugateResiduals.html</anchorfile>
      <anchor>a8f986b982917593a0a8d1ae905fefb9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>p_</name>
      <anchorfile>classROL_1_1ConjugateResiduals.html</anchorfile>
      <anchor>ae9aa1c9e4035c1b3ba3fffad52428023</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>Ap_</name>
      <anchorfile>classROL_1_1ConjugateResiduals.html</anchorfile>
      <anchor>a723ba7f7e78a96c19896ed9038c8e640</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>MAp_</name>
      <anchorfile>classROL_1_1ConjugateResiduals.html</anchorfile>
      <anchor>adfa67bff363e01024e0684e4f351149f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConStdVector</name>
    <filename>classConStdVector.html</filename>
    <templarg>Real</templarg>
    <templarg>Element</templarg>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <member kind="function">
      <type></type>
      <name>ConStdVector</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a7f5340e62c1f82bea1e7b49c7ae6e962</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt; &amp;std_vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a827478a1c6d3ce16ee3107828dc8f589</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a82d025b74cf08c3be12db8fc8bd86e99</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a1c635eb99dcabdb8e5a358a49f6b96ce</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a28e46179a581a3a18524fe9eb9b9d1fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a8a37a69d12fd58b4ef84629fb961f34c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a4de0e0732a7e71067f23b4fa81d99dc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>af6999b3b9a2c28d88dbe963238ad3c38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a8eae2e89c91eb17d3995719d0b726244</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>aea9385130d9384f728b9c031a111ba98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>aaff6d7c5da95dd856341d98a75c86530</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConStdVector</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a7f5340e62c1f82bea1e7b49c7ae6e962</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt; &amp;std_vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>af2cb8934b929fba8c94f0b83a2caf835</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a82d025b74cf08c3be12db8fc8bd86e99</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a37d94521433209e9b5cc7694a7d7bca9</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a28e46179a581a3a18524fe9eb9b9d1fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a06df0bf4355301a9178806fe56be6e38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a4de0e0732a7e71067f23b4fa81d99dc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>af6999b3b9a2c28d88dbe963238ad3c38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a84100be733324bfe9fada400eee57c0f</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>aea9385130d9384f728b9c031a111ba98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a45db845e4e292ffc9dd8726e0907256d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Element &gt;</type>
      <name>vector</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a91c5458a773446deef0296c29bf7b397</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ROL::Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a26be848a8654de9f78e56fa4363ad5ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>afe3b866339359d2f57296a4e94f27d1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Element &gt;</type>
      <name>vector</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a91c5458a773446deef0296c29bf7b397</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>afe3b866339359d2f57296a4e94f27d1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt;</type>
      <name>std_vec_</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>a7430ee3e02b7988d9b82ac7de35141b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; ConDualStdVector&lt; Real &gt; &gt;</type>
      <name>dual_vec_</name>
      <anchorfile>classConStdVector.html</anchorfile>
      <anchor>ab72ad85f520c5a765fe39ad338888d37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Constraints</name>
    <filename>classROL_1_1Constraints.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraints</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a2131a0f1aa9df518372e377fa33742c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constraints</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a9c892f4b1852ef7acbf23017ea897428</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constraints</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>ab3e6c6693281a2185361dabbca370d8d</anchor>
      <arglist>(std::vector&lt; Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &gt; &amp;ic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constraints</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a5a03d7727d0ff62c6fbcecd6c3323561</anchor>
      <arglist>(Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;ic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constraints</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a242914c079538fca5417f965ffb8032c</anchor>
      <arglist>(std::vector&lt; Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &gt; &amp;ec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constraints</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a904075ed79b18c0a3e97893b40db0274</anchor>
      <arglist>(Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;ec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constraints</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>af702c456e21b431efa56e2c9dcd23fd6</anchor>
      <arglist>(std::vector&lt; Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &gt; &amp;ic, std::vector&lt; Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &gt; &amp;ec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constraints</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a916f8337f9a3f4128b35aa5bc13154eb</anchor>
      <arglist>(Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;ic, Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;ec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constraints</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a419824f58d34513aa393387c699d64da</anchor>
      <arglist>(Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;ic, std::vector&lt; Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &gt; &amp;ec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constraints</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a048c63921027912cea979d4322b103da</anchor>
      <arglist>(std::vector&lt; Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &gt; &amp;ic, Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;ec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>aa4914abe554fbbbcca485ad773c7b5be</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>adb588afc90ea4ca9f6b9db7c0a87473b</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>ab40a1662e9123a64db61db147a24e42c</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>aa722c7e40ce8242caac4ba37c4c0bb61</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a492cfd1a4faa93df68e730825a44ac02</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a6102e91682d6fbd216a242e59215ae97</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToUpperBound</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a30f054f86a007866bba617d81de973a1</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToLowerBound</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>ad8b12f20b9d40ef92439d507f9801c77</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a8aff1a03eb284b825608bd683a1e69d8</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a6b981a1c6b127672eba412686eb4f003</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a1052d2f93f103a0bfb18e3887cf936f6</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>ab585c646e8537079111ad5e437b94070</anchor>
      <arglist>(std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt; &amp;c, const Vector&lt; Real &gt; &amp;x, const EConstraint &amp;ctype, std::vector&lt; Real &gt; &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a64e181e8d89e8e3d24c4720546488ed5</anchor>
      <arglist>(std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt; &amp;jv, std::vector&lt; Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, const bool &amp;adj, const EConstraint &amp;ctype, std::vector&lt; Real &gt; &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maptoJacobianKernel</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>aaf37fc53e1121e234d02995bc691a74b</anchor>
      <arglist>(std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt; &amp;wv, std::vector&lt; Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, const EConstraint &amp;ctype, std::vector&lt; Real &gt; &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyHessian</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>adbf21d2021fea5dbb65967d453e775de</anchor>
      <arglist>(std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt; &amp;huv, std::vector&lt; Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &gt; &amp;u, std::vector&lt; Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, const EConstraint &amp;ctype, std::vector&lt; Real &gt; &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneInactive</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>ab9ce30df0520ab35e6bb8bca266277bc</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneInactive</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>aa722d6ee411190d3cff7122165c47306</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeProjectedGradient</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a308a56712e885c177b3b57ec3a2f096b</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeProjectedStep</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a3296bdbdbe8363e160200da91478e16a</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a009f2efa3548a88bf93ff31d00285f1f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deactivate</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a33d1b9e4014f11be5b9da066c994e02c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActivated</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a007953ac22ab7bd39dadfe8fe9f1312b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>activated_</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>af63918669e3a08f8a78418d6178a1665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &gt;</type>
      <name>ic_</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>a6c194fcd41f99bd14cf6956f3531f51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &gt;</type>
      <name>ec_</name>
      <anchorfile>classROL_1_1Constraints.html</anchorfile>
      <anchor>ac487b299035a05fa067fcaab58b8581f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ConstraintStatusTest</name>
    <filename>classROL_1_1ConstraintStatusTest.html</filename>
    <templarg></templarg>
    <base>ROL::StatusTest</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstraintStatusTest</name>
      <anchorfile>classROL_1_1ConstraintStatusTest.html</anchorfile>
      <anchor>a2a7a263f03130ec05b09ab4dbb2db91d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstraintStatusTest</name>
      <anchorfile>classROL_1_1ConstraintStatusTest.html</anchorfile>
      <anchor>a5431674f279bb3a93601caa2260ac819</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstraintStatusTest</name>
      <anchorfile>classROL_1_1ConstraintStatusTest.html</anchorfile>
      <anchor>a2bbad56118316fe57a976df889aff5c1</anchor>
      <arglist>(Real gtol=1e-6, Real ctol=1e-6, Real stol=1e-12, int max_iter=100)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>classROL_1_1ConstraintStatusTest.html</anchorfile>
      <anchor>a8ade0811742565812a63ad452ecd9bd9</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;state)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>gtol_</name>
      <anchorfile>classROL_1_1ConstraintStatusTest.html</anchorfile>
      <anchor>a9f0c08a9aac6e4f4c6bdaaa0dd452790</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>ctol_</name>
      <anchorfile>classROL_1_1ConstraintStatusTest.html</anchorfile>
      <anchor>ad5385be6909d50c3b59c492b0db7b424</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>stol_</name>
      <anchorfile>classROL_1_1ConstraintStatusTest.html</anchorfile>
      <anchor>adc3d5efe577aa2060ee30967ac96041d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>max_iter_</name>
      <anchorfile>classROL_1_1ConstraintStatusTest.html</anchorfile>
      <anchor>aedd71d195d2fd4d8590029136475912a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ConvexCombinationRiskMeasure</name>
    <filename>classROL_1_1ConvexCombinationRiskMeasure.html</filename>
    <templarg>Real</templarg>
    <base>ROL::RiskMeasure</base>
    <member kind="function">
      <type></type>
      <name>ConvexCombinationRiskMeasure</name>
      <anchorfile>classROL_1_1ConvexCombinationRiskMeasure.html</anchorfile>
      <anchor>aabad2b2d4f395d3fbed9ca5870cc65a8</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1ConvexCombinationRiskMeasure.html</anchorfile>
      <anchor>a515cb4a5391f33b011bdf22bbbb7cc5b</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1ConvexCombinationRiskMeasure.html</anchorfile>
      <anchor>a0396e4336f9aa76c9abccb716bf3e5f4</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;v0, const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1ConvexCombinationRiskMeasure.html</anchorfile>
      <anchor>afa5684f3170d7f477889069bb24518f8</anchor>
      <arglist>(const Real val, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getValue</name>
      <anchorfile>classROL_1_1ConvexCombinationRiskMeasure.html</anchorfile>
      <anchor>a45d36225d997af1d6985fa459809f7d1</anchor>
      <arglist>(SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1ConvexCombinationRiskMeasure.html</anchorfile>
      <anchor>a1b362350015746cba56e24d175cb4bb7</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1ConvexCombinationRiskMeasure.html</anchorfile>
      <anchor>afcd30850f75f165edbdf6c09bca527a6</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1ConvexCombinationRiskMeasure.html</anchorfile>
      <anchor>ad0d14a24464eb8d7697dd1a1af3ebd60</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real gv, const Vector&lt; Real &gt; &amp;hv, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHessVec</name>
      <anchorfile>classROL_1_1ConvexCombinationRiskMeasure.html</anchorfile>
      <anchor>aad25e9c6e839ff36e3a26c8922d5bcfc</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1ConvexCombinationRiskMeasure.html</anchorfile>
      <anchor>a9df76649a319ceeb2cbfdf544cc75818</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1ConvexCombinationRiskMeasure.html</anchorfile>
      <anchor>ace72f4ff0fbbbb0532c638a7c9761ba0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>lambda_</name>
      <anchorfile>classROL_1_1ConvexCombinationRiskMeasure.html</anchorfile>
      <anchor>a9db69fce1add248fadce565082e17ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::ParameterList &gt;</type>
      <name>parlist_</name>
      <anchorfile>classROL_1_1ConvexCombinationRiskMeasure.html</anchorfile>
      <anchor>a541655dccf08f171a0e9713be9846d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; RiskMeasure&lt; Real &gt; &gt; &gt;</type>
      <name>risk_</name>
      <anchorfile>classROL_1_1ConvexCombinationRiskMeasure.html</anchorfile>
      <anchor>ade9957d11d09c3dca4d7312185e56502</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint</type>
      <name>size_</name>
      <anchorfile>classROL_1_1ConvexCombinationRiskMeasure.html</anchorfile>
      <anchor>ae0f78dd347c30725c49be6bd3dffa382</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector0_</name>
      <anchorfile>classROL_1_1ConvexCombinationRiskMeasure.html</anchorfile>
      <anchor>af8d1c769a700812313e6cd5254bf5ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstReset_</name>
      <anchorfile>classROL_1_1ConvexCombinationRiskMeasure.html</anchorfile>
      <anchor>a40d0ca0f523411670bb38060cf2360d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::CubicInterp</name>
    <filename>classROL_1_1CubicInterp.html</filename>
    <templarg></templarg>
    <base>ROL::LineSearch</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CubicInterp</name>
      <anchorfile>classROL_1_1CubicInterp.html</anchorfile>
      <anchor>ae4b7795087273fb4295aa25cdbe9ae4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicInterp</name>
      <anchorfile>classROL_1_1CubicInterp.html</anchorfile>
      <anchor>a519ecfae99fd4e5695d54ffc4cfbee13</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1CubicInterp.html</anchorfile>
      <anchor>a3bd617bf7c61b0fbac91b8a784db1c28</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classROL_1_1CubicInterp.html</anchorfile>
      <anchor>af67f316ea663bf44e262f1b69dd48335</anchor>
      <arglist>(Real &amp;alpha, Real &amp;fval, int &amp;ls_neval, int &amp;ls_ngrad, const Real &amp;gs, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>rho_</name>
      <anchorfile>classROL_1_1CubicInterp.html</anchorfile>
      <anchor>a2fe01e5635132cb0b78b53f495c2c9ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xnew_</name>
      <anchorfile>classROL_1_1CubicInterp.html</anchorfile>
      <anchor>ae04583e1b3e55db5fbf8958d21c80f29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::CVaR</name>
    <filename>classROL_1_1CVaR.html</filename>
    <templarg></templarg>
    <base>ROL::RiskMeasure</base>
    <member kind="function">
      <type></type>
      <name>CVaR</name>
      <anchorfile>classROL_1_1CVaR.html</anchorfile>
      <anchor>a204a7a2abf2ce02ef52c1035567ebaed</anchor>
      <arglist>(const Real prob, const Real coeff, const Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt; &amp;pf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CVaR</name>
      <anchorfile>classROL_1_1CVaR.html</anchorfile>
      <anchor>afae7a39bbb31582c2ff9db128cb99f19</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1CVaR.html</anchorfile>
      <anchor>aca8936007568d5b5a4b4e1b19c7571bf</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1CVaR.html</anchorfile>
      <anchor>ae6a2ce14334df07c9f1fbb089affafd6</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;v0, const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1CVaR.html</anchorfile>
      <anchor>ad0bb63bfa646c8b2c409c1d4f400226c</anchor>
      <arglist>(const Real val, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1CVaR.html</anchorfile>
      <anchor>ada56943a1bb0fd94736716b6c6189f12</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1CVaR.html</anchorfile>
      <anchor>a91ef1acb8de6ee7b7293576f14f319cb</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real gv, const Vector&lt; Real &gt; &amp;hv, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getValue</name>
      <anchorfile>classROL_1_1CVaR.html</anchorfile>
      <anchor>a0ab526665dedccfe01dce3b098c332d2</anchor>
      <arglist>(SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1CVaR.html</anchorfile>
      <anchor>aa40dde5ce86831f753b9abb234f9dfd5</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHessVec</name>
      <anchorfile>classROL_1_1CVaR.html</anchorfile>
      <anchor>a05f486ec1c026773dd0e3cb7fac031ff</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1CVaR.html</anchorfile>
      <anchor>a54913006398880e0a2d4322e0f048f3f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt;</type>
      <name>plusFunction_</name>
      <anchorfile>classROL_1_1CVaR.html</anchorfile>
      <anchor>a8f60ebf7e11525c88abda6085bf5bda3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>prob_</name>
      <anchorfile>classROL_1_1CVaR.html</anchorfile>
      <anchor>a5bd47b48ac7020c79b6a095827ce3a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>coeff_</name>
      <anchorfile>classROL_1_1CVaR.html</anchorfile>
      <anchor>a372a61ca6b3ae0ebdf877da847d57fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector_</name>
      <anchorfile>classROL_1_1CVaR.html</anchorfile>
      <anchor>a1e5a9eb2943659151976627fe97c737f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>xvar_</name>
      <anchorfile>classROL_1_1CVaR.html</anchorfile>
      <anchor>a63179f05f9d41bf91d3734349d5d4ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>vvar_</name>
      <anchorfile>classROL_1_1CVaR.html</anchorfile>
      <anchor>a703fa95a2e109debf37af8fa55119b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstReset_</name>
      <anchorfile>classROL_1_1CVaR.html</anchorfile>
      <anchor>a430949184c17cdf2781f10eecd11c02a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::DiagonalOperator</name>
    <filename>classROL_1_1DiagonalOperator.html</filename>
    <templarg></templarg>
    <base>ROL::LinearOperator</base>
    <member kind="function">
      <type></type>
      <name>DiagonalOperator</name>
      <anchorfile>classROL_1_1DiagonalOperator.html</anchorfile>
      <anchor>ad21fa6d45f3eba6a275866d32acb6340</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;diag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1DiagonalOperator.html</anchorfile>
      <anchor>a3212d5a454d7c33bc3c357db4336c3ff</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classROL_1_1DiagonalOperator.html</anchorfile>
      <anchor>af8cb87870ee0dd0f2fa63c69dcd9680b</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverse</name>
      <anchorfile>classROL_1_1DiagonalOperator.html</anchorfile>
      <anchor>a43d9de65920c94d71510e7dd10a2e85e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>diag_</name>
      <anchorfile>classROL_1_1DiagonalOperator.html</anchorfile>
      <anchor>a376eaf88ec756fa9ad1976b8be5fd324</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Elementwise::Multiply&lt; Real &gt;</type>
      <name>mult_</name>
      <anchorfile>classROL_1_1DiagonalOperator.html</anchorfile>
      <anchor>ad6dffd181a029856edf476e5041e42b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Elementwise::Divide&lt; Real &gt;</type>
      <name>div_</name>
      <anchorfile>classROL_1_1DiagonalOperator.html</anchorfile>
      <anchor>ad11f34667ed4065f2b4c7e082eaf091c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DiffusionEqualityConstraint</name>
    <filename>classDiffusionEqualityConstraint.html</filename>
    <templarg></templarg>
    <base>ROL::ParametrizedEqualityConstraint_SimOpt</base>
    <member kind="function">
      <type></type>
      <name>DiffusionEqualityConstraint</name>
      <anchorfile>classDiffusionEqualityConstraint.html</anchorfile>
      <anchor>a63cd841208e44e637a1051a8388237dd</anchor>
      <arglist>(const Teuchos::RCP&lt; FEM&lt; Real &gt; &gt; &amp;FEM)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSolves</name>
      <anchorfile>classDiffusionEqualityConstraint.html</anchorfile>
      <anchor>aece20a005a0f652b237fb962fc809c88</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classDiffusionEqualityConstraint.html</anchorfile>
      <anchor>aa8a271049023594b963781d347c98572</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;c, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classDiffusionEqualityConstraint.html</anchorfile>
      <anchor>a3736640e71aaa9f666aaf79cd9c498ef</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;c, ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian_1</name>
      <anchorfile>classDiffusionEqualityConstraint.html</anchorfile>
      <anchor>a3ca60dae78865573c40d7faba0283913</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian_2</name>
      <anchorfile>classDiffusionEqualityConstraint.html</anchorfile>
      <anchor>a883ebda954bd4d8e88d1664ed974a862</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseJacobian_1</name>
      <anchorfile>classDiffusionEqualityConstraint.html</anchorfile>
      <anchor>a45bea11c251e811e0064cd8eebbff43b</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian_1</name>
      <anchorfile>classDiffusionEqualityConstraint.html</anchorfile>
      <anchor>a1670d84bea414f7071cec4f1a120814d</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian_2</name>
      <anchorfile>classDiffusionEqualityConstraint.html</anchorfile>
      <anchor>a6ce02e7c2a3d0d4e7b82816c7ebb0cb6</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseAdjointJacobian_1</name>
      <anchorfile>classDiffusionEqualityConstraint.html</anchorfile>
      <anchor>ac61b7ff34de84072eaa7bf076c027fcf</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_11</name>
      <anchorfile>classDiffusionEqualityConstraint.html</anchorfile>
      <anchor>a4e3be8286ed9f8d9ea23c637075015c8</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_12</name>
      <anchorfile>classDiffusionEqualityConstraint.html</anchorfile>
      <anchor>a5ef6fef1985e00cc0783d7157cc12642</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_21</name>
      <anchorfile>classDiffusionEqualityConstraint.html</anchorfile>
      <anchor>a79f20830952586e274792701a9725052</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_22</name>
      <anchorfile>classDiffusionEqualityConstraint.html</anchorfile>
      <anchor>a9c30d908df0c87dbd50a511708adfd74</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classDiffusionEqualityConstraint.html</anchorfile>
      <anchor>a3e0dbe4707737dff859db0931c0ef414</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;s, const Real alpha=1.0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classDiffusionEqualityConstraint.html</anchorfile>
      <anchor>aae73c1d10a6e2717de3ae59878978043</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const Real alpha=0.0)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; FEM&lt; Real &gt; &gt;</type>
      <name>FEM_</name>
      <anchorfile>classDiffusionEqualityConstraint.html</anchorfile>
      <anchor>affdd127a06dcb44f46410ccdd783628c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>num_solves_</name>
      <anchorfile>classDiffusionEqualityConstraint.html</anchorfile>
      <anchor>ab859af302876ffd9d858825e538086df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DiffusionObjective</name>
    <filename>classDiffusionObjective.html</filename>
    <templarg></templarg>
    <base>ROL::ParametrizedObjective_SimOpt</base>
    <member kind="function">
      <type></type>
      <name>DiffusionObjective</name>
      <anchorfile>classDiffusionObjective.html</anchorfile>
      <anchor>ab429dff87002b6ec819b4c9714978a16</anchor>
      <arglist>(const Teuchos::RCP&lt; FEM&lt; Real &gt; &gt; fem, const Real alpha=1.e-4)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classDiffusionObjective.html</anchorfile>
      <anchor>a8611123f34625f71f663d75c2fa6bb46</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_1</name>
      <anchorfile>classDiffusionObjective.html</anchorfile>
      <anchor>a3b50d0b59b3e11b5683573badc21022a</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_2</name>
      <anchorfile>classDiffusionObjective.html</anchorfile>
      <anchor>a08fa40a3a4db1ab7d5be175ce30b88f7</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_11</name>
      <anchorfile>classDiffusionObjective.html</anchorfile>
      <anchor>a38c1ccd6ff83e6f9be4ce51fdb24edd5</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_12</name>
      <anchorfile>classDiffusionObjective.html</anchorfile>
      <anchor>a8a83649a5145919a4e6c1017fc80cdfb</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_21</name>
      <anchorfile>classDiffusionObjective.html</anchorfile>
      <anchor>a46238d7fe807116faa0f700d04d55e5e</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_22</name>
      <anchorfile>classDiffusionObjective.html</anchorfile>
      <anchor>a6ab75bb71dcff45b1b543547b1994899</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classDiffusionObjective.html</anchorfile>
      <anchor>a95baa06e690118705555c32973946bd7</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classDiffusionObjective.html</anchorfile>
      <anchor>a9b96685446997ec29b0e2ac582a7f165</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const Real alpha=0.0)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; FEM&lt; Real &gt; &gt;</type>
      <name>FEM_</name>
      <anchorfile>classDiffusionObjective.html</anchorfile>
      <anchor>ab3518e055234edf35810ca2ceadbb04a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>alpha_</name>
      <anchorfile>classDiffusionObjective.html</anchorfile>
      <anchor>ae789d722b1c2e2565816b97d01b9c635</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Dirac</name>
    <filename>classROL_1_1Dirac.html</filename>
    <templarg></templarg>
    <base>ROL::Distribution</base>
    <member kind="function">
      <type></type>
      <name>Dirac</name>
      <anchorfile>classROL_1_1Dirac.html</anchorfile>
      <anchor>a1e9c7b769f1b67a64b7e4688692f41e6</anchor>
      <arglist>(const Real data=0.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dirac</name>
      <anchorfile>classROL_1_1Dirac.html</anchorfile>
      <anchor>adcd74422b8cbfb6d85a931a94d9ba23d</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluatePDF</name>
      <anchorfile>classROL_1_1Dirac.html</anchorfile>
      <anchor>a93efb73bcaccc8e292ec19e07f16db0b</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluateCDF</name>
      <anchorfile>classROL_1_1Dirac.html</anchorfile>
      <anchor>af0d62642bd61d2f6275694bc6919c601</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>integrateCDF</name>
      <anchorfile>classROL_1_1Dirac.html</anchorfile>
      <anchor>a82a25626f1449c8c41552b4e886c039c</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>invertCDF</name>
      <anchorfile>classROL_1_1Dirac.html</anchorfile>
      <anchor>a9e68a116c505dde6f942361a1cd24aff</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>moment</name>
      <anchorfile>classROL_1_1Dirac.html</anchorfile>
      <anchor>a566380451dd5c639679dd17f59df3d27</anchor>
      <arglist>(const size_t m) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>lowerBound</name>
      <anchorfile>classROL_1_1Dirac.html</anchorfile>
      <anchor>a26b0b1e69b75667e30eadf08c169fa40</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>upperBound</name>
      <anchorfile>classROL_1_1Dirac.html</anchorfile>
      <anchor>a58bacb3cb8b2d098ee7b5b77c8edc60e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1Dirac.html</anchorfile>
      <anchor>a7bcce0c969254d2032814cab0fa061bc</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>data_</name>
      <anchorfile>classROL_1_1Dirac.html</anchorfile>
      <anchor>af988a7c86aea951498a5d88e919d679e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Distribution</name>
    <filename>classROL_1_1Distribution.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Distribution</name>
      <anchorfile>classROL_1_1Distribution.html</anchorfile>
      <anchor>ac40802efe5a2206eed9f6ca1b1c4c181</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>evaluatePDF</name>
      <anchorfile>classROL_1_1Distribution.html</anchorfile>
      <anchor>a9b67759337b37cc4dda5bdee0eda2bbc</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>evaluateCDF</name>
      <anchorfile>classROL_1_1Distribution.html</anchorfile>
      <anchor>ac75279a627f3529a9e6930715f3cef66</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>integrateCDF</name>
      <anchorfile>classROL_1_1Distribution.html</anchorfile>
      <anchor>a9fa9219c102a7b6d83be6d61179e412c</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>invertCDF</name>
      <anchorfile>classROL_1_1Distribution.html</anchorfile>
      <anchor>abda6fa4ebef8df3037d7851d44161bc0</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>moment</name>
      <anchorfile>classROL_1_1Distribution.html</anchorfile>
      <anchor>a874dd066289f839ab232a0a916b06405</anchor>
      <arglist>(const size_t m) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>lowerBound</name>
      <anchorfile>classROL_1_1Distribution.html</anchorfile>
      <anchor>aac33284493e121290d921eaeafbb5f65</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>upperBound</name>
      <anchorfile>classROL_1_1Distribution.html</anchorfile>
      <anchor>a4b6fe4f61783a93c159eac0d41275489</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>test</name>
      <anchorfile>classROL_1_1Distribution.html</anchorfile>
      <anchor>a3e4898c3212bab48ea489e2ae87e3f05</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1Distribution.html</anchorfile>
      <anchor>acb3d2cc756553938a265732be4b0f10c</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;X, const std::vector&lt; int &gt; &amp;T, std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>test_onesided</name>
      <anchorfile>classROL_1_1Distribution.html</anchorfile>
      <anchor>ad45dd71a73188fcfe2cfc744ddda985d</anchor>
      <arglist>(const Real x, std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>test_centered</name>
      <anchorfile>classROL_1_1Distribution.html</anchorfile>
      <anchor>a2328012ca7f284807fa306db7c3ba0ea</anchor>
      <arglist>(const Real x, std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>test_moment</name>
      <anchorfile>classROL_1_1Distribution.html</anchorfile>
      <anchor>a1471b61fce2b8fb74110a7baa99c57d1</anchor>
      <arglist>(const size_t order, std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::DogLeg</name>
    <filename>classROL_1_1DogLeg.html</filename>
    <templarg></templarg>
    <base>ROL::TrustRegion</base>
    <member kind="function">
      <type></type>
      <name>DogLeg</name>
      <anchorfile>classROL_1_1DogLeg.html</anchorfile>
      <anchor>a16c6b2d1bbd1d5eb413a28b0e88edf30</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1DogLeg.html</anchorfile>
      <anchor>a4e61afd5388cab848faba90303b774b2</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classROL_1_1DogLeg.html</anchorfile>
      <anchor>a85dc794f0e003f195ea0815bf5d96c4d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, Real &amp;snorm, Real &amp;del, int &amp;iflag, int &amp;iter, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;grad, const Real &amp;gnorm, ProjectedObjective&lt; Real &gt; &amp;pObj)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; CauchyPoint&lt; Real &gt; &gt;</type>
      <name>cpt_</name>
      <anchorfile>classROL_1_1DogLeg.html</anchorfile>
      <anchor>a1f789fd226bf707785dd423a3b967ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>s_</name>
      <anchorfile>classROL_1_1DogLeg.html</anchorfile>
      <anchor>aeeb8bbf29d070ffe6222862293a87c52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>Hp_</name>
      <anchorfile>classROL_1_1DogLeg.html</anchorfile>
      <anchor>a78952c6ff26b666f6e54c8d720ca6944</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>pRed_</name>
      <anchorfile>classROL_1_1DogLeg.html</anchorfile>
      <anchor>ad5d665b995823ad500d1950f7cd9c474</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::DoubleDogLeg</name>
    <filename>classROL_1_1DoubleDogLeg.html</filename>
    <templarg></templarg>
    <base>ROL::TrustRegion</base>
    <member kind="function">
      <type></type>
      <name>DoubleDogLeg</name>
      <anchorfile>classROL_1_1DoubleDogLeg.html</anchorfile>
      <anchor>a7b29aa21641a7d8bc74a41911bc6d7e9</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1DoubleDogLeg.html</anchorfile>
      <anchor>a319bf715a2bfb2264bf5ec38b6a96c77</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classROL_1_1DoubleDogLeg.html</anchorfile>
      <anchor>ad71d20e078636c2f94ad6b0a1037e7c6</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, Real &amp;snorm, Real &amp;del, int &amp;iflag, int &amp;iter, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;grad, const Real &amp;gnorm, ProjectedObjective&lt; Real &gt; &amp;pObj)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; CauchyPoint&lt; Real &gt; &gt;</type>
      <name>cpt_</name>
      <anchorfile>classROL_1_1DoubleDogLeg.html</anchorfile>
      <anchor>aed7a6f1f68c5ec9c5bf74ab3c6d6c290</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>s_</name>
      <anchorfile>classROL_1_1DoubleDogLeg.html</anchorfile>
      <anchor>aacec1df11f0ef8c49fd66f228878c457</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>v_</name>
      <anchorfile>classROL_1_1DoubleDogLeg.html</anchorfile>
      <anchor>ae2f788b75a6db1514b395bac3a800cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>Hp_</name>
      <anchorfile>classROL_1_1DoubleDogLeg.html</anchorfile>
      <anchor>ae60077665809723cd7d89ac448f6a067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>pRed_</name>
      <anchorfile>classROL_1_1DoubleDogLeg.html</anchorfile>
      <anchor>ac73780e99826812ac1bd5b6bbdba1f16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::DualAtomVector</name>
    <filename>classROL_1_1DualAtomVector.html</filename>
    <templarg></templarg>
    <base>ROL::AtomVector</base>
    <member kind="function">
      <type></type>
      <name>DualAtomVector</name>
      <anchorfile>classROL_1_1DualAtomVector.html</anchorfile>
      <anchor>ac5d8eabc1a52f0ac373fe6feef16b57e</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman, const int numMySamples, const int dimension, const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classROL_1_1DualAtomVector.html</anchorfile>
      <anchor>ad3bd5c99d7b1878ea8090f6dd9ff060d</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classROL_1_1DualAtomVector.html</anchorfile>
      <anchor>a9fd14e5c73bcdfa4b76bd492596d2577</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classROL_1_1DualAtomVector.html</anchorfile>
      <anchor>ab30669d57a42f17968e44e3eb33b3fbf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1DualAtomVector.html</anchorfile>
      <anchor>af72edee4ce2ecd2f6923e76d8fd23682</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>scale_</name>
      <anchorfile>classROL_1_1DualAtomVector.html</anchorfile>
      <anchor>ab51ba35596d70e5cfe0cca15aaf01a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PrimalAtomVector&lt; Real &gt; &gt;</type>
      <name>primal_vec_</name>
      <anchorfile>classROL_1_1DualAtomVector.html</anchorfile>
      <anchor>a27586efa3ce07a358724c76bdd4da250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isDualInitialized_</name>
      <anchorfile>classROL_1_1DualAtomVector.html</anchorfile>
      <anchor>ac05d0f724123815808675e8c5af64833</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::DualProbabilityVector</name>
    <filename>classROL_1_1DualProbabilityVector.html</filename>
    <templarg></templarg>
    <base>ROL::ProbabilityVector</base>
    <member kind="function">
      <type></type>
      <name>DualProbabilityVector</name>
      <anchorfile>classROL_1_1DualProbabilityVector.html</anchorfile>
      <anchor>a19219d81e90eec7fbd46ca2e3169df78</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman, const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classROL_1_1DualProbabilityVector.html</anchorfile>
      <anchor>ac2e9e5ee34b11de3e4b256eb2474665d</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classROL_1_1DualProbabilityVector.html</anchorfile>
      <anchor>a1329ad943272ed15b4c2b161bd6cd1bd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classROL_1_1DualProbabilityVector.html</anchorfile>
      <anchor>af2fc3dde36d8e680dad07d324136b1b5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1DualProbabilityVector.html</anchorfile>
      <anchor>a4d47c236d1f7fb0202455c2512105ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>scale_</name>
      <anchorfile>classROL_1_1DualProbabilityVector.html</anchorfile>
      <anchor>aa4c95de4c81779b4ff726ea24e7d942f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PrimalProbabilityVector&lt; Real &gt; &gt;</type>
      <name>primal_vec_</name>
      <anchorfile>classROL_1_1DualProbabilityVector.html</anchorfile>
      <anchor>a69bcac471e766d46c4b25cd732c7968e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isDualInitialized_</name>
      <anchorfile>classROL_1_1DualProbabilityVector.html</anchorfile>
      <anchor>afa00773a649a010182a13f753367e581</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::DualScaledStdVector</name>
    <filename>classROL_1_1DualScaledStdVector.html</filename>
    <templarg>Real</templarg>
    <templarg>Element</templarg>
    <base>StdVector&lt; Real &gt;</base>
    <member kind="function">
      <type></type>
      <name>DualScaledStdVector</name>
      <anchorfile>classROL_1_1DualScaledStdVector.html</anchorfile>
      <anchor>a79155d85c325bcf45bcff6adbdd06403</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt; &amp;std_vec, const Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt; &amp;scaling_vec)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classROL_1_1DualScaledStdVector.html</anchorfile>
      <anchor>a1b3b96a21891f782c29836cd864cd6f1</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classROL_1_1DualScaledStdVector.html</anchorfile>
      <anchor>af86c931f18f52163b46d3980252cfb5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classROL_1_1DualScaledStdVector.html</anchorfile>
      <anchor>aeec2a70b83b6ab37673b00f45303ddd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Element &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1DualScaledStdVector.html</anchorfile>
      <anchor>ac2dfaf3f90f6f05fbdfa25ac1fc0b4c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt;</type>
      <name>scaling_vec_</name>
      <anchorfile>classROL_1_1DualScaledStdVector.html</anchorfile>
      <anchor>a2176af952ae2d006848641530e770f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PrimalScaledStdVector&lt; Real &gt; &gt;</type>
      <name>primal_vec_</name>
      <anchorfile>classROL_1_1DualScaledStdVector.html</anchorfile>
      <anchor>a7a37a4deeb5e13145e88352de85efd2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isDualInitialized_</name>
      <anchorfile>classROL_1_1DualScaledStdVector.html</anchorfile>
      <anchor>a916418194492400a0549957f1338a18e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DyadicOperator</name>
    <filename>classDyadicOperator.html</filename>
    <templarg></templarg>
    <base>ROL::LinearOperator</base>
    <member kind="function">
      <type></type>
      <name>DyadicOperator</name>
      <anchorfile>classDyadicOperator.html</anchorfile>
      <anchor>af1852857e4fd0e970049978b502e3e75</anchor>
      <arglist>(const Teuchos::RCP&lt; const V &gt; &amp;x, const Teuchos::RCP&lt; const V &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classDyadicOperator.html</anchorfile>
      <anchor>a22154d39e2d4d0c6c7434fb8a8c0918f</anchor>
      <arglist>(V &amp;Hv, const V &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ROL::Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classDyadicOperator.html</anchorfile>
      <anchor>a2ebb6d7f28dc34c872b6508a5f3faa32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; const V &gt;</type>
      <name>x_</name>
      <anchorfile>classDyadicOperator.html</anchorfile>
      <anchor>ade0818fccf0bece551eaebb67645d4d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; const V &gt;</type>
      <name>y_</name>
      <anchorfile>classDyadicOperator.html</anchorfile>
      <anchor>a03d3ad38d8c762b8239d515d30822c9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ElementwiseVector</name>
    <filename>classROL_1_1ElementwiseVector.html</filename>
    <templarg></templarg>
    <base>ROL::Vector</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ElementwiseVector</name>
      <anchorfile>classROL_1_1ElementwiseVector.html</anchorfile>
      <anchor>a5bb592b7c39b4c15395a43f2102a7623</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classROL_1_1ElementwiseVector.html</anchorfile>
      <anchor>ad98dba70636fc8d31a62618fd7407e7b</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classROL_1_1ElementwiseVector.html</anchorfile>
      <anchor>a14601ae571fdbee8854e237cb11d8b81</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>dot</name>
      <anchorfile>classROL_1_1ElementwiseVector.html</anchorfile>
      <anchor>a402ab4a2da01fde16876a79d37e6d104</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>norm</name>
      <anchorfile>classROL_1_1ElementwiseVector.html</anchorfile>
      <anchor>a98c27d8a4f899fb2a84fa199fc0ab397</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classROL_1_1ElementwiseVector.html</anchorfile>
      <anchor>a73ae99ed78b3eb2108d93619db88a6c6</anchor>
      <arglist>(const Real alpha, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classROL_1_1ElementwiseVector.html</anchorfile>
      <anchor>adb86f40685a2b312302f588af212c3b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classROL_1_1ElementwiseVector.html</anchorfile>
      <anchor>a183169c732bf71602ddcb4bfd3915ef2</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::EqualityConstraint</name>
    <filename>classROL_1_1EqualityConstraint.html</filename>
    <templarg>Real</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EqualityConstraint</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>a8e9e87a3e10c1c1a3d94f65fe6a5dbca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>value</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>a18d209fe2d1b951a059356f0f569efad</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyJacobian</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>ab959332739542b3a0ffc3a88b113e1dd</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>ab5574e2cc56ae0d615c75c06a0ddde39</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>a53e23814afd6fd2de195f20c5ae4ac52</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;dualv, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAdjointHessian</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>a369de9128f4788b86d6aa06c254e4709</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahuv, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; Real &gt;</type>
      <name>solveAugmentedSystem</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>aa071469c23efef892ef3364fc7a61f7c</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v1, Vector&lt; Real &gt; &amp;v2, const Vector&lt; Real &gt; &amp;b1, const Vector&lt; Real &gt; &amp;b2, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyPreconditioner</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>a5da30c96807f83e1ec2fe413af85aa8a</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;pv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>ac1e150d7e1f21df7e4c6c92788e5d980</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>ab28d6ecba913e4cb707606b7e57a9782</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFeasible</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>a573db6ce928b419edb0d7572a66ee2c2</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>a0cd440d276d02c1b87e1eda8239687dd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deactivate</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>a42f04843389fb4718097b415d7499130</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActivated</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>a754c8849eb1796add4b03c19d887f47b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkApplyJacobian</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>a838479f523d1f9111752f7927430923a</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;steps, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkApplyJacobian</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>aac61a0823032853cdf288fc7d1506432</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;jv, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int numSteps=ROL_NUM_CHECKDERIV_STEPS, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkApplyAdjointJacobian</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>a6f5569b84c9a87525eba2cd588e357bf</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;ajv, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int numSteps=ROL_NUM_CHECKDERIV_STEPS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>checkAdjointConsistencyJacobian</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>aa319a70c0d8a40514efcf784a8d856cc</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;w, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, const bool printToStream=true, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>checkAdjointConsistencyJacobian</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>ac94c27064ec9c5ef4ddf692c5d9b6b7a</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;w, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;dualw, const Vector&lt; Real &gt; &amp;dualv, const bool printToStream=true, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkApplyAdjointHessian</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>aedc8ee502c76cf79a7fa3b1fb1480239</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;hv, const std::vector&lt; Real &gt; &amp;step, const bool printToScreen=true, std::ostream &amp;outStream=std::cout, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkApplyAdjointHessian</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>a628a287b906fda6ef03f4b56a45bfb4f</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;hv, const bool printToScreen=true, std::ostream &amp;outStream=std::cout, const int numSteps=ROL_NUM_CHECKDERIV_STEPS, const int order=1)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>activated_</name>
      <anchorfile>classROL_1_1EqualityConstraint.html</anchorfile>
      <anchor>ad5af4b74b1ee1485e4f8e9d9c21474ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EqualityConstraint_BurgersControl</name>
    <filename>classEqualityConstraint__BurgersControl.html</filename>
    <templarg>Real</templarg>
    <base>ROL::ParametrizedEqualityConstraint_SimOpt</base>
    <base>ROL::ParametrizedEqualityConstraint_SimOpt</base>
    <base>ROL::ParametrizedEqualityConstraint_SimOpt</base>
    <base>ROL::ParametrizedEqualityConstraint_SimOpt</base>
    <base>ROL::EqualityConstraint_SimOpt</base>
    <base>ROL::EqualityConstraint_SimOpt</base>
    <base>ROL::EqualityConstraint_SimOpt</base>
    <base>ROL::EqualityConstraint_SimOpt</base>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint_BurgersControl</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>abda35020990a06c53230b8ea5fe713a8</anchor>
      <arglist>(const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem, const bool useHessian=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ae78cfb24e3bd3596b7678b5a54414ef3</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;c, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a040d4db833f2598b4937c81134285dbe</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian_2</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>afe2cefc7c3f8ddf83889dc3fa6dfd482</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a0e777f54719bb9e32f990b68d3c9ea1a</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ijv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a08d9ed491bacf00f70287433393f0d74</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ajv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian_2</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a2dc3b3230e8529e443a3013ff73ccb0e</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseAdjointJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ada4f34187a934213ac56dab6cdd83f67</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;iajv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_11</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a03d9986783ccad4f13cb2d3aab439de7</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_12</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aaebd39f452fb56f1dc46c5db1ad9b3f9</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_21</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a4cacacc0f29544dae4f23d1ddaccc7bf</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_22</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aa4f0c15f46129ad0a8c868117759c95c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint_BurgersControl</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aba8d0a60624e6fb1f99beea0715e3eca</anchor>
      <arglist>(int nx=128, Real nu=1.e-2, Real u0=1.0, Real u1=0.0, Real f=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ae78cfb24e3bd3596b7678b5a54414ef3</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;c, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a040d4db833f2598b4937c81134285dbe</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian_2</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>afe2cefc7c3f8ddf83889dc3fa6dfd482</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a0e777f54719bb9e32f990b68d3c9ea1a</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ijv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a08d9ed491bacf00f70287433393f0d74</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ajv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian_2</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a2dc3b3230e8529e443a3013ff73ccb0e</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseAdjointJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ada4f34187a934213ac56dab6cdd83f67</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;iajv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_11</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a03d9986783ccad4f13cb2d3aab439de7</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_12</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aaebd39f452fb56f1dc46c5db1ad9b3f9</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_21</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a4cacacc0f29544dae4f23d1ddaccc7bf</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_22</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aa4f0c15f46129ad0a8c868117759c95c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint_BurgersControl</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>abc15048537c84da10fbd97967bf3eeb8</anchor>
      <arglist>(int nx=128, int nt=100, Real T=1, Real nu=1.e-2, Real u0=0.0, Real u1=0.0, Real f=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ae78cfb24e3bd3596b7678b5a54414ef3</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;c, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a3f546166a27248a921e10b1d045c0fe8</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;c, ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a040d4db833f2598b4937c81134285dbe</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian_2</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>afe2cefc7c3f8ddf83889dc3fa6dfd482</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a0e777f54719bb9e32f990b68d3c9ea1a</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ijv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a08d9ed491bacf00f70287433393f0d74</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ajv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian_2</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a2dc3b3230e8529e443a3013ff73ccb0e</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseAdjointJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>af929d22998a98e88e8d58371ebc0050e</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ijv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_11</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ab8223ecb497507d278a737688b843435</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_12</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aaebd39f452fb56f1dc46c5db1ad9b3f9</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_21</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a4cacacc0f29544dae4f23d1ddaccc7bf</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_22</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aa4f0c15f46129ad0a8c868117759c95c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint_BurgersControl</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ab5a94733bbad7931091f38215bd93275</anchor>
      <arglist>(Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem, bool useHessian=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ae78cfb24e3bd3596b7678b5a54414ef3</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;c, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a040d4db833f2598b4937c81134285dbe</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian_2</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>afe2cefc7c3f8ddf83889dc3fa6dfd482</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a0e777f54719bb9e32f990b68d3c9ea1a</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ijv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a08d9ed491bacf00f70287433393f0d74</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ajv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian_2</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a2dc3b3230e8529e443a3013ff73ccb0e</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseAdjointJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ada4f34187a934213ac56dab6cdd83f67</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;iajv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_11</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a03d9986783ccad4f13cb2d3aab439de7</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_12</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aaebd39f452fb56f1dc46c5db1ad9b3f9</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_21</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a4cacacc0f29544dae4f23d1ddaccc7bf</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_22</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aa4f0c15f46129ad0a8c868117759c95c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint_BurgersControl</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a70727d6ecb98d6e04a5e36315799b292</anchor>
      <arglist>(int nx=128)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ae78cfb24e3bd3596b7678b5a54414ef3</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;c, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a3f546166a27248a921e10b1d045c0fe8</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;c, ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a040d4db833f2598b4937c81134285dbe</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian_2</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>afe2cefc7c3f8ddf83889dc3fa6dfd482</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a0e777f54719bb9e32f990b68d3c9ea1a</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ijv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a08d9ed491bacf00f70287433393f0d74</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ajv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian_2</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a2dc3b3230e8529e443a3013ff73ccb0e</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseAdjointJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ada4f34187a934213ac56dab6cdd83f67</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;iajv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_11</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a03d9986783ccad4f13cb2d3aab439de7</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_12</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aaebd39f452fb56f1dc46c5db1ad9b3f9</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_21</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a4cacacc0f29544dae4f23d1ddaccc7bf</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_22</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aa4f0c15f46129ad0a8c868117759c95c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint_BurgersControl</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ab5a94733bbad7931091f38215bd93275</anchor>
      <arglist>(Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem, bool useHessian=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ae78cfb24e3bd3596b7678b5a54414ef3</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;c, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a040d4db833f2598b4937c81134285dbe</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian_2</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>afe2cefc7c3f8ddf83889dc3fa6dfd482</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a0e777f54719bb9e32f990b68d3c9ea1a</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ijv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a08d9ed491bacf00f70287433393f0d74</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ajv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian_2</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a2dc3b3230e8529e443a3013ff73ccb0e</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseAdjointJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ada4f34187a934213ac56dab6cdd83f67</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;iajv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_11</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a03d9986783ccad4f13cb2d3aab439de7</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_12</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aaebd39f452fb56f1dc46c5db1ad9b3f9</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_21</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a4cacacc0f29544dae4f23d1ddaccc7bf</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_22</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aa4f0c15f46129ad0a8c868117759c95c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint_BurgersControl</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ab5a94733bbad7931091f38215bd93275</anchor>
      <arglist>(Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem, bool useHessian=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ae78cfb24e3bd3596b7678b5a54414ef3</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;c, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a040d4db833f2598b4937c81134285dbe</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian_2</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>afe2cefc7c3f8ddf83889dc3fa6dfd482</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a0e777f54719bb9e32f990b68d3c9ea1a</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ijv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a08d9ed491bacf00f70287433393f0d74</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ajv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian_2</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a2dc3b3230e8529e443a3013ff73ccb0e</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseAdjointJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ada4f34187a934213ac56dab6cdd83f67</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;iajv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_11</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a03d9986783ccad4f13cb2d3aab439de7</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_12</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aaebd39f452fb56f1dc46c5db1ad9b3f9</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_21</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a4cacacc0f29544dae4f23d1ddaccc7bf</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_22</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aa4f0c15f46129ad0a8c868117759c95c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint_BurgersControl</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ab5a94733bbad7931091f38215bd93275</anchor>
      <arglist>(Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem, bool useHessian=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ae78cfb24e3bd3596b7678b5a54414ef3</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;c, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a040d4db833f2598b4937c81134285dbe</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian_2</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>afe2cefc7c3f8ddf83889dc3fa6dfd482</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a0e777f54719bb9e32f990b68d3c9ea1a</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ijv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a08d9ed491bacf00f70287433393f0d74</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ajv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian_2</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a2dc3b3230e8529e443a3013ff73ccb0e</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;jv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseAdjointJacobian_1</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ada4f34187a934213ac56dab6cdd83f67</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;iajv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_11</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a03d9986783ccad4f13cb2d3aab439de7</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_12</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aaebd39f452fb56f1dc46c5db1ad9b3f9</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_21</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a4cacacc0f29544dae4f23d1ddaccc7bf</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian_22</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aa4f0c15f46129ad0a8c868117759c95c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;ahwv, const ROL::Vector&lt; Real &gt; &amp;w, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorPrimal&lt; Real &gt;</type>
      <name>PrimalStateVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>abb27cf8376694ef126d74177995e9947</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorDual&lt; Real &gt;</type>
      <name>DualStateVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ab494bd26107082fceceeb94a9075fe45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>L2VectorPrimal&lt; Real &gt;</type>
      <name>PrimalControlVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a888c4ba91831db97ba210f5c0a4f4035</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>L2VectorDual&lt; Real &gt;</type>
      <name>DualControlVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a1d4cc29abc8dc5a802de00f046e3b9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorDual&lt; Real &gt;</type>
      <name>PrimalConstraintVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a7f424c6bf1f8d2823c99321ba7f2ef10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorPrimal&lt; Real &gt;</type>
      <name>DualConstraintVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>abb3d93949629f58b0b4c70195179c58d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorPrimal&lt; Real &gt;</type>
      <name>PrimalStateVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>abb27cf8376694ef126d74177995e9947</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorDual&lt; Real &gt;</type>
      <name>DualStateVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ab494bd26107082fceceeb94a9075fe45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>L2VectorPrimal&lt; Real &gt;</type>
      <name>PrimalControlVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a888c4ba91831db97ba210f5c0a4f4035</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>L2VectorDual&lt; Real &gt;</type>
      <name>DualControlVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a1d4cc29abc8dc5a802de00f046e3b9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorDual&lt; Real &gt;</type>
      <name>PrimalConstraintVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a7f424c6bf1f8d2823c99321ba7f2ef10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorPrimal&lt; Real &gt;</type>
      <name>DualConstraintVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>abb3d93949629f58b0b4c70195179c58d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorPrimal&lt; Real &gt;</type>
      <name>PrimalStateVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>abb27cf8376694ef126d74177995e9947</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorDual&lt; Real &gt;</type>
      <name>DualStateVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ab494bd26107082fceceeb94a9075fe45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>L2VectorPrimal&lt; Real &gt;</type>
      <name>PrimalControlVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a888c4ba91831db97ba210f5c0a4f4035</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>L2VectorDual&lt; Real &gt;</type>
      <name>DualControlVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a1d4cc29abc8dc5a802de00f046e3b9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorDual&lt; Real &gt;</type>
      <name>PrimalConstraintVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a7f424c6bf1f8d2823c99321ba7f2ef10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorPrimal&lt; Real &gt;</type>
      <name>DualConstraintVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>abb3d93949629f58b0b4c70195179c58d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorPrimal&lt; Real &gt;</type>
      <name>PrimalStateVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>abb27cf8376694ef126d74177995e9947</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorDual&lt; Real &gt;</type>
      <name>DualStateVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ab494bd26107082fceceeb94a9075fe45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>L2VectorPrimal&lt; Real &gt;</type>
      <name>PrimalControlVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a888c4ba91831db97ba210f5c0a4f4035</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>L2VectorDual&lt; Real &gt;</type>
      <name>DualControlVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a1d4cc29abc8dc5a802de00f046e3b9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorDual&lt; Real &gt;</type>
      <name>PrimalConstraintVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a7f424c6bf1f8d2823c99321ba7f2ef10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorPrimal&lt; Real &gt;</type>
      <name>DualConstraintVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>abb3d93949629f58b0b4c70195179c58d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a871328fa999d6487921815974cbd7e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorPrimal&lt; Real &gt;</type>
      <name>PrimalStateVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>abb27cf8376694ef126d74177995e9947</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorDual&lt; Real &gt;</type>
      <name>DualStateVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ab494bd26107082fceceeb94a9075fe45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>L2VectorPrimal&lt; Real &gt;</type>
      <name>PrimalControlVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a888c4ba91831db97ba210f5c0a4f4035</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>L2VectorDual&lt; Real &gt;</type>
      <name>DualControlVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a1d4cc29abc8dc5a802de00f046e3b9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorDual&lt; Real &gt;</type>
      <name>PrimalConstraintVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a7f424c6bf1f8d2823c99321ba7f2ef10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorPrimal&lt; Real &gt;</type>
      <name>DualConstraintVector</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>abb3d93949629f58b0b4c70195179c58d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>compute_norm</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a345f719b9d5fc8cd34bdd3f9c2405785</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;r)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aefbbbf70e176bf1886736f65da813e7a</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>update</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ab9fcee229bf06eca28cf04ca3b1ebb38</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;s, const Real alpha=1.0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ab9d6fde1a11bda223db90da6275f4af0</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const Real alpha=0.0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>compute_residual</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ac6fbb571ee1f354591861142ad767f60</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;r, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>compute_pde_jacobian</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a2f2f478014540864b42cb01ec9815127</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;dl, std::vector&lt; Real &gt; &amp;d, std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>linear_solve</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a6554fb97e9397eede86fb400c69002f4</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, std::vector&lt; Real &gt; &amp;dl, std::vector&lt; Real &gt; &amp;d, std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;r, const bool transpose=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>compute_norm</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a345f719b9d5fc8cd34bdd3f9c2405785</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;r)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aefbbbf70e176bf1886736f65da813e7a</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>update</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ab9fcee229bf06eca28cf04ca3b1ebb38</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;s, const Real alpha=1.0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ab9d6fde1a11bda223db90da6275f4af0</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const Real alpha=0.0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>compute_residual</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ac44141501bfa2df9445a6ebb128a1407</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;r, const std::vector&lt; Real &gt; &amp;uold, const std::vector&lt; Real &gt; &amp;zold, const std::vector&lt; Real &gt; &amp;unew, const std::vector&lt; Real &gt; &amp;znew)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>compute_pde_jacobian</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a2f2f478014540864b42cb01ec9815127</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;dl, std::vector&lt; Real &gt; &amp;d, std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>apply_pde_jacobian_new</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>abf65c288f22bc303d13e140bd4524e38</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, bool adjoint=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>apply_pde_jacobian_old</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a938b1b4403ea902c1b91b147e07c8aaa</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, bool adjoint=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>apply_pde_jacobian</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aca24943197c211fa680c5c5f696d4f2b</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;vold, const std::vector&lt; Real &gt; &amp;uold, const std::vector&lt; Real &gt; &amp;vnew, const std::vector&lt; Real &gt; unew, bool adjoint=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>apply_pde_hessian</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a48903410d5d4ce31c17ca8912c3434b8</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;hv, const std::vector&lt; Real &gt; &amp;wold, const std::vector&lt; Real &gt; &amp;vold, const std::vector&lt; Real &gt; &amp;wnew, const std::vector&lt; Real &gt; &amp;vnew)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>apply_control_jacobian</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ae957f6c58ef0427574fd5d112600a7b4</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, bool adjoint=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>run_newton</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a14a7d6c94ee967d9d0f76ab4635b9543</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;znew, const std::vector&lt; Real &gt; &amp;uold, const std::vector&lt; Real &gt; &amp;zold)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>linear_solve</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ab0ed085ee1b3ad37e87cb974fd11691a</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;dl, const std::vector&lt; Real &gt; &amp;d, const std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;r, const bool transpose=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>compute_norm</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a345f719b9d5fc8cd34bdd3f9c2405785</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;r)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>aefbbbf70e176bf1886736f65da813e7a</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>update</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ab9fcee229bf06eca28cf04ca3b1ebb38</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;s, const Real alpha=1.0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ab9d6fde1a11bda223db90da6275f4af0</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const Real alpha=0.0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>compute_residual</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ac6fbb571ee1f354591861142ad767f60</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;r, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>compute_pde_jacobian</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a2f2f478014540864b42cb01ec9815127</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;dl, std::vector&lt; Real &gt; &amp;d, std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>linear_solve</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a6554fb97e9397eede86fb400c69002f4</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, std::vector&lt; Real &gt; &amp;dl, std::vector&lt; Real &gt; &amp;d, std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;r, const bool transpose=false)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt;</type>
      <name>fem_</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a64ff3f6e50b28d460c259671d2bad0f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useHessian_</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a35a6e20dda5e99ea252aff3f0e074693</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nx_</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a07666b58c630bf68be93a89fb1b2ce96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>dx_</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ac1b71a296aafec87b7f8fe9f62271d66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>nu_</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ab3305a661e1da36c3e9461602ca80e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>u0_</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ac4a4601f8b662dcedc4cc40cef5f4083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>u1_</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a8252f22996967517470c40c31389cd5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>f_</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a65bbcb4668b5e79cd59ae63375cf5b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>nx_</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>ab9ed9eec12e2d36b100dff6aa8ab6a1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>nt_</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a752cddceed521860eef3dd433aad1302</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>T_</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a29c81eab3735e2a0887fd536f56b755c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>dt_</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a702224b06015a99b77b7baf8e482edd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>u_init_</name>
      <anchorfile>classEqualityConstraint__BurgersControl.html</anchorfile>
      <anchor>a466c42cef56b3d9c2ebcd483afdc1dcb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::EqualityConstraint_HS32</name>
    <filename>classROL_1_1ZOO_1_1EqualityConstraint__HS32.html</filename>
    <templarg></templarg>
    <base>ROL::EqualityConstraint</base>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS32.html</anchorfile>
      <anchor>a8b771a6d1f927d41110c20cb641fd455</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS32.html</anchorfile>
      <anchor>aa94eabf1692358c856abbdb63c94e9d9</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS32.html</anchorfile>
      <anchor>a445a944dcf7706aae65abc10cdb3116d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS32.html</anchorfile>
      <anchor>aaac1e6bad480817908cf5b54621ab5ff</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahuv, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS32.html</anchorfile>
      <anchor>aba68e371b9d72dabd10cde16a4a0f2f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS32.html</anchorfile>
      <anchor>a7e8977069282e6864ee80f54c36be18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS32.html</anchorfile>
      <anchor>a0eaf13ee04c39138c81c278a4bcea3d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS32.html</anchorfile>
      <anchor>a70bba757db661c67383119114dde88aa</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS32.html</anchorfile>
      <anchor>abdf5df009214f42c100c7ccf2406505e</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::EqualityConstraint_HS39a</name>
    <filename>classROL_1_1ZOO_1_1EqualityConstraint__HS39a.html</filename>
    <templarg></templarg>
    <base>ROL::EqualityConstraint</base>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS39a.html</anchorfile>
      <anchor>ac97f22f37af3b48d417b16f998ab0db6</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS39a.html</anchorfile>
      <anchor>ad6b08d07b9ad5c3f2d65d5ca7f86ac42</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS39a.html</anchorfile>
      <anchor>ac416acadccbf1de61a323c3c891c7352</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS39a.html</anchorfile>
      <anchor>a6453c8804e4b60d3ea36cddee30d43c2</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahuv, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS39a.html</anchorfile>
      <anchor>ad440922c865ac9c27e28a84d2d9658f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS39a.html</anchorfile>
      <anchor>a78e935389f3d117c2fcf79a98a81f4dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::EqualityConstraint_HS39b</name>
    <filename>classROL_1_1ZOO_1_1EqualityConstraint__HS39b.html</filename>
    <templarg></templarg>
    <base>ROL::EqualityConstraint</base>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS39b.html</anchorfile>
      <anchor>a2e94825e3374ad204d78c416f4c4fdbe</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS39b.html</anchorfile>
      <anchor>a0e9f4d59cc85d2bd4054f15941e7408c</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS39b.html</anchorfile>
      <anchor>ae8e8f19509c0e9e08969dbbbddf1f942</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS39b.html</anchorfile>
      <anchor>a1fcbdaf46d0a48a044b6949fb595ba0e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahuv, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS39b.html</anchorfile>
      <anchor>a95fffa6a7828d9bb856a5199e687bccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__HS39b.html</anchorfile>
      <anchor>a8a473d708cbb0fa99bd05967b2635f31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::EqualityConstraint_Partitioned</name>
    <filename>classROL_1_1EqualityConstraint__Partitioned.html</filename>
    <templarg></templarg>
    <base>ROL::EqualityConstraint</base>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint_Partitioned</name>
      <anchorfile>classROL_1_1EqualityConstraint__Partitioned.html</anchorfile>
      <anchor>adb822c047d0cee17caa796819b9ac72b</anchor>
      <arglist>(const std::vector&lt; Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &gt; &amp;con)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EqualityConstraint_Partitioned</name>
      <anchorfile>classROL_1_1EqualityConstraint__Partitioned.html</anchorfile>
      <anchor>aa0f48b099665770175933c539f22e34b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>value</name>
      <anchorfile>classROL_1_1EqualityConstraint__Partitioned.html</anchorfile>
      <anchor>a7c0ca68be8275ba43265474584f9a737</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyJacobian</name>
      <anchorfile>classROL_1_1EqualityConstraint__Partitioned.html</anchorfile>
      <anchor>a0d880f3ed25ec9baaa234a5621e1d4d4</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classROL_1_1EqualityConstraint__Partitioned.html</anchorfile>
      <anchor>a94909e524998dbbf45a8370f1121e793</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAdjointHessian</name>
      <anchorfile>classROL_1_1EqualityConstraint__Partitioned.html</anchorfile>
      <anchor>af863285909fd3d880e26d588e72636cb</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahuv, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyPreconditioner</name>
      <anchorfile>classROL_1_1EqualityConstraint__Partitioned.html</anchorfile>
      <anchor>a1a8b3c91b487260d170edbef6407505e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;pv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>EqualityConstraint&lt; Real &gt;</type>
      <name>EC</name>
      <anchorfile>classROL_1_1EqualityConstraint__Partitioned.html</anchorfile>
      <anchor>aea66a8b5fbd2a3a518bfb5b566dc5cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1EqualityConstraint__Partitioned.html</anchorfile>
      <anchor>aa77d3f3ef24c1b657dc988872311c30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PartitionedVector&lt; Real &gt;</type>
      <name>PV</name>
      <anchorfile>classROL_1_1EqualityConstraint__Partitioned.html</anchorfile>
      <anchor>adfa7c24b47b615ca367521a77fb3be8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1EqualityConstraint__Partitioned.html</anchorfile>
      <anchor>ad5ae721f98e552a9d241725e46448188</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::vector&lt; Teuchos::RCP&lt; EC &gt; &gt;</type>
      <name>con_</name>
      <anchorfile>classROL_1_1EqualityConstraint__Partitioned.html</anchorfile>
      <anchor>a0dcc1c52cf01ceda0b60f7118ad26128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint</type>
      <name>dim_</name>
      <anchorfile>classROL_1_1EqualityConstraint__Partitioned.html</anchorfile>
      <anchor>ae7b35008fb9ac4439722141f7eddebc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::EqualityConstraint_SimOpt</name>
    <filename>classROL_1_1EqualityConstraint__SimOpt.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">ROL::EqualityConstraint</base>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint_SimOpt</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>acbb1427f53cf7fa6d6e6ca0efe007890</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a181a6a027c51b7f7d5d560afc0d3557b</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update_1</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a62c8769cb92d27dbd149c3c189f6f291</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update_2</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>aca3adcbbd57b770d370ae46940d80afc</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;z, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>value</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>af0e79c96ed3867603c9cfb69288f4765</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>acaf5872ad8c44d985903205bbe23cdb4</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSolveParameters</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a30e6648ab0ee17a63f3084992c6f7ed4</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyJacobian_1</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a01687373d067b3008c7e3d7ec078141e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyJacobian_2</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a2e3bc256182c1067b78f52ce49478776</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyInverseJacobian_1</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a78e0df9b63240802ed3195553bc77762</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ijv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAdjointJacobian_1</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a32cf88aa4d8d35c01a2fdc5ba771400a</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAdjointJacobian_1</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>ad1b49618f01b9ea7e85f254a112d0c60</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, const Vector&lt; Real &gt; &amp;dualv, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAdjointJacobian_2</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>aa6a767f33fefd5e1903e3bf709df8917</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAdjointJacobian_2</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>af164152a214c9f5c2615836803ea10e7</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, const Vector&lt; Real &gt; &amp;dualv, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyInverseAdjointJacobian_1</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a46426e3e37702080ae31d022c30fff17</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;iajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAdjointHessian_11</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a76c5105fefc09e3feaf4479c19d52859</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahwv, const Vector&lt; Real &gt; &amp;w, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAdjointHessian_12</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a9c98b34beace90e4e708d368d9dbc039</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahwv, const Vector&lt; Real &gt; &amp;w, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAdjointHessian_21</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a61d86d97ea65d1e97f216cc5f24b2f94</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahwv, const Vector&lt; Real &gt; &amp;w, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAdjointHessian_22</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a65da91d8c7b6323026891c1350a47152</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahwv, const Vector&lt; Real &gt; &amp;w, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; Real &gt;</type>
      <name>solveAugmentedSystem</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a1473d71260d2fe1b0fc3bb339c8140d7</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v1, Vector&lt; Real &gt; &amp;v2, const Vector&lt; Real &gt; &amp;b1, const Vector&lt; Real &gt; &amp;b2, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyPreconditioner</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a42a944d31331b6dbaad42ea960fb22d4</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;pv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a1bf9bc6ed0c206f73a982c97458c9753</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFeasible</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>ab54449379b8b6d9d19227ed827df017d</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>value</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a4b504e6cb702f79eeeebd4529a4fab49</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyJacobian</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a5c95c8156736d83343667f95570e9a4a</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>ae1d91e05cc97cae01fbffe2c89d0a65b</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAdjointHessian</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a7fa690a32916f5cc7f45f92130c44772</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahwv, const Vector&lt; Real &gt; &amp;w, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>checkSolve</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>accfadf202d73153a23ddd6fe425cb5af</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, const ROL::Vector&lt; Real &gt; &amp;c, const bool printToStream=true, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>checkAdjointConsistencyJacobian_1</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a81f50d9dd05cb73fd47d24e83ddc5068</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;w, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, const bool printToStream=true, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>checkAdjointConsistencyJacobian_1</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>adbdbec6994144bdccf5aac2172a0f504</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;w, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, const Vector&lt; Real &gt; &amp;dualw, const Vector&lt; Real &gt; &amp;dualv, const bool printToStream=true, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>checkAdjointConsistencyJacobian_2</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a33e3560f3dcc4ec4e10b9ea84035a841</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;w, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, const bool printToStream=true, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>checkAdjointConsistencyJacobian_2</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a16b55a9060444a89b6e3b56c1e404aa4</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;w, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, const Vector&lt; Real &gt; &amp;dualw, const Vector&lt; Real &gt; &amp;dualv, const bool printToStream=true, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>checkInverseJacobian_1</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a56761d88728bda6a58c58dc8110ebf4e</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, const bool printToStream=true, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>checkInverseAdjointJacobian_1</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>ab1f04cc66c50c918fc90d57a1f8350b7</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, const bool printToStream=true, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>unew_</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>abd5da143271d7c7b3e9858c079d5aea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>jv_</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a136fb1107cef5d54d34fe199a8cde522</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>DEFAULT_rtol_</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a337524eaf2910c21d303932b48e55569</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>DEFAULT_stol_</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a931a807da9b30033beda65044e081d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>DEFAULT_factor_</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a2f428100faabe388837f4d4addeebbc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>DEFAULT_decr_</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>aafe3d7acba6d9b41de6964d82ed8c9a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int</type>
      <name>DEFAULT_maxit_</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>ac963a9ccd66d30d5ab5fd1b89fcf1bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>DEFAULT_print_</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>ab85155c14c661241d9a52861bd61be50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>rtol_</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a4deb74ca01a29a82de106ef21f679c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>stol_</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a88c5ed4ec5c34e04b42b1fef31c10f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>factor_</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a7985d983b4d31527d45917a817bdc1ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>decr_</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a2ef201cf4dd73e2239ed92f8ef298343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxit_</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>aa9c8ef316c959e2081e0699db0ac25c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>print_</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a11fc46e1938cc55f974aecf3382b76bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstSolve_</name>
      <anchorfile>classROL_1_1EqualityConstraint__SimOpt.html</anchorfile>
      <anchor>ae7dea153f7b9cc4aca2524694866cd72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::EqualityConstraint_SimpleEqConstrained</name>
    <filename>classROL_1_1ZOO_1_1EqualityConstraint__SimpleEqConstrained.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>ROL::EqualityConstraint</base>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint_SimpleEqConstrained</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__SimpleEqConstrained.html</anchorfile>
      <anchor>a11d62c68aa0047503c818252287c7aea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__SimpleEqConstrained.html</anchorfile>
      <anchor>aa1d0e547ca91e7b5e19813af27873233</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__SimpleEqConstrained.html</anchorfile>
      <anchor>a118b247db48f4de9d708f0cb01a65fd0</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__SimpleEqConstrained.html</anchorfile>
      <anchor>af06cc7b9e8a2cbbb756838c227fdc550</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__SimpleEqConstrained.html</anchorfile>
      <anchor>a0ce4cfbfafc7a5d9676fa41f05addb29</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahuv, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__SimpleEqConstrained.html</anchorfile>
      <anchor>a20d216135d86df3be277f5dbdcae946a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__SimpleEqConstrained.html</anchorfile>
      <anchor>aa880374ef86532592961bb7772fc5cde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__SimpleEqConstrained.html</anchorfile>
      <anchor>aa7f9a86414115270cea7f92df6d48c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__SimpleEqConstrained.html</anchorfile>
      <anchor>aeb04e636fa1c70141a2416f90eebf389</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1EqualityConstraint__SimpleEqConstrained.html</anchorfile>
      <anchor>a36ad5a81895a9fd12a98b66fe8d824d4</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Example_Objective</name>
    <filename>classExample__Objective.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>ScalarT</type>
      <name>value</name>
      <anchorfile>classExample__Objective.html</anchorfile>
      <anchor>a9029ba6305be552536017710fb5a363a</anchor>
      <arglist>(const Vector&lt; ScalarT &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ExpectationQuad</name>
    <filename>classROL_1_1ExpectationQuad.html</filename>
    <templarg></templarg>
    <base>ROL::RiskMeasure</base>
    <member kind="function">
      <type></type>
      <name>ExpectationQuad</name>
      <anchorfile>classROL_1_1ExpectationQuad.html</anchorfile>
      <anchor>a7f81220f654c23977b06ac6928906995</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>regret</name>
      <anchorfile>classROL_1_1ExpectationQuad.html</anchorfile>
      <anchor>af01630d35ed74370567b9e49db19e7c9</anchor>
      <arglist>(Real x, int deriv=0)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkRegret</name>
      <anchorfile>classROL_1_1ExpectationQuad.html</anchorfile>
      <anchor>af2f2ab89215a38b0ffadd239cd9aa7b5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1ExpectationQuad.html</anchorfile>
      <anchor>aa50728b1c5ab3bc5bc99a3e81f9ee306</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1ExpectationQuad.html</anchorfile>
      <anchor>aa4602e468931198bbe62385593fb0234</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;v0, const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1ExpectationQuad.html</anchorfile>
      <anchor>ac096ecbbb196ce84ee91a7b85d138030</anchor>
      <arglist>(const Real val, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1ExpectationQuad.html</anchorfile>
      <anchor>a22effc042e170258b9409a2b5f5e3a24</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1ExpectationQuad.html</anchorfile>
      <anchor>a164170472fdccabbcf7219d5e73afd5f</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real gv, const Vector&lt; Real &gt; &amp;hv, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getValue</name>
      <anchorfile>classROL_1_1ExpectationQuad.html</anchorfile>
      <anchor>a4494bbf9a522db75cb1cabf76e3af6a5</anchor>
      <arglist>(SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1ExpectationQuad.html</anchorfile>
      <anchor>ae728c81ac951add07c44a0fb8fd84774</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHessVec</name>
      <anchorfile>classROL_1_1ExpectationQuad.html</anchorfile>
      <anchor>a37ae802d962d4236ba42169eb1ad1443</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector_</name>
      <anchorfile>classROL_1_1ExpectationQuad.html</anchorfile>
      <anchor>a9ddedf97864986bebc993abe1b09ecca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>xstat_</name>
      <anchorfile>classROL_1_1ExpectationQuad.html</anchorfile>
      <anchor>abd7081cbeb1f7c27bb9566099d45f6cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>vstat_</name>
      <anchorfile>classROL_1_1ExpectationQuad.html</anchorfile>
      <anchor>a356d345ce6f6a813d7d4806a85d64006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstReset_</name>
      <anchorfile>classROL_1_1ExpectationQuad.html</anchorfile>
      <anchor>a2283a0a4d568539a2247e0f0ccdb4453</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ExperimentDesignInterface</name>
    <filename>classROL_1_1ExperimentDesignInterface.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ExperimentDesignInterface</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>a2242810f0fdb17e8796910bfbf21f8ff</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective_SimOpt&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; EqualityConstraint_SimOpt&lt; Real &gt; &gt; &amp;con, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;state, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;stateDual, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;control, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;controlDual, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;constraint, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;constraintDual, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;observation, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;observationDual, const std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt; &amp;randvecs, const std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt; &amp;training)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExperimentDesignInterface</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>a5fa52a9f80a352769cb9b7f6f61c9db9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyObserveOp</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>ae23b64566f63418e8e729a36ca86c15d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;obsv, const Vector&lt; Real &gt; &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAdjointObserveOp</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>a3630622459c79d5d9526505faff4c087</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;aobsv, const Vector&lt; Real &gt; &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyWeightOp</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>a53fefa6c2d9ed69661ca4b72fab0788c</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;weightv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getStateVec</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>a0969ec067c21b43fc69c28b02d6df05f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getStateDualVec</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>afd0fd3e8ebe8689ca6db2f0ffe268220</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getControlVec</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>a57420579ae90bb27336dc12f8fe252ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getControlDualVec</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>ac1f8cc91b7ace45ffad6345d3a33c6ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getObservationVec</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>aecdb5f9ea6d25e24663d0f3db6aca2c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getObservationDualVec</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>ad91dff12ec48bf49c16f7dea8105487b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getConstraintVec</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>adf2c96483643685aae388d346a21a44f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getConstraintDualVec</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>a96a07b31f92ab5c83b65f61625150c7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>getRandVecs</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>a25dd3634a817c832830c6600378c3c23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>getTrainingVecs</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>a94f8445c5d4d9b118fbbed3a09faf870</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Objective_SimOpt&lt; Real &gt; &gt;</type>
      <name>getObjective</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>ae44cb36d92885df6e47d39022b984297</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; EqualityConstraint_SimOpt&lt; Real &gt; &gt;</type>
      <name>getConstraint</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>a9db62fe045229603134ec08846b211c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Objective_SimOpt&lt; Real &gt; &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>a226e64e5c5d3dae2ff19b4c2635c9fca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; EqualityConstraint_SimOpt&lt; Real &gt; &gt;</type>
      <name>con_</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>a9a5ed568b0666ef004c78c560b2fbabb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>state_</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>a9b540d4fd120007d6c13f8c810e38bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>stateDual_</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>ad4fa6380c619f7c61f03bb6f49309b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>control_</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>a934ab5710c7e215ef8f6c4600f557fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>controlDual_</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>a0ea540e5c9c8af45199c5c8c539dcf6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>constraint_</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>afd79773ed32b413f110cf5f6a68536ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>constraintDual_</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>a47ef197a243736e6831ec17410052791</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>observation_</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>a8275799ec249dac20f4e820a4e0a88bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>observationDual_</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>af07f4d2499a5e12b62def1d5cb066a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>randvecs_</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>afbd6bc6a9c4e8817bb71c76e75fddbda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>training_</name>
      <anchorfile>classROL_1_1ExperimentDesignInterface.html</anchorfile>
      <anchor>aa9472e24b67635d1d1a11b92295105bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ExperimentDesignObjective</name>
    <filename>classROL_1_1ExperimentDesignObjective.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <class kind="class">ROL::ExperimentDesignObjective::ReducedHessian</class>
    <member kind="function">
      <type></type>
      <name>ExperimentDesignObjective</name>
      <anchorfile>classROL_1_1ExperimentDesignObjective.html</anchorfile>
      <anchor>aaeac3080fdbf67933dea8b7518f4d78a</anchor>
      <arglist>(const Teuchos::RCP&lt; ExperimentDesignInterface&lt; Real &gt; &gt; &amp;edi, const Teuchos::RCP&lt; Teuchos::ParameterList &gt; &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ExperimentDesignObjective.html</anchorfile>
      <anchor>a6157442564ea1cdc7d4167b0a121db0b</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ExperimentDesignObjective.html</anchorfile>
      <anchor>a9389c53af80e2fcbdceed1815ec247b0</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>applyInverseReducedHessian</name>
      <anchorfile>classROL_1_1ExperimentDesignObjective.html</anchorfile>
      <anchor>a36e935f1ffe3731f65969923985ac738</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ihv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;w) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; ExperimentDesignInterface&lt; Real &gt; &gt;</type>
      <name>edi_</name>
      <anchorfile>classROL_1_1ExperimentDesignObjective.html</anchorfile>
      <anchor>a8df990907e59ab66faafbbd2768187f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>cgabstol_</name>
      <anchorfile>classROL_1_1ExperimentDesignObjective.html</anchorfile>
      <anchor>afdf66adf744be977d3f545320e68151a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>cgreltol_</name>
      <anchorfile>classROL_1_1ExperimentDesignObjective.html</anchorfile>
      <anchor>a8a7914ac7d14d2bf10e4e5c6c6a4023d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>cgmaxiter_</name>
      <anchorfile>classROL_1_1ExperimentDesignObjective.html</anchorfile>
      <anchor>a6b790c8bb8c0f8d0b43de262450a7a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>sigma_</name>
      <anchorfile>classROL_1_1ExperimentDesignObjective.html</anchorfile>
      <anchor>a1833e6bfa41114a81612cfab2600292b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>beta_</name>
      <anchorfile>classROL_1_1ExperimentDesignObjective.html</anchorfile>
      <anchor>a4a1f06a058fbd71c608c68179121484b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nrandvecs_</name>
      <anchorfile>classROL_1_1ExperimentDesignObjective.html</anchorfile>
      <anchor>af9456be4dd845579503690f920b5d661</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Exponential</name>
    <filename>classROL_1_1Exponential.html</filename>
    <templarg></templarg>
    <base>ROL::Distribution</base>
    <member kind="function">
      <type></type>
      <name>Exponential</name>
      <anchorfile>classROL_1_1Exponential.html</anchorfile>
      <anchor>a5a4c91274d1d663e75c52edb040230b3</anchor>
      <arglist>(const Real loc=0., const Real scale=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exponential</name>
      <anchorfile>classROL_1_1Exponential.html</anchorfile>
      <anchor>a5907c680aadced47a8c7d48376822b5c</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluatePDF</name>
      <anchorfile>classROL_1_1Exponential.html</anchorfile>
      <anchor>a25fd06804a4aee5b5f951f83e834ea1c</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluateCDF</name>
      <anchorfile>classROL_1_1Exponential.html</anchorfile>
      <anchor>a39687335c67c1131210521ee91c1c6ba</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>integrateCDF</name>
      <anchorfile>classROL_1_1Exponential.html</anchorfile>
      <anchor>aeaa1f01fa9ec45ca817486243c38a070</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>invertCDF</name>
      <anchorfile>classROL_1_1Exponential.html</anchorfile>
      <anchor>a3308fb7291c5594d2bfad5a7ee135073</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>moment</name>
      <anchorfile>classROL_1_1Exponential.html</anchorfile>
      <anchor>a95d76f03bc58f32723628a16960fbf7a</anchor>
      <arglist>(const size_t m) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>lowerBound</name>
      <anchorfile>classROL_1_1Exponential.html</anchorfile>
      <anchor>afaa2b334243dc96883e63a4a8ae7981c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>upperBound</name>
      <anchorfile>classROL_1_1Exponential.html</anchorfile>
      <anchor>a683e0d01cad1315a0e8b8668b6ff527e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1Exponential.html</anchorfile>
      <anchor>a78743b02df62456f1cdcf4db734c80d0</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>size_t</type>
      <name>compute_coeff</name>
      <anchorfile>classROL_1_1Exponential.html</anchorfile>
      <anchor>ac95e2bfdfca9355117e3d2b4b7763aa7</anchor>
      <arglist>(const size_t m, const size_t k) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>loc_</name>
      <anchorfile>classROL_1_1Exponential.html</anchorfile>
      <anchor>a936a0bcf088d251bc5e0dc5e6499648c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>scale_</name>
      <anchorfile>classROL_1_1Exponential.html</anchorfile>
      <anchor>ac49161526295bb2f138cdcf1cbe064ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ExpUtility</name>
    <filename>classROL_1_1ExpUtility.html</filename>
    <templarg></templarg>
    <base>ROL::RiskMeasure</base>
    <member kind="function">
      <type></type>
      <name>ExpUtility</name>
      <anchorfile>classROL_1_1ExpUtility.html</anchorfile>
      <anchor>aebb81452de24bd5bd9fc49555d9c344a</anchor>
      <arglist>(const Real coeff=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExpUtility</name>
      <anchorfile>classROL_1_1ExpUtility.html</anchorfile>
      <anchor>ae076d7f2f3636550e1c8cd9dadaf47d1</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1ExpUtility.html</anchorfile>
      <anchor>aefcc82d19322b1d1f6ef65d7af2372fb</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1ExpUtility.html</anchorfile>
      <anchor>a94c20174bcde3dfba8537e5a96cef1b0</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;v0, const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1ExpUtility.html</anchorfile>
      <anchor>ad17b0d382b4ab9d87630c92a4a2d9f27</anchor>
      <arglist>(const Real val, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getValue</name>
      <anchorfile>classROL_1_1ExpUtility.html</anchorfile>
      <anchor>a4e1756546ff5995e95db824b549482a1</anchor>
      <arglist>(SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1ExpUtility.html</anchorfile>
      <anchor>acba3bce0b97b75780655d649745fe2d9</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1ExpUtility.html</anchorfile>
      <anchor>ad386a70cf5cf34f3c1ec0e2f6210fbce</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1ExpUtility.html</anchorfile>
      <anchor>aa8864f85b7cda1c388a18ee5c41c1a11</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real gv, const Vector&lt; Real &gt; &amp;hv, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHessVec</name>
      <anchorfile>classROL_1_1ExpUtility.html</anchorfile>
      <anchor>a2b945888c7ab47e72f61255b221bfd84</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1ExpUtility.html</anchorfile>
      <anchor>ad491a33aa47c042bb7eefdaa7598a725</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>scaledGradient_</name>
      <anchorfile>classROL_1_1ExpUtility.html</anchorfile>
      <anchor>a9393317cc09123f3e468df1c85c9a567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector1_</name>
      <anchorfile>classROL_1_1ExpUtility.html</anchorfile>
      <anchor>a465d640d958220b35e6883119c7f45f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector2_</name>
      <anchorfile>classROL_1_1ExpUtility.html</anchorfile>
      <anchor>ac4c4c84a4bf9de122f766c7e1aebf23a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstReset_</name>
      <anchorfile>classROL_1_1ExpUtility.html</anchorfile>
      <anchor>ad1dc516916260e34b1ba31a64b106ea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>coeff_</name>
      <anchorfile>classROL_1_1ExpUtility.html</anchorfile>
      <anchor>a9005ab2b2c53a9a1e70e7e8745ac4767</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::FDivergence</name>
    <filename>classROL_1_1FDivergence.html</filename>
    <templarg></templarg>
    <base>ROL::RiskMeasure</base>
    <member kind="function">
      <type></type>
      <name>FDivergence</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>a5879ed9d794e21da54471d2fb129bde3</anchor>
      <arglist>(const Real thresh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FDivergence</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>a0d19157fe7c3af290dca2ff598fa134a</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>Fprimal</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>ab26495a6091a0a82bac3014b9107efe3</anchor>
      <arglist>(Real x, int deriv=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>Fdual</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>af39e1525ef5a207452f2bb48fbb825a6</anchor>
      <arglist>(Real x, int deriv=0)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>adbf1b40b15e221c8f75d61dc7aaad7df</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>ac02c197030fc1b859f5b5371c638f3a0</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;v0, const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>a5abd27a54a0ff568a000134f36bee19f</anchor>
      <arglist>(const Real val, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getValue</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>a9b4998c4f065b7bfb1a81eae0cbf05e7</anchor>
      <arglist>(SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>a2f8a743cd6da575db78426a033469353</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>a81e54190060bc4961315f5a9a690632e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>a7cb0a5145f5468c5b395878cba605dcb</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real gv, const Vector&lt; Real &gt; &amp;hv, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHessVec</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>a77f83d3b863862a4b2056fc10ebf1aab</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>ab58d4b6892f7772acf2a8570410a35ad</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>thresh_</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>a654ac6d9ccc1f685d7a201daf9ebb807</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector_</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>abe470d10a15f5206102f05d511388653</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>xlam_</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>a883cd13b22f4e57d1d5d7bc7152ebfd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>xmu_</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>a1bb4c429a1cb044841ba6b824959c3c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>vlam_</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>ae156924fa9ec6be2d680706ac3eaa22e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>vmu_</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>af5f87218aaccc210b0fd42cddf33442a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>valLam_</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>a2baa2d189c3ef46ef12992bedbaf7ad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>valLam2_</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>af053b43ae00b9617205e89f9f2d6e527</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>valMu_</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>a3ef437ab0dd0e0e22c2aedeb78b68585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>valMu2_</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>aaef1d42be020c5f08d5c4c64738352a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstReset_</name>
      <anchorfile>classROL_1_1FDivergence.html</anchorfile>
      <anchor>a70ad83ca8055dee4771c3c777beba61a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FEM</name>
    <filename>classFEM.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>FEM</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>a45a3ada2795f3ce38d0b59beaae62f8f</anchor>
      <arglist>(int nx=128, Real kl=0.1, Real kr=10.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nu</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>a1ee035179d6837d51cb9fb425dacb347</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nz</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>a2e93969d45448db9abeb19241f5012e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build_mesh</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>a09c20210e1babfe5052bd99e2c77f478</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build_mesh</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>a1ceebea30e6c865eabc1bb9f4f0fd113</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build_force</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>ab8dc475d6f9d77ede15e04a191daa882</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;F, const std::vector&lt; Real &gt; &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build_jacobian_1</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>a8fed7bc351310e3a58884d21b7a26a5c</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;dl, std::vector&lt; Real &gt; &amp;d, std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_jacobian_1</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>a52c24b952bd99e690bb8128d66f83666</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_jacobian_2</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>a41188f6ed442c801afe5c506f2fc5572</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_adjoint_jacobian_2</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>a295bd5605c9bed46cd212d8953ea9e85</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;jv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_mass_state</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>a84572e2288f61ce09556775c3ce8c4c6</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_mass_control</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>ac5b7abb198f9111f3146a19e1a55a0ce</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mv, const std::vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_inverse_mass_control</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>a5585298ad5ea907274a2d8dfbfcb5e7d</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mv, const std::vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linear_solve</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>ab8e53ac603ed1c5d657fa4624cd61468</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, std::vector&lt; Real &gt; &amp;dl, std::vector&lt; Real &gt; &amp;d, std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;r, const bool transpose=false)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluate_target</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>a6ff1f4851fec687e3ab6e3bad53cbb8a</anchor>
      <arglist>(int i, const std::vector&lt; Real &gt; &amp;param)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nx_</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>a4986e8944c6a27773077bab9a8c62f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>kl_</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>a0cc6bc3deca59948e9899bf0423e8b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>kr_</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>a69e23bdebbe430eb48d17bb9ab411695</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>pts_</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>a16ab88255fceacc120bc7175b177af71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>wts_</name>
      <anchorfile>classFEM.html</anchorfile>
      <anchor>a9ed3e25fc4ec4c453f9922fdce37f50d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FiniteDifference</name>
    <filename>classFiniteDifference.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>FiniteDifference</name>
      <anchorfile>classFiniteDifference.html</anchorfile>
      <anchor>a5d98bc10b35db332f5880a54b2dbf6ef</anchor>
      <arglist>(int n, double dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classFiniteDifference.html</anchorfile>
      <anchor>a39e7f55ef0581eaab3674708fef17493</anchor>
      <arglist>(Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; fp, Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; up)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classFiniteDifference.html</anchorfile>
      <anchor>aafe1724ad5b7dc1c68664d9fbd5b2e89</anchor>
      <arglist>(Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; up)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classFiniteDifference.html</anchorfile>
      <anchor>a08bd80882e32ee5b46f2d010dbfd6c9b</anchor>
      <arglist>(Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; up, Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classFiniteDifference.html</anchorfile>
      <anchor>aff302d87cecd55327b7f59346fc830c0</anchor>
      <arglist>(Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; fp)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>n_</name>
      <anchorfile>classFiniteDifference.html</anchorfile>
      <anchor>a21661782b396f0543ebb0ac44696ae52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>dx2_</name>
      <anchorfile>classFiniteDifference.html</anchorfile>
      <anchor>a0b20a34b4bb0e31c6e31d4956b07dea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::LAPACK&lt; int, Real &gt;</type>
      <name>lapack_</name>
      <anchorfile>classFiniteDifference.html</anchorfile>
      <anchor>a9c0e09d9b963f8516d1f21c42817589f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>dl_</name>
      <anchorfile>classFiniteDifference.html</anchorfile>
      <anchor>a13e08a84b4c35c5f2735000bd217fce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>d_</name>
      <anchorfile>classFiniteDifference.html</anchorfile>
      <anchor>a657d510f9cd2104412dfd4ce2b8d1c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>du_</name>
      <anchorfile>classFiniteDifference.html</anchorfile>
      <anchor>aab26406c920e7fbb868431984a3770ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>du2_</name>
      <anchorfile>classFiniteDifference.html</anchorfile>
      <anchor>a4a07b79709c6b3bb598b0365e7f4475e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>ipiv_</name>
      <anchorfile>classFiniteDifference.html</anchorfile>
      <anchor>af31f05b0148935abfc8d4de492141da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>info_</name>
      <anchorfile>classFiniteDifference.html</anchorfile>
      <anchor>a5b3aa73ea49c15b15a33ac7a54c7631d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FunctionZakharov</name>
    <filename>classFunctionZakharov.html</filename>
    <templarg>ScalarT</templarg>
    <member kind="function">
      <type>ScalarT</type>
      <name>eval</name>
      <anchorfile>classFunctionZakharov.html</anchorfile>
      <anchor>aa4b5738a87db604df252fc65e092b930</anchor>
      <arglist>(const std::vector&lt; ScalarT &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FunctionZakharov&lt; GradType &gt;</name>
    <filename>classFunctionZakharov.html</filename>
    <member kind="function">
      <type>GradType</type>
      <name>eval</name>
      <anchorfile>classFunctionZakharov.html</anchorfile>
      <anchor>aa4b5738a87db604df252fc65e092b930</anchor>
      <arglist>(const std::vector&lt; GradType &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FunctionZakharov&lt; HessVecType &gt;</name>
    <filename>classFunctionZakharov.html</filename>
    <member kind="function">
      <type>HessVecType</type>
      <name>eval</name>
      <anchorfile>classFunctionZakharov.html</anchorfile>
      <anchor>aa4b5738a87db604df252fc65e092b930</anchor>
      <arglist>(const std::vector&lt; HessVecType &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FunctionZakharov&lt; Real &gt;</name>
    <filename>classFunctionZakharov.html</filename>
    <member kind="function">
      <type>Real</type>
      <name>eval</name>
      <anchorfile>classFunctionZakharov.html</anchorfile>
      <anchor>aa4b5738a87db604df252fc65e092b930</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Gamma</name>
    <filename>classROL_1_1Gamma.html</filename>
    <templarg></templarg>
    <base>ROL::Distribution</base>
    <member kind="function">
      <type></type>
      <name>Gamma</name>
      <anchorfile>classROL_1_1Gamma.html</anchorfile>
      <anchor>a73a786e772fb131d2a68997831d9b5dc</anchor>
      <arglist>(const Real shape=1., const Real scale=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gamma</name>
      <anchorfile>classROL_1_1Gamma.html</anchorfile>
      <anchor>ac583fffc8e498226d19f196b8518a863</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluatePDF</name>
      <anchorfile>classROL_1_1Gamma.html</anchorfile>
      <anchor>a64cd2fe8d65ee99b542846a7078b9b9f</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluateCDF</name>
      <anchorfile>classROL_1_1Gamma.html</anchorfile>
      <anchor>a62f33d73a9177cbe965c9e6322f9ba3a</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>integrateCDF</name>
      <anchorfile>classROL_1_1Gamma.html</anchorfile>
      <anchor>aa620e9c99ca01bbe05f776c1f9fdacea</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>invertCDF</name>
      <anchorfile>classROL_1_1Gamma.html</anchorfile>
      <anchor>a4ea26a81f66df5ee4ea340bc3b1b4c90</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>moment</name>
      <anchorfile>classROL_1_1Gamma.html</anchorfile>
      <anchor>a1362ef93d7582e74c0a2f1853e14d126</anchor>
      <arglist>(const size_t m) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>lowerBound</name>
      <anchorfile>classROL_1_1Gamma.html</anchorfile>
      <anchor>a4f9e5b3946e8c84a2262905f595ca10e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>upperBound</name>
      <anchorfile>classROL_1_1Gamma.html</anchorfile>
      <anchor>a951b9bc2378e41b127509623fdd85807</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1Gamma.html</anchorfile>
      <anchor>a598c41eb0ea481fde92ef152ff0fe85f</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>igamma</name>
      <anchorfile>classROL_1_1Gamma.html</anchorfile>
      <anchor>aaa85f1ed6c167e0e77ccb1683d664327</anchor>
      <arglist>(const Real s, const Real x) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>shape_</name>
      <anchorfile>classROL_1_1Gamma.html</anchorfile>
      <anchor>a69d37e3a49c2dd7066736f3359a95e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>scale_</name>
      <anchorfile>classROL_1_1Gamma.html</anchorfile>
      <anchor>a94d791cdf6dcb1199fca6e5d3095df28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>gamma_shape_</name>
      <anchorfile>classROL_1_1Gamma.html</anchorfile>
      <anchor>ab94b581797ffcdb04a112d880225d93f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>coeff_</name>
      <anchorfile>classROL_1_1Gamma.html</anchorfile>
      <anchor>a7fb353210e303b2f47181b3bd67247d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Gaussian</name>
    <filename>classROL_1_1Gaussian.html</filename>
    <templarg></templarg>
    <base>ROL::Distribution</base>
    <member kind="function">
      <type></type>
      <name>Gaussian</name>
      <anchorfile>classROL_1_1Gaussian.html</anchorfile>
      <anchor>a64962164d96eada12d4479ef3acd76d9</anchor>
      <arglist>(const Real mean=0., const Real variance=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gaussian</name>
      <anchorfile>classROL_1_1Gaussian.html</anchorfile>
      <anchor>a532affe02655a1a1d5708f8f9995f75f</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluatePDF</name>
      <anchorfile>classROL_1_1Gaussian.html</anchorfile>
      <anchor>add0e8cb5b97108c9693ca4f23d2fa062</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluateCDF</name>
      <anchorfile>classROL_1_1Gaussian.html</anchorfile>
      <anchor>aae1f9561bc7c7b781a993b1b0cb8345e</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>integrateCDF</name>
      <anchorfile>classROL_1_1Gaussian.html</anchorfile>
      <anchor>adcec7c0ae3346c098c080ab74b3d87f5</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>invertCDF</name>
      <anchorfile>classROL_1_1Gaussian.html</anchorfile>
      <anchor>a5eb766e8fd6cbf65da89c1b379b5c9d6</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>moment</name>
      <anchorfile>classROL_1_1Gaussian.html</anchorfile>
      <anchor>ae4082fa26b3538a0338e1269db25ad8c</anchor>
      <arglist>(const size_t m) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>lowerBound</name>
      <anchorfile>classROL_1_1Gaussian.html</anchorfile>
      <anchor>a744be080764837177620e3489b6d23d0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>upperBound</name>
      <anchorfile>classROL_1_1Gaussian.html</anchorfile>
      <anchor>aa0c37fea25ac63d5a5721d7e60fda9ae</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1Gaussian.html</anchorfile>
      <anchor>aaa7ee56fe2cf405a7631c1cfed6cb4d0</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>erfi</name>
      <anchorfile>classROL_1_1Gaussian.html</anchorfile>
      <anchor>a924d3312112ae13fba6956f62a8523f8</anchor>
      <arglist>(const Real p) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>mean_</name>
      <anchorfile>classROL_1_1Gaussian.html</anchorfile>
      <anchor>ab673e372bac04dff6031527081d3941e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>variance_</name>
      <anchorfile>classROL_1_1Gaussian.html</anchorfile>
      <anchor>a2af7184239bfe220e8222fd3e13cbcd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>a_</name>
      <anchorfile>classROL_1_1Gaussian.html</anchorfile>
      <anchor>a53f10162b0715f43c8ad733a256b0ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>b_</name>
      <anchorfile>classROL_1_1Gaussian.html</anchorfile>
      <anchor>ad69fe0d6df94620fe97d7c9fe91b4d51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>c_</name>
      <anchorfile>classROL_1_1Gaussian.html</anchorfile>
      <anchor>ab860dfee47e3aa4432f18f66e6c17a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>d_</name>
      <anchorfile>classROL_1_1Gaussian.html</anchorfile>
      <anchor>aea03627a02d290914c5cc4cfb80da2d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::GMRES</name>
    <filename>classROL_1_1GMRES.html</filename>
    <templarg></templarg>
    <base>ROL::Krylov</base>
    <member kind="function">
      <type></type>
      <name>GMRES</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>a9b093dcefdf9be42edb7acd212c91ebf</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>ab182ecef42fb3a049a2a29455f198dcf</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, LinearOperator&lt; Real &gt; &amp;A, const Vector&lt; Real &gt; &amp;b, LinearOperator&lt; Real &gt; &amp;M, int &amp;iter, int &amp;flag)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Teuchos::SerialDenseMatrix&lt; int, Real &gt;</type>
      <name>SDMatrix</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>ac80885f537988413f665c6feaee28b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Teuchos::SerialDenseVector&lt; int, Real &gt;</type>
      <name>SDVector</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>a9c303ca1bb4738ff27b0b65415ea80a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>r_</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>a8131bb44cbe19feb88983aa351af2b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>z_</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>a47308d96155e77360d52bff672888357</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>w_</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>ac48c547d7b34260676c4584f6565eb6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SDMatrix &gt;</type>
      <name>H_</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>aed5131c1448dbda9c5a9cec25738c59c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SDVector &gt;</type>
      <name>cs_</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>a4e3bda2691de0e84c72bc70466b6c307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SDVector &gt;</type>
      <name>sn_</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>a84a3f7d5fa06a48438dad9b82b9ead63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SDVector &gt;</type>
      <name>s_</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>ac289dcf7a17250c68c525683c931c61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SDVector &gt;</type>
      <name>y_</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>a47f65ade2cb9e30f9f4aaa60c35e80b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SDVector &gt;</type>
      <name>cnorm_</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>a7b8a7e4fb259857b82db41f3ca66c4d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>res_</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>a7053b862bbf5ebae4990781cd91f72cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isInitialized_</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>ac63f5fe714cd581a469d65ae6b982b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useInexact_</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>aa6546fb2a42a618db97e4b99a15dffb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useInitialGuess_</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>aa55559a5de8dd4fcf06cb9a4e99a5f10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxit_</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>ab8770be3899cfd498f63f31f179b294b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>absTol_</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>aa1f0bc7f9c817978550e505265f911a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>relTol_</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>a04e71db288b4f3a69199eace372f31b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::LAPACK&lt; int, Real &gt;</type>
      <name>lapack_</name>
      <anchorfile>classROL_1_1GMRES.html</anchorfile>
      <anchor>a7625715498398274389764d772d93f8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::GoldenSection</name>
    <filename>classROL_1_1GoldenSection.html</filename>
    <templarg></templarg>
    <base>ROL::LineSearch</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GoldenSection</name>
      <anchorfile>classROL_1_1GoldenSection.html</anchorfile>
      <anchor>a28ff00b137bd28919b42b9a60b8fdfc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GoldenSection</name>
      <anchorfile>classROL_1_1GoldenSection.html</anchorfile>
      <anchor>a454efa000a110ed42d0c627fdede40cf</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1GoldenSection.html</anchorfile>
      <anchor>a2f165f6f2c1e52d2fdd7de3f6f7cd0e4</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classROL_1_1GoldenSection.html</anchorfile>
      <anchor>ad5ef24037e74bf389d3d2b12719030c7</anchor>
      <arglist>(Real &amp;alpha, Real &amp;fval, int &amp;ls_neval, int &amp;ls_ngrad, const Real &amp;gs, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>tol_</name>
      <anchorfile>classROL_1_1GoldenSection.html</anchorfile>
      <anchor>a1b17b417ce207f81f6e87e6e45c7c4af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xnew_</name>
      <anchorfile>classROL_1_1GoldenSection.html</anchorfile>
      <anchor>a6225dbdac529177131dfaa61fa37e93c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; LineSearch&lt; Real &gt; &gt;</type>
      <name>btls_</name>
      <anchorfile>classROL_1_1GoldenSection.html</anchorfile>
      <anchor>abc814170353802f94d8243fcbf6e706d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::GradientStep</name>
    <filename>classROL_1_1GradientStep.html</filename>
    <templarg></templarg>
    <base>ROL::Step</base>
    <member kind="function">
      <type></type>
      <name>GradientStep</name>
      <anchorfile>classROL_1_1GradientStep.html</anchorfile>
      <anchor>a9c2a938e20f80e53d3c754e898b6b40f</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const bool computeObj=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1GradientStep.html</anchorfile>
      <anchor>a9bd3c4b884b654e21dd8bfff4e7df867</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1GradientStep.html</anchorfile>
      <anchor>a073f2882f990ddfce260bccea4c82870</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printHeader</name>
      <anchorfile>classROL_1_1GradientStep.html</anchorfile>
      <anchor>a3b4fa30662dd797651f0f5b1752a282a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printName</name>
      <anchorfile>classROL_1_1GradientStep.html</anchorfile>
      <anchor>a01f5c82302a3cdf14e967199453d163d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>print</name>
      <anchorfile>classROL_1_1GradientStep.html</anchorfile>
      <anchor>a4f8244327c31aee40f39b4e4283d5d6b</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;algo_state, bool print_header=false) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>verbosity_</name>
      <anchorfile>classROL_1_1GradientStep.html</anchorfile>
      <anchor>af18fba7d79592525ef38e6e41c585b71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>computeObj_</name>
      <anchorfile>classROL_1_1GradientStep.html</anchorfile>
      <anchor>a512cdfd4968bd3de272382046310b13a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>H1BoundConstraint</name>
    <filename>classH1BoundConstraint.html</filename>
    <templarg></templarg>
    <base>ROL::BoundConstraint</base>
    <base>ROL::BoundConstraint</base>
    <base>ROL::BoundConstraint</base>
    <base>ROL::BoundConstraint</base>
    <member kind="function">
      <type></type>
      <name>H1BoundConstraint</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>ad31f559b99ebe83d55510e34fd9e9ca7</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;l, std::vector&lt; Real &gt; &amp;u, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem, Real scale=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a9c615c055496ff1477fede8aab58711e</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>acad8ef7f76593be712246002abd06a9c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a02a774755de09193b5240f9294df240b</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a938447539efb2f09098b8290ed354f14</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a2b5dfeee2111f7c2545372ba5d229367</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>af8aead86bd11e3b45f6f243f62331157</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a39549ecc393dc5218018039aa20935ff</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a55a850731579e1ec4f9bd146513f075d</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToUpperBound</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a935281e91116e31bab3e41843928bd4a</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToLowerBound</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>aaefaa10abae5dba3f00761785396f41c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H1BoundConstraint</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>ad31f559b99ebe83d55510e34fd9e9ca7</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;l, std::vector&lt; Real &gt; &amp;u, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem, Real scale=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a9c615c055496ff1477fede8aab58711e</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>acad8ef7f76593be712246002abd06a9c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a02a774755de09193b5240f9294df240b</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a938447539efb2f09098b8290ed354f14</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a2b5dfeee2111f7c2545372ba5d229367</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>af8aead86bd11e3b45f6f243f62331157</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a39549ecc393dc5218018039aa20935ff</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a55a850731579e1ec4f9bd146513f075d</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToUpperBound</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a935281e91116e31bab3e41843928bd4a</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToLowerBound</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>aaefaa10abae5dba3f00761785396f41c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H1BoundConstraint</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>ad31f559b99ebe83d55510e34fd9e9ca7</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;l, std::vector&lt; Real &gt; &amp;u, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem, Real scale=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a9c615c055496ff1477fede8aab58711e</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>acad8ef7f76593be712246002abd06a9c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a02a774755de09193b5240f9294df240b</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a938447539efb2f09098b8290ed354f14</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a2b5dfeee2111f7c2545372ba5d229367</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>af8aead86bd11e3b45f6f243f62331157</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a39549ecc393dc5218018039aa20935ff</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a55a850731579e1ec4f9bd146513f075d</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToUpperBound</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a935281e91116e31bab3e41843928bd4a</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToLowerBound</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>aaefaa10abae5dba3f00761785396f41c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H1BoundConstraint</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>ad31f559b99ebe83d55510e34fd9e9ca7</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;l, std::vector&lt; Real &gt; &amp;u, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem, Real scale=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a9c615c055496ff1477fede8aab58711e</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>acad8ef7f76593be712246002abd06a9c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a02a774755de09193b5240f9294df240b</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a938447539efb2f09098b8290ed354f14</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a2b5dfeee2111f7c2545372ba5d229367</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>af8aead86bd11e3b45f6f243f62331157</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a39549ecc393dc5218018039aa20935ff</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a55a850731579e1ec4f9bd146513f075d</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToUpperBound</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a935281e91116e31bab3e41843928bd4a</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToLowerBound</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>aaefaa10abae5dba3f00761785396f41c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;l)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_vector</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a4448089010da6cd8bb4cbd0c85ba9cb2</anchor>
      <arglist>(Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;xvec, ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_const_vector</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a241e52fcb388d5904b4be316d57992a4</anchor>
      <arglist>(Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; &amp;xvec, const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a0b1d84636ecfed41cbcf272c057fc648</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;out, const Real a, const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>projection</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a84649e313d025a7a36288e468b718bfb</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_vector</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a4448089010da6cd8bb4cbd0c85ba9cb2</anchor>
      <arglist>(Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;xvec, ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_const_vector</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a241e52fcb388d5904b4be316d57992a4</anchor>
      <arglist>(Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; &amp;xvec, const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a0b1d84636ecfed41cbcf272c057fc648</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;out, const Real a, const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>projection</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a84649e313d025a7a36288e468b718bfb</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_vector</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a4448089010da6cd8bb4cbd0c85ba9cb2</anchor>
      <arglist>(Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;xvec, ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_const_vector</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a241e52fcb388d5904b4be316d57992a4</anchor>
      <arglist>(Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; &amp;xvec, const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a0b1d84636ecfed41cbcf272c057fc648</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;out, const Real a, const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>projection</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a84649e313d025a7a36288e468b718bfb</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_vector</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a4448089010da6cd8bb4cbd0c85ba9cb2</anchor>
      <arglist>(Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;xvec, ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_const_vector</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a241e52fcb388d5904b4be316d57992a4</anchor>
      <arglist>(Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; &amp;xvec, const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a0b1d84636ecfed41cbcf272c057fc648</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;out, const Real a, const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>projection</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a84649e313d025a7a36288e468b718bfb</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>dim_</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>af8ec7b9ba6c944abe74e9d418dedc5d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>x_lo_</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a35a2214bebc14f5759d0d4aa3e56e981</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>x_up_</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a930c79dd55023cecb8888df3179d9d29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>min_diff_</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>ae0b193325dda0ea0e3432715fb513cbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>scale_</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>ae19833d9dd88fa8b0eb7f474369600ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt;</type>
      <name>fem_</name>
      <anchorfile>classH1BoundConstraint.html</anchorfile>
      <anchor>a49693ea0f26c672b16f0e0960b63fef8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>H1VectorBatchManager</name>
    <filename>classH1VectorBatchManager.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>ROL::TeuchosBatchManager</base>
    <base>ROL::TeuchosBatchManager</base>
    <base>ROL::TeuchosBatchManager</base>
    <member kind="function">
      <type></type>
      <name>H1VectorBatchManager</name>
      <anchorfile>classH1VectorBatchManager.html</anchorfile>
      <anchor>a0b0ab09a8d584d64bb7e65aa4d6fb56d</anchor>
      <arglist>(const Teuchos::RCP&lt; const Teuchos::Comm&lt; Ordinal &gt; &gt; &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sumAll</name>
      <anchorfile>classH1VectorBatchManager.html</anchorfile>
      <anchor>a22d2701e27f19acb81163c7276c98e5f</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;input, ROL::Vector&lt; Real &gt; &amp;output)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H1VectorBatchManager</name>
      <anchorfile>classH1VectorBatchManager.html</anchorfile>
      <anchor>a0b0ab09a8d584d64bb7e65aa4d6fb56d</anchor>
      <arglist>(const Teuchos::RCP&lt; const Teuchos::Comm&lt; Ordinal &gt; &gt; &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sumAll</name>
      <anchorfile>classH1VectorBatchManager.html</anchorfile>
      <anchor>a22d2701e27f19acb81163c7276c98e5f</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;input, ROL::Vector&lt; Real &gt; &amp;output)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H1VectorBatchManager</name>
      <anchorfile>classH1VectorBatchManager.html</anchorfile>
      <anchor>a0b0ab09a8d584d64bb7e65aa4d6fb56d</anchor>
      <arglist>(const Teuchos::RCP&lt; const Teuchos::Comm&lt; Ordinal &gt; &gt; &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sumAll</name>
      <anchorfile>classH1VectorBatchManager.html</anchorfile>
      <anchor>a22d2701e27f19acb81163c7276c98e5f</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;input, ROL::Vector&lt; Real &gt; &amp;output)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_vector</name>
      <anchorfile>classH1VectorBatchManager.html</anchorfile>
      <anchor>a6b3288fd6eb113fe00ff929e68756e88</anchor>
      <arglist>(Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;xvec, ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_vector</name>
      <anchorfile>classH1VectorBatchManager.html</anchorfile>
      <anchor>a6b3288fd6eb113fe00ff929e68756e88</anchor>
      <arglist>(Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;xvec, ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_vector</name>
      <anchorfile>classH1VectorBatchManager.html</anchorfile>
      <anchor>a6b3288fd6eb113fe00ff929e68756e88</anchor>
      <arglist>(Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;xvec, ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>H1VectorDual</name>
    <filename>classH1VectorDual.html</filename>
    <templarg></templarg>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <member kind="function">
      <type></type>
      <name>H1VectorDual</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a5c3c181c05f7335e2cbad1c2e5a52248</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a9af8034618cb10494cd5a518e5bd8064</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a8536613f5119d54c54cc9dd879db6306</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>ac14aa71caaf23a7ce6e64c6b5614b454</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a2895baf29c58094fb4df7b024fd3cb9f</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a50ef7d0076bf0c1503d520f291174e93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a237e773512a9f45761da712f2e898b9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a6c6d09d32f2ba38e632b2d8085682933</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>aa4a5ed63d21262c43711b709299861ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a465ef6ef283feb7c4aa2a157c6a4d99d</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>aae8606ad8521ef0d3a97fe0caf821567</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a72a5e74138721c99480f12afcb7e8694</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H1VectorDual</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a5c3c181c05f7335e2cbad1c2e5a52248</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a9af8034618cb10494cd5a518e5bd8064</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a8536613f5119d54c54cc9dd879db6306</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>ac14aa71caaf23a7ce6e64c6b5614b454</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a2895baf29c58094fb4df7b024fd3cb9f</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a50ef7d0076bf0c1503d520f291174e93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a237e773512a9f45761da712f2e898b9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a6c6d09d32f2ba38e632b2d8085682933</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>aa4a5ed63d21262c43711b709299861ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a465ef6ef283feb7c4aa2a157c6a4d99d</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>aae8606ad8521ef0d3a97fe0caf821567</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a72a5e74138721c99480f12afcb7e8694</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H1VectorDual</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a5c3c181c05f7335e2cbad1c2e5a52248</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a9af8034618cb10494cd5a518e5bd8064</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a8536613f5119d54c54cc9dd879db6306</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>ac14aa71caaf23a7ce6e64c6b5614b454</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a2895baf29c58094fb4df7b024fd3cb9f</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a50ef7d0076bf0c1503d520f291174e93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a237e773512a9f45761da712f2e898b9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a6c6d09d32f2ba38e632b2d8085682933</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>aa4a5ed63d21262c43711b709299861ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a465ef6ef283feb7c4aa2a157c6a4d99d</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>aae8606ad8521ef0d3a97fe0caf821567</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a72a5e74138721c99480f12afcb7e8694</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H1VectorDual</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a5c3c181c05f7335e2cbad1c2e5a52248</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a9af8034618cb10494cd5a518e5bd8064</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a8536613f5119d54c54cc9dd879db6306</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>ac14aa71caaf23a7ce6e64c6b5614b454</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a2895baf29c58094fb4df7b024fd3cb9f</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a50ef7d0076bf0c1503d520f291174e93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a237e773512a9f45761da712f2e898b9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a6c6d09d32f2ba38e632b2d8085682933</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>aa4a5ed63d21262c43711b709299861ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a465ef6ef283feb7c4aa2a157c6a4d99d</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>aae8606ad8521ef0d3a97fe0caf821567</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a72a5e74138721c99480f12afcb7e8694</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H1VectorDual</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a5c3c181c05f7335e2cbad1c2e5a52248</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a9af8034618cb10494cd5a518e5bd8064</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a8536613f5119d54c54cc9dd879db6306</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>ac14aa71caaf23a7ce6e64c6b5614b454</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a2895baf29c58094fb4df7b024fd3cb9f</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a50ef7d0076bf0c1503d520f291174e93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a237e773512a9f45761da712f2e898b9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a6c6d09d32f2ba38e632b2d8085682933</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>aa4a5ed63d21262c43711b709299861ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a465ef6ef283feb7c4aa2a157c6a4d99d</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>aae8606ad8521ef0d3a97fe0caf821567</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a72a5e74138721c99480f12afcb7e8694</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>vec_</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a02aa78d68475e78f261b25e56c090cde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt;</type>
      <name>fem_</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>aa4d38dd35748aea0178b4806e6453c84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; H1VectorPrimal&lt; Real &gt; &gt;</type>
      <name>dual_vec_</name>
      <anchorfile>classH1VectorDual.html</anchorfile>
      <anchor>a261474008ec0060fc30fd976d53c589c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>H1VectorPrimal</name>
    <filename>classH1VectorPrimal.html</filename>
    <templarg></templarg>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <member kind="function">
      <type></type>
      <name>H1VectorPrimal</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>acf303cda146119c72398aee128e5407d</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a4378cf656c06837960d41b5f17784b62</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a21fb470a6be0e78c5f9e4507989d768d</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>acd8bb3a5b22aa86a2d48137eba9df4cc</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a2956bb5626ae3fe51345734614bd3001</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>af8ec09a3c8552223f019a96f545d98ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a8e3d02cfb93c3a6ba3de5980311d96ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a8513660a37ee0d58ba34e4a0a8551a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a2f119e0b4f2a0ae14d6af26c1321cd92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>ad6e83773f71f4603565bb277009700c6</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a10bef2dd4db10ff5ac4cf5dce1a3e1af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>aabd9725e3634f1e85f21bf33ac9cbe26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H1VectorPrimal</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>acf303cda146119c72398aee128e5407d</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a4378cf656c06837960d41b5f17784b62</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a21fb470a6be0e78c5f9e4507989d768d</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>acd8bb3a5b22aa86a2d48137eba9df4cc</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a2956bb5626ae3fe51345734614bd3001</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>af8ec09a3c8552223f019a96f545d98ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a8e3d02cfb93c3a6ba3de5980311d96ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a8513660a37ee0d58ba34e4a0a8551a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a2f119e0b4f2a0ae14d6af26c1321cd92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>ad6e83773f71f4603565bb277009700c6</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a10bef2dd4db10ff5ac4cf5dce1a3e1af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>aabd9725e3634f1e85f21bf33ac9cbe26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H1VectorPrimal</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>acf303cda146119c72398aee128e5407d</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a4378cf656c06837960d41b5f17784b62</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a21fb470a6be0e78c5f9e4507989d768d</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>acd8bb3a5b22aa86a2d48137eba9df4cc</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a2956bb5626ae3fe51345734614bd3001</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>af8ec09a3c8552223f019a96f545d98ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a8e3d02cfb93c3a6ba3de5980311d96ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a8513660a37ee0d58ba34e4a0a8551a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a2f119e0b4f2a0ae14d6af26c1321cd92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>ad6e83773f71f4603565bb277009700c6</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a10bef2dd4db10ff5ac4cf5dce1a3e1af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>aabd9725e3634f1e85f21bf33ac9cbe26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H1VectorPrimal</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>acf303cda146119c72398aee128e5407d</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a4378cf656c06837960d41b5f17784b62</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a21fb470a6be0e78c5f9e4507989d768d</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>acd8bb3a5b22aa86a2d48137eba9df4cc</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a2956bb5626ae3fe51345734614bd3001</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>af8ec09a3c8552223f019a96f545d98ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a8e3d02cfb93c3a6ba3de5980311d96ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a8513660a37ee0d58ba34e4a0a8551a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a2f119e0b4f2a0ae14d6af26c1321cd92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>ad6e83773f71f4603565bb277009700c6</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a10bef2dd4db10ff5ac4cf5dce1a3e1af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>aabd9725e3634f1e85f21bf33ac9cbe26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>H1VectorPrimal</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>acf303cda146119c72398aee128e5407d</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a4378cf656c06837960d41b5f17784b62</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a21fb470a6be0e78c5f9e4507989d768d</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>acd8bb3a5b22aa86a2d48137eba9df4cc</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a2956bb5626ae3fe51345734614bd3001</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>af8ec09a3c8552223f019a96f545d98ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a8e3d02cfb93c3a6ba3de5980311d96ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a8513660a37ee0d58ba34e4a0a8551a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a2f119e0b4f2a0ae14d6af26c1321cd92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>ad6e83773f71f4603565bb277009700c6</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a10bef2dd4db10ff5ac4cf5dce1a3e1af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>aabd9725e3634f1e85f21bf33ac9cbe26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>vec_</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a01e337d8e286fc7307a544eb1824e76d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt;</type>
      <name>fem_</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a525e487c68b2394762f8350aed5428ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; H1VectorDual&lt; Real &gt; &gt;</type>
      <name>dual_vec_</name>
      <anchorfile>classH1VectorPrimal.html</anchorfile>
      <anchor>a9f19caa05fecb3f8cfaee40d656412ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::NewtonKrylovStep::HessianNK</name>
    <filename>classROL_1_1NewtonKrylovStep_1_1HessianNK.html</filename>
    <base>ROL::LinearOperator</base>
    <member kind="function">
      <type></type>
      <name>HessianNK</name>
      <anchorfile>classROL_1_1NewtonKrylovStep_1_1HessianNK.html</anchorfile>
      <anchor>a5be9939860ff4c244eb2b3dae88b43f6</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classROL_1_1NewtonKrylovStep_1_1HessianNK.html</anchorfile>
      <anchor>af50867beaaabe45c2d86d5e2e5e7307c</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1NewtonKrylovStep_1_1HessianNK.html</anchorfile>
      <anchor>ab248131b81050baeb9365a56d60c5503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>x_</name>
      <anchorfile>classROL_1_1NewtonKrylovStep_1_1HessianNK.html</anchorfile>
      <anchor>a11b53fd817320ccda41d6faae2d70782</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::PrimalDualActiveSetStep::HessianPD</name>
    <filename>classROL_1_1PrimalDualActiveSetStep_1_1HessianPD.html</filename>
    <base>ROL::LinearOperator</base>
    <member kind="function">
      <type></type>
      <name>HessianPD</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1HessianPD.html</anchorfile>
      <anchor>a7e87bca03f9b8ad93ab8ab237f12c912</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;bnd, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;xlam, const Real eps=0, const Teuchos::RCP&lt; Secant&lt; Real &gt; &gt; &amp;secant=Teuchos::null, const bool useSecant=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1HessianPD.html</anchorfile>
      <anchor>a251ee91a7807451052dd8199d2a0be45</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1HessianPD.html</anchorfile>
      <anchor>a922c13cce4ee04ddc5a4642617433bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt;</type>
      <name>bnd_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1HessianPD.html</anchorfile>
      <anchor>a0e27faed266472a905a0662b1f0ad7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>x_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1HessianPD.html</anchorfile>
      <anchor>a8ee44478bd61e3801120502331c2530e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xlam_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1HessianPD.html</anchorfile>
      <anchor>a4538740ae19c6244a1c3cd7173317bf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>v_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1HessianPD.html</anchorfile>
      <anchor>a8684aa2c512f13e3ea406396bd7c7a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>eps_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1HessianPD.html</anchorfile>
      <anchor>ab1a0aea0c61b0afe59ba909f9d2bb4bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Secant&lt; Real &gt; &gt;</type>
      <name>secant_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1HessianPD.html</anchorfile>
      <anchor>a02b70d3e7dda1fe0a5d0dcc73dd09d1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useSecant_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1HessianPD.html</anchorfile>
      <anchor>aef5ec4917db17130a05c54f54f340eaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ProjectedNewtonKrylovStep::HessianPNK</name>
    <filename>classROL_1_1ProjectedNewtonKrylovStep_1_1HessianPNK.html</filename>
    <base>ROL::LinearOperator</base>
    <member kind="function">
      <type></type>
      <name>HessianPNK</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1HessianPNK.html</anchorfile>
      <anchor>a9d7302d6d34d06d980f87abe6e7c153d</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;bnd, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;g, Real eps=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1HessianPNK.html</anchorfile>
      <anchor>a279a0d8adf82ea8d5000640f4ffb516a</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1HessianPNK.html</anchorfile>
      <anchor>ab463c40249a9916f906bcad1862e3a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt;</type>
      <name>bnd_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1HessianPNK.html</anchorfile>
      <anchor>a308971cbf35cf0af33095a88b9047734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>x_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1HessianPNK.html</anchorfile>
      <anchor>aa593070a31471dfd3c98a4a92655ba07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>g_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1HessianPNK.html</anchorfile>
      <anchor>a72dfe06edd829d2114931e1e6ba3fb4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>v_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1HessianPNK.html</anchorfile>
      <anchor>a976ffa643cebd64c733e74cf26a1fafb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>eps_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1HessianPNK.html</anchorfile>
      <anchor>a5b561fd4b7c1bf91a7022d0932d70726</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::HMCR</name>
    <filename>classROL_1_1HMCR.html</filename>
    <templarg></templarg>
    <base>ROL::RiskMeasure</base>
    <member kind="function">
      <type></type>
      <name>HMCR</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>a0ba96c1b7df7888d6205d37b9797908e</anchor>
      <arglist>(const Real prob, const Real lambda, const unsigned order, const Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt; &amp;pf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HMCR</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>a7cc0000f2adc03322d131aa1d66ac38a</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>a3acdc6595fe0fba1508c5e3b5455c6ab</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>aacca5a45553670ba2a575e385c93c687</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;v0, const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>a61b55c254f61f896cada7cc71f5dd0a8</anchor>
      <arglist>(const Real val, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getValue</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>a2ecd367080c7743c0785191bf7901e69</anchor>
      <arglist>(SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>aa056e74efe15ec0594ff3e30b07f77a9</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>acdec9c33b22e2609c29fb32187f81765</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>a8a4600637c94ae34dce9f78506fadd09</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real gv, const Vector&lt; Real &gt; &amp;hv, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHessVec</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>ab649c403feff9a5d4f43f6c62ab371ab</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>a3cc33ddc29ce2572b63c3efecb0964bd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt;</type>
      <name>plusFunction_</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>ab3f07e969795a0497fbd36635b544200</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>prob_</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>a8a8e8906a4f768b1c081508a8f5e69ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>lambda_</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>a647aa928f1a88410c780da946351c9b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>order_</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>a468e07f4130531ab883bc241956e6580</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>coeff_</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>a5093bc2f61aa9a5a3ba38703f01e86b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>mDualVector0_</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>aeee6212405a77d437e6bdf97f1fa7974</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gDualVector0_</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>a8ab468042cdb26ebaa6d9d322663eea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>mDualVector1_</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>ac142b2c56d12f6b845e1675c0d53078b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gDualVector1_</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>a01a6abb96404252e0179879377f35953</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>xvar_</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>a9e1bad2057b0317850b3b307bb4f8f37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>vvar_</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>a790630cb69b845d5a5318d6d2d3e6c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>pnorm_</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>a8219b912929f4d339c2d1b75643608c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>coeff0_</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>ab6d130d348eb4fcfb0bd444a8a3b139d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>coeff1_</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>a448351b8dda1c0efb5eda7438a32a68b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>coeff2_</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>ae1aec8e58c29be49ba9691f6b2c04317</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>HMCR_firstReset_</name>
      <anchorfile>classROL_1_1HMCR.html</anchorfile>
      <anchor>a070fe38d011209943771268eded74c46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::HMCRObjective</name>
    <filename>classROL_1_1HMCRObjective.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HMCRObjective</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>aef7f1f12a8bf2e669c8d85a51b573052</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HMCRObjective</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>ae5862615a3e826fd2541a51f56c22dfc</anchor>
      <arglist>(Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;pObj, Real order, Real prob, Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;vsampler, Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;gsampler, Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;hsampler, bool storage=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HMCRObjective</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>ac231a770e20e50932ddfc880c5b6cd02</anchor>
      <arglist>(Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;pObj, Real order, Real prob, Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;vsampler, Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;gsampler, bool storage=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HMCRObjective</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>aee38744762e2e063070aa1566bd95c6a</anchor>
      <arglist>(Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;pObj, Real order, Real prob, Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;sampler, bool storage=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>ac966bcdaf3e4cc3633e206829cf7dd3f</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>ab83651f3da292b57bb1938ffd0e2eca5</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>a4c1dd66ea83da0a45253c4f7d6976166</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>ac2375495d8c5d4c5777d1524c862d7f1</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>precond</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>a6de990b18865cb608e0a19960fff3744</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Pv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>abf355256894f91bffb81537921c89e4f</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>unwrap_const_CVaR_vector</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>ab91d2a0a0987b35d7cf9f98764b1dfb5</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;xvec, Real &amp;xvar, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>acb3654456d9d4f4e8f58fc0b61a2ade7</anchor>
      <arglist>(Real &amp;val, const Vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;param, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>a2d74c63b05010c469ee339234ed68cc9</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;param, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getHessVec</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>adc9673c30fd8fe30ee30b44c2133c89c</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;param, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt;</type>
      <name>ParametrizedObjective_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>ae1f1205ec584fcb548b34c8e5dff8300</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>order_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>a4e8e9fc8b97bc61263d5e4789b90a056</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>prob_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>a33a788d2b962ba626753a0905e625473</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt;</type>
      <name>ValueSampler_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>ac384e1aa3bd8319c869a4169b87e6576</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt;</type>
      <name>GradientSampler_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>a7cfe5188ae4790545ed4af1f3c979a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt;</type>
      <name>HessianSampler_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>a5edd5032732dd8a0364b78a0e7d02183</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>pointGrad_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>a216ecbe0a0cae658ac028741bbee795a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>pointHess_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>a04e6789a43e0a79d5251109273738a0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gradient0_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>a63f692d417c4422c16cfadfb7c229df4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>sumGrad0_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>af7f82e6a43a6cfb26f5cd695d3c9c520</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gradient1_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>ad816d50379fc9226adaa933d29d54725</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>sumGrad1_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>ab4f7185421c1093eb81cc52c06c7d99b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gradient2_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>a53564b4e1a4acf403e82bf0355b1f2c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>sumGrad2_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>adf1790e94968a20a1e5e765e0f0c7d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>hessvec_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>a6fd18f538cae0b7cb84854cae268ce5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>sumHess_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>a584d3476c7222909a2d1718200c81f37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>initialized_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>a2383f54a5d46735972fded1714dd8c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>storage_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>a24235f7e8f90b09c939607e56378e3e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::vector&lt; Real &gt;, Real &gt;</type>
      <name>value_storage_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>a56112559fd07983dbb991c170ea4c8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::vector&lt; Real &gt;, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>gradient_storage_</name>
      <anchorfile>classROL_1_1HMCRObjective.html</anchorfile>
      <anchor>ab72028ccc1df6490cf9993e8c5e86d12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Identity</name>
    <filename>classIdentity.html</filename>
    <templarg>Real</templarg>
    <base>ROL::LinearOperator</base>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classIdentity.html</anchorfile>
      <anchor>acbe2239b680d7bc384882b0c3c59ced3</anchor>
      <arglist>(V &amp;Hv, const V &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ROL::Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classIdentity.html</anchorfile>
      <anchor>a2f6ba7575b393aa7b3509ea448e1aad6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::InequalityConstraint</name>
    <filename>classROL_1_1InequalityConstraint.html</filename>
    <templarg></templarg>
    <base>ROL::EqualityConstraint</base>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::InequalityConstraint_HS24</name>
    <filename>classROL_1_1ZOO_1_1InequalityConstraint__HS24.html</filename>
    <templarg></templarg>
    <base>ROL::InequalityConstraint</base>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint_HS24</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS24.html</anchorfile>
      <anchor>aac5ae3965708969e7222f281f9204abe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS24.html</anchorfile>
      <anchor>a654da22d7d68ddc85cc28b1c2f31bdb9</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS24.html</anchorfile>
      <anchor>ab00fae6055694b455852917fb891bb40</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS24.html</anchorfile>
      <anchor>aefc85a4a55bb7cfee47fa8e86501961c</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS24.html</anchorfile>
      <anchor>a35505eb907fe518e318bdcdbdb37b0d7</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahuv, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS24.html</anchorfile>
      <anchor>ae9490104072ff6fde3811d212c781de5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS24.html</anchorfile>
      <anchor>acd16157af71bcf3fb189a594ed2ecbbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS24.html</anchorfile>
      <anchor>a2331a9895ca77de2ffabbc849144a77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>rt3_</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS24.html</anchorfile>
      <anchor>ae147017bfa9e94e21b6fb7badb1d6044</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::InequalityConstraint_HS29</name>
    <filename>classROL_1_1ZOO_1_1InequalityConstraint__HS29.html</filename>
    <templarg></templarg>
    <base>ROL::InequalityConstraint</base>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS29.html</anchorfile>
      <anchor>a2776c41f34556fb69e186b4644b522b4</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS29.html</anchorfile>
      <anchor>a2ea3dfa1bac6cb45c3a97fdc1a1d451d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS29.html</anchorfile>
      <anchor>a8c30230b902cbb120dd8b24d30d09a6e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS29.html</anchorfile>
      <anchor>ac19faf9517001d8f3b77f3fd88937eb8</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahuv, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS29.html</anchorfile>
      <anchor>a1486241a049d9c366714c258d4dbea23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS29.html</anchorfile>
      <anchor>a0951cfb2fe74f36696c261582df9b255</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS29.html</anchorfile>
      <anchor>a4b3bfbe4e50b231c185ef6738a228814</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS29.html</anchorfile>
      <anchor>aff7bbdd2baf11561aac9b3c1becc9cce</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS29.html</anchorfile>
      <anchor>a55bcd9539bdcc2665a86aa24270d6d80</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::InequalityConstraint_HS32</name>
    <filename>classROL_1_1ZOO_1_1InequalityConstraint__HS32.html</filename>
    <templarg></templarg>
    <base>ROL::InequalityConstraint</base>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS32.html</anchorfile>
      <anchor>af58342e1d787fcb40bf6432a79400479</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS32.html</anchorfile>
      <anchor>afd2f16f405f94785e226107ac651a96e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS32.html</anchorfile>
      <anchor>ab37a4a27d7a5a27fe25613a3369cce52</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS32.html</anchorfile>
      <anchor>a0021aec8afdcf9cc2f54547272cb5d38</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahuv, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS32.html</anchorfile>
      <anchor>aacc1a589087a03a0d9a131c9687e2514</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS32.html</anchorfile>
      <anchor>a92976e26d276c80951539ee0723151e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS32.html</anchorfile>
      <anchor>a06e2178a061323b675027898b3d5aa6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS32.html</anchorfile>
      <anchor>a68d08b23b0b8b585456e29c6696820ee</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1InequalityConstraint__HS32.html</anchorfile>
      <anchor>afa5ce6f9490b1a68afbd2acd1c3e0d58</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InnerProductMatrix</name>
    <filename>classInnerProductMatrix.html</filename>
    <templarg>Real</templarg>
    <member kind="function">
      <type></type>
      <name>InnerProductMatrix</name>
      <anchorfile>classInnerProductMatrix.html</anchorfile>
      <anchor>ac4dc1b0ef22bfe1ef016b29bedb76c23</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;U, const std::vector&lt; Real &gt; &amp;V, const std::vector&lt; Real &gt; &amp;w, const int a=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InnerProductMatrix</name>
      <anchorfile>classInnerProductMatrix.html</anchorfile>
      <anchor>a235ae74bad9e07c70d51e4fca6a28dad</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;U, const std::vector&lt; Real &gt; &amp;V, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InnerProductMatrix</name>
      <anchorfile>classInnerProductMatrix.html</anchorfile>
      <anchor>a1597799884602fbc3d0b26ba12459f03</anchor>
      <arglist>(InnerProductMatrix&lt; Real &gt; *ipm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classInnerProductMatrix.html</anchorfile>
      <anchor>ab0e991a612734b57e5f405156da707d0</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InnerProductMatrix</name>
      <anchorfile>classInnerProductMatrix.html</anchorfile>
      <anchor>ad77b22093f4b088f110cd07944cf5c46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classInnerProductMatrix.html</anchorfile>
      <anchor>a50fcab64286c1902e05b3a37234548a9</anchor>
      <arglist>(Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; xp, Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; bp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyadd</name>
      <anchorfile>classInnerProductMatrix.html</anchorfile>
      <anchor>aabf7a875cbfcf81af3253c05ceb2ea1e</anchor>
      <arglist>(Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; xp, Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; bp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyaddtimes</name>
      <anchorfile>classInnerProductMatrix.html</anchorfile>
      <anchor>a98781bcd617e1befc63156321fbb7a27</anchor>
      <arglist>(Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; xp, Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; bp, Real factor)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>inner</name>
      <anchorfile>classInnerProductMatrix.html</anchorfile>
      <anchor>a502cd86d6044b3a6bc2a2a861125dbea</anchor>
      <arglist>(Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; up, Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; vp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>classInnerProductMatrix.html</anchorfile>
      <anchor>acd112a2e3432117c67fc0778e8f2950f</anchor>
      <arglist>(Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; bp, Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; xp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>inv_inner</name>
      <anchorfile>classInnerProductMatrix.html</anchorfile>
      <anchor>a5b3f786ab70fc3306a531b185ff0022a</anchor>
      <arglist>(Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; up, Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; vp)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>nq_</name>
      <anchorfile>classInnerProductMatrix.html</anchorfile>
      <anchor>a8b2f33e8bba23403db392a1c0264a4d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>ni_</name>
      <anchorfile>classInnerProductMatrix.html</anchorfile>
      <anchor>a5a28102146c7cd4d9b30ef154503ecbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::vector&lt; Real &gt;</type>
      <name>U_</name>
      <anchorfile>classInnerProductMatrix.html</anchorfile>
      <anchor>a4dd82b89fe830898f3c3d093c281e0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::vector&lt; Real &gt;</type>
      <name>V_</name>
      <anchorfile>classInnerProductMatrix.html</anchorfile>
      <anchor>ace87036f41c5dda12c930d0a0189b377</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::vector&lt; Real &gt;</type>
      <name>w_</name>
      <anchorfile>classInnerProductMatrix.html</anchorfile>
      <anchor>a4fa0eb965e85f401dabcdaa8815f0e26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Real &gt;</type>
      <name>M_</name>
      <anchorfile>classInnerProductMatrix.html</anchorfile>
      <anchor>a89f4a406e3caaf3b6f9aee4e5a69f395</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InnerProductMatrixSolver</name>
    <filename>classInnerProductMatrixSolver.html</filename>
    <templarg></templarg>
    <base>InnerProductMatrix</base>
    <member kind="function">
      <type></type>
      <name>InnerProductMatrixSolver</name>
      <anchorfile>classInnerProductMatrixSolver.html</anchorfile>
      <anchor>a46da16a5f18fe1b84d66c3bfd59e7b64</anchor>
      <arglist>(Teuchos::RCP&lt; Teuchos::LAPACK&lt; int, Real &gt; &gt; lapack, const std::vector&lt; Real &gt; &amp;U=std::vector&lt; Real &gt;(), const std::vector&lt; Real &gt; &amp;V=std::vector&lt; Real &gt;(), const std::vector&lt; Real &gt; &amp;w=std::vector&lt; Real &gt;(), const int a=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InnerProductMatrixSolver</name>
      <anchorfile>classInnerProductMatrixSolver.html</anchorfile>
      <anchor>a88cdb5467ea9383e2f4e11ea7088917a</anchor>
      <arglist>(Teuchos::RCP&lt; Teuchos::LAPACK&lt; int, Real &gt; &gt; lapack, const std::vector&lt; Real &gt; &amp;U=std::vector&lt; Real &gt;(), const std::vector&lt; Real &gt; &amp;V=std::vector&lt; Real &gt;(), const std::vector&lt; Real &gt; &amp;w=std::vector&lt; Real &gt;(), const std::vector&lt; Real &gt; &amp;a=std::vector&lt; Real &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classInnerProductMatrixSolver.html</anchorfile>
      <anchor>af729d93815e2cad0a657c84f5ae7a73f</anchor>
      <arglist>(Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; bp, Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; xp)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>inv_inner</name>
      <anchorfile>classInnerProductMatrixSolver.html</anchorfile>
      <anchor>a79ddd7276fc7786bbc3b7cf97f8e1e37</anchor>
      <arglist>(Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; up, Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; vp)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Teuchos::LAPACK&lt; int, Real &gt; &gt;</type>
      <name>lapack_</name>
      <anchorfile>classInnerProductMatrixSolver.html</anchorfile>
      <anchor>aa33e9479f7ba253691480235aee8867d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int</type>
      <name>ni_</name>
      <anchorfile>classInnerProductMatrixSolver.html</anchorfile>
      <anchor>ac0828eea6f37b4f8de1f9446fae8bebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int</type>
      <name>nq_</name>
      <anchorfile>classInnerProductMatrixSolver.html</anchorfile>
      <anchor>ad3d9d15be2347ff902d7a61f16100cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>M_</name>
      <anchorfile>classInnerProductMatrixSolver.html</anchorfile>
      <anchor>a05c205b86be3a2624f3a0f3a61cf8f6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char</type>
      <name>TRANS_</name>
      <anchorfile>classInnerProductMatrixSolver.html</anchorfile>
      <anchor>a91766c82c121a573c7ed192d27d8ce48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>ipiv_</name>
      <anchorfile>classInnerProductMatrixSolver.html</anchorfile>
      <anchor>a8d89e661a364f2310a29f5378e4ef8d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>PLU_</name>
      <anchorfile>classInnerProductMatrixSolver.html</anchorfile>
      <anchor>aabcade7dfac73727526d8661e7dcb9c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int</type>
      <name>nrhs_</name>
      <anchorfile>classInnerProductMatrixSolver.html</anchorfile>
      <anchor>a5ff0ad58a04489908d5dbec31d76d379</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>info_</name>
      <anchorfile>classInnerProductMatrixSolver.html</anchorfile>
      <anchor>aa924ac056a72c95629b3c7c6d7264b0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::InteriorPointStep</name>
    <filename>classROL_1_1InteriorPointStep.html</filename>
    <templarg></templarg>
    <base>ROL::Step</base>
    <member kind="function">
      <type></type>
      <name>~InteriorPointStep</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>aa21daa984aaedb8ecc7b47d4ad5c040b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InteriorPointStep</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>addb2a50c4489d30f437013fe4acfe3d5</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a4088b77fa5d81ef15aa03756e5da2321</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, Vector&lt; Real &gt; &amp;l, const Vector&lt; Real &gt; &amp;c, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a92a75947039d8cd9ad995ae6bc4b51e1</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, Vector&lt; Real &gt; &amp;l, const Vector&lt; Real &gt; &amp;c, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a1541391cd4700bce8e254c21331740a2</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;l, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>aa4f6285df647966717620942c6e12653</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;l, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a6fced5ba87a1125146a9f8f0ecd9f16f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, Vector&lt; Real &gt; &amp;l, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>afd087df9801516b6f985330dcac0b226</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, Vector&lt; Real &gt; &amp;l, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a4bd2d12bf43e200a1d2c9123ce86ad55</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a445c43b584c550866fb39b32308eba25</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printHeader</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a8bfad3ee4ddc5f3e219ab6b64e3d40e8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printName</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a28ff57ff8fcdb27bb38af5a1802570ae</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>print</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a52c6dfa52d4e75e6458d03fcbcaa62af</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;algo_state, bool pHeader=false) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>InteriorPoint::PenalizedObjective&lt; Real &gt;</type>
      <name>IPOBJ</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>aabb319ff11476f84f3c76b3e3db2dc08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>InteriorPoint::CompositeConstraint&lt; Real &gt;</type>
      <name>IPCON</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a3dcdc9c63f8a84a465b627cf58cafc1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PartitionedVector&lt; Real &gt;</type>
      <name>PV</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>ac7411df792d4713e07207a1d842c062b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PV::size_type</type>
      <name>size_type</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>aa2edbf928775deecb47a405c37d4de27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StatusTest&lt; Real &gt; &gt;</type>
      <name>status_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a035f63c922f6d7eda371d3cbbcfac6f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Step&lt; Real &gt; &gt;</type>
      <name>step_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a9306fe6d9c2bf5ad15d6a919e5c75fc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; IPOBJ &gt;</type>
      <name>ipobj_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>ad631a74c0a06f465984bc308911e54b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; IPCON &gt;</type>
      <name>ipcon_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>ac3ba4928de0f25ba7f8bad1857c64944</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Algorithm&lt; Real &gt; &gt;</type>
      <name>algo_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a1fdc997ee1c4393d96e40dd7193f7009</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Teuchos::ParameterList &gt;</type>
      <name>parlist_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>acc04ba35c573197fc845141f8d428499</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PV &gt;</type>
      <name>x_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a9fb2fb5ac4738e6feaf7ededdbdc897d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>g_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>af68c66af3f7e47ca72afa0b91f1b3ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>l_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>ae659af4b790ed23d48b3f57063ba8801</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>c_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>ab53afb24024cb3e2bc0ac16f84e8ac62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>mu_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a14171be873cd1b331d4f040f61ebef9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>mumin_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>ab9d33893a30bef98253af193de74433a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>mumax_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a56527dd73db201b1060c4ffb0be00bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>rho_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a2cdf3bf8ae1c9f9b66698c5abf0015c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxit_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a0ff974b4bad9328a5120ab6dd11f2055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>gtol_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a5aee044f1dff78fec0ab5df18b75c9b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>ctol_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a7debee064a391f05ff128922c1ba908e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>stol_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>af2610e10afc7393e829e2d49d80fa139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>subproblemIter_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a8f29effad47ce6e2d36d5107edd76458</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>verbosity_</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a0c125fb12813e84497e1cfd98239e27b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>OPT</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a4232e6312c3d519e0311a4bb7d7327ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>SLACK</name>
      <anchorfile>classROL_1_1InteriorPointStep.html</anchorfile>
      <anchor>a0cd70ef11f7af1cdafbb3bfa124562cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::IterationScaling</name>
    <filename>classROL_1_1IterationScaling.html</filename>
    <templarg></templarg>
    <base>ROL::LineSearch</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IterationScaling</name>
      <anchorfile>classROL_1_1IterationScaling.html</anchorfile>
      <anchor>a9e77110aed2a17df79c8b8c28fd0560a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterationScaling</name>
      <anchorfile>classROL_1_1IterationScaling.html</anchorfile>
      <anchor>aecd2d6ff57d2c1fdf10e991f99cb37c8</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1IterationScaling.html</anchorfile>
      <anchor>a0a9366071b7a190c8cd8e1cf1a9d814e</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x, const ROL::Vector&lt; Real &gt; &amp;s, const ROL::Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classROL_1_1IterationScaling.html</anchorfile>
      <anchor>ada63a5e9c84738604bce4b521e9355ec</anchor>
      <arglist>(Real &amp;alpha, Real &amp;fval, int &amp;ls_neval, int &amp;ls_ngrad, const Real &amp;gs, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>algo_iter_</name>
      <anchorfile>classROL_1_1IterationScaling.html</anchorfile>
      <anchor>aab5acd9ba67fa191680c8c57a8241fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xnew_</name>
      <anchorfile>classROL_1_1IterationScaling.html</anchorfile>
      <anchor>ae8f3aa6da8e8a2cad512156b06ffad8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::KLDivergence</name>
    <filename>classROL_1_1KLDivergence.html</filename>
    <templarg></templarg>
    <base>ROL::RiskMeasure</base>
    <member kind="function">
      <type></type>
      <name>KLDivergence</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>a6a265874865298e4ed1b2e2b7f8c38c7</anchor>
      <arglist>(const Real eps=1.e-2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KLDivergence</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>a665a8779ad9fff057d80fdd1721f6b9c</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>a2b32cf80f6658ce6de8c053b02207c97</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>a0ae219c13a7e19f7ec43aa0fe1ca4eb8</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;v0, const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>acc00a37778f945119aa349e2395cbe7a</anchor>
      <arglist>(const Real val, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getValue</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>a1318d8964497e3de3450ae820fd27647</anchor>
      <arglist>(SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>abb4abfc40a22af84b64a84c5bdc509ce</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>a132923ba63835a0d27eb5763800dcded</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>ac7e7e34f890fef6046f3208f9a6caf6b</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real gv, const Vector&lt; Real &gt; &amp;hv, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHessVec</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>ad77e745531157df64743b008838dff1a</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>a3941d68323bf785d4e4dc5fefd4b73ac</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>exponential</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>ab118eb839abe21e2e7d051b8d480e70a</anchor>
      <arglist>(const Real arg1, const Real arg2) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>exponential</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>a6a0c75db1e6bed566b65cf0e3be34da3</anchor>
      <arglist>(const Real arg) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>power</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>a90f4a74d0b8214f5fbbb74987fdce6d4</anchor>
      <arglist>(const Real arg, const Real pow) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>eps_</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>aba7dea4c6b477f3b3a659e82d802f987</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>gval_</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>a2264420d719d9e3c9f9de958d0079166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>gvval_</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>a1e45e3ffc80284145c3fd26e7229c9b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>hval_</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>a8fb467619c7505ec994139d767958122</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>scaledGradient_</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>aa7d877adc01367b3c5629a5a7fd3a383</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>scaledHessVec_</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>a5b29c9604c1390322ff8e0d6884da2d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector1_</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>a4263b64ac3322ad6e3604ca3e2e942e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector2_</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>a2aa5cfaee8ade44eadb7a2f74166cf78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>xstat_</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>ad064a6948c122eecc14afae7dd6fa2ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>vstat_</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>a80aa53b62c93c4e3ddbc4d9d499cdb3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstReset_</name>
      <anchorfile>classROL_1_1KLDivergence.html</anchorfile>
      <anchor>aa96151c7be2e326008610ad606aab969</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Krylov</name>
    <filename>classROL_1_1Krylov.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Krylov</name>
      <anchorfile>classROL_1_1Krylov.html</anchorfile>
      <anchor>a7994b04ff7ad3295e52d23293e44443b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Krylov</name>
      <anchorfile>classROL_1_1Krylov.html</anchorfile>
      <anchor>a81e73b24943df37a5589349bc26e1de2</anchor>
      <arglist>(Real absTol=1.e-4, Real relTol=1.e-2, unsigned maxit=100)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>classROL_1_1Krylov.html</anchorfile>
      <anchor>a7746f96b8aac6366e33810cfd69a133b</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, LinearOperator&lt; Real &gt; &amp;A, const Vector&lt; Real &gt; &amp;b, LinearOperator&lt; Real &gt; &amp;M, int &amp;iter, int &amp;flag)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetAbsoluteTolerance</name>
      <anchorfile>classROL_1_1Krylov.html</anchorfile>
      <anchor>a6c86cdaf12ddd6e00ceee65f4a6692e9</anchor>
      <arglist>(const Real absTol) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetRelativeTolerance</name>
      <anchorfile>classROL_1_1Krylov.html</anchorfile>
      <anchor>af378f0cf9c77a3e02a827de22a72edf8</anchor>
      <arglist>(const Real relTol) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetMaximumIteration</name>
      <anchorfile>classROL_1_1Krylov.html</anchorfile>
      <anchor>a7c8901ea25c3262580f2c68ec3730bbf</anchor>
      <arglist>(const unsigned maxit)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAbsoluteTolerance</name>
      <anchorfile>classROL_1_1Krylov.html</anchorfile>
      <anchor>a27917ecf851f7c3f61456cb99b295393</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRelativeTolerance</name>
      <anchorfile>classROL_1_1Krylov.html</anchorfile>
      <anchor>a2141697a587cb8c025aeab3a4948ffd3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getMaximumIteration</name>
      <anchorfile>classROL_1_1Krylov.html</anchorfile>
      <anchor>a67c77d542e53767f85fb96db8e9a47ac</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>absTol_</name>
      <anchorfile>classROL_1_1Krylov.html</anchorfile>
      <anchor>a7283f4527c6f93139247fb05e1ce62b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>relTol_</name>
      <anchorfile>classROL_1_1Krylov.html</anchorfile>
      <anchor>af9a0d7b53a3d212063e2bd0db22e709e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>maxit_</name>
      <anchorfile>classROL_1_1Krylov.html</anchorfile>
      <anchor>a314c633375a448f923792f8962a80ce9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Kumaraswamy</name>
    <filename>classROL_1_1Kumaraswamy.html</filename>
    <templarg></templarg>
    <base>ROL::Distribution</base>
    <member kind="function">
      <type></type>
      <name>Kumaraswamy</name>
      <anchorfile>classROL_1_1Kumaraswamy.html</anchorfile>
      <anchor>af616a0f3d58ff1e2b6a8d93df7bca358</anchor>
      <arglist>(const Real a=0., const Real b=1., const Real exp1=0.5, const Real exp2=0.5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Kumaraswamy</name>
      <anchorfile>classROL_1_1Kumaraswamy.html</anchorfile>
      <anchor>af8258e473f89bef680e850d93d54a824</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluatePDF</name>
      <anchorfile>classROL_1_1Kumaraswamy.html</anchorfile>
      <anchor>a924edbdcffb04468852fde70cb1dc40f</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluateCDF</name>
      <anchorfile>classROL_1_1Kumaraswamy.html</anchorfile>
      <anchor>aabac4f3967600be09278907be0cd9998</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>integrateCDF</name>
      <anchorfile>classROL_1_1Kumaraswamy.html</anchorfile>
      <anchor>a56c9162b3f39408624a0f494ba9d53e4</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>invertCDF</name>
      <anchorfile>classROL_1_1Kumaraswamy.html</anchorfile>
      <anchor>a0a8197459f4587ce8b9b1d642ff14275</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>moment</name>
      <anchorfile>classROL_1_1Kumaraswamy.html</anchorfile>
      <anchor>a286a1e249590518dcd118f0e0139f227</anchor>
      <arglist>(const size_t m) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>lowerBound</name>
      <anchorfile>classROL_1_1Kumaraswamy.html</anchorfile>
      <anchor>ae6f7c1af3c06f23968bcee77fed20947</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>upperBound</name>
      <anchorfile>classROL_1_1Kumaraswamy.html</anchorfile>
      <anchor>a20388b992c40d5a421d404b666cd4070</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1Kumaraswamy.html</anchorfile>
      <anchor>a42090f7ce9e54f4529d454c6f3c61624</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>size_t</type>
      <name>nchoosek</name>
      <anchorfile>classROL_1_1Kumaraswamy.html</anchorfile>
      <anchor>ae751867181a1913cbebc50ae67234cf9</anchor>
      <arglist>(const size_t n, const size_t k) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>a_</name>
      <anchorfile>classROL_1_1Kumaraswamy.html</anchorfile>
      <anchor>a318c7bd56a4a92a8aab9b55715ae40bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>b_</name>
      <anchorfile>classROL_1_1Kumaraswamy.html</anchorfile>
      <anchor>a03aa33e24cb6b0db5aa17711d24aab84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>exp1_</name>
      <anchorfile>classROL_1_1Kumaraswamy.html</anchorfile>
      <anchor>a99f745c9791093885d780516c7b84dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>exp2_</name>
      <anchorfile>classROL_1_1Kumaraswamy.html</anchorfile>
      <anchor>a03b9f2fdc6ea3c10370a7bc4123b7c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>bGAMMAb_</name>
      <anchorfile>classROL_1_1Kumaraswamy.html</anchorfile>
      <anchor>a225824726e60311b371b3ae92a13bf60</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>L2BoundConstraint</name>
    <filename>classL2BoundConstraint.html</filename>
    <templarg></templarg>
    <base>ROL::BoundConstraint</base>
    <base>ROL::BoundConstraint</base>
    <base>ROL::BoundConstraint</base>
    <base>ROL::BoundConstraint</base>
    <member kind="function">
      <type></type>
      <name>L2BoundConstraint</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a19c137073a7560928cbadd930dfef754</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;l, std::vector&lt; Real &gt; &amp;u, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem, Real scale=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a192835e1cdb2ed8d3348bfc7f4d0a56c</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ab94cbcd09dcd89495b8ec27138c38e53</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ac1ac6477251bc3d0306b4a669daaf67e</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>abbafacec33fe8f7eb6be4cbba4e0dd06</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a192c5c41c08c763d46156e81b03a340a</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ad463cf324c73a4cc86f0ba1089036084</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a75090389754bad5b175a22d179b420a7</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a6238ceb09d95d58c208f06d978575d13</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToUpperBound</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ae4002a5b731511b518a63f14ce46a945</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToLowerBound</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>aa5c2b737fc512b94b3d080186834e0c7</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2BoundConstraint</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a19c137073a7560928cbadd930dfef754</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;l, std::vector&lt; Real &gt; &amp;u, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem, Real scale=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a192835e1cdb2ed8d3348bfc7f4d0a56c</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ab94cbcd09dcd89495b8ec27138c38e53</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ac1ac6477251bc3d0306b4a669daaf67e</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>abbafacec33fe8f7eb6be4cbba4e0dd06</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a192c5c41c08c763d46156e81b03a340a</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ad463cf324c73a4cc86f0ba1089036084</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a75090389754bad5b175a22d179b420a7</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a6238ceb09d95d58c208f06d978575d13</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToUpperBound</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ae4002a5b731511b518a63f14ce46a945</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToLowerBound</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>aa5c2b737fc512b94b3d080186834e0c7</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2BoundConstraint</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a19c137073a7560928cbadd930dfef754</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;l, std::vector&lt; Real &gt; &amp;u, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem, Real scale=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a192835e1cdb2ed8d3348bfc7f4d0a56c</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ab94cbcd09dcd89495b8ec27138c38e53</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ac1ac6477251bc3d0306b4a669daaf67e</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>abbafacec33fe8f7eb6be4cbba4e0dd06</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a192c5c41c08c763d46156e81b03a340a</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ad463cf324c73a4cc86f0ba1089036084</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a75090389754bad5b175a22d179b420a7</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a6238ceb09d95d58c208f06d978575d13</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToUpperBound</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ae4002a5b731511b518a63f14ce46a945</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToLowerBound</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>aa5c2b737fc512b94b3d080186834e0c7</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2BoundConstraint</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a19c137073a7560928cbadd930dfef754</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;l, std::vector&lt; Real &gt; &amp;u, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem, Real scale=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a192835e1cdb2ed8d3348bfc7f4d0a56c</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ab94cbcd09dcd89495b8ec27138c38e53</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ac1ac6477251bc3d0306b4a669daaf67e</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>abbafacec33fe8f7eb6be4cbba4e0dd06</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a192c5c41c08c763d46156e81b03a340a</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ad463cf324c73a4cc86f0ba1089036084</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a75090389754bad5b175a22d179b420a7</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a6238ceb09d95d58c208f06d978575d13</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToUpperBound</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ae4002a5b731511b518a63f14ce46a945</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToLowerBound</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>aa5c2b737fc512b94b3d080186834e0c7</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;l)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_vector</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ad94131e13a06156b960bcb7e14c30236</anchor>
      <arglist>(Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;xvec, ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_const_vector</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>aacfd9a7aa7ebff73da91369a58a7fa2c</anchor>
      <arglist>(Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; &amp;xvec, const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a833ad6fc2b4062a0878f0c9bfc2bb41e</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;out, const Real a, const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>projection</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a24674745718d58730fe6848c013f199e</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_vector</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ad94131e13a06156b960bcb7e14c30236</anchor>
      <arglist>(Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;xvec, ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_const_vector</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>aacfd9a7aa7ebff73da91369a58a7fa2c</anchor>
      <arglist>(Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; &amp;xvec, const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a833ad6fc2b4062a0878f0c9bfc2bb41e</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;out, const Real a, const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>projection</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a24674745718d58730fe6848c013f199e</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_vector</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ad94131e13a06156b960bcb7e14c30236</anchor>
      <arglist>(Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;xvec, ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_const_vector</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>aacfd9a7aa7ebff73da91369a58a7fa2c</anchor>
      <arglist>(Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; &amp;xvec, const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a833ad6fc2b4062a0878f0c9bfc2bb41e</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;out, const Real a, const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>projection</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a24674745718d58730fe6848c013f199e</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_vector</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>ad94131e13a06156b960bcb7e14c30236</anchor>
      <arglist>(Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;xvec, ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_const_vector</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>aacfd9a7aa7ebff73da91369a58a7fa2c</anchor>
      <arglist>(Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt; &amp;xvec, const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a833ad6fc2b4062a0878f0c9bfc2bb41e</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;out, const Real a, const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>projection</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a24674745718d58730fe6848c013f199e</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>dim_</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a555f4d499d249fc956aaff1d66715455</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>x_lo_</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a53b83c7dfd7a58e90d9f4b86a83cb11f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>x_up_</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a7708976aa2e6426074b06232f73d3093</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>min_diff_</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a34b773874bc1c54d3ead2582f1b1e5da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>scale_</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a68c82f2740591d6d79a946a627f6acfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt;</type>
      <name>fem_</name>
      <anchorfile>classL2BoundConstraint.html</anchorfile>
      <anchor>a5e0ea744d351fa301c147b10e51386da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>L2VectorBatchManager</name>
    <filename>classL2VectorBatchManager.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>ROL::TeuchosBatchManager</base>
    <base>ROL::TeuchosBatchManager</base>
    <base>ROL::TeuchosBatchManager</base>
    <member kind="function">
      <type></type>
      <name>L2VectorBatchManager</name>
      <anchorfile>classL2VectorBatchManager.html</anchorfile>
      <anchor>ada13d4548b853ab828047482fa29c25f</anchor>
      <arglist>(const Teuchos::RCP&lt; const Teuchos::Comm&lt; Ordinal &gt; &gt; &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sumAll</name>
      <anchorfile>classL2VectorBatchManager.html</anchorfile>
      <anchor>af78e02ed40b09f81ba9c9e1bb7dd9e95</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;input, ROL::Vector&lt; Real &gt; &amp;output)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2VectorBatchManager</name>
      <anchorfile>classL2VectorBatchManager.html</anchorfile>
      <anchor>ada13d4548b853ab828047482fa29c25f</anchor>
      <arglist>(const Teuchos::RCP&lt; const Teuchos::Comm&lt; Ordinal &gt; &gt; &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sumAll</name>
      <anchorfile>classL2VectorBatchManager.html</anchorfile>
      <anchor>af78e02ed40b09f81ba9c9e1bb7dd9e95</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;input, ROL::Vector&lt; Real &gt; &amp;output)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2VectorBatchManager</name>
      <anchorfile>classL2VectorBatchManager.html</anchorfile>
      <anchor>ada13d4548b853ab828047482fa29c25f</anchor>
      <arglist>(const Teuchos::RCP&lt; const Teuchos::Comm&lt; Ordinal &gt; &gt; &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sumAll</name>
      <anchorfile>classL2VectorBatchManager.html</anchorfile>
      <anchor>af78e02ed40b09f81ba9c9e1bb7dd9e95</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;input, ROL::Vector&lt; Real &gt; &amp;output)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_vector</name>
      <anchorfile>classL2VectorBatchManager.html</anchorfile>
      <anchor>a47710db49eb1998257835b91b920acca</anchor>
      <arglist>(Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;xvec, ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_vector</name>
      <anchorfile>classL2VectorBatchManager.html</anchorfile>
      <anchor>a47710db49eb1998257835b91b920acca</anchor>
      <arglist>(Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;xvec, ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cast_vector</name>
      <anchorfile>classL2VectorBatchManager.html</anchorfile>
      <anchor>a47710db49eb1998257835b91b920acca</anchor>
      <arglist>(Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;xvec, ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>L2VectorDual</name>
    <filename>classL2VectorDual.html</filename>
    <templarg></templarg>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <member kind="function">
      <type></type>
      <name>L2VectorDual</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a8405b0dd78d6eb78d9d752bfda477a97</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a15e902c7418a23c98e85e577a1bd9e8f</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a79e5b3c3c5d4d562286fe0e7fc3e40a6</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a4be9843d610d41dcfea7da1cea404dd4</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>ad6e1f349ed83a3f2c703e89f4ee818bd</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a40e910e4a0cd5c4eca71465c10924e24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a0630da61db9a426f7c0203bdbb0f69be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>afd3a8ecbac079aa3ce7006d8cdf04e61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a811073fa00b20814593f164a0ef2c174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>aaf655a6d37a75660300078b0cda4f44b</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a4967c4b845468fd6958ef146c0ee2c7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>ac38a35257eaa3157f51cb0bebebd666f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2VectorDual</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a8405b0dd78d6eb78d9d752bfda477a97</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a15e902c7418a23c98e85e577a1bd9e8f</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a79e5b3c3c5d4d562286fe0e7fc3e40a6</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a4be9843d610d41dcfea7da1cea404dd4</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>ad6e1f349ed83a3f2c703e89f4ee818bd</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a40e910e4a0cd5c4eca71465c10924e24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a0630da61db9a426f7c0203bdbb0f69be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>afd3a8ecbac079aa3ce7006d8cdf04e61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a811073fa00b20814593f164a0ef2c174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>aaf655a6d37a75660300078b0cda4f44b</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a4967c4b845468fd6958ef146c0ee2c7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>ac38a35257eaa3157f51cb0bebebd666f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2VectorDual</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a8405b0dd78d6eb78d9d752bfda477a97</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a15e902c7418a23c98e85e577a1bd9e8f</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a79e5b3c3c5d4d562286fe0e7fc3e40a6</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a4be9843d610d41dcfea7da1cea404dd4</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>ad6e1f349ed83a3f2c703e89f4ee818bd</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a40e910e4a0cd5c4eca71465c10924e24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a0630da61db9a426f7c0203bdbb0f69be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>afd3a8ecbac079aa3ce7006d8cdf04e61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a811073fa00b20814593f164a0ef2c174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>aaf655a6d37a75660300078b0cda4f44b</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a4967c4b845468fd6958ef146c0ee2c7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>ac38a35257eaa3157f51cb0bebebd666f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2VectorDual</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a8405b0dd78d6eb78d9d752bfda477a97</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a15e902c7418a23c98e85e577a1bd9e8f</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a79e5b3c3c5d4d562286fe0e7fc3e40a6</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a4be9843d610d41dcfea7da1cea404dd4</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>ad6e1f349ed83a3f2c703e89f4ee818bd</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a40e910e4a0cd5c4eca71465c10924e24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a0630da61db9a426f7c0203bdbb0f69be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>afd3a8ecbac079aa3ce7006d8cdf04e61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a811073fa00b20814593f164a0ef2c174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>aaf655a6d37a75660300078b0cda4f44b</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a4967c4b845468fd6958ef146c0ee2c7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>ac38a35257eaa3157f51cb0bebebd666f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2VectorDual</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a8405b0dd78d6eb78d9d752bfda477a97</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a15e902c7418a23c98e85e577a1bd9e8f</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a79e5b3c3c5d4d562286fe0e7fc3e40a6</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a4be9843d610d41dcfea7da1cea404dd4</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>ad6e1f349ed83a3f2c703e89f4ee818bd</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a40e910e4a0cd5c4eca71465c10924e24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a0630da61db9a426f7c0203bdbb0f69be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>afd3a8ecbac079aa3ce7006d8cdf04e61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a811073fa00b20814593f164a0ef2c174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>aaf655a6d37a75660300078b0cda4f44b</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a4967c4b845468fd6958ef146c0ee2c7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>ac38a35257eaa3157f51cb0bebebd666f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>vec_</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a69b996ffae5071d9f277dd30305a2f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt;</type>
      <name>fem_</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a8c30a2b47bf866cc3543a03bd0dcd517</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; L2VectorPrimal&lt; Real &gt; &gt;</type>
      <name>dual_vec_</name>
      <anchorfile>classL2VectorDual.html</anchorfile>
      <anchor>a5274a4b463e88dbe1903724288ad43bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>L2VectorPrimal</name>
    <filename>classL2VectorPrimal.html</filename>
    <templarg></templarg>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <member kind="function">
      <type></type>
      <name>L2VectorPrimal</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a784944815d88b48d3f400e59809eb9ec</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a1878173be3e71c6f6215076ab18a8e41</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a8ad5cc66203487ea3ae15d46d34f1de8</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>afd8137cb5cae54483928e5f78eecff35</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>aabed9dbb127fc791e0ac6b7d82eedac6</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a0c2900493ac56acef50e4080d2efd233</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a94cb401c8f5a770ab1d04cbbfb1a5398</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>acf3ab4d67b9838a9156a7c7a56c9b92c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>ac3506307d7ad533bb6ef3c1ed7e8e09c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a2fe81e5445e1329e81be10eece580351</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a40ae91922f17feed5c7569eb3fe2c29c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a10208989ab2fdcc041149ba6f5952c45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2VectorPrimal</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a784944815d88b48d3f400e59809eb9ec</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a1878173be3e71c6f6215076ab18a8e41</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a8ad5cc66203487ea3ae15d46d34f1de8</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>afd8137cb5cae54483928e5f78eecff35</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>aabed9dbb127fc791e0ac6b7d82eedac6</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a0c2900493ac56acef50e4080d2efd233</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a94cb401c8f5a770ab1d04cbbfb1a5398</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>acf3ab4d67b9838a9156a7c7a56c9b92c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>ac3506307d7ad533bb6ef3c1ed7e8e09c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a2fe81e5445e1329e81be10eece580351</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a40ae91922f17feed5c7569eb3fe2c29c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a10208989ab2fdcc041149ba6f5952c45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2VectorPrimal</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a784944815d88b48d3f400e59809eb9ec</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a1878173be3e71c6f6215076ab18a8e41</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a8ad5cc66203487ea3ae15d46d34f1de8</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>afd8137cb5cae54483928e5f78eecff35</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>aabed9dbb127fc791e0ac6b7d82eedac6</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a0c2900493ac56acef50e4080d2efd233</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a94cb401c8f5a770ab1d04cbbfb1a5398</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>acf3ab4d67b9838a9156a7c7a56c9b92c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>ac3506307d7ad533bb6ef3c1ed7e8e09c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a2fe81e5445e1329e81be10eece580351</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a40ae91922f17feed5c7569eb3fe2c29c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a10208989ab2fdcc041149ba6f5952c45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2VectorPrimal</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a784944815d88b48d3f400e59809eb9ec</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a1878173be3e71c6f6215076ab18a8e41</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a8ad5cc66203487ea3ae15d46d34f1de8</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>afd8137cb5cae54483928e5f78eecff35</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>aabed9dbb127fc791e0ac6b7d82eedac6</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a0c2900493ac56acef50e4080d2efd233</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a94cb401c8f5a770ab1d04cbbfb1a5398</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>acf3ab4d67b9838a9156a7c7a56c9b92c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>ac3506307d7ad533bb6ef3c1ed7e8e09c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a2fe81e5445e1329e81be10eece580351</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a40ae91922f17feed5c7569eb3fe2c29c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a10208989ab2fdcc041149ba6f5952c45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2VectorPrimal</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a784944815d88b48d3f400e59809eb9ec</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a1878173be3e71c6f6215076ab18a8e41</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a8ad5cc66203487ea3ae15d46d34f1de8</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>afd8137cb5cae54483928e5f78eecff35</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>aabed9dbb127fc791e0ac6b7d82eedac6</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a0c2900493ac56acef50e4080d2efd233</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a94cb401c8f5a770ab1d04cbbfb1a5398</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>acf3ab4d67b9838a9156a7c7a56c9b92c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>ac3506307d7ad533bb6ef3c1ed7e8e09c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a2fe81e5445e1329e81be10eece580351</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a40ae91922f17feed5c7569eb3fe2c29c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a10208989ab2fdcc041149ba6f5952c45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>vec_</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a62e4d37b2a1b3c15916af692ce7145b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt;</type>
      <name>fem_</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a6d103747f6c7638700e62a46bb323e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; L2VectorDual&lt; Real &gt; &gt;</type>
      <name>dual_vec_</name>
      <anchorfile>classL2VectorPrimal.html</anchorfile>
      <anchor>a0c7656e9fabf22e63434ac53c5f5e184</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Lagrange</name>
    <filename>classLagrange.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Lagrange</name>
      <anchorfile>classLagrange.html</anchorfile>
      <anchor>a170754dc58adcbf7a7de57d9a6b0d43b</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;xin, const std::vector&lt; Real &gt; &amp;xev)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Lagrange</name>
      <anchorfile>classLagrange.html</anchorfile>
      <anchor>a27a3d9b5f8301631599e4cdd4e00d0b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interp</name>
      <anchorfile>classLagrange.html</anchorfile>
      <anchor>a65c384171da6b801126aaeb43801a121</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;f, std::vector&lt; Real &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dinterp</name>
      <anchorfile>classLagrange.html</anchorfile>
      <anchor>aaeb95bad261123b7180a999e3c9eca94</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;f, std::vector&lt; Real &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolant</name>
      <anchorfile>classLagrange.html</anchorfile>
      <anchor>a796084cbf4b5aaac5bac05988e8f8066</anchor>
      <arglist>(const int k, std::vector&lt; Real &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>derivative</name>
      <anchorfile>classLagrange.html</anchorfile>
      <anchor>ac5b12a983e3d80ee6a0f1c0a0ab70791</anchor>
      <arglist>(const int k, std::vector&lt; Real &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bi_sum</name>
      <anchorfile>classLagrange.html</anchorfile>
      <anchor>a7bb2f118dee0ba878075dc4f107bd4a6</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;f, std::vector&lt; Real &gt; &amp;y)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::vector&lt; Real &gt;</type>
      <name>xin_</name>
      <anchorfile>classLagrange.html</anchorfile>
      <anchor>a3d6c4cc741133e2895f59ed7d4abd526</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::vector&lt; Real &gt;</type>
      <name>xev_</name>
      <anchorfile>classLagrange.html</anchorfile>
      <anchor>af24ffa6ebff0ef4015066b9b5cfcab22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int</type>
      <name>nin_</name>
      <anchorfile>classLagrange.html</anchorfile>
      <anchor>abe2c6edb67d32204eda87da79c34463f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int</type>
      <name>nev_</name>
      <anchorfile>classLagrange.html</anchorfile>
      <anchor>ad5ec87890aead55646c0a873795a1b78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>w_</name>
      <anchorfile>classLagrange.html</anchorfile>
      <anchor>a83be1b25ab0a97d762188c807c7deea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>ell_</name>
      <anchorfile>classLagrange.html</anchorfile>
      <anchor>a91c6ec0aa2828fe5d6091b08b2f7c4c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>D_</name>
      <anchorfile>classLagrange.html</anchorfile>
      <anchor>ad9f1a036e0f978e25c433b7a1e233607</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Laplace</name>
    <filename>classROL_1_1Laplace.html</filename>
    <templarg></templarg>
    <base>ROL::Distribution</base>
    <member kind="function">
      <type></type>
      <name>Laplace</name>
      <anchorfile>classROL_1_1Laplace.html</anchorfile>
      <anchor>a697f14a3874bbcf96f3692c57a180945</anchor>
      <arglist>(const Real mean=0., const Real scale=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Laplace</name>
      <anchorfile>classROL_1_1Laplace.html</anchorfile>
      <anchor>a7caa1174286975d95c0a61771fe7116f</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluatePDF</name>
      <anchorfile>classROL_1_1Laplace.html</anchorfile>
      <anchor>af5020f899ec13975c1256bd25b972bad</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluateCDF</name>
      <anchorfile>classROL_1_1Laplace.html</anchorfile>
      <anchor>a28b287948706c585c35132801317fd54</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>integrateCDF</name>
      <anchorfile>classROL_1_1Laplace.html</anchorfile>
      <anchor>a1bdce73224f65f97356beae6878f3806</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>invertCDF</name>
      <anchorfile>classROL_1_1Laplace.html</anchorfile>
      <anchor>a051a2ec265043cf00602552346f73591</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>moment</name>
      <anchorfile>classROL_1_1Laplace.html</anchorfile>
      <anchor>adce46f2a4496bde8a4e9d31a398c9ff7</anchor>
      <arglist>(const size_t m) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>lowerBound</name>
      <anchorfile>classROL_1_1Laplace.html</anchorfile>
      <anchor>acfa734df70c2612b9d9811b471ec38d0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>upperBound</name>
      <anchorfile>classROL_1_1Laplace.html</anchorfile>
      <anchor>a6252f27d4588c1e45863fbc6c8027411</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1Laplace.html</anchorfile>
      <anchor>a19ee51fda69de6f4c26290dd2f380c40</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>size_t</type>
      <name>compute_coeff</name>
      <anchorfile>classROL_1_1Laplace.html</anchorfile>
      <anchor>a8e5dedf92872cbf5ddc46a13293df203</anchor>
      <arglist>(const size_t m, const size_t k) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>mean_</name>
      <anchorfile>classROL_1_1Laplace.html</anchorfile>
      <anchor>ae54bc1638ec94bbf240dcde2e1aef49f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>scale_</name>
      <anchorfile>classROL_1_1Laplace.html</anchorfile>
      <anchor>af71ce246b5481e9e8899022452955eb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::lBFGS</name>
    <filename>classROL_1_1lBFGS.html</filename>
    <templarg></templarg>
    <base>ROL::Secant</base>
    <member kind="function">
      <type></type>
      <name>lBFGS</name>
      <anchorfile>classROL_1_1lBFGS.html</anchorfile>
      <anchor>a9f8e334de17642efb3cfa6f0e6b019e3</anchor>
      <arglist>(int M)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyH</name>
      <anchorfile>classROL_1_1lBFGS.html</anchorfile>
      <anchor>a6a2ad0602c797cffe88dfbacf2ffc63f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyB</name>
      <anchorfile>classROL_1_1lBFGS.html</anchorfile>
      <anchor>acee37bca33ad19c24ebf1bc78650a329</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Bv, const Vector&lt; Real &gt; &amp;v) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::lDFP</name>
    <filename>classROL_1_1lDFP.html</filename>
    <templarg></templarg>
    <base>ROL::Secant</base>
    <member kind="function">
      <type></type>
      <name>lDFP</name>
      <anchorfile>classROL_1_1lDFP.html</anchorfile>
      <anchor>ac41b1ea46feae9475c1417ad1e42f73a</anchor>
      <arglist>(int M)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyH</name>
      <anchorfile>classROL_1_1lDFP.html</anchorfile>
      <anchor>ae6ef8323a9f7190df9ee5fe6172db068</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyH0</name>
      <anchorfile>classROL_1_1lDFP.html</anchorfile>
      <anchor>a3f7a6fca65d573eac7b4f22882350c87</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyB</name>
      <anchorfile>classROL_1_1lDFP.html</anchorfile>
      <anchor>ae46a35764ac4832210fde935c5e18a9f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Bv, const Vector&lt; Real &gt; &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyB0</name>
      <anchorfile>classROL_1_1lDFP.html</anchorfile>
      <anchor>ae00a26de3433fb2bccf825da99e6f450</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Bv, const Vector&lt; Real &gt; &amp;v) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::LinearCombinationObjective</name>
    <filename>classROL_1_1LinearCombinationObjective.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>LinearCombinationObjective</name>
      <anchorfile>classROL_1_1LinearCombinationObjective.html</anchorfile>
      <anchor>a160b3d2438cf061741f2b370f8de554f</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;weights, const std::vector&lt; Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &gt; &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1LinearCombinationObjective.html</anchorfile>
      <anchor>a76b31870f6335de72558bdbb21557296</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1LinearCombinationObjective.html</anchorfile>
      <anchor>ad1aa2f5c194a9fcba6e6d5e1637196b6</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1LinearCombinationObjective.html</anchorfile>
      <anchor>a20ccc9761b4a866e0a029dc6c9801dac</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::vector&lt; Real &gt;</type>
      <name>weights_</name>
      <anchorfile>classROL_1_1LinearCombinationObjective.html</anchorfile>
      <anchor>a5ca9d54a0fc06586a52d525329797645</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1LinearCombinationObjective.html</anchorfile>
      <anchor>a2ca0677669fb12cf47964492aaa0f15b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>size_</name>
      <anchorfile>classROL_1_1LinearCombinationObjective.html</anchorfile>
      <anchor>a4c8f919f414df0008ce34453ccea93ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xdual_</name>
      <anchorfile>classROL_1_1LinearCombinationObjective.html</anchorfile>
      <anchor>a97f3c6167525308292b588c067830f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>initialized_</name>
      <anchorfile>classROL_1_1LinearCombinationObjective.html</anchorfile>
      <anchor>a5c54a14232a27dac9635e784aa7b16c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::LinearObjective</name>
    <filename>classROL_1_1LinearObjective.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>LinearObjective</name>
      <anchorfile>classROL_1_1LinearObjective.html</anchorfile>
      <anchor>ac084625e4746f8955fe93375f7903264</anchor>
      <arglist>(const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1LinearObjective.html</anchorfile>
      <anchor>af431536d53899d6563fe386fbd6ae1a8</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1LinearObjective.html</anchorfile>
      <anchor>a2290258c3d2a76b315d590317a2a085d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1LinearObjective.html</anchorfile>
      <anchor>a6a4933c0e88983f4945d028b3da97302</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>cost_</name>
      <anchorfile>classROL_1_1LinearObjective.html</anchorfile>
      <anchor>aeb80fd4209b1dac3cc170bf7516858b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::LinearOperator</name>
    <filename>classROL_1_1LinearOperator.html</filename>
    <templarg>Real</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearOperator</name>
      <anchorfile>classROL_1_1LinearOperator.html</anchorfile>
      <anchor>a353957999dcfd7749b80fa6b04ba6f3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1LinearOperator.html</anchorfile>
      <anchor>a2b0b2e54938e771437477bbec0e0ab55</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classROL_1_1LinearOperator.html</anchorfile>
      <anchor>aae00e4f192a0895c44b280a0191f0aca</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, Real &amp;tol) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyInverse</name>
      <anchorfile>classROL_1_1LinearOperator.html</anchorfile>
      <anchor>a3cb1b088a2d6ae01fd0d94ba558f1d51</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, Real &amp;tol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::LineSearch</name>
    <filename>classROL_1_1LineSearch.html</filename>
    <templarg>Real</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LineSearch</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>ab6937be0331b717d891a0ade6757126b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LineSearch</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>af4792119fdc2b982bacde5031101b0b7</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a63a83e67221c230ed0b6c62843089361</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>acc85f2b6ff8b2afe60ee082b120e5e70</anchor>
      <arglist>(Real &amp;alpha, Real &amp;fval, int &amp;ls_neval, int &amp;ls_ngrad, const Real &amp;gs, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a1d28114f265deb73f19cda7f2cb12561</anchor>
      <arglist>(Real &amp;eps, const Vector&lt; Real &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxitUpdate</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>ab2fbbf977254a3da29893c3d08d1907d</anchor>
      <arglist>(Real &amp;alpha, Real &amp;fnew, const Real &amp;fold)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>status</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a0baea173a437ea28e6195eb025bc8527</anchor>
      <arglist>(const ELineSearch type, int &amp;ls_neval, int &amp;ls_ngrad, const Real alpha, const Real fold, const Real sgold, const Real fnew, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Real</type>
      <name>getInitialAlpha</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>aad83be9de23cc3689377d73fc6eb3195</anchor>
      <arglist>(int &amp;ls_neval, int &amp;ls_ngrad, const Real fval, const Real gs, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setNextInitialAlpha</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>ab344e64e6d5471e8a3db4c0c4e4f83c0</anchor>
      <arglist>(Real alpha)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateIterate</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a5f7eaac795e31bd953d1ed79e640f7c4</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;xnew, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Real alpha, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>useLocalMinimizer</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a6d6178cbfc5f899307eae6602e216bec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>takeNoStep</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a96bec17602b964c45dfed499d5b004e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ECurvatureCondition</type>
      <name>econd_</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a1142ace139d04f3cc6ffeefc9ea7e4f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EDescent</type>
      <name>edesc_</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a9a8d6982992896a4a9492d3de88908d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useralpha_</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a5492599beda6ef045b5ee48df22d9bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>usePrevAlpha_</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a39d78c53224a59c6b3bca559d3c03797</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>alpha0_</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a9da45abb8f9792adeebccced833d6552</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxit_</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a8507f7e74a102813a977f193950f1e15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>c1_</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a8192992f90d8d9d3258b48e40fcc36bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>c2_</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a7178bdd447e2ca7eebbc58d7f7ff065d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>c3_</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a886ed4aea39b5670edc33596b26a8961</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>eps_</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a9adb1b3c920c2c094c52df20c8a98718</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>fmin_</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a58155b6cb4800797b4628d6b099af300</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>alphaMin_</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a2edc2904ca4a2dd6c5f115b4eb59764a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>acceptMin_</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a456df5574e46de40ecc5ab4b8048b36e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>itcond_</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>ab7b67b3fc0c2925f1016fb7acb14e11f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xtst_</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a956e401cbb78f8c10d3fb9b038c8580a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>d_</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>ab9559cd435e92f78478824d34fa892f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>g_</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a8aeb28cbff1a844fa47f71510f0ca19a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>grad_</name>
      <anchorfile>classROL_1_1LineSearch.html</anchorfile>
      <anchor>a7fa9c7d66ef872aa7c6b12e87b219ab1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ScalarMinimizationLineSearch::LineSearchStatusTest</name>
    <filename>classROL_1_1ScalarMinimizationLineSearch_1_1LineSearchStatusTest.html</filename>
    <member kind="function">
      <type></type>
      <name>LineSearchStatusTest</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1LineSearchStatusTest.html</anchorfile>
      <anchor>a427e170e8266af065ec853e85a31d7cc</anchor>
      <arglist>(const Real f0, const Real g0, const Real c1, const Real c2, const Real c3, const int max_nfval, ECurvatureCondition econd, const Teuchos::RCP&lt; ScalarFunction&lt; Real &gt; &gt; &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1LineSearchStatusTest.html</anchorfile>
      <anchor>ab821a915ff553eedf1ada794b7f91cf1</anchor>
      <arglist>(Real &amp;x, Real &amp;fx, Real &amp;gx, int &amp;nfval, int &amp;ngval, const bool deriv=false)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; ScalarFunction&lt; Real &gt; &gt;</type>
      <name>phi_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1LineSearchStatusTest.html</anchorfile>
      <anchor>a0e79c55ee88a16286748e320f84aaa43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>f0_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1LineSearchStatusTest.html</anchorfile>
      <anchor>aa51e8fc99ebf584333f0e9deaef9a688</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>g0_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1LineSearchStatusTest.html</anchorfile>
      <anchor>a3bbe1acc63e90a6287724e9a07e2ef2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>c1_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1LineSearchStatusTest.html</anchorfile>
      <anchor>a63312db8b88c08a717113364634d9c4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>c2_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1LineSearchStatusTest.html</anchorfile>
      <anchor>a632d46e83164ac5e38033b669bfc6872</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>c3_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1LineSearchStatusTest.html</anchorfile>
      <anchor>abb7874b85546964212f4a9426dd74203</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int</type>
      <name>max_nfval_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1LineSearchStatusTest.html</anchorfile>
      <anchor>a177f6fa02d9cb7e17d541ad6d9d8dc0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ECurvatureCondition</type>
      <name>econd_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1LineSearchStatusTest.html</anchorfile>
      <anchor>ae67a5ec2238301b395bffb442ab1f119</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::LineSearchStep</name>
    <filename>classROL_1_1LineSearchStep.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Step</base>
    <member kind="function">
      <type></type>
      <name>LineSearchStep</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>abcb6554d96e92dd3640095ff73965f42</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; LineSearch&lt; Real &gt; &gt; &amp;lineSearch=Teuchos::null, const Teuchos::RCP&lt; Secant&lt; Real &gt; &gt; &amp;secant=Teuchos::null, const Teuchos::RCP&lt; Krylov&lt; Real &gt; &gt; &amp;krylov=Teuchos::null, const Teuchos::RCP&lt; NonlinearCG&lt; Real &gt; &gt; &amp;nlcg=Teuchos::null)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>a21abcfe88cf248347321ecc575353cb1</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>a75733ca1e04f51e509f6da14f496bed6</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>a0890eac05d00f5dc1a5e5f90c992571d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printHeader</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>a2d2a6072d784dfa6a10cd2a72faf58db</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printName</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>a025d0088cf216f6fad9e10db2352781e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>print</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>a8e08d97e04bf4531165b0a8f52249074</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;algo_state, bool print_header=false) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>GradDotStep</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>a30c33d1f4c923debda734ffb86278627</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, BoundConstraint&lt; Real &gt; &amp;bnd, Real eps=0)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Step&lt; Real &gt; &gt;</type>
      <name>desc_</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>a45df6c6e9c28f135f6f414202bc54720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Secant&lt; Real &gt; &gt;</type>
      <name>secant_</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>a35da52ead3f8dec1fb2f8ad1747268c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Krylov&lt; Real &gt; &gt;</type>
      <name>krylov_</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>a085df4636d9223ef24f35fcdc29f7e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; NonlinearCG&lt; Real &gt; &gt;</type>
      <name>nlcg_</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>a1a2363f824929111e6727b273bc6aa4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; LineSearch&lt; Real &gt; &gt;</type>
      <name>lineSearch_</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>a159d8253ab233c58414616b77a7933d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>d_</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>a4c6a82065380c8b1cb73e81ef6a05b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ELineSearch</type>
      <name>els_</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>ad5bd646894239fb79157d80116b8337f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ECurvatureCondition</type>
      <name>econd_</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>a0076586ca638c8b69f84e2cba38bf1eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ls_nfval_</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>a010f04e5f65e7bffc8e01674a322c1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ls_ngrad_</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>ae0ec635478ea2852d0858d84d38a9e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>acceptLastAlpha_</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>a04464b1b00b11eae2ef558bb2477370c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>usePreviousAlpha_</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>a631385a4e5465bd38bc58611b52ee16b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>verbosity_</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>a54bc3b4de49baadcfdb6a44897de0e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>computeObj_</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>a715828fabfabb1d6839d5a00f3656362</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>fval_</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>ac9b2b68a2842d86d520847168d7c459a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::ParameterList</type>
      <name>parlist_</name>
      <anchorfile>classROL_1_1LineSearchStep.html</anchorfile>
      <anchor>ab0f86dddb4727f5b46b95e560bbf499f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::LogBarrierObjective</name>
    <filename>classROL_1_1LogBarrierObjective.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1LogBarrierObjective.html</anchorfile>
      <anchor>a3197ae635a16206138e8804890eae7ae</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1LogBarrierObjective.html</anchorfile>
      <anchor>aae6b5882fa0555d399d2108ec765798a</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dirDeriv</name>
      <anchorfile>classROL_1_1LogBarrierObjective.html</anchorfile>
      <anchor>a84a8ccc3a8f3d7b1899ebf3c992d2927</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;d, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1LogBarrierObjective.html</anchorfile>
      <anchor>aa85b2651f10eaa32b2a64a99b6854df3</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::LogExponentialQuadrangle</name>
    <filename>classROL_1_1LogExponentialQuadrangle.html</filename>
    <templarg></templarg>
    <base>ROL::ExpectationQuad</base>
    <member kind="function">
      <type></type>
      <name>LogExponentialQuadrangle</name>
      <anchorfile>classROL_1_1LogExponentialQuadrangle.html</anchorfile>
      <anchor>a6f933fee7aae2fe2645dc787d1f4a960</anchor>
      <arglist>(const Real coeff=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogExponentialQuadrangle</name>
      <anchorfile>classROL_1_1LogExponentialQuadrangle.html</anchorfile>
      <anchor>a4ae2954a246c3fdb69ead74822bee232</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>error</name>
      <anchorfile>classROL_1_1LogExponentialQuadrangle.html</anchorfile>
      <anchor>a5cf8e557c508fcd1edc6c8eccd721680</anchor>
      <arglist>(Real x, int deriv=0)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>regret</name>
      <anchorfile>classROL_1_1LogExponentialQuadrangle.html</anchorfile>
      <anchor>a7ccf8422dd9b62d5755c4d6eb76ba66c</anchor>
      <arglist>(Real x, int deriv=0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1LogExponentialQuadrangle.html</anchorfile>
      <anchor>a737821bbcb55a69faee30f3f39797b75</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>coeff_</name>
      <anchorfile>classROL_1_1LogExponentialQuadrangle.html</anchorfile>
      <anchor>ab63b4a1124d5e20a02e948bc6fbea227</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Logistic</name>
    <filename>classROL_1_1Logistic.html</filename>
    <templarg></templarg>
    <base>ROL::Distribution</base>
    <member kind="function">
      <type></type>
      <name>Logistic</name>
      <anchorfile>classROL_1_1Logistic.html</anchorfile>
      <anchor>aa3c4f9b82b77dbfb57e1706f18b9776d</anchor>
      <arglist>(const Real mean=0., const Real var=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Logistic</name>
      <anchorfile>classROL_1_1Logistic.html</anchorfile>
      <anchor>a38095086d637b47b75c7dc3e4d667883</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluatePDF</name>
      <anchorfile>classROL_1_1Logistic.html</anchorfile>
      <anchor>a8371bc790a5130ff72f75e639819fa62</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluateCDF</name>
      <anchorfile>classROL_1_1Logistic.html</anchorfile>
      <anchor>a0bc852df737bc8326954f8ebf8e36067</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>integrateCDF</name>
      <anchorfile>classROL_1_1Logistic.html</anchorfile>
      <anchor>abb0c2f520f0b0b91c03c7768df594e54</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>invertCDF</name>
      <anchorfile>classROL_1_1Logistic.html</anchorfile>
      <anchor>ad6a791fe5ab8988ee6155a7f9775968d</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>moment</name>
      <anchorfile>classROL_1_1Logistic.html</anchorfile>
      <anchor>a10b72322231b3dca42bda12145dc7e39</anchor>
      <arglist>(const size_t m) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>lowerBound</name>
      <anchorfile>classROL_1_1Logistic.html</anchorfile>
      <anchor>ad84493c2eb7f34d989daf84d82a66d4e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>upperBound</name>
      <anchorfile>classROL_1_1Logistic.html</anchorfile>
      <anchor>aac841b7755f2e364e622835e775739df</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1Logistic.html</anchorfile>
      <anchor>a4821bc5fd8cd171d551dc6288680afc9</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>mean_</name>
      <anchorfile>classROL_1_1Logistic.html</anchorfile>
      <anchor>a8373f39ac15ef3690328db4e9cab698f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>var_</name>
      <anchorfile>classROL_1_1Logistic.html</anchorfile>
      <anchor>a8eb6e7e21b0534d61620354429549354</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::LogQuantileQuadrangle</name>
    <filename>classROL_1_1LogQuantileQuadrangle.html</filename>
    <templarg></templarg>
    <base>ROL::ExpectationQuad</base>
    <member kind="function">
      <type></type>
      <name>LogQuantileQuadrangle</name>
      <anchorfile>classROL_1_1LogQuantileQuadrangle.html</anchorfile>
      <anchor>afee84c31dbfb1ed7573f3440a05a5554</anchor>
      <arglist>(Real alpha, Real rate, Real eps, Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt; &amp;pf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogQuantileQuadrangle</name>
      <anchorfile>classROL_1_1LogQuantileQuadrangle.html</anchorfile>
      <anchor>af6ae04436417d787a66383240c9b2aa9</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>error</name>
      <anchorfile>classROL_1_1LogQuantileQuadrangle.html</anchorfile>
      <anchor>a201d61cc6ac45141730820d936132ed5</anchor>
      <arglist>(Real x, int deriv=0)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>regret</name>
      <anchorfile>classROL_1_1LogQuantileQuadrangle.html</anchorfile>
      <anchor>af2a1b23aaa0f73f45259c92f4360aa0b</anchor>
      <arglist>(Real x, int deriv=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkRegret</name>
      <anchorfile>classROL_1_1LogQuantileQuadrangle.html</anchorfile>
      <anchor>a6eedc234142dcef5e256dbd63a1efe47</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1LogQuantileQuadrangle.html</anchorfile>
      <anchor>a8b8bb67f0d5c9bbc68d9e63a0b8877f1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt;</type>
      <name>pf_</name>
      <anchorfile>classROL_1_1LogQuantileQuadrangle.html</anchorfile>
      <anchor>a9fcc0ac92e2df168e37785dbb6af4be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>alpha_</name>
      <anchorfile>classROL_1_1LogQuantileQuadrangle.html</anchorfile>
      <anchor>a7a72d50aaa654cacb30aa8af70eb1498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>rate_</name>
      <anchorfile>classROL_1_1LogQuantileQuadrangle.html</anchorfile>
      <anchor>a084c5958a4afff12bdef027175466f3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>eps_</name>
      <anchorfile>classROL_1_1LogQuantileQuadrangle.html</anchorfile>
      <anchor>a1a335d9bf5ffa899dd97805ef7cbca04</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::BoundConstraint::LowerBinding</name>
    <filename>classROL_1_1BoundConstraint_1_1LowerBinding.html</filename>
    <member kind="function">
      <type></type>
      <name>LowerBinding</name>
      <anchorfile>classROL_1_1BoundConstraint_1_1LowerBinding.html</anchorfile>
      <anchor>a1a0a6dbf624e9da791d1fcc03e83d9c8</anchor>
      <arglist>(Real offset)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>apply</name>
      <anchorfile>classROL_1_1BoundConstraint_1_1LowerBinding.html</anchorfile>
      <anchor>ab43323229e94b95fe252dd44cd6d9042</anchor>
      <arglist>(const Real &amp;x, const Real &amp;y) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>offset_</name>
      <anchorfile>classROL_1_1BoundConstraint_1_1LowerBinding.html</anchorfile>
      <anchor>a2e8fd671add5dd46a2a3ef3ebbd5c24a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::LowerBoundInequalityConstraint</name>
    <filename>classROL_1_1LowerBoundInequalityConstraint.html</filename>
    <templarg></templarg>
    <base>ROL::InequalityConstraint</base>
    <member kind="function">
      <type></type>
      <name>LowerBoundInequalityConstraint</name>
      <anchorfile>classROL_1_1LowerBoundInequalityConstraint.html</anchorfile>
      <anchor>a5746e0c882d343585cbdc28a6d2237f9</anchor>
      <arglist>(BoundConstraint&lt; Real &gt; &amp;bnd, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LowerBoundInequalityConstraint</name>
      <anchorfile>classROL_1_1LowerBoundInequalityConstraint.html</anchorfile>
      <anchor>aa43c0f9307a4c510b28da9ee4b38a791</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;lo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classROL_1_1LowerBoundInequalityConstraint.html</anchorfile>
      <anchor>a6ddd0e729c29c37996a0fbd746839018</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian</name>
      <anchorfile>classROL_1_1LowerBoundInequalityConstraint.html</anchorfile>
      <anchor>a8c682699d5332829f33f88fbc766f337</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classROL_1_1LowerBoundInequalityConstraint.html</anchorfile>
      <anchor>a43693ed4a110564cbbf5112853ebb357</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian</name>
      <anchorfile>classROL_1_1LowerBoundInequalityConstraint.html</anchorfile>
      <anchor>a638365c5101763d7bbe4392e2f0fd2df</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahuv, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>lo_</name>
      <anchorfile>classROL_1_1LowerBoundInequalityConstraint.html</anchorfile>
      <anchor>aea16bc2d3949950326d659c8bd3c1152</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::lSR1</name>
    <filename>classROL_1_1lSR1.html</filename>
    <templarg></templarg>
    <base>ROL::Secant</base>
    <member kind="function">
      <type></type>
      <name>lSR1</name>
      <anchorfile>classROL_1_1lSR1.html</anchorfile>
      <anchor>a13e6904604e63ba0a16d01cba0456609</anchor>
      <arglist>(int M)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateStorage</name>
      <anchorfile>classROL_1_1lSR1.html</anchorfile>
      <anchor>a9a15f49db6465d04f3f7609b02b69951</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;grad, const Vector&lt; Real &gt; &amp;gp, const Vector&lt; Real &gt; &amp;s, const Real snorm, const int iter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyH0</name>
      <anchorfile>classROL_1_1lSR1.html</anchorfile>
      <anchor>a9e380562a945822a3ba6bdf6d1ddbb25</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyH</name>
      <anchorfile>classROL_1_1lSR1.html</anchorfile>
      <anchor>af77df9e5cd6e896e2c5f18131d8c8283</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyB0</name>
      <anchorfile>classROL_1_1lSR1.html</anchorfile>
      <anchor>a45f72e66be324cece00bc93e28b0189b</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Bv, const Vector&lt; Real &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyB</name>
      <anchorfile>classROL_1_1lSR1.html</anchorfile>
      <anchor>a640e1ab351a23cb61f38989a216c6eab</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Bv, const Vector&lt; Real &gt; &amp;v) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>updateIterate_</name>
      <anchorfile>classROL_1_1lSR1.html</anchorfile>
      <anchor>a1e85a06ac52788056bd8d8eacb502700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isInitialized_</name>
      <anchorfile>classROL_1_1lSR1.html</anchorfile>
      <anchor>a2e4c582ec9c86b89788ea808a0ce613b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::MeanDeviation</name>
    <filename>classROL_1_1MeanDeviation.html</filename>
    <templarg></templarg>
    <base>ROL::RiskMeasure</base>
    <member kind="function">
      <type></type>
      <name>MeanDeviation</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a0b327747805dff69d35eb587df584394</anchor>
      <arglist>(const Real order, const Real coeff, const Teuchos::RCP&lt; PositiveFunction&lt; Real &gt; &gt; &amp;pf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeanDeviation</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>ac695cfea1d247374626f9e0d2ff141d1</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;order, const std::vector&lt; Real &gt; &amp;coeff, const Teuchos::RCP&lt; PositiveFunction&lt; Real &gt; &gt; &amp;pf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeanDeviation</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a24537fe7aedf2daf61af8a9fbea149b3</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a217517b7f9a5e191143a53e8d75aab5d</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a5bb08051e665a77938c85d4187d51e50</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;v0, const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a52d4f177fac0dde6be59af716d64c24e</anchor>
      <arglist>(const Real val, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>aaad6075f2a77dfea826cc7b17cb64c7e</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>ab654d75fa59763f3eb2f63f476d19b2f</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real gv, const Vector&lt; Real &gt; &amp;hv, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getValue</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a62cf8eb3ff946375e24a1d11adb553fd</anchor>
      <arglist>(SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a6f4127e801fa7a531e2f340d15702dd7</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHessVec</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a54f6824c67d696711c0fbf89d5043bbf</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a9a5160d4d5892faaaf4536e3c993f35f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>af40f5f13d70e32ef244a9cdfb7703498</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>af373224e2b7190cebd7cf5b1fbe84c2e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a8702afa057db2a059dd340900ef9ee57</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PositiveFunction&lt; Real &gt; &gt;</type>
      <name>positiveFunction_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a3b0b89c0d8e7cbf4f155f2ab4b21967b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector1_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>aa0cbd3f01c0e4be23185722d26d13f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector2_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a8aee7a7a11a7e717d418e3fdcefea8d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>order_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>ac6c246121bcca89f142ad7b9960dccf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>coeff_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a4646fd24c5cf9eaa5345dedf501c7642</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint</type>
      <name>NumMoments_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a03bb9d4b6458b64a30db28243ea97b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>weights_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>afcf0d2cba6bf61bcbe05faf76219053b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>value_storage_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>adc2deede4c48f98fb6dc2a4bf23ee183</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>gradvec_storage_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a2aff53e77d4316b719069b61e6e4d317</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>gradient_storage_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>adfe0cf3b89d9d1c1f1ec3a8b3a048f3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>hessvec_storage_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a7ba1c5474d700815bda93f720379b739</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>dev0_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a4ff42a0bd84adff7200e9769668e0994</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>dev1_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>abd1696b4c0f5c3d0a1a22b642cc42a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>dev2_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>ab1b7e393c56f1037b6dff377198d5aa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>dev3_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>ade8b5ff227984402af455d3c76d12b84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>des0_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a13a6f748816e2ef1b8a2e3bc245389fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>des1_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a7cb680889b8b53764127603b7ad5eab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>des2_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>afb7d2110ba6630330870724e45c5ee37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>des3_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a88441acd1e35110b7f36e7869ec6a2cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>devp_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>ad9f644439b687cb459e3b462bcbe17e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>gvp1_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>ab677a519f06df88fd7ce12973cf6694b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>gvp2_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a36e89823a6cb49dbee2298f1507bbb21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>gvp3_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a907c59e50fb919bea0d04495cf60416c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>gvs1_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a8955bad6fc1b9f737764dac3003de6ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>gvs2_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a1399e5f8be47493a9ca422f917c0fddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>gvs3_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>ad40fd922b326b1c526b105c18750c89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstReset_</name>
      <anchorfile>classROL_1_1MeanDeviation.html</anchorfile>
      <anchor>a8339d655ef755ceab09d7660d3218142</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::MeanDeviationFromTarget</name>
    <filename>classROL_1_1MeanDeviationFromTarget.html</filename>
    <templarg></templarg>
    <base>ROL::RiskMeasure</base>
    <member kind="function">
      <type></type>
      <name>MeanDeviationFromTarget</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>a4c17e1f971707d3fec4d23c4d81c6052</anchor>
      <arglist>(const Real target, const Real order, const Real coeff, const Teuchos::RCP&lt; PositiveFunction&lt; Real &gt; &gt; &amp;pf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeanDeviationFromTarget</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>aa6ea9eeab805fb4a0de8aab1e545b427</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;target, const std::vector&lt; Real &gt; &amp;order, const std::vector&lt; Real &gt; &amp;coeff, const Teuchos::RCP&lt; PositiveFunction&lt; Real &gt; &gt; &amp;pf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeanDeviationFromTarget</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>a395733deef26c605ab2bc310c4cfe66f</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>afad4ef9d21ccc84e455f2b0dcf6c81d9</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>aeb8003f26c55fcdcc6c16bcf51e6110b</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;v0, const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>a6fcd2144bbee68c2bee08aef515a7dc5</anchor>
      <arglist>(const Real val, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>a767c7c5d6a991727d56b5ae8de5e68ed</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>ae13cc0316ed51724590a7c49f055c80f</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real gv, const Vector&lt; Real &gt; &amp;hv, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getValue</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>a0bd2ec802a74cc636b8ae1e65447f82e</anchor>
      <arglist>(SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>a3721fd1fed9bafadcea31340308e8fc2</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHessVec</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>a2b0817621e1999283a509615333637bd</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>ac8bb6df8319c712c22e1319e700c3274</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>ac1cb924d2af6892e43061ab847e5b36c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>a1a9e996c3cc89340c0e2f6206184793b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PositiveFunction&lt; Real &gt; &gt;</type>
      <name>positiveFunction_</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>a48f3f69408d43117ade9fd6436ccda59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector1_</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>a36e5d84a8e5129251f409ad226aa33ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector2_</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>a2194b4c41e722633fb1fc65b7d062e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector3_</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>ac94649cd983943c10a5c7199ffeeff21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector4_</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>abc139c9bddefe3d82028093dbc0a8610</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>target_</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>a396be5dbe9a9faf37221577cae67aa8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>order_</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>a5ac40cec289efef7d39a1d7eb5f1d2f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>coeff_</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>ace86f5af86277ae5b7f68362889aa4ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint</type>
      <name>NumMoments_</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>a942a1579aa60b0f80bfe08d9ce28344e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>pval_</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>a53637d3eb939f50d6b4b763541c559a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>pgv_</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>acdb5813c8badad4a5eaae75d8468dca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>pg0_</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>a4698ebfc2964f7796304040ad5444191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>pg_</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>a99e7c5a6cf204a3baca9e9d635b45393</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>phv_</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>aa7b0943659bef8d948adb26d2811285e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstReset_</name>
      <anchorfile>classROL_1_1MeanDeviationFromTarget.html</anchorfile>
      <anchor>a6ae5bf735db00f6433d3aaf2b1968f3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::MeanVariance</name>
    <filename>classROL_1_1MeanVariance.html</filename>
    <templarg></templarg>
    <base>ROL::RiskMeasure</base>
    <member kind="function">
      <type></type>
      <name>MeanVariance</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>ac06e40de119175f49a4243c37d30961b</anchor>
      <arglist>(const Real order, const Real coeff, const Teuchos::RCP&lt; PositiveFunction&lt; Real &gt; &gt; &amp;pf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeanVariance</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>ab12d95ff77dcf03902a375d834c9b2df</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;order, const std::vector&lt; Real &gt; &amp;coeff, const Teuchos::RCP&lt; PositiveFunction&lt; Real &gt; &gt; &amp;pf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeanVariance</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>a6677ff6f7384f4a7d40760f2cfd79e15</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>a7743d2fb7a13aab7462ca7f25105754c</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>a181a9dce65c053c19f64105c92a1775f</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;v0, const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>a87d52f8cc1fa720f079955d9f15468f1</anchor>
      <arglist>(const Real val, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getValue</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>a2c102dbce38e705109b625410602080d</anchor>
      <arglist>(SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>a08bd4b2bbaa880fed4d4bfba32104995</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>a846943cf09c3c2a73f2f55cc6f21c8f4</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>ac893ea26ec3e7838f4d21e50ba102cbe</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real gv, const Vector&lt; Real &gt; &amp;hv, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHessVec</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>a16ec95568ce44cebdd713ceaeb586e75</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>a497b59e4eefd1449777883c9223861a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>a9d072e66ffa45442f2618e32a2bb31db</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PositiveFunction&lt; Real &gt; &gt;</type>
      <name>positiveFunction_</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>a7b06a177ad75d2ffb19068c91a1fa941</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector1_</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>a332046c4f696143fd246a9e9d25415f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector2_</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>a6bd3fd039d2f74edf55dbe711a07962d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector3_</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>a71d699b9e2fb4ec09de9a09e39b07928</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector4_</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>a40bef24c75e912e255f33b9ae44d8272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>order_</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>af2587e8ee605c7daeff0f8cece2fedc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>coeff_</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>afb6c9d2a8c63ff4a54ceba1c2a377145</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint</type>
      <name>NumMoments_</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>ab8cfc0bbfac95b677252e08ae8bad22a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>weights_</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>ad2dfebb2192a6f5edb3f8f28c9fbb288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>value_storage_</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>a4730c33076ed0a9deecc847f99e1c0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>gradient_storage_</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>abe482398b3b14ea7fe0d5f790833823e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>hessvec_storage_</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>a565a8278801ba193ec8fef92d24e4824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>gradvec_storage_</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>a2a50304ddebd15f86b6efda71f38240d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstReset_</name>
      <anchorfile>classROL_1_1MeanVariance.html</anchorfile>
      <anchor>a44da5acfb4ced0e2d7edee0c67842172</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::MeanVarianceFromTarget</name>
    <filename>classROL_1_1MeanVarianceFromTarget.html</filename>
    <templarg></templarg>
    <base>ROL::RiskMeasure</base>
    <member kind="function">
      <type></type>
      <name>MeanVarianceFromTarget</name>
      <anchorfile>classROL_1_1MeanVarianceFromTarget.html</anchorfile>
      <anchor>ac736a80ec7a0d509771165fb62d92549</anchor>
      <arglist>(const Real target, const Real order, const Real coeff, const Teuchos::RCP&lt; PositiveFunction&lt; Real &gt; &gt; &amp;pf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeanVarianceFromTarget</name>
      <anchorfile>classROL_1_1MeanVarianceFromTarget.html</anchorfile>
      <anchor>a032d160a361c35d3fd0da10e7c218b64</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;target, const std::vector&lt; Real &gt; &amp;order, const std::vector&lt; Real &gt; &amp;coeff, const Teuchos::RCP&lt; PositiveFunction&lt; Real &gt; &gt; &amp;pf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeanVarianceFromTarget</name>
      <anchorfile>classROL_1_1MeanVarianceFromTarget.html</anchorfile>
      <anchor>a3044dc1bfc991d2f3df44cc1483916f8</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1MeanVarianceFromTarget.html</anchorfile>
      <anchor>a48d49677b32498cede617efaf244a4b4</anchor>
      <arglist>(const Real val, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1MeanVarianceFromTarget.html</anchorfile>
      <anchor>a3105cc61382978872b87fef47ac7ab30</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1MeanVarianceFromTarget.html</anchorfile>
      <anchor>a2a98d93ec31475910d13a8f749aa22b2</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real gv, const Vector&lt; Real &gt; &amp;hv, const Real weight)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1MeanVarianceFromTarget.html</anchorfile>
      <anchor>a7a907c28d89f482f31cde6f3e406edeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1MeanVarianceFromTarget.html</anchorfile>
      <anchor>ac8e4c1c64ef6050d2149b03204f593dc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PositiveFunction&lt; Real &gt; &gt;</type>
      <name>positiveFunction_</name>
      <anchorfile>classROL_1_1MeanVarianceFromTarget.html</anchorfile>
      <anchor>a4753186d1fc4b327e9f1145abdaf5720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>target_</name>
      <anchorfile>classROL_1_1MeanVarianceFromTarget.html</anchorfile>
      <anchor>ab8c2c95839b2dd5aacd0de23e4c3a5a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>order_</name>
      <anchorfile>classROL_1_1MeanVarianceFromTarget.html</anchorfile>
      <anchor>a7ce6a081853f5c4977f498626c3d6fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>coeff_</name>
      <anchorfile>classROL_1_1MeanVarianceFromTarget.html</anchorfile>
      <anchor>ab4d2cbd96a8f8749ad7447856befc8e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint</type>
      <name>NumMoments_</name>
      <anchorfile>classROL_1_1MeanVarianceFromTarget.html</anchorfile>
      <anchor>af0596891217f4c549706952be5254087</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::MeanVarianceQuadrangle</name>
    <filename>classROL_1_1MeanVarianceQuadrangle.html</filename>
    <templarg></templarg>
    <base>ROL::ExpectationQuad</base>
    <member kind="function">
      <type></type>
      <name>MeanVarianceQuadrangle</name>
      <anchorfile>classROL_1_1MeanVarianceQuadrangle.html</anchorfile>
      <anchor>ab765030c7ce8ec3ab0c2b0ba4467b9dc</anchor>
      <arglist>(const Real coeff=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeanVarianceQuadrangle</name>
      <anchorfile>classROL_1_1MeanVarianceQuadrangle.html</anchorfile>
      <anchor>ad8d883513224861ebdb7b372fda4c833</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>error</name>
      <anchorfile>classROL_1_1MeanVarianceQuadrangle.html</anchorfile>
      <anchor>a5bbe5e567e70acd988d26d37c1b2f1d4</anchor>
      <arglist>(Real x, int deriv=0)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>regret</name>
      <anchorfile>classROL_1_1MeanVarianceQuadrangle.html</anchorfile>
      <anchor>a996cb0aeafb9aaedc6e4bcfe94e32896</anchor>
      <arglist>(Real x, int deriv=0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1MeanVarianceQuadrangle.html</anchorfile>
      <anchor>a427b61ebbdda86422881f6c55343d514</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>coeff_</name>
      <anchorfile>classROL_1_1MeanVarianceQuadrangle.html</anchorfile>
      <anchor>afdd61d85c212325318d818c9e95b6817</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::InteriorPoint::MeritFunction</name>
    <filename>classROL_1_1InteriorPoint_1_1MeritFunction.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>MeritFunction</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>afca6bab8cb3fc1936a39b662a8928845</anchor>
      <arglist>(Teuchos::RCP&lt; OBJ &gt; &amp;obj, Teuchos::RCP&lt; EQCON &gt; &amp;eqcon, Teuchos::RCP&lt; INCON &gt; &amp;incon, const V &amp;x, const V &amp;eqmult, const V &amp;inmult, PLIST &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>a06560e70c5ade1529aed7ac5d0b1cfb9</anchor>
      <arglist>(const V &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dirDeriv</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>a523fd356d917970e47c73acb53aae00f</anchor>
      <arglist>(const V &amp;x, const V &amp;d, Real tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBarrier</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>a57a32376d2104803c2f87ed88149db7a</anchor>
      <arglist>(Real mu)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>ad9a33ba46f8f33309b1d5b9eeb69ac1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PartitionedVector&lt; Real &gt;</type>
      <name>PV</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>aa9934cd6fbedd9c02f7bc5d0874a6df4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Objective&lt; Real &gt;</type>
      <name>OBJ</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>aca0868fa6112240e89e32407dded3036</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>EqualityConstraint&lt; Real &gt;</type>
      <name>EQCON</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>adb22fe06096ffe4d3d6dd2ab88e323a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>InequalityConstraint&lt; Real &gt;</type>
      <name>INCON</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>a86f8eeaaaaca4ccfb245ca10fe113a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Teuchos::ParameterList</type>
      <name>PLIST</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>aa87c8ef14367d607e7fa3863ea93624f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PV::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>a8a33a4b9d1de53aaceb99e16d9d2d20c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; OBJ &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>aeac6c8e6ec334aff00c9c33838083f6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; EQCON &gt;</type>
      <name>eqcon_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>aa681766cc8d3997485b3f65ecc71dd71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; INCON &gt;</type>
      <name>incon_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>a50266369eb418c6ab422ec64f23a427f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BND &gt;</type>
      <name>bnd_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>a39473fd883106d053470ae7a86895e17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>mu_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>a8dae59370df331c34ec23f12724a3cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>nu_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>adcc9d3b35b22890b9e88877900603625</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>xopt_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>acb48b09ead6c948f11c3b49180c96caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>slack_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>a6a0312887bb64b4ec23db6ca63a21f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>gopt_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>a5934404f08a587786196b5061916a9e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>sfun_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>a9d42cd0cc0e590130061c60266f807d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>eqmult_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>a3d44a73c152261d48f1b2a265d714c07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>inmult_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>a27303702c40a436c99f05fd2ccb304cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>ce_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>a1abc3b0b3542fb1fca9c6ee896646045</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>ci_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>a4c36fa09c1835e66c66cc7ad6e4e638f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>jced_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>a6823ebdb1f901160a3f9fc2c650b2e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>jcid_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>a92ec188a711cc12165089b59999c8810</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>cenorm_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>ac9423f88bfecfaf11749f5e2718cd1ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>cinorm_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>aa189064dea25033d02c224a364e51c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const uint</type>
      <name>OPT</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>aeffc5760e046abcef2a2d01a4b94b927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const uint</type>
      <name>SLACK</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>ac1500bb810df3c808515c5dcac767382</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const Elementwise::Logarithm&lt; Real &gt;</type>
      <name>LOG_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>a1de688df59172daab97f5210af79fb16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const Elementwise::Reciprocal&lt; Real &gt;</type>
      <name>RECIP_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>a8c72a594c3aa4798e3e4e84d3d47e8fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const Elementwise::ReductionSum&lt; Real &gt;</type>
      <name>SUM_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1MeritFunction.html</anchorfile>
      <anchor>af74b0554d25044449d24a08c4b6247d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Minimax1</name>
    <filename>classROL_1_1Minimax1.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Minimax1</name>
      <anchorfile>classROL_1_1Minimax1.html</anchorfile>
      <anchor>a626a23307f73b9b3bcd20de5c3621c13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1Minimax1.html</anchorfile>
      <anchor>a876dc1f97d9d47ec45006594c3aa3e58</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1Minimax1.html</anchorfile>
      <anchor>a49633fdb3fc5f36c35ee698b07327924</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1Minimax1.html</anchorfile>
      <anchor>a934b8a63d58b0168110fde5f7c394e32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1Minimax1.html</anchorfile>
      <anchor>ae287a5646042915708c4f932894874c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1Minimax1.html</anchorfile>
      <anchor>ae4563ffbec64c5895e837a1e40273ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1Minimax1.html</anchorfile>
      <anchor>af0f73585af2e1133635fbcc8bf4b207f</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1Minimax1.html</anchorfile>
      <anchor>a52c3c0d58b7fefba0a73a0fe29a5607d</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Minimax2</name>
    <filename>classROL_1_1Minimax2.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Minimax2</name>
      <anchorfile>classROL_1_1Minimax2.html</anchorfile>
      <anchor>afd9c8a676ff75d2d80c9fe3b3a40ddd6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1Minimax2.html</anchorfile>
      <anchor>a4311678ab760492e62df9aa6b5e4d646</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1Minimax2.html</anchorfile>
      <anchor>a8c6ba40cdd46226d6d9b33c58432661d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1Minimax2.html</anchorfile>
      <anchor>adbb6c24c158c7fc03976839a4279fff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1Minimax2.html</anchorfile>
      <anchor>a7e5e947109dd63b9c8c8b3c5efa4ef2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1Minimax2.html</anchorfile>
      <anchor>a61ab0b40cff033399603c4d1a49d5a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1Minimax2.html</anchorfile>
      <anchor>ab03e3481ed17f9c37622b7cd7a0115d7</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1Minimax2.html</anchorfile>
      <anchor>a76f49d681049ff3359f819437e0a3f23</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Minimax3</name>
    <filename>classROL_1_1Minimax3.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Minimax3</name>
      <anchorfile>classROL_1_1Minimax3.html</anchorfile>
      <anchor>a186784254bfa836f553ae5a902803b2e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1Minimax3.html</anchorfile>
      <anchor>ab29486a57cde5d297836510edfbcae19</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1Minimax3.html</anchorfile>
      <anchor>a9657dfeac800535cd521eaf7216ebe89</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1Minimax3.html</anchorfile>
      <anchor>a94bf383c7e47dff5a8f7d18c1977dafa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1Minimax3.html</anchorfile>
      <anchor>a77c442856d7ec29c8644ea25f4c64074</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1Minimax3.html</anchorfile>
      <anchor>a167a532685c02d628dab67c26c96b246</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1Minimax3.html</anchorfile>
      <anchor>a32288644d7f69c7766a2e6b69db1f4b0</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1Minimax3.html</anchorfile>
      <anchor>a88e87bc6e4171d48635871f5a985ca81</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::MixedQuantileQuadrangle</name>
    <filename>classROL_1_1MixedQuantileQuadrangle.html</filename>
    <templarg></templarg>
    <base>ROL::RiskMeasure</base>
    <member kind="function">
      <type></type>
      <name>MixedQuantileQuadrangle</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>a2121812fec6070c960f08c6f53f05bcd</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MixedQuantileQuadrangle</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>a17d22dcac6d8faddd8d861474c731cd2</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;prob, const std::vector&lt; Real &gt; &amp;coeff, const Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt; &amp;pf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>a76302939e601360d6a78855670243c89</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>ab6c6b4512afe3763d08aa3d5b7547744</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;v0, const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>ad8f7811d00cd6236825d3e0ec1c8adec</anchor>
      <arglist>(const Real val, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getValue</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>ac04338cb255b07a4d4ccb0ac8049f6c0</anchor>
      <arglist>(SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>abcb20366e3107a1d36185fb32c679f41</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>a7db9411d1a9cf3e4a9da4b40afa380a2</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>a12f413761d4a74c96e5af92fb58bebe7</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real gv, const Vector&lt; Real &gt; &amp;hv, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHessVec</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>a7072557a8e18092d09637741c625430d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>a64a7726b129de34b2e832fac7e4e0264</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>ac8f1db190310ff6bc27504edfea1ddc1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt;</type>
      <name>plusFunction_</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>afb958062ad7529d7b4e9f537f6435f38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::Array&lt; Real &gt;</type>
      <name>prob_</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>ad7d5697179279e79fce1667b55b4190c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::Array&lt; Real &gt;</type>
      <name>coeff_</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>a8b642530f524e2154d8130e06c183f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector_</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>abfd31bf4d5305a89ac1f45a2e52d7da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>xvar_</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>a77aabef32506ee8ca4dfaa047b437da2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vvar_</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>ad94c8bb45af2dc623a770570668bc40d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vec_</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>ad312d29118c1d7684450ee58bbf7cad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>size_</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>ae3ae99550f78dfba119092b9de9127c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstReset_</name>
      <anchorfile>classROL_1_1MixedQuantileQuadrangle.html</anchorfile>
      <anchor>a69455c2f0755d68c69621b56f2c2bade</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::MomentObjective</name>
    <filename>classROL_1_1MomentObjective.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>MomentObjective</name>
      <anchorfile>classROL_1_1MomentObjective.html</anchorfile>
      <anchor>aecf804b62eb4ee1e8f296216ed2cfaf3</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; std::pair&lt; int, Real &gt; &gt; &gt; &amp;moments, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman, const bool optProb=true, const bool optAtom=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MomentObjective</name>
      <anchorfile>classROL_1_1MomentObjective.html</anchorfile>
      <anchor>ab6e909aa7205dcfac1b13221f7e443b7</anchor>
      <arglist>(const std::vector&lt; Teuchos::RCP&lt; Distribution&lt; Real &gt; &gt; &gt; &amp;dist, const std::vector&lt; int &gt; &amp;order, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman, const bool optProb=true, const bool optAtom=true)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1MomentObjective.html</anchorfile>
      <anchor>aab9b0a13dfcf888781798e2b20b29019</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1MomentObjective.html</anchorfile>
      <anchor>af4f0e68975d1f5fefe29403c2e8ce59b</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1MomentObjective.html</anchorfile>
      <anchor>a2873c9188a2c76ffbc31f162c6e98c30</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>momentValue</name>
      <anchorfile>classROL_1_1MomentObjective.html</anchorfile>
      <anchor>a41770e5fa9f9da4e6d2397874bfe032d</anchor>
      <arglist>(const int dim, const Real power, const Real moment, const ProbabilityVector&lt; Real &gt; &amp;prob, const AtomVector&lt; Real &gt; &amp;atom) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>momentGradient</name>
      <anchorfile>classROL_1_1MomentObjective.html</anchorfile>
      <anchor>abf5e2f0b6d3c47c92a84ef5a2178a225</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;gradx, std::vector&lt; Real &gt; &amp;gradp, Real &amp;scale, const int dim, const Real power, const Real moment, const ProbabilityVector&lt; Real &gt; &amp;prob, const AtomVector&lt; Real &gt; &amp;atom) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>momentHessVec</name>
      <anchorfile>classROL_1_1MomentObjective.html</anchorfile>
      <anchor>adedfce63a46a83031d5ff4186cdbc96f</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;hvx1, std::vector&lt; Real &gt; &amp;hvx2, std::vector&lt; Real &gt; &amp;hvx3, std::vector&lt; Real &gt; &amp;hvp1, std::vector&lt; Real &gt; &amp;hvp2, Real &amp;scale1, Real &amp;scale2, Real &amp;scale3, const int dim, const Real power, const Real moment, const ProbabilityVector&lt; Real &gt; &amp;prob, const AtomVector&lt; Real &gt; &amp;atom, const ProbabilityVector&lt; Real &gt; &amp;vprob, const AtomVector&lt; Real &gt; &amp;vatom) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; std::pair&lt; int, Real &gt; &gt; &gt;</type>
      <name>moments_</name>
      <anchorfile>classROL_1_1MomentObjective.html</anchorfile>
      <anchor>aa283a0361b655693a1c3595a60e374b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt;</type>
      <name>bman_</name>
      <anchorfile>classROL_1_1MomentObjective.html</anchorfile>
      <anchor>ac2ec81140815d6b5ab907f219dadfa54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>dimension_</name>
      <anchorfile>classROL_1_1MomentObjective.html</anchorfile>
      <anchor>aa9b7ac7b0556cbdade126f799af3c864</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numMoments_</name>
      <anchorfile>classROL_1_1MomentObjective.html</anchorfile>
      <anchor>a4956e3df37bfa9cf7f7e361b8e82b8bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>optProb_</name>
      <anchorfile>classROL_1_1MomentObjective.html</anchorfile>
      <anchor>a552a96c1f64b9051afccc7596a705d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>optAtom_</name>
      <anchorfile>classROL_1_1MomentObjective.html</anchorfile>
      <anchor>ab1a97847a4262518018f5a2a68a2fc51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::MonteCarloGenerator</name>
    <filename>classROL_1_1MonteCarloGenerator.html</filename>
    <templarg></templarg>
    <base>ROL::SampleGenerator</base>
    <member kind="function">
      <type></type>
      <name>MonteCarloGenerator</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>af62943c265f97fd31a52e134b47a685c</anchor>
      <arglist>(const int nSamp, const std::vector&lt; Teuchos::RCP&lt; Distribution&lt; Real &gt; &gt; &gt; &amp;dist, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman, const bool use_SA=false, const bool adaptive=false, const int numNewSamps=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MonteCarloGenerator</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>a5265607fabaa7a7ed24f1b9b363463e4</anchor>
      <arglist>(const int nSamp, std::vector&lt; std::vector&lt; Real &gt; &gt; &amp;bounds, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman, const bool use_SA=false, const bool adaptive=false, const int numNewSamps=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MonteCarloGenerator</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>a9167df81b9b821b00665caed73a4fd8e</anchor>
      <arglist>(const int nSamp, const std::vector&lt; Real &gt; &amp;mean, const std::vector&lt; Real &gt; &amp;std, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman, const bool use_SA=false, const bool adaptive=false, const int numNewSamps=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>a14cb4f84b472471821c720a473d63136</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>computeError</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>a91645a63f7c8b373f2eb130826c5013b</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;vals)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>computeError</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>a1aca91fb7c6725811a4921e10d5558d3</anchor>
      <arglist>(std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt; &amp;vals, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>addf25728bb33a9539a39cff6c5afc77d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>ierf</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>a79ceb3d7bdff91a146ffeb1b2a21403f</anchor>
      <arglist>(Real input) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>af42e6a34783f9c3de343957ab10e36dd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>sample</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>aac8a4bed6b886583efa576887a40c19e</anchor>
      <arglist>(int nSamp, bool store=true)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nSamp_</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>ac42c9331bb7997b9897431c9acdedb47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>use_normal_</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>a6b310fe04228b31ac133e42057d99585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>use_SA_</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>a848fa43527dd9a42e3bc75e9f067c2cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>adaptive_</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>a94d4a7cfd593971538e6e69e46760b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int</type>
      <name>numNewSamps_</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>ac01c58a0c6ae72be1204deeeb00998b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>data_</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>a61579e586a17b38815dc0851d0fda2ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>sum_val_</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>a72d3e9751d6d2871c0cf62aa9cb67629</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>sum_val2_</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>a88eab22daffba61e3a0a63ceb4e5a8c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>sum_ng_</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>ac1654cc1db46254d3ac7d80973bfa64d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>sum_ng2_</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>a73e2b32ea60c25cfc7f9e54566753646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>useDist_</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>ac29a200e80756518d559a65c5aa0622c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::vector&lt; Teuchos::RCP&lt; ROL::Distribution&lt; Real &gt; &gt; &gt;</type>
      <name>dist_</name>
      <anchorfile>classROL_1_1MonteCarloGenerator.html</anchorfile>
      <anchor>aa060a8b79f77affe23cb67085e63a276</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::MoreauYosidaCVaR</name>
    <filename>classROL_1_1MoreauYosidaCVaR.html</filename>
    <templarg></templarg>
    <base>ROL::ExpectationQuad</base>
    <member kind="function">
      <type></type>
      <name>MoreauYosidaCVaR</name>
      <anchorfile>classROL_1_1MoreauYosidaCVaR.html</anchorfile>
      <anchor>a6a570db2b7dde2b527234cca4e42ecd4</anchor>
      <arglist>(Real prob, Real eps)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MoreauYosidaCVaR</name>
      <anchorfile>classROL_1_1MoreauYosidaCVaR.html</anchorfile>
      <anchor>a1aaf7839c783070a408a6bba83ada753</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>error</name>
      <anchorfile>classROL_1_1MoreauYosidaCVaR.html</anchorfile>
      <anchor>a1768fcea2d8a47fafc5fc3447f4f8099</anchor>
      <arglist>(Real x, int deriv=0)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>regret</name>
      <anchorfile>classROL_1_1MoreauYosidaCVaR.html</anchorfile>
      <anchor>aed846ddae235e532bf3ff16df484db83</anchor>
      <arglist>(Real x, int deriv=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkRegret</name>
      <anchorfile>classROL_1_1MoreauYosidaCVaR.html</anchorfile>
      <anchor>aa3bc0b07cd4b67a8f5b00ba0247f6007</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1MoreauYosidaCVaR.html</anchorfile>
      <anchor>abc161c0b66efd19b2175b2b95a61d6ff</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classROL_1_1MoreauYosidaCVaR.html</anchorfile>
      <anchor>aa5b4c3cf43708e32530fe5729c7adb89</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>prob_</name>
      <anchorfile>classROL_1_1MoreauYosidaCVaR.html</anchorfile>
      <anchor>a636bb6d3da8a1510c9418f0caf3b3792</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>eps_</name>
      <anchorfile>classROL_1_1MoreauYosidaCVaR.html</anchorfile>
      <anchor>a6b0fcd52372380f84dad87f8413de275</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>omp_</name>
      <anchorfile>classROL_1_1MoreauYosidaCVaR.html</anchorfile>
      <anchor>a3b0beddc579d668f0cce41f668f34df2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>ub_</name>
      <anchorfile>classROL_1_1MoreauYosidaCVaR.html</anchorfile>
      <anchor>aa7e22ec57857f7511963414b716de95f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::MoreauYosidaPenalty</name>
    <filename>classROL_1_1MoreauYosidaPenalty.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>~MoreauYosidaPenalty</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>a0fa24e7c641118a5c9fbe235877d0dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MoreauYosidaPenalty</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>abfba43601fc9d699fa3f8f8ac4e0d2d5</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, const ROL::Vector&lt; Real &gt; &amp;x, const Real mu=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateMultipliers</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>aff4c7ce2197c327e094d4e0cfc7dc195</anchor>
      <arglist>(Real mu, const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getObjectiveValue</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>a3ee3af50e8ff14e88dfa1ca6910a7bc2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>a1862d02fa17b0a8990ed923a18881e11</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberFunctionEvaluations</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>ae6bf103e6abc341fc7864d528f175a80</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberGradientEvaluations</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>afa710849e87b9de5c2b710bfaf9f7f4a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>a945ca22cc7f01e373ac7589b5d44645a</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>ad4cd9c82c95be214772d6901586126cd</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>a9b44ab6703974397fc1cc1d3df19e667</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>adaa1b124e38b3bcd803a7ae0a7d7d556</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computePenalty</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>a4771f4cf6fe00a79c0a29e815bdc5f0d</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>a86753b780ed666cc10a426bc90b0d3bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt;</type>
      <name>con_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>ade7b92e4eeb56c94d162faf6cec05421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>g_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>a3745e94f7514e9dfd8f9a6c190c01b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>l_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>a9ac00570aec81705ebe92c8137d2f039</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>u_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>a547b9bb3b7fbb07670456ca41ca7a81a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>l1_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>a1d0ad2f9cc34755ce3c98efdf73bc0f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>u1_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>a7856b90afed2c50f14260522985c5282</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dl1_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>ab7de8cb9f80bd331cc40ed59b9daaaa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>du1_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>a1113a78a60cbeb8ca7a5aafc73f68bfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xlam_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>afee3b48af5f576847fe736fdee7cfbe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>v_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>a75ecd902fe3d9d64eae1e85f4be81e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dv_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>a4121d110376514e3d20856e6e5e81e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dv2_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>ae254d8315eea9efda4ad666b5c486c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>lam_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>afc4fe511c7b9e2a5c41e50d476c94a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>tmp_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>aab0a6328acd04da96aa5293cf3c570f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>mu_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>ad0a278cb8d5d0406bae93584916f7a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>fval_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>ac3504d1f73d2a370767ddaba3063d6cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isConEvaluated_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>a5d92d5ea4f699a4fda760f88d9945940</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nfval_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>afa29581290d4bc2bb0559872fb163078</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ngval_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenalty.html</anchorfile>
      <anchor>a6642e3bdb7f5ffa387b86e9acf704350</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::MoreauYosidaPenaltyStep</name>
    <filename>classROL_1_1MoreauYosidaPenaltyStep.html</filename>
    <templarg></templarg>
    <base>ROL::Step</base>
    <member kind="function">
      <type></type>
      <name>~MoreauYosidaPenaltyStep</name>
      <anchorfile>classROL_1_1MoreauYosidaPenaltyStep.html</anchorfile>
      <anchor>a1a352973b59c4c6ef8905b057bb57838</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MoreauYosidaPenaltyStep</name>
      <anchorfile>classROL_1_1MoreauYosidaPenaltyStep.html</anchorfile>
      <anchor>a27af9e6b9de6e87eeba605d8545886ed</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1MoreauYosidaPenaltyStep.html</anchorfile>
      <anchor>aaddb1f1178b7deea509443403ab278e2</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, Vector&lt; Real &gt; &amp;l, const Vector&lt; Real &gt; &amp;c, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1MoreauYosidaPenaltyStep.html</anchorfile>
      <anchor>a12b2b9093854bcd9fc423ab73fdef81c</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;l, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1MoreauYosidaPenaltyStep.html</anchorfile>
      <anchor>a0f7f8485395d72cd61748b43d6ce738f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, Vector&lt; Real &gt; &amp;l, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printHeader</name>
      <anchorfile>classROL_1_1MoreauYosidaPenaltyStep.html</anchorfile>
      <anchor>a705443b095be6dbb92a4f97ea31e69bf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printName</name>
      <anchorfile>classROL_1_1MoreauYosidaPenaltyStep.html</anchorfile>
      <anchor>a9084acbc872db7f5071fe952b061b705</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>print</name>
      <anchorfile>classROL_1_1MoreauYosidaPenaltyStep.html</anchorfile>
      <anchor>a007698beb99b7aa29d96019d9718c3b2</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;algo_state, bool pHeader=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1MoreauYosidaPenaltyStep.html</anchorfile>
      <anchor>ad98e5f1e289a8f94b7e8aedabbfb907f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1MoreauYosidaPenaltyStep.html</anchorfile>
      <anchor>a3af337981f6a6b2988b9d396b71d930f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateState</name>
      <anchorfile>classROL_1_1MoreauYosidaPenaltyStep.html</anchorfile>
      <anchor>a81542b5f8ee41b5bc3a0cb297794a00e</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;l, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Algorithm&lt; Real &gt; &gt;</type>
      <name>algo_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenaltyStep.html</anchorfile>
      <anchor>a68368167934ddb91c1803298b32d9439</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>x_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenaltyStep.html</anchorfile>
      <anchor>a3cf7fd5a16cb57ba79f2ec70ca50bf56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>g_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenaltyStep.html</anchorfile>
      <anchor>ad8144473ae899c6b17d57e5f5c0a3551</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>l_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenaltyStep.html</anchorfile>
      <anchor>a1baccea8a1145db10752326fe076e49a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>tau_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenaltyStep.html</anchorfile>
      <anchor>abf3fe5a17da8b6ea7a2bf0781ebeef76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>print_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenaltyStep.html</anchorfile>
      <anchor>ab838f085f9138ca81316ea7bf447d863</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::ParameterList</type>
      <name>parlist_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenaltyStep.html</anchorfile>
      <anchor>ad223bc8c172e7ad799049b00fede834e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>subproblemIter_</name>
      <anchorfile>classROL_1_1MoreauYosidaPenaltyStep.html</anchorfile>
      <anchor>a1dcbda2f5ca7ec5aef5108a00324c480</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::MultiVector</name>
    <filename>classROL_1_1MultiVector.html</filename>
    <templarg>Real</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiVector</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>a985262a0a2cd28fcbb6c6d7055a74c1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PMV</type>
      <name>clone</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>a73509d08ed08f9832c1d157e691b7e47</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PMV</type>
      <name>clone</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>a052d865af0c96fd93081acca9c86c48b</anchor>
      <arglist>(const int numvecs) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PMV</type>
      <name>deepCopy</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>a9402e1e619dddc3d519401793f219588</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PMV</type>
      <name>deepCopy</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>a0c0d52f5811637e3d8959e357cc4c7e7</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;index) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PMV</type>
      <name>shallowCopy</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>a7ba68b0b08312e0ce54aa37257f6ee8f</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const PMV</type>
      <name>shallowCopyConst</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>aa3cb970cad210694e3b8630c0921dd63</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;index) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ptrdiff_t</type>
      <name>getLength</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>a17f6ef75543784da7c9e49eafc24d56f</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumberOfVectors</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>a73d56ed049e3f5368c63dd89ffad8e96</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>gemm</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>af174d48b9f9b6d32501529395652adfa</anchor>
      <arglist>(const Real alpha, const MV &amp;A, const Teuchos::SerialDenseMatrix&lt; int, Real &gt; &amp;B, const Real beta)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>axpy</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>a5b2372b7901804d031d1ed24561a3e14</anchor>
      <arglist>(const Real alpha, const MV &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scale</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>ae4158ad0073f3521bb9db7cf420e77f9</anchor>
      <arglist>(const Real alpha)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scale</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>a481bf9c07c30d9d505380346ddfd7e9b</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;alpha)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>a7ae195a500864d520434b14ec96dc87b</anchor>
      <arglist>(const MV &amp;A)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>abb7d55056d6b868096bee3dd981c2f22</anchor>
      <arglist>(const MV &amp;A, const std::vector&lt; int &gt; &amp;index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>innerProducts</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>ac972ecb1e48e4ae6468e33ae49727d8a</anchor>
      <arglist>(const Real alpha, const MV &amp;A, Teuchos::SerialDenseMatrix&lt; int, Real &gt; &amp;B) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dots</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>a4f2031d64ed3a49e3bb52c2bdefe0cfc</anchor>
      <arglist>(const MV &amp;A, std::vector&lt; Real &gt; &amp;b) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>norms</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>a17e90bfe45d73a5ce856de94d60508ea</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;normvec) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>zero</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>ab2bd00ec4e6e3c708b7fa7c2a298d089</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PV</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>ad900494a418a5fdc9db0d828caa81a1e</anchor>
      <arglist>(int i) const  =0</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>a416062adb875daaa4206a21635f128a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>PV</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>a1e02456a129f7cbc4c5700c9926b701c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Teuchos::ArrayRCP&lt; PV &gt;</type>
      <name>APV</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>a430d27857124f1691440b1f142a875f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>MultiVector&lt; Real &gt;</type>
      <name>MV</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>aa275ac83686fbc3ef39fd6c8c4e90b21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Teuchos::RCP&lt; MV &gt;</type>
      <name>PMV</name>
      <anchorfile>classROL_1_1MultiVector.html</anchorfile>
      <anchor>aed9aa4c8f6772a372ddc4c6015fbd10e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::MultiVectorDefault</name>
    <filename>classROL_1_1MultiVectorDefault.html</filename>
    <templarg></templarg>
    <base>ROL::MultiVector</base>
    <member kind="function">
      <type></type>
      <name>MultiVectorDefault</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>a2c6958dd4acaa5af2e9ed3399d8fad41</anchor>
      <arglist>(APV mvec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiVectorDefault</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>a2f3738351acb81c8b1e890adde82d3f8</anchor>
      <arglist>(PV vec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiVectorDefault</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>a559baed31f45920e6d121c185878be78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PMV</type>
      <name>clone</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>aed824bff86bac129527bcd9214cc19b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PMV</type>
      <name>clone</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>a15fe5752a0a5acd37a8b08ea658e1654</anchor>
      <arglist>(const int numvecs) const </arglist>
    </member>
    <member kind="function">
      <type>PMV</type>
      <name>deepCopy</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>adac193a43e6bbd01667fb41f66c90f8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PMV</type>
      <name>deepCopy</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>ae59422c5ea72ccc313249be6da3267f1</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;index) const </arglist>
    </member>
    <member kind="function">
      <type>PMV</type>
      <name>shallowCopy</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>a2f018f76e11b93091d965b3d8b6fd359</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>const PMV</type>
      <name>shallowCopyConst</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>a65e7df56e12ac5df134b90134e32a489</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;index) const </arglist>
    </member>
    <member kind="function">
      <type>ptrdiff_t</type>
      <name>getLength</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>ab48623b327fdb8ef9b8bcce247924bb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfVectors</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>a725607998da4b8a248c82a7daf171d00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>af806bd6d693071c828ad53f74adc0acc</anchor>
      <arglist>(const Real alpha, const MV &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gemm</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>a9bc61db25268f47d633ad4432d06a8cb</anchor>
      <arglist>(const Real alpha, const MV &amp;A, const Teuchos::SerialDenseMatrix&lt; int, Real &gt; &amp;B, const Real beta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>af1a64c2b2180a92d3e96c4b847cbf78e</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>a7c20d71a2b5921c965cc2749654c2b8f</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>a82d9b4a8b10347013f263ce6f4f3eafb</anchor>
      <arglist>(const MV &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>af270c67bb90b62c2d568145ea1d96959</anchor>
      <arglist>(const MV &amp;A, const std::vector&lt; int &gt; &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>innerProducts</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>aa9eed29b9fca5456b7feefb280bbae87</anchor>
      <arglist>(const Real alpha, const MV &amp;A, Teuchos::SerialDenseMatrix&lt; int, Real &gt; &amp;B) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dots</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>a93a7b788493690cb0bf92b41a7a34c6f</anchor>
      <arglist>(const MV &amp;A, std::vector&lt; Real &gt; &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>norms</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>af43dae2537873cf1e435f88582b6c905</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;normvec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>a9816dd7e62ff6d3c803e7869a79546da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PV</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>a9f7734af485d4b5d3d9d16a7a6e6a505</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>a7773ddf6f8e578dd062eb993b41a22cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>PV</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>ac0445b5b699ba9c51fe11bc52aacc62c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Teuchos::ArrayRCP&lt; PV &gt;</type>
      <name>APV</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>ab7211aba4cc627cf7146e0618cc15db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>MultiVector&lt; Real &gt;</type>
      <name>MV</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>a18d21ef2ea5d703eec8424a32bf67437</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Teuchos::RCP&lt; MV &gt;</type>
      <name>PMV</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>acb230c1aeb003864df4860e0f8450f3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual bool</type>
      <name>dimensionMismatch</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>a0a1edcf1f90f337a5eb23d6d6a4b3b17</anchor>
      <arglist>(const MV &amp;A) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>APV</type>
      <name>mvec_</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>a88c8d0b5c4fd291cee828e726a38f492</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numVectors_</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>a410cecb12d47da5782858f6b663bd6f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>length_</name>
      <anchorfile>classROL_1_1MultiVectorDefault.html</anchorfile>
      <anchor>a29835d218df2b9559a98fcf246553326</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::NewtonKrylovStep</name>
    <filename>classROL_1_1NewtonKrylovStep.html</filename>
    <templarg></templarg>
    <base>ROL::Step</base>
    <class kind="class">ROL::NewtonKrylovStep::HessianNK</class>
    <class kind="class">ROL::NewtonKrylovStep::PrecondNK</class>
    <member kind="function">
      <type></type>
      <name>NewtonKrylovStep</name>
      <anchorfile>classROL_1_1NewtonKrylovStep.html</anchorfile>
      <anchor>a136a2d0b835fa844ebfcb0791c31cf7c</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const bool computeObj=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NewtonKrylovStep</name>
      <anchorfile>classROL_1_1NewtonKrylovStep.html</anchorfile>
      <anchor>a2573276ed9ee872ed188a136c894bc81</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; Krylov&lt; Real &gt; &gt; &amp;krylov, const Teuchos::RCP&lt; Secant&lt; Real &gt; &gt; &amp;secant, const bool computeObj=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1NewtonKrylovStep.html</anchorfile>
      <anchor>a7da96c56491f80b52692ab62583387d4</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1NewtonKrylovStep.html</anchorfile>
      <anchor>a55b60a5deba2cebf7c1059729ea57d02</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1NewtonKrylovStep.html</anchorfile>
      <anchor>ab8e56c6ec53fb59bd8af7dcfacc1e7d0</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printHeader</name>
      <anchorfile>classROL_1_1NewtonKrylovStep.html</anchorfile>
      <anchor>a46facaf6d67d1ac5250040def04f36f5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printName</name>
      <anchorfile>classROL_1_1NewtonKrylovStep.html</anchorfile>
      <anchor>af570c708b8f47ff28bfc000b72370873</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>print</name>
      <anchorfile>classROL_1_1NewtonKrylovStep.html</anchorfile>
      <anchor>ac32c7774192cb8f9fea11644b8ee1df7</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;algo_state, bool print_header=false) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Secant&lt; Real &gt; &gt;</type>
      <name>secant_</name>
      <anchorfile>classROL_1_1NewtonKrylovStep.html</anchorfile>
      <anchor>a5a9a93acc2b75401580f684b4ef469a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Krylov&lt; Real &gt; &gt;</type>
      <name>krylov_</name>
      <anchorfile>classROL_1_1NewtonKrylovStep.html</anchorfile>
      <anchor>a24cd3940edb614135d59248b2c34b461</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EKrylov</type>
      <name>ekv_</name>
      <anchorfile>classROL_1_1NewtonKrylovStep.html</anchorfile>
      <anchor>afae5dec0b4de61f5a67cec8b9666aa38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ESecant</type>
      <name>esec_</name>
      <anchorfile>classROL_1_1NewtonKrylovStep.html</anchorfile>
      <anchor>accd2f2011d1a14ca45b0a313fa989b2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gp_</name>
      <anchorfile>classROL_1_1NewtonKrylovStep.html</anchorfile>
      <anchor>afa253b227e51f5ad298eb5a59c376e57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>iterKrylov_</name>
      <anchorfile>classROL_1_1NewtonKrylovStep.html</anchorfile>
      <anchor>a7fd128f563fdd575dc24b68b450d79c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>flagKrylov_</name>
      <anchorfile>classROL_1_1NewtonKrylovStep.html</anchorfile>
      <anchor>a504d937ef0915280dbf66f70292a6a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>verbosity_</name>
      <anchorfile>classROL_1_1NewtonKrylovStep.html</anchorfile>
      <anchor>a522b24d0826f90ff1924517fb76b58d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>computeObj_</name>
      <anchorfile>classROL_1_1NewtonKrylovStep.html</anchorfile>
      <anchor>a27f1633d9659c32ee57cc1159fe79974</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useSecantPrecond_</name>
      <anchorfile>classROL_1_1NewtonKrylovStep.html</anchorfile>
      <anchor>a6c6739b9305099639eca12d2d79bef09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::NewtonStep</name>
    <filename>classROL_1_1NewtonStep.html</filename>
    <templarg></templarg>
    <base>ROL::Step</base>
    <member kind="function">
      <type></type>
      <name>NewtonStep</name>
      <anchorfile>classROL_1_1NewtonStep.html</anchorfile>
      <anchor>a9d4f193c434cce29c14e60fd02c086fb</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const bool computeObj=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1NewtonStep.html</anchorfile>
      <anchor>a50cd8652b1bdacb2fdf9a182ac77e8b0</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1NewtonStep.html</anchorfile>
      <anchor>a15faa8fe0dbfd590bba11499598eb416</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printHeader</name>
      <anchorfile>classROL_1_1NewtonStep.html</anchorfile>
      <anchor>a25aeb3b3d89c628cbf90ed789efd8b5d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printName</name>
      <anchorfile>classROL_1_1NewtonStep.html</anchorfile>
      <anchor>ad36b14765c85bc1c7b0a131996cebe8b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>print</name>
      <anchorfile>classROL_1_1NewtonStep.html</anchorfile>
      <anchor>a30bcfbbb76fe7341775de2d60602e20a</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;algo_state, bool print_header=false) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>verbosity_</name>
      <anchorfile>classROL_1_1NewtonStep.html</anchorfile>
      <anchor>ab7af3dc0224c92385a8afb24cf27c664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>computeObj_</name>
      <anchorfile>classROL_1_1NewtonStep.html</anchorfile>
      <anchor>a3616ebf1c79f3489f32646d69867a242</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NodalBasis</name>
    <filename>structNodalBasis.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>NodalBasis</name>
      <anchorfile>structNodalBasis.html</anchorfile>
      <anchor>a0a0c68ccad5546e79ecf8773e13b8ba8</anchor>
      <arglist>(Teuchos::RCP&lt; Teuchos::LAPACK&lt; int, Real &gt; &gt; lapack, const int ni, const int nq)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NodalBasis</name>
      <anchorfile>structNodalBasis.html</anchorfile>
      <anchor>a159dbbb92c713febd0666b3ee81417e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Teuchos::RCP&lt; Teuchos::LAPACK&lt; int, Real &gt; &gt;</type>
      <name>lapack_</name>
      <anchorfile>structNodalBasis.html</anchorfile>
      <anchor>ae0b805c55c188dac2282f9c7a150f11c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ni_</name>
      <anchorfile>structNodalBasis.html</anchorfile>
      <anchor>aca10f35179dba6cb52d47aecdd252737</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>nq_</name>
      <anchorfile>structNodalBasis.html</anchorfile>
      <anchor>a80cc82caaf42c4bd0430dccd45edd62e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Real &gt;</type>
      <name>xi_</name>
      <anchorfile>structNodalBasis.html</anchorfile>
      <anchor>a80f3313b6e2f931869bf26045118357a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Real &gt;</type>
      <name>xq_</name>
      <anchorfile>structNodalBasis.html</anchorfile>
      <anchor>acfc52382ea1f618a7d8a32babebbd0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Real &gt;</type>
      <name>wq_</name>
      <anchorfile>structNodalBasis.html</anchorfile>
      <anchor>a14763584894b0a72daab7d5de8c98050</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Real &gt;</type>
      <name>L_</name>
      <anchorfile>structNodalBasis.html</anchorfile>
      <anchor>af21a6f5e329fb6712fcbf475eb688bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Real &gt;</type>
      <name>Lp_</name>
      <anchorfile>structNodalBasis.html</anchorfile>
      <anchor>a2bf9709ea27a99dfc09089fd9e2ccefb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Teuchos::RCP&lt; Lagrange&lt; Real &gt; &gt;</type>
      <name>lagrange_</name>
      <anchorfile>structNodalBasis.html</anchorfile>
      <anchor>ad3c9238fa472a4994503f87afc755b75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::NonlinearCGStep</name>
    <filename>classROL_1_1NonlinearCGStep.html</filename>
    <templarg></templarg>
    <base>ROL::Step</base>
    <member kind="function">
      <type></type>
      <name>NonlinearCGStep</name>
      <anchorfile>classROL_1_1NonlinearCGStep.html</anchorfile>
      <anchor>a4a20ed328fcd209b427c8d87f34a2e2d</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; NonlinearCG&lt; Real &gt; &gt; &amp;nlcg=Teuchos::null, const bool computeObj=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1NonlinearCGStep.html</anchorfile>
      <anchor>a6dd68382377a509092f266be02ed5923</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1NonlinearCGStep.html</anchorfile>
      <anchor>a4f17d5bf1e9e72e501b3555657d21d7e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printHeader</name>
      <anchorfile>classROL_1_1NonlinearCGStep.html</anchorfile>
      <anchor>a76a7a74b87715696b2029b9cea65f929</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printName</name>
      <anchorfile>classROL_1_1NonlinearCGStep.html</anchorfile>
      <anchor>a361cc169265513c3d4fe730afa3e5978</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>print</name>
      <anchorfile>classROL_1_1NonlinearCGStep.html</anchorfile>
      <anchor>a45bf69ffe11a2f9104c73c7e900e7b0b</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;algo_state, bool print_header=false) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; NonlinearCG&lt; Real &gt; &gt;</type>
      <name>nlcg_</name>
      <anchorfile>classROL_1_1NonlinearCGStep.html</anchorfile>
      <anchor>aec8a7dae82ffb46e4c990852562140fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ENonlinearCG</type>
      <name>enlcg_</name>
      <anchorfile>classROL_1_1NonlinearCGStep.html</anchorfile>
      <anchor>a4963b02a52d6b45f35167a83b6621e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>verbosity_</name>
      <anchorfile>classROL_1_1NonlinearCGStep.html</anchorfile>
      <anchor>a06f79837c57f4ffbf7f3913148cee003</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>computeObj_</name>
      <anchorfile>classROL_1_1NonlinearCGStep.html</anchorfile>
      <anchor>ab69e0d75b18702c103dfcadbb1d900e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::NonlinearLeastSquaresObjective</name>
    <filename>classROL_1_1NonlinearLeastSquaresObjective.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>NonlinearLeastSquaresObjective</name>
      <anchorfile>classROL_1_1NonlinearLeastSquaresObjective.html</anchorfile>
      <anchor>a2ecc8a1dc5ee23d1fa0c1a3b1a239f54</anchor>
      <arglist>(const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;con, const Vector&lt; Real &gt; &amp;optvec, const Vector&lt; Real &gt; &amp;convec, const bool GNH=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1NonlinearLeastSquaresObjective.html</anchorfile>
      <anchor>a3e630d34585f181eafc0c1af62563f3d</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1NonlinearLeastSquaresObjective.html</anchorfile>
      <anchor>a71230d8753ec23f4774d3fbfa7a7ebf6</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1NonlinearLeastSquaresObjective.html</anchorfile>
      <anchor>a8f6b3ecec4579e0e398f39e70d421856</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1NonlinearLeastSquaresObjective.html</anchorfile>
      <anchor>abac5f3dc2ea8265ba1c4fc15af07244e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt;</type>
      <name>con_</name>
      <anchorfile>classROL_1_1NonlinearLeastSquaresObjective.html</anchorfile>
      <anchor>aeb604b37a81a574bf0494f955044076a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>GaussNewtonHessian_</name>
      <anchorfile>classROL_1_1NonlinearLeastSquaresObjective.html</anchorfile>
      <anchor>a0ddab6ca543039d8addee9bb2bab2574</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>c1_</name>
      <anchorfile>classROL_1_1NonlinearLeastSquaresObjective.html</anchorfile>
      <anchor>a2847b9c87cdf6f893a3ee255bb7ab2f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>c2_</name>
      <anchorfile>classROL_1_1NonlinearLeastSquaresObjective.html</anchorfile>
      <anchor>ab432be54ca32b75ac889b771f52bee05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>c1dual_</name>
      <anchorfile>classROL_1_1NonlinearLeastSquaresObjective.html</anchorfile>
      <anchor>adee2601f9c34aa7cf9c637db542dfb9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>x_</name>
      <anchorfile>classROL_1_1NonlinearLeastSquaresObjective.html</anchorfile>
      <anchor>aacb825d51e8dc1a7cfb36ec7dbe94f10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Normalization_Constraint</name>
    <filename>classNormalization__Constraint.html</filename>
    <templarg>Real</templarg>
    <base>ROL::EqualityConstraint</base>
    <base>ROL::EqualityConstraint</base>
    <member kind="function">
      <type></type>
      <name>Normalization_Constraint</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>a8a2da19c83ebfa40683ee78422728109</anchor>
      <arglist>(int n, Real dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>a935af7b8965820fe0c1c7367d0fe3e8d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;psi, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>a674c7265660851d779a1b1bf7f91e458</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;psi, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>af4646f831308cf6d3eb205ebf23dc9b2</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;psi, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>aca352a16d280ae1c8c5c67abf81f8e25</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahuv, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;psi, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Normalization_Constraint</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>aba562723086aaf8b9b9f13904d902a97</anchor>
      <arglist>(int n, Real dx, Teuchos::RCP&lt; FiniteDifference&lt; Real &gt; &gt; fd, bool exactsolve)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>a935af7b8965820fe0c1c7367d0fe3e8d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;psi, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>a674c7265660851d779a1b1bf7f91e458</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;psi, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>af4646f831308cf6d3eb205ebf23dc9b2</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;psi, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>aca352a16d280ae1c8c5c67abf81f8e25</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahuv, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;psi, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Real &gt;</type>
      <name>solveAugmentedSystem</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>a3228cdd693bda6abd94629bab402c510</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v1, Vector&lt; Real &gt; &amp;v2, const Vector&lt; Real &gt; &amp;b1, const Vector&lt; Real &gt; &amp;b2, const Vector&lt; Real &gt; &amp;psi, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>ad97fad01a64957fdb60718ac0b831640</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>a396e4f83ef12b26f581cae6bdda06e63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>a146da30f6a6f121e5dc8ec29feb871fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>ae51e66c7e953fc434431f3eae091ffd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>ad97fad01a64957fdb60718ac0b831640</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>ae51e66c7e953fc434431f3eae091ffd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>ac2ced041b586aaa4acb7a87db2442879</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>a9e3da1aad697513171104303d1af3ada</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint</type>
      <name>nx_</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>a476d7d317ff4a8acd8de5456d155326e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>dx_</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>a0aee297141696d449cd9b0057d09b522</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; FiniteDifference&lt; Real &gt; &gt;</type>
      <name>fd_</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>a693cedc8986a7395599f1abf57fd4221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>exactsolve_</name>
      <anchorfile>classNormalization__Constraint.html</anchorfile>
      <anchor>ad3032b49601b00f7b24317942f9c3ebf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Exception::NotImplemented</name>
    <filename>classROL_1_1Exception_1_1NotImplemented.html</filename>
    <member kind="function">
      <type></type>
      <name>NotImplemented</name>
      <anchorfile>classROL_1_1Exception_1_1NotImplemented.html</anchorfile>
      <anchor>a5c390a40e7e953392a62c4d7598266a0</anchor>
      <arglist>(const std::string &amp;what_arg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NullOperator</name>
    <filename>classNullOperator.html</filename>
    <templarg></templarg>
    <base>ROL::LinearOperator</base>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classNullOperator.html</anchorfile>
      <anchor>a943fbbfdb38a72d796990286a80c9c73</anchor>
      <arglist>(V &amp;Hv, const V &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ROL::Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classNullOperator.html</anchorfile>
      <anchor>a5cb5b4582cac61fc519355e89de5f2fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Objective</name>
    <filename>classROL_1_1Objective.html</filename>
    <templarg>Real</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Objective</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a791484401eb50bf722177975097e9291</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a8f020ce6b45f1046a2a078d429d2ca01</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a9c828c34c46602be400039bf026d597f</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a6228b9165f1690e0dea51221e9d67203</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>dirDeriv</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a1692fab8061f15ad7d3565082724fa0d</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;d, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a8eecbb3e49ec447d93942eeb99962db8</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invHessVec</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>aa5ed94448bd8432accb8f37c797b5fce</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>precond</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>af967110ecef20673944e83ba3955bfb5</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Pv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkGradient</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a98200c3b19fbb33c0753ca96cf9892ff</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;d, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int numSteps=ROL_NUM_CHECKDERIV_STEPS, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkGradient</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a59840bcf6a52d866f4c6ea1dbe4cb8c6</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;d, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int numSteps=ROL_NUM_CHECKDERIV_STEPS, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkGradient</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a1cbf779d09b32ef59d73aca63ed13c0b</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;d, const std::vector&lt; Real &gt; &amp;steps, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkGradient</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>aa484e6fe0ecc6b744037c1d01e1a9e3d</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;d, const std::vector&lt; Real &gt; &amp;steps, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkHessVec</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>abe1976da473fe185621199ccbade01e8</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;v, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int numSteps=ROL_NUM_CHECKDERIV_STEPS, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkHessVec</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a23315b385610420ece0825efaa1914d6</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int numSteps=ROL_NUM_CHECKDERIV_STEPS, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkHessVec</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>ade9794e877ace0e6f671efb61b9d31ac</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;steps, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkHessVec</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>ad6f4d197d3507ebad629812da7eefeb7</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;steps, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; Real &gt;</type>
      <name>checkHessSym</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a3a5aeba80ba0a6ff5787c55c00d84d62</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;w, const bool printToStream=true, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; Real &gt;</type>
      <name>checkHessSym</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>aa7827d4571588f5622173a339d8135ce</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;w, const bool printToStream=true, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Objective</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a791484401eb50bf722177975097e9291</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a8f020ce6b45f1046a2a078d429d2ca01</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a9c828c34c46602be400039bf026d597f</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a855ee084693ec59954c4ab0cdd0bb009</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>dirDeriv</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a2efd7073ad35206cf2fa5fcb02a46552</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;d, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>ade66ec306278fabc19844ecf29314cb2</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invHessVec</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>aa5ed94448bd8432accb8f37c797b5fce</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>precond</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>af967110ecef20673944e83ba3955bfb5</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Pv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkGradient</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a98200c3b19fbb33c0753ca96cf9892ff</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;d, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int numSteps=ROL_NUM_CHECKDERIV_STEPS, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkGradient</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>af1a0000090c9bfd006840c0a31682080</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;d, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int numSteps=ROL_NUM_CHECKDERIV_STEPS, const int order=1, const bool precomputed=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkGradient</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a1cbf779d09b32ef59d73aca63ed13c0b</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;d, const std::vector&lt; Real &gt; &amp;steps, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkGradient</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a36545ee1a9ed979b44229ae4a1487a4a</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;d, const std::vector&lt; Real &gt; &amp;steps, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int order=1, const bool precompute=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkHessVec</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>abe1976da473fe185621199ccbade01e8</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;v, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int numSteps=ROL_NUM_CHECKDERIV_STEPS, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkHessVec</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a0f7c8be1c12d6ea56f648e970d3c0fc3</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int numSteps=ROL_NUM_CHECKDERIV_STEPS, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkHessVec</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>ade9794e877ace0e6f671efb61b9d31ac</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;steps, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkHessVec</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>ad03aa63d8ef5ff0ea77d912a57365b3a</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;steps, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; Real &gt;</type>
      <name>checkHessSym</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a3a5aeba80ba0a6ff5787c55c00d84d62</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;w, const bool printToStream=true, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; Real &gt;</type>
      <name>checkHessSym</name>
      <anchorfile>classROL_1_1Objective.html</anchorfile>
      <anchor>a43db7f056f9dfc77c3784355611bfb4b</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;w, const bool printToStream=true, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_Beale</name>
    <filename>classROL_1_1ZOO_1_1Objective__Beale.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_Beale</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Beale.html</anchorfile>
      <anchor>a1ce73ddf71c9fbfd1f72913ab40cfd20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Beale.html</anchorfile>
      <anchor>a4ddf896c1320cbd343aa7dc601b582a8</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Beale.html</anchorfile>
      <anchor>a3afdbcfd341598b82864f689d80c6ef9</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invHessVec</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Beale.html</anchorfile>
      <anchor>a4a6d19de32a3a9d2fdec162c248810ab</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>y_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Beale.html</anchorfile>
      <anchor>aae79e202e844d5e4cc64d2aa1ed9862c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Objective_BurgersControl</name>
    <filename>classObjective__BurgersControl.html</filename>
    <templarg>Real</templarg>
    <base>ROL::ParametrizedObjective_SimOpt</base>
    <base>ROL::ParametrizedObjective_SimOpt</base>
    <base>ROL::ParametrizedObjective_SimOpt</base>
    <base>ROL::ParametrizedObjective_SimOpt</base>
    <base>ROL::Objective_SimOpt</base>
    <base>ROL::Objective_SimOpt</base>
    <base>ROL::Objective_SimOpt</base>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_BurgersControl</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a732c2c5fa01d73cfa19118b5fb9e3782</anchor>
      <arglist>(Real alpha=1.e-4, int nx=128)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_state</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a6eaf3cf5516e96f01bb314dd4a951adc</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z, const std::vector&lt; Real &gt; &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_adjoint</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>afcba9de0911c56cbb391da9efbf4e2f0</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;p, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_state_sensitivity</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a6bb34811c4bfad5c4882376f40696895</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z, const std::vector&lt; Real &gt; &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_adjoint_sensitivity</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a3a4efc41361eb2a35e9669c8090b949d</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;q, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;p, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;z, const std::vector&lt; Real &gt; &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a14152af949a8bf52fb8ef8cfa5864214</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a6d30ba36c6b3dfb82c65d2c8ccf308a0</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a3538945d9de01e37089383bf80e777fd</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Objective_BurgersControl</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a732c2c5fa01d73cfa19118b5fb9e3782</anchor>
      <arglist>(Real alpha=1.e-4, int nx=128)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ad8a218c55e4b5e2ad681bc08a37f289c</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_1</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a33c225142b8b6e6bfb4b5a192d94c418</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_2</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a88bd32a5e26dd3d748c724616bda978c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_11</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a736af04bd4367a32f08c61812876102f</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_12</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ac9b050b432a3149e6ea9440e6ef04ae4</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_21</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a2b5e8dba27351ca96f100a0f9c2fb6b2</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_22</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a74551aec079549198fa1e3f614e2e256</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Objective_BurgersControl</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>af53e08e92bfddadb4e8f7079215e37b0</anchor>
      <arglist>(Real alpha=1.e-4, int nx=128, int nt=100, Real T=1.0)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ad8a218c55e4b5e2ad681bc08a37f289c</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_1</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a33c225142b8b6e6bfb4b5a192d94c418</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_2</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a88bd32a5e26dd3d748c724616bda978c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_11</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a736af04bd4367a32f08c61812876102f</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_12</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ac9b050b432a3149e6ea9440e6ef04ae4</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_21</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a2b5e8dba27351ca96f100a0f9c2fb6b2</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_22</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a74551aec079549198fa1e3f614e2e256</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Objective_BurgersControl</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a6ec20ce11a63f403099810dc623da79e</anchor>
      <arglist>(const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem, const Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt; &amp;ud, Real alpha=1.e-4)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ad8a218c55e4b5e2ad681bc08a37f289c</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_1</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a33c225142b8b6e6bfb4b5a192d94c418</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_2</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a88bd32a5e26dd3d748c724616bda978c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_11</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a736af04bd4367a32f08c61812876102f</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_12</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ac9b050b432a3149e6ea9440e6ef04ae4</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_21</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a2b5e8dba27351ca96f100a0f9c2fb6b2</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_22</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a74551aec079549198fa1e3f614e2e256</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Objective_BurgersControl</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a732c2c5fa01d73cfa19118b5fb9e3782</anchor>
      <arglist>(Real alpha=1.e-4, int nx=128)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ad8a218c55e4b5e2ad681bc08a37f289c</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_1</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a33c225142b8b6e6bfb4b5a192d94c418</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_2</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a88bd32a5e26dd3d748c724616bda978c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_11</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a736af04bd4367a32f08c61812876102f</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_12</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ac9b050b432a3149e6ea9440e6ef04ae4</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_21</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a2b5e8dba27351ca96f100a0f9c2fb6b2</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_22</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a74551aec079549198fa1e3f614e2e256</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Objective_BurgersControl</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a6ec20ce11a63f403099810dc623da79e</anchor>
      <arglist>(const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem, const Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt; &amp;ud, Real alpha=1.e-4)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ad8a218c55e4b5e2ad681bc08a37f289c</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_1</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a33c225142b8b6e6bfb4b5a192d94c418</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_2</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a88bd32a5e26dd3d748c724616bda978c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_11</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a736af04bd4367a32f08c61812876102f</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_12</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ac9b050b432a3149e6ea9440e6ef04ae4</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_21</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a2b5e8dba27351ca96f100a0f9c2fb6b2</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_22</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a74551aec079549198fa1e3f614e2e256</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Objective_BurgersControl</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ae6bc3fc75033f7eda88edca49968cc10</anchor>
      <arglist>(const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem, Real x=0.0)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ad8a218c55e4b5e2ad681bc08a37f289c</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_1</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a33c225142b8b6e6bfb4b5a192d94c418</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_2</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a88bd32a5e26dd3d748c724616bda978c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_11</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a736af04bd4367a32f08c61812876102f</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_12</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ac9b050b432a3149e6ea9440e6ef04ae4</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_21</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a2b5e8dba27351ca96f100a0f9c2fb6b2</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_22</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a74551aec079549198fa1e3f614e2e256</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Objective_BurgersControl</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a6ec20ce11a63f403099810dc623da79e</anchor>
      <arglist>(const Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt; &amp;fem, const Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt; &amp;ud, Real alpha=1.e-4)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ad8a218c55e4b5e2ad681bc08a37f289c</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_1</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a33c225142b8b6e6bfb4b5a192d94c418</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_2</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a88bd32a5e26dd3d748c724616bda978c</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_11</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a736af04bd4367a32f08c61812876102f</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_12</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ac9b050b432a3149e6ea9440e6ef04ae4</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_21</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a2b5e8dba27351ca96f100a0f9c2fb6b2</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_22</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a74551aec079549198fa1e3f614e2e256</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorPrimal&lt; Real &gt;</type>
      <name>PrimalStateVector</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a19d82f498ef94b3b83a46794edce825d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorDual&lt; Real &gt;</type>
      <name>DualStateVector</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>abc9c17cda008c8108186c1dd60af0d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>L2VectorPrimal&lt; Real &gt;</type>
      <name>PrimalControlVector</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a9c34b8b571c146456269f64c20b3d4f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>L2VectorDual&lt; Real &gt;</type>
      <name>DualControlVector</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ae9ca4b828c909055ab0602848f57e551</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorPrimal&lt; Real &gt;</type>
      <name>PrimalStateVector</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a19d82f498ef94b3b83a46794edce825d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorDual&lt; Real &gt;</type>
      <name>DualStateVector</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>abc9c17cda008c8108186c1dd60af0d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>L2VectorPrimal&lt; Real &gt;</type>
      <name>PrimalControlVector</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a9c34b8b571c146456269f64c20b3d4f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>L2VectorDual&lt; Real &gt;</type>
      <name>DualControlVector</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ae9ca4b828c909055ab0602848f57e551</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorPrimal&lt; Real &gt;</type>
      <name>PrimalStateVector</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a19d82f498ef94b3b83a46794edce825d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorDual&lt; Real &gt;</type>
      <name>DualStateVector</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>abc9c17cda008c8108186c1dd60af0d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>L2VectorPrimal&lt; Real &gt;</type>
      <name>PrimalControlVector</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a9c34b8b571c146456269f64c20b3d4f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>L2VectorDual&lt; Real &gt;</type>
      <name>DualControlVector</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ae9ca4b828c909055ab0602848f57e551</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorPrimal&lt; Real &gt;</type>
      <name>PrimalStateVector</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a19d82f498ef94b3b83a46794edce825d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>H1VectorDual&lt; Real &gt;</type>
      <name>DualStateVector</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>abc9c17cda008c8108186c1dd60af0d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>L2VectorPrimal&lt; Real &gt;</type>
      <name>PrimalControlVector</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a9c34b8b571c146456269f64c20b3d4f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>L2VectorDual&lt; Real &gt;</type>
      <name>DualControlVector</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ae9ca4b828c909055ab0602848f57e551</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>evaluate_target</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a518c364a263f3a30179b13a4984ce2ff</anchor>
      <arglist>(Real x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>compute_norm</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>af80dd116de6cfd4807b8fc4683eb34fa</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;r)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a1c3151c4e72efeda2c6283257ad354ec</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>update</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a58f4dc4f5fefd47e10cd3706bb05515f</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;s, const Real alpha=1.0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a8ed55a43314a264ff31799b6690fda10</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const Real alpha=0.0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>apply_mass</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a26dd18b6d6a95d88cf46de96c338a4d6</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>compute_residual</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a07ab5ebf7e4521bff3847e053ad07891</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;r, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z, const std::vector&lt; Real &gt; &amp;param)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>compute_pde_jacobian</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a2c6bf94f8e00cd428bf5698bc333a972</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;dl, std::vector&lt; Real &gt; &amp;d, std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;param)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add_pde_hessian</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a76c363b181c7b6d75a58e8c174092cc5</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;r, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;p, const std::vector&lt; Real &gt; &amp;s, Real alpha=1.0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>linear_solve</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>af7f797968c52cd536b484e7ec626066d</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, std::vector&lt; Real &gt; &amp;dl, std::vector&lt; Real &gt; &amp;d, std::vector&lt; Real &gt; &amp;du, const std::vector&lt; Real &gt; &amp;r, const bool transpose=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>run_newton</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>afa78b5a08cef49e1e436c849e82cb260</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z, const std::vector&lt; Real &gt; &amp;param)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>evaluate_target</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a518c364a263f3a30179b13a4984ce2ff</anchor>
      <arglist>(Real x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a1c3151c4e72efeda2c6283257ad354ec</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>apply_mass</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a26dd18b6d6a95d88cf46de96c338a4d6</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>evaluate_target</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a518c364a263f3a30179b13a4984ce2ff</anchor>
      <arglist>(Real x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a1c3151c4e72efeda2c6283257ad354ec</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>apply_mass</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a26dd18b6d6a95d88cf46de96c338a4d6</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>evaluate_target</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a518c364a263f3a30179b13a4984ce2ff</anchor>
      <arglist>(Real x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a1c3151c4e72efeda2c6283257ad354ec</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>apply_mass</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a26dd18b6d6a95d88cf46de96c338a4d6</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mu, const std::vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>alpha_</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ad73ba05783b4c4f5fa9d2f97025246b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nx_</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>abc4cf74e8376d4d068eaafd82245a730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>dx_</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>abcd020696df34f3c5b81160752c001dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>nx_</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>aee1c59106f489ebeb7f79562d46c8291</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>nt_</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ab143caa700a8af6241c0b189b2fe1ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>dt_</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a51c1064724bf03b88fff21542f3c15eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>T_</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a2227639f90bb7451d745bdc67f685855</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BurgersFEM&lt; Real &gt; &gt;</type>
      <name>fem_</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>ad40d44dfc0edd86d456ae4e22a1e89e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>ud_</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a04ea88e76e66e2ba8897600e311ed436</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>diff_</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>aac6d48ee900d0bfb3699079c08f4ab68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>x_</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a165ee1ff458f17fd7baa885068addf51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>indices_</name>
      <anchorfile>classObjective__BurgersControl.html</anchorfile>
      <anchor>a5c9b977e80e167348c72bd18110db571</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_BVP</name>
    <filename>classROL_1_1ZOO_1_1Objective__BVP.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_BVP</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__BVP.html</anchorfile>
      <anchor>a38364ca42d6101e5c83738cf3aee1ae0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__BVP.html</anchorfile>
      <anchor>a5fa8c18a9001f829f65815b03eecb06c</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__BVP.html</anchorfile>
      <anchor>a7428873376ae9749e1c29f494e5085d2</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__BVP.html</anchorfile>
      <anchor>afe378aa638d8d30479ff3bb30807dd1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint</type>
      <name>dim_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__BVP.html</anchorfile>
      <anchor>a99cdd6bab2b5b36ef7d743a4ea423ab8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_DiodeCircuit</name>
    <filename>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_DiodeCircuit</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a1ff74d7b3e0b18728f88890cf6c04fa9</anchor>
      <arglist>(Real Vth, Real Vsrc_min, Real Vsrc_max, Real Vsrc_step, Real true_Is, Real true_Rs, bool lambertw, Real noise, bool use_adjoint, int use_hessvec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Objective_DiodeCircuit</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>aa0405e1f7cb680ed7695c9e396583f43</anchor>
      <arglist>(Real Vth, std::ifstream &amp;input_file, bool lambertw, Real noise, bool use_adjoint, int use_hessvec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_method</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a7adbac350a135008637235bd5b720a43</anchor>
      <arglist>(bool lambertw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_circuit</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>af1e590686b34ebe5a4d7ba486aadd11d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;I, const Vector&lt; Real &gt; &amp;S)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a13f36a180c4594fd7698916ed5ac19ce</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;S, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a6470730860853ea5ab2938b5d4a0fc21</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;S, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>ad14e795c4f8ea590f2df4661fccf712c</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;S, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate_plot</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a6ac871108c2f891b4a420d22e99a62d8</anchor>
      <arglist>(Real Is_lo, Real Is_up, Real Is_step, Real Rs_lo, Real Rs_up, Real Rs_step)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a7e846762b6412b65aa23902848fe9c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a74faa0cd06d4d29ad9be5a2bd86e38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>STDV</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a7ddeb60efdab125ec7df445f6f98c8cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PrimalScaledStdVector&lt; Real &gt;</type>
      <name>PSV</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a450c8fba842b9349fa73169e8c8389a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>DualScaledStdVector&lt; Real &gt;</type>
      <name>DSV</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a54737b2e2b8b32220e3c74b0264dc750</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a81077ce178928f653d23e47a24deef9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a58ac8f1dd59854ffcda960dcc7f93621</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a22675714638b37120bd93308bfcd840f</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>random</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a2e8251a7a546e28a6f7c1c81fe650101</anchor>
      <arglist>(const Real left, const Real right) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>diode</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a19426633cba7b757af328550e8cb8d7b</anchor>
      <arglist>(const Real I, const Real Vsrc, const Real Is, const Real Rs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>diodeI</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a3e16a14f2920286a941a7a653ec1965b</anchor>
      <arglist>(const Real I, const Real Vsrc, const Real Is, const Real Rs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>diodeIs</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a3904b82f2431f1e57c38276e977ce024</anchor>
      <arglist>(const Real I, const Real Vsrc, const Real Is, const Real Rs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>diodeRs</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>aa34be9451b6ce23cc2b109a82c166155</anchor>
      <arglist>(const Real I, const Real Vsrc, const Real Is, const Real Rs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>diodeII</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a09ce162bb2a81675f94e53a7a41c1a26</anchor>
      <arglist>(const Real I, const Real Vsrc, const Real Is, const Real Rs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>diodeIIs</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a2432b87a7e02c4dbb3299ccbad5aa7d8</anchor>
      <arglist>(const Real I, const Real Vsrc, const Real Is, const Real Rs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>diodeIRs</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a862ad9a2847851e936758872951fed98</anchor>
      <arglist>(const Real I, const Real Vsrc, const Real Is, const Real Rs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>diodeIsIs</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>af746928e2ffed8e80a045b41b7bf6ae2</anchor>
      <arglist>(const Real I, const Real Vsrc, const Real Is, const Real Rs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>diodeIsRs</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>aa611e4ec3b1b8b0d6369e30f32c4bbb5</anchor>
      <arglist>(const Real I, const Real Vsrc, const Real Is, const Real Rs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>diodeRsRs</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>abe5264aae0af2421527f5d47595e2be5</anchor>
      <arglist>(const Real I, const Real Vsrc, const Real Is, const Real Rs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>Newton</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a6208561086efdc4935b7986769799b3e</anchor>
      <arglist>(const Real I, const Real Vsrc, const Real Is, const Real Rs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>lambertw</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>ac52fc55945f0f511e910a62d92178460</anchor>
      <arglist>(Real x, Real &amp;w, int &amp;ierr, Real &amp;xi)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>lambertWCurrent</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a82d945ae71aeeecf21462c4326b82f34</anchor>
      <arglist>(Real Is, Real Rs, Real Vsrc)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>solve_adjoint</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a73f7c1f869171cce5aac427769d4fb5f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;lambda, const Vector&lt; Real &gt; &amp;I, const Vector&lt; Real &gt; &amp;S)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>solve_sensitivity_Is</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a01b2e0f6f92f79c6f80ce08b939eace9</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;sens, const Vector&lt; Real &gt; &amp;I, const Vector&lt; Real &gt; &amp;S)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>solve_sensitivity_Rs</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>aee1a8c65e3f2ad5a1c95996d45b20025</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;sens, const Vector&lt; Real &gt; &amp;I, const Vector&lt; Real &gt; &amp;S)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>Vth_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a08225c749f24efee117db020337a9ed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>Imeas_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>af1700c6ed4d59725dd7989b31aa9397a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>Vsrc_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a422033ce71204daff2abb91fd654c86b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>lambertw_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>ab6695b67a3cdddc68d12709a6c77bad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>noise_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a8b3df7cfb0fdc7a58ea2418ee6785694</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>use_adjoint_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>ae956e8f6222989f0292a5f3095dc4e6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>use_hessvec_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__DiodeCircuit.html</anchorfile>
      <anchor>a52a534728061724007dcc8d4c55226aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_FreudensteinRoth</name>
    <filename>classROL_1_1ZOO_1_1Objective__FreudensteinRoth.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_FreudensteinRoth</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__FreudensteinRoth.html</anchorfile>
      <anchor>ac1bb27a5a0aac4099db91f55bbef7ac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__FreudensteinRoth.html</anchorfile>
      <anchor>a32f52eeee4c05cf666e7f7d8777228ca</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__FreudensteinRoth.html</anchorfile>
      <anchor>accdaf265f24d7e5b1b9ad62c188aa5e4</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invHessVec</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__FreudensteinRoth.html</anchorfile>
      <anchor>a527d4cc7e723acca5b3cccf87d950412</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Objective_GrossPitaevskii</name>
    <filename>classObjective__GrossPitaevskii.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Objective</base>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_GrossPitaevskii</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>a1621e1570fafbf67f9a3cd245acc6420</anchor>
      <arglist>(const Real &amp;g, const Vector&lt; Real &gt; &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>aecb5c6d9c13ad457e2e1d30ba6a5f7ab</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;psi, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>ab7084619cb2830b845017f0ea7690c96</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;psi, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>a13b5f20a34e05fb28b7ef79efd3e6663</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;psi, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Objective_GrossPitaevskii</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>adef7c5a1887565117b1a9bd0a04e58cd</anchor>
      <arglist>(const Real &amp;g, const Vector&lt; Real &gt; &amp;V, Teuchos::RCP&lt; FiniteDifference&lt; Real &gt; &gt; fd)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>aecb5c6d9c13ad457e2e1d30ba6a5f7ab</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;psi, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>ab7084619cb2830b845017f0ea7690c96</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;psi, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>a13b5f20a34e05fb28b7ef79efd3e6663</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;psi, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>adf7b45644b2fff11554ca41bcd9d5f39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>af4852dd38ccb2a4686031c70ddb9f975</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>af0675e467d06c5addd53b7f4b61fd2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>a888de1f4fb094d0f905d860d37f2ae74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>adf7b45644b2fff11554ca41bcd9d5f39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>a888de1f4fb094d0f905d860d37f2ae74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>ae3734bdbea9073c363ca5b62edaa638e</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>a920832000bd5c44e539bf15f8006a307</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>applyK</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>ab3170736d0e13447f895132d599194e2</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v, Vector&lt; Real &gt; &amp;kv)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>applyK</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>ab3170736d0e13447f895132d599194e2</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v, Vector&lt; Real &gt; &amp;kv)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>g_</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>aef31d94b3a7947f8a96bc03b1fbc4327</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint</type>
      <name>nx_</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>a453d519e64d2dc1a7eac7e97b783f4b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>dx_</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>ab08e7a4619e95620b1c47e5f4c9f5bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>Vp_</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>a4d0c1131ed6d6ade00bd4136bf14d656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>Vp_</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>a50363e0ca02642daf0783bbcd22e960d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; FiniteDifference&lt; Real &gt; &gt;</type>
      <name>fd_</name>
      <anchorfile>classObjective__GrossPitaevskii.html</anchorfile>
      <anchor>af42bd663a56e933deee1a81fc112cfb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_HS1</name>
    <filename>classROL_1_1ZOO_1_1Objective__HS1.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_HS1</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS1.html</anchorfile>
      <anchor>a6d98a7783ade627d97493596bddaab67</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS1.html</anchorfile>
      <anchor>a2285bc39f12a9a045e1df045bbc713d2</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS1.html</anchorfile>
      <anchor>a7c67c9e0952c98e958d13e1acffb15e6</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invHessVec</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS1.html</anchorfile>
      <anchor>a6dee9ed3758f02fcb78747c5c21a5c26</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_HS2</name>
    <filename>classROL_1_1ZOO_1_1Objective__HS2.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_HS2</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS2.html</anchorfile>
      <anchor>a99a878ca5c1c259de8997d8e1b14e4d6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS2.html</anchorfile>
      <anchor>a2c4b3e2f6f67acba7cee17c33b9a2c61</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS2.html</anchorfile>
      <anchor>af3e14549d62a3ecf13a9677a2a452fc3</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invHessVec</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS2.html</anchorfile>
      <anchor>a545840a29dc653ad55cbd4577b88a0cc</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS2.html</anchorfile>
      <anchor>a2a60d9367a1628723fde8cd59759090a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS2.html</anchorfile>
      <anchor>ae38826f789019f8276607cbd2f9d9b58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS2.html</anchorfile>
      <anchor>aa1603cd17101970cb180c52593217d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS2.html</anchorfile>
      <anchor>a863df796d9bb3327b2609cd91f9634ed</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS2.html</anchorfile>
      <anchor>ab4133f18c809baa331fa73549f211591</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_HS24</name>
    <filename>classROL_1_1ZOO_1_1Objective__HS24.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_HS24</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS24.html</anchorfile>
      <anchor>ad4249e0e84fb4489ae02243a0b297e12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS24.html</anchorfile>
      <anchor>aa3f69b2e0b86d01ebe3d097f92fd1eff</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS24.html</anchorfile>
      <anchor>a3e4d910bfeef2819964951014dad9b12</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS24.html</anchorfile>
      <anchor>ad87b556d035770c3163f25004b27c64c</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS24.html</anchorfile>
      <anchor>a026a526f4e47150a0a56f0a96edd85f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS24.html</anchorfile>
      <anchor>aa93d31a987598c44b6544454d0a03d4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS24.html</anchorfile>
      <anchor>a23751bd16a3192677a8ac5b3a43cfab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>rt3_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS24.html</anchorfile>
      <anchor>a1a99ec3a4bc334226e47f96a87292589</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_HS25</name>
    <filename>classROL_1_1ZOO_1_1Objective__HS25.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_HS25</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS25.html</anchorfile>
      <anchor>a6805da40813732cc28362840e6db7be5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS25.html</anchorfile>
      <anchor>ac5c96b4d7cb56d4ef373e9aba47fca35</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS25.html</anchorfile>
      <anchor>a00502c194e99f6f4a7bc9906bde5a090</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS25.html</anchorfile>
      <anchor>a76e8543d3a5dd1e8c4a90c25f633b5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>u_vec_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS25.html</anchorfile>
      <anchor>a2264a12476e9209c4c641839b2ca9f9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint</type>
      <name>u_size_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS25.html</anchorfile>
      <anchor>ab9a297ed276082ce61f75868c7b8533f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_HS29</name>
    <filename>classROL_1_1ZOO_1_1Objective__HS29.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS29.html</anchorfile>
      <anchor>a9546f3534cb2b53855a12e68694f75b6</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS29.html</anchorfile>
      <anchor>a05fe9f12b724c6e4869e7045d2ceef35</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS29.html</anchorfile>
      <anchor>ad090a4cc392b1de535b89e50e7de60fc</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS29.html</anchorfile>
      <anchor>a07c0d46260aa95c6d3caaf683a21673c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS29.html</anchorfile>
      <anchor>a6282b754a222a7d1ab7fafcfe46414ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS29.html</anchorfile>
      <anchor>aa9510bd99b6c27d6f7e17b971c3a67e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS29.html</anchorfile>
      <anchor>a462519cca84d96567ac6a72cbf2718a1</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS29.html</anchorfile>
      <anchor>ac133848a33bae07ee3382e631269069b</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_HS3</name>
    <filename>classROL_1_1ZOO_1_1Objective__HS3.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_HS3</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS3.html</anchorfile>
      <anchor>a0a2d9d12a10dac66d7ca41efeaff0b13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS3.html</anchorfile>
      <anchor>a563c37d2dea908b22b3309e88c080116</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS3.html</anchorfile>
      <anchor>a2ab61968764cb5cd99bc97d19e90bf60</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invHessVec</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS3.html</anchorfile>
      <anchor>ae56bf56a901d8095cd6bdc2ac264d620</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS3.html</anchorfile>
      <anchor>ac8ef01270311340057059b268e585cea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS3.html</anchorfile>
      <anchor>a374c4f9e36e0dc9f0676e7fd45a73760</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS3.html</anchorfile>
      <anchor>a65d2c4f4af6365fdd0798f07a73db4e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS3.html</anchorfile>
      <anchor>ac31a3d63e62b8d5d3a315e7e20077c49</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS3.html</anchorfile>
      <anchor>aee5a090dbe8ea59dc858e049dd5c8495</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_HS32</name>
    <filename>classROL_1_1ZOO_1_1Objective__HS32.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS32.html</anchorfile>
      <anchor>a32c855f3b9a4a6f7f45090fe8058f6af</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS32.html</anchorfile>
      <anchor>aa7c4a8c568b6696a0eba3db6e3c00295</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS32.html</anchorfile>
      <anchor>a6802fd232ae0f0d630a62cb31843eeec</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS32.html</anchorfile>
      <anchor>a144d01ce49d1f373063e135e0aa49c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS32.html</anchorfile>
      <anchor>aaa8aac5b51c118de4c7ebb7ee097581a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS32.html</anchorfile>
      <anchor>ae00bdf8c6d53dbb81171562e5dd8c01b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS32.html</anchorfile>
      <anchor>a7fad2911f6ec92272e6fdca9314a13ad</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS32.html</anchorfile>
      <anchor>ac2bd6e4ffc4a45d651dc6e998df0056e</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_HS38</name>
    <filename>classROL_1_1ZOO_1_1Objective__HS38.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_HS38</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS38.html</anchorfile>
      <anchor>a413a4c480f767005fc3672e392779091</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS38.html</anchorfile>
      <anchor>a00070ace67ad791db4a7c74e65658edc</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS38.html</anchorfile>
      <anchor>ad9eda38614add8c398ab8e6c368928f5</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS38.html</anchorfile>
      <anchor>ab5847c2e1bdc52860b4c93524d6001e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS38.html</anchorfile>
      <anchor>abf2219f5e03cad5ec0531c2ef1c45326</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS38.html</anchorfile>
      <anchor>ab09a2002ea35b97bb1d2b56bdb610663</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS38.html</anchorfile>
      <anchor>a275eddb3cdd3f6dbe9a81472c2f81829</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS38.html</anchorfile>
      <anchor>a2c650cf9d79f0f9be49d8b56c0490baf</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_HS39</name>
    <filename>classROL_1_1ZOO_1_1Objective__HS39.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS39.html</anchorfile>
      <anchor>ab26ada212810a0cc2dea2d780ac70035</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS39.html</anchorfile>
      <anchor>ac4f3a35bd01062bbf100bffdb644bfd5</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS39.html</anchorfile>
      <anchor>a02b2e7a18f559148c444b55cbdb84cbf</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS39.html</anchorfile>
      <anchor>aad886840a51d5fbde670481122a12a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS39.html</anchorfile>
      <anchor>a00cf51c10c0e35a7a6c5fa6510180cdd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_HS4</name>
    <filename>classROL_1_1ZOO_1_1Objective__HS4.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_HS4</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS4.html</anchorfile>
      <anchor>a62cc52628d6fbc9b8201e1f8dfe29d77</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS4.html</anchorfile>
      <anchor>aca1a4c2b3132859443a2a928f1e2f060</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS4.html</anchorfile>
      <anchor>ae66f76f0d532c9fef0bf335f330e7d90</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS4.html</anchorfile>
      <anchor>a70caa3473e43a9c3fea4403c0844b531</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS4.html</anchorfile>
      <anchor>a1f5210b046b12d0b4503a96b6c89bc9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS4.html</anchorfile>
      <anchor>ac9dfa28cb4d2c2f2370787c36e491874</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS4.html</anchorfile>
      <anchor>a222bec3845dcea451fd775f54cef5885</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS4.html</anchorfile>
      <anchor>a66c831562e7c42ddbf01e26e943d65b6</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_HS45</name>
    <filename>classROL_1_1ZOO_1_1Objective__HS45.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_HS45</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS45.html</anchorfile>
      <anchor>a00a81dc21ab3413048c9ac71bb51ec05</anchor>
      <arglist>(int dim=5)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS45.html</anchorfile>
      <anchor>a37644b5c5cabb34c299f63d75a86652d</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS45.html</anchorfile>
      <anchor>a0cecd8b8dfbcc296e035641959c4dbea</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS45.html</anchorfile>
      <anchor>a62f9617fde3880adc4680829b13d6f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS45.html</anchorfile>
      <anchor>af5d045e5a5981f71eb6f85b8e45e9c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS45.html</anchorfile>
      <anchor>ad3275fbf8ca62b7b64e71dd2ffdaad7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS45.html</anchorfile>
      <anchor>af2fa8c2ddc770388228145efff4a16da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS45.html</anchorfile>
      <anchor>aeb8f2973ca038a37d894494930e5966a</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS45.html</anchorfile>
      <anchor>a465f9a74321dbeebf592a3f5c65ef96f</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint</type>
      <name>dim_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS45.html</anchorfile>
      <anchor>af201ac9086a47c8b916ed5cac1f72ba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>fact_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS45.html</anchorfile>
      <anchor>a17b1220f43b72739f1b3a9e23f30bcae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_HS5</name>
    <filename>classROL_1_1ZOO_1_1Objective__HS5.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_HS5</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS5.html</anchorfile>
      <anchor>a94f1386cded9dbc5fa8811d4f497803c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS5.html</anchorfile>
      <anchor>ab0e258eabb1c77f9c21dccb55ef340c0</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS5.html</anchorfile>
      <anchor>a3854f5fa326ed1f3ee97e43bbdd2576d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invHessVec</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS5.html</anchorfile>
      <anchor>a221e4b7a365a7fa557bedd49f346483b</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS5.html</anchorfile>
      <anchor>a855ccaea6a7d904da2c6fc1852622552</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS5.html</anchorfile>
      <anchor>aa702f8058c462d1a1b63f46fee2f4cc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS5.html</anchorfile>
      <anchor>ac3b6af8d8b38378da7e85652d80e4130</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS5.html</anchorfile>
      <anchor>add435c41d85aafe522f4cb19ec7fa73d</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__HS5.html</anchorfile>
      <anchor>a0474e8f411ddd47dbe138a37dd652db4</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_LeastSquares</name>
    <filename>classROL_1_1ZOO_1_1Objective__LeastSquares.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__LeastSquares.html</anchorfile>
      <anchor>a1207900da820438fa54923983beb1cfa</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__LeastSquares.html</anchorfile>
      <anchor>ab0949ba195c6f1e6d5ab392c497a38b6</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__LeastSquares.html</anchorfile>
      <anchor>aa3ff15dab9fc0551e08e9a4a1a81593e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_PoissonControl</name>
    <filename>classROL_1_1ZOO_1_1Objective__PoissonControl.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_PoissonControl</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonControl.html</anchorfile>
      <anchor>a8c6eaa50923e37621c09aae3f1e36a09</anchor>
      <arglist>(Real alpha=1.e-4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_mass</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonControl.html</anchorfile>
      <anchor>a1f96c429483ddecc27acecc7e576f1c1</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Mz, const Vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_poisson</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonControl.html</anchorfile>
      <anchor>aac66771c299bf3c258b7a2895a968497</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluate_target</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonControl.html</anchorfile>
      <anchor>af8d5f90f14e0913edb981a49d0a9b8f6</anchor>
      <arglist>(Real x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonControl.html</anchorfile>
      <anchor>a9c33dbed25173de2cb5f458d1fa81bec</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonControl.html</anchorfile>
      <anchor>a1fdf9dcfc59c928d865afff120505707</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonControl.html</anchorfile>
      <anchor>aebca6922c445528160da2a6c385f27c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonControl.html</anchorfile>
      <anchor>a84d87f3637d975b39b316dc108dde06f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonControl.html</anchorfile>
      <anchor>a5a291e9ca0110a581fce0510732ba552</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonControl.html</anchorfile>
      <anchor>a03f619fb56221b73c22beb5ea08cbaa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonControl.html</anchorfile>
      <anchor>a084d1667657644d9127d10d6afc1a7b7</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonControl.html</anchorfile>
      <anchor>a42df3ea5ee5dfc0c9410da31a8a2e12b</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>alpha_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonControl.html</anchorfile>
      <anchor>a6798e7d971cd149bd66e667e8467dbe6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Objective_PoissonInversion</name>
    <filename>classObjective__PoissonInversion.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_PoissonInversion</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>ab692071be3dac21daa1b2e0957db0a57</anchor>
      <arglist>(int nz=32, Real alpha=1.e-4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_mass</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>ade397d502236cbed433e8c2a9d91f54d</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Mz, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluate_target</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>af531ceeb113e7768b4bf30f3ae5b72d3</anchor>
      <arglist>(Real x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_linearized_control_operator</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>ad6fa6e612047f9340137c6e46025a660</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Bd, const std::vector&lt; Real &gt; &amp;z, const std::vector&lt; Real &gt; &amp;d, const std::vector&lt; Real &gt; &amp;u, bool addBC=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_transposed_linearized_control_operator</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a7e64d15f2bc8b70c7b626181d7ca946a</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Bd, const std::vector&lt; Real &gt; &amp;z, const std::vector&lt; Real &gt; &amp;d, const std::vector&lt; Real &gt; &amp;u, bool addBC=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_state_equation</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a1d781a3f0bc15ed319b7d375065d5c6b</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_adjoint_equation</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a34f2c60a32bcba3912248dfa7786fd85</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;p, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_state_sensitivity_equation</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a0546eb3eab94c0524f664cc90e650b11</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_adjoint_sensitivity_equation</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>af7540949615da73ca173774a84af6eb3</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;q, const std::vector&lt; Real &gt; &amp;w, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;p, const std::vector&lt; Real &gt; &amp;u, const std::vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a37492da41946dcdf6a6fdbb75149bd85</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;z, bool flag, int iter)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>aac6e54c29de71e0732a8c15a97c7e156</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>ace03a9c10b134a6e93516512eba85664</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a3cf0f12a4825564845e5e34df655f4b7</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activateInertia</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a9cfa58f714cd93a77621bcc6dab1519f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deactivateInertia</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a7ef8e0c7d2c4f2f19f70f0fda7e7bd25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_true</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>aa9b40d118a5fb72817bd8b23f4ad867d</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_inertia</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a4ffe0326245ae7cc31f9fd08e959c27f</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a7b61918c9ce75ca34d8cc0587a315baa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ROL::Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a1e722c5145fdc8172b2301d1adadb656</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ROL::StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a6b70d67ec76a81cd8ed8c31f904fd302</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a560b790439f34143d8ee10ffc7cff234</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a8c25e86733c0bb732b13eec490b6cd78</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a75d40ab3e13ae7b52a920f54d2303912</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint</type>
      <name>nu_</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a090494808414381c50f45af5ac37c1af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint</type>
      <name>nz_</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a9a508623bc2b53b13a3c486b99ef66e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>hu_</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a8c2b6ed9b4d37eb40091b3ac86c5c45d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>hz_</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>ac60acbabf028cd7c0d8fc903bb63bf46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>u0_</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a22a76b76487277699b6aa9528aebbd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>u1_</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a4a0cae108a17076bcc525da0446a44f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>alpha_</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a2845a0c2d9923be99de30fde928edc88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useCorrection_</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>ada164ff41b1c5a602ebc0d749e3c641f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::SerialDenseMatrix&lt; int, Real &gt;</type>
      <name>H_</name>
      <anchorfile>classObjective__PoissonInversion.html</anchorfile>
      <anchor>a1d55c1457a81251c5ce7bec27674c2de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_PoissonInversion</name>
    <filename>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_PoissonInversion</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>ab14e373b7fbe6e559f1e1f7ac98a42ef</anchor>
      <arglist>(uint nz=32, Real alpha=1.e-4)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>reg_value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>a379bf173d7e0b09c3cb1708f32db72e3</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reg_gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>aeb420f05911cd0d8953be7b7cdd609de</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reg_hessVec</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>a43550724f9c75f14e1fd183d8e6afccc</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_mass</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>a4320bd8c3977dd7afa14ded2b9034a69</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Mf, const Vector&lt; Real &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_poisson</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>a20ed85a6c05b37d3c3c6c6d35775b2ae</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Vector&lt; Real &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluate_target</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>affbdf1ae7782e9eb3fde4d28184533f4</anchor>
      <arglist>(Real x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_linearized_control_operator</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>a94ed9da496badb1bf4ebae5208e8ff21</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Bd, const Vector&lt; Real &gt; &amp;z, const Vector&lt; Real &gt; &amp;d, const Vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_transposed_linearized_control_operator</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>a5254efc93a6b1ef5854576fdd8381eb2</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Bd, const Vector&lt; Real &gt; &amp;z, const Vector&lt; Real &gt; &amp;d, const Vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_transposed_linearized_control_operator_2</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>af8488a8c55fd2c8f2e08d626abe73c56</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Bd, const Vector&lt; Real &gt; &amp;z, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;d, const Vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_state_equation</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>a86f017d54972c1573d171a23cb49a4ee</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_adjoint_equation</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>a066e83ea81a5576b418cf5dada7b03f9</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;p, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_state_sensitivity_equation</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>a796ef8a19e614eae8a05a2ac56602b12</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;w, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_adjoint_sensitivity_equation</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>a304939b1786fb2a5b1f635e57b0a968e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;q, const Vector&lt; Real &gt; &amp;w, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;p, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>ade9a8b22f7cf5e9a524eeeb21ef9678a</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>a85cdab712a1a5b206e005dceebd5fd90</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invHessVec</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>afd057a37ae030b265a9e2f936a1aba59</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>a2d4c5df2e136002145ab004cf170d470</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>a95e58a866679a2e395fc199a76328e3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>a19e684bff2dff6daaac9f339f1a9b7df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>a754cf2d92ba8d87809afc0d209d1eed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>a8745f0d8c597d5437385f07d9a72c4a9</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>acb07f3a8299db64a280c424530868478</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint</type>
      <name>nu_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>af6757e260eea12d9fa728ce0721f0957</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint</type>
      <name>nz_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>aac00eef83d9121f3732bb5f0f8e3cbee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>hu_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>a4a29009d9edf5c4b3f85be98595eb3f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>hz_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>a11d84bc80659830dfc46931b5ee0a9d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>alpha_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>a6314c6a99ace43eed748e115d75dc467</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>eps_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>aca96b613228e69577b78d52da45a897f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>reg_type_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__PoissonInversion.html</anchorfile>
      <anchor>afaa299413dd30ddd4e1745fa84ff1b0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_Powell</name>
    <filename>classROL_1_1ZOO_1_1Objective__Powell.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_Powell</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Powell.html</anchorfile>
      <anchor>ae8b68113fcfb927ae28b6aed1ad342c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Powell.html</anchorfile>
      <anchor>a48aea7426f4d0bb38b9ea116fde79147</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Powell.html</anchorfile>
      <anchor>acb679cd6ee836c296138e7e722e3d548</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invHessVec</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Powell.html</anchorfile>
      <anchor>a5f02e6aaf81b7f28bc37535f555a678a</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_Rosenbrock</name>
    <filename>classROL_1_1ZOO_1_1Objective__Rosenbrock.html</filename>
    <templarg>Real</templarg>
    <templarg>XPrim</templarg>
    <templarg>XDual</templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_Rosenbrock</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Rosenbrock.html</anchorfile>
      <anchor>a1f3bf351d0c4384103fd1de861d0badd</anchor>
      <arglist>(Real alpha=100.0)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Rosenbrock.html</anchorfile>
      <anchor>a7d66a22383fb52c219c8cc2a87572f75</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Rosenbrock.html</anchorfile>
      <anchor>ad02468e586f581f901366fac76934faf</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invHessVec</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Rosenbrock.html</anchorfile>
      <anchor>a90d39249d1839f6710d258e9f9518ec0</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Rosenbrock.html</anchorfile>
      <anchor>a35282ba9ad14ee18f08ef4f938d3e080</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Rosenbrock.html</anchorfile>
      <anchor>a37ed16b8c5eecde8a4dc20f5c9a12cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Rosenbrock.html</anchorfile>
      <anchor>a8b6a57638f5e09901e3a90f8e2b53a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Rosenbrock.html</anchorfile>
      <anchor>a354ba9889021470bee7088c9bf50fe4a</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Rosenbrock.html</anchorfile>
      <anchor>a8295252a1db280f8a73622562f73958e</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>alpha_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Rosenbrock.html</anchorfile>
      <anchor>a1f08f9483afd80a521dd301818a0ac92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>const1_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Rosenbrock.html</anchorfile>
      <anchor>a95109ee4db76d7052899d8ae8eb722cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>const2_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Rosenbrock.html</anchorfile>
      <anchor>a9a1e18a5ac24b2ad4c939ab414b017b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Objective_SimOpt</name>
    <filename>classROL_1_1Objective__SimOpt.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">ROL::Objective</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1Objective__SimOpt.html</anchorfile>
      <anchor>a50e89c5ae9e263a8db4f72ae0fbd5264</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1Objective__SimOpt.html</anchorfile>
      <anchor>a224fed3ddfffa0717c7ff64afd7a05ba</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1Objective__SimOpt.html</anchorfile>
      <anchor>a85b87d7a79c6eb320eb36925d39702b6</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)=0</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1Objective__SimOpt.html</anchorfile>
      <anchor>a7cf3048575b5f224537102504046800c</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradient_1</name>
      <anchorfile>classROL_1_1Objective__SimOpt.html</anchorfile>
      <anchor>aeec742eb890c5ae6e2a10f2125d54847</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradient_2</name>
      <anchorfile>classROL_1_1Objective__SimOpt.html</anchorfile>
      <anchor>a7f104321be3f050e6ec939c9c8a910c9</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1Objective__SimOpt.html</anchorfile>
      <anchor>aabc736d9d4aa37a3c3f14f2e24a60aae</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec_11</name>
      <anchorfile>classROL_1_1Objective__SimOpt.html</anchorfile>
      <anchor>a9f9c00742cf22f10715952e55c519a74</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec_12</name>
      <anchorfile>classROL_1_1Objective__SimOpt.html</anchorfile>
      <anchor>aef85c18d722983a8ff7a46a0e6b47577</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec_21</name>
      <anchorfile>classROL_1_1Objective__SimOpt.html</anchorfile>
      <anchor>aa8beaf6495877195aa2f72c8e7bbafaa</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec_22</name>
      <anchorfile>classROL_1_1Objective__SimOpt.html</anchorfile>
      <anchor>a2cad004141f20679a4cdd8f784e81320</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1Objective__SimOpt.html</anchorfile>
      <anchor>a30bab2e5111d6f2e1012c87ee0c8706e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_SimpleEqConstrained</name>
    <filename>classROL_1_1ZOO_1_1Objective__SimpleEqConstrained.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_SimpleEqConstrained</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__SimpleEqConstrained.html</anchorfile>
      <anchor>ac1060df810f2adaa52ab4d7cb29beedf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__SimpleEqConstrained.html</anchorfile>
      <anchor>a3528e57a27df2ec06f17f6e483b56f8d</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__SimpleEqConstrained.html</anchorfile>
      <anchor>ae15a59bbae8cdfe0a73bba019865a0e9</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__SimpleEqConstrained.html</anchorfile>
      <anchor>a9dd6eba7b34342cd770eb7aba0109496</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__SimpleEqConstrained.html</anchorfile>
      <anchor>ac3ecd5571341f045f7cee4e9229c1ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__SimpleEqConstrained.html</anchorfile>
      <anchor>a4182d036c155456dc15ec21f77254aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__SimpleEqConstrained.html</anchorfile>
      <anchor>a97466e1ef83a26f883b89525ae232e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__SimpleEqConstrained.html</anchorfile>
      <anchor>ade7882d227af6ac9b5f031b4bb8e7b77</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__SimpleEqConstrained.html</anchorfile>
      <anchor>ae33f5de567d89c4326339e9da23cf38b</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_SumOfSquares</name>
    <filename>classROL_1_1ZOO_1_1Objective__SumOfSquares.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__SumOfSquares.html</anchorfile>
      <anchor>aea3f3538ea1959d431a52705e67ff1fa</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__SumOfSquares.html</anchorfile>
      <anchor>a9b8ffd7d651d7be6f20f65e52f7508f8</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invHessVec</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__SumOfSquares.html</anchorfile>
      <anchor>a03ad2b28e0d10bd62358a0930714a073</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ZOO::Objective_Zakharov</name>
    <filename>classROL_1_1ZOO_1_1Objective__Zakharov.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Objective_Zakharov</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Zakharov.html</anchorfile>
      <anchor>a619708f9ffb57ecabcf873b9e01a40b8</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; k)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Zakharov.html</anchorfile>
      <anchor>a703038b8fdb6226e617d5958b45ff2aa</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Zakharov.html</anchorfile>
      <anchor>acc5ae4dcdea37c7cd888ad3f92182d3d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dirDeriv</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Zakharov.html</anchorfile>
      <anchor>a9ac576f70e2de42002f9a16db824b945</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;d, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invHessVec</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Zakharov.html</anchorfile>
      <anchor>ab59db6eda496a8e0e9d133acdf90e025</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ihv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>k_</name>
      <anchorfile>classROL_1_1ZOO_1_1Objective__Zakharov.html</anchorfile>
      <anchor>a167aedc21e04a2053a6285ab581e7614</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ObjectiveFromBoundConstraint</name>
    <filename>classROL_1_1ObjectiveFromBoundConstraint.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>ObjectiveFromBoundConstraint</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>af63e49289a1c474fbf78e63a938278e7</anchor>
      <arglist>(const BoundConstraint&lt; Real &gt; &amp;bc, Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectiveFromBoundConstraint</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a89ad757cf9cc8269a888031917b78385</anchor>
      <arglist>(const BoundConstraint&lt; Real &gt; &amp;bc)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a0615a0cf4fc2f461cffb60bdb2ca8241</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a5c33857c6cc69591809445371e6b6097</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>ab087477ac071e6975b9cd9e3148fa4e2</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getBarrierVector</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a643acdfc02d518c1429f61ff2f4ba485</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="enumeration" protection="private">
      <type></type>
      <name>EBarrierType</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a240e7d989f296870565181e20fb4b79b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>BARRIER_LOGARITHM</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a240e7d989f296870565181e20fb4b79ba93a06f361d730a6fce81bef5de29c7fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>BARRIER_QUADRATIC</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a240e7d989f296870565181e20fb4b79ba9eed36c3c9142965936699d2c9d50528</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>BARRIER_DOUBLEWELL</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a240e7d989f296870565181e20fb4b79ba5601bbc5c17c57409b5296415e1b5a7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>BARRIER_LAST</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a240e7d989f296870565181e20fb4b79ba23972b8d1050ee7cf30baa7a2f67f097</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a740b0a1ecb03b29e2db2ff34c428d2e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Elementwise::Axpy&lt; Real &gt;</type>
      <name>Axpy</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a81d879b5a5e31a272187d78801d08671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Elementwise::Aypx&lt; Real &gt;</type>
      <name>Aypx</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a407db7348b343c285828e87d4c944d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Elementwise::Scale&lt; Real &gt;</type>
      <name>Scale</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a980915349df5ef82c3e3c7b250d2d29f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Elementwise::Reciprocal&lt; Real &gt;</type>
      <name>Reciprocal</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a357e0e6635f6ae837403e75f89fbcbed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Elementwise::Power&lt; Real &gt;</type>
      <name>Power</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>ac72779688619624d678eec67b06cb966</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Elementwise::Logarithm&lt; Real &gt;</type>
      <name>Logarithm</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>aa3e971f7a1bcb2fe8111badfe78830e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Elementwise::Multiply&lt; Real &gt;</type>
      <name>Multiply</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a28adf50f3da5e2411c3609087036c75a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Elementwise::Heaviside&lt; Real &gt;</type>
      <name>Heaviside</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a5629a6d3c0d096f53df5a1b47f52e70b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Elementwise::ThresholdUpper&lt; Real &gt;</type>
      <name>ThresholdUpper</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>ade92d99a0322a57b6df60efe30d34f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Elementwise::ThresholdLower&lt; Real &gt;</type>
      <name>ThresholdLower</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a114b56b0d1b9e6c210ed6118b8fe9bf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Elementwise::ReductionSum&lt; Real &gt;</type>
      <name>Sum</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a51d932e0cc7b89791ddfd1c8bd7a1038</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Elementwise::UnaryFunction&lt; Real &gt;</type>
      <name>UnaryFunction</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>adf4f2ae4e05c4145c95329ffe6e411e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>BARRIER_LOGARITHM</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a240e7d989f296870565181e20fb4b79ba93a06f361d730a6fce81bef5de29c7fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>BARRIER_QUADRATIC</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a240e7d989f296870565181e20fb4b79ba9eed36c3c9142965936699d2c9d50528</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>BARRIER_DOUBLEWELL</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a240e7d989f296870565181e20fb4b79ba5601bbc5c17c57409b5296415e1b5a7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>BARRIER_LAST</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a240e7d989f296870565181e20fb4b79ba23972b8d1050ee7cf30baa7a2f67f097</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>EBarrierToString</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>ab2874acc9a279ecec5b9d0070cb7ad2d</anchor>
      <arglist>(EBarrierType type)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>EBarrierType</type>
      <name>StringToEBarrierType</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a09800b2086326e6e8039e9953adf7470</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>enum ROL::ObjectiveFromBoundConstraint::EBarrierType</type>
      <name>eBarrierType_</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a37fef5987bf5c9ad5dbeb8ddd6286a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>lo_</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>af3390e77877fa9ded490e6a954d54922</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>up_</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a28d7a5d4db4b96c9b905a0a11b484306</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>a_</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a249a24b9c076693f4962a9745f2628f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>b_</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a3c4e32a14c1935757587d7db1b41e7f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EBarrierType</type>
      <name>btype_</name>
      <anchorfile>classROL_1_1ObjectiveFromBoundConstraint.html</anchorfile>
      <anchor>a7dde757566f6af807d107ad63765154e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectiveFunctionTest06</name>
    <filename>classObjectiveFunctionTest06.html</filename>
    <templarg></templarg>
    <base>ROL::StdObjective</base>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classObjectiveFunctionTest06.html</anchorfile>
      <anchor>ab0f83d515a2f967e67e33b7c952375b0</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classObjectiveFunctionTest06.html</anchorfile>
      <anchor>a2760839e17af60eb0b48564ca34f47dc</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;g, const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classObjectiveFunctionTest06.html</anchorfile>
      <anchor>aec502ccb3b792ddcda0fdfbccd3bdb51</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;hv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectiveFunctionTest07_1</name>
    <filename>classObjectiveFunctionTest07__1.html</filename>
    <templarg></templarg>
    <base>ROL::StdObjective</base>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classObjectiveFunctionTest07__1.html</anchorfile>
      <anchor>a8c40f0637b6e88eb675330f6495040a5</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classObjectiveFunctionTest07__1.html</anchorfile>
      <anchor>a068b1b7fa6c7a3e4bc9fa920df2c4941</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;g, const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classObjectiveFunctionTest07__1.html</anchorfile>
      <anchor>a0897913f43e80d1c476eb3691fdcf73a</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;hv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectiveFunctionTest07_2</name>
    <filename>classObjectiveFunctionTest07__2.html</filename>
    <templarg></templarg>
    <base>ROL::StdObjective</base>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classObjectiveFunctionTest07__2.html</anchorfile>
      <anchor>a80aa608164ac2a6958b7c7de46a1c5cc</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classObjectiveFunctionTest07__2.html</anchorfile>
      <anchor>ac591f3b1cc82facba7bd71b2a1a84d50</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;g, const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classObjectiveFunctionTest07__2.html</anchorfile>
      <anchor>aa77ed7212b25e934164ba2bdeb84680d</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;hv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectiveFunctionTest07_scalarize</name>
    <filename>classObjectiveFunctionTest07__scalarize.html</filename>
    <templarg></templarg>
    <base>ROL::StdObjective</base>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classObjectiveFunctionTest07__scalarize.html</anchorfile>
      <anchor>a6488db8302bf4385b68026f49a7e945c</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classObjectiveFunctionTest07__scalarize.html</anchorfile>
      <anchor>af675cb7fb4c1b66ce02a47f88683381c</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;g, const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classObjectiveFunctionTest07__scalarize.html</anchorfile>
      <anchor>a6404f3703ac4184e98638abfaca9f699</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;hv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectiveFunctionTest08_1</name>
    <filename>classObjectiveFunctionTest08__1.html</filename>
    <templarg></templarg>
    <base>ROL::Objective_SimOpt</base>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classObjectiveFunctionTest08__1.html</anchorfile>
      <anchor>a84211a4cc2d2b639622155737e234a38</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_1</name>
      <anchorfile>classObjectiveFunctionTest08__1.html</anchorfile>
      <anchor>ac4dbeb56398a086c58c66b867b17efd6</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_2</name>
      <anchorfile>classObjectiveFunctionTest08__1.html</anchorfile>
      <anchor>ac5a68067f7b0de3cef635cd26baadcac</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_11</name>
      <anchorfile>classObjectiveFunctionTest08__1.html</anchorfile>
      <anchor>ab226676b279f4c7e8ec81b32ee104937</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_12</name>
      <anchorfile>classObjectiveFunctionTest08__1.html</anchorfile>
      <anchor>a25e067d02a0ec03010170693e0f0cb11</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_21</name>
      <anchorfile>classObjectiveFunctionTest08__1.html</anchorfile>
      <anchor>a080dd6698955e9bfd51bf05b07f5b3d9</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_22</name>
      <anchorfile>classObjectiveFunctionTest08__1.html</anchorfile>
      <anchor>ac6b066bb313f1cdddddbc0cb8fcabf3d</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectiveFunctionTest08_2</name>
    <filename>classObjectiveFunctionTest08__2.html</filename>
    <templarg></templarg>
    <base>ROL::Objective_SimOpt</base>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classObjectiveFunctionTest08__2.html</anchorfile>
      <anchor>ab808ef7df47933ae74280141e052e8d8</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_1</name>
      <anchorfile>classObjectiveFunctionTest08__2.html</anchorfile>
      <anchor>ac0350b4b5d7179b471f1f18d2a780e03</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_2</name>
      <anchorfile>classObjectiveFunctionTest08__2.html</anchorfile>
      <anchor>a44b10eef5e9c15892fdab6082950d2bd</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;g, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_11</name>
      <anchorfile>classObjectiveFunctionTest08__2.html</anchorfile>
      <anchor>ad1ee7266191415e415c70114db636a9a</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_12</name>
      <anchorfile>classObjectiveFunctionTest08__2.html</anchorfile>
      <anchor>a04429cc1764f5b1b8b1bc2e6d3c694c2</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_21</name>
      <anchorfile>classObjectiveFunctionTest08__2.html</anchorfile>
      <anchor>a6e1b7c282bb0d6694502be13d60a5c30</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_22</name>
      <anchorfile>classObjectiveFunctionTest08__2.html</anchorfile>
      <anchor>a3e30e249aa168ed0756856c930e3dc0f</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;hv, const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;u, const ROL::Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectiveFunctionTest08_scalarize</name>
    <filename>classObjectiveFunctionTest08__scalarize.html</filename>
    <templarg></templarg>
    <base>ROL::StdObjective</base>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classObjectiveFunctionTest08__scalarize.html</anchorfile>
      <anchor>a9b7cfa1180ca52b241e400c4791d2136</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classObjectiveFunctionTest08__scalarize.html</anchorfile>
      <anchor>a2f69502aa0e4bab1ac7303fa109a4ca0</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;g, const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classObjectiveFunctionTest08__scalarize.html</anchorfile>
      <anchor>afaf76d82d067b0ce73cdcf09d446f0d5</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;hv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OptDualStdVector</name>
    <filename>classOptDualStdVector.html</filename>
    <templarg>Real</templarg>
    <templarg>Element</templarg>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <member kind="function">
      <type></type>
      <name>OptDualStdVector</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>abef42cc3f443a6fab3e9e59c389592a0</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt; &amp;std_vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a76083c658edc16ade4a7035ca51031d3</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a4dd594fef86f4659ab681f07496ceb56</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a367c3df665d151cf08259b149ba96160</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a8b50e8c27f282c0d4a84fcfc2e4355e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>af2986d693c4717653dc447013ef33123</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a8ebbc00f16920c15c2a718a2068023f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a09bbab14e7830207df4f2f559f65fd9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a1ed76768d7c53098af620f7d6932309d</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>ad0b7f6d9469a801489398282c23425b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a1b9e8081073b3a5a2b74afb1f12ede8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptDualStdVector</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>abef42cc3f443a6fab3e9e59c389592a0</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt; &amp;std_vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a76083c658edc16ade4a7035ca51031d3</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a4dd594fef86f4659ab681f07496ceb56</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a367c3df665d151cf08259b149ba96160</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a8b50e8c27f282c0d4a84fcfc2e4355e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>af2986d693c4717653dc447013ef33123</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a8ebbc00f16920c15c2a718a2068023f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a09bbab14e7830207df4f2f559f65fd9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a1ed76768d7c53098af620f7d6932309d</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>ad0b7f6d9469a801489398282c23425b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a1b9e8081073b3a5a2b74afb1f12ede8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptDualStdVector</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a715d368160a1982c4c86bdb07e9c421a</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt; &amp;std_vec, Teuchos::RCP&lt; FiniteDifference&lt; Real &gt; &gt;fd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>ac956ecd012619b610165d45a608acb6d</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a4dd594fef86f4659ab681f07496ceb56</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a3878815e24a712ad5b723782d5681751</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a8b50e8c27f282c0d4a84fcfc2e4355e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a82fd39ebb03a666f76d98ee520c689c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a8ebbc00f16920c15c2a718a2068023f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a09bbab14e7830207df4f2f559f65fd9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a0dbe24c622931ffd4e369e6ea1f2d9f1</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>ad0b7f6d9469a801489398282c23425b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>aeac24bb752e6513b44d677e8342922a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Element &gt;</type>
      <name>vector</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>ada238d4f42166dfa1112934452f4bec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ROL::Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>aab692ab8813f72f9fb10ec9dfb93b7cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a061339a2c687d0e930a9ce6641584f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Element &gt;</type>
      <name>vector</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>ada238d4f42166dfa1112934452f4bec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ROL::Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>aab692ab8813f72f9fb10ec9dfb93b7cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a061339a2c687d0e930a9ce6641584f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Element &gt;</type>
      <name>vector</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>ada238d4f42166dfa1112934452f4bec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a061339a2c687d0e930a9ce6641584f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt;</type>
      <name>std_vec_</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a84efa69c42faac47ac96b9196e643f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; OptStdVector&lt; Real &gt; &gt;</type>
      <name>dual_vec_</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a7d2608d34521ba59c1f8afdc26c322a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; FiniteDifference&lt; Real &gt; &gt;</type>
      <name>fd_</name>
      <anchorfile>classOptDualStdVector.html</anchorfile>
      <anchor>a40f8271b63ca332863015ef576041923</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::OptimizationProblem</name>
    <filename>classROL_1_1OptimizationProblem.html</filename>
    <templarg>Real</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OptimizationProblem</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a377429315e139bffb9bc34b267ecff88</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimizationProblem</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>ae9fd5cdc01a9cbadacdd04970ae2042a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimizationProblem</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a69863441490e0225c81a1b42fc2c4a5e</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;sol, const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;bnd=Teuchos::null, const Teuchos::RCP&lt; Teuchos::ParameterList &gt; &amp;parlist=Teuchos::null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimizationProblem</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a1e71e023ef8bfc990a18a020b304c760</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;sol, const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;con, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;mul, const Teuchos::RCP&lt; Teuchos::ParameterList &gt; &amp;parlist=Teuchos::null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimizationProblem</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>ac36354f4c059975e8f73a77f40aafd5d</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;sol, const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;bnd, const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;con, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;mul, const Teuchos::RCP&lt; Teuchos::ParameterList &gt; &amp;parlist=Teuchos::null)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimizationProblem</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a8b4e5425edbad53d102da1d7fb27651b</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;sol, const Teuchos::RCP&lt; InequalityConstraint&lt; Real &gt; &gt; &amp;incon, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;inmul, const Teuchos::RCP&lt; Teuchos::ParameterList &gt; &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimizationProblem</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>ada3efeebf23c852497d439774be52716</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;sol, const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;bnd, const Teuchos::RCP&lt; InequalityConstraint&lt; Real &gt; &gt; &amp;incon, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;inmul, const Teuchos::RCP&lt; Teuchos::ParameterList &gt; &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimizationProblem</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a04a4e250530627eec4810be7101764ac</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;sol, const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;eqcon, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;eqmul, const Teuchos::RCP&lt; InequalityConstraint&lt; Real &gt; &gt; &amp;incon, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;inmul, const Teuchos::RCP&lt; Teuchos::ParameterList &gt; &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimizationProblem</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a3ef0dd7f78a1a76369fc90933522d88c</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;sol, const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;bnd, const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;eqcon, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;eqmul, const Teuchos::RCP&lt; InequalityConstraint&lt; Real &gt; &gt; &amp;incon, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;inmul, const Teuchos::RCP&lt; Teuchos::ParameterList &gt; &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Objective&lt; Real &gt; &gt;</type>
      <name>getObjective</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a2bc8c95b2e23ce2fba3eeba7a771f0a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObjective</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a932351748c67382730b5fc718200193c</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getSolutionVector</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>ae984ef4ec54379200f170562653d656c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSolutionVector</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a54895ea231a21b58c5faaded1fcc177d</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt;</type>
      <name>getBoundConstraint</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>ae7e643ea8c1eeba2a6838ff0a26d3be9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundConstraint</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a7379655cc33172889e7d25ca78344941</anchor>
      <arglist>(const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;bnd)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt;</type>
      <name>getEqualityConstraint</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a8cbba9d6a9142c7d25ac084a05d60924</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEqualityConstraint</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>ae02f5032b82343c6fc05e719027a5020</anchor>
      <arglist>(const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;con)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getMultiplierVector</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a688a2dd9a8e9cf8283605723fcdf81d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMultiplierVector</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a17c6586a70b2768e12fa8b6abfb5d8cd</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;mul)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Teuchos::ParameterList &gt;</type>
      <name>getParameterList</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>acc5924c9590002e3c4fb9ce313393f2d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterList</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>aa480d6737c3f940fa5499b58927516db</anchor>
      <arglist>(const Teuchos::RCP&lt; Teuchos::ParameterList &gt; &amp;parlist)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkObjectiveGradient</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>acaf8e2024455462b1e2440324b5b88ea</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;d, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int numSteps=ROL_NUM_CHECKDERIV_STEPS, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkObjectiveHessVec</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a1fba706645cd344c73e402469130a7a6</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int numSteps=ROL_NUM_CHECKDERIV_STEPS, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OptimizationProblem</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a377429315e139bffb9bc34b267ecff88</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimizationProblem</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a631cbfad9ccf931557e162fcfb0cb039</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;sol, const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;bnd=Teuchos::null, const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;eqcon=Teuchos::null, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;eqmul=Teuchos::null, const Teuchos::RCP&lt; InequalityConstraint&lt; Real &gt; &gt; &amp;incon=Teuchos::null, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;inmul=Teuchos::null, const Teuchos::RCP&lt; Teuchos::ParameterList &gt; &amp;parlist=Teuchos::null)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Objective&lt; Real &gt; &gt;</type>
      <name>getObjective</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a2bc8c95b2e23ce2fba3eeba7a771f0a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObjective</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a932351748c67382730b5fc718200193c</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getSolutionVector</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>ae984ef4ec54379200f170562653d656c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSolutionVector</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a54895ea231a21b58c5faaded1fcc177d</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt;</type>
      <name>getBoundConstraint</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>ae7e643ea8c1eeba2a6838ff0a26d3be9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundConstraint</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a7379655cc33172889e7d25ca78344941</anchor>
      <arglist>(const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;bnd)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt;</type>
      <name>getEqualityConstraint</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a8cbba9d6a9142c7d25ac084a05d60924</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEqualityConstraint</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>ae02f5032b82343c6fc05e719027a5020</anchor>
      <arglist>(const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;con)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getMultiplierVector</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a688a2dd9a8e9cf8283605723fcdf81d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMultiplierVector</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a17c6586a70b2768e12fa8b6abfb5d8cd</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;mul)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Teuchos::ParameterList &gt;</type>
      <name>getParameterList</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>acc5924c9590002e3c4fb9ce313393f2d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterList</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>aa480d6737c3f940fa5499b58927516db</anchor>
      <arglist>(const Teuchos::RCP&lt; Teuchos::ParameterList &gt; &amp;parlist)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkObjectiveGradient</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>acaf8e2024455462b1e2440324b5b88ea</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;d, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int numSteps=ROL_NUM_CHECKDERIV_STEPS, const int order=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkObjectiveHessVec</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a1fba706645cd344c73e402469130a7a6</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int numSteps=ROL_NUM_CHECKDERIV_STEPS, const int order=1)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PartitionedVector&lt; Real &gt;</type>
      <name>PV</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a540b6709d1172eda380b6b565e244fa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PV::size_type</type>
      <name>size_type</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>afda9c0f8c881f1c2f3e3ca53a03dc6ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a3a29a42601ddfb8f92d68613ce26c0e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PartitionedVector&lt; Real &gt;</type>
      <name>PV</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a540b6709d1172eda380b6b565e244fa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PV::size_type</type>
      <name>size_type</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>afda9c0f8c881f1c2f3e3ca53a03dc6ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Objective&lt; Real &gt; &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a49c7f9c8965fbdff3cff95724d188830</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>sol_</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a685e36c63ed24c5945fbc0467cadeb02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt;</type>
      <name>bnd_</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a51a7861e2f1f0b862b8987708e131ed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt;</type>
      <name>con_</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a1237594989fcb1e104ad07f856e963de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; InequalityConstraint&lt; Real &gt; &gt;</type>
      <name>incon_</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a72c0bd5d4ad0c0c851eb387e413d46fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>mul_</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a0cb03ae43454e5ee08f06ee87fd3d6df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Teuchos::ParameterList &gt;</type>
      <name>parlist_</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>acee11be86d88a9ffd1d3cd0a5b5f14da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>hasSlack_</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>ab432646c130725273d728aba55467383</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>OPT</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a6884da87b3afd664d95a5f67212ff8cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>SLACK</name>
      <anchorfile>classROL_1_1OptimizationProblem.html</anchorfile>
      <anchor>a1dd6148041e173e1f36b7ab16bf5741a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OptStdVector</name>
    <filename>classOptStdVector.html</filename>
    <templarg>Real</templarg>
    <templarg>Element</templarg>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <base>ROL::Vector</base>
    <member kind="function">
      <type></type>
      <name>OptStdVector</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a21c7468c41d2c6e3bec5d2790efcdb70</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt; &amp;std_vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a59f0ed7fdfc7350b7acd2c7e35cb7daa</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>ae8332ff9d2e33db454362a976ecb93f1</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a080d59117b27e995d85e433e13a999e8</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a34c7569649877bfc48dbe7a2a535afa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>ad7f0979e5990ab1901914af5073aa627</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a415900241d07ce64888c3c33437e08e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>abff5ceff2e9da95b2f4fa1f75d279802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a08c97a9675d6d70bf691143361f86437</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a0664e63b7a1ee9dd5ad78fb0d0f91d6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>ad6f221d50a1dab8b0be2918c06e6c633</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptStdVector</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a21c7468c41d2c6e3bec5d2790efcdb70</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt; &amp;std_vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a59f0ed7fdfc7350b7acd2c7e35cb7daa</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>ae8332ff9d2e33db454362a976ecb93f1</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a080d59117b27e995d85e433e13a999e8</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a34c7569649877bfc48dbe7a2a535afa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>ad7f0979e5990ab1901914af5073aa627</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a415900241d07ce64888c3c33437e08e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>abff5ceff2e9da95b2f4fa1f75d279802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a08c97a9675d6d70bf691143361f86437</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a0664e63b7a1ee9dd5ad78fb0d0f91d6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>ad6f221d50a1dab8b0be2918c06e6c633</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptStdVector</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>afcce6e447ef1701da6f4027c265357f7</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt; &amp;std_vec, Teuchos::RCP&lt; FiniteDifference&lt; Real &gt; &gt;fd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a11a3890b9b653d2282df8c798596e811</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>ae8332ff9d2e33db454362a976ecb93f1</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a546ddf07d28dc92913f8e4e7ea94909d</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a34c7569649877bfc48dbe7a2a535afa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a55613a88c2931e5fbdbf34eb534245c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>ad6f863c24bc298dfb6e8924bf7a41bb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>ad6100d761b01e20525671eb95b60d03e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a2196da562fc4241068f413f5dd3aa2d1</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a0664e63b7a1ee9dd5ad78fb0d0f91d6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a797f4c9326b13b41cd22fd653ff887f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Element &gt;</type>
      <name>vector</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>aeb2bcead20e77af48c136728819c6ee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ROL::Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>ae21dbe966abce5db73ed16587d1fc4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a70d612720ad3d175b30e761f9ee52c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Element &gt;</type>
      <name>vector</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>aeb2bcead20e77af48c136728819c6ee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ROL::Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>ae21dbe966abce5db73ed16587d1fc4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a70d612720ad3d175b30e761f9ee52c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Element &gt;</type>
      <name>vector</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>aeb2bcead20e77af48c136728819c6ee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a70d612720ad3d175b30e761f9ee52c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt;</type>
      <name>std_vec_</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>af0ff9ac7c2061c637c02ea35ff661e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; OptDualStdVector&lt; Real &gt; &gt;</type>
      <name>dual_vec_</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a897f64b98a4f49049c107a4109a53a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; FiniteDifference&lt; Real &gt; &gt;</type>
      <name>fd_</name>
      <anchorfile>classOptStdVector.html</anchorfile>
      <anchor>a283d9ac4da58b643c5c214a4f4879332</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Parabolic</name>
    <filename>classROL_1_1Parabolic.html</filename>
    <templarg></templarg>
    <base>ROL::Distribution</base>
    <member kind="function">
      <type></type>
      <name>Parabolic</name>
      <anchorfile>classROL_1_1Parabolic.html</anchorfile>
      <anchor>a845bfc0bec806e101eae764ffb5d97ed</anchor>
      <arglist>(const Real a=0., const Real b=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parabolic</name>
      <anchorfile>classROL_1_1Parabolic.html</anchorfile>
      <anchor>a1dce12bded0053adfcb6f843a5b9f653</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluatePDF</name>
      <anchorfile>classROL_1_1Parabolic.html</anchorfile>
      <anchor>a02d9a01de093d6bad1c790cbb6cffb99</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluateCDF</name>
      <anchorfile>classROL_1_1Parabolic.html</anchorfile>
      <anchor>a45d5305b9dd063e8f00f152bf3280b66</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>integrateCDF</name>
      <anchorfile>classROL_1_1Parabolic.html</anchorfile>
      <anchor>a5ef33ef0e9b68c4fe164077ad470ebaf</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>invertCDF</name>
      <anchorfile>classROL_1_1Parabolic.html</anchorfile>
      <anchor>af596d9a98067cdbb24eda8e0c4949722</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>moment</name>
      <anchorfile>classROL_1_1Parabolic.html</anchorfile>
      <anchor>a69ace118e82aa2bd7bf9a44f7945003c</anchor>
      <arglist>(const size_t m) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>lowerBound</name>
      <anchorfile>classROL_1_1Parabolic.html</anchorfile>
      <anchor>a110687b76968de498befdeb9c3f3b592</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>upperBound</name>
      <anchorfile>classROL_1_1Parabolic.html</anchorfile>
      <anchor>a7415a13a8b11d1c12dbed50a408056b8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1Parabolic.html</anchorfile>
      <anchor>a3be71f38212d867df0d55cf906cd80f8</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>a_</name>
      <anchorfile>classROL_1_1Parabolic.html</anchorfile>
      <anchor>a986acd56fa489f4490e7b2025e971627</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>b_</name>
      <anchorfile>classROL_1_1Parabolic.html</anchorfile>
      <anchor>a7b3f1d1982a3eed006f10eb7c397bdb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Parametrize</name>
    <filename>classROL_1_1Parametrize.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Parametrize</name>
      <anchorfile>classROL_1_1Parametrize.html</anchorfile>
      <anchor>a80d2e097491ae329907313098f49e7a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchorfile>classROL_1_1Parametrize.html</anchorfile>
      <anchor>a9d5c768c614490e2065c88c7371ce50a</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;param)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; Real &gt;</type>
      <name>getParameter</name>
      <anchorfile>classROL_1_1Parametrize.html</anchorfile>
      <anchor>a8751441a1c13aacb898246e9fe10765e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>param_</name>
      <anchorfile>classROL_1_1Parametrize.html</anchorfile>
      <anchor>ab04933d6e1d57789cfef1267da5d7923</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ParametrizedCompositeObjective</name>
    <filename>classROL_1_1ParametrizedCompositeObjective.html</filename>
    <templarg></templarg>
    <base>ROL::ParametrizedObjective</base>
    <member kind="function">
      <type></type>
      <name>ParametrizedCompositeObjective</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>ae6a18a06f28ee61195807875b52fee12</anchor>
      <arglist>(const std::vector&lt; Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &gt; &amp;obj_vec, const Teuchos::RCP&lt; ParametrizedStdObjective&lt; Real &gt; &gt; &amp;std_obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameter</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>a5a0c45ac93a73c88f4a2d48a6c38b494</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>a26973b1ece7205168f450d3efd3c2001</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>a7017e0ae8ebfaf44ff72fa4becf045f3</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>a48402dc4a9a7238d738992030d904778</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>aaf9946eb36c0dcbfb4a0eb8a8cea8d00</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>aaaa1635efe5b0dd3c5513f086cea14d0</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>a72435ee41cc3459bf894b32a0b8cdb98</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeGradient</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>a3aaa968f4cdc8c712ca5ab5fce0354b7</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeHessVec</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>acef8bfcb375daa39c4914fe00baa0e2b</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::vector&lt; Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &gt;</type>
      <name>obj_vec_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>a2bd6e506c2c328a9da75cb192bc80e6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; ParametrizedStdObjective&lt; Real &gt; &gt;</type>
      <name>std_obj_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>aaee7419e8a134e8bd1f507c664679a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>obj_value_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>aa83dc8af038f4d0a6baafb7cbfe241a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>obj_grad_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>a9d9cf134b0296f91b11f08db5f23359f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>obj_gv_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>a7622405790da95b5ba02ffb1aba7ceb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>obj_hess_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>acaa424e2ca033ec4c34fe009fa1e3bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StdVector&lt; Real &gt; &gt;</type>
      <name>obj_value_vec_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>a2c79c8f4a5ae366acd9449884aa35174</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StdVector&lt; Real &gt; &gt;</type>
      <name>obj_grad_vec_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>a4eb184a729f1278f0780c6f2e6ff2481</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StdVector&lt; Real &gt; &gt;</type>
      <name>obj_gv_vec_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>a51b2c72aec1bc40b10a900c9684c3db1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StdVector&lt; Real &gt; &gt;</type>
      <name>obj_hess_vec_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>abae45e3a5aaf361e55c508693d5bb7bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>vec_grad_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>ae3469823538bb7564507f512d0aa86fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>vec_hess_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>a43c55519b77e36fd7a652ea02ca246cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isInitialized_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>aab1c97e69b5f21f6b5f37cf972f0956a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isValueComputed_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>a9a635a44df38abb5560129b33fcbe90f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isGradientComputed_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective.html</anchorfile>
      <anchor>a3ff03d8d2e2c2585c86dd32b320c9cd6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ParametrizedCompositeObjective_SimOpt</name>
    <filename>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</filename>
    <templarg></templarg>
    <base>ROL::ParametrizedObjective_SimOpt</base>
    <member kind="function">
      <type></type>
      <name>ParametrizedCompositeObjective_SimOpt</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>afcf7c32589da5228bd272c8e83666277</anchor>
      <arglist>(const std::vector&lt; Teuchos::RCP&lt; ParametrizedObjective_SimOpt&lt; Real &gt; &gt; &gt; &amp;obj_vec, const Teuchos::RCP&lt; ParametrizedStdObjective&lt; Real &gt; &gt; &amp;std_obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameter</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a29fe7d012a898551384857eb9d49c026</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a204d2f3811e363d0b50da6984e736874</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>abaece43b9cd55c02d37d0f7d614c9562</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_1</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>ad56bc67319d990cd58b2537da24fac96</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient_2</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a550326ed4954f2cd1493e6d0aaa0b96f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_11</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a1bd4589f370dc3f2c2d3a4635ced58a1</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_12</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a7f7f8895913dc4773c57618b5b591c89</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_21</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a84ae37e0762bd008011df693642742cd</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec_22</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a19c58c552c3ffd403e481d6296747b03</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>ab165f9ad8786781ff82fcb47b22e07c2</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a338013a51ccaea6179a966de841de179</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeGradient</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a8d320a20f2435715fd34b6c7d8baf23e</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeGradient1</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a30be9f4790ee5c3fb62bf3202ae94df7</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeGradient2</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>abe2167eb72bb831b89403bd444cd63cf</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeHessVec11</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a56b85a5f67296be7e6490fafdfbe627a</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeHessVec12</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a1a3c01b57f3e239bc72f574619372f28</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeHessVec21</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>af6f8fc1cf977e3734f3bb87e03557555</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeHessVec22</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a2259c3cd89a9409e0ecd35961cbe2aa9</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::vector&lt; Teuchos::RCP&lt; ParametrizedObjective_SimOpt&lt; Real &gt; &gt; &gt;</type>
      <name>obj_vec_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a5413068767b634dbb4f68e51dbafe8db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; ParametrizedStdObjective&lt; Real &gt; &gt;</type>
      <name>std_obj_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a60a54757c445fc54ed3912bf39b8ef35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>obj_value_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a6e57ab4377bedc8544c8c0d795a741d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>obj_grad_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>ae96771452426551459ab1bb61624b5f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>obj_gv_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a02a3a20e0f1d0f540cc2f46c72123479</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>obj_hess_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>acb49e40a22b0b4a08766e3579a76d7a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StdVector&lt; Real &gt; &gt;</type>
      <name>obj_value_vec_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a5c9beea6c0ab8477eeee7d93381652ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StdVector&lt; Real &gt; &gt;</type>
      <name>obj_grad_vec_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>ac2e549962d3f053aa9b0babf8aa043f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StdVector&lt; Real &gt; &gt;</type>
      <name>obj_gv_vec_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>aac5808394210eb6be03fe0d8160a68d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StdVector&lt; Real &gt; &gt;</type>
      <name>obj_hess_vec_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a0baf0808dca0d4a1dbdc7e27bf7e9d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>vec_grad1_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a3a260911432352dffbf0aa8acc77d549</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>vec_grad2_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a73d0a192bbe3974983aacc5bc5934b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>vec_hess1_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a94258287c5349d00cbd84e3d9d698874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>vec_hess2_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a4b87e897d54b4d4cdf354ade5a1cd26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isInitialized_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>ab6333eb406f865fb71e38f848461e94f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isValueComputed_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>af33b778252e4f0c6e42ed5e59018501c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isGradientComputed_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>ad90c81d05c72a08ee75f43218cfce2ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isGradient1Computed_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a22524863e9f4ad4a5dd290992c0a0b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isGradient2Computed_</name>
      <anchorfile>classROL_1_1ParametrizedCompositeObjective__SimOpt.html</anchorfile>
      <anchor>a28342ced1ae1a27167789b335a1712bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ParametrizedEqualityConstraint</name>
    <filename>classROL_1_1ParametrizedEqualityConstraint.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">ROL::EqualityConstraint</base>
    <base>ROL::Parametrize</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParametrizedEqualityConstraint</name>
      <anchorfile>classROL_1_1ParametrizedEqualityConstraint.html</anchorfile>
      <anchor>aaf28e417aba7eea2721ef93795f01b38</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ParametrizedEqualityConstraint_SimOpt</name>
    <filename>classROL_1_1ParametrizedEqualityConstraint__SimOpt.html</filename>
    <templarg></templarg>
    <base>ROL::ParametrizedEqualityConstraint</base>
    <base>ROL::EqualityConstraint_SimOpt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParametrizedEqualityConstraint_SimOpt</name>
      <anchorfile>classROL_1_1ParametrizedEqualityConstraint__SimOpt.html</anchorfile>
      <anchor>a11d0633ffdb4d5b485b58e1115778f1a</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ParametrizedObjective</name>
    <filename>classROL_1_1ParametrizedObjective.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">ROL::Objective</base>
    <base>ROL::Parametrize</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParametrizedObjective</name>
      <anchorfile>classROL_1_1ParametrizedObjective.html</anchorfile>
      <anchor>af96d926995b80bdebb8d5d3a7399a9ad</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ParametrizedObjective_SimOpt</name>
    <filename>classROL_1_1ParametrizedObjective__SimOpt.html</filename>
    <templarg></templarg>
    <base>ROL::ParametrizedObjective</base>
    <base>ROL::Objective_SimOpt</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParametrizedObjective_SimOpt</name>
      <anchorfile>classROL_1_1ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>aaae7f37ff046371fb91e3760489ff187</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ParametrizedStdObjective</name>
    <filename>classROL_1_1ParametrizedStdObjective.html</filename>
    <templarg></templarg>
    <base>ROL::ParametrizedObjective</base>
    <base>ROL::StdObjective</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParametrizedStdObjective</name>
      <anchorfile>classROL_1_1ParametrizedStdObjective.html</anchorfile>
      <anchor>a02859c24447c563ecb8c19af0e700823</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::PartitionedVector</name>
    <filename>classROL_1_1PartitionedVector.html</filename>
    <templarg></templarg>
    <base>ROL::Vector</base>
    <member kind="typedef">
      <type>std::vector&lt; PV &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>a05a8d14c088bcd1ce86daf2135ed884d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartitionedVector</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>a63e23e8643df6e9f03aef543f94a4d1d</anchor>
      <arglist>(const std::vector&lt; RCPV &gt; &amp;vecs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>abe6ceba1bccf515a84fd3200fb589923</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>a717fb1b93439d62f6e160e261f34b1d1</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>a97fad25fc95ddac59ff3d26b7980d21f</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>ab653892a53245a3a8da6d3f7da1e8690</anchor>
      <arglist>(const Real alpha, const V &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>aceda5762d77faf5508d4787d457bea3a</anchor>
      <arglist>(const V &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>a2a2656cabb4d8705edeb23642d03512d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RCPV</type>
      <name>clone</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>a3b3421718d241163eaeb07a7d69bd81f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>dual</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>a86098f194f469dcbc0203085b291feb3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>RCPV</type>
      <name>basis</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>a8e16fbb128da006d3eb16d3bd4e53e0f</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>a29ff9c5d69a74fe71a3a2735d8b0264c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>aeb1a19de1b93f414faeac5ec6348f8d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyUnary</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>a3e44e82d1f42e623670c364a072f83ff</anchor>
      <arglist>(const Elementwise::UnaryFunction&lt; Real &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBinary</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>a61f2a54fa52e71dfd89f52459e8d9275</anchor>
      <arglist>(const Elementwise::BinaryFunction&lt; Real &gt; &amp;f, const V &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>reduce</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>a5571875d0fbbc6f7ac06ef7c25068266</anchor>
      <arglist>(const Elementwise::ReductionOp&lt; Real &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>get</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>a9eb8971799fc04e0eb8687c30f3ec0f3</anchor>
      <arglist>(size_type i) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>get</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>a72a1950daa60be1e399e6356c9b67a11</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>a54dddd9c5176786d8af1da9e333972a6</anchor>
      <arglist>(size_type i, const V &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>a2623211d3c6ea06b16f405a8af1d0443</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>numVectors</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>a65c4c570bd902257b390cde782d12652</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>ac2551c98882c1110f650a1b6f555409a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>RCPV</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>a4ead9af48b49754938d6fffec787b981</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PartitionedVector&lt; Real &gt;</type>
      <name>PV</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>ac987cb5bee8b61175e1d29d3a7436fbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::vector&lt; RCPV &gt;</type>
      <name>vecs_</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>af70187ec09d6129a656acb60e4a1f75e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RCPV &gt;</type>
      <name>dual_vecs_</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>adbf8c000bdc0dd37f68f25c8d6bdaaa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PV &gt;</type>
      <name>dual_pvec_</name>
      <anchorfile>classROL_1_1PartitionedVector.html</anchorfile>
      <anchor>a132c1c8e33167643b13965f1aa4f56ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::PathBasedTargetLevel</name>
    <filename>classROL_1_1PathBasedTargetLevel.html</filename>
    <templarg></templarg>
    <base>ROL::LineSearch</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PathBasedTargetLevel</name>
      <anchorfile>classROL_1_1PathBasedTargetLevel.html</anchorfile>
      <anchor>aedb7b908d0b4abe015e6a7d1218c4bf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathBasedTargetLevel</name>
      <anchorfile>classROL_1_1PathBasedTargetLevel.html</anchorfile>
      <anchor>aec1d4f6f294c15e8ec640ce15d60979a</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1PathBasedTargetLevel.html</anchorfile>
      <anchor>a48e5a6514711277f627c1c7e719d3666</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classROL_1_1PathBasedTargetLevel.html</anchorfile>
      <anchor>a2aaf83016c0117863d1b08ae078b7923</anchor>
      <arglist>(Real &amp;alpha, Real &amp;fval, int &amp;ls_neval, int &amp;ls_ngrad, const Real &amp;gs, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xnew_</name>
      <anchorfile>classROL_1_1PathBasedTargetLevel.html</anchorfile>
      <anchor>a0364961d18e0827a151fce7cb260cd6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>min_value_</name>
      <anchorfile>classROL_1_1PathBasedTargetLevel.html</anchorfile>
      <anchor>aba5d8b806ccc483aa0c222f3045db32f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>rec_value_</name>
      <anchorfile>classROL_1_1PathBasedTargetLevel.html</anchorfile>
      <anchor>a4a6d4c29f5af9604a2490d654c96d78b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>target_</name>
      <anchorfile>classROL_1_1PathBasedTargetLevel.html</anchorfile>
      <anchor>a6adc4e27cee61b109d02dd677e4b41a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>delta_</name>
      <anchorfile>classROL_1_1PathBasedTargetLevel.html</anchorfile>
      <anchor>ac3a39f7e30639e445c025e9e71d85f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>sigma_</name>
      <anchorfile>classROL_1_1PathBasedTargetLevel.html</anchorfile>
      <anchor>a35a1db69a519ea50ee168c933ddbadc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>bound_</name>
      <anchorfile>classROL_1_1PathBasedTargetLevel.html</anchorfile>
      <anchor>aa54380ff2318ee3df899c510497e63c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::InteriorPoint::PenalizedObjective</name>
    <filename>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>PenalizedObjective</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a4d622a63f91cf234f38c669fcc720e4f</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;slack_barrier, const Vector&lt; Real &gt; &amp;x, Real mu)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PenalizedObjective</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>af666bde7b6b3f5d47307b48dd7bf6a45</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;slack_barrier, const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;bc_barrier, const Vector&lt; Real &gt; &amp;x, Real mu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatePenalty</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a313b4e238a7a92975fa2d91dec7b0f40</anchor>
      <arglist>(Real mu)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberFunctionEvaluations</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>acd79d0f944e7a740cf440debf51aec7a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberGradientEvaluations</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>ab600e7d1aca2fa956f3caac0c4dfde8b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a03b4be1dfeab43384a3f2693daefd5b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a4826002f97de7bece5aca141ed56ace4</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>ad07f8c025696fe1f27faf761616c503e</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getObjectiveValue</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a6afb888da9ae8cbb3bc1fd6c68510a41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a34356f3242a7e3c6ce9b1ec87477b83c</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getObjectiveGradient</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a7eaa5c637f0a95f818abb9736336e03c</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getGradientNorm</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a047b3ffe2b0215304182388ea4994a58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a252820d93b4af4332be43d1eaa99f37a</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a6899ef61edc11d8f153e6ea5eb2a157c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PartitionedVector&lt; Real &gt;</type>
      <name>PV</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a142fa27d76b12482d93f5b55479460aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PV::size_type</type>
      <name>size_type</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a105a65c43532a2680f9f53ac98fb47ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Objective&lt; Real &gt; &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a5551b5dd82bf7a240f775f62dd258edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Objective&lt; Real &gt; &gt;</type>
      <name>slack_barrier_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a8f462f063b9170bfc79cd2549a978247</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Objective&lt; Real &gt; &gt;</type>
      <name>bc_barrier_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>aefa0cf94f3587199ef5214ce6aa5e1da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PV &gt;</type>
      <name>x_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a68d3b63928266f79de39e4a0c97cef17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PV &gt;</type>
      <name>g_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a67cf8b5d168be8fa149ac39799c3b5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>scratch_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a5feafa71638adf9b9e09ccd1983f1b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>mu_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a223b8d3e87b38af23084ba0961099178</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nfval_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>ae617f5460bcd7f1b31e93883069a9b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ngval_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a5d8e54bb57c82e3cc85d6364815e2fb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>fval_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a69bdc87103fef04139a3cd66703cd5cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>gnorm_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>ae76fc4f7c086de9c3bea19368e7215cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>hasBoundConstraint_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a73c5a67c37549ec09127fce858dc1a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>OPT</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>a62ed4b74188017848760075600714d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>SLACK</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PenalizedObjective.html</anchorfile>
      <anchor>ab961b2182be629423fdb6b6e35adbe78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::PenalizedObjective</name>
    <filename>classROL_1_1PenalizedObjective.html</filename>
  </compound>
  <compound kind="class">
    <name>ROL::ScalarMinimizationLineSearch::Phi</name>
    <filename>classROL_1_1ScalarMinimizationLineSearch_1_1Phi.html</filename>
    <member kind="function">
      <type></type>
      <name>Phi</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1Phi.html</anchorfile>
      <anchor>a7fee2002f481ff84cea7150092caad18</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;xnew, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;g, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;x, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;s, const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1Phi.html</anchorfile>
      <anchor>aba82370f67bb404258570efa21274dbb</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>deriv</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1Phi.html</anchorfile>
      <anchor>aacaafe859e52dddc72c45b4143b5334c</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateIterate</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1Phi.html</anchorfile>
      <anchor>a1b96acbe38be9afd0dc237a37e9e8cf9</anchor>
      <arglist>(Real alpha)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xnew_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1Phi.html</anchorfile>
      <anchor>adc22a0b36e16e32be66702030173ce3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>g_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1Phi.html</anchorfile>
      <anchor>a34198b88a3e07fd85baa8c2c37169eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>x_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1Phi.html</anchorfile>
      <anchor>a853fc8dca320f6c0505f35d5659f8c05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>s_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1Phi.html</anchorfile>
      <anchor>a840abf72cb0669a4467a562c987c7dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1Phi.html</anchorfile>
      <anchor>abe6137dbd5d0779cc087751f9ca8f63a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt;</type>
      <name>con_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1Phi.html</anchorfile>
      <anchor>a5bc4a69f82d3d086bfe6aff0d9a93d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>ftol_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch_1_1Phi.html</anchorfile>
      <anchor>ae29802afa590aa14c75c7351fe3fbbb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::PlusFunction</name>
    <filename>classROL_1_1PlusFunction.html</filename>
    <templarg></templarg>
    <base>ROL::PositiveFunction</base>
    <member kind="function">
      <type></type>
      <name>PlusFunction</name>
      <anchorfile>classROL_1_1PlusFunction.html</anchorfile>
      <anchor>a8c17d92bf35c72bbf4d04a0af602b0f1</anchor>
      <arglist>(Teuchos::RCP&lt; Distribution&lt; Real &gt; &gt; &amp;dist, Real param=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlusFunction</name>
      <anchorfile>classROL_1_1PlusFunction.html</anchorfile>
      <anchor>afa0132f834965b3f436c9b4882abfd7e</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluate</name>
      <anchorfile>classROL_1_1PlusFunction.html</anchorfile>
      <anchor>a3b8ef13527f1ef41dcb3b64add621765</anchor>
      <arglist>(Real input, int deriv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1PlusFunction.html</anchorfile>
      <anchor>a885f2df83eb8d05294810f31e8580c3b</anchor>
      <arglist>(Real x)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Distribution&lt; Real &gt; &gt;</type>
      <name>dist_</name>
      <anchorfile>classROL_1_1PlusFunction.html</anchorfile>
      <anchor>a9e1b90d7d4053842d9136737247e7520</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>param_</name>
      <anchorfile>classROL_1_1PlusFunction.html</anchorfile>
      <anchor>a80fce97cb243fc66d47e6b4c8102f91d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::PointwiseCDFObjective</name>
    <filename>classROL_1_1PointwiseCDFObjective.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>PointwiseCDFObjective</name>
      <anchorfile>classROL_1_1PointwiseCDFObjective.html</anchorfile>
      <anchor>acf45a816aa056f6a1994a42b55f8ff80</anchor>
      <arglist>(const std::vector&lt; Teuchos::RCP&lt; Distribution&lt; Real &gt; &gt; &gt; &amp;dist, Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman, const Real scale=1.e-2)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1PointwiseCDFObjective.html</anchorfile>
      <anchor>ac083f4b03680d35ce407d3a38cab31de</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1PointwiseCDFObjective.html</anchorfile>
      <anchor>aa56d8dbafb42ff0db3b44fdbbfcd8d2f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>valueCDF</name>
      <anchorfile>classROL_1_1PointwiseCDFObjective.html</anchorfile>
      <anchor>a4286b187e2dbd48d64303c246273a059</anchor>
      <arglist>(const int dim, const Real loc, const SROMVector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>gradientCDF</name>
      <anchorfile>classROL_1_1PointwiseCDFObjective.html</anchorfile>
      <anchor>a8f13a92a818a8cadffa0dce3f1084c8c</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;gradx, std::vector&lt; Real &gt; &amp;gradp, const int dim, const Real loc, const SROMVector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>hessVecCDF</name>
      <anchorfile>classROL_1_1PointwiseCDFObjective.html</anchorfile>
      <anchor>a2355ec206f6a6d42d568385d0cddeb5d</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;hvx, const int dim, const Real loc, const SROMVector&lt; Real &gt; &amp;x, const SROMVector&lt; Real &gt; &amp;v) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Distribution&lt; Real &gt; &gt; &gt;</type>
      <name>dist_</name>
      <anchorfile>classROL_1_1PointwiseCDFObjective.html</anchorfile>
      <anchor>a5ee677f0ca029243aff9cee38b5fb4c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt;</type>
      <name>bman_</name>
      <anchorfile>classROL_1_1PointwiseCDFObjective.html</anchorfile>
      <anchor>aab5f7b802d5a87411d0bcfec54f18c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>scale_</name>
      <anchorfile>classROL_1_1PointwiseCDFObjective.html</anchorfile>
      <anchor>a61f8878a2fb6192efe209c83ed0a2291</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>sqrt2_</name>
      <anchorfile>classROL_1_1PointwiseCDFObjective.html</anchorfile>
      <anchor>aae9eb65420841b3d9a65f515b3745091</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>sqrtpi_</name>
      <anchorfile>classROL_1_1PointwiseCDFObjective.html</anchorfile>
      <anchor>a9ef1c30a45030d2d0adfaa7324032255</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::PositiveFunction</name>
    <filename>classROL_1_1PositiveFunction.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PositiveFunction</name>
      <anchorfile>classROL_1_1PositiveFunction.html</anchorfile>
      <anchor>a8a58c491621f5bb66d8eae07ebc42e65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>evaluate</name>
      <anchorfile>classROL_1_1PositiveFunction.html</anchorfile>
      <anchor>a6fc9beb4f6e0d7fe84c45789701636b0</anchor>
      <arglist>(Real input, int deriv)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::NewtonKrylovStep::PrecondNK</name>
    <filename>classROL_1_1NewtonKrylovStep_1_1PrecondNK.html</filename>
    <base>ROL::LinearOperator</base>
    <member kind="function">
      <type></type>
      <name>PrecondNK</name>
      <anchorfile>classROL_1_1NewtonKrylovStep_1_1PrecondNK.html</anchorfile>
      <anchor>a5fbdf4ad8e8d348e77fe50faa15764c9</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classROL_1_1NewtonKrylovStep_1_1PrecondNK.html</anchorfile>
      <anchor>ab129471f4a3aa83140c70d960f3c1dbc</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverse</name>
      <anchorfile>classROL_1_1NewtonKrylovStep_1_1PrecondNK.html</anchorfile>
      <anchor>a76c6e1c3cbf82f6d1083a07d839ba09f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1NewtonKrylovStep_1_1PrecondNK.html</anchorfile>
      <anchor>a09e4f76812f8cbc6f3fdcf08972d9e65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>x_</name>
      <anchorfile>classROL_1_1NewtonKrylovStep_1_1PrecondNK.html</anchorfile>
      <anchor>a85b0de5c5f03187fc8ee189d479b9f5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::PrimalDualActiveSetStep::PrecondPD</name>
    <filename>classROL_1_1PrimalDualActiveSetStep_1_1PrecondPD.html</filename>
    <base>ROL::LinearOperator</base>
    <member kind="function">
      <type></type>
      <name>PrecondPD</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1PrecondPD.html</anchorfile>
      <anchor>a72972ea27346a089ca05aa52feaaa66e</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;bnd, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;xlam, const Real eps=0, const Teuchos::RCP&lt; Secant&lt; Real &gt; &gt; &amp;secant=Teuchos::null, const bool useSecant=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1PrecondPD.html</anchorfile>
      <anchor>a6ea921ce160bbc6f0cd75fe90c8fa4b4</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverse</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1PrecondPD.html</anchorfile>
      <anchor>a754c0325de766473887573b01f1f3931</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1PrecondPD.html</anchorfile>
      <anchor>ac7526527cb73e2f9c2f34090626f42d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt;</type>
      <name>bnd_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1PrecondPD.html</anchorfile>
      <anchor>a3325d50bd121ae0a4fc28423f114c3e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>x_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1PrecondPD.html</anchorfile>
      <anchor>a5227d2158fd70a168970c4438b58e79c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xlam_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1PrecondPD.html</anchorfile>
      <anchor>aa878dfc1febbeb2ad66e7088b49c8b34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>v_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1PrecondPD.html</anchorfile>
      <anchor>adafd1df9e198f422c0d0661d703f7dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>eps_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1PrecondPD.html</anchorfile>
      <anchor>a185d0ada90924de753e236d9cf921c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Secant&lt; Real &gt; &gt;</type>
      <name>secant_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1PrecondPD.html</anchorfile>
      <anchor>a5d5910a46639bcb52bb3e2175a6506e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useSecant_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep_1_1PrecondPD.html</anchorfile>
      <anchor>a3115b0c2a3e36064708d6beef42bf767</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ProjectedNewtonKrylovStep::PrecondPNK</name>
    <filename>classROL_1_1ProjectedNewtonKrylovStep_1_1PrecondPNK.html</filename>
    <base>ROL::LinearOperator</base>
    <member kind="function">
      <type></type>
      <name>PrecondPNK</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1PrecondPNK.html</anchorfile>
      <anchor>a97efc90ac340bc96fb08cd4bbe5debf2</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;bnd, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;g, Real eps=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrecondPNK</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1PrecondPNK.html</anchorfile>
      <anchor>aaf440886c820d75016000eb8107e65d7</anchor>
      <arglist>(const Teuchos::RCP&lt; Secant&lt; Real &gt; &gt; &amp;secant, const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;bnd, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;g, Real eps=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1PrecondPNK.html</anchorfile>
      <anchor>ac6f54f393b939dfc637a07dbfed2eea6</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverse</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1PrecondPNK.html</anchorfile>
      <anchor>aeba97c546595cd5f4a075b4e81bbead2</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1PrecondPNK.html</anchorfile>
      <anchor>a43d5649b450577d93b2f8569de9241fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Secant&lt; Real &gt; &gt;</type>
      <name>secant_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1PrecondPNK.html</anchorfile>
      <anchor>a008298e8f544d93f8a3f3103617a3fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt;</type>
      <name>bnd_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1PrecondPNK.html</anchorfile>
      <anchor>acfddbed640d6f9a861942a778e81ddf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>x_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1PrecondPNK.html</anchorfile>
      <anchor>a5635bd48b2e41f959c3be5ef11e8031e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>g_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1PrecondPNK.html</anchorfile>
      <anchor>a6551ce75571a678b5df701e1e7b2fbe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>v_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1PrecondPNK.html</anchorfile>
      <anchor>aa7fa2076a72bf947f8c3ac566d6d446c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>eps_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1PrecondPNK.html</anchorfile>
      <anchor>ade8a0cf1d746585c9cc71fc853baa6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>useSecant_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep_1_1PrecondPNK.html</anchorfile>
      <anchor>a1b60f377bce33e511834d7bf53822c79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::PrimalAtomVector</name>
    <filename>classROL_1_1PrimalAtomVector.html</filename>
    <templarg></templarg>
    <base>ROL::AtomVector</base>
    <member kind="function">
      <type></type>
      <name>PrimalAtomVector</name>
      <anchorfile>classROL_1_1PrimalAtomVector.html</anchorfile>
      <anchor>ab64ec3078c16f771e8e14ce9a5f1f670</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman, const int numMySamples, const int dimension, const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classROL_1_1PrimalAtomVector.html</anchorfile>
      <anchor>acdc21aa09e933890e5ca9160fc5117a4</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classROL_1_1PrimalAtomVector.html</anchorfile>
      <anchor>a3bbf3446ba2a6162651be688c0980ce9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classROL_1_1PrimalAtomVector.html</anchorfile>
      <anchor>a0ea77dacbf85459cd826cdbb4740106a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1PrimalAtomVector.html</anchorfile>
      <anchor>aa56c09048b19a23816c0e5b6eee7e41f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>scale_</name>
      <anchorfile>classROL_1_1PrimalAtomVector.html</anchorfile>
      <anchor>aeed73f7b96604d71c8144ec813b3b0ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; DualAtomVector&lt; Real &gt; &gt;</type>
      <name>dual_vec_</name>
      <anchorfile>classROL_1_1PrimalAtomVector.html</anchorfile>
      <anchor>a66a657e01f36e5bae54100e272f00a9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isDualInitialized_</name>
      <anchorfile>classROL_1_1PrimalAtomVector.html</anchorfile>
      <anchor>a645d2519f82105bba7a78e8e6b5d50e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::PrimalDualActiveSetStep</name>
    <filename>classROL_1_1PrimalDualActiveSetStep.html</filename>
    <templarg></templarg>
    <base>ROL::Step</base>
    <class kind="class">ROL::PrimalDualActiveSetStep::HessianPD</class>
    <class kind="class">ROL::PrimalDualActiveSetStep::PrecondPD</class>
    <member kind="function">
      <type></type>
      <name>PrimalDualActiveSetStep</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>a9e87cdfb5b24702138c9fae1b9f43297</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>aada70e7a025734be607103a4f8af3cbd</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>ad16abcef13b000e9f8867f269deefdcb</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>a84c152e566e6dcba04d44173583ca7a7</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printHeader</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>abf3c4d58554136923f7fe5f3c6ab190a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printName</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>a66b77aa238c45e3603eede1600b62a7b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>print</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>aacdafc4e87a5ca229da5e06881b97357</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;algo_state, bool print_header=false) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>computeCriticalityMeasure</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>ac5b2eed41ec969263cbf10d60fbc685d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, Real tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Krylov&lt; Real &gt; &gt;</type>
      <name>krylov_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>ab81c3170d555785d47ba95df0e383895</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>iterCR_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>af56dda8ad74aea86317618f2147f2947</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>flagCR_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>ac982ab714bd2da22300d9ae2a5a2b6e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>itol_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>a2c51619180f6c27241b4bd01f7920f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxit_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>affc8d8e0f11e2ddc4737909dc8322cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>iter_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>a421c3c09d1130c93489cab69b817d063</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>flag_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>aff5f6eaa2333a44f31b6ef702fef3de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>stol_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>a4f84b2b2c0f312fced6a8648b58bbb33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>gtol_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>a1e236145b55f28055584a96fa11836a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>scale_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>a0a59f4ed06e4e9df5b73ba74da95d08a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>neps_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>ad9ce535a8dd6905172bd6433a9b717f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>feasible_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>ad2e3f765f0b02b444729d515fc16f8dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>lambda_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>a33b5360dca7413251d2c2b60bde8a328</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xlam_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>ab44583b27a7c7bb256455a0743cfcf6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>x0_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>a710a0eb8385a0b30336e8a3f70c11eb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xbnd_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>ae60f53c8d441d3fd553059c797b3507e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>As_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>a85dea02db0be23457f553b7ed3e2f64b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xtmp_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>a1fe05e6aa3c57701085e246569a16cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>res_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>a45e0360e63be99065e29a9cd6c05eb45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>Ag_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>a17a8be62a779275ce5d89c768a6a5593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>rtmp_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>ab93e4c53ab1140c02cba8bc07d0bccb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gtmp_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>a0ae7b0ed4c6402182a62faa3b81e7375</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ESecant</type>
      <name>esec_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>aa9e43ca4cfb587ec6c887e98fd2b9c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Secant&lt; Real &gt; &gt;</type>
      <name>secant_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>a1f33f7d64445f4a8265789c3c6e1618e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useSecantPrecond_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>a3d0a58d129237df0e7dedd2b5a742209</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useSecantHessVec_</name>
      <anchorfile>classROL_1_1PrimalDualActiveSetStep.html</anchorfile>
      <anchor>a1c6c326e3c65abf9c3db9154bb0fe4af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::InteriorPoint::PrimalDualResidual</name>
    <filename>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</filename>
    <templarg></templarg>
    <base>ROL::EqualityConstraint</base>
    <member kind="function">
      <type></type>
      <name>PrimalDualResidual</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>a1f2794c0db47b35a271a6360491927f0</anchor>
      <arglist>(const Teuchos::RCP&lt; OBJ &gt; &amp;obj, const Teuchos::RCP&lt; CON &gt; &amp;eqcon, const Teuchos::RCP&lt; CON &gt; &amp;incon, const V &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>ab997d744b3a3113db703aea2734da8d6</anchor>
      <arglist>(V &amp;c, const V &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>a78cc1263012f7331573eb9c89926f8a0</anchor>
      <arglist>(V &amp;jv, const V &amp;v, const V &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatePenalty</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>ae640e2b1e6b317964ee9fbb160c87802</anchor>
      <arglist>(Real mu)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>ab092ae26961982ddda295a1fe7da3950</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PartitionedVector&lt; Real &gt;</type>
      <name>PV</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>aa6647ed39e158afa6f9c6d3dab3cbf87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Objective&lt; Real &gt;</type>
      <name>OBJ</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>a392a8dde952da0cefec5cc71846dcb82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>EqualityConstraint&lt; Real &gt;</type>
      <name>CON</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>a15fe5f82d0b06a1558e120d7254ad4af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PV::size_type</type>
      <name>size_type</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>a6964693c3d124603856a961af6184cea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; OBJ &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>a9ab6f65657157d87165a1892aac06494</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; CON &gt;</type>
      <name>eqcon_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>a09454dc01d71e777af28feacc1d0dd7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; CON &gt;</type>
      <name>incon_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>a393dd5bdd9af2e1cec1915d1c6ac71c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>qo_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>aad593c16bc7fb6ca91a35ba30a5200bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>qs_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>a7ec1b91af165a56a944adad00d9ae2be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>qe_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>a3aa78d24deff8a7c617e872475928cec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>qi_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>ae308f148f5660518aa6b3f3691d40e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>mu_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>ab9c3af7c349e779c42ec49e1f4ff318a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; LinearOperator&lt; Real &gt; &gt;</type>
      <name>sym_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>a5d2e5fefe00719d58b0d8b3903ab2735</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>OPT</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>ad0f76e4325f89f161dd34b236282c774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>SLACK</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>acee38d19bc90e3633b7bde70ca3b57a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>EQUAL</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>a9672d7eb158d4073f569b97e264b1a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>INEQ</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualResidual.html</anchorfile>
      <anchor>a47560a784c171f3eab09fdddc9b80d52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::InteriorPoint::PrimalDualSymmetrizer</name>
    <filename>classROL_1_1InteriorPoint_1_1PrimalDualSymmetrizer.html</filename>
    <templarg></templarg>
    <base>ROL::LinearOperator</base>
    <member kind="function">
      <type></type>
      <name>PrimalDualSymmetrizer</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualSymmetrizer.html</anchorfile>
      <anchor>a9af2b1c038391fe380a8f01713ce93dc</anchor>
      <arglist>(const V &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualSymmetrizer.html</anchorfile>
      <anchor>a21ceaed2abdbb92bfac18a80f6e07004</anchor>
      <arglist>(const V &amp;s, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualSymmetrizer.html</anchorfile>
      <anchor>ad9aaf55a172a764f241750eebf4dab28</anchor>
      <arglist>(V &amp;Hv, const V &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverse</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualSymmetrizer.html</anchorfile>
      <anchor>a27d8708fe501e12e5064e40d7f07f6e0</anchor>
      <arglist>(V &amp;Hv, const V &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualSymmetrizer.html</anchorfile>
      <anchor>aadb4f77f6fbf164ac292f8ad6c9b7ba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PartitionedVector&lt; Real &gt;</type>
      <name>PV</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualSymmetrizer.html</anchorfile>
      <anchor>a25df13af833a08f717a96804ed384a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PV::size_type</type>
      <name>size_type</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualSymmetrizer.html</anchorfile>
      <anchor>ad4159fe3236cd7be9221c0f929a11b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>s_</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualSymmetrizer.html</anchorfile>
      <anchor>ac1d81f9c45a4dd239eec4e531d2ab64e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>OPT</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualSymmetrizer.html</anchorfile>
      <anchor>a5f47a60ac3e603c3c4bb9cc356e946ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>SLACK</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualSymmetrizer.html</anchorfile>
      <anchor>ac5cf7a532c64185d4f3859c3544cd581</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>EQUAL</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualSymmetrizer.html</anchorfile>
      <anchor>aec6f8b9e1364ce3d8b26eb7dd4b38152</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_type</type>
      <name>INEQ</name>
      <anchorfile>classROL_1_1InteriorPoint_1_1PrimalDualSymmetrizer.html</anchorfile>
      <anchor>a42a74bccab0850437ce14edec9def4b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::PrimalProbabilityVector</name>
    <filename>classROL_1_1PrimalProbabilityVector.html</filename>
    <templarg></templarg>
    <base>ROL::ProbabilityVector</base>
    <member kind="function">
      <type></type>
      <name>PrimalProbabilityVector</name>
      <anchorfile>classROL_1_1PrimalProbabilityVector.html</anchorfile>
      <anchor>a01b027a6c904d6d84c0c4f9362712bca</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman, const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classROL_1_1PrimalProbabilityVector.html</anchorfile>
      <anchor>a0e25caea6a2d775dfaf0c70b515e23dd</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classROL_1_1PrimalProbabilityVector.html</anchorfile>
      <anchor>ac0b4c1b348a39d1a4db8d0aa0cc9e9cb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classROL_1_1PrimalProbabilityVector.html</anchorfile>
      <anchor>a22a42f686ef635549d688af0120904dd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1PrimalProbabilityVector.html</anchorfile>
      <anchor>a58eff2dfcaff0a8abb9ef8598c8d6923</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>scale_</name>
      <anchorfile>classROL_1_1PrimalProbabilityVector.html</anchorfile>
      <anchor>a842f499d87571490061e9de2514e4728</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; DualProbabilityVector&lt; Real &gt; &gt;</type>
      <name>dual_vec_</name>
      <anchorfile>classROL_1_1PrimalProbabilityVector.html</anchorfile>
      <anchor>a7a64ef87c6e0a1c5dc4312f7ff0a1674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isDualInitialized_</name>
      <anchorfile>classROL_1_1PrimalProbabilityVector.html</anchorfile>
      <anchor>a302582cf78dc95d6f48255ec17bf6902</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::PrimalScaledStdVector</name>
    <filename>classROL_1_1PrimalScaledStdVector.html</filename>
    <templarg>Real</templarg>
    <templarg>Element</templarg>
    <base>StdVector&lt; Real &gt;</base>
    <member kind="function">
      <type></type>
      <name>PrimalScaledStdVector</name>
      <anchorfile>classROL_1_1PrimalScaledStdVector.html</anchorfile>
      <anchor>a4c553344fbdd70bd5c00532902ef54ce</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt; &amp;std_vec, const Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt; &amp;scaling_vec)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classROL_1_1PrimalScaledStdVector.html</anchorfile>
      <anchor>a8a7b4fde89747e8ca4e009674d057461</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classROL_1_1PrimalScaledStdVector.html</anchorfile>
      <anchor>a1d6a12b0cb08cf69c7ee20ceaedba984</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ROL::Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classROL_1_1PrimalScaledStdVector.html</anchorfile>
      <anchor>af219b7bb767ca03f8a4dac629b95bd72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Element &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1PrimalScaledStdVector.html</anchorfile>
      <anchor>a61c69b256c76c2250254672eab28835b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt;</type>
      <name>scaling_vec_</name>
      <anchorfile>classROL_1_1PrimalScaledStdVector.html</anchorfile>
      <anchor>a87864210c5662c2daa5fb01d4a42494e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; DualScaledStdVector&lt; Real &gt; &gt;</type>
      <name>dual_vec_</name>
      <anchorfile>classROL_1_1PrimalScaledStdVector.html</anchorfile>
      <anchor>a70cc9375b5b4b1d9dba2c95f6f6f6db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isDualInitialized_</name>
      <anchorfile>classROL_1_1PrimalScaledStdVector.html</anchorfile>
      <anchor>a56591f19795de6ab8466436f22b8f17a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ProbabilityVector</name>
    <filename>classROL_1_1ProbabilityVector.html</filename>
    <templarg>Real</templarg>
    <base>ROL::BatchStdVector</base>
    <member kind="function">
      <type></type>
      <name>ProbabilityVector</name>
      <anchorfile>classROL_1_1ProbabilityVector.html</anchorfile>
      <anchor>af8516cf73fc0b3007e08e10b1d866b58</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type>const Real</type>
      <name>getProbability</name>
      <anchorfile>classROL_1_1ProbabilityVector.html</anchorfile>
      <anchor>a603b7b1411d854fd031c455b5e7aba53</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProbability</name>
      <anchorfile>classROL_1_1ProbabilityVector.html</anchorfile>
      <anchor>a636e44f5a9ad082325b45111788f7a97</anchor>
      <arglist>(const int i, const Real wt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumMyAtoms</name>
      <anchorfile>classROL_1_1ProbabilityVector.html</anchorfile>
      <anchor>a81c04505946b0a61773dc5b413af1cce</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1ProbabilityVector.html</anchorfile>
      <anchor>ab03fed3b30b6c4b1dc66ce2d02c58e29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ProjectedNewtonKrylovStep</name>
    <filename>classROL_1_1ProjectedNewtonKrylovStep.html</filename>
    <templarg></templarg>
    <base>ROL::Step</base>
    <class kind="class">ROL::ProjectedNewtonKrylovStep::HessianPNK</class>
    <class kind="class">ROL::ProjectedNewtonKrylovStep::PrecondPNK</class>
    <member kind="function">
      <type></type>
      <name>ProjectedNewtonKrylovStep</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>a7d8b465a8debf05de4f5f00166f8af28</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const bool computeObj=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectedNewtonKrylovStep</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>a582807a37382516cf56c1da29ac2ef65</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; Krylov&lt; Real &gt; &gt; &amp;krylov, const Teuchos::RCP&lt; Secant&lt; Real &gt; &gt; &amp;secant, const bool computeObj=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>a3f2e35355eb931b4dda037d0cf6a7a90</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>a9e76268f582acff3ad49f263056e9dc5</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>a84306ec1454d80ce991409b1c4c0ee5f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printHeader</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>a1f33160331c65b652bd16bb877d6fd0b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printName</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>a55ba1a5d5acadf5b6cc1f379a87964ef</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>print</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>a482beec770017f737ff2bece99e3f54d</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;algo_state, bool print_header=false) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Secant&lt; Real &gt; &gt;</type>
      <name>secant_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>acae549c0b145e6afa6bd14d2a9d4a02c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Krylov&lt; Real &gt; &gt;</type>
      <name>krylov_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>a85e3561db6cad0bc4c590922d1a07356</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>EKrylov</type>
      <name>ekv_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>af4ba2eabef233eb8b6c7b34c062d1945</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ESecant</type>
      <name>esec_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>a07276815f36a24165810b173c0e8f428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gp_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>acca33b7ddb79ae20289c314e1721e2d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>d_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>a9b25d808414e699c338aa6179c3e502b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>iterKrylov_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>ae96c924c846ff86e6a2f2638ba387a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>flagKrylov_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>a51830f2375723ae8efe97b6eb7581440</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>verbosity_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>a8aa777ddf18e75ef3023c55e6d3ac6a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>computeObj_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>aa6c5488bed71b523466191d8beecfb62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useSecantPrecond_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>a3dd2fcd87b7013b3d61f3953e7413df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useProjectedGrad_</name>
      <anchorfile>classROL_1_1ProjectedNewtonKrylovStep.html</anchorfile>
      <anchor>a51987f8e9349d94daf60874c863a206d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ProjectedNewtonStep</name>
    <filename>classROL_1_1ProjectedNewtonStep.html</filename>
    <templarg></templarg>
    <base>ROL::Step</base>
    <member kind="function">
      <type></type>
      <name>ProjectedNewtonStep</name>
      <anchorfile>classROL_1_1ProjectedNewtonStep.html</anchorfile>
      <anchor>ae3790f96d681156c8ca28ec56a1cfa1e</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const bool computeObj=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1ProjectedNewtonStep.html</anchorfile>
      <anchor>a99f1860a5a4b1055fc850f12ce92545e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1ProjectedNewtonStep.html</anchorfile>
      <anchor>a96eb779ef3178b73c8145dbeb1b57a25</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1ProjectedNewtonStep.html</anchorfile>
      <anchor>a693f5b93f4dd0e9d772b0f7602762aae</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printHeader</name>
      <anchorfile>classROL_1_1ProjectedNewtonStep.html</anchorfile>
      <anchor>a05dc8575b32a15f28006c6a1c44f8711</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printName</name>
      <anchorfile>classROL_1_1ProjectedNewtonStep.html</anchorfile>
      <anchor>a58a29b647e3d79f3c0130af00535475b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>print</name>
      <anchorfile>classROL_1_1ProjectedNewtonStep.html</anchorfile>
      <anchor>ae8299a0b00d4374fbdc4e93d11c7db60</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;algo_state, bool print_header=false) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gp_</name>
      <anchorfile>classROL_1_1ProjectedNewtonStep.html</anchorfile>
      <anchor>ae3aeb8400ed596a3122a3b1c46f6752b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>d_</name>
      <anchorfile>classROL_1_1ProjectedNewtonStep.html</anchorfile>
      <anchor>a3324d0c578f1556430b816d45b5efb46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>verbosity_</name>
      <anchorfile>classROL_1_1ProjectedNewtonStep.html</anchorfile>
      <anchor>ab89fbf56c053f0b0d3d2c4f83dfd8f78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>computeObj_</name>
      <anchorfile>classROL_1_1ProjectedNewtonStep.html</anchorfile>
      <anchor>a76defecb254b85dff2228c626c7232b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useProjectedGrad_</name>
      <anchorfile>classROL_1_1ProjectedNewtonStep.html</anchorfile>
      <anchor>adbb72f3d877aecaa7ae79f961a1585ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ProjectedObjective</name>
    <filename>classROL_1_1ProjectedObjective.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>ProjectedObjective</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>a5604eff786039b2dde4b07420320964b</anchor>
      <arglist>(Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, Teuchos::RCP&lt; Secant&lt; Real &gt; &gt; &amp;secant, bool useSecantPrecond=false, bool useSecantHessVec=false, Real eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>acf6f0f343d380c85695c81349c3b7774</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>a132911e926100dcebcdb155938f5a4c4</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>a2ff6445f9329068f4c6b444bca9bb9b5</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dirDeriv</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>adffd29312ca27e3eba20dcdc3e1f5d3d</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;d, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>af976f11f95bd6359d613c094581a14f8</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invHessVec</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>aae56bd1633aaf431a45036838617ce6f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>precond</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>a789a75e18a4fd417ea8a9e1b1a6162bd</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Mv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reducedHessVec</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>a6502cf72a8ce7523d9581a85eefb1626</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;p, const Vector&lt; Real &gt; &amp;d, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reducedHessVec</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>a88cc98b955ac25102aa4591999b4b11d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;p, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reducedInvHessVec</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>a55bbe8cc9d6e6fe618f01593beab607f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;p, const Vector&lt; Real &gt; &amp;d, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reducedInvHessVec</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>a4393761f17f650f975eadb3bc1399568</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;p, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reducedPrecond</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>a28491b7c63ee20483986c75ac5839bbf</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Mv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;p, const Vector&lt; Real &gt; &amp;d, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reducedPrecond</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>a68aaeba8fd1d2100740aa75d4c73c422</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Mv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;p, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>a04254fac984e28a66b25b0034cd14a32</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>a5bab677d9e3afbd3ef7ad91ceccd291d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>a642391f40301548108f70b344e34828b</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneInactive</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>ad85dd0a421ffb97107601b59c2d8ad52</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneInactive</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>aadacdda13fa5069bb280db16f4f1de28</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>a5a46328cc3a95fa0294889cde08c99f3</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConActivated</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>ae8743b6aaa9861e8c34588f92863e19c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeProjectedStep</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>ac84bb989e1d808aeec03542a35d40da1</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Objective&lt; Real &gt; &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>ab37250113a60e2df79d75b0b1abbe01e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt;</type>
      <name>con_</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>abd6c5f34f28145a164efde8954be9d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Secant&lt; Real &gt; &gt;</type>
      <name>secant_</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>af3c6dbb970fe3195a9a05bcdc1b940e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>primalV_</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>a5e34e1db33c4350e85a42453275fead7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; ROL::Vector&lt; Real &gt; &gt;</type>
      <name>dualV_</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>ac4ee2ad5a87a991551e0c97fd5dce08f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isInitialized_</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>a820c5550354d3ad614799439fbe1f2b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useSecantPrecond_</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>a394f6f2b38205569c9061b59c9e9f5d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useSecantHessVec_</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>a5129298b0a7c293196d61256de3356e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>eps_</name>
      <anchorfile>classROL_1_1ProjectedObjective.html</anchorfile>
      <anchor>ae42bc2c8b8395140e45f66108a296dae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ProjectedSecantStep</name>
    <filename>classROL_1_1ProjectedSecantStep.html</filename>
    <templarg></templarg>
    <base>ROL::Step</base>
    <member kind="function">
      <type></type>
      <name>ProjectedSecantStep</name>
      <anchorfile>classROL_1_1ProjectedSecantStep.html</anchorfile>
      <anchor>a40495ddf4a3af160120f1ebcb3d12f19</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; Secant&lt; Real &gt; &gt; &amp;secant=Teuchos::null, const bool computeObj=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1ProjectedSecantStep.html</anchorfile>
      <anchor>aac36958c9a762d726907f1d8cd92d735</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1ProjectedSecantStep.html</anchorfile>
      <anchor>a392449819e1fbc5ed54c594ca674e4f8</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1ProjectedSecantStep.html</anchorfile>
      <anchor>aa1e97d1527a5d35ad5a0a9dff7d886ce</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printHeader</name>
      <anchorfile>classROL_1_1ProjectedSecantStep.html</anchorfile>
      <anchor>a9da248adeaac3179be4629c20bef7fdb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printName</name>
      <anchorfile>classROL_1_1ProjectedSecantStep.html</anchorfile>
      <anchor>a0b032725b3e386cc217c2d6367f9a5a4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>print</name>
      <anchorfile>classROL_1_1ProjectedSecantStep.html</anchorfile>
      <anchor>af1c6f96f1a4f163da0b62c4532c3583b</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;algo_state, bool print_header=false) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Secant&lt; Real &gt; &gt;</type>
      <name>secant_</name>
      <anchorfile>classROL_1_1ProjectedSecantStep.html</anchorfile>
      <anchor>a4a997a45b699f5c84b9b2e13f4ef8caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ESecant</type>
      <name>esec_</name>
      <anchorfile>classROL_1_1ProjectedSecantStep.html</anchorfile>
      <anchor>a622093629e3ef1f7bf0f70cf3c692f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>d_</name>
      <anchorfile>classROL_1_1ProjectedSecantStep.html</anchorfile>
      <anchor>aedad75a3ba3ef79a46c0e0cf24bfda90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gp_</name>
      <anchorfile>classROL_1_1ProjectedSecantStep.html</anchorfile>
      <anchor>a5d9cad0995d101ebfddfbd17b7fb3cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>verbosity_</name>
      <anchorfile>classROL_1_1ProjectedSecantStep.html</anchorfile>
      <anchor>ab27c4a47be5b137873a6fe2e65c54040</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>computeObj_</name>
      <anchorfile>classROL_1_1ProjectedSecantStep.html</anchorfile>
      <anchor>a4aa8ba36aa28e8cc4a297831a63bdc9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useProjectedGrad_</name>
      <anchorfile>classROL_1_1ProjectedSecantStep.html</anchorfile>
      <anchor>a8e8821199ad2656b6d43ac26cf79be82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::BoundConstraint::PruneBinding</name>
    <filename>classROL_1_1BoundConstraint_1_1PruneBinding.html</filename>
    <member kind="function">
      <type>Real</type>
      <name>apply</name>
      <anchorfile>classROL_1_1BoundConstraint_1_1PruneBinding.html</anchorfile>
      <anchor>a863024bc3feb3ba578a86a905552835d</anchor>
      <arglist>(const Real &amp;x, const Real &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::QuadraticObjective</name>
    <filename>classROL_1_1QuadraticObjective.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>QuadraticObjective</name>
      <anchorfile>classROL_1_1QuadraticObjective.html</anchorfile>
      <anchor>a104a8eb8d1d025bd81bcb0f67d9be8ba</anchor>
      <arglist>(const Teuchos::RCP&lt; const LinearOperator&lt; Real &gt; &gt; &amp;op, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1QuadraticObjective.html</anchorfile>
      <anchor>a942df4f2c12ddc3e49a9900e9a17cbe1</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1QuadraticObjective.html</anchorfile>
      <anchor>a2da15e3ce07190156a1af35cd21dfc1e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1QuadraticObjective.html</anchorfile>
      <anchor>a8f97377ad82382fbe05b5ac048e7229a</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invHessVec</name>
      <anchorfile>classROL_1_1QuadraticObjective.html</anchorfile>
      <anchor>aac88e4c1794580b2f9edef7340f10c9b</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; const LinearOperator&lt; Real &gt; &gt;</type>
      <name>op_</name>
      <anchorfile>classROL_1_1QuadraticObjective.html</anchorfile>
      <anchor>a9097235fed7a3f8f86a7800292c83fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>vec_</name>
      <anchorfile>classROL_1_1QuadraticObjective.html</anchorfile>
      <anchor>a00ae5a923990cefc9ad83233f77b3d82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>tmp_</name>
      <anchorfile>classROL_1_1QuadraticObjective.html</anchorfile>
      <anchor>a331743220a25253dee2e50c542797138</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::QuadraticPenalty</name>
    <filename>classROL_1_1QuadraticPenalty.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>QuadraticPenalty</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>ae4ad11c2c07c7c5be7b38c8042bca955</anchor>
      <arglist>(const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;con, const Vector&lt; Real &gt; &amp;multiplier, const Real penaltyParameter, const Vector&lt; Real &gt; &amp;optVec, const Vector&lt; Real &gt; &amp;conVec, const bool useScaling=false, const int HessianApprox=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>a094e5db94d50999390ebe1e446afbe59</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>a068ab72991af01c90a196d02872e0341</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>ad787cff2e9e6661725d72cacf066f579</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>aeea325f925adfacbd2d663887f8b1d75</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getConstraintVec</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>af2ae5f2dcfc64b1bcbcb2da84ff70696</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumberConstraintEvaluations</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>a48816c155cb170c503390e0fa9a973f3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>a29124979f561e90f566c9ae5ddac146c</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;multiplier, const Real penaltyParameter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>evaluateConstraint</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>ad03b542024ecac7a5a59dcabf320e065</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt;</type>
      <name>con_</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>ad0e15b896362e0c82c599713de66e312</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>multiplier_</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>a1ac6dbf8c19ecd38757e986df7100832</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>penaltyParameter_</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>a638da36203cddced044cd92ab3c183e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>primalMultiplierVector_</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>a1cce4b6b5b00423cb82fed59076e7935</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualOptVector_</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>a56169c430712d1d6a93400bccbe138db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>primalConVector_</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>a6d52679684e11f270dcb519f5c9e8b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>conValue_</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>a6f419755170418948fabf71b3a3cf45f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ncval_</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>a7f3cdc5a1a77059415d5bc5b3f04ce7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>useScaling_</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>a52b2c8f4f5b450f2f27ee51af7cecc4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int</type>
      <name>HessianApprox_</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>a371a7922642eae4f374e13fbcc092b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isConstraintComputed_</name>
      <anchorfile>classROL_1_1QuadraticPenalty.html</anchorfile>
      <anchor>a34c90a9a6122e5a08c7b1a8d92b7751b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::QuadraticPenalty_SimOpt</name>
    <filename>classROL_1_1QuadraticPenalty__SimOpt.html</filename>
    <templarg></templarg>
    <base>ROL::Objective_SimOpt</base>
    <member kind="function">
      <type></type>
      <name>QuadraticPenalty_SimOpt</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>a2de4f49c1d4c71d5d26cf01f4981470a</anchor>
      <arglist>(const Teuchos::RCP&lt; EqualityConstraint_SimOpt&lt; Real &gt; &gt; &amp;con, const Vector&lt; Real &gt; &amp;multiplier, const Real penaltyParameter, const Vector&lt; Real &gt; &amp;simVec, const Vector&lt; Real &gt; &amp;optVec, const Vector&lt; Real &gt; &amp;conVec, const bool useScaling=false, const int HessianApprox=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>adba89b71c9b16451ca6040ac4982808f</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>a89e47f12eec5a352336f8361f28741bb</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradient_1</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>aa3f78c5dc23557138f90ba76bf8db0f8</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradient_2</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>a627b230f154349f171a3663c5ffeee49</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec_11</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>abd46147d908b073db46018992bb65c13</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec_12</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>a328f09739445d9eebec6a9d916a69f3a</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec_21</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>a32ee0198097f5e932fcf41ae36698978</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec_22</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>aceaa5ebffc024edce02607f144cafa97</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getConstraintVec</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>a9fff3a7c4109dea92c3cf69372ed915e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumberConstraintEvaluations</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>afd738e8c438d67788249f5ad72520b31</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>a2ff11f999b8de5cdfb1baf6c7d224620</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;multiplier, const Real penaltyParameter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>evaluateConstraint</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>acc5ea1fb4e90cc4755f4fcf4bdd76c88</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;z, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; EqualityConstraint_SimOpt&lt; Real &gt; &gt;</type>
      <name>con_</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>acaefbebed62b1544075cb3c72eaf8e22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>multiplier_</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>abd8c336448d379ce167e7bef2ea6d4df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>penaltyParameter_</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>aa991c9d22629aaba834a74baa3db6d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>primalMultiplierVector_</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>a3642f5c08915a3d67a4ba0d2fadf62d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualSimVector_</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>a5a889de087d47cc2efa6b4502fdc426e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualOptVector_</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>aefba3a920a9bf66338313a639578240f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>primalConVector_</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>a2fb17907461e0fff19535f8c496411c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>conValue_</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>aa0f5e1ef3786e19be771c8436aa9dd1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ncval_</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>a9251291409d581278ca63f19c037d0a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>useScaling_</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>a923330b87000702c8773f6355e818486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int</type>
      <name>HessianApprox_</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>a1b7640ebdaac0fdc4e688bb3c8df5b45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isConstraintComputed_</name>
      <anchorfile>classROL_1_1QuadraticPenalty__SimOpt.html</anchorfile>
      <anchor>adbdf9a5383269a653eb2d59898e26df4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::QuantileQuadrangle</name>
    <filename>classROL_1_1QuantileQuadrangle.html</filename>
    <templarg></templarg>
    <base>ROL::ExpectationQuad</base>
    <member kind="function">
      <type></type>
      <name>QuantileQuadrangle</name>
      <anchorfile>classROL_1_1QuantileQuadrangle.html</anchorfile>
      <anchor>a36e3aad6ea41b87fd41a7e62972862e2</anchor>
      <arglist>(Real prob, Real eps, Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt; &amp;pf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuantileQuadrangle</name>
      <anchorfile>classROL_1_1QuantileQuadrangle.html</anchorfile>
      <anchor>a29eee1192357849e1f607d448f6c9df3</anchor>
      <arglist>(Real prob, Real lam, Real eps, Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt; &amp;pf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuantileQuadrangle</name>
      <anchorfile>classROL_1_1QuantileQuadrangle.html</anchorfile>
      <anchor>a08809ac4f3083817ed915db3d3c01364</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>error</name>
      <anchorfile>classROL_1_1QuantileQuadrangle.html</anchorfile>
      <anchor>a5a538d356a64f9d064bafc35d8c98a31</anchor>
      <arglist>(Real x, int deriv=0)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>regret</name>
      <anchorfile>classROL_1_1QuantileQuadrangle.html</anchorfile>
      <anchor>ad64cfb98d271dfa4143071dd4c96f769</anchor>
      <arglist>(Real x, int deriv=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkRegret</name>
      <anchorfile>classROL_1_1QuantileQuadrangle.html</anchorfile>
      <anchor>ae3bc3b23da5fdbd02895f3850b8b1599</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1QuantileQuadrangle.html</anchorfile>
      <anchor>aae88b8a3f754918825843844b331b64f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classROL_1_1QuantileQuadrangle.html</anchorfile>
      <anchor>a446a0e43021a11fb2c7c26ad07a1b76d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt;</type>
      <name>pf_</name>
      <anchorfile>classROL_1_1QuantileQuadrangle.html</anchorfile>
      <anchor>ab5b19901f19cc1b47a09c399e1e4c9e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>prob_</name>
      <anchorfile>classROL_1_1QuantileQuadrangle.html</anchorfile>
      <anchor>a608773796ad571cbaa1c9629a02e01fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>lam_</name>
      <anchorfile>classROL_1_1QuantileQuadrangle.html</anchorfile>
      <anchor>a63fad4bb5e00ee64f2d94ccaa4cfed56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>eps_</name>
      <anchorfile>classROL_1_1QuantileQuadrangle.html</anchorfile>
      <anchor>a7870943ac67ffc5ab5c44f1132ccbe65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>alpha_</name>
      <anchorfile>classROL_1_1QuantileQuadrangle.html</anchorfile>
      <anchor>a61eddcc53c193848be9082907cb6f9d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>beta_</name>
      <anchorfile>classROL_1_1QuantileQuadrangle.html</anchorfile>
      <anchor>ae967dc002fd89062b2034bae2ffcb58a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::QuantileRadiusQuadrangle</name>
    <filename>classROL_1_1QuantileRadiusQuadrangle.html</filename>
    <templarg></templarg>
    <base>ROL::RiskMeasure</base>
    <member kind="function">
      <type></type>
      <name>QuantileRadiusQuadrangle</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>a4c19d02b33f92cefcd5c5bad0b48b41e</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuantileRadiusQuadrangle</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>a9697d9174842481a319194e3b071f290</anchor>
      <arglist>(const Real prob, const Real coeff, const Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt; &amp;pf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>a9dd80c3d9f497e5b2700d676332496d3</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>a80cd8ce5fdb43087283206e8f1d6cd8b</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;v0, const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>a13cb5772cc06de1a8c4a567492076000</anchor>
      <arglist>(const Real val, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getValue</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>acc2f2ede4022448f4651597a4a9bdf5f</anchor>
      <arglist>(SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>aba2229b77f728d104a5f53588bc8fca5</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>adea4b49e7789169e981684d7d1d5b34f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>ae699a8d3bf41d60c465fc2550c323b44</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real gv, const Vector&lt; Real &gt; &amp;hv, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHessVec</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>a0bbd9cdccc57ec4c3501b3a665a52eed</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>a14dd3df1c447c324253290ad34fd6348</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>a0c28a1bb335f7e8f5c11499202cc0db9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt;</type>
      <name>plusFunction_</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>a966b8fbb641b3028fb74fc4cd5afc903</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>prob_</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>ac00f133bc77fbdd5e2ae262a50c9f3f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>coeff_</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>a72d9eb3fa6ebe50bad162de210978d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector_</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>a07d92b40bb1c507f13f900082ee081ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>xvar_</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>a359f29d024b66f1443342458a2d81c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vvar_</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>aaa2c025594852f04dc2df60d394c9587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vec_</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>aac1eeffd11bfc70dfcb138e17d9227bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstReset_</name>
      <anchorfile>classROL_1_1QuantileRadiusQuadrangle.html</anchorfile>
      <anchor>a7cc4241c8b3553a0eded50cfebd3541f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::RaisedCosine</name>
    <filename>classROL_1_1RaisedCosine.html</filename>
    <templarg></templarg>
    <base>ROL::Distribution</base>
    <member kind="function">
      <type></type>
      <name>RaisedCosine</name>
      <anchorfile>classROL_1_1RaisedCosine.html</anchorfile>
      <anchor>aa44b53c6da78b3a24e9b89aea8725883</anchor>
      <arglist>(const Real mean=0.5, const Real var=0.5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaisedCosine</name>
      <anchorfile>classROL_1_1RaisedCosine.html</anchorfile>
      <anchor>a4ecdd5af2851399041c3600d02f33df4</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluatePDF</name>
      <anchorfile>classROL_1_1RaisedCosine.html</anchorfile>
      <anchor>af721164820f20f43298e8b541fb4e25f</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluateCDF</name>
      <anchorfile>classROL_1_1RaisedCosine.html</anchorfile>
      <anchor>a1a6bfe71dc7daf08b279621c29df0a03</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>integrateCDF</name>
      <anchorfile>classROL_1_1RaisedCosine.html</anchorfile>
      <anchor>a6fe2f4309dd731ec1fc556ace38b5a48</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>invertCDF</name>
      <anchorfile>classROL_1_1RaisedCosine.html</anchorfile>
      <anchor>a0c3426eb1eca4d4edcf76bd843a4b797</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>moment</name>
      <anchorfile>classROL_1_1RaisedCosine.html</anchorfile>
      <anchor>aab368f4d6ff8631cbd043a6bce5e3733</anchor>
      <arglist>(const size_t m) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>lowerBound</name>
      <anchorfile>classROL_1_1RaisedCosine.html</anchorfile>
      <anchor>a5c4ab74b294b6c88ffdccde9bd1db65a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>upperBound</name>
      <anchorfile>classROL_1_1RaisedCosine.html</anchorfile>
      <anchor>a0198e0c44ec08a26a4a84782b294e815</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1RaisedCosine.html</anchorfile>
      <anchor>a0848f45ab9963df5c9a4ab3db127f6dd</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>size_t</type>
      <name>factorial</name>
      <anchorfile>classROL_1_1RaisedCosine.html</anchorfile>
      <anchor>aec6dbdf1da9e8fcf243c4fb2bf35af04</anchor>
      <arglist>(const size_t m) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>mean_</name>
      <anchorfile>classROL_1_1RaisedCosine.html</anchorfile>
      <anchor>a008294be82c061b99432ee0abca310a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>var_</name>
      <anchorfile>classROL_1_1RaisedCosine.html</anchorfile>
      <anchor>aab44eac745162fa4b3fa944de9ac17e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Reduced_AugmentedLagrangian_SimOpt</name>
    <filename>classROL_1_1Reduced__AugmentedLagrangian__SimOpt.html</filename>
    <templarg></templarg>
    <base>ROL::AugmentedLagrangian</base>
    <member kind="function">
      <type></type>
      <name>Reduced_AugmentedLagrangian_SimOpt</name>
      <anchorfile>classROL_1_1Reduced__AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>ae7372e91fb67a9daa1937e19af1fc048</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective_SimOpt&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; EqualityConstraint_SimOpt&lt; Real &gt; &gt; &amp;redCon, const Teuchos::RCP&lt; EqualityConstraint_SimOpt&lt; Real &gt; &gt; &amp;augCon, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;state, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;control, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;adjoint, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;augConVec, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;multiplier, const Real penaltyParameter, Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1Reduced__AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a9c8a99cb06ca34836de93cfa7716e61f</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1Reduced__AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a70f0b9eb9573477b5095ab66f819920b</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1Reduced__AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>ae0d8a29d6b91e0dbc48f64a5603d5719</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1Reduced__AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a46046f0e81489e12be672418fcbfc048</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getObjectiveValue</name>
      <anchorfile>classROL_1_1Reduced__AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a6bcc103d0e1c5192d5d4ce102018fefd</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getConstraintVec</name>
      <anchorfile>classROL_1_1Reduced__AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>acb7c7c5807ea79225cfebe502799d8ce</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberConstraintEvaluations</name>
      <anchorfile>classROL_1_1Reduced__AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a6f0e90a2253dc9470e8b776d1b3f8462</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberFunctionEvaluations</name>
      <anchorfile>classROL_1_1Reduced__AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a25e123c057f609455074909d66ee33bc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberGradientEvaluations</name>
      <anchorfile>classROL_1_1Reduced__AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>ae4920942ecfbef959dfcbf1301d36ef0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1Reduced__AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a2ffe4fa2cc18f7880b2945bf628eab1e</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;multiplier, const Real penaltyParameter)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; AugmentedLagrangian_SimOpt&lt; Real &gt; &gt;</type>
      <name>augLagSimOpt_</name>
      <anchorfile>classROL_1_1Reduced__AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a085bebf2a43265c8ac6a5e632f049de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Reduced_Objective_SimOpt&lt; Real &gt; &gt;</type>
      <name>rAugLagSimOpt_</name>
      <anchorfile>classROL_1_1Reduced__AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>a5e7f5a8ad4eca28f3cda9ee474075f39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>state_</name>
      <anchorfile>classROL_1_1Reduced__AugmentedLagrangian__SimOpt.html</anchorfile>
      <anchor>aba730548b7ffca42a65c9d92a254effe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Reduced_Objective_SimOpt</name>
    <filename>classROL_1_1Reduced__Objective__SimOpt.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Reduced_Objective_SimOpt</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>af5381a892790d19bafc68e6c6ba24449</anchor>
      <arglist>(const Teuchos::RCP&lt; Objective_SimOpt&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; EqualityConstraint_SimOpt&lt; Real &gt; &gt; &amp;con, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;state, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;adjoint, bool storage=true, bool useFDhessVec=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Reduced_Objective_SimOpt</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>a9f1089587146089652a3b3401f0b35e3</anchor>
      <arglist>(Teuchos::RCP&lt; Objective_SimOpt&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; EqualityConstraint_SimOpt&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;state, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;adjoint, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;dualstate, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;dualadjoint, bool storage=true, bool useFDhessVec=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>aa687877abe47369ba83a174ee77fd226</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>a80d3d7112bb340d668a106e686a3fa06</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>a29d6677b2f83662c2990123ceb48e134</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>a23a34ae5391a3000b83362813c1d36a5</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>precond</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>a1823792a33eb0e6bf40d1e947b67d457</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Pv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>solve_state_equation</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>af92b8741143dc77f2c524134bd1eb96a</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x, Real &amp;tol, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>solve_adjoint_equation</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>a656395539ec522b50fa2a58f56009ce0</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>solve_state_sensitivity</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>adda19cf8c8a79a1ff0ba99e8c1bfcc23</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>solve_adjoint_sensitivity</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>a7bc9d70c743f1c7a3efc4504d2e29565</anchor>
      <arglist>(const ROL::Vector&lt; Real &gt; &amp;v, const ROL::Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Objective_SimOpt&lt; Real &gt; &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>aa4c0c909b452e3d4cf04bcb75878c4f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; EqualityConstraint_SimOpt&lt; Real &gt; &gt;</type>
      <name>con_</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>a8543ed7a851751dc71bca1490ce8b682</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>state_</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>aac3e904d4bc6643275c0c9ba2a842c44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>state_sens_</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>aba1c547d8c2228fb96f8b8fd052f37c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualstate_</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>a1492fa920ccdab6221b4e4f19d6613f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualstate1_</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>ada2642a2110c49f0f0d3549bfda027cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>adjoint_</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>aa3861bc39808716b776ab4848bd5182c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>adjoint_sens_</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>a5cf719a447c1fbc61aaae5c85b096551</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualadjoint_</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>ae57203830997a6be9bbbdad88be8b1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualcontrol_</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>a5fa9e5cd42e919a2fe067530f7586714</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>storage_</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>ae5eda2bba8cb91459e812f80fc4ebd3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>is_state_computed_</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>a359777546173098d512863c5f12d7091</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>is_adjoint_computed_</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>a3327a9c3ce08022b3cc53868d5bf0b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>is_initialized_</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>a2491b4e9ca6c3563c2225f4ab6dcd327</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useFDhessVec_</name>
      <anchorfile>classROL_1_1Reduced__Objective__SimOpt.html</anchorfile>
      <anchor>aa3afb4e0fce99763bbca6a01e5e7f924</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Reduced_ParametrizedObjective_SimOpt</name>
    <filename>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</filename>
    <templarg></templarg>
    <base>ROL::ParametrizedObjective</base>
    <member kind="function">
      <type></type>
      <name>Reduced_ParametrizedObjective_SimOpt</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>aebd106de66ea016113586ab5bf99adef</anchor>
      <arglist>(Teuchos::RCP&lt; ParametrizedObjective_SimOpt&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; ParametrizedEqualityConstraint_SimOpt&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;state, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;adjoint, bool storage=true, bool useFDhessVec=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Reduced_ParametrizedObjective_SimOpt</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>ad63ed5a597231ab82ab3fdf8099bdac8</anchor>
      <arglist>(Teuchos::RCP&lt; ParametrizedObjective_SimOpt&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; ParametrizedEqualityConstraint_SimOpt&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;state, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;adjoint, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;dualstate, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;dualadjoint, bool storage=true, bool useFDhessVec=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameter</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>ac04eb3bb3a204ebed8a7640c13bc0040</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>adb02f484302bec750778107c92cd7f56</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>aba8f88e2a19ccd905621d16277f82f42</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>acbe9c1a2d4e8066a6f87afeaf55bf915</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>a1f01abd891b5684e1426a5899b3432f4</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>precond</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>a3f77bbda9ad1774977606394bf181fc7</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Pv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>solve_state_equation</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>adbd2aab9440c70c27e38d6b4e3d2b0de</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>solve_adjoint_equation</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>a5c217503dad3188be5da4f6f915ae3d8</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>solve_state_sensitivity</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>a31add74a14e63cababaf6722dfd84b84</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>solve_adjoint_sensitivity</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>ae0b64fd4a1dfecf125c61290ef7eb789</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; ParametrizedObjective_SimOpt&lt; Real &gt; &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>a55607eec0161301873238ffcc18270fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; ParametrizedEqualityConstraint_SimOpt&lt; Real &gt; &gt;</type>
      <name>con_</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>a0ce8eee2e8d8b011f5c030a2dca4d099</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>state_</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>ace5722d8ec54fbfd5a6116ba9b96106d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>state_sens_</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>a737757f0aa90e7ace8309dcf7e026dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>adjoint_</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>aecaa1e95bd6e2d72366e8e2a9c0a1213</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>adjoint_sens_</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>ad7a58c0b833613d482cefbc3a99b7406</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualstate_</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>a04cfd4308a5a437fecc30de8f07735f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualstate1_</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>a29a7f4bb00c954e11694d3e00d849ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualadjoint_</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>a3edccd8eceb0d3f2f515cf860db98e80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualcontrol_</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>ae157b372284f412bd8e513fb88b8a4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::vector&lt; Real &gt;, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>state_storage_</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>a2dd61c453766145e3d861119b3690224</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::vector&lt; Real &gt;, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>adjoint_storage_</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>aa2e78bb4282401c7027ab80331f8c9d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>storage_</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>aa999aa361cf557e40cd5a29a4cc7f3e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useFDhessVec_</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>a0de33ab9f4db84e4aa4f23711fc8b866</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>is_initialized_</name>
      <anchorfile>classROL_1_1Reduced__ParametrizedObjective__SimOpt.html</anchorfile>
      <anchor>abd1084496f1c4898ecde40421e350150</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ExperimentDesignObjective::ReducedHessian</name>
    <filename>classROL_1_1ExperimentDesignObjective_1_1ReducedHessian.html</filename>
    <base>ROL::LinearOperator</base>
    <member kind="function">
      <type></type>
      <name>ReducedHessian</name>
      <anchorfile>classROL_1_1ExperimentDesignObjective_1_1ReducedHessian.html</anchorfile>
      <anchor>a2f21eb528dd7ebd88881e3abad22b2cb</anchor>
      <arglist>(const Teuchos::RCP&lt; ExperimentDesignInterface&lt; Real &gt; &gt; &amp;edi, Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classROL_1_1ExperimentDesignObjective_1_1ReducedHessian.html</anchorfile>
      <anchor>ae928999dc02e617250ac63c8055768ac</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; ExperimentDesignInterface&lt; Real &gt; &gt;</type>
      <name>edi_</name>
      <anchorfile>classROL_1_1ExperimentDesignObjective_1_1ReducedHessian.html</anchorfile>
      <anchor>ad08af1aa7b7301d7d3c5cd535ba98a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>w_</name>
      <anchorfile>classROL_1_1ExperimentDesignObjective_1_1ReducedHessian.html</anchorfile>
      <anchor>a5d48f10006782e88406b1d0d2a6a5345</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ROL::removeSpecialCharacters</name>
    <filename>structROL_1_1removeSpecialCharacters.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structROL_1_1removeSpecialCharacters.html</anchorfile>
      <anchor>a8d2f11eaa2bfae55c77929200ceb0e11</anchor>
      <arglist>(char c)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::RiskAverseObjective</name>
    <filename>classROL_1_1RiskAverseObjective.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RiskAverseObjective</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>a3aa2e1ffb0b359b3bad5296a2de11d92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RiskAverseObjective</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>a2d63ecc7ffaff92663775f0ab6e7c5ed</anchor>
      <arglist>(const Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;pObj, const Teuchos::RCP&lt; RiskMeasure&lt; Real &gt; &gt; &amp;rm, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;vsampler, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;gsampler, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;hsampler, const bool storage=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RiskAverseObjective</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>ac38a6a6f85ef3b5152adf30192ab4ce9</anchor>
      <arglist>(const Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;pObj, const Teuchos::RCP&lt; RiskMeasure&lt; Real &gt; &gt; &amp;rm, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;vsampler, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;gsampler, const bool storage=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RiskAverseObjective</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>a1cbeb9301431e5303e9bc12ddc7b6ec5</anchor>
      <arglist>(const Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;pObj, const Teuchos::RCP&lt; RiskMeasure&lt; Real &gt; &gt; &amp;rm, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;sampler, const bool storage=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RiskAverseObjective</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>a35255fa7280d79fe56c265f6bf5b8e60</anchor>
      <arglist>(const Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;pObj, Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;vsampler, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;gsampler, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;hsampler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RiskAverseObjective</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>a20318cc7877a48a5e6a67341c731ff8f</anchor>
      <arglist>(const Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;pObj, Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;vsampler, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;gsampler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RiskAverseObjective</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>ab6876230aeef377512c723e17aac3856</anchor>
      <arglist>(const Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;pObj, Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>a01ad48d532ced07f78d378abfa82e046</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>a54ed14a3782d53d5a7812756f30cc417</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>ab9ffdd2b3ad9197e3c4391a77ededefa</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>a2774cd56456402b340aa15dae59fcf0f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>precond</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>aef1879d962f0f823948ff45b4f2c34e4</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Pv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>a0fcb33bcf08fe60f0533a74f0b25a9ab</anchor>
      <arglist>(Real &amp;val, const Vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;param, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>a307bbb8c547ed39ce8f938566ba5e308</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;param, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getHessVec</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>a55fb59ebe50509c5fa1c1eb8c76601d3</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;param, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt;</type>
      <name>ParametrizedObjective_</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>a762317a690336ab50fb6dcc830cdd572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; RiskMeasure&lt; Real &gt; &gt;</type>
      <name>RiskMeasure_</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>ad313ca888736772bcd435712f9513a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt;</type>
      <name>ValueSampler_</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>a6ca3e5507235fede78b4cff21ed6de2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt;</type>
      <name>GradientSampler_</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>ac30eacf7365f0105dab5525746de2a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt;</type>
      <name>HessianSampler_</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>a22c93fb3acfd5760bf04e6dab85e668e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstUpdate_</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>addb61248075c83bac0110ecf29879bf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>storage_</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>a6405f0d6cdbb79f6cd06085ff6b3acb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::vector&lt; Real &gt;, Real &gt;</type>
      <name>value_storage_</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>a7fc019c2faed1280c109a20344d5e7ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::vector&lt; Real &gt;, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>gradient_storage_</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>a132f47d2f35a3cd5fde8459b8201aefb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>x_</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>afe62022c0b0cb9a698d6f990a3651332</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>v_</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>ac01d64b81c1172c5559afac12bc57fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>g_</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>aeb597e6aa3d878ca12936ecb99084a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>hv_</name>
      <anchorfile>classROL_1_1RiskAverseObjective.html</anchorfile>
      <anchor>a4c797da1e1cd65d1a3c04a7a20a1ec0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::RiskBoundConstraint</name>
    <filename>classROL_1_1RiskBoundConstraint.html</filename>
    <templarg></templarg>
    <base>ROL::BoundConstraint</base>
    <member kind="function">
      <type></type>
      <name>RiskBoundConstraint</name>
      <anchorfile>classROL_1_1RiskBoundConstraint.html</anchorfile>
      <anchor>a54e620f39ab2ccef3bb2b90c8f54929a</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;bc=Teuchos::null)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1RiskBoundConstraint.html</anchorfile>
      <anchor>ae1834366fe1c89fd0572bd20e3eaf153</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classROL_1_1RiskBoundConstraint.html</anchorfile>
      <anchor>a59b4b6fde2836323529945642124b08d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classROL_1_1RiskBoundConstraint.html</anchorfile>
      <anchor>ae88a7a8f4142ff9f8adbad071eb42654</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real eps=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classROL_1_1RiskBoundConstraint.html</anchorfile>
      <anchor>a5e1b96c2d5b9baadb7a64e247bf1ecc4</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real eps=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classROL_1_1RiskBoundConstraint.html</anchorfile>
      <anchor>a5e0024a984e87f46d33baffc32f627da</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real eps=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classROL_1_1RiskBoundConstraint.html</anchorfile>
      <anchor>af02d5972c0158754df3e976d12dec190</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real eps=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToUpperBound</name>
      <anchorfile>classROL_1_1RiskBoundConstraint.html</anchorfile>
      <anchor>a7ccbc7d460a7acf45da20bed5e9f5eab</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToLowerBound</name>
      <anchorfile>classROL_1_1RiskBoundConstraint.html</anchorfile>
      <anchor>a7f93dc51ca3921e695ff49001846207e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classROL_1_1RiskBoundConstraint.html</anchorfile>
      <anchor>a03da1a571651ebd41c59d3dcfceb721d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real eps=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classROL_1_1RiskBoundConstraint.html</anchorfile>
      <anchor>a2e51fa5ff14fbde02067a044f1abe8d3</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real eps=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classROL_1_1RiskBoundConstraint.html</anchorfile>
      <anchor>a232e870616189e713463725d177d4585</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt;</type>
      <name>bc_</name>
      <anchorfile>classROL_1_1RiskBoundConstraint.html</anchorfile>
      <anchor>aa6e9fe3e3fc560e01235632344d06478</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StdBoundConstraint&lt; Real &gt; &gt;</type>
      <name>stat_bc_</name>
      <anchorfile>classROL_1_1RiskBoundConstraint.html</anchorfile>
      <anchor>a519088dc455a3be021efae8c215d5b2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>lower_</name>
      <anchorfile>classROL_1_1RiskBoundConstraint.html</anchorfile>
      <anchor>a58a1001106b3d7b8e10c1532ba21d72e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>upper_</name>
      <anchorfile>classROL_1_1RiskBoundConstraint.html</anchorfile>
      <anchor>a900ea661b3906c94dcd5371b13bb6994</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>augmented_</name>
      <anchorfile>classROL_1_1RiskBoundConstraint.html</anchorfile>
      <anchor>a5fea26a751bb1d9385bbe027985df628</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>activated_</name>
      <anchorfile>classROL_1_1RiskBoundConstraint.html</anchorfile>
      <anchor>a579cddcddc95e7e1f5daa7ec4ae5c16d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nStat_</name>
      <anchorfile>classROL_1_1RiskBoundConstraint.html</anchorfile>
      <anchor>a2aaeb7c551e388dcbcbb71996ea47848</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::RiskMeasure</name>
    <filename>classROL_1_1RiskMeasure.html</filename>
    <templarg>Real</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RiskMeasure</name>
      <anchorfile>classROL_1_1RiskMeasure.html</anchorfile>
      <anchor>ac095ea57b3a54e84d8bafc03778a761f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RiskMeasure</name>
      <anchorfile>classROL_1_1RiskMeasure.html</anchorfile>
      <anchor>a5cf4300b0ef09ce6b7af8ec13eaa93ee</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1RiskMeasure.html</anchorfile>
      <anchor>a6a6689520b9a8d5a6510e5daf198868b</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1RiskMeasure.html</anchorfile>
      <anchor>a67b02f7f6866753bbf64618bd563f6a7</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;v0, const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1RiskMeasure.html</anchorfile>
      <anchor>a31b23645e504a92363b450042de0e41e</anchor>
      <arglist>(const Real val, const Real weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1RiskMeasure.html</anchorfile>
      <anchor>a38e4dedfd287caba9a258d805229f2f9</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1RiskMeasure.html</anchorfile>
      <anchor>a07ca7b256f673d29efd57cd7e2abd28b</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real gv, const Vector&lt; Real &gt; &amp;hv, const Real weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>getValue</name>
      <anchorfile>classROL_1_1RiskMeasure.html</anchorfile>
      <anchor>a7af0c5900852a6f10b1fc6c78b8b7fbb</anchor>
      <arglist>(SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1RiskMeasure.html</anchorfile>
      <anchor>a9b34344a63f29c5f04e2ba532b08d6e7</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getHessVec</name>
      <anchorfile>classROL_1_1RiskMeasure.html</anchorfile>
      <anchor>af769962caa3f9754ac1e7bc9e9f9e6c7</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Real</type>
      <name>val_</name>
      <anchorfile>classROL_1_1RiskMeasure.html</anchorfile>
      <anchor>a77de822528d1b31450574febebc395be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Real</type>
      <name>gv_</name>
      <anchorfile>classROL_1_1RiskMeasure.html</anchorfile>
      <anchor>a2ea625639e09f2400f292d2c1c3c9c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>g_</name>
      <anchorfile>classROL_1_1RiskMeasure.html</anchorfile>
      <anchor>a510d6d51e6643c07d63474fe0047fcb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>hv_</name>
      <anchorfile>classROL_1_1RiskMeasure.html</anchorfile>
      <anchor>a3a592a4792880237156c20dfd14fbf0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dualVector_</name>
      <anchorfile>classROL_1_1RiskMeasure.html</anchorfile>
      <anchor>ab936469e2f711385ae268e4aff4edef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>firstReset_</name>
      <anchorfile>classROL_1_1RiskMeasure.html</anchorfile>
      <anchor>a456cdfeb2c1431fdab3683e83c62cb58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::RiskNeutralObjective</name>
    <filename>classROL_1_1RiskNeutralObjective.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Objective</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RiskNeutralObjective</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>abd0aa5ef0f0b791f62aa2a2f83d95deb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RiskNeutralObjective</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>a998f8815ab5fb4cded31c576fe982402</anchor>
      <arglist>(const Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;pObj, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;vsampler, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;gsampler, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;hsampler, const bool storage=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RiskNeutralObjective</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>ac8110101d9b5ee0203a480c55b46a673</anchor>
      <arglist>(const Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;pObj, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;vsampler, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;gsampler, const bool storage=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RiskNeutralObjective</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>a2fcaee604274b75857cccac340676e15</anchor>
      <arglist>(const Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;pObj, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;sampler, const bool storage=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>a48a729bad2ed3dd190ef7292ba87a609</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>a1551d18b25b5a6887cde12422373d763</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>a18842f81fdf8b04d45cf5b7ec80f380b</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>a0103ce0ac39eaa168d278741a762abf2</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>precond</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>a0b8d30cedf8d7b4a3adc0cf3fb8661ca</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Pv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>a4daa57c8109b32aeac9dc913d9c389e9</anchor>
      <arglist>(Real &amp;val, const Vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;param, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>afedaa492085e655fe35a532b61a7f823</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;param, Real &amp;tol)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getHessVec</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>a4239a582be920dec608992ecc0aa8cd7</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;param, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt;</type>
      <name>ParametrizedObjective_</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>a1c6e3ec89c5546fa6ce83469bcc5d71d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt;</type>
      <name>ValueSampler_</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>ac6ebee90a6b423b5c15063d3b7e7fd1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt;</type>
      <name>GradientSampler_</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>ac1ae317b6ec8334868b8f452109a4cde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt;</type>
      <name>HessianSampler_</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>a2802819128655d5548fb4ed0d8fe268c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>value_</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>add26f029a8ba91e61511b76959894725</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gradient_</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>ac34c5cfb1c331774436ddd1b1245fc2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>pointDual_</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>a405a2a6d0aab3d8c6d23d5e1f7cbf5ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>sumDual_</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>aab49166203c124c18d8b4daed690bf2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstUpdate_</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>ada4f41b6adc30a5ce8936e50ddc242a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>storage_</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>ab7b46d9e6418d648eadbb458652d93ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::vector&lt; Real &gt;, Real &gt;</type>
      <name>value_storage_</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>a5bbd8e0c750afd5cb274cb98bfe2904f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::vector&lt; Real &gt;, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>gradient_storage_</name>
      <anchorfile>classROL_1_1RiskNeutralObjective.html</anchorfile>
      <anchor>ab05bb9198b70f4f208dca826ed113bb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::RiskVector</name>
    <filename>classROL_1_1RiskVector.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Vector</base>
    <member kind="function">
      <type></type>
      <name>RiskVector</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>abe5129bd8b6fc305f6298b950f6b4f93</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;vec, const Real stat=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RiskVector</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a33e2bc855efcd182d50cf4bdf8ea13a2</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;vec, const bool augmented=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RiskVector</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a4a29cb2c6766f1cb1086e2b9d2fd9e0a</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;vec, const std::vector&lt; Real &gt; &amp;stat, const bool augmented=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>ac8c26b141ae63d26ee3fa5a4eb9bae3f</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a341a126bbb272d9c9e1119353aed9910</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a91d6fbdf5b69d1610208a8868ab0c97e</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a21964fb43df55536d4a094f696cf3c67</anchor>
      <arglist>(const Real alpha, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a619bc98e0a89749d1cba6540646530e1</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a40a3c5f9001056e9ead4e84353c4f99d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>aa2e102ed22c9e58fecd36749a1008f72</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>acad5ba72288f33099b0dd3ef2028c245</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>ab42612fb2a5383055a4a35c6a3cef8cb</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyUnary</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>ac8c5efe3aa660bd1617efd290d88a385</anchor>
      <arglist>(const Elementwise::UnaryFunction&lt; Real &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBinary</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a864b3b70ff121c4dde5f930e26394101</anchor>
      <arglist>(const Elementwise::BinaryFunction&lt; Real &gt; &amp;f, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>reduce</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a8283c640b46f7559480ce5b0e99058df</anchor>
      <arglist>(const Elementwise::ReductionOp&lt; Real &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a7a0ffd2922e1aeaeac5c62c6bbf94097</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const StdVector&lt; Real &gt; &gt;</type>
      <name>getStatistic</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>acb8bce991449f7f2fed127a7a849b99c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; StdVector&lt; Real &gt; &gt;</type>
      <name>getStatistic</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a5c9e491005d53db1820a501ed61ad86f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a77550c2a1e98479a2035a5c59736026a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a8be9243f8a4e630958717b4356b4a470</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const Real</type>
      <name>getStatistic</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a6e62b195cecd4d68838181a6dacb16bf</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getStatistic</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>ac87fa34734b398e1ea2ba28d70fa751c</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;stat) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatistic</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a079ea4d05d6f1645a4f6af57b84ca425</anchor>
      <arglist>(const Real stat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatistic</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a3c4873a5863d91258e27f00558d17de8</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;stat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVector</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>ad264bc46a6676359e7393917a4698bf0</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;vec)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>stat_</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>ab4b628ebb6aca29854801f3ce3538385</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StdVector&lt; Real &gt; &gt;</type>
      <name>stat_vec_</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>ac02500303fde49909552b0c9818a8e2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>vec_</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a5e12c3c0cd73d8ac5ea1bf9b75435dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>augmented_</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>ac908f0bbfa3f7b7ffb46767597401db8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nStat_</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a4cf8b33ebc6072ba7a97a7681d0ed99b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isDualInitialized_</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a001173ae769205d291e56d4fa01a7ae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dual_vec1_</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>a4d4f6bf98304a12cbccb005fab6b845a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; RiskVector&lt; Real &gt; &gt;</type>
      <name>dual_vec_</name>
      <anchorfile>classROL_1_1RiskVector.html</anchorfile>
      <anchor>ab4e3986e7344b483c5f0ed30cdf824f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::SampleGenerator</name>
    <filename>classROL_1_1SampleGenerator.html</filename>
    <templarg>Real</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SampleGenerator</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>aa0f43f5275edf6e991d0d46b319bf4fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleGenerator</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>ad01e3b29772556a2518d84f469362f2d</anchor>
      <arglist>(const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleGenerator</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>ace8f65d0da6dd782db721c9f9d09a71d</anchor>
      <arglist>(const SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>ad6411fd09052c52f5f0e31a2b5ad9e62</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>start</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>ab31e9b0fd2ccc635e76e8912e8e0127a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>computeError</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>a9435036d9b9a48fcec33599c32f4bc32</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;vals)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>computeError</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>a6dcfc24d5934441b4f9e5686e7bcceea</anchor>
      <arglist>(std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt; &amp;vals, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>refine</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>aaf97841323791751b987a91ea9b69bc8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSamples</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>ae0ee803d54c4b67e8d41c2884259a2de</anchor>
      <arglist>(bool inConstructor=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numMySamples</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>a19f0064c393de268f9ecfed9dd94a4fa</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; Real &gt;</type>
      <name>getMyPoint</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>a6c1485b6dc3b2cefefe5c0c9b9952ad3</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>getMyWeight</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>a0227b87c3d9d67e2a25fca8d4600bfad</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>batchID</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>a1c71eb8847c98f9195296d8dbf355e7d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numBatches</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>ab20999657d9b8f0dc51ad7be34a92d35</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sumAll</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>a886e128ce3bc129701a450e685d23825</anchor>
      <arglist>(Real *input, Real *output, int dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sumAll</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>af2c158de6c010c70787a1241fa61e9ce</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;input, Vector&lt; Real &gt; &amp;output) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>barrier</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>a533aeb4accc41b0d6b5ac5bfbe6fc48c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setPoints</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>a3579a08318e1d7ef746fb2b5c8309ce6</anchor>
      <arglist>(std::vector&lt; std::vector&lt; Real &gt; &gt; &amp;p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setWeights</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>a4fccbba0d8bd1a4e6a1a733df6e7a60d</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;w)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>begin_</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>aa5e8f33bfef758eff97b2ea9150b075a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt;</type>
      <name>bman_</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>a3bdd9cd8d23f3093d0fa98cf681919cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>points_</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>a26353a765b3369293ce5b48460e3a696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>weights_</name>
      <anchorfile>classROL_1_1SampleGenerator.html</anchorfile>
      <anchor>a82f768e09dae837909aeac3ec0314ebb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ScalarLinearEqualityConstraint</name>
    <filename>classROL_1_1ScalarLinearEqualityConstraint.html</filename>
    <templarg></templarg>
    <base>ROL::EqualityConstraint</base>
    <member kind="function">
      <type></type>
      <name>ScalarLinearEqualityConstraint</name>
      <anchorfile>classROL_1_1ScalarLinearEqualityConstraint.html</anchorfile>
      <anchor>a10b186cc6f03ac69903cc5f8c4575f47</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;a, const Real b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classROL_1_1ScalarLinearEqualityConstraint.html</anchorfile>
      <anchor>a2898950c0d085e3a050362069e76b9f2</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian</name>
      <anchorfile>classROL_1_1ScalarLinearEqualityConstraint.html</anchorfile>
      <anchor>afc456b375ee1cbb0cb07a0102907c506</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classROL_1_1ScalarLinearEqualityConstraint.html</anchorfile>
      <anchor>a28bc5c144d1772d5e6137fc1e17debab</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian</name>
      <anchorfile>classROL_1_1ScalarLinearEqualityConstraint.html</anchorfile>
      <anchor>a1f8c0c2a2159a3a6bf5625b30f428d49</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahuv, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Real &gt;</type>
      <name>solveAugmentedSystem</name>
      <anchorfile>classROL_1_1ScalarLinearEqualityConstraint.html</anchorfile>
      <anchor>a8dfa75d7c414bf46d0347e4f15623204</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v1, Vector&lt; Real &gt; &amp;v2, const Vector&lt; Real &gt; &amp;b1, const Vector&lt; Real &gt; &amp;b2, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>a_</name>
      <anchorfile>classROL_1_1ScalarLinearEqualityConstraint.html</anchorfile>
      <anchor>af9f8d630f4a21926ce262448eb78d209</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>b_</name>
      <anchorfile>classROL_1_1ScalarLinearEqualityConstraint.html</anchorfile>
      <anchor>a1259ae444b6057ebdb834596fdb7162d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::ScalarMinimizationLineSearch</name>
    <filename>classROL_1_1ScalarMinimizationLineSearch.html</filename>
    <templarg></templarg>
    <base>ROL::LineSearch</base>
    <class kind="class">ROL::ScalarMinimizationLineSearch::LineSearchStatusTest</class>
    <class kind="class">ROL::ScalarMinimizationLineSearch::Phi</class>
    <member kind="function">
      <type></type>
      <name>ScalarMinimizationLineSearch</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch.html</anchorfile>
      <anchor>ac93e74b5f5a69190c0eaf6d94a7a5ec0</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; ScalarMinimization&lt; Real &gt; &gt; &amp;sm=Teuchos::null, const Teuchos::RCP&lt; Bracketing&lt; Real &gt; &gt; &amp;br=Teuchos::null, const Teuchos::RCP&lt; ScalarFunction&lt; Real &gt; &gt; &amp;sf=Teuchos::null)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch.html</anchorfile>
      <anchor>a7890ff53fcd97c4d7e7f6027ede3624c</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch.html</anchorfile>
      <anchor>a020845c996a0e7b97866d8f60cbd8f3e</anchor>
      <arglist>(Real &amp;alpha, Real &amp;fval, int &amp;ls_neval, int &amp;ls_ngrad, const Real &amp;gs, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xnew_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch.html</anchorfile>
      <anchor>a1422d3347762b93c0ba3bec2ff62c1f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>g_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch.html</anchorfile>
      <anchor>aaeaa1390ed7c25c0b58bb2c826f81d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; ScalarMinimization&lt; Real &gt; &gt;</type>
      <name>sm_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch.html</anchorfile>
      <anchor>aad10203280884cf3cbc877dfb524e85b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Bracketing&lt; Real &gt; &gt;</type>
      <name>br_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch.html</anchorfile>
      <anchor>adb1c88d9e804464df94cef0ce9c9e950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; ScalarFunction&lt; Real &gt; &gt;</type>
      <name>sf_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch.html</anchorfile>
      <anchor>a20c4ffe18aefe4d85f8ed9467822cddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ECurvatureCondition</type>
      <name>econd_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch.html</anchorfile>
      <anchor>ab08f8d37220dadbf2459398a311ad9e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>c1_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch.html</anchorfile>
      <anchor>a0bd0c8417016067a1a8927e50d1feafa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>c2_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch.html</anchorfile>
      <anchor>a8e9df0998592a9dcf793eddd6f3ce4f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>c3_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch.html</anchorfile>
      <anchor>ae75e300bc63bb3555db34014ffb19e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>max_nfval_</name>
      <anchorfile>classROL_1_1ScalarMinimizationLineSearch.html</anchorfile>
      <anchor>a29cd150dcfd7b3ca11ee39cad1a870cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Secant</name>
    <filename>classROL_1_1Secant.html</filename>
    <templarg></templarg>
    <base>ROL::LinearOperator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Secant</name>
      <anchorfile>classROL_1_1Secant.html</anchorfile>
      <anchor>ad934beab62a82d89734db6fb56175c36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Secant</name>
      <anchorfile>classROL_1_1Secant.html</anchorfile>
      <anchor>a98b6708046e7106d38af77c272d64de6</anchor>
      <arglist>(int M=10)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; SecantState&lt; Real &gt; &gt; &amp;</type>
      <name>get_state</name>
      <anchorfile>classROL_1_1Secant.html</anchorfile>
      <anchor>a963c8078df1003497e887e1395099ac3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Teuchos::RCP&lt; SecantState&lt; Real &gt; &gt; &amp;</type>
      <name>get_state</name>
      <anchorfile>classROL_1_1Secant.html</anchorfile>
      <anchor>a8ee2735a05c795a9245a2494971f657f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateStorage</name>
      <anchorfile>classROL_1_1Secant.html</anchorfile>
      <anchor>aedeb3f3246b58e60db4302f86aa43c90</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;grad, const Vector&lt; Real &gt; &amp;gp, const Vector&lt; Real &gt; &amp;s, const Real snorm, const int iter)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applyH</name>
      <anchorfile>classROL_1_1Secant.html</anchorfile>
      <anchor>ab9fa8608a1cb5c2be9beb2e2b43f45d5</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyH0</name>
      <anchorfile>classROL_1_1Secant.html</anchorfile>
      <anchor>a426551c8a1202689c56afd6b7ad6705b</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applyB</name>
      <anchorfile>classROL_1_1Secant.html</anchorfile>
      <anchor>a59a3edb7c2c8c5a48c4e9fdf06572fff</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Bv, const Vector&lt; Real &gt; &amp;v) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyB0</name>
      <anchorfile>classROL_1_1Secant.html</anchorfile>
      <anchor>a3312df59b7c9dff0f504bcd4b8cfd5d0</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Bv, const Vector&lt; Real &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1Secant.html</anchorfile>
      <anchor>a9b2d620626413663e1382db62a3ecb88</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classROL_1_1Secant.html</anchorfile>
      <anchor>a3b30544b392e1a43e9a0b90899fb4368</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverse</name>
      <anchorfile>classROL_1_1Secant.html</anchorfile>
      <anchor>abeb2c82a648c980a5438104fd972e102</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Hv, const Vector&lt; Real &gt; &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SecantState&lt; Real &gt; &gt;</type>
      <name>state_</name>
      <anchorfile>classROL_1_1Secant.html</anchorfile>
      <anchor>a4c31ce513e23d3337565a7367a3d02d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isInitialized_</name>
      <anchorfile>classROL_1_1Secant.html</anchorfile>
      <anchor>a630cf2893a1ef39f3be75b4ddfc4d8ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ROL::SecantState</name>
    <filename>structROL_1_1SecantState.html</filename>
    <templarg></templarg>
    <member kind="variable">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>iterate</name>
      <anchorfile>structROL_1_1SecantState.html</anchorfile>
      <anchor>aa33f0ad5e6b991909f12fbeabbc96fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>iterDiff</name>
      <anchorfile>structROL_1_1SecantState.html</anchorfile>
      <anchor>a19e64ab10de14df0802906267c317f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &gt;</type>
      <name>gradDiff</name>
      <anchorfile>structROL_1_1SecantState.html</anchorfile>
      <anchor>af5ccd0e0ad9746603ddafd2b0c53408f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Real &gt;</type>
      <name>product</name>
      <anchorfile>structROL_1_1SecantState.html</anchorfile>
      <anchor>a442ed99016a3b55263af0eefff70086e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Real &gt;</type>
      <name>product2</name>
      <anchorfile>structROL_1_1SecantState.html</anchorfile>
      <anchor>a859136ece8428cdd918a0bef9b93e992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>storage</name>
      <anchorfile>structROL_1_1SecantState.html</anchorfile>
      <anchor>aa17e15841f93c7ff43b7b77dcfd6d983</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>current</name>
      <anchorfile>structROL_1_1SecantState.html</anchorfile>
      <anchor>a9d076f6e93ee3ea744622f16b459edee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iter</name>
      <anchorfile>structROL_1_1SecantState.html</anchorfile>
      <anchor>ae459c08816e50ab064c13739f5023357</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::SecantStep</name>
    <filename>classROL_1_1SecantStep.html</filename>
    <templarg></templarg>
    <base>ROL::Step</base>
    <member kind="function">
      <type></type>
      <name>SecantStep</name>
      <anchorfile>classROL_1_1SecantStep.html</anchorfile>
      <anchor>abd88bb0f7176c4618e93ba859dff26b7</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; Secant&lt; Real &gt; &gt; &amp;secant=Teuchos::null, const bool computeObj=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1SecantStep.html</anchorfile>
      <anchor>ad3b254bbb3ed297a66f37e18116506ba</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1SecantStep.html</anchorfile>
      <anchor>a68b21071c063eeb9e7d4971f5090e684</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1SecantStep.html</anchorfile>
      <anchor>ae7c521a37bd116987116824079540154</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printHeader</name>
      <anchorfile>classROL_1_1SecantStep.html</anchorfile>
      <anchor>a431f32dfcf927311f516678101dff8b7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printName</name>
      <anchorfile>classROL_1_1SecantStep.html</anchorfile>
      <anchor>ae4b927d2f3d0b4c6e8fbac76b778005b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>print</name>
      <anchorfile>classROL_1_1SecantStep.html</anchorfile>
      <anchor>a65a0d55b04523e83a3692f48b74448c3</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;algo_state, bool print_header=false) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Secant&lt; Real &gt; &gt;</type>
      <name>secant_</name>
      <anchorfile>classROL_1_1SecantStep.html</anchorfile>
      <anchor>acaad85234a91d765dccbdffe37185684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ESecant</type>
      <name>esec_</name>
      <anchorfile>classROL_1_1SecantStep.html</anchorfile>
      <anchor>a37a277731c69d3643a0ac5b2c86a8301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gp_</name>
      <anchorfile>classROL_1_1SecantStep.html</anchorfile>
      <anchor>a5cb76df7f03812b62499c2417c45d881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>verbosity_</name>
      <anchorfile>classROL_1_1SecantStep.html</anchorfile>
      <anchor>ab97c4e2688adcf48e3539e32797d2441</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>computeObj_</name>
      <anchorfile>classROL_1_1SecantStep.html</anchorfile>
      <anchor>a26fbcfa5c1b76c123345620912d66405</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::SimulatedEqualityConstraint</name>
    <filename>classROL_1_1SimulatedEqualityConstraint.html</filename>
    <templarg></templarg>
    <base>ROL::EqualityConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimulatedEqualityConstraint</name>
      <anchorfile>classROL_1_1SimulatedEqualityConstraint.html</anchorfile>
      <anchor>ad79991cbf119d53947ec6370c438030c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimulatedEqualityConstraint</name>
      <anchorfile>classROL_1_1SimulatedEqualityConstraint.html</anchorfile>
      <anchor>a7bfb9f5184a338f173edff40b50d17f7</anchor>
      <arglist>(const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;sampler, const Teuchos::RCP&lt; ParametrizedEqualityConstraint_SimOpt&lt; Real &gt; &gt; &amp;pcon, const bool useWeights=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classROL_1_1SimulatedEqualityConstraint.html</anchorfile>
      <anchor>a8161e4bb83124bddb013bec8ca206246</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyJacobian</name>
      <anchorfile>classROL_1_1SimulatedEqualityConstraint.html</anchorfile>
      <anchor>ab0e37520abb965407e92df322cb05b2a</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classROL_1_1SimulatedEqualityConstraint.html</anchorfile>
      <anchor>ab975e344b02cffb4e542249cbbbc5d71</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAdjointHessian</name>
      <anchorfile>classROL_1_1SimulatedEqualityConstraint.html</anchorfile>
      <anchor>a036b5cb34ddd9ec19582995edd3c1e3b</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahuv, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyPreconditioner</name>
      <anchorfile>classROL_1_1SimulatedEqualityConstraint.html</anchorfile>
      <anchor>a13dce4bcfda951718a73c372f3e140a0</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Pv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt;</type>
      <name>sampler_</name>
      <anchorfile>classROL_1_1SimulatedEqualityConstraint.html</anchorfile>
      <anchor>a65bea0e69dee6320dce6f8cc4e840b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; ParametrizedEqualityConstraint_SimOpt&lt; Real &gt; &gt;</type>
      <name>pcon_</name>
      <anchorfile>classROL_1_1SimulatedEqualityConstraint.html</anchorfile>
      <anchor>a8113f2a5f442748ee6e178094d418ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>useWeights_</name>
      <anchorfile>classROL_1_1SimulatedEqualityConstraint.html</anchorfile>
      <anchor>ac90a3265391b5ea2caf710cc0c3ebf62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::SimulatedObjective</name>
    <filename>classROL_1_1SimulatedObjective.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimulatedObjective</name>
      <anchorfile>classROL_1_1SimulatedObjective.html</anchorfile>
      <anchor>a5b0f88d56309cf8353ce5185132156a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimulatedObjective</name>
      <anchorfile>classROL_1_1SimulatedObjective.html</anchorfile>
      <anchor>ac7f5a34dd233cf087f42d75700769e59</anchor>
      <arglist>(const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;sampler, const Teuchos::RCP&lt; ParametrizedObjective_SimOpt&lt; Real &gt; &gt; &amp;pobj)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1SimulatedObjective.html</anchorfile>
      <anchor>a772562dc5bb3edeb7a53a1cc8b499bd0</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1SimulatedObjective.html</anchorfile>
      <anchor>a95dae44425831e5c9646d4f3940f05b1</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1SimulatedObjective.html</anchorfile>
      <anchor>a75d1d9eb8d89e403e23aad973344f199</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt;</type>
      <name>sampler_</name>
      <anchorfile>classROL_1_1SimulatedObjective.html</anchorfile>
      <anchor>aa2343f260fc8e8f201d4639050080015</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; ParametrizedObjective_SimOpt&lt; Real &gt; &gt;</type>
      <name>pobj_</name>
      <anchorfile>classROL_1_1SimulatedObjective.html</anchorfile>
      <anchor>ac7a27d4d487fc34f6202e9e6102a376e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::SimulatedObjectiveCVaR</name>
    <filename>classROL_1_1SimulatedObjectiveCVaR.html</filename>
    <templarg></templarg>
    <base>ROL::Objective</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimulatedObjectiveCVaR</name>
      <anchorfile>classROL_1_1SimulatedObjectiveCVaR.html</anchorfile>
      <anchor>a5e809c30db19310aa8fc75a824ec5e10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimulatedObjectiveCVaR</name>
      <anchorfile>classROL_1_1SimulatedObjectiveCVaR.html</anchorfile>
      <anchor>aa3cf2c2a5933d342dcb0466b84efac03</anchor>
      <arglist>(const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;sampler, const Teuchos::RCP&lt; ParametrizedObjective_SimOpt&lt; Real &gt; &gt; &amp;pobj, const Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt; &amp;pfunc, const Real &amp;alpha)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1SimulatedObjectiveCVaR.html</anchorfile>
      <anchor>a1a8d0ef31e2380888cf43f27a65d0df9</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1SimulatedObjectiveCVaR.html</anchorfile>
      <anchor>a4739be3193dbc1450a06da2c7084b8c5</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt;</type>
      <name>sampler_</name>
      <anchorfile>classROL_1_1SimulatedObjectiveCVaR.html</anchorfile>
      <anchor>aba7d50e25e9e524a5d4678bff10a0e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; ParametrizedObjective_SimOpt&lt; Real &gt; &gt;</type>
      <name>pobj_</name>
      <anchorfile>classROL_1_1SimulatedObjectiveCVaR.html</anchorfile>
      <anchor>ad9e5d1acbd9c7d89fe8c35cd15f2fcdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt;</type>
      <name>pfunc_</name>
      <anchorfile>classROL_1_1SimulatedObjectiveCVaR.html</anchorfile>
      <anchor>a19f4699a47fe55fc0086095d93fd122c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Real</type>
      <name>alpha_</name>
      <anchorfile>classROL_1_1SimulatedObjectiveCVaR.html</anchorfile>
      <anchor>ac1deb74d9aec41e7cd23b96bb6b89e28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::SimulatedVector</name>
    <filename>classROL_1_1SimulatedVector.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Vector</base>
    <member kind="typedef">
      <type>std::vector&lt; PV &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a28b090d9330620adc6c713b8d6599caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimulatedVector</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>afb55bd65b0ea6b057201dee6f5232840</anchor>
      <arglist>(const std::vector&lt; RCPV &gt; &amp;vecs, const RCPBM &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a8c9e782c780be06cc4a485474dc58deb</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>af0ffa00daf51425e0b772c14a4b10afd</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a13810f915f0be2e1833ba97bd859d8fb</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a933a64e668a0a545da81447c27b93a70</anchor>
      <arglist>(const Real alpha, const V &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a4009796fdfc19a84b37f2f74584629df</anchor>
      <arglist>(const V &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a8193899fd6e9b23acd6fef3aca262e55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RCPV</type>
      <name>clone</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>ad19439364ab6dd395952519da33b5db7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>dual</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>aad4752523a8dc80e64b52c9481c17690</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>RCPV</type>
      <name>basis</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a20ae6e1ec078c6154701a965b824b4f8</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a17687c7aac0a034de0e5bcadcb9bede3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a2e1029f69676d00f8d65923b442d1a81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyUnary</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a5ac16b4ed2f1a491823b4be84af3facb</anchor>
      <arglist>(const Elementwise::UnaryFunction&lt; Real &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBinary</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a60e713cf28f968a52c00346101c62ca8</anchor>
      <arglist>(const Elementwise::BinaryFunction&lt; Real &gt; &amp;f, const V &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>reduce</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a7090c27012e5836ac5bc2a5b0c30de67</anchor>
      <arglist>(const Elementwise::ReductionOp&lt; Real &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>get</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a29159931b81b67b1718e9719b3feb51f</anchor>
      <arglist>(size_type i) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>get</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a8358fdd9952810860d81fbe8ce06e6a4</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a71873c8a5fa47d89825a8e3278cd7964</anchor>
      <arglist>(size_type i, const V &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>aaa6ef39707836fe138ad0dd1ac356686</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>numVectors</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>ab7bf571d98088cd9b01f3ca25c1099b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a64a3d5642e05f7d278482e358c5f82c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Teuchos::RCP&lt; V &gt;</type>
      <name>RCPV</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a0f073b2faad9c2aaf240b4703cf9ee69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt;</type>
      <name>RCPBM</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a562ed263c6901930da7752f2e250364c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>SimulatedVector&lt; Real &gt;</type>
      <name>PV</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a7929ac44f05461b439f64cae00fbf1f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::vector&lt; RCPV &gt;</type>
      <name>vecs_</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a8da12af4cbb2ddf1b0150b229083923d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt;</type>
      <name>bman_</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>a8c9cd778c831c6f40fb109f3b74e90db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RCPV &gt;</type>
      <name>dual_vecs_</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>ae2ee78967da6b887c8a9c662b0149b50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PV &gt;</type>
      <name>dual_pvec_</name>
      <anchorfile>classROL_1_1SimulatedVector.html</anchorfile>
      <anchor>ac02abfc3885486484a8e8406b982cca1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::SingletonKusuoka</name>
    <filename>classROL_1_1SingletonKusuoka.html</filename>
    <templarg>Real</templarg>
    <base>ROL::RiskMeasure</base>
    <member kind="function">
      <type></type>
      <name>SingletonKusuoka</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>a8742a958063d564f25eb126899c3cb89</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SingletonKusuoka</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>a3a7fe3d6b98ca5d32a3771d333160cf6</anchor>
      <arglist>(const Teuchos::RCP&lt; Distribution&lt; Real &gt; &gt; &amp;dist, const int nQuad, const Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt; &amp;pf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SingletonKusuoka</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>a29f8e56ded9fbdcab3d2056885b0f622</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SingletonKusuoka</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>ad1753af80206a52c3d87c538499b46f5</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;pts, const std::vector&lt; Real &gt; &amp;wts, const Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt; &amp;pf)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>computeStatistic</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>a80d6bf6cfc145b6b2df1276dd32c3ca7</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>a7a3a895245846423de6ef5e7e2e2573d</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>ad78c612371e9519e39fe37095de01abd</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, const Vector&lt; Real &gt; &amp;x, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;v0, const Vector&lt; Real &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>adc5f16a80d3d639e144af743daccf6ea</anchor>
      <arglist>(const Real val, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>ae7e91f111e474a8dbf94c3b116abea79</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>a609492b056bcab4a58eae91817b8bbdf</anchor>
      <arglist>(const Real val, const Vector&lt; Real &gt; &amp;g, const Real gv, const Vector&lt; Real &gt; &amp;hv, const Real weight)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getValue</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>a3fe4ce9a83a3b741c9e50365e0d00678</anchor>
      <arglist>(SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGradient</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>a6e7a32ebbf2b2849b2caf247e0c29e26</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHessVec</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>a11a327595351bbc6d3aa2dc71910a3b8</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, SampleGenerator&lt; Real &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildMixedQuantile</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>a4d9d420d2b4dfe5f5f6ddeafbedd6776</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;pts, const std::vector&lt; Real &gt; &amp;wts, const Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt; &amp;pf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildQuadFromDist</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>afd71b2ca3902aab3a52b47efcebd6685</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;pts, std::vector&lt; Real &gt; &amp;wts, const int nQuad, const Teuchos::RCP&lt; Distribution&lt; Real &gt; &gt; &amp;dist) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>a9a44c1f26bce84df82d9d08b833cf591</anchor>
      <arglist>(Teuchos::RCP&lt; Distribution&lt; Real &gt; &gt; &amp;dist=Teuchos::null) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; MixedQuantileQuadrangle&lt; Real &gt; &gt;</type>
      <name>mqq_</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>af70a62f1021cb663f6e4a860c8deed3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt;</type>
      <name>plusFunction_</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>acdc5ce85c5ddcba55ddda3c401aab100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>wts_</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>ad43dbb723b581874d2932006b582305f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>pts_</name>
      <anchorfile>classROL_1_1SingletonKusuoka.html</anchorfile>
      <anchor>af1eb6ef9a7f62506e2524c4e2a93468c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Smale</name>
    <filename>classROL_1_1Smale.html</filename>
    <templarg></templarg>
    <base>ROL::Distribution</base>
    <member kind="function">
      <type></type>
      <name>Smale</name>
      <anchorfile>classROL_1_1Smale.html</anchorfile>
      <anchor>a6c9ffa7a372dc3fbbcb396ee8990c67e</anchor>
      <arglist>(const Real a=0., const Real b=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Smale</name>
      <anchorfile>classROL_1_1Smale.html</anchorfile>
      <anchor>a812407352793088c7a6aea3ade51195d</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluatePDF</name>
      <anchorfile>classROL_1_1Smale.html</anchorfile>
      <anchor>ab358a79c5ca65d851ae421edb1ba268a</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluateCDF</name>
      <anchorfile>classROL_1_1Smale.html</anchorfile>
      <anchor>a88138f62e4665f4a40ebcaef89012a01</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>integrateCDF</name>
      <anchorfile>classROL_1_1Smale.html</anchorfile>
      <anchor>a470e39e93f745ec9a562c872f86a4ae6</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>invertCDF</name>
      <anchorfile>classROL_1_1Smale.html</anchorfile>
      <anchor>a0c9bcc20cf9cc25d3a944c30713fed15</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>moment</name>
      <anchorfile>classROL_1_1Smale.html</anchorfile>
      <anchor>aee645564c3d70b64ff5bb0d5bfcdf831</anchor>
      <arglist>(const size_t m) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>lowerBound</name>
      <anchorfile>classROL_1_1Smale.html</anchorfile>
      <anchor>ae9aa0523ee66289c9768e81fcdc1bb5a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>upperBound</name>
      <anchorfile>classROL_1_1Smale.html</anchorfile>
      <anchor>a9325f3a08b81e58aacab2f9c5ccf7476</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1Smale.html</anchorfile>
      <anchor>afd3a7959a2fa269471a4d278bd460f1b</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>a_</name>
      <anchorfile>classROL_1_1Smale.html</anchorfile>
      <anchor>acaa1fdd2d733e1ac8cb66e0002c8433c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>b_</name>
      <anchorfile>classROL_1_1Smale.html</anchorfile>
      <anchor>aa5c0bf70e46529285a295c3030090518</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::SmoothedWorstCaseQuadrangle</name>
    <filename>classROL_1_1SmoothedWorstCaseQuadrangle.html</filename>
    <templarg></templarg>
    <base>ROL::ExpectationQuad</base>
    <member kind="function">
      <type></type>
      <name>SmoothedWorstCaseQuadrangle</name>
      <anchorfile>classROL_1_1SmoothedWorstCaseQuadrangle.html</anchorfile>
      <anchor>a00c50752951b9ac7f599ea708e79047b</anchor>
      <arglist>(const Real eps)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmoothedWorstCaseQuadrangle</name>
      <anchorfile>classROL_1_1SmoothedWorstCaseQuadrangle.html</anchorfile>
      <anchor>a7656078ad60c64d060289e567bcb55d4</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>error</name>
      <anchorfile>classROL_1_1SmoothedWorstCaseQuadrangle.html</anchorfile>
      <anchor>a7777a355b1e92ccc4c98d9869df64c07</anchor>
      <arglist>(Real x, int deriv=0)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>regret</name>
      <anchorfile>classROL_1_1SmoothedWorstCaseQuadrangle.html</anchorfile>
      <anchor>abccbbf9a4555098e1f67a9a3c99c1b92</anchor>
      <arglist>(Real x, int deriv=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkRegret</name>
      <anchorfile>classROL_1_1SmoothedWorstCaseQuadrangle.html</anchorfile>
      <anchor>a3bb9277427d201eaa176130b2e6193a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1SmoothedWorstCaseQuadrangle.html</anchorfile>
      <anchor>ad1119750dc7f423b66ee90f89b75e464</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>eps_</name>
      <anchorfile>classROL_1_1SmoothedWorstCaseQuadrangle.html</anchorfile>
      <anchor>ae182457f9359191441b5568645c40ab9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::SROMGenerator</name>
    <filename>classROL_1_1SROMGenerator.html</filename>
    <templarg></templarg>
    <base>ROL::SampleGenerator</base>
    <member kind="function">
      <type></type>
      <name>SROMGenerator</name>
      <anchorfile>classROL_1_1SROMGenerator.html</anchorfile>
      <anchor>aa4abefc49cd3dd0bb0fa249a183f8ef7</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman, const std::vector&lt; Teuchos::RCP&lt; Distribution&lt; Real &gt; &gt; &gt; &amp;dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classROL_1_1SROMGenerator.html</anchorfile>
      <anchor>a5733cbc2e7594d2311afa726b275b388</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>pruneSamples</name>
      <anchorfile>classROL_1_1SROMGenerator.html</anchorfile>
      <anchor>abee9c558a286181fb0f24b578fc014f1</anchor>
      <arglist>(const ProbabilityVector&lt; Real &gt; &amp;prob, const AtomVector&lt; Real &gt; &amp;atom)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>get_scaling_vectors</name>
      <anchorfile>classROL_1_1SROMGenerator.html</anchorfile>
      <anchor>ab3f85e7e835107539a8010865f524a8c</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;typw, std::vector&lt; Real &gt; &amp;typx) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize_vectors</name>
      <anchorfile>classROL_1_1SROMGenerator.html</anchorfile>
      <anchor>aed78d8cf421d1819a444e9a1d294f513</anchor>
      <arglist>(Teuchos::RCP&lt; ProbabilityVector&lt; Real &gt; &gt; &amp;prob, Teuchos::RCP&lt; ProbabilityVector&lt; Real &gt; &gt; &amp;prob_lo, Teuchos::RCP&lt; ProbabilityVector&lt; Real &gt; &gt; &amp;prob_hi, Teuchos::RCP&lt; ProbabilityVector&lt; Real &gt; &gt; &amp;prob_eq, Teuchos::RCP&lt; AtomVector&lt; Real &gt; &gt; &amp;atom, Teuchos::RCP&lt; AtomVector&lt; Real &gt; &gt; &amp;atom_lo, Teuchos::RCP&lt; AtomVector&lt; Real &gt; &gt; &amp;atom_hi, Teuchos::RCP&lt; AtomVector&lt; Real &gt; &gt; &amp;atom_eq, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;vec, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;vec_lo, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;vec_hi, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;vec_eq, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize_objective</name>
      <anchorfile>classROL_1_1SROMGenerator.html</anchorfile>
      <anchor>a8b4a6f0f608e761eccf3df7fa9dc2067</anchor>
      <arglist>(std::vector&lt; Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &gt; &amp;obj_vec, Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const std::vector&lt; Teuchos::RCP&lt; Distribution&lt; Real &gt; &gt; &gt; &amp;dist, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman, const bool optProb, const bool optAtom, Teuchos::ParameterList &amp;list) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize_optimizer</name>
      <anchorfile>classROL_1_1SROMGenerator.html</anchorfile>
      <anchor>a679e28cbc0931782c26a97a18a7f2ff7</anchor>
      <arglist>(Teuchos::RCP&lt; Algorithm&lt; Real &gt; &gt; &amp;algo, Teuchos::ParameterList &amp;parlist, const bool optProb) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>check_objective</name>
      <anchorfile>classROL_1_1SROMGenerator.html</anchorfile>
      <anchor>aeb8354ef20dded39a195cd0ef3094e2c</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman, const bool optProb, const bool optAtom)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>check_constraint</name>
      <anchorfile>classROL_1_1SROMGenerator.html</anchorfile>
      <anchor>a3efb3ba99cab456fc741413e740184e8</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;con, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman, const bool optProb)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::ParameterList</type>
      <name>parlist_</name>
      <anchorfile>classROL_1_1SROMGenerator.html</anchorfile>
      <anchor>aa99e9010d2fe5f4eee86a67a1d7c49c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Teuchos::RCP&lt; Distribution&lt; Real &gt; &gt; &gt;</type>
      <name>dist_</name>
      <anchorfile>classROL_1_1SROMGenerator.html</anchorfile>
      <anchor>a521d0cf26411e44fc2bf198864515cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const int</type>
      <name>dimension_</name>
      <anchorfile>classROL_1_1SROMGenerator.html</anchorfile>
      <anchor>a42fae7395322a2d912ffa72370750645</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numSamples_</name>
      <anchorfile>classROL_1_1SROMGenerator.html</anchorfile>
      <anchor>a66d429f647c92237aa22b27ddf0c4722</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numMySamples_</name>
      <anchorfile>classROL_1_1SROMGenerator.html</anchorfile>
      <anchor>a261fd9a7917d988127040984b3c8ea75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numNewSamples_</name>
      <anchorfile>classROL_1_1SROMGenerator.html</anchorfile>
      <anchor>a475208fe6f4b835be8e43f57395cb8a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>adaptive_</name>
      <anchorfile>classROL_1_1SROMGenerator.html</anchorfile>
      <anchor>afc59582915be7df4f958e67e2002952a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>print_</name>
      <anchorfile>classROL_1_1SROMGenerator.html</anchorfile>
      <anchor>a8ad3700bd5fd20d4187328ad99bcd5af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>ptol_</name>
      <anchorfile>classROL_1_1SROMGenerator.html</anchorfile>
      <anchor>a82a847ee017ba8b500bdef26fd8d1f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>atol_</name>
      <anchorfile>classROL_1_1SROMGenerator.html</anchorfile>
      <anchor>a5ef6db25946ea8be175b4327654ad344</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::SROMVector</name>
    <filename>classROL_1_1SROMVector.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Vector</base>
    <member kind="function">
      <type></type>
      <name>SROMVector</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>ac0bf672b067e121e37ecc825806109ac</anchor>
      <arglist>(const Teuchos::RCP&lt; ProbabilityVector&lt; Real &gt; &gt; &amp;pvec, const Teuchos::RCP&lt; AtomVector&lt; Real &gt; &gt; &amp;avec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>a09673ca521fef2e0d7564a13708a4911</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>a643ab9fbe7a22ac7f63d62834b22136b</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>a86c6d9cad3da2593a54803e4b009cfe4</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>a03979f5ac6e7ea7013d537fdd16b46f5</anchor>
      <arglist>(const Real alpha, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>a732f6277760b06d67a99dc95f9431cb7</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>a1910deced04b70df210b6baf924cd92e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>a6be8f722876951d3cbd5633aef520aad</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>a7785cda377579743c60e7a2e9eb6755c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>a90dbbb9ffe652a4566c73663595c18d3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyUnary</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>a744b746164ec454d7d271d87d83e190b</anchor>
      <arglist>(const Elementwise::UnaryFunction&lt; Real &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBinary</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>a5028dfd67561f9e5a9b76f8301a89315</anchor>
      <arglist>(const Elementwise::BinaryFunction&lt; Real &gt; &amp;f, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>reduce</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>aea00317adb54236dfdcd7efa0cd1264e</anchor>
      <arglist>(const Elementwise::ReductionOp&lt; Real &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>const Teuchos::RCP&lt; const AtomVector&lt; Real &gt; &gt;</type>
      <name>getAtomVector</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>a3459ecc1b2f85067fef112aa51ee1f39</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const Teuchos::RCP&lt; const ProbabilityVector&lt; Real &gt; &gt;</type>
      <name>getProbabilityVector</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>adb458450205989aeefe7469d65233e8f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; AtomVector&lt; Real &gt; &gt;</type>
      <name>getAtomVector</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>a14ff2186a8a7753b2914194a6d1c66a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; ProbabilityVector&lt; Real &gt; &gt;</type>
      <name>getProbabilityVector</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>ab397a9e545419ef993829fe84a8145a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAtomVector</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>a906e46a3b619a8fd438f74e944a429c6</anchor>
      <arglist>(const AtomVector&lt; Real &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProbabilityVector</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>aca85392177d3dc65a4aea6cc8e2b034e</anchor>
      <arglist>(const ProbabilityVector&lt; Real &gt; &amp;vec)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>a79b0762b5415fb433aac7e3cb8dd64b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; ProbabilityVector&lt; Real &gt; &gt;</type>
      <name>pvec_</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>a8e0d4ca2f5421c262e5fb2577a026756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; AtomVector&lt; Real &gt; &gt;</type>
      <name>avec_</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>a8f7150d7f27e0549296df202ce496d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dual_pvec_</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>a8ca0f853c5d04219ad68251a397b699e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dual_avec_</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>a83560b59b57d6fc71865f5044e87a4d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SROMVector&lt; Real &gt; &gt;</type>
      <name>dual_vec_</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>afe345932bb59de51040755a286361400</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isDualInitialized_</name>
      <anchorfile>classROL_1_1SROMVector.html</anchorfile>
      <anchor>ad81ebd538bfdd925b202fee840cc75ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::StatusTest</name>
    <filename>classROL_1_1StatusTest.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StatusTest</name>
      <anchorfile>classROL_1_1StatusTest.html</anchorfile>
      <anchor>a830ba140ebdac36bb32a3d3b452f4cff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StatusTest</name>
      <anchorfile>classROL_1_1StatusTest.html</anchorfile>
      <anchor>aa04415e6e06d22ebc44f3beeba1e2fce</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StatusTest</name>
      <anchorfile>classROL_1_1StatusTest.html</anchorfile>
      <anchor>a7e533468fb0f4e56d366547ea64f935f</anchor>
      <arglist>(Real gtol=1.e-6, Real stol=1.e-12, int max_iter=100)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>classROL_1_1StatusTest.html</anchorfile>
      <anchor>a3b08ca87dbc22bae119c4b9febcdb1a7</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;state)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>gtol_</name>
      <anchorfile>classROL_1_1StatusTest.html</anchorfile>
      <anchor>a5d811431703cd9c0598dbc32e0cc26c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>stol_</name>
      <anchorfile>classROL_1_1StatusTest.html</anchorfile>
      <anchor>a03d548de2fac53f296909608bdde5b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>max_iter_</name>
      <anchorfile>classROL_1_1StatusTest.html</anchorfile>
      <anchor>a41d5ab96cd48fc668998c52160642ba8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StatusTest_PDAS</name>
    <filename>classStatusTest__PDAS.html</filename>
    <templarg></templarg>
    <base>ROL::StatusTest</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StatusTest_PDAS</name>
      <anchorfile>classStatusTest__PDAS.html</anchorfile>
      <anchor>a11eb963a1c8bcf1a05c5c495e72a58c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StatusTest_PDAS</name>
      <anchorfile>classStatusTest__PDAS.html</anchorfile>
      <anchor>ad74555411c2fc5ecdc70e527273000bc</anchor>
      <arglist>(Real gtol=1.e-6, Real stol=1.e-12, int max_iter=100)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>classStatusTest__PDAS.html</anchorfile>
      <anchor>a5e45620cbd135f8063e2227e89f9bc08</anchor>
      <arglist>(ROL::AlgorithmState&lt; Real &gt; &amp;state)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>gtol_</name>
      <anchorfile>classStatusTest__PDAS.html</anchorfile>
      <anchor>ac63321ffab86669b797ae4d50da7d52c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>stol_</name>
      <anchorfile>classStatusTest__PDAS.html</anchorfile>
      <anchor>a8e3cb690514f452e3755b4252a19f743</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>max_iter_</name>
      <anchorfile>classStatusTest__PDAS.html</anchorfile>
      <anchor>af0361ef07f82d6c5adb50a9bcb405ab9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::StatusTestFactory</name>
    <filename>classROL_1_1StatusTestFactory.html</filename>
    <templarg>Real</templarg>
    <member kind="function">
      <type></type>
      <name>~StatusTestFactory</name>
      <anchorfile>classROL_1_1StatusTestFactory.html</anchorfile>
      <anchor>a8c474e82a43a9755ca688dd078816fb0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; StatusTest&lt; Real &gt; &gt;</type>
      <name>getStatusTest</name>
      <anchorfile>classROL_1_1StatusTestFactory.html</anchorfile>
      <anchor>a40a68324e1cdcc1a43aa9128f97387a8</anchor>
      <arglist>(const std::string step, Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::StdBoundConstraint</name>
    <filename>classROL_1_1StdBoundConstraint.html</filename>
    <templarg></templarg>
    <base>ROL::BoundConstraint</base>
    <member kind="function">
      <type></type>
      <name>StdBoundConstraint</name>
      <anchorfile>classROL_1_1StdBoundConstraint.html</anchorfile>
      <anchor>a44a7b98c0f5282aeefbbb7abaf79a6a8</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;l, std::vector&lt; Real &gt; &amp;u, Real scale=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>classROL_1_1StdBoundConstraint.html</anchorfile>
      <anchor>a6c53e833b4df6f62c599a326855f7ca5</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classROL_1_1StdBoundConstraint.html</anchorfile>
      <anchor>acb8931613d2a7d2d7e2742553021f440</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classROL_1_1StdBoundConstraint.html</anchorfile>
      <anchor>a757f4ff948ec3d738984189a5736fcc3</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classROL_1_1StdBoundConstraint.html</anchorfile>
      <anchor>aac84bb58bf8bc6d3dc3fa0d78e8687fc</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classROL_1_1StdBoundConstraint.html</anchorfile>
      <anchor>ab2bf796b47fb41325d21a68fc4d1d1fd</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneLowerActive</name>
      <anchorfile>classROL_1_1StdBoundConstraint.html</anchorfile>
      <anchor>a41e2b847ee1a8880b4788906e9fa9c83</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneUpperActive</name>
      <anchorfile>classROL_1_1StdBoundConstraint.html</anchorfile>
      <anchor>a2b3a9e47d34af52544dd728528a4d011</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneActive</name>
      <anchorfile>classROL_1_1StdBoundConstraint.html</anchorfile>
      <anchor>a68c530dbee498bd776b715537052a380</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real eps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToUpperBound</name>
      <anchorfile>classROL_1_1StdBoundConstraint.html</anchorfile>
      <anchor>a8a0edac20aede42afbae955ec67a9e28</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorToLowerBound</name>
      <anchorfile>classROL_1_1StdBoundConstraint.html</anchorfile>
      <anchor>abb831f7a25d566306adc76af0d892477</anchor>
      <arglist>(ROL::Vector&lt; Real &gt; &amp;l)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>dim_</name>
      <anchorfile>classROL_1_1StdBoundConstraint.html</anchorfile>
      <anchor>a4228fbee0732d8d3b2298498bb3818ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>x_lo_</name>
      <anchorfile>classROL_1_1StdBoundConstraint.html</anchorfile>
      <anchor>a510b37e9de6f82c7814b86b9436820e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>x_up_</name>
      <anchorfile>classROL_1_1StdBoundConstraint.html</anchorfile>
      <anchor>a007a001a941a4c6be9a31b17df838528</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>min_diff_</name>
      <anchorfile>classROL_1_1StdBoundConstraint.html</anchorfile>
      <anchor>a97437e40c71eafe2c0fe3bc7f21990b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>scale_</name>
      <anchorfile>classROL_1_1StdBoundConstraint.html</anchorfile>
      <anchor>a7040712d3c6f2d2dfa60cb851870fd89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::StdObjective</name>
    <filename>classROL_1_1StdObjective.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">ROL::Objective</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1StdObjective.html</anchorfile>
      <anchor>aa1b0dae48ef0c9c8f0ca8253118caa2a</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1StdObjective.html</anchorfile>
      <anchor>a514b9c488746c9938e2c718ca570dd36</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, bool flag=true, int iter=-1)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1StdObjective.html</anchorfile>
      <anchor>ad6ccfe24876ab20b95f34ae5fab177a9</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)=0</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1StdObjective.html</anchorfile>
      <anchor>ac45a563471e3bc7b74fa7117382eed26</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1StdObjective.html</anchorfile>
      <anchor>a5539bdeb20af04097742b1b0452920cf</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;g, const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classROL_1_1StdObjective.html</anchorfile>
      <anchor>ab9077d198b562390bd677f9a39ffec84</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>dirDeriv</name>
      <anchorfile>classROL_1_1StdObjective.html</anchorfile>
      <anchor>a481965e0f5cab5407eb3d7326c1afc92</anchor>
      <arglist>(const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;d, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dirDeriv</name>
      <anchorfile>classROL_1_1StdObjective.html</anchorfile>
      <anchor>a4d3cef42db8bc4e9f39cb0eb143193d1</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;d, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1StdObjective.html</anchorfile>
      <anchor>a112e82164c45e9edbeab7820c5dff227</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;hv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classROL_1_1StdObjective.html</anchorfile>
      <anchor>aa89436616eea41349aed8da710c87821</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>invHessVec</name>
      <anchorfile>classROL_1_1StdObjective.html</anchorfile>
      <anchor>ae85d0618aad34ca50729153545138850</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;hv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invHessVec</name>
      <anchorfile>classROL_1_1StdObjective.html</anchorfile>
      <anchor>a00a3ff513e8444537986f671158f8d6f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>precond</name>
      <anchorfile>classROL_1_1StdObjective.html</anchorfile>
      <anchor>ad8786ca06b2ff2eb73d220901ad3fb01</anchor>
      <arglist>(std::vector&lt; Real &gt; &amp;Pv, const std::vector&lt; Real &gt; &amp;v, const std::vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>precond</name>
      <anchorfile>classROL_1_1StdObjective.html</anchorfile>
      <anchor>ab6fa7c85f56d06db9098d9abce215d58</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;Pv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::StdTeuchosBatchManager</name>
    <filename>classROL_1_1StdTeuchosBatchManager.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>ROL::TeuchosBatchManager</base>
    <member kind="function">
      <type></type>
      <name>StdTeuchosBatchManager</name>
      <anchorfile>classROL_1_1StdTeuchosBatchManager.html</anchorfile>
      <anchor>a419b80deaf959c441aeb1655c0210335</anchor>
      <arglist>(const Teuchos::RCP&lt; const Teuchos::Comm&lt; Ordinal &gt; &gt; &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sumAll</name>
      <anchorfile>classROL_1_1StdTeuchosBatchManager.html</anchorfile>
      <anchor>a750284ac05d66e575f9b79a5d2279ebb</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;input, Vector&lt; Real &gt; &amp;output)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::StdVector</name>
    <filename>classROL_1_1StdVector.html</filename>
    <templarg>Real</templarg>
    <templarg>Element</templarg>
    <base>ROL::Vector</base>
    <member kind="function">
      <type></type>
      <name>StdVector</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a590375f8ffe8879bbcc844dbd5cbdb25</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt; &amp;std_vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a66cda6a0b5fd53de75d050664477cb13</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a09c716a151862c8497d0d895497b2996</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a2f71a0bcff33aa9029311ec0371af5d4</anchor>
      <arglist>(const Real alpha, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a02404023d0ef3fb1ef68c226d3bba99e</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>dot</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>ac6c4e2064b600d3ca5ce0822a5b98cdc</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>ad0d98afe1e7847adc9c9e0ee6e1adfcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>ad09b956d2abbdbcf79eac2e6b00d08c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a9b02a6409d59f2d32ecf1514455765b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a4d008e42264d3c1f72c4724ea801b9de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>aad04afe8cf6af114c1327d5eafa2e543</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>ae97d15964ac60d41f1edf21f4ecb7fd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyUnary</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>ad58ed7e114a0bc467cd3cc53016dfc79</anchor>
      <arglist>(const Elementwise::UnaryFunction&lt; Real &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBinary</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>aa4a9d49f0dbe1f66a575acb21453db1f</anchor>
      <arglist>(const Elementwise::BinaryFunction&lt; Real &gt; &amp;f, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>reduce</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a105b8b163491737834abdb3813b2e971</anchor>
      <arglist>(const Elementwise::ReductionOp&lt; Real &gt; &amp;r) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a9db12daaab2f23d542db3ad4e1b27b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Element &gt; &gt;</type>
      <name>std_vec_</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a84a36811a7a99352d28017dc8587e31b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StdVector&lt; Real &gt;</name>
    <filename>classROL_1_1StdVector.html</filename>
    <base>ROL::Vector</base>
    <member kind="function">
      <type></type>
      <name>StdVector</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a590375f8ffe8879bbcc844dbd5cbdb25</anchor>
      <arglist>(const Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt; &amp;std_vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a66cda6a0b5fd53de75d050664477cb13</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a09c716a151862c8497d0d895497b2996</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a2f71a0bcff33aa9029311ec0371af5d4</anchor>
      <arglist>(const Real alpha, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a02404023d0ef3fb1ef68c226d3bba99e</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>dot</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>ac6c4e2064b600d3ca5ce0822a5b98cdc</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>ad0d98afe1e7847adc9c9e0ee6e1adfcf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>ad09b956d2abbdbcf79eac2e6b00d08c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a9b02a6409d59f2d32ecf1514455765b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>getVector</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a4d008e42264d3c1f72c4724ea801b9de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>aad04afe8cf6af114c1327d5eafa2e543</anchor>
      <arglist>(const int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>ae97d15964ac60d41f1edf21f4ecb7fd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyUnary</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>ad58ed7e114a0bc467cd3cc53016dfc79</anchor>
      <arglist>(const Elementwise::UnaryFunction&lt; Real &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBinary</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>aa4a9d49f0dbe1f66a575acb21453db1f</anchor>
      <arglist>(const Elementwise::BinaryFunction&lt; Real &gt; &amp;f, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>reduce</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a105b8b163491737834abdb3813b2e971</anchor>
      <arglist>(const Elementwise::ReductionOp&lt; Real &gt; &amp;r) const</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;::size_type</type>
      <name>uint</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a9db12daaab2f23d542db3ad4e1b27b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>std_vec_</name>
      <anchorfile>classROL_1_1StdVector.html</anchorfile>
      <anchor>a84a36811a7a99352d28017dc8587e31b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Step</name>
    <filename>classROL_1_1Step.html</filename>
    <templarg>Real</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Step</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>a91b6b915aca6b0ab1f575667554c2dde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Step</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>aa753242db8c869bcb6d02b7b0c87ee57</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>a04eaca86e23ca0428ae7c5f1b7611d6a</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>aafb9a5621692657c4535a201e229c952</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>af8492a692617a2c598b5f5b99ba092fa</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, Vector&lt; Real &gt; &amp;l, const Vector&lt; Real &gt; &amp;c, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>aab164e47e2b14cf37fffb48a2289bb02</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;g, Vector&lt; Real &gt; &amp;l, const Vector&lt; Real &gt; &amp;c, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>a2d8e5dbce0ae866b52346ae133eb13fe</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>ade3b97114d7166acd6d5ea5a443a6bb8</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>a47f8173d4fbd7cccca6f4557b7332d90</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;l, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>ad66356cb21a448b6ec8469174219e59d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, Vector&lt; Real &gt; &amp;l, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>a6d6095e19ba2bb812b33d5d4be1f171f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;l, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>a8c320e08d8c9c813c86152d4bbefe9fc</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, Vector&lt; Real &gt; &amp;l, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, EqualityConstraint&lt; Real &gt; &amp;con, BoundConstraint&lt; Real &gt; &amp;bnd, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>aa03b9eef72a3ac4d682404e6a0198fc9</anchor>
      <arglist>(OptimizationProblem&lt; Real &gt; &amp;opt, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>abe15fdcb85d797ef9c99c635f129280e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, OptimizationProblem&lt; Real &gt; &amp;opt, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>ac25f2a5763d9755935733053c651f896</anchor>
      <arglist>(OptimizationProblem&lt; Real &gt; &amp;opt, const Vector&lt; Real &gt; &amp;s, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>printHeader</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>abdd938cbde13ba160e0f49bc2e196aed</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>printName</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>afc4bec851fc277f38971e9e2fe411400</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>print</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>a23e85db8b198ad680604f4d5e03c44d9</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;algo_state, bool printHeader=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Teuchos::RCP&lt; const StepState&lt; Real &gt; &gt;</type>
      <name>getStepState</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>ac9b6644f11f4e72ee3c87676d425aebc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Teuchos::RCP&lt; StepState&lt; Real &gt; &gt;</type>
      <name>getState</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>a54af49df0102b85c0dbcfe0cacb0bdda</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; StepState&lt; Real &gt; &gt;</type>
      <name>state_</name>
      <anchorfile>classROL_1_1Step.html</anchorfile>
      <anchor>aa8ff6769c1ff66a94e63afe30f363d0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::StepFactory</name>
    <filename>classROL_1_1StepFactory.html</filename>
    <templarg>Real</templarg>
    <member kind="function">
      <type></type>
      <name>~StepFactory</name>
      <anchorfile>classROL_1_1StepFactory.html</anchorfile>
      <anchor>a13aacb7d59146c9c975461454d232066</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Step&lt; Real &gt; &gt;</type>
      <name>getStep</name>
      <anchorfile>classROL_1_1StepFactory.html</anchorfile>
      <anchor>a6c97feedcb1fb7229e7d9f0b6e96aa44</anchor>
      <arglist>(const std::string &amp;type, Teuchos::ParameterList &amp;parlist) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ROL::StepState</name>
    <filename>structROL_1_1StepState.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>StepState</name>
      <anchorfile>structROL_1_1StepState.html</anchorfile>
      <anchor>a4bdaa7d713b3bea0fca7e712633a3821</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gradientVec</name>
      <anchorfile>structROL_1_1StepState.html</anchorfile>
      <anchor>a5f3f20498a97c6d5147417e157269a99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>descentVec</name>
      <anchorfile>structROL_1_1StepState.html</anchorfile>
      <anchor>aedf32fa240466ce9994b551732d086e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>constraintVec</name>
      <anchorfile>structROL_1_1StepState.html</anchorfile>
      <anchor>a834e8eed1da1b868d2a760c5ce5d6531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>searchSize</name>
      <anchorfile>structROL_1_1StepState.html</anchorfile>
      <anchor>ab607620777dca7a51225fc60d2c79df7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::StochasticProblem</name>
    <filename>classROL_1_1StochasticProblem.html</filename>
    <templarg>Real</templarg>
    <base>ROL::OptimizationProblem</base>
    <member kind="function">
      <type></type>
      <name>StochasticProblem</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>a6c248758cd9e48976a45b80ec7e88265</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StochasticProblem</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>a19d40a4d5f0831d8ae9ceeea0365dae3</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StochasticProblem</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>a62ae67050ee70848aed3c212925b82f6</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;sampler, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StochasticProblem</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>aaf0005fc354b7daa4852ffb03e313928</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;vsampler, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;gsampler, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StochasticProblem</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>acbbe1ccccd3a63200ab31fe0ba6897fb</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;vsampler, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;gsampler, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;hsampler, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StochasticProblem</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>a57f53bd9bae74d8126f48ffc38fe2467</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;sampler, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;bnd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StochasticProblem</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>a94b371dba055bbe8c392c155517346fc</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;vsampler, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;gsampler, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;bnd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StochasticProblem</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>ad62cf45c63bbff2e6b7a5a9b05b81e31</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;obj, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;vsampler, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;gsampler, const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;hsampler, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;vec, const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;bnd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterList</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>abbefabec448a24655e81946f66ce9d0c</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValueSampleGenerator</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>a5cb068fe35ce062c5acec3692890d543</anchor>
      <arglist>(const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;vsampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGradientSampleGenerator</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>a9cb96439bdbf2b53a4b3500b236eea74</anchor>
      <arglist>(const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;gsampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHessVecSampleGenerator</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>aadd0bfb31024da234377bf84c2de5075</anchor>
      <arglist>(const Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;hsampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObjective</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>a36d85e0a574b7ba66874557287426e93</anchor>
      <arglist>(const Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt; &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSolutionVector</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>a96407831acb5ab6ce195b1efc8dab8de</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSolutionStatistic</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>a72a0b40df4c2cc80836b9b8c5c3ea1bf</anchor>
      <arglist>(const Real stat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundConstraint</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>aa48875325836b614cb10b4f66baaaf7b</anchor>
      <arglist>(const Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;bnd)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getSolutionStatistic</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>a79c4b6cf6f2eb33feb77597aee4fb1a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkObjectiveGradient</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>a223053f300d531e9ce4fd6a19ba585e9</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;d, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int numSteps=ROL_NUM_CHECKDERIV_STEPS, const int order=1)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>checkObjectiveHessVec</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>aa6984f63c5aa57e930b52e248a21c088</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;v, const bool printToStream=true, std::ostream &amp;outStream=std::cout, const int numSteps=ROL_NUM_CHECKDERIV_STEPS, const int order=1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>computeSampleMean</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>afd96240b5e8bceb721f2514f70958e54</anchor>
      <arglist>(Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt; &amp;sampler)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>createVector</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>ad279c4861138408a95d2d19e25a4df27</anchor>
      <arglist>(Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;vec, Real stat=1)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Teuchos::ParameterList &gt;</type>
      <name>parlist_</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>ae537a07c9e655c0b514bcfbc298b7531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; ParametrizedObjective&lt; Real &gt; &gt;</type>
      <name>ORIGINAL_obj_</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>ac7085807ac582fce17b4773cfad999bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>ORIGINAL_vec_</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>a2a60957e9a3e453d4c566207a906ea3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt;</type>
      <name>ORIGINAL_bnd_</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>a3490234a0a1576085efbe1feddb5be08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Objective&lt; Real &gt; &gt;</type>
      <name>obj_</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>af7d0d814dd3f656156454664661babe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>vec_</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>afbce608a9975fd44f00f8ba3811be3e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt;</type>
      <name>bnd_</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>aa94179cd9e6e1cccca0e5995a0650838</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt;</type>
      <name>vsampler_</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>ada966c885aff2dc364e12101c5125fb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt;</type>
      <name>gsampler_</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>a0a1c960a1b53d8512129a52679adaace</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; SampleGenerator&lt; Real &gt; &gt;</type>
      <name>hsampler_</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>a4df76a31c40765a8e0da7f0234e36344</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>setVector_</name>
      <anchorfile>classROL_1_1StochasticProblem.html</anchorfile>
      <anchor>a0dd65041b14672ac55a609a5674fdd67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::SuperQuantileQuadrangle</name>
    <filename>classROL_1_1SuperQuantileQuadrangle.html</filename>
    <templarg>Real</templarg>
    <base>ROL::SingletonKusuoka</base>
    <member kind="function">
      <type></type>
      <name>SuperQuantileQuadrangle</name>
      <anchorfile>classROL_1_1SuperQuantileQuadrangle.html</anchorfile>
      <anchor>a01b412994530efd17e066e100ab61f94</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SuperQuantileQuadrangle</name>
      <anchorfile>classROL_1_1SuperQuantileQuadrangle.html</anchorfile>
      <anchor>ad22bdc830578baa45ecae8985be5817e</anchor>
      <arglist>(const Real alpha, const int nQuad, const Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt; &amp;pf, const bool useGauss=true)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1SuperQuantileQuadrangle.html</anchorfile>
      <anchor>abd53654f2aa747700c8ade9384cb58bd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1SuperQuantileQuadrangle.html</anchorfile>
      <anchor>a830ba9792dc33baf55634f6e269973c6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; PlusFunction&lt; Real &gt; &gt;</type>
      <name>plusFunction_</name>
      <anchorfile>classROL_1_1SuperQuantileQuadrangle.html</anchorfile>
      <anchor>ad7ede5fc11dd00f8c535992c47f66b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>alpha_</name>
      <anchorfile>classROL_1_1SuperQuantileQuadrangle.html</anchorfile>
      <anchor>a40ae1de908078855c725786d99a455b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nQuad_</name>
      <anchorfile>classROL_1_1SuperQuantileQuadrangle.html</anchorfile>
      <anchor>af6dd9bec2df27a2b1117a11d3d699e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useGauss_</name>
      <anchorfile>classROL_1_1SuperQuantileQuadrangle.html</anchorfile>
      <anchor>af12c02accd9e2ebb56771c1594270bbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>wts_</name>
      <anchorfile>classROL_1_1SuperQuantileQuadrangle.html</anchorfile>
      <anchor>a74665a737782adc0c6306cfaadd0c5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>pts_</name>
      <anchorfile>classROL_1_1SuperQuantileQuadrangle.html</anchorfile>
      <anchor>ae0578ef261d7c59bf65d359e86a102c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Brents::testFunction</name>
    <filename>classROL_1_1Brents_1_1testFunction.html</filename>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classROL_1_1Brents_1_1testFunction.html</anchorfile>
      <anchor>ababdf28e986789668e916ffc4f1f179e</anchor>
      <arglist>(const Real x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::TeuchosBatchManager</name>
    <filename>classROL_1_1TeuchosBatchManager.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>ROL::BatchManager</base>
    <member kind="function">
      <type></type>
      <name>TeuchosBatchManager</name>
      <anchorfile>classROL_1_1TeuchosBatchManager.html</anchorfile>
      <anchor>ae50affadc9fea5f7125d289a289a786b</anchor>
      <arglist>(const Teuchos::RCP&lt; const Teuchos::Comm&lt; Ordinal &gt; &gt; &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>batchID</name>
      <anchorfile>classROL_1_1TeuchosBatchManager.html</anchorfile>
      <anchor>aeab476be5a081f06b5dbc5921dcb05c6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numBatches</name>
      <anchorfile>classROL_1_1TeuchosBatchManager.html</anchorfile>
      <anchor>a3cbc7a2a986e8c6ba05abd5a18b31c4b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduceAll</name>
      <anchorfile>classROL_1_1TeuchosBatchManager.html</anchorfile>
      <anchor>aae0f483deedfdfc998f66e3c525f3021</anchor>
      <arglist>(Real *input, Real *output, const Elementwise::ReductionOp&lt; Real &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minAll</name>
      <anchorfile>classROL_1_1TeuchosBatchManager.html</anchorfile>
      <anchor>a05464f32072316d6373eedab3163e68b</anchor>
      <arglist>(Real *input, Real *output, int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxAll</name>
      <anchorfile>classROL_1_1TeuchosBatchManager.html</anchorfile>
      <anchor>a51220f2eeb32fc27daf7cc866addad10</anchor>
      <arglist>(Real *input, Real *output, int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sumAll</name>
      <anchorfile>classROL_1_1TeuchosBatchManager.html</anchorfile>
      <anchor>a29d4a84968120afd2af5c2e5df0d4014</anchor>
      <arglist>(Real *input, Real *output, int dim)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sumAll</name>
      <anchorfile>classROL_1_1TeuchosBatchManager.html</anchorfile>
      <anchor>a1a86ab0a9888011cadee9e888ed21333</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;input, Vector&lt; Real &gt; &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>barrier</name>
      <anchorfile>classROL_1_1TeuchosBatchManager.html</anchorfile>
      <anchor>aef41af08ecd982b8e3873611dc95f143</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Teuchos::RCP&lt; const Teuchos::Comm&lt; Ordinal &gt; &gt;</type>
      <name>comm_</name>
      <anchorfile>classROL_1_1TeuchosBatchManager.html</anchorfile>
      <anchor>a0800a7b97a4b17049f3824c4bed17a4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Triangle</name>
    <filename>classROL_1_1Triangle.html</filename>
    <templarg></templarg>
    <base>ROL::Distribution</base>
    <member kind="function">
      <type></type>
      <name>Triangle</name>
      <anchorfile>classROL_1_1Triangle.html</anchorfile>
      <anchor>a77921f430c1bfa08afe9b67827cc071c</anchor>
      <arglist>(const Real a=0., const Real b=0.5, const Real c=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Triangle</name>
      <anchorfile>classROL_1_1Triangle.html</anchorfile>
      <anchor>afd55ff432c4d12d08a200d437bfcbf9c</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluatePDF</name>
      <anchorfile>classROL_1_1Triangle.html</anchorfile>
      <anchor>aecf3b09d88f075dfad5dfd3a5b91130e</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluateCDF</name>
      <anchorfile>classROL_1_1Triangle.html</anchorfile>
      <anchor>a4a657fcfd79a3e978247085f239c710d</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>integrateCDF</name>
      <anchorfile>classROL_1_1Triangle.html</anchorfile>
      <anchor>a6856ebf618a02b8845d734c37075b118</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>invertCDF</name>
      <anchorfile>classROL_1_1Triangle.html</anchorfile>
      <anchor>a3747a813a06ee9d018b9a81f3a40033e</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>moment</name>
      <anchorfile>classROL_1_1Triangle.html</anchorfile>
      <anchor>ace6f47b77cb8ec7f15ebe520862eca26</anchor>
      <arglist>(const size_t m) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>lowerBound</name>
      <anchorfile>classROL_1_1Triangle.html</anchorfile>
      <anchor>ac23eb147196332cbe1938fd8b05b287c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>upperBound</name>
      <anchorfile>classROL_1_1Triangle.html</anchorfile>
      <anchor>a420b6c874e17e91527717bb4eb2ceabe</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1Triangle.html</anchorfile>
      <anchor>a20548c87a7a9f601c11e981ea64d334d</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>a_</name>
      <anchorfile>classROL_1_1Triangle.html</anchorfile>
      <anchor>afc27d9f926429f25fe56e8c5c65bb8ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>b_</name>
      <anchorfile>classROL_1_1Triangle.html</anchorfile>
      <anchor>aec23957f6211d0d79c0e3e270f7ad8f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>c_</name>
      <anchorfile>classROL_1_1Triangle.html</anchorfile>
      <anchor>a611922ebabe4b2b6014f3dd956d1832f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TridiagonalToeplitzOperator</name>
    <filename>classTridiagonalToeplitzOperator.html</filename>
    <templarg>Real</templarg>
    <base>ROL::LinearOperator</base>
    <member kind="function">
      <type></type>
      <name>TridiagonalToeplitzOperator</name>
      <anchorfile>classTridiagonalToeplitzOperator.html</anchorfile>
      <anchor>a1410814fe2721da38a7e671bdad64028</anchor>
      <arglist>(Real &amp;a, Real &amp;b, Real &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classTridiagonalToeplitzOperator.html</anchorfile>
      <anchor>a22b28bb54f6f861c2cb58652edd8aa2a</anchor>
      <arglist>(V &amp;Hv, const V &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverse</name>
      <anchorfile>classTridiagonalToeplitzOperator.html</anchorfile>
      <anchor>a2acffb5d7677dd4e2e20369bfbc0af97</anchor>
      <arglist>(V &amp;Hv, const V &amp;v, Real &amp;tol) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classTridiagonalToeplitzOperator.html</anchorfile>
      <anchor>a7e21cc0628b95a3aa361b3740b157f38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ROL::Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classTridiagonalToeplitzOperator.html</anchorfile>
      <anchor>a271bc4fb677ea256a1cc016f6730beca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ROL::StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classTridiagonalToeplitzOperator.html</anchorfile>
      <anchor>adf156b96560190f0a727a719a7adb557</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classTridiagonalToeplitzOperator.html</anchorfile>
      <anchor>a507ee9a39eb644b6058a40cb910710d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>a_</name>
      <anchorfile>classTridiagonalToeplitzOperator.html</anchorfile>
      <anchor>a544eddf58a4c7c3c51acc8729adaa500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>b_</name>
      <anchorfile>classTridiagonalToeplitzOperator.html</anchorfile>
      <anchor>adfcdc16614e93416db327e0863fa25f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>c_</name>
      <anchorfile>classTridiagonalToeplitzOperator.html</anchorfile>
      <anchor>ae70e351872c82323fc9235e2e5d7d429</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::LAPACK&lt; int, Real &gt;</type>
      <name>lapack_</name>
      <anchorfile>classTridiagonalToeplitzOperator.html</anchorfile>
      <anchor>aee430fd1f176bbeee0c25c9544fe9168</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::TruncatedCG</name>
    <filename>classROL_1_1TruncatedCG.html</filename>
    <templarg></templarg>
    <base>ROL::TrustRegion</base>
    <member kind="function">
      <type></type>
      <name>TruncatedCG</name>
      <anchorfile>classROL_1_1TruncatedCG.html</anchorfile>
      <anchor>a3e9f847f55bb05d018538335af4d7ffb</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1TruncatedCG.html</anchorfile>
      <anchor>a25ef745ebe6d9984240185f330f43e87</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classROL_1_1TruncatedCG.html</anchorfile>
      <anchor>abb0361ae1a58e60c61c7f9212940482b</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, Real &amp;snorm, Real &amp;del, int &amp;iflag, int &amp;iter, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;grad, const Real &amp;gnorm, ProjectedObjective&lt; Real &gt; &amp;pObj)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>primalVector_</name>
      <anchorfile>classROL_1_1TruncatedCG.html</anchorfile>
      <anchor>a5ce626b6d8a2b41d2bbff2fea3f7bc54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>s_</name>
      <anchorfile>classROL_1_1TruncatedCG.html</anchorfile>
      <anchor>a0b2f8a62396423768387c891420c8fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>g_</name>
      <anchorfile>classROL_1_1TruncatedCG.html</anchorfile>
      <anchor>a241428e884c124a566ed5cef4d68e556</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>v_</name>
      <anchorfile>classROL_1_1TruncatedCG.html</anchorfile>
      <anchor>a9cc6c13ddef7ce8d65b6123c9a0b3cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>p_</name>
      <anchorfile>classROL_1_1TruncatedCG.html</anchorfile>
      <anchor>a03a9c888ee1775c4acde9f589524dae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>Hp_</name>
      <anchorfile>classROL_1_1TruncatedCG.html</anchorfile>
      <anchor>a85bc7cff1a5dd83927d189f7680782af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxit_</name>
      <anchorfile>classROL_1_1TruncatedCG.html</anchorfile>
      <anchor>a7a1763b8ba33210c33e86fd6e8199422</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>tol1_</name>
      <anchorfile>classROL_1_1TruncatedCG.html</anchorfile>
      <anchor>a883858b99a69a11de3789e5c440dc075</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>tol2_</name>
      <anchorfile>classROL_1_1TruncatedCG.html</anchorfile>
      <anchor>a5b7f5c7b2deb829b11b2ca6ab1e8927a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>pRed_</name>
      <anchorfile>classROL_1_1TruncatedCG.html</anchorfile>
      <anchor>ad224e3ec089773d3912e8a0a9418d744</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::TruncatedExponential</name>
    <filename>classROL_1_1TruncatedExponential.html</filename>
    <templarg></templarg>
    <base>ROL::Distribution</base>
    <member kind="function">
      <type></type>
      <name>TruncatedExponential</name>
      <anchorfile>classROL_1_1TruncatedExponential.html</anchorfile>
      <anchor>ae1290cfb230b1f78e49794c34d02bbbb</anchor>
      <arglist>(const Real a=0., const Real b=1., const Real scale=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TruncatedExponential</name>
      <anchorfile>classROL_1_1TruncatedExponential.html</anchorfile>
      <anchor>a2ed862f7c8275e0ef2c2864b1f912699</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluatePDF</name>
      <anchorfile>classROL_1_1TruncatedExponential.html</anchorfile>
      <anchor>a6205a6173350f3308c14b980287043b0</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluateCDF</name>
      <anchorfile>classROL_1_1TruncatedExponential.html</anchorfile>
      <anchor>aa4e186158e31078900737d7c20c233c2</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>integrateCDF</name>
      <anchorfile>classROL_1_1TruncatedExponential.html</anchorfile>
      <anchor>a01ffc69b7639ff509ed0d8651f722a2a</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>invertCDF</name>
      <anchorfile>classROL_1_1TruncatedExponential.html</anchorfile>
      <anchor>a903fe6a02129e4464c6cd0597337ce85</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>moment</name>
      <anchorfile>classROL_1_1TruncatedExponential.html</anchorfile>
      <anchor>a3213979b7345864c5f7a6ec7071a8eec</anchor>
      <arglist>(const size_t m) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>lowerBound</name>
      <anchorfile>classROL_1_1TruncatedExponential.html</anchorfile>
      <anchor>a1ab757c3746f9fdc3fa5fe6eb0911b1e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>upperBound</name>
      <anchorfile>classROL_1_1TruncatedExponential.html</anchorfile>
      <anchor>ab8a5b7d8939c7c6555aea4e5bcd0ac92</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1TruncatedExponential.html</anchorfile>
      <anchor>a5fa51bfda0b005a4f21eca0ac284d88f</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>size_t</type>
      <name>compute_coeff</name>
      <anchorfile>classROL_1_1TruncatedExponential.html</anchorfile>
      <anchor>af1c5c337cdf97cf2d146fcda4fcb65b0</anchor>
      <arglist>(const size_t m, const size_t k) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>a_</name>
      <anchorfile>classROL_1_1TruncatedExponential.html</anchorfile>
      <anchor>ae9791230f3855896ad153be51f58d8db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>b_</name>
      <anchorfile>classROL_1_1TruncatedExponential.html</anchorfile>
      <anchor>a0a55396ea4b7ad6f62790997dd655d9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>scale_</name>
      <anchorfile>classROL_1_1TruncatedExponential.html</anchorfile>
      <anchor>a94f81449d23accabcbcb5c61a4b108c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>expa_</name>
      <anchorfile>classROL_1_1TruncatedExponential.html</anchorfile>
      <anchor>ae522d24e80eabc28dfc4d6debb52b910</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>expb_</name>
      <anchorfile>classROL_1_1TruncatedExponential.html</anchorfile>
      <anchor>aa463c780dfab62c6ef4ecd4fd9c5d9c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>diff_</name>
      <anchorfile>classROL_1_1TruncatedExponential.html</anchorfile>
      <anchor>a3e05061c167ce805fb8feb268b87776b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>coeff_</name>
      <anchorfile>classROL_1_1TruncatedExponential.html</anchorfile>
      <anchor>abcd42f16fe01a580cad96655c0cfbd00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::TruncatedGaussian</name>
    <filename>classROL_1_1TruncatedGaussian.html</filename>
    <templarg></templarg>
    <base>ROL::Distribution</base>
    <member kind="function">
      <type></type>
      <name>TruncatedGaussian</name>
      <anchorfile>classROL_1_1TruncatedGaussian.html</anchorfile>
      <anchor>af2b7d87c42ce1e745f5fade6ee4c6619</anchor>
      <arglist>(const Real lo=-1., const Real up=1., const Real mean=0., const Real sdev=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TruncatedGaussian</name>
      <anchorfile>classROL_1_1TruncatedGaussian.html</anchorfile>
      <anchor>a37f1f1bcfca30472e0fa80d2bde8e18c</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluatePDF</name>
      <anchorfile>classROL_1_1TruncatedGaussian.html</anchorfile>
      <anchor>a17031325acdc4e77c80b77706f93fd62</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluateCDF</name>
      <anchorfile>classROL_1_1TruncatedGaussian.html</anchorfile>
      <anchor>a127fda670e430601675b3401ee719d19</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>integrateCDF</name>
      <anchorfile>classROL_1_1TruncatedGaussian.html</anchorfile>
      <anchor>a485a1b347a56cdc7feb5d76ffa1862e2</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>invertCDF</name>
      <anchorfile>classROL_1_1TruncatedGaussian.html</anchorfile>
      <anchor>aa5ebc82acf69e756af10ed2bf97172f5</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>moment</name>
      <anchorfile>classROL_1_1TruncatedGaussian.html</anchorfile>
      <anchor>a6d339c0752f5508e39af659fad1a632d</anchor>
      <arglist>(const size_t m) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>lowerBound</name>
      <anchorfile>classROL_1_1TruncatedGaussian.html</anchorfile>
      <anchor>a7c4d6e8486cc469b273c3e1cfff0e281</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>upperBound</name>
      <anchorfile>classROL_1_1TruncatedGaussian.html</anchorfile>
      <anchor>a40fe655a7d7fb538e1abc5d87e227bd7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1TruncatedGaussian.html</anchorfile>
      <anchor>aab26cd98e7178cf05c682e153c4de635</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>a_</name>
      <anchorfile>classROL_1_1TruncatedGaussian.html</anchorfile>
      <anchor>ad818e2f27531bd13d7bc35a233238f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>b_</name>
      <anchorfile>classROL_1_1TruncatedGaussian.html</anchorfile>
      <anchor>a68b817286baeb9d501877a54595c9b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>mean_</name>
      <anchorfile>classROL_1_1TruncatedGaussian.html</anchorfile>
      <anchor>ad5bcb43ca438ee107c9ee2e81b9d737b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>sdev_</name>
      <anchorfile>classROL_1_1TruncatedGaussian.html</anchorfile>
      <anchor>a7e39fdf38d7a879df36ecfa71c0ee365</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Gaussian&lt; Real &gt; &gt;</type>
      <name>gauss_</name>
      <anchorfile>classROL_1_1TruncatedGaussian.html</anchorfile>
      <anchor>a86c04ac8e0695eb196f03b92060a4088</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>alpha_</name>
      <anchorfile>classROL_1_1TruncatedGaussian.html</anchorfile>
      <anchor>a89e9e661c2600e7ed995e49df54f5261</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>beta_</name>
      <anchorfile>classROL_1_1TruncatedGaussian.html</anchorfile>
      <anchor>a558091eabd284b366ad8ff128eb05b9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>phi_</name>
      <anchorfile>classROL_1_1TruncatedGaussian.html</anchorfile>
      <anchor>a04f88c3be5c7a4d110610461372d0a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>Z_</name>
      <anchorfile>classROL_1_1TruncatedGaussian.html</anchorfile>
      <anchor>ad31bd0467555a61a974e2a84a8cb54b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::TruncatedMeanQuadrangle</name>
    <filename>classROL_1_1TruncatedMeanQuadrangle.html</filename>
    <templarg></templarg>
    <base>ROL::ExpectationQuad</base>
    <member kind="function">
      <type></type>
      <name>TruncatedMeanQuadrangle</name>
      <anchorfile>classROL_1_1TruncatedMeanQuadrangle.html</anchorfile>
      <anchor>abae9bb2892e110a7eb2fe2c462d74728</anchor>
      <arglist>(Real beta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TruncatedMeanQuadrangle</name>
      <anchorfile>classROL_1_1TruncatedMeanQuadrangle.html</anchorfile>
      <anchor>a81938b921359bad56256bc663ef3856d</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>error</name>
      <anchorfile>classROL_1_1TruncatedMeanQuadrangle.html</anchorfile>
      <anchor>ac9e517406f368d9e57796c8090d91eff</anchor>
      <arglist>(Real x, int deriv=0)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>regret</name>
      <anchorfile>classROL_1_1TruncatedMeanQuadrangle.html</anchorfile>
      <anchor>a430a3055c13dd0bce93186145ae026f1</anchor>
      <arglist>(Real x, int deriv=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkRegret</name>
      <anchorfile>classROL_1_1TruncatedMeanQuadrangle.html</anchorfile>
      <anchor>a5a2de712c2f928b3f3c2a86b90c4b7f0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkInputs</name>
      <anchorfile>classROL_1_1TruncatedMeanQuadrangle.html</anchorfile>
      <anchor>aebf203834b3471dfdda0c0fe7b517014</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>beta_</name>
      <anchorfile>classROL_1_1TruncatedMeanQuadrangle.html</anchorfile>
      <anchor>a461fdcb7c5e51594f8b1e0043f3cdf81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::TrustRegion</name>
    <filename>classROL_1_1TrustRegion.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrustRegion</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>ada1bfc470d2933b6344dcc153c37a581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrustRegion</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a6a6be8d3c4384be1d19987cefaf7b0ba</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a4124d45b23be0ef54232547f67adc223</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a791e6bfa0b23cb855a542cec463ae9fc</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, Real &amp;fnew, Real &amp;del, int &amp;nfval, int &amp;ngrad, ETrustRegionFlag &amp;flagTR, const Vector&lt; Real &gt; &amp;s, const Real snorm, const Real fold, const Vector&lt; Real &gt; &amp;g, int iter, ProjectedObjective&lt; Real &gt; &amp;pObj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPredictedReduction</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a73a1cc1e1b796cc85bc5743377843c80</anchor>
      <arglist>(const Real pRed)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPredictedReduction</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a5c1c7c822123a7aec7d08934c0764a01</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>ab5834cbc8269259ca35a11a42bbb4c0e</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, Real &amp;snorm, Real &amp;del, int &amp;iflag, int &amp;iter, const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;grad, const Real &amp;gnorm, ProjectedObjective&lt; Real &gt; &amp;pObj)=0</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateObj</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a614a303b811e9560c2dc895ffa3b7284</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, int iter, ProjectedObjective&lt; Real &gt; &amp;pObj)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xupdate_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>acbdbd13207e6573504d129b05d2c5b44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>Hs_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a8eea8087a557c21b04a6f94124f8de1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>delmax_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a007dcb7221d60d71a66113d48af160f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>eta0_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>af2fee62c52a92fe589da65e575e7e9ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>eta1_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a1a15d4f11e523cdd24a5aec007479e12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>eta2_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a582e7b78945d1af5664fe94445ac1295</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>gamma0_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a26331079461c81a7a111ba3114b947e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>gamma1_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a78f2faebfeca59771f4165e3ef7b86a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>gamma2_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>ac9c10791dcb624cc0259a9e37f4e349c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>pRed_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a0fdcdfbe43166fa687c6caf17a549362</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>TRsafe_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>ab186c2b541b43efae2a28dda2291a4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>eps_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>ac5eb8d093e25d5861d2595a7cb59155c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; bool &gt;</type>
      <name>useInexact_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a702129e49b21e82d72832ce24d753c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>ftol_old_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>abc3a7a2cc24fd67e435523645a538a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>scale_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a983cf42f61e69216e548e7ecfbe5f235</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>omega_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a123393582038922a93393e01cb63e8fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>force_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a187fd34c47adba432202d3dd5a61357a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>updateIter_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a12704a6961a63fa7e6eb525de87303e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>forceFactor_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>aeb65e9be38e3b2c48668975d38f48d3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>cnt_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a1365538bc21357a4e3267429050649db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>verbosity_</name>
      <anchorfile>classROL_1_1TrustRegion.html</anchorfile>
      <anchor>a6d5d17926c7ffc8a1ab415991f228330</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::TrustRegionStep</name>
    <filename>classROL_1_1TrustRegionStep.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Step</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrustRegionStep</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>aeb6c877f9cd9ab73d1e63f7ebb933a87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrustRegionStep</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>ab6b8fd6722e7a29724abd29845a8ab74</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrustRegionStep</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>a74474dd67b80da70e8d05df36a3ce99c</anchor>
      <arglist>(Teuchos::RCP&lt; Secant&lt; Real &gt; &gt; &amp;secant, Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>a6679dc40548529b4acd01d9fec04ba74</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;g, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>ab785ba68d61d389c63804960ee4a951d</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;s, const Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>a0fec8889ea5605242cc24b1edba91a38</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;s, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printHeader</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>a770ba780dbea25501b0979a13ddb37ad</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>printName</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>a75492f794d24093aacd6de7c253f7f8c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>print</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>a3ecddb50f326e1a079851a187c0b3706</anchor>
      <arglist>(AlgorithmState&lt; Real &gt; &amp;algo_state, bool print_header=false) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateGradient</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>a1f700bf64ac8ed593534270ec8a3403c</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, Objective&lt; Real &gt; &amp;obj, BoundConstraint&lt; Real &gt; &amp;con, AlgorithmState&lt; Real &gt; &amp;algo_state)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Real</type>
      <name>computeCriticalityMeasure</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>a25a920416e304a57e2e1203753da71e3</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, BoundConstraint&lt; Real &gt; &amp;con)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Secant&lt; Real &gt; &gt;</type>
      <name>secant_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>a6d7d42bf413f84e111a19b26d5939e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; TrustRegion&lt; Real &gt; &gt;</type>
      <name>trustRegion_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>a290d7de6852e2155f03e9a92f680365c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xnew_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>a2c845106ecb591e0026cda790e5f67ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>xold_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>acda03a91fe98360b7f5ff2f3e08b824a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>gp_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>a1b3947552a44edd967fe3ea67d21307b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ETrustRegion</type>
      <name>etr_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>aa10263dd1d15843e8dfb3227e7974473</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ESecant</type>
      <name>esec_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>a6c94a295956ff10d1c7473e6b523f2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useSecantHessVec_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>addd69f555563c6b9ed8e0826a0287867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useSecantPrecond_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>ac290997bffe5d62fbbbdf02a0e72f3d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useProjectedGrad_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>a8b66dab0c9619bdec451be34967d4c84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; bool &gt;</type>
      <name>useInexact_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>ada65028ebf2d04853de291adcbcb5ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ETrustRegionFlag</type>
      <name>TRflag_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>acb4f2ae56fb500f4f5c1621369037e9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>TR_nfval_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>aa613ae3e95798a7c4024eec639789c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>TR_ngrad_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>a85bd207c85ad3adb5a3ca68f33c74c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>CGflag_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>ab535921131767c876f9657118ab6dc07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>CGiter_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>aa40aa92b3379f4fd07e33a87370732be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>delMax_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>a56bbee81a5e5eadcf95c249f902db58f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>alpha_init_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>acb974c9a8edd9eb4ba61dba0e6b31b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>max_fval_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>abd9ef931d096214aebe8fc7e93b958dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>scale0_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>a477ed1793fed08512b8a0c2ca68a1b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>scale1_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>af6a87022e2f6fc2ddf0d6e9e7f7ee48c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>scaleEps_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>acd81013dd321cd9f8970a74eadf304f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>verbosity_</name>
      <anchorfile>classROL_1_1TrustRegionStep.html</anchorfile>
      <anchor>a29f6b7cbab42dc6f4e0b7359c20504e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ROL::TypeCaster</name>
    <filename>structROL_1_1TypeCaster.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>ElementToReal</name>
      <anchorfile>structROL_1_1TypeCaster.html</anchorfile>
      <anchor>aa4bba4c9cd56c8f71edd8ed2058e43c4</anchor>
      <arglist>(const Element &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ROL::TypeCaster&lt; double, float &gt;</name>
    <filename>structROL_1_1TypeCaster_3_01double_00_01float_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>ElementToReal</name>
      <anchorfile>structROL_1_1TypeCaster_3_01double_00_01float_01_4.html</anchorfile>
      <anchor>aa42c564f25eb1425dfad44aded0c6fd1</anchor>
      <arglist>(const float &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ROL::TypeCaster&lt; Real, std::complex&lt; Real &gt; &gt;</name>
    <filename>structROL_1_1TypeCaster_3_01Real_00_01std_1_1complex_3_01Real_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>ElementToReal</name>
      <anchorfile>structROL_1_1TypeCaster_3_01Real_00_01std_1_1complex_3_01Real_01_4_01_4.html</anchorfile>
      <anchor>a53168ebb1d4b2d7ac915a04dc38c825c</anchor>
      <arglist>(const std::complex&lt; Real &gt; &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Uniform</name>
    <filename>classROL_1_1Uniform.html</filename>
    <templarg></templarg>
    <base>ROL::Distribution</base>
    <member kind="function">
      <type></type>
      <name>Uniform</name>
      <anchorfile>classROL_1_1Uniform.html</anchorfile>
      <anchor>a2af7f02efe95776af12a59737d5e657a</anchor>
      <arglist>(const Real lo=0., const Real up=1.)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Uniform</name>
      <anchorfile>classROL_1_1Uniform.html</anchorfile>
      <anchor>a2ff6e77906ae945832dc296705b33558</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluatePDF</name>
      <anchorfile>classROL_1_1Uniform.html</anchorfile>
      <anchor>a969f9ff97ab0a6a66d6350a0dfde74ee</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>evaluateCDF</name>
      <anchorfile>classROL_1_1Uniform.html</anchorfile>
      <anchor>a6b2a3c70df429077c5a869fb5717109c</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>integrateCDF</name>
      <anchorfile>classROL_1_1Uniform.html</anchorfile>
      <anchor>abc95e9335dca173f2a99067be7ded80a</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>invertCDF</name>
      <anchorfile>classROL_1_1Uniform.html</anchorfile>
      <anchor>a7f3b2a59f15fff004483be7a74885e7b</anchor>
      <arglist>(const Real input) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>moment</name>
      <anchorfile>classROL_1_1Uniform.html</anchorfile>
      <anchor>abad1efc57d440a10cffa3982e6a90bb5</anchor>
      <arglist>(const size_t m) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>lowerBound</name>
      <anchorfile>classROL_1_1Uniform.html</anchorfile>
      <anchor>a1da86a65de97745ce49e9fd559a39e36</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>upperBound</name>
      <anchorfile>classROL_1_1Uniform.html</anchorfile>
      <anchor>a13ad9db403714e12fe4ffc7c7b4d452c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>classROL_1_1Uniform.html</anchorfile>
      <anchor>a3a7667a5ddab7cda46641f599e4707fd</anchor>
      <arglist>(std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>a_</name>
      <anchorfile>classROL_1_1Uniform.html</anchorfile>
      <anchor>a1428b61dd5b990d5b28d1c861c0f7e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>b_</name>
      <anchorfile>classROL_1_1Uniform.html</anchorfile>
      <anchor>a5374337c0117d0f20346997443150b2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::BoundConstraint::UpperBinding</name>
    <filename>classROL_1_1BoundConstraint_1_1UpperBinding.html</filename>
    <member kind="function">
      <type></type>
      <name>UpperBinding</name>
      <anchorfile>classROL_1_1BoundConstraint_1_1UpperBinding.html</anchorfile>
      <anchor>ab66361c3deddd9d5522843f8b6059cc8</anchor>
      <arglist>(Real offset)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>apply</name>
      <anchorfile>classROL_1_1BoundConstraint_1_1UpperBinding.html</anchorfile>
      <anchor>a6f9a89b0c98dae0047d3105206b1f50b</anchor>
      <arglist>(const Real &amp;x, const Real &amp;y) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>offset_</name>
      <anchorfile>classROL_1_1BoundConstraint_1_1UpperBinding.html</anchorfile>
      <anchor>a43386d685287c2f5a0c1f95052f9b848</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::UpperBoundInequalityConstraint</name>
    <filename>classROL_1_1UpperBoundInequalityConstraint.html</filename>
    <templarg></templarg>
    <base>ROL::InequalityConstraint</base>
    <member kind="function">
      <type></type>
      <name>UpperBoundInequalityConstraint</name>
      <anchorfile>classROL_1_1UpperBoundInequalityConstraint.html</anchorfile>
      <anchor>a22ea4c6a21a50488a3288ca1a5a32e40</anchor>
      <arglist>(BoundConstraint&lt; Real &gt; &amp;bnd, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UpperBoundInequalityConstraint</name>
      <anchorfile>classROL_1_1UpperBoundInequalityConstraint.html</anchorfile>
      <anchor>a7ff5023dc0c01d764778e0f398827b3a</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;up)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>classROL_1_1UpperBoundInequalityConstraint.html</anchorfile>
      <anchor>aa8358d3abfa62dacc4fdce925aad9084</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;c, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyJacobian</name>
      <anchorfile>classROL_1_1UpperBoundInequalityConstraint.html</anchorfile>
      <anchor>ae2e051b7ec47962b0e3fff298f649349</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;jv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointJacobian</name>
      <anchorfile>classROL_1_1UpperBoundInequalityConstraint.html</anchorfile>
      <anchor>a5a4032fb0ccdb5040420f61de41fc3ed</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ajv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAdjointHessian</name>
      <anchorfile>classROL_1_1UpperBoundInequalityConstraint.html</anchorfile>
      <anchor>ab6e5e4b78142c8c9736ae72ea882490f</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;ahuv, const Vector&lt; Real &gt; &amp;u, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>up_</name>
      <anchorfile>classROL_1_1UpperBoundInequalityConstraint.html</anchorfile>
      <anchor>a42e7290c73149c40010c55fa47a7c9a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::UserInputGenerator</name>
    <filename>classROL_1_1UserInputGenerator.html</filename>
    <templarg></templarg>
    <base>ROL::SampleGenerator</base>
    <member kind="function">
      <type></type>
      <name>UserInputGenerator</name>
      <anchorfile>classROL_1_1UserInputGenerator.html</anchorfile>
      <anchor>a4d0037dc9bebe31fe8fbd4acadc07be2</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UserInputGenerator</name>
      <anchorfile>classROL_1_1UserInputGenerator.html</anchorfile>
      <anchor>aba69a0a87a51e3868132cff4ce13cf0a</anchor>
      <arglist>(const std::string file_pt, const std::string file_wt, const int n, const int dim, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classROL_1_1UserInputGenerator.html</anchorfile>
      <anchor>ac13bc23889e7df6b9cab6be0f15a4f40</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classROL_1_1UserInputGenerator.html</anchorfile>
      <anchor>aed559a46f98f4dadcc830f003bd43e1c</anchor>
      <arglist>(const std::string &amp;file_pt, const std::string &amp;file_wt, const int n, const int dim, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Vector</name>
    <filename>classROL_1_1Vector.html</filename>
    <templarg>Real</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Vector</name>
      <anchorfile>classROL_1_1Vector.html</anchorfile>
      <anchor>a1e608bbe1ee324538d8e148309d24237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>plus</name>
      <anchorfile>classROL_1_1Vector.html</anchorfile>
      <anchor>aac12256d051f77ac3b1dd494c311e566</anchor>
      <arglist>(const Vector &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scale</name>
      <anchorfile>classROL_1_1Vector.html</anchorfile>
      <anchor>a7ebf7b1f370572990923efc311f34616</anchor>
      <arglist>(const Real alpha)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>dot</name>
      <anchorfile>classROL_1_1Vector.html</anchorfile>
      <anchor>a96069d8ae22f41f1dd8c5df34c9cef5a</anchor>
      <arglist>(const Vector &amp;x) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>norm</name>
      <anchorfile>classROL_1_1Vector.html</anchorfile>
      <anchor>aca3d0be111326ec3e867b14ddf23d3d6</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Teuchos::RCP&lt; Vector &gt;</type>
      <name>clone</name>
      <anchorfile>classROL_1_1Vector.html</anchorfile>
      <anchor>a7deb0b17475cd4194a078f0c8ff070f5</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>axpy</name>
      <anchorfile>classROL_1_1Vector.html</anchorfile>
      <anchor>ae979a274e89db4f7f6cfc66a38b275e6</anchor>
      <arglist>(const Real alpha, const Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero</name>
      <anchorfile>classROL_1_1Vector.html</anchorfile>
      <anchor>aad5fbbf4a96b26651aca3f2ee01cd7cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Teuchos::RCP&lt; Vector &gt;</type>
      <name>basis</name>
      <anchorfile>classROL_1_1Vector.html</anchorfile>
      <anchor>a85f8e4f009209b7db6ff6b0371f30a20</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>dimension</name>
      <anchorfile>classROL_1_1Vector.html</anchorfile>
      <anchor>a53ab4dd975b10fac04bd0dc2a1a42c65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>classROL_1_1Vector.html</anchorfile>
      <anchor>a391fbe42577d18150d44a7d9705bc8f8</anchor>
      <arglist>(const Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Vector &amp;</type>
      <name>dual</name>
      <anchorfile>classROL_1_1Vector.html</anchorfile>
      <anchor>a02c3d4c3deb704aa1bf0ab6f5cfe23d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyUnary</name>
      <anchorfile>classROL_1_1Vector.html</anchorfile>
      <anchor>a47a9ac6a80d2ed208107019e39bb8b3c</anchor>
      <arglist>(const Elementwise::UnaryFunction&lt; Real &gt; &amp;f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyBinary</name>
      <anchorfile>classROL_1_1Vector.html</anchorfile>
      <anchor>a752dd0b7bc9c3071b06651640562ae25</anchor>
      <arglist>(const Elementwise::BinaryFunction&lt; Real &gt; &amp;f, const Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>reduce</name>
      <anchorfile>classROL_1_1Vector.html</anchorfile>
      <anchor>ab20094ea55955984ce9583b5f60833dc</anchor>
      <arglist>(const Elementwise::ReductionOp&lt; Real &gt; &amp;r) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; Real &gt;</type>
      <name>checkVector</name>
      <anchorfile>classROL_1_1Vector.html</anchorfile>
      <anchor>a79ed0955021f18feed6bc569715755c2</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, const Vector&lt; Real &gt; &amp;y, const bool printToStream=true, std::ostream &amp;outStream=std::cout) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ROL::Vector_SimOpt</name>
    <filename>classROL_1_1Vector__SimOpt.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Vector</base>
    <member kind="function">
      <type></type>
      <name>Vector_SimOpt</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>a2f8e8b26f955694a53b1f4a8b689efad</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;vec1, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;vec2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plus</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>a9690ee32e1f55858d3552015cb685eb2</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>a64bdc2c1a99de79002a4f834665bb5c1</anchor>
      <arglist>(const Real alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>a01140ca3fcb25b7fbcde10be8a0e4746</anchor>
      <arglist>(const Real alpha, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>dot</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>a0dfff37999cd1dfc184cb8dd59beb915</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>norm</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>a1798b99e12acf9d6198a0541c58755a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>acd32884b9263679f3f6cb266badb2c8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; Real &gt; &amp;</type>
      <name>dual</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>a89addb0f913f6d54499c24288c017ad7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>basis</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>ac7e3e82fa05e7abe2e95838f026cc8f3</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyUnary</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>ad7774bc0e0078f07c0c168319f46d28a</anchor>
      <arglist>(const Elementwise::UnaryFunction&lt; Real &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBinary</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>af9b61dc96e4ad08f7ba30defe90cd87a</anchor>
      <arglist>(const Elementwise::BinaryFunction&lt; Real &gt; &amp;f, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>reduce</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>a9c35c4f6a801ca9fa3be0011402055dd</anchor>
      <arglist>(const Elementwise::ReductionOp&lt; Real &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>a2d54db30e5ed430df604bd77a972c764</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>get_1</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>a7e02c51fc919bf97d806cc38e94eeca9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>get_2</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>acbd95339d3da41067e87fecb0516d7be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>get_1</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>a04672228a3c460b9038dcfb27dc0a4ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>get_2</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>aaef89ce0a5a8342e7472ba336ca053f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_1</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>a710fe82422889eea7d110e47259dfeb8</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_2</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>ab7fe51a2b58492bc19cf695389081eb5</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;vec)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>vec1_</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>ab3495867c0cafab8f9c709236336df00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>vec2_</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>a3f14db277751077b8e312a35982ba47b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dual_vec1_</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>a5b850780fc7672d7e206628f9dbc4a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>dual_vec2_</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>a7da51b2693aaa54f7f089231778c162e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Teuchos::RCP&lt; Vector_SimOpt&lt; Real &gt; &gt;</type>
      <name>dual_vec_</name>
      <anchorfile>classROL_1_1Vector__SimOpt.html</anchorfile>
      <anchor>a6daa355ac135f3429aab2e3c53bb30fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Zakharov</name>
    <filename>classZakharov.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>ScalarT</type>
      <name>value</name>
      <anchorfile>classZakharov.html</anchorfile>
      <anchor>af7fe3794e9f6ad5e699be47db7386741</anchor>
      <arglist>(const Vector&lt; ScalarT &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Zakharov_Sacado_Objective</name>
    <filename>classZakharov__Sacado__Objective.html</filename>
    <templarg>Real</templarg>
    <base>ROL::Objective</base>
    <member kind="function">
      <type></type>
      <name>Zakharov_Sacado_Objective</name>
      <anchorfile>classZakharov__Sacado__Objective.html</anchorfile>
      <anchor>a39d4a4c74d7c15d03859d408375ce7e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>value</name>
      <anchorfile>classZakharov__Sacado__Objective.html</anchorfile>
      <anchor>aa99d2a23dce46b9a11539ca74de5428f</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradient</name>
      <anchorfile>classZakharov__Sacado__Objective.html</anchorfile>
      <anchor>a819cf2c737e1981659b0cdd989a6c361</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;g, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessVec</name>
      <anchorfile>classZakharov__Sacado__Objective.html</anchorfile>
      <anchor>a368ff4350277e7a2b632579546dd4a27</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;hv, const Vector&lt; Real &gt; &amp;v, const Vector&lt; Real &gt; &amp;x, Real &amp;tol)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Real &gt;</type>
      <name>vector</name>
      <anchorfile>classZakharov__Sacado__Objective.html</anchorfile>
      <anchor>ac4fa4ffcf14aaca906b4218ca550e03d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Vector&lt; Real &gt;</type>
      <name>V</name>
      <anchorfile>classZakharov__Sacado__Objective.html</anchorfile>
      <anchor>a6b4ad298c71952f80a26f23bd8fb4693</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>StdVector&lt; Real &gt;</type>
      <name>SV</name>
      <anchorfile>classZakharov__Sacado__Objective.html</anchorfile>
      <anchor>ac4e20f433f16b735ffe082274f6f7b93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::Fad::DFad&lt; Real &gt;</type>
      <name>GradType</name>
      <anchorfile>classZakharov__Sacado__Objective.html</anchorfile>
      <anchor>a6f553d8efb0e515ddf6c0f8b216f459b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::Fad::SFad&lt; Real, 1 &gt;</type>
      <name>DirDerivType</name>
      <anchorfile>classZakharov__Sacado__Objective.html</anchorfile>
      <anchor>a995e9e342fe50af69030c7685c3bdb1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sacado::Fad::DFad&lt; DirDerivType &gt;</type>
      <name>HessVecType</name>
      <anchorfile>classZakharov__Sacado__Objective.html</anchorfile>
      <anchor>ae6c5df6cc9a724a0f274700fb00ae49a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>vector::size_type</type>
      <name>uint</name>
      <anchorfile>classZakharov__Sacado__Objective.html</anchorfile>
      <anchor>adb3b1549defc430ac77c5a76be2be016</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; const vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classZakharov__Sacado__Objective.html</anchorfile>
      <anchor>a6909314976579feadbb7e9f11e08b01a</anchor>
      <arglist>(const V &amp;x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Teuchos::RCP&lt; vector &gt;</type>
      <name>getVector</name>
      <anchorfile>classZakharov__Sacado__Objective.html</anchorfile>
      <anchor>a835823d01b17982749332a694a897657</anchor>
      <arglist>(V &amp;x)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FunctionZakharov&lt; Real &gt;</type>
      <name>zfunc_</name>
      <anchorfile>classZakharov__Sacado__Objective.html</anchorfile>
      <anchor>ad57fc0499222d037c4c3198b0416e6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FunctionZakharov&lt; GradType &gt;</type>
      <name>zfuncGrad_</name>
      <anchorfile>classZakharov__Sacado__Objective.html</anchorfile>
      <anchor>accb3092a240d056c96c4090345e50024</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FunctionZakharov&lt; HessVecType &gt;</type>
      <name>zfuncHessVec_</name>
      <anchorfile>classZakharov__Sacado__Objective.html</anchorfile>
      <anchor>a5cdc4e847e1cc192fcadefd9f53722cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ROL</name>
    <filename>namespaceROL.html</filename>
    <namespace>ROL::Exception</namespace>
    <namespace>ROL::Finite_Difference_Arrays</namespace>
    <namespace>ROL::InteriorPoint</namespace>
    <namespace>ROL::StringList</namespace>
    <namespace>ROL::ZOO</namespace>
    <class kind="class">ROL::AbsoluteValue</class>
    <class kind="class">ROL::Algorithm</class>
    <class kind="struct">ROL::AlgorithmState</class>
    <class kind="class">ROL::Arcsine</class>
    <class kind="class">ROL::AtomVector</class>
    <class kind="class">ROL::AugmentedLagrangian</class>
    <class kind="class">ROL::AugmentedLagrangian_SimOpt</class>
    <class kind="class">ROL::AugmentedLagrangianStep</class>
    <class kind="class">ROL::BackTracking</class>
    <class kind="class">ROL::BarzilaiBorwein</class>
    <class kind="class">ROL::BatchManager</class>
    <class kind="class">ROL::BatchStdVector</class>
    <class kind="class">ROL::Beta</class>
    <class kind="class">ROL::Bisection</class>
    <class kind="class">ROL::BlockOperator</class>
    <class kind="class">ROL::BlockOperator2</class>
    <class kind="class">ROL::BoundConstraint</class>
    <class kind="class">ROL::BoundConstraint_Partitioned</class>
    <class kind="class">ROL::BoundConstraint_SimOpt</class>
    <class kind="class">ROL::BoundInequalityConstraint</class>
    <class kind="class">ROL::BPOEObjective</class>
    <class kind="class">ROL::Brents</class>
    <class kind="class">ROL::Bundle</class>
    <class kind="class">ROL::Bundle_TT</class>
    <class kind="class">ROL::BundleStatusTest</class>
    <class kind="class">ROL::BundleStep</class>
    <class kind="class">ROL::CArrayVector</class>
    <class kind="class">ROL::Cauchy</class>
    <class kind="class">ROL::CauchyPoint</class>
    <class kind="class">ROL::CDFObjective</class>
    <class kind="class">ROL::ChebyshevKusuoka</class>
    <class kind="class">ROL::Chi2Divergence</class>
    <class kind="class">ROL::CoherentExpUtility</class>
    <class kind="class">ROL::CompositeConstraint</class>
    <class kind="class">ROL::CompositeObjective</class>
    <class kind="class">ROL::CompositeObjective_SimOpt</class>
    <class kind="class">ROL::CompositeStep</class>
    <class kind="class">ROL::ConjugateGradients</class>
    <class kind="class">ROL::ConjugateResiduals</class>
    <class kind="class">ROL::Constraints</class>
    <class kind="class">ROL::ConstraintStatusTest</class>
    <class kind="class">ROL::ConvexCombinationRiskMeasure</class>
    <class kind="class">ROL::CubicInterp</class>
    <class kind="class">ROL::CVaR</class>
    <class kind="class">ROL::DiagonalOperator</class>
    <class kind="class">ROL::Dirac</class>
    <class kind="class">ROL::Distribution</class>
    <class kind="class">ROL::DogLeg</class>
    <class kind="class">ROL::DoubleDogLeg</class>
    <class kind="class">ROL::DualAtomVector</class>
    <class kind="class">ROL::DualProbabilityVector</class>
    <class kind="class">ROL::DualScaledStdVector</class>
    <class kind="class">ROL::ElementwiseVector</class>
    <class kind="class">ROL::EqualityConstraint</class>
    <class kind="class">ROL::EqualityConstraint_Partitioned</class>
    <class kind="class">ROL::EqualityConstraint_SimOpt</class>
    <class kind="class">ROL::ExpectationQuad</class>
    <class kind="class">ROL::ExperimentDesignInterface</class>
    <class kind="class">ROL::ExperimentDesignObjective</class>
    <class kind="class">ROL::Exponential</class>
    <class kind="class">ROL::ExpUtility</class>
    <class kind="class">ROL::FDivergence</class>
    <class kind="class">ROL::Gamma</class>
    <class kind="class">ROL::Gaussian</class>
    <class kind="class">ROL::GMRES</class>
    <class kind="class">ROL::GoldenSection</class>
    <class kind="class">ROL::GradientStep</class>
    <class kind="class">ROL::HMCR</class>
    <class kind="class">ROL::HMCRObjective</class>
    <class kind="class">ROL::InequalityConstraint</class>
    <class kind="class">ROL::InteriorPointStep</class>
    <class kind="class">ROL::IterationScaling</class>
    <class kind="class">ROL::KLDivergence</class>
    <class kind="class">ROL::Krylov</class>
    <class kind="class">ROL::Kumaraswamy</class>
    <class kind="class">ROL::Laplace</class>
    <class kind="class">ROL::lBFGS</class>
    <class kind="class">ROL::lDFP</class>
    <class kind="class">ROL::LinearCombinationObjective</class>
    <class kind="class">ROL::LinearObjective</class>
    <class kind="class">ROL::LinearOperator</class>
    <class kind="class">ROL::LineSearch</class>
    <class kind="class">ROL::LineSearchStep</class>
    <class kind="class">ROL::LogBarrierObjective</class>
    <class kind="class">ROL::LogExponentialQuadrangle</class>
    <class kind="class">ROL::Logistic</class>
    <class kind="class">ROL::LogQuantileQuadrangle</class>
    <class kind="class">ROL::LowerBoundInequalityConstraint</class>
    <class kind="class">ROL::lSR1</class>
    <class kind="class">ROL::MeanDeviation</class>
    <class kind="class">ROL::MeanDeviationFromTarget</class>
    <class kind="class">ROL::MeanVariance</class>
    <class kind="class">ROL::MeanVarianceFromTarget</class>
    <class kind="class">ROL::MeanVarianceQuadrangle</class>
    <class kind="class">ROL::Minimax1</class>
    <class kind="class">ROL::Minimax2</class>
    <class kind="class">ROL::Minimax3</class>
    <class kind="class">ROL::MixedQuantileQuadrangle</class>
    <class kind="class">ROL::MomentObjective</class>
    <class kind="class">ROL::MonteCarloGenerator</class>
    <class kind="class">ROL::MoreauYosidaCVaR</class>
    <class kind="class">ROL::MoreauYosidaPenalty</class>
    <class kind="class">ROL::MoreauYosidaPenaltyStep</class>
    <class kind="class">ROL::MultiVector</class>
    <class kind="class">ROL::MultiVectorDefault</class>
    <class kind="class">ROL::NewtonKrylovStep</class>
    <class kind="class">ROL::NewtonStep</class>
    <class kind="class">ROL::NonlinearCGStep</class>
    <class kind="class">ROL::NonlinearLeastSquaresObjective</class>
    <class kind="class">ROL::Objective</class>
    <class kind="class">ROL::Objective_SimOpt</class>
    <class kind="class">ROL::ObjectiveFromBoundConstraint</class>
    <class kind="class">ROL::OptimizationProblem</class>
    <class kind="class">ROL::Parabolic</class>
    <class kind="class">ROL::Parametrize</class>
    <class kind="class">ROL::ParametrizedCompositeObjective</class>
    <class kind="class">ROL::ParametrizedCompositeObjective_SimOpt</class>
    <class kind="class">ROL::ParametrizedEqualityConstraint</class>
    <class kind="class">ROL::ParametrizedEqualityConstraint_SimOpt</class>
    <class kind="class">ROL::ParametrizedObjective</class>
    <class kind="class">ROL::ParametrizedObjective_SimOpt</class>
    <class kind="class">ROL::ParametrizedStdObjective</class>
    <class kind="class">ROL::PartitionedVector</class>
    <class kind="class">ROL::PathBasedTargetLevel</class>
    <class kind="class">ROL::PenalizedObjective</class>
    <class kind="class">ROL::PlusFunction</class>
    <class kind="class">ROL::PointwiseCDFObjective</class>
    <class kind="class">ROL::PositiveFunction</class>
    <class kind="class">ROL::PrimalAtomVector</class>
    <class kind="class">ROL::PrimalDualActiveSetStep</class>
    <class kind="class">ROL::PrimalProbabilityVector</class>
    <class kind="class">ROL::PrimalScaledStdVector</class>
    <class kind="class">ROL::ProbabilityVector</class>
    <class kind="class">ROL::ProjectedNewtonKrylovStep</class>
    <class kind="class">ROL::ProjectedNewtonStep</class>
    <class kind="class">ROL::ProjectedObjective</class>
    <class kind="class">ROL::ProjectedSecantStep</class>
    <class kind="class">ROL::QuadraticObjective</class>
    <class kind="class">ROL::QuadraticPenalty</class>
    <class kind="class">ROL::QuadraticPenalty_SimOpt</class>
    <class kind="class">ROL::QuantileQuadrangle</class>
    <class kind="class">ROL::QuantileRadiusQuadrangle</class>
    <class kind="class">ROL::RaisedCosine</class>
    <class kind="class">ROL::Reduced_AugmentedLagrangian_SimOpt</class>
    <class kind="class">ROL::Reduced_Objective_SimOpt</class>
    <class kind="class">ROL::Reduced_ParametrizedObjective_SimOpt</class>
    <class kind="struct">ROL::removeSpecialCharacters</class>
    <class kind="class">ROL::RiskAverseObjective</class>
    <class kind="class">ROL::RiskBoundConstraint</class>
    <class kind="class">ROL::RiskMeasure</class>
    <class kind="class">ROL::RiskNeutralObjective</class>
    <class kind="class">ROL::RiskVector</class>
    <class kind="class">ROL::SampleGenerator</class>
    <class kind="class">ROL::ScalarLinearEqualityConstraint</class>
    <class kind="class">ROL::ScalarMinimizationLineSearch</class>
    <class kind="class">ROL::Secant</class>
    <class kind="struct">ROL::SecantState</class>
    <class kind="class">ROL::SecantStep</class>
    <class kind="class">ROL::SimulatedEqualityConstraint</class>
    <class kind="class">ROL::SimulatedObjective</class>
    <class kind="class">ROL::SimulatedObjectiveCVaR</class>
    <class kind="class">ROL::SimulatedVector</class>
    <class kind="class">ROL::SingletonKusuoka</class>
    <class kind="class">ROL::Smale</class>
    <class kind="class">ROL::SmoothedWorstCaseQuadrangle</class>
    <class kind="class">ROL::SROMGenerator</class>
    <class kind="class">ROL::SROMVector</class>
    <class kind="class">ROL::StatusTest</class>
    <class kind="class">ROL::StatusTestFactory</class>
    <class kind="class">ROL::StdBoundConstraint</class>
    <class kind="class">ROL::StdObjective</class>
    <class kind="class">ROL::StdTeuchosBatchManager</class>
    <class kind="class">ROL::StdVector</class>
    <class kind="class">ROL::Step</class>
    <class kind="class">ROL::StepFactory</class>
    <class kind="struct">ROL::StepState</class>
    <class kind="class">ROL::StochasticProblem</class>
    <class kind="class">ROL::SuperQuantileQuadrangle</class>
    <class kind="class">ROL::TeuchosBatchManager</class>
    <class kind="class">ROL::Triangle</class>
    <class kind="class">ROL::TruncatedCG</class>
    <class kind="class">ROL::TruncatedExponential</class>
    <class kind="class">ROL::TruncatedGaussian</class>
    <class kind="class">ROL::TruncatedMeanQuadrangle</class>
    <class kind="class">ROL::TrustRegion</class>
    <class kind="class">ROL::TrustRegionStep</class>
    <class kind="struct">ROL::TypeCaster</class>
    <class kind="struct">ROL::TypeCaster&lt; double, float &gt;</class>
    <class kind="struct">ROL::TypeCaster&lt; Real, std::complex&lt; Real &gt; &gt;</class>
    <class kind="class">ROL::Uniform</class>
    <class kind="class">ROL::UpperBoundInequalityConstraint</class>
    <class kind="class">ROL::UserInputGenerator</class>
    <class kind="class">ROL::Vector</class>
    <class kind="class">ROL::Vector_SimOpt</class>
    <member kind="enumeration">
      <type></type>
      <name>EDistribution</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_ARCSINE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2adfbd78741aab214d8eebdf69a7d75917</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_BETA</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a8d30fc7153275cedb23a53754b62e928</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_CAUCHY</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2adc08b181bc96c81638c8a49f609e954e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_DIRAC</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2aa3afd2f9bf28d938ae7c152b77de6979</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_EXPONENTIAL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a2dadfda956e202f25ba3a9372557aefb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_GAMMA</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a50f71c8b04f20b48e43a3b15e37be1a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_GAUSSIAN</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a849f23f1f9c3d6f5599fbc3744259a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_KUMARASWAMY</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2afb3c7a987b57e9dac7cac804c5d9a151</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_LAPLACE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a3ba53bb8a86d3836c7d94c753d101e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_LOGISTIC</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a949efdc8f55c1ff6300c22d91b52108e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_PARABOLIC</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2adddc2a26f5e7e56061c697a82cd6b06d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_RAISEDCOSINE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a33c1c6e66d45b003d6c64bfa590cceeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_SMALE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a097af45a6a8edc8171e1e9b0743a9957</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_TRIANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a1138228d95af65843c543178b80f9a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_TRUNCATEDEXPONENTIAL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2acf4d61042b3021a27baec487c9965c6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_TRUNCATEDGAUSSIAN</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2ad69fc3d212c8cd6625db63739d5a04b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_UNIFORM</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a2499c81b3d550b5c619c6488c8285a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTION_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8c500c4d21b51b629a6de031fe7b3cf2a6a4a7d1f7591b02d80d247f1551217bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ERiskMeasure</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_CVAR</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa7e3fa8eeb45773dda1bb56e5692dd201</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_COHERENTEXPUTILITY</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa41589d3ea061fa244391b79043eed657</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_EXPUTILITY</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa24b11e2d9509e89b247b0656589092f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_HMCR</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa90267503ba3a4858856d7ff89e720626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_MEANDEVIATIONFROMTARGET</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa5076fd2cda916c365f2afa8a6233c8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_MEANDEVIATION</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa5738a023ea5d6eda79be0fa285f7b55e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_MEANVARIANCEFROMTARGET</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa8c0c33947dc09d6e5264d6de4047c60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_MEANVARIANCE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa60b9ce7ae3f3f7b7236326015d5c5aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_MOREAUYOSIDACVAR</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa22fbb24274257a4f1062ba09b9c119b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_LOGEXPONENTIALQUADRANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa0769a3d1c258c50d804e428d35a1af74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_LOGQUANTILEQUADRANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aaf5039f31ab3057fbd68325a8c205913a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_MEANVARIANCEQUADRANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aaef5662718145a239e964f8c37aadbbcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_MIXEDQUANTILEQUADRANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa593c46af85f4551ec3c04fbc08fbafc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_QUANTILEQUADRANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aab80caf2af5fea7c335d73d3f8e9884cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_QUANTILERADIUSQUADRANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aadbe0a372a2c73274e158fabe8539db23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_SMOOTHEDWORSTCASEQUADRANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aabea5553a01cc5d66c69a1eb439604e12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_SUPERQUANTILEQUADRANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa4dde9b0b81903d0253cd81fecdc2de99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_CHEBYSHEVKUSUOKA</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aabc13126c5994039d1f58db778d847f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_SINGLETONKUSUOKA</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aabe1470a704b35f9bea5fbae6bac95229</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_TRUNCATEDMEANQUADRANGLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aae2c36c384e39f1ad6d900659a01c0c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_CHI2DIVERGENCE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa0065d6f7a3fa014debaca7753df2f07e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_KLDIVERGENCE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aaae7c5fa2b662e91336d961abfdcee9b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RISKMEASURE_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad1e302d302e10518ae1e8763fd33f91aa323b19e156cf72aedd6b67bf05b90ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EAbsoluteValue</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae055efa411e6c0cbef222268f10728c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABSOLUTEVALUE_TRUE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae055efa411e6c0cbef222268f10728c3ae228927305eb3876fc6b82fd166e7e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABSOLUTEVALUE_SQUAREROOT</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae055efa411e6c0cbef222268f10728c3a52cfcc0f35e78b483e457a5f364a0849</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABSOLUTEVALUE_SQRTDENOM</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae055efa411e6c0cbef222268f10728c3ae3df9487b6249765cd5e2037fc0b8e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABSOLUTEVALUE_C2</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae055efa411e6c0cbef222268f10728c3a5dc19eb6c55abbc14927a34bdff0fa04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABSOLUTEVALUE_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae055efa411e6c0cbef222268f10728c3a9b219d884f614ee9a897d304d38a3c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EStep</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_AUGMENTEDLAGRANGIAN</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123eba748d4eef76821dbafdcf66c81b16787b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_BUNDLE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123eba56220ce0bd3140b912f1d63ceb04469e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_COMPOSITESTEP</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123eba7e219e09fa60f4e8073885ab8ada6caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_LINESEARCH</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123eba7555c81cf20a122f247d6c04bd1b8d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_MOREAUYOSIDAPENALTY</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123ebae044f59e48f92f546438334eacd4ec83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_PRIMALDUALACTIVESET</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123eba0e5f09ab677d4731d367ebf1ef6fb3e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_TRUSTREGION</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123ebaf97b4f8b124b21410712e4e884bfee86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_INTERIORPOINT</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123ebaa097411135dbab739f7261fcd6e4436b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEP_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac699171be1205edfaf056f5ed29123eba402149c150d35e9ff37b338dcf26250f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EBoundAlgorithm</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a665e14102bc5a5311ac561254fdd56fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUNDALGORITHM_PROJECTED</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a665e14102bc5a5311ac561254fdd56fea7113c07b2f35112e86346e793ef9ec85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUNDALGORITHM_PRIMALDUALACTIVESET</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a665e14102bc5a5311ac561254fdd56fea8c392d2c2266bc43d5c831813b27571b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUNDALGORITHM_INTERIORPOINTS</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a665e14102bc5a5311ac561254fdd56fea5b6ec9c15a8a2c5671ca3c8e538397df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUNDALGORITHM_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a665e14102bc5a5311ac561254fdd56fea1390b8f54e4804b817e6ae57dd82dfb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EDescent</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a52eb01de314ff83fa642ec78ba889049</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DESCENT_STEEPEST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a52eb01de314ff83fa642ec78ba889049aa19eed900d2dbd86741440416d32e8af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DESCENT_NONLINEARCG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a52eb01de314ff83fa642ec78ba889049aa5e35a50a821c7e5097be007343cdff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DESCENT_SECANT</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a52eb01de314ff83fa642ec78ba889049a2c9447dacd878b80b577746e641d2608</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DESCENT_NEWTON</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a52eb01de314ff83fa642ec78ba889049ae14dd487c2c5fc70349a5d1696d0c751</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DESCENT_NEWTONKRYLOV</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a52eb01de314ff83fa642ec78ba889049a121657bd454d6d7a485fad2ea0dfb86e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DESCENT_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a52eb01de314ff83fa642ec78ba889049a35c6ee90b7d4a95df06d9f956328e8be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ESecant</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5e778633e204e2268adc3b2dc8babe6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SECANT_LBFGS</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5e778633e204e2268adc3b2dc8babe6bad4dafaf72aaa91cbd1b01cadb715721d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SECANT_LDFP</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5e778633e204e2268adc3b2dc8babe6bab1bd486e01999dc8093f82667c3d7bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SECANT_LSR1</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5e778633e204e2268adc3b2dc8babe6ba0f1bd4484992339e2fa3f2da5d1f919a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SECANT_BARZILAIBORWEIN</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5e778633e204e2268adc3b2dc8babe6bafe8ac339799d93adf96677d8cbb7aec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SECANT_USERDEFINED</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5e778633e204e2268adc3b2dc8babe6ba81758750181dbdbae7275f5f3b9d0d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SECANT_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5e778633e204e2268adc3b2dc8babe6ba4cec8b6f31ee174101aa89f4dfe1b456</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EKrylov</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a888a8924d1738a33b69b6c3f23382f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KRYLOV_CG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a888a8924d1738a33b69b6c3f23382f5bafde056c371c26878b1a239c8d10d4924</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KRYLOV_CR</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a888a8924d1738a33b69b6c3f23382f5ba5db54e4f76d8fec76f4e7946b6ddd1b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KRYLOV_GMRES</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a888a8924d1738a33b69b6c3f23382f5ba261929392fc0a22fb7b3bac5837fb847</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KRYLOV_USERDEFINED</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a888a8924d1738a33b69b6c3f23382f5bab710ad626fd790f817583a5e0eea2fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KRYLOV_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a888a8924d1738a33b69b6c3f23382f5bae0132473d63d4ee9971cbac7b34c0097</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ENonlinearCG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_HESTENES_STIEFEL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752a7410a5c7a9a309afba364d92f8e24126</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_FLETCHER_REEVES</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752aa413583e4bc65c2fc4aa9bbc2b99f548</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_DANIEL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752a94db1f354f40c1b460c4cc803736c089</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_POLAK_RIBIERE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752a402f3776be446fef71a8031724a0b09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_FLETCHER_CONJDESC</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752ad977536f7895d48060843c4c43593111</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_LIU_STOREY</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752acd67a4c9e3fc4b66fcc0dfeb70407c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_DAI_YUAN</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752a790dee5ce9ac0a5dac4c53c47f95bad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_HAGER_ZHANG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752aaf3bd1e424a0adde358edb01359402fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_OREN_LUENBERGER</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752a7c4efe9b67c3f50a3c3fe55d7be69ea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_USERDEFINED</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752add043ebb33d929c41cf03fe6737bcbb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONLINEARCG_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5074ef24b1cc21cf78f4864935132752a6bae59ebcebc2446945af58a9acde1e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ELineSearch</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINESEARCH_ITERATIONSCALING</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64aadfea73fd39754e9aac5c9fc1c90ecfe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINESEARCH_PATHBASEDTARGETLEVEL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64aa90e256e4de359800082ca57113bb66f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINESEARCH_BACKTRACKING</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64aa20d3624c104f62b8cebf99598542fccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINESEARCH_BISECTION</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64aa0f52739fc41b5f86fe339aa345d49a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINESEARCH_GOLDENSECTION</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64aa90b18a88cfe7c0af73e32411f8ec53e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINESEARCH_CUBICINTERP</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64aa5c4537ba5e435cd6e6158728ccc5d0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINESEARCH_BRENTS</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64aa8111cdb347985ffc9802b898278d892b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINESEARCH_USERDEFINED</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64aa623979d15d545f52ea24d1aaa2299e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINESEARCH_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a2b6701c6f46486d6cc9646d726a64aa039c443d4ba4784da10ea43e556235c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ECurvatureCondition</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a55915452a678e4bde9969533bd645892</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CURVATURECONDITION_WOLFE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a55915452a678e4bde9969533bd645892a9065f4f32e16d200c09af9f7a0ac430c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CURVATURECONDITION_STRONGWOLFE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a55915452a678e4bde9969533bd645892ac3b9ecd43463e3c6a9d600a19c8b23fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CURVATURECONDITION_GENERALIZEDWOLFE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a55915452a678e4bde9969533bd645892a21192b1cc92ac890e7b111130d5cf6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CURVATURECONDITION_APPROXIMATEWOLFE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a55915452a678e4bde9969533bd645892a6d21f13764e9e40541403d4c6f871391</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CURVATURECONDITION_GOLDSTEIN</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a55915452a678e4bde9969533bd645892aee021a1865913003dbf179fc8cc63390</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CURVATURECONDITION_NULL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a55915452a678e4bde9969533bd645892aae3ac34e2cef05c41e2649fa7463e1c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CURVATURECONDITION_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a55915452a678e4bde9969533bd645892a3d27ed8bd00c503bde491c0e4d6a34ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ETrustRegion</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>add2e5c3d11354e548ca67cb049d682d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_CAUCHYPOINT</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>add2e5c3d11354e548ca67cb049d682d8abcc906fb7aa126d422bcc5a4ca809eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_TRUNCATEDCG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>add2e5c3d11354e548ca67cb049d682d8adec9489f221db2f45bcf2e1069f3badf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_DOGLEG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>add2e5c3d11354e548ca67cb049d682d8a515328269a4bbf7da3d841af5d47850c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_DOUBLEDOGLEG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>add2e5c3d11354e548ca67cb049d682d8ab24d71fec9a74423810b67fa4770444d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>add2e5c3d11354e548ca67cb049d682d8a05db0192640b986e1d018575d88d070f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ETrustRegionFlag</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3fdeb638bd18396322344addb2337e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_FLAG_SUCCESS</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3fdeb638bd18396322344addb2337e6af37a9054ce965a587c148da41c35849a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_FLAG_POSPREDNEG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3fdeb638bd18396322344addb2337e6a3bf991cf7d894a980032f2eefd2c73d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_FLAG_NPOSPREDPOS</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3fdeb638bd18396322344addb2337e6ad0ccd4b1e7a695128f2450352fcbeac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_FLAG_NPOSPREDNEG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3fdeb638bd18396322344addb2337e6a48c53ed2a95b5846aa56890a8c353a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_FLAG_QMINSUFDEC</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3fdeb638bd18396322344addb2337e6aa2e04d401cefc8d8f2577970111cd486</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_FLAG_NAN</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3fdeb638bd18396322344addb2337e6a1a02d2154e502bae295a76860f70e7f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUSTREGION_FLAG_UNDEFINED</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3fdeb638bd18396322344addb2337e6a4d54a2208e580036786a068f16f39036</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ECGFlag</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a80bbf6d56d6c5927d0e18ec6af5f8004</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CG_FLAG_SUCCESS</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a80bbf6d56d6c5927d0e18ec6af5f8004a917075a34024be2f8714875daa58b937</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CG_FLAG_ITEREXCEED</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a80bbf6d56d6c5927d0e18ec6af5f8004a0aad1e58a1593618745d0c07e7199ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CG_FLAG_NEGCURVE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a80bbf6d56d6c5927d0e18ec6af5f8004abcbf5577c470d0ee39d5f6fbb53f1944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CG_FLAG_TRRADEX</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a80bbf6d56d6c5927d0e18ec6af5f8004adfc0fd663a7876c7008057b7381a2a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CG_FLAG_UNDEFINED</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a80bbf6d56d6c5927d0e18ec6af5f8004a77155edf22d4c8047f3cdecaedcb8f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ETestObjectives</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_ROSENBROCK</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458a8d01929cb1268c8d7c40c3f5c3a7c7da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_FREUDENSTEINANDROTH</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458a879c84f3d270822d4db977a8dcce6ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_BEALE</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458afeb5366a4a02535a4b8359ded4431831</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_POWELL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458a3eb2b24c3228ea7d037d3963882ce8d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_SUMOFSQUARES</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458a3fd33a02941cd4edd12890bc4594cc57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_LEASTSQUARES</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458a4bde1df6a418ae35b4147e5d9ef52661</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_POISSONCONTROL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458a25544d45405ec36b19b6621fcfd293a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_POISSONINVERSION</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458a16961c0bac13291c7c25758ecbcf6b40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_ZAKHAROV</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458a31edad868d080bc46495bd2ec387b10f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOBJECTIVES_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada7265c5b15ac9cec498e2dd46a9f458a4db7eed0191f96bff63293a90a849344</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ETestOptProblem</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_HS1</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47a157e9a897e1073a11f15247b927abab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_HS2</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47a322ee700cc10604c890071b81fc962ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_HS3</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47a52e26fce384833bd5712f6fa69ca550b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_HS4</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47a9ad3eabb8beb0735a0f7d4a7bdebdcb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_HS5</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47a49f6a3a3ec6dccaacb8e2625bf30285a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_HS25</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47a3df9078c62bd1964d2fa85abc50b4dc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_HS38</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47adc0395b9e15e410373d61d13aae62830</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_HS45</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47ade87c4a42291d7e211e858cefdd14192</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_BVP</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47a8e149a8d458cd8b794d75f012bd2c38e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TESTOPTPROBLEM_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4ffead71eda57ff3ff219833d82a9b47a59e3487f07833fbc42f62ee85b867dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EConstraint</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab3b3414b98866106e079d41eb519cec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTRAINT_EQUALITY</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab3b3414b98866106e079d41eb519cec4a48755d08d993c66453dc8027e0717ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTRAINT_INEQUALITY</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab3b3414b98866106e079d41eb519cec4a700938bf1b8f9888d0dcbadc617649ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTRAINT_LAST</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab3b3414b98866106e079d41eb519cec4a6f6af079f9c6c52a8a5bd0e1d41a4bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>CreatePartitionedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a36d98bfa33209a0b667d12384d254c25</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>CreatePartitionedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4d160f6a07da05ec6d48000bae2a1c48</anchor>
      <arglist>(const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>CreatePartitionedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a95d333365077fe46dc37a16e76d814cf</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>CreatePartitionedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>af73f407b6ed1109437c585ca6699153a</anchor>
      <arglist>(const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>CreatePartitionedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a9a9e97b3a107a5ed1ecf747988db7d80</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>CreatePartitionedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a089123184b4bd1d7a6386ce72466a8a6</anchor>
      <arglist>(const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>CreatePartitionedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ada4e00089f66bca689ff037b1c43e4ae</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;c, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>CreatePartitionedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a267d27b6e2b98626543d7f4f7f16e7a2</anchor>
      <arglist>(const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;c, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RandomizeVector</name>
      <anchorfile>group__la__group.html</anchorfile>
      <anchor>ga70323bf6909aaa2841a19255d5ce1976</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Real &amp;lower=0.0, const Real &amp;upper=1.0)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt;</type>
      <name>CreateEqualityConstraintPartitioned</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac255b9f42c5de4620807bacf29a44a38</anchor>
      <arglist>(const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;con1, const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;con2)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt;</type>
      <name>CreateEqualityConstraintPartitioned</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a7535476fdde0475ca3d9fdeaba3de2ed</anchor>
      <arglist>(const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;con1, const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;con2, const Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;con3)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>normL1</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a091e77229ad4936cf8d1479d36bfa294</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>normLp</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5f0a33409d081e2a4f79058686c96c69</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x, Exponent p)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>normLinf</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8b245e063f9b89547d444f93ea3734f6</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Krylov&lt; Real &gt; &gt;</type>
      <name>KrylovFactory</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a7d0a1c08460a9710d7af7724f8ab65db</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; LineSearch&lt; Real &gt; &gt;</type>
      <name>LineSearchFactory</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac1a6d95dd1d6ca06704d8b1daf5a433c</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Secant&lt; Real &gt; &gt;</type>
      <name>getSecant</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a795416f5d021e2cd3ddca8343646ee27</anchor>
      <arglist>(ESecant esec=SECANT_LBFGS, int L=10, int BBtype=1)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Secant&lt; Real &gt; &gt;</type>
      <name>SecantFactory</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab50bf6927b737fd79badaf232e175417</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; TrustRegion&lt; Real &gt; &gt;</type>
      <name>TrustRegionFactory</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a446b536ecd1b4e1f47b326c42ab581a8</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>EDistributionToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae637c125cd0f156a2c916b630ae73127</anchor>
      <arglist>(EDistribution ed)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidDistribution</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>af420fb200817b0a7d16bff95b3e9e8bd</anchor>
      <arglist>(EDistribution ed)</arglist>
    </member>
    <member kind="function">
      <type>EDistribution &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a20b2373a8421a15703791294b78716e1</anchor>
      <arglist>(EDistribution &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EDistribution</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a64c509d8d1254810cf9534f599996d1a</anchor>
      <arglist>(EDistribution &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EDistribution &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a1386958f8e61eb23a9f067396f843d4f</anchor>
      <arglist>(EDistribution &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EDistribution</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a278feb3f77b973dd9c5c5b181c11ba37</anchor>
      <arglist>(EDistribution &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EDistribution</type>
      <name>StringToEDistribution</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a70f4ed0508e9a2c380c7e8cc98b8a3a0</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Distribution&lt; Real &gt; &gt;</type>
      <name>DistributionFactory</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a890a543d5e5754d66c96f5c2374096cc</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ERiskMeasureToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a30b57d576dcdb890c513a3100ad88999</anchor>
      <arglist>(ERiskMeasure ed)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidRiskMeasure</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a027c8c697689b1b718a2415541838426</anchor>
      <arglist>(ERiskMeasure ed)</arglist>
    </member>
    <member kind="function">
      <type>ERiskMeasure &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6c23367f6963137f46d6eecbcd5df6e6</anchor>
      <arglist>(ERiskMeasure &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ERiskMeasure</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac3316aeca62d6a936283df16228c5e9a</anchor>
      <arglist>(ERiskMeasure &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ERiskMeasure &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a1d5291b16c6ca995ded6aca67d8bb1d0</anchor>
      <arglist>(ERiskMeasure &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ERiskMeasure</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8aeb50b29e327587667e98c11e44d6eb</anchor>
      <arglist>(ERiskMeasure &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ERiskMeasure</type>
      <name>StringToERiskMeasure</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6d5a43267b71889ba733527ffda5963a</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; RiskMeasure&lt; Real &gt; &gt;</type>
      <name>RiskMeasureFactory</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aab2419b8e371fd08230708f8910802bf</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RiskMeasureInfo</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a130be271bb941fe6c2509f5c4b83738b</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, std::string &amp;name, int &amp;nStatistic, std::vector&lt; Real &gt; &amp;lower, std::vector&lt; Real &gt; &amp;upper, bool &amp;isBoundActivated, const bool printToStream=false, std::ostream &amp;outStream=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>CreateSimulatedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a53b612954e550d93342b6df073a82c46</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>CreateSimulatedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>af4c3ea94adf17fbf70c5e4d12f8fabae</anchor>
      <arglist>(const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>CreateSimulatedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>af98bb6335b7686447e5b12d861abcdd5</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>CreateSimulatedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ace4973e0b364f62ffaf8426095f47755</anchor>
      <arglist>(const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>CreateSimulatedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a570999eaa67739f4a4aab528aa59aaed</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;c, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>CreateSimulatedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a65448ea17d83e7ca503391bd32b41755</anchor>
      <arglist>(const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;c, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>CreateSimulatedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>afd1a3a7d1654fe6e41f5e847a6275b05</anchor>
      <arglist>(const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;c, const Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;d, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt;</type>
      <name>CreateSimulatedVector</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>adcf1a04d79c03f166c8c95078687b1e6</anchor>
      <arglist>(const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;a, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;b, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;c, const Teuchos::RCP&lt; const Vector&lt; Real &gt; &gt; &amp;d, const Teuchos::RCP&lt; BatchManager&lt; Real &gt; &gt; &amp;bman)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::SerialDenseMatrix&lt; int, Real &gt;</type>
      <name>computeDenseHessian</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3383567e23310d0192bc1a8f733e5d4</anchor>
      <arglist>(Objective&lt; Real &gt; &amp;obj, const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::SerialDenseMatrix&lt; int, Real &gt;</type>
      <name>computeDotMatrix</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a9c04a3777e97507f4307004ce170f61b</anchor>
      <arglist>(const Vector&lt; Real &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>computeEigenvalues</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a93f480c7db4b895ba9b14b6d5c619735</anchor>
      <arglist>(const Teuchos::SerialDenseMatrix&lt; int, Real &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; Real &gt; &gt;</type>
      <name>computeGenEigenvalues</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad6f03ad58f4e8cbc9cb3bb2d45167bc3</anchor>
      <arglist>(const Teuchos::SerialDenseMatrix&lt; int, Real &gt; &amp;A, const Teuchos::SerialDenseMatrix&lt; int, Real &gt; &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::SerialDenseMatrix&lt; int, Real &gt;</type>
      <name>computeInverse</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ace1facbd0a5d6e4afe671a39f3125ec1</anchor>
      <arglist>(const Teuchos::SerialDenseMatrix&lt; int, Real &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameter</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a2aa1fa2f03930bb3e87985070a8aef70</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, const std::vector&lt; std::string &gt; &amp;location, const std::vector&lt; std::string &gt;::iterator iter, ParameterType value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tierParameterList</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a32b34a08883f1afbdfa82bdbdcbfdbaf</anchor>
      <arglist>(Teuchos::ParameterList &amp;outList, const Teuchos::ParameterList &amp;inList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTestObjectives</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4a38a89725f26cccf42d00424c885767</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x, const ETestObjectives test)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTestObjectives</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac7a258a1ac755044d54c5cdf97657db6</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x, const ETestOptProblem test)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>NumberToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a235ef4cbe875aa9cf50775a3f3dc526d</anchor>
      <arglist>(T Number)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>ROL_EPSILON</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a45e9b5eea97eec9d4af1b76141f331db</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>ROL_THRESHOLD</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aee9d620749a7ddc9fc740e6c857083e7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>ROL_OVERFLOW</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8f94b74f5e2292ab41c66a2c0e515c34</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>ROL_INF</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad5d1a45f51e1e29a34368fea5e0a7476</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>ROL_NINF</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa3c4a092838aa073ef53f433ade875ab</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>ROL_UNDERFLOW</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aebaab26603b2cc156df880392af8effe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>removeStringFormat</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a382f23a5dc1b473769f467f943128601</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>EStepToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a049ae93a393eb6306387b488af36bf99</anchor>
      <arglist>(EStep tr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidStep</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a2d79198bc43f010fa4ed60ba283274f9</anchor>
      <arglist>(EStep ls)</arglist>
    </member>
    <member kind="function">
      <type>EStep &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6ddbea93b9f2411077d77fecb1d0d220</anchor>
      <arglist>(EStep &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EStep</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a883af171d73e079eb21a85e99c68466f</anchor>
      <arglist>(EStep &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EStep &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad06a022c24055d5ddc06b8b44dc5952d</anchor>
      <arglist>(EStep &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EStep</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a39912b46b056cf3a9d2b93a067d7f68c</anchor>
      <arglist>(EStep &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EStep</type>
      <name>StringToEStep</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae8f228ee0af1453012fa292ca03066a8</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>EBoundAlgorithmToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a21a3a2a132664f4c49e8831b325b6356</anchor>
      <arglist>(EBoundAlgorithm tr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidBoundAlgorithm</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a882eaad478a7703d01e889f095ec1646</anchor>
      <arglist>(EBoundAlgorithm d)</arglist>
    </member>
    <member kind="function">
      <type>EBoundAlgorithm &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a36b8a227924cf8ece4bf9c2b3a565856</anchor>
      <arglist>(EBoundAlgorithm &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EBoundAlgorithm</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>af50f1dc16e57010965fb0337f685dd1d</anchor>
      <arglist>(EBoundAlgorithm &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EBoundAlgorithm &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a90933fc0dd0b4c8fda7dee039301c69b</anchor>
      <arglist>(EBoundAlgorithm &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EBoundAlgorithm</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa70cd51c8e7d461ce09f92de25242b61</anchor>
      <arglist>(EBoundAlgorithm &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EBoundAlgorithm</type>
      <name>StringToEBoundAlgorithm</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a44332378e9757493324fb204fdf6cce2</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>EDescentToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5ee1462f969e3efca3859caba732eb97</anchor>
      <arglist>(EDescent tr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidDescent</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a11ae7fee16ad007829a8089edd742db1</anchor>
      <arglist>(EDescent d)</arglist>
    </member>
    <member kind="function">
      <type>EDescent &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aba55d65d49ed75a0a1928c4634b2992e</anchor>
      <arglist>(EDescent &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EDescent</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aacd151cfc9be90255e27e38173ec4aac</anchor>
      <arglist>(EDescent &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EDescent &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>af3a5c11ed4565985c18331d295553a36</anchor>
      <arglist>(EDescent &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EDescent</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4191e2bf0c5ebc659d57a21696812d70</anchor>
      <arglist>(EDescent &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EDescent</type>
      <name>StringToEDescent</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a123cc0305aac71ab1a919cb37e90af1e</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ESecantToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aafb9439cbac248a2ed408e3326acbc35</anchor>
      <arglist>(ESecant tr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidSecant</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>afbf29e3e6ecc86d39c8dcbc3ee96daba</anchor>
      <arglist>(ESecant s)</arglist>
    </member>
    <member kind="function">
      <type>ESecant &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4218c724b24501a9f9b6a60616444865</anchor>
      <arglist>(ESecant &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ESecant</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4bf180a54e92cd5bc6466fccfd6c37b2</anchor>
      <arglist>(ESecant &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ESecant &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a486b3bdc49d7ec996511c4929eb334d4</anchor>
      <arglist>(ESecant &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ESecant</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a6a4d39d5b119a2f77c3056371baea759</anchor>
      <arglist>(ESecant &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ESecant</type>
      <name>StringToESecant</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5c3acdc1ee862dc74ffe360d66004187</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>EKrylovToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a701532eb75c3b410a79ecf642f93fcd2</anchor>
      <arglist>(EKrylov tr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidKrylov</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a1c9c84dc34a73b48c0e3b08e1d937557</anchor>
      <arglist>(EKrylov d)</arglist>
    </member>
    <member kind="function">
      <type>EKrylov &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a155a0868d4b3b9a4fca9149524faf3af</anchor>
      <arglist>(EKrylov &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EKrylov</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a3f8b464db8c81109a8be7243146effa7</anchor>
      <arglist>(EKrylov &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EKrylov &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a54c490fc1c590a951065582358facbc7</anchor>
      <arglist>(EKrylov &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EKrylov</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a1fccc51244e5a0e9b03dd09f2a45d7c4</anchor>
      <arglist>(EKrylov &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EKrylov</type>
      <name>StringToEKrylov</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a07cbf7b5c5cd423383ad7713d6fbb271</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ENonlinearCGToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad5e2c0dab278309e81ab3a990d316ee2</anchor>
      <arglist>(ENonlinearCG tr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidNonlinearCG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a9444032f76a7bec521eaebc989b7adb9</anchor>
      <arglist>(ENonlinearCG s)</arglist>
    </member>
    <member kind="function">
      <type>ENonlinearCG &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a001618e8a9ec50a79abe82315034d0d5</anchor>
      <arglist>(ENonlinearCG &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ENonlinearCG</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a289402716596e18717f3ea83fb469a2f</anchor>
      <arglist>(ENonlinearCG &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ENonlinearCG &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a49170b853623137701925a08970b1d13</anchor>
      <arglist>(ENonlinearCG &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ENonlinearCG</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab6929c4c7bc601c1b4e495a214d33fe9</anchor>
      <arglist>(ENonlinearCG &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ENonlinearCG</type>
      <name>StringToENonlinearCG</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a80d29f0d985357dddb247b94a78c4988</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ELineSearchToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a84207ff3db3a5048664ef0ea13e25637</anchor>
      <arglist>(ELineSearch ls)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidLineSearch</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a01d66b056b605ed90b1a6ff667077d5a</anchor>
      <arglist>(ELineSearch ls)</arglist>
    </member>
    <member kind="function">
      <type>ELineSearch &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a04c171f664350473038ee0011944ed5e</anchor>
      <arglist>(ELineSearch &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ELineSearch</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5df9f11582367c4b8bbf8e13c72fab5b</anchor>
      <arglist>(ELineSearch &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ELineSearch &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac3a6e658bfb88846105cd5d2b5173572</anchor>
      <arglist>(ELineSearch &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ELineSearch</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac2c343363ec9faf693e6111a0f605bc7</anchor>
      <arglist>(ELineSearch &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ELineSearch</type>
      <name>StringToELineSearch</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aee90e7737381ab10c8de66061db8d323</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ECurvatureConditionToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a61eefff65b69cab3b571080c0348aab5</anchor>
      <arglist>(ECurvatureCondition ls)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidCurvatureCondition</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a734c9839193e07a1c647d5131bd81811</anchor>
      <arglist>(ECurvatureCondition ls)</arglist>
    </member>
    <member kind="function">
      <type>ECurvatureCondition &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae74e803ca7e8d5c46ff5475282d0f51e</anchor>
      <arglist>(ECurvatureCondition &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ECurvatureCondition</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa5a3fa739bd36d6ca92b263e44b86292</anchor>
      <arglist>(ECurvatureCondition &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ECurvatureCondition &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aa6e76e1d576e8deab7a95510625c08a9</anchor>
      <arglist>(ECurvatureCondition &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ECurvatureCondition</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a8aa7650be6be132b203abd6a3b90bf20</anchor>
      <arglist>(ECurvatureCondition &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ECurvatureCondition</type>
      <name>StringToECurvatureCondition</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>af0e30b1c2b41bc783f181a77d3dded17</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ETrustRegionToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab94c324c0eb0178c72c0997ec146b2cd</anchor>
      <arglist>(ETrustRegion tr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ETrustRegionFlagToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab3f768a71397defa190e89d6195a35d0</anchor>
      <arglist>(ETrustRegionFlag trf)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ECGFlagToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad30fd1c34749622aa345dda3edeb4df4</anchor>
      <arglist>(ECGFlag cgf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidTrustRegion</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a4505d9b2a522170c3abf4dd23ef7d161</anchor>
      <arglist>(ETrustRegion ls)</arglist>
    </member>
    <member kind="function">
      <type>ETrustRegion &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a02bd26917d4ff584d868277c4d13aa19</anchor>
      <arglist>(ETrustRegion &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ETrustRegion</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a53e05dc75be1a536b09551d94280d6b6</anchor>
      <arglist>(ETrustRegion &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ETrustRegion &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a71128708c3fb3e04812310b522bd3790</anchor>
      <arglist>(ETrustRegion &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ETrustRegion</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>acb2967707b7df50ff48baabee8ce94d8</anchor>
      <arglist>(ETrustRegion &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ETrustRegion</type>
      <name>StringToETrustRegion</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a768ff2511f22c3012e7244fb9f16692c</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ETestObjectivesToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a26c3073c3e583c6e62acb6abfa2bd91c</anchor>
      <arglist>(ETestObjectives to)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidTestObjectives</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5ce8e6508a96573b5ec08de4f1930bb8</anchor>
      <arglist>(ETestObjectives to)</arglist>
    </member>
    <member kind="function">
      <type>ETestObjectives &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a5f9ca4834b67d36be7a0bd5a86c8a3da</anchor>
      <arglist>(ETestObjectives &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ETestObjectives</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a445038bc11769f90b4dab60c64a1d734</anchor>
      <arglist>(ETestObjectives &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ETestObjectives &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a7a5097cc02900f98256b72e6698c46e6</anchor>
      <arglist>(ETestObjectives &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ETestObjectives</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a400f732ccc801fc4b63352f23cfaa840</anchor>
      <arglist>(ETestObjectives &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ETestObjectives</type>
      <name>StringToETestObjectives</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>afe072c4c73ec170795f06bbd6d08ccf9</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ETestOptProblemToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a029e61ca6c1d0a7049714ed55ce09bc1</anchor>
      <arglist>(ETestOptProblem to)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidTestOptProblem</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a532ed492a0bb3e482cc3d58390dd8ae9</anchor>
      <arglist>(ETestOptProblem to)</arglist>
    </member>
    <member kind="function">
      <type>ETestOptProblem &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a57662133161d489c853eace208971667</anchor>
      <arglist>(ETestOptProblem &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ETestOptProblem</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a2c084d41372261459aa6c3c25ac05e1b</anchor>
      <arglist>(ETestOptProblem &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ETestOptProblem &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>afacf3abb781556d2e67265676336350f</anchor>
      <arglist>(ETestOptProblem &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>ETestOptProblem</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a2f6ecd9e67d58a20fa99ec94677587ba</anchor>
      <arglist>(ETestOptProblem &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>ETestOptProblem</type>
      <name>StringToETestOptProblem</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ae744dfe6e92a26a5e1b9ef7874a1131c</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>EConstraintToString</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aaff5d8c1ed4f163934549f5a4586edfd</anchor>
      <arglist>(EConstraint c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isValidConstraint</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>aafdcfe5f4e8baa7ed6af9e0f0aa03ef7</anchor>
      <arglist>(EConstraint c)</arglist>
    </member>
    <member kind="function">
      <type>EConstraint &amp;</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a54051929029d8e453c4cfdd7ed8f45bc</anchor>
      <arglist>(EConstraint &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EConstraint</type>
      <name>operator++</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a56b2ed49f8db438943b4319bdf52466a</anchor>
      <arglist>(EConstraint &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EConstraint &amp;</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab77b41896cfc6b6bfd4d9894dd3f30e9</anchor>
      <arglist>(EConstraint &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>EConstraint</type>
      <name>operator--</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ac26c1e7d115a2e8865a93cccd7cd2d58</anchor>
      <arglist>(EConstraint &amp;type, int)</arglist>
    </member>
    <member kind="function">
      <type>EConstraint</type>
      <name>StringToEConstraint</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ab8afe582dc83128a397b3e5fc141fb80</anchor>
      <arglist>(std::string s)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>rol_cast</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>ad2b17deeb2255048ae26ff5c49decf80</anchor>
      <arglist>(const Element &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addJSONBlockToPL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a7358fd7a2ae28905ea9aece579eb72af</anchor>
      <arglist>(const Json::Value &amp;block, Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addJSONPairToPL</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a9b8982075b92d378e7a1d8f6daef4cf3</anchor>
      <arglist>(const Json::Value &amp;block, const std::string &amp;key, Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JSON_Parameters</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a9caa60bf59a6b16f9122bb1512b4d67f</anchor>
      <arglist>(const std::string &amp;jsonFileName, Teuchos::ParameterList &amp;parlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stepFactory</name>
      <anchorfile>namespaceROL.html</anchorfile>
      <anchor>a7dd2f89bf4f64b253c8c881588e6d922</anchor>
      <arglist>(Teuchos::ParameterList &amp;parlist, Teuchos::RCP&lt; ROL::Step&lt; Real &gt; &gt; &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ROL::Exception</name>
    <filename>namespaceROL_1_1Exception.html</filename>
    <class kind="class">ROL::Exception::NotImplemented</class>
  </compound>
  <compound kind="namespace">
    <name>ROL::Finite_Difference_Arrays</name>
    <filename>namespaceROL_1_1Finite__Difference__Arrays.html</filename>
    <member kind="variable">
      <type>const int</type>
      <name>shifts</name>
      <anchorfile>namespaceROL_1_1Finite__Difference__Arrays.html</anchorfile>
      <anchor>a26d91fcc2b987e3c8ca44154e6254d62</anchor>
      <arglist>[4][4]</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>weights</name>
      <anchorfile>namespaceROL_1_1Finite__Difference__Arrays.html</anchorfile>
      <anchor>ae20d14aebf71691013c1b446157796c3</anchor>
      <arglist>[4][5]</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ROL::InteriorPoint</name>
    <filename>namespaceROL_1_1InteriorPoint.html</filename>
    <class kind="class">ROL::InteriorPoint::CompositeConstraint</class>
    <class kind="class">ROL::InteriorPoint::MeritFunction</class>
    <class kind="class">ROL::InteriorPoint::PenalizedObjective</class>
    <class kind="class">ROL::InteriorPoint::PrimalDualResidual</class>
    <class kind="class">ROL::InteriorPoint::PrimalDualSymmetrizer</class>
  </compound>
  <compound kind="namespace">
    <name>ROL::StringList</name>
    <filename>namespaceROL_1_1StringList.html</filename>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>join</name>
      <anchorfile>namespaceROL_1_1StringList.html</anchorfile>
      <anchor>a45b6592309348878213181bfd37359a5</anchor>
      <arglist>(const std::string &amp;s1, const std::string &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>join</name>
      <anchorfile>namespaceROL_1_1StringList.html</anchorfile>
      <anchor>af5e7be5365cd9968c6252f5c4d61e4cd</anchor>
      <arglist>(const std::string &amp;s1, const std::string &amp;s2, const std::string &amp;s3)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>join</name>
      <anchorfile>namespaceROL_1_1StringList.html</anchorfile>
      <anchor>a6f48164eb174b99526e24016cfe9ab6e</anchor>
      <arglist>(const std::string &amp;s1, const std::string &amp;s2, const std::string &amp;s3, const std::string &amp;s4)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>join</name>
      <anchorfile>namespaceROL_1_1StringList.html</anchorfile>
      <anchor>a395c44bab87665c6542936877eab5c61</anchor>
      <arglist>(const std::string &amp;s1, const std::string &amp;s2, const std::string &amp;s3, const std::string &amp;s4, const std::string &amp;s5)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ROL::ZOO</name>
    <filename>namespaceROL_1_1ZOO.html</filename>
    <class kind="class">ROL::ZOO::EqualityConstraint_HS32</class>
    <class kind="class">ROL::ZOO::EqualityConstraint_HS39a</class>
    <class kind="class">ROL::ZOO::EqualityConstraint_HS39b</class>
    <class kind="class">ROL::ZOO::EqualityConstraint_SimpleEqConstrained</class>
    <class kind="class">ROL::ZOO::InequalityConstraint_HS24</class>
    <class kind="class">ROL::ZOO::InequalityConstraint_HS29</class>
    <class kind="class">ROL::ZOO::InequalityConstraint_HS32</class>
    <class kind="class">ROL::ZOO::Objective_Beale</class>
    <class kind="class">ROL::ZOO::Objective_BVP</class>
    <class kind="class">ROL::ZOO::Objective_DiodeCircuit</class>
    <class kind="class">ROL::ZOO::Objective_FreudensteinRoth</class>
    <class kind="class">ROL::ZOO::Objective_HS1</class>
    <class kind="class">ROL::ZOO::Objective_HS2</class>
    <class kind="class">ROL::ZOO::Objective_HS24</class>
    <class kind="class">ROL::ZOO::Objective_HS25</class>
    <class kind="class">ROL::ZOO::Objective_HS29</class>
    <class kind="class">ROL::ZOO::Objective_HS3</class>
    <class kind="class">ROL::ZOO::Objective_HS32</class>
    <class kind="class">ROL::ZOO::Objective_HS38</class>
    <class kind="class">ROL::ZOO::Objective_HS39</class>
    <class kind="class">ROL::ZOO::Objective_HS4</class>
    <class kind="class">ROL::ZOO::Objective_HS45</class>
    <class kind="class">ROL::ZOO::Objective_HS5</class>
    <class kind="class">ROL::ZOO::Objective_LeastSquares</class>
    <class kind="class">ROL::ZOO::Objective_PoissonControl</class>
    <class kind="class">ROL::ZOO::Objective_PoissonInversion</class>
    <class kind="class">ROL::ZOO::Objective_Powell</class>
    <class kind="class">ROL::ZOO::Objective_Rosenbrock</class>
    <class kind="class">ROL::ZOO::Objective_SimpleEqConstrained</class>
    <class kind="class">ROL::ZOO::Objective_SumOfSquares</class>
    <class kind="class">ROL::ZOO::Objective_Zakharov</class>
    <member kind="function">
      <type>void</type>
      <name>getBeale</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a312f5e5a7dc65d8c1b4eb8afc3232aeb</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBVP</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>acfeb562f968fc4bd56cb455794353470</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFreudensteinRoth</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>aede93e86827434180fd8beaccd31fb33</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHS1</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a3d20ab35ac1eabf6397bbb37c998c181</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHS2</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a4ab31eee7b6d7bcd88355035b0ac8ba9</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Objective&lt; Real &gt; &gt;</type>
      <name>getObjective_HS24</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a580af92fe83555ec27f3553b0e4ec63e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; InequalityConstraint&lt; Real &gt; &gt;</type>
      <name>getInequalityConstraint_HS24</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>abfcc81a0e92195effe0c66ce9ef439d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt;</type>
      <name>getBoundConstraint_HS24</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>ad11cef7d088c9e4caf9cb565aa54a474</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getInitialGuess_HS24</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a31b67550e33e207cf2b026536b8c9f98</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getSolution_HS24</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a2d8ce8a870821fa6805c26ff45cab824</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Teuchos::RCP&lt; Vector&lt; Real &gt; &gt;</type>
      <name>getInequalityMultiplier_HS24</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a67939ec355842dc4362e5e3a862add0e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHS25</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a433ef48ce22be1bfcf9bfd11b0c14f0f</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHS3</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a60c50b9364911d74e8d9371e77e5ff90</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHS38</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>ae412f94cbbc73dfe71ec9ca6bffaa77c</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHS4</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a18b76002089e6ea349dfee35b4f06c1a</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHS45</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>abeff395ec33bd6edee69dcd788ea0329</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHS5</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a846b6e3558cff5c5831feff3a337fdc1</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; BoundConstraint&lt; Real &gt; &gt; &amp;con, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLeastSquares</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a18faef2004834cd27371f0ea2759eee4</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPoissonControl</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>af676d610fa93306653570dea7eb0939d</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPoissonInversion</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>aa3be56daf1a62ec90619ebaac49c61fc</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPowell</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>af0b31f5d149b1720911ef0556b3390f5</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRosenbrock</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a45f2f6b9509bb6c59f9b420e254a3f08</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSimpleEqConstrained</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>ab96e1aa3531a1c3265cd007179743451</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; EqualityConstraint&lt; Real &gt; &gt; &amp;constr, Vector&lt; Real &gt; &amp;x0, Vector&lt; Real &gt; &amp;sol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSumOfSquares</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a92c497662d3dc98694c2b49585db219e</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getZakharov</name>
      <anchorfile>namespaceROL_1_1ZOO.html</anchorfile>
      <anchor>a3737346ae0d69053561fb25ac76e6594</anchor>
      <arglist>(Teuchos::RCP&lt; Objective&lt; Real &gt; &gt; &amp;obj, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x0, Teuchos::RCP&lt; Vector&lt; Real &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>interface_group</name>
    <title>User Interface</title>
    <filename>group__interface__group.html</filename>
    <subgroup>la_group</subgroup>
    <subgroup>func_group</subgroup>
  </compound>
  <compound kind="group">
    <name>la_group</name>
    <title>Linear Algebra Interface</title>
    <filename>group__la__group.html</filename>
    <class kind="class">ROL::ElementwiseVector</class>
    <class kind="class">ROL::MultiVector</class>
    <class kind="class">ROL::MultiVectorDefault</class>
    <class kind="class">ROL::PartitionedVector</class>
    <class kind="class">ROL::Vector</class>
    <class kind="class">ROL::Vector_SimOpt</class>
    <class kind="class">ROL::SimulatedVector</class>
    <member kind="function">
      <type>void</type>
      <name>RandomizeVector</name>
      <anchorfile>group__la__group.html</anchorfile>
      <anchor>ga70323bf6909aaa2841a19255d5ce1976</anchor>
      <arglist>(Vector&lt; Real &gt; &amp;x, const Real &amp;lower=0.0, const Real &amp;upper=1.0)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>func_group</name>
    <title>Functional Interface</title>
    <filename>group__func__group.html</filename>
    <class kind="class">ROL::Objective</class>
    <class kind="class">ROL::BoundConstraint</class>
    <class kind="class">ROL::EqualityConstraint</class>
    <class kind="class">ROL::LinearOperator</class>
    <class kind="class">ROL::Objective_SimOpt</class>
    <class kind="class">ROL::EqualityConstraint_SimOpt</class>
    <class kind="class">ROL::Reduced_Objective_SimOpt</class>
    <class kind="class">ROL::AugmentedLagrangian</class>
    <class kind="class">ROL::AugmentedLagrangian_SimOpt</class>
    <class kind="class">ROL::BlockOperator</class>
    <class kind="class">ROL::BoundConstraint_Partitioned</class>
    <class kind="class">ROL::BoundInequalityConstraint</class>
    <class kind="class">ROL::CompositeConstraint</class>
    <class kind="class">ROL::CompositeObjective</class>
    <class kind="class">ROL::CompositeObjective_SimOpt</class>
    <class kind="class">ROL::DiagonalOperator</class>
    <class kind="class">ROL::EqualityConstraint_Partitioned</class>
    <class kind="class">ROL::InequalityConstraint</class>
    <class kind="class">ROL::LinearObjective</class>
    <class kind="class">ROL::LogBarrierObjective</class>
    <class kind="class">ROL::LowerBoundInequalityConstraint</class>
    <class kind="class">ROL::MoreauYosidaPenalty</class>
    <class kind="class">ROL::NonlinearLeastSquaresObjective</class>
    <class kind="class">ROL::ObjectiveFromBoundConstraint</class>
    <class kind="class">ROL::QuadraticObjective</class>
    <class kind="class">ROL::QuadraticPenalty</class>
    <class kind="class">ROL::QuadraticPenalty_SimOpt</class>
    <class kind="class">ROL::Reduced_AugmentedLagrangian_SimOpt</class>
    <class kind="class">ROL::ScalarLinearEqualityConstraint</class>
    <class kind="class">ROL::StdObjective</class>
    <class kind="class">ROL::UpperBoundInequalityConstraint</class>
    <class kind="class">ROL::ExperimentDesignInterface</class>
    <class kind="class">ROL::ExperimentDesignObjective</class>
    <class kind="class">ROL::PenalizedObjective</class>
    <class kind="class">ROL::InteriorPoint::CompositeConstraint</class>
    <class kind="class">ROL::InteriorPoint::PrimalDualResidual</class>
    <class kind="class">ROL::ParametrizedCompositeObjective</class>
    <class kind="class">ROL::ParametrizedStdObjective</class>
  </compound>
  <compound kind="group">
    <name>step_group</name>
    <title>Optimization Steps</title>
    <filename>group__step__group.html</filename>
    <class kind="class">ROL::AugmentedLagrangianStep</class>
    <class kind="class">ROL::BundleStep</class>
    <class kind="class">ROL::GradientStep</class>
    <class kind="class">ROL::LineSearchStep</class>
    <class kind="class">ROL::MoreauYosidaPenaltyStep</class>
    <class kind="class">ROL::NewtonKrylovStep</class>
    <class kind="class">ROL::NewtonStep</class>
    <class kind="class">ROL::NonlinearCGStep</class>
    <class kind="class">ROL::PrimalDualActiveSetStep</class>
    <class kind="class">ROL::ProjectedNewtonKrylovStep</class>
    <class kind="class">ROL::ProjectedNewtonStep</class>
    <class kind="class">ROL::ProjectedSecantStep</class>
    <class kind="class">ROL::SecantStep</class>
    <class kind="class">ROL::Step</class>
    <class kind="class">ROL::TrustRegionStep</class>
  </compound>
  <compound kind="group">
    <name>extensions_group</name>
    <title>Algorithmic Extensions</title>
    <filename>group__extensions__group.html</filename>
    <subgroup>stochastic_group</subgroup>
  </compound>
  <compound kind="group">
    <name>stochastic_group</name>
    <title>Stochastic Optimization</title>
    <filename>group__stochastic__group.html</filename>
    <subgroup>risk_group</subgroup>
    <class kind="class">ROL::Parametrize</class>
    <class kind="class">ROL::RiskMeasure</class>
  </compound>
  <compound kind="group">
    <name>risk_group</name>
    <title>Risk Measures</title>
    <filename>group__risk__group.html</filename>
    <class kind="class">ROL::Chi2Divergence</class>
    <class kind="class">ROL::LogExponentialQuadrangle</class>
    <class kind="class">ROL::LogQuantileQuadrangle</class>
    <class kind="class">ROL::MeanVarianceQuadrangle</class>
    <class kind="class">ROL::MixedQuantileQuadrangle</class>
    <class kind="class">ROL::MoreauYosidaCVaR</class>
    <class kind="class">ROL::QuantileQuadrangle</class>
    <class kind="class">ROL::SmoothedWorstCaseQuadrangle</class>
    <class kind="class">ROL::SuperQuantileQuadrangle</class>
    <class kind="class">ROL::ChebyshevKusuoka</class>
    <class kind="class">ROL::CoherentExpUtility</class>
    <class kind="class">ROL::ConvexCombinationRiskMeasure</class>
    <class kind="class">ROL::CVaR</class>
    <class kind="class">ROL::ExpectationQuad</class>
    <class kind="class">ROL::ExpUtility</class>
    <class kind="class">ROL::FDivergence</class>
    <class kind="class">ROL::HMCR</class>
    <class kind="class">ROL::KLDivergence</class>
    <class kind="class">ROL::MeanDeviation</class>
    <class kind="class">ROL::MeanDeviationFromTarget</class>
    <class kind="class">ROL::MeanVariance</class>
    <class kind="class">ROL::MeanVarianceFromTarget</class>
    <class kind="class">ROL::SingletonKusuoka</class>
  </compound>
  <compound kind="group">
    <name>examples_group</name>
    <title>Examples</title>
    <filename>group__examples__group.html</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>%ROL Documentation (Development Version)</title>
    <filename>index</filename>
    <docanchor file="index" title="Introduction">intro_sec</docanchor>
    <docanchor file="index" title="Overview">overview_sec</docanchor>
    <docanchor file="index" title="Quick Start">quickstart_sec</docanchor>
    <docanchor file="index" title="Step 1: Implement linear algebra / vector interface.">vector_qs_sec</docanchor>
    <docanchor file="index" title="Step 2: Implement objective function interface.">objective_qs_sec</docanchor>
    <docanchor file="index" title="Step 3: Choose optimization algorithm.">step_qs_sec</docanchor>
    <docanchor file="index" title="Step 4: Run algorithm.">run_qs_sec</docanchor>
  </compound>
</tagfile>
