<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="group">
    <name>AbstractLinAlgPackAssertOp_funcs</name>
    <title>Assertion functions for linear algebra operations.</title>
    <filename>group__AbstractLinAlgPackAssertOp__funcs.html</filename>
    <member kind="function">
      <type>void</type>
      <name>Vp_V_assert_compatibility</name>
      <anchorfile>group__AbstractLinAlgPackAssertOp__funcs.html</anchorfile>
      <anchor>gaacd10647ad086d875d42a74aa0718492</anchor>
      <arglist>(VectorMutable *v_lhs, const Vector &amp;v_rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_V_assert_compatibility</name>
      <anchorfile>group__AbstractLinAlgPackAssertOp__funcs.html</anchorfile>
      <anchor>ga1baff18649ce816e18a835f1d2a6180d</anchor>
      <arglist>(VectorMutable *v_lhs, const SpVectorSlice &amp;sv_rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VopV_assert_compatibility</name>
      <anchorfile>group__AbstractLinAlgPackAssertOp__funcs.html</anchorfile>
      <anchor>ga130af86a65cc6bb2743faaffcf2f9594</anchor>
      <arglist>(const Vector &amp;v_rhs1, const Vector &amp;v_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VopV_assert_compatibility</name>
      <anchorfile>group__AbstractLinAlgPackAssertOp__funcs.html</anchorfile>
      <anchor>ga43bde0f5746195b2e305f2940af001b6</anchor>
      <arglist>(const Vector &amp;v_rhs1, const SpVectorSlice &amp;sv_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>VopV_assert_compatibility</name>
      <anchorfile>group__AbstractLinAlgPackAssertOp__funcs.html</anchorfile>
      <anchor>gabad361e3e543eb45d0dd106921074af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, const Vector &amp;v_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_M_assert_compatibility</name>
      <anchorfile>group__AbstractLinAlgPackAssertOp__funcs.html</anchorfile>
      <anchor>ga1882a9295b20446f39bf431985334bd1</anchor>
      <arglist>(MatrixOp *m_lhs, BLAS_Cpp::Transp trans_lhs, const MatrixOp &amp;m_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MopM_assert_compatibility</name>
      <anchorfile>group__AbstractLinAlgPackAssertOp__funcs.html</anchorfile>
      <anchor>ga444c0da3f6dfb15f75ba7bad8322931c</anchor>
      <arglist>(const MatrixOp &amp;m_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;m_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MtV_assert_compatibility</name>
      <anchorfile>group__AbstractLinAlgPackAssertOp__funcs.html</anchorfile>
      <anchor>gab11f9efc7a6576d2a383aa3e25927935</anchor>
      <arglist>(const MatrixOp &amp;m_rhs1, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MtV_assert_compatibility</name>
      <anchorfile>group__AbstractLinAlgPackAssertOp__funcs.html</anchorfile>
      <anchor>ga8ec8e2e20ed47f2223b6d3e9682ce0f7</anchor>
      <arglist>(const MatrixOp &amp;m_rhs1, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_MtV_assert_compatibility</name>
      <anchorfile>group__AbstractLinAlgPackAssertOp__funcs.html</anchorfile>
      <anchor>ga036c5c317bef35862898b64c4291d9e7</anchor>
      <arglist>(VectorMutable *v_lhs, const MatrixOp &amp;m_rhs1, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_MtV_assert_compatibility</name>
      <anchorfile>group__AbstractLinAlgPackAssertOp__funcs.html</anchorfile>
      <anchor>ga126f49b3fae8a6f89b84c992cbe964ca</anchor>
      <arglist>(VectorMutable *v_lhs, const MatrixOp &amp;m_rhs1, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MtM_assert_compatibility</name>
      <anchorfile>group__AbstractLinAlgPackAssertOp__funcs.html</anchorfile>
      <anchor>gae5161dc9d41c4438540510d9dd18965c</anchor>
      <arglist>(const MatrixOp &amp;m_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;m_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_MtM_assert_compatibility</name>
      <anchorfile>group__AbstractLinAlgPackAssertOp__funcs.html</anchorfile>
      <anchor>ga8bac81e7712c94aaa3426d0ee52edbe1</anchor>
      <arglist>(MatrixOp *m_lhs, BLAS_Cpp::Transp trans_lhs, const MatrixOp &amp;m_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;m_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>LinAlgOpPack_grp</name>
    <title>Default linear algebra implementation operations.</title>
    <filename>group__LinAlgOpPack__grp.html</filename>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>group__LinAlgOpPack__grp.html</anchorfile>
      <anchor>ga80c1374143bb2fafb23c687d1efce8f9</anchor>
      <arglist>(MatrixOp *M_lhs, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StM</name>
      <anchorfile>group__LinAlgOpPack__grp.html</anchorfile>
      <anchor>ga1a4dd57172aff2b00740ab71b264f2cd</anchor>
      <arglist>(MatrixOp *M_lhs, value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_mM</name>
      <anchorfile>group__LinAlgOpPack__grp.html</anchorfile>
      <anchor>ga3fbc3e2a4194f0d7ff67217bc8e023ce</anchor>
      <arglist>(MatrixOp *M_lhs, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_MpM</name>
      <anchorfile>group__LinAlgOpPack__grp.html</anchorfile>
      <anchor>ga12ceed3d06e2edfa5981758766710f12</anchor>
      <arglist>(MatrixOp *M_lhs, const MatrixOp &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_MmM</name>
      <anchorfile>group__LinAlgOpPack__grp.html</anchorfile>
      <anchor>gaf6bd80fdb54459a4305a1a191824b846</anchor>
      <arglist>(MatrixOp *M_lhs, const MatrixOp &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StMpM</name>
      <anchorfile>group__LinAlgOpPack__grp.html</anchorfile>
      <anchor>ga75785d3620bd86096177b5117f78b76a</anchor>
      <arglist>(MatrixOp *M_lhs, value_type alpha, const MatrixOp &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_V</name>
      <anchorfile>group__LinAlgOpPack__grp.html</anchorfile>
      <anchor>ga3d62941eabebdb42ea705611f5f3e5db</anchor>
      <arglist>(VectorMutable *v_lhs, const V &amp;V_rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>group__LinAlgOpPack__grp.html</anchorfile>
      <anchor>ga85a9358392d2e41f7000e683a0234b61</anchor>
      <arglist>(VectorMutable *v_lhs, const V &amp;V_rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_StV</name>
      <anchorfile>group__LinAlgOpPack__grp.html</anchorfile>
      <anchor>ga7645b52e1b2030f1e5b4d4c898b674d2</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const V &amp;V_rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_mV</name>
      <anchorfile>group__LinAlgOpPack__grp.html</anchorfile>
      <anchor>gabeedbedcf83ee86c067fe64c456eabe8</anchor>
      <arglist>(VectorMutable *v_lhs, const V &amp;V_rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_VpV</name>
      <anchorfile>group__LinAlgOpPack__grp.html</anchorfile>
      <anchor>gaf35fe4bd499ee8891724c101c3c737e7</anchor>
      <arglist>(VectorMutable *v_lhs, const V1 &amp;V1_rhs1, const V2 &amp;V2_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_VmV</name>
      <anchorfile>group__LinAlgOpPack__grp.html</anchorfile>
      <anchor>gadadbbb6fab565a633b28e348615b7fcd</anchor>
      <arglist>(VectorMutable *v_lhs, const V1 &amp;V1_rhs1, const V2 &amp;V2_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_StVpV</name>
      <anchorfile>group__LinAlgOpPack__grp.html</anchorfile>
      <anchor>gae1b172c33cfbcf504e1305990e0f276f</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const V &amp;V_rhs1, const Vector &amp;vs_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_M</name>
      <anchorfile>group__LinAlgOpPack__grp.html</anchorfile>
      <anchor>ga19a052a3071f17f36c198353ca09a44a</anchor>
      <arglist>(MatrixOp *M_lhs, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>MatrixNonsingular_funcs_grp</name>
    <title>MatrixNonsing inline non-member operation functions</title>
    <filename>group__MatrixNonsingular__funcs__grp.html</filename>
    <class kind="class">AbstractLinAlgPack::MatrixNonsing::SingularMatrix</class>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga043117ac5078362ee9355d4971433417</anchor>
      <arglist>(VectorMutable *v_lhs, const MatrixNonsing &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gad382ff99fcdf308a3be0247c43df6e01</anchor>
      <arglist>(VectorMutable *v_lhs, const MatrixNonsing &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga48f895b61851d14a97959770ee55cefa</anchor>
      <arglist>(const Vector &amp;v_rhs1, const MatrixNonsing &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gaab75359a1cc9458389d0160c7181cef0</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, const MatrixNonsing &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga7c82dd9f986eeb5d1ec66e0ee5a37c92</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const MatrixOp &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga421d94763357c1f28ad9995fe6596c49</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const MatrixOp &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga0571eb9f2be1177cf18603739833aa9c</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;M_rhs2, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga3b0984e500a293b78ce2252867dd31cb</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;M_rhs2, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga5d065b06c559d40b9dada7842f95e3a6</anchor>
      <arglist>(const Vector &amp;v_rhs1, const MatrixOp &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga4f3c748885661a94efa246b69fdf79a8</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, const MatrixOp &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syr2k</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga6b95a4c9b6a0eab0af20a7565c5af56e</anchor>
      <arglist>(const MatrixOp &amp;M, BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga24234e01395d6bf7a59f79c792fa72d4</anchor>
      <arglist>(DVector *v_lhs, const MatrixNonsingSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gafceb9d92973044171eab1766ba7325dd</anchor>
      <arglist>(DVectorSlice *vs_lhs, const MatrixNonsingSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga94f5de71a5e3c4f54db070e6644274d6</anchor>
      <arglist>(DVector *v_lhs, const MatrixNonsingSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gabf5e45fa66268f6fe13316fb58d0a676</anchor>
      <arglist>(DVectorSlice *vs_lhs, const MatrixNonsingSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga9a5350117e7dbdfd18d1908aaa94f354</anchor>
      <arglist>(const DVectorSlice &amp;vs_rhs1, const MatrixNonsingSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const DVectorSlice &amp;sv_rhs3)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga1177737d724f140f1fb0fae899d60a0a</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, const MatrixNonsingSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga68addc8838d2b9978d4ce06caffdc656</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, const MatrixOpSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gadc882d979072dc7480bce17f7828f279</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, const MatrixOpSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gac22b9a900956443e0525a02b5916aca6</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOpSerial &amp;M_rhs2, BLAS_Cpp::Transp M_rhs2_trans, const DVectorSlice &amp;vs_rhs3, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga13a887ba16a92b8bd68b33569fa8c76b</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOpSerial &amp;M_rhs2, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga93b08309d622fec80b647eae435a1924</anchor>
      <arglist>(const DVectorSlice &amp;vs_rhs1, const MatrixOpSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const DVectorSlice &amp;vs_rhs3)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga2c5fb674702aa67dcc9397da20f039d6</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, const MatrixOpSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StInvMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga7cda0a090eab1fd89ffdb759407db557</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, const MatrixNonsing &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StMtInvM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga9c067feb34858e717216709744f68818</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixNonsing &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gacbe4abfb420f9bc4ac79717dcdc5ecfe</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syrk</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga0455b46c6d3a0f5dbccaf26bbea7fc79</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StInvMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gaeaaafdf54b0a61ffb57b6ff0ed02237a</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, const MatrixNonsingSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StInvMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga038a52b95b62080cd1283f2b5756f748</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixNonsingSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StMtInvM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga0698d6b5aa2edb18a92d065264e0354c</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixNonsingSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StMtInvM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gaf888fa33e1298760399381650b331da2</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixNonsingSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StInvMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga03eac259cefa30111b734fa1ec1282f3</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, const MatrixNonsingSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StInvMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga0cbce21d81c395dc5a45003970ccd8c7</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixNonsingSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StMtInvM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gaf143357fa31865280317805b3620f6ab</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, const MatrixOpSerial &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixNonsingSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StMtInvM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga3ffb9244fc9818fc8008a210b068e55c</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixOpSerial &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixNonsingSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga5b34ab6e1f7bee49a635e9b017a44b31</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixOpSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gab816863020c2346b95c848189d93195a</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gac19143c8eaf2a73a4c5a4827ebc88100</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixOpSerial &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gab06229dfb951b72eaa6519b26ef580a6</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixOpSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const DMatrixSliceSym &amp;sym_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gaa5946b7a7a6ca5ad53ac00fef172cb44</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSliceSym &amp;sym_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gab10458e6b0a5adac3dfe1b43f101d6c3</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixOpSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const DMatrixSliceTri &amp;tri_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gae9ba0c6fb46d74cbd5edf49e78a9e90f</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSliceTri &amp;tri_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga90071a7e4a1b9ea07233037ffee447d6</anchor>
      <arglist>(VectorMutable *v_lhs, const MatrixNonsing &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga64d1c98cef06502bdd71c8dcac9d56ca</anchor>
      <arglist>(VectorMutable *v_lhs, const MatrixNonsing &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2)</arglist>
    </member>
    <member kind="friend">
      <type>friend value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga5a9304e92d8ac9a8523763d82428224e</anchor>
      <arglist>(const Vector &amp;v_rhs1, const MatrixNonsing &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3)</arglist>
    </member>
    <member kind="friend">
      <type>friend value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga0cb33e60f75a0744e114e3400ae1acff</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, const MatrixNonsing &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>M_StInvMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga22b8cd8cf8946ca7b41c98cc35db0f36</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, const MatrixNonsing &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>M_StMtInvM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gacdad8319ae9922e04427ccbe2ad590a2</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixNonsing &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mns_mut_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga85aa221b20eb1db5694ee77ade6ff62c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mns_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga1248902e6b31fbf89d091bdbd39ec377</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga7f4bfb88c6ffe3b2ad20732f7cdd0556</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gaf6e4d634fc68bf70ddcfcdb59913d17d</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gac5f155a0a7332fa04a5c1d1bbbec6398</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga7147936bfe4d44e1643390972120f1de</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga545137f6d79d96a0ae9c24ee5ef2487d</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga6d1ffb2ca031eefd95c99daec05bf281</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>MatrixWithOp_func_grp</name>
    <title>MatrixOp non-member functions that call virtual functions.</title>
    <filename>group__MatrixWithOp__func__grp.html</filename>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga7c82dd9f986eeb5d1ec66e0ee5a37c92</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const MatrixOp &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga421d94763357c1f28ad9995fe6596c49</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const MatrixOp &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga0571eb9f2be1177cf18603739833aa9c</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;M_rhs2, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga3b0984e500a293b78ce2252867dd31cb</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;M_rhs2, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga5d065b06c559d40b9dada7842f95e3a6</anchor>
      <arglist>(const Vector &amp;v_rhs1, const MatrixOp &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga4f3c748885661a94efa246b69fdf79a8</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, const MatrixOp &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syr2k</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga6b95a4c9b6a0eab0af20a7565c5af56e</anchor>
      <arglist>(const MatrixOp &amp;M, BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gacbe4abfb420f9bc4ac79717dcdc5ecfe</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syrk</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga0455b46c6d3a0f5dbccaf26bbea7fc79</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mt_S</name>
      <anchorfile>group__MatrixWithOp__func__grp.html</anchorfile>
      <anchor>ga91b02a0a5c5e4675ef7c78b7fb9ed4a1</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StM</name>
      <anchorfile>group__MatrixWithOp__func__grp.html</anchorfile>
      <anchor>gabc3be36a08b48ff3de37eea6838974d3</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtP</name>
      <anchorfile>group__MatrixWithOp__func__grp.html</anchorfile>
      <anchor>gaf84584e983274d55b6543b307a46f4fa</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StPtM</name>
      <anchorfile>group__MatrixWithOp__func__grp.html</anchorfile>
      <anchor>ga5833289fb8cacb3cd87d81afa6a94b21</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>group__MatrixWithOp__func__grp.html</anchorfile>
      <anchor>ga8a13e6bdc2ab3b82fff09aaed093c416</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StM</name>
      <anchorfile>group__MatrixWithOp__func__grp.html</anchorfile>
      <anchor>gae11d2ee6eecae5cc2d2ae56a0af858fc</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixOpSerial &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtP</name>
      <anchorfile>group__MatrixWithOp__func__grp.html</anchorfile>
      <anchor>ga590b637ccf37393f22b6fe81637850a7</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixOpSerial &amp;M_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StPtM</name>
      <anchorfile>group__MatrixWithOp__func__grp.html</anchorfile>
      <anchor>ga5d570f9e4613b885421e857d1598b34b</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOpSerial &amp;M_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>group__MatrixWithOp__func__grp.html</anchorfile>
      <anchor>ga6fac6319c039bc064d8928636ab30536</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOpSerial &amp;M_rhs, BLAS_Cpp::Transp trans_rhs, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>MatrixSymNonsingular_func_grp</name>
    <title>MatrixSymNonsing non-member functions that call virtual functions.</title>
    <filename>group__MatrixSymNonsingular__func__grp.html</filename>
    <member kind="function">
      <type>void</type>
      <name>M_StMtInvMtM</name>
      <anchorfile>group__MatrixSymNonsingular__func__grp.html</anchorfile>
      <anchor>ga2a2708683b709ce6ad0d769e8d2d5968</anchor>
      <arglist>(MatrixSymOp *sym_gms_lhs, value_type alpha, const MatrixOp &amp;mwo, BLAS_Cpp::Transp mwo_trans, const MatrixSymNonsing &amp;mswof, MatrixSymNonsing::EMatrixDummyArg mwo_rhs)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>MatrixSymWithOp_funcs_grp</name>
    <title>Inline nonmeber functions for MatrixSymOp to call methods.</title>
    <filename>group__MatrixSymWithOp__funcs__grp.html</filename>
    <member kind="function">
      <type>void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>group__MatrixSymWithOp__funcs__grp.html</anchorfile>
      <anchor>ga75a2641ac8eb7eaf27a46675fe95c2c3</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, MatrixSymOp::EMatRhsPlaceHolder dummy_place_holder, const MatrixSymOp &amp;M, const GenPermMatrixSlice &amp;gpms_rhs, BLAS_Cpp::Transp gpms_rhs_trans, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtMtM</name>
      <anchorfile>group__MatrixSymWithOp__funcs__grp.html</anchorfile>
      <anchor>gadc9e408e40b99b3a1f615fe2442b51f3</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, MatrixSymOp::EMatRhsPlaceHolder dummy_place_holder, const MatrixSymOp &amp;M, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp mwo_rhs_trans, value_type beta=1.0)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>VectorStdOps_grp</name>
    <title>Collection of standard vector operations.</title>
    <filename>group__VectorStdOps__grp.html</filename>
    <subgroup>VectorStdOps_ROp_grp</subgroup>
    <subgroup>VectorStdOps_TOp_grp</subgroup>
  </compound>
  <compound kind="group">
    <name>VectorStdOps_ROp_grp</name>
    <title>Reduction operations</title>
    <filename>group__VectorStdOps__ROp__grp.html</filename>
    <member kind="function">
      <type>value_type</type>
      <name>sum</name>
      <anchorfile>group__VectorStdOps__ROp__grp.html</anchorfile>
      <anchor>ga701dc64148d9da1bdc6171aa0feb4e47</anchor>
      <arglist>(const Vector &amp;v_rhs)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>dot</name>
      <anchorfile>group__VectorStdOps__ROp__grp.html</anchorfile>
      <anchor>gac6e94d98c6a1fd8a7e5a2a749b4485c9</anchor>
      <arglist>(const Vector &amp;v_rhs1, const Vector &amp;v_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>dot</name>
      <anchorfile>group__VectorStdOps__ROp__grp.html</anchorfile>
      <anchor>ga7523801db22621497b36535f8d2e2b5e</anchor>
      <arglist>(const Vector &amp;v_rhs1, const SpVectorSlice &amp;sv_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>dot</name>
      <anchorfile>group__VectorStdOps__ROp__grp.html</anchorfile>
      <anchor>ga698fe65960dfc249b3280833861f9be3</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, const Vector &amp;v_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>max_abs_ele</name>
      <anchorfile>group__VectorStdOps__ROp__grp.html</anchorfile>
      <anchor>gae0f043cb18a6011f72473ba8a6a0ee3d</anchor>
      <arglist>(const Vector &amp;v, value_type *max_v_j, index_type *max_j)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>VectorStdOps_TOp_grp</name>
    <title>Transformation operations</title>
    <filename>group__VectorStdOps__TOp__grp.html</filename>
    <member kind="function">
      <type>void</type>
      <name>Vp_S</name>
      <anchorfile>group__VectorStdOps__TOp__grp.html</anchorfile>
      <anchor>ga04d80a8f515340c960e0540e96dc903e</anchor>
      <arglist>(VectorMutable *v_lhs, const value_type &amp;alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vt_S</name>
      <anchorfile>group__VectorStdOps__TOp__grp.html</anchorfile>
      <anchor>gaeb61047564334b5e353e67c717c07721</anchor>
      <arglist>(VectorMutable *v_lhs, const value_type &amp;alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StV</name>
      <anchorfile>group__VectorStdOps__TOp__grp.html</anchorfile>
      <anchor>ga079b3b50fe4eb6bad7e1d6986c83efc5</anchor>
      <arglist>(VectorMutable *v_lhs, const value_type &amp;alpha, const Vector &amp;v_rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StV</name>
      <anchorfile>group__VectorStdOps__TOp__grp.html</anchorfile>
      <anchor>gafc6821f2a49982e42d8f9bf2025aabd6</anchor>
      <arglist>(VectorMutable *v_lhs, const value_type &amp;alpha, const SpVectorSlice &amp;sv_rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ele_wise_prod</name>
      <anchorfile>group__VectorStdOps__TOp__grp.html</anchorfile>
      <anchor>ga7bae4578b1febb03d85a2d8f705dab81</anchor>
      <arglist>(const value_type &amp;alpha, const Vector &amp;v_rhs1, const Vector &amp;v_rhs2, VectorMutable *v_lhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ele_wise_divide</name>
      <anchorfile>group__VectorStdOps__TOp__grp.html</anchorfile>
      <anchor>gae3af3d61ffdf0606ff74b20f1a25d96d</anchor>
      <arglist>(const value_type &amp;alpha, const Vector &amp;v_rhs1, const Vector &amp;v_rhs2, VectorMutable *v_lhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed_random_vector_generator</name>
      <anchorfile>group__VectorStdOps__TOp__grp.html</anchorfile>
      <anchor>gaa55d74d4a27c4f101ce82842c5b0f64d</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>random_vector</name>
      <anchorfile>group__VectorStdOps__TOp__grp.html</anchorfile>
      <anchor>gac8e1fe793a86169446536039ae138186</anchor>
      <arglist>(value_type l, value_type u, VectorMutable *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sign</name>
      <anchorfile>group__VectorStdOps__TOp__grp.html</anchorfile>
      <anchor>ga1f4d43ec2457c43f366c00696938d9f5</anchor>
      <arglist>(const Vector &amp;v, VectorMutable *z)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>VectorAuxiliaryOps_grp</name>
    <title>Collection of auxiliary useful vector operations.</title>
    <filename>group__VectorAuxiliaryOps__grp.html</filename>
    <subgroup>VectorAuxiliaryOps_ROp_grp</subgroup>
    <subgroup>VectorAuxiliaryOps_TOp_grp</subgroup>
  </compound>
  <compound kind="group">
    <name>VectorAuxiliaryOps_ROp_grp</name>
    <title>Reduction operations</title>
    <filename>group__VectorAuxiliaryOps__ROp__grp.html</filename>
    <member kind="function">
      <type>value_type</type>
      <name>max_element</name>
      <anchorfile>group__VectorAuxiliaryOps__ROp__grp.html</anchorfile>
      <anchor>ga4dbd2963aa53dc4f0861a3c8342183dc</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; value_type, value_type &gt;</type>
      <name>max_near_feas_step</name>
      <anchorfile>group__VectorAuxiliaryOps__ROp__grp.html</anchorfile>
      <anchor>gad85760290e18755ba333990acc9ad6c1</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;d, const Vector &amp;xl, const Vector &amp;xu, value_type max_bnd_viol)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>max_rel_step</name>
      <anchorfile>group__VectorAuxiliaryOps__ROp__grp.html</anchorfile>
      <anchor>gaaf81ed29b4893ea5a76f8cef5c83ec88</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fraction_to_boundary</name>
      <anchorfile>group__VectorAuxiliaryOps__ROp__grp.html</anchorfile>
      <anchor>ga2a881889da9d5e01603ff3f60e8c5d0d</anchor>
      <arglist>(const value_type tau, const Vector &amp;x, const Vector &amp;d, const Vector &amp;xl, const Vector &amp;xu)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>fraction_to_zero_boundary</name>
      <anchorfile>group__VectorAuxiliaryOps__ROp__grp.html</anchorfile>
      <anchor>ga507ac15ef0e8a23454f4b3bd67d46b7a</anchor>
      <arglist>(const value_type tau, const Vector &amp;x, const Vector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_bounded</name>
      <anchorfile>group__VectorAuxiliaryOps__ROp__grp.html</anchorfile>
      <anchor>ga123ca218eda44d0fc70a15c2d2dc385a</anchor>
      <arglist>(const Vector &amp;xl, const Vector &amp;xu, value_type inf_bound)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>log_bound_barrier</name>
      <anchorfile>group__VectorAuxiliaryOps__ROp__grp.html</anchorfile>
      <anchor>gaae8b1bfd83bf0e644493814edc7292c3</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;xl, const Vector &amp;xu)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>combined_nu_comp_err</name>
      <anchorfile>group__VectorAuxiliaryOps__ROp__grp.html</anchorfile>
      <anchor>ga9be875f35b82a6fd014ecdb95ce035e1</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;x, const Vector &amp;xl, const Vector &amp;xu)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>combined_nu_comp_err_lower</name>
      <anchorfile>group__VectorAuxiliaryOps__ROp__grp.html</anchorfile>
      <anchor>ga4c2c5328b6d143183482563a49923689</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;x, const Vector &amp;xl)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>combined_nu_comp_err_upper</name>
      <anchorfile>group__VectorAuxiliaryOps__ROp__grp.html</anchorfile>
      <anchor>ga69c7a798ee91c267f65fb0d4662ea3dd</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;x, const Vector &amp;xu)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>IP_comp_err_with_mu</name>
      <anchorfile>group__VectorAuxiliaryOps__ROp__grp.html</anchorfile>
      <anchor>gaf5714279c60a3e4ef94c58d6665eaf62</anchor>
      <arglist>(const value_type mu, const value_type inf_bound, const Vector &amp;x, const Vector &amp;xl, const Vector &amp;xu, const Vector &amp;vl, const Vector &amp;vu)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>max_inequ_viol</name>
      <anchorfile>group__VectorAuxiliaryOps__ROp__grp.html</anchorfile>
      <anchor>ga5234233e4a389cddcf068b2d0e56b141</anchor>
      <arglist>(const AbstractLinAlgPack::Vector &amp;v, const AbstractLinAlgPack::Vector &amp;vL, const AbstractLinAlgPack::Vector &amp;vU, AbstractLinAlgPack::size_type *max_viol_i, AbstractLinAlgPack::value_type *max_viol, AbstractLinAlgPack::value_type *v_i, int *bnd_type, AbstractLinAlgPack::value_type *vLU_i)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>VectorAuxiliaryOps_TOp_grp</name>
    <title>Transformation operations</title>
    <filename>group__VectorAuxiliaryOps__TOp__grp.html</filename>
    <member kind="function">
      <type>void</type>
      <name>force_in_bounds</name>
      <anchorfile>group__VectorAuxiliaryOps__TOp__grp.html</anchorfile>
      <anchor>ga7030de21c3e965144c3084c8039e7803</anchor>
      <arglist>(const Vector &amp;xl, const Vector &amp;xu, VectorMutable *x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>force_in_bounds_buffer</name>
      <anchorfile>group__VectorAuxiliaryOps__TOp__grp.html</anchorfile>
      <anchor>gaa91d6935f67e16e4dd38acaeb35eb72e</anchor>
      <arglist>(const value_type rel_push, const value_type abs_push, const Vector &amp;xl, const Vector &amp;xu, VectorMutable *x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inv_of_difference</name>
      <anchorfile>group__VectorAuxiliaryOps__TOp__grp.html</anchorfile>
      <anchor>ga10b6cde169b0020b6a26bfcec336078e</anchor>
      <arglist>(const value_type alpha, const Vector &amp;v0, const Vector &amp;v1, VectorMutable *z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>correct_lower_bound_multipliers</name>
      <anchorfile>group__VectorAuxiliaryOps__TOp__grp.html</anchorfile>
      <anchor>ga47d9afbffff4132bce06484863ecb530</anchor>
      <arglist>(const Vector &amp;xl, const value_type inf_bound_limit, VectorMutable *vl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>correct_upper_bound_multipliers</name>
      <anchorfile>group__VectorAuxiliaryOps__TOp__grp.html</anchorfile>
      <anchor>ga15e17f832c558b7cd3b6fce921632034</anchor>
      <arglist>(const Vector &amp;xu, const value_type inf_bound_limit, VectorMutable *vu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lowerbound_multipliers_step</name>
      <anchorfile>group__VectorAuxiliaryOps__TOp__grp.html</anchorfile>
      <anchor>gad824b4c7ded7c1d9bc4be87824797790</anchor>
      <arglist>(const value_type mu, const Vector &amp;invXl, const Vector &amp;vl, const Vector &amp;d_k, VectorMutable *dvl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>upperbound_multipliers_step</name>
      <anchorfile>group__VectorAuxiliaryOps__TOp__grp.html</anchorfile>
      <anchor>gaf00784d287d5db484120208b3aa8d3fc</anchor>
      <arglist>(const value_type mu, const Vector &amp;invXu, const Vector &amp;vu, const Vector &amp;d_k, VectorMutable *dvu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ele_wise_sqrt</name>
      <anchorfile>group__VectorAuxiliaryOps__TOp__grp.html</anchorfile>
      <anchor>gaacafa3f31753450f968a1733f31a51bb</anchor>
      <arglist>(VectorMutable *z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>max_vec_scalar</name>
      <anchorfile>group__VectorAuxiliaryOps__TOp__grp.html</anchorfile>
      <anchor>ga6ccb08c0135aa0b40d120c1882436468</anchor>
      <arglist>(value_type min_ele, VectorMutable *y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>max_abs_vec_scalar</name>
      <anchorfile>group__VectorAuxiliaryOps__TOp__grp.html</anchorfile>
      <anchor>ga03829c73cb9619c6545e74cba07a8c03</anchor>
      <arglist>(value_type min_ele, VectorMutable *y)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>COOMatrixTmplOp_grp</name>
    <title>Linear algebra operations for coordinate matrices.</title>
    <filename>group__COOMatrixTmplOp__grp.html</filename>
    <member kind="function">
      <type>void</type>
      <name>Mp_StCOOM</name>
      <anchorfile>group__COOMatrixTmplOp__grp.html</anchorfile>
      <anchor>gac07519d8bee2efd2e88b92614fbaddd8</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const T_COOM &amp;coom_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StCOOMtV</name>
      <anchorfile>group__COOMatrixTmplOp__grp.html</anchorfile>
      <anchor>ga688fb2d3c36145fd58740b9421730adf</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, const T_COOM &amp;coom_rhs1, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StCOOMtM</name>
      <anchorfile>group__COOMatrixTmplOp__grp.html</anchorfile>
      <anchor>gad1b7efddfd7d0c3ca92721bf147af1fb</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const T_COOM &amp;coom_rhs1, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtCOOM</name>
      <anchorfile>group__COOMatrixTmplOp__grp.html</anchorfile>
      <anchor>ga52a2e752cb9d76377d220e4b475b4927</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, const T_COOM &amp;coom_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>MatrixNonsingularSerial_funcs</name>
    <title>MatrixNonsingSerial nonmember inline functions.</title>
    <filename>group__MatrixNonsingularSerial__funcs.html</filename>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga24234e01395d6bf7a59f79c792fa72d4</anchor>
      <arglist>(DVector *v_lhs, const MatrixNonsingSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gafceb9d92973044171eab1766ba7325dd</anchor>
      <arglist>(DVectorSlice *vs_lhs, const MatrixNonsingSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga94f5de71a5e3c4f54db070e6644274d6</anchor>
      <arglist>(DVector *v_lhs, const MatrixNonsingSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gabf5e45fa66268f6fe13316fb58d0a676</anchor>
      <arglist>(DVectorSlice *vs_lhs, const MatrixNonsingSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga9a5350117e7dbdfd18d1908aaa94f354</anchor>
      <arglist>(const DVectorSlice &amp;vs_rhs1, const MatrixNonsingSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const DVectorSlice &amp;sv_rhs3)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga1177737d724f140f1fb0fae899d60a0a</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, const MatrixNonsingSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StInvMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gaeaaafdf54b0a61ffb57b6ff0ed02237a</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, const MatrixNonsingSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StInvMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga038a52b95b62080cd1283f2b5756f748</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixNonsingSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StMtInvM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga0698d6b5aa2edb18a92d065264e0354c</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixNonsingSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StMtInvM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gaf888fa33e1298760399381650b331da2</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixNonsingSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StInvMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga03eac259cefa30111b734fa1ec1282f3</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, const MatrixNonsingSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StInvMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga0cbce21d81c395dc5a45003970ccd8c7</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixNonsingSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StMtInvM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gaf143357fa31865280317805b3620f6ab</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, const MatrixOpSerial &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixNonsingSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StMtInvM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga3ffb9244fc9818fc8008a210b068e55c</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixOpSerial &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixNonsingSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>MatrixWithOpSerial_funcs</name>
    <title>MatrixOpSerial nonmember inline functions.</title>
    <filename>group__MatrixWithOpSerial__funcs.html</filename>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga68addc8838d2b9978d4ce06caffdc656</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, const MatrixOpSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gadc882d979072dc7480bce17f7828f279</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, const MatrixOpSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gac22b9a900956443e0525a02b5916aca6</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOpSerial &amp;M_rhs2, BLAS_Cpp::Transp M_rhs2_trans, const DVectorSlice &amp;vs_rhs3, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga13a887ba16a92b8bd68b33569fa8c76b</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOpSerial &amp;M_rhs2, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga93b08309d622fec80b647eae435a1924</anchor>
      <arglist>(const DVectorSlice &amp;vs_rhs1, const MatrixOpSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const DVectorSlice &amp;vs_rhs3)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga2c5fb674702aa67dcc9397da20f039d6</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, const MatrixOpSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga5b34ab6e1f7bee49a635e9b017a44b31</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixOpSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gab816863020c2346b95c848189d93195a</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gac19143c8eaf2a73a4c5a4827ebc88100</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixOpSerial &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gab06229dfb951b72eaa6519b26ef580a6</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixOpSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const DMatrixSliceSym &amp;sym_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gaa5946b7a7a6ca5ad53ac00fef172cb44</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSliceSym &amp;sym_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gab10458e6b0a5adac3dfe1b43f101d6c3</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixOpSerial &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const DMatrixSliceTri &amp;tri_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gae9ba0c6fb46d74cbd5edf49e78a9e90f</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSliceTri &amp;tri_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StM</name>
      <anchorfile>group__MatrixWithOp__func__grp.html</anchorfile>
      <anchor>gae11d2ee6eecae5cc2d2ae56a0af858fc</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixOpSerial &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtP</name>
      <anchorfile>group__MatrixWithOp__func__grp.html</anchorfile>
      <anchor>ga590b637ccf37393f22b6fe81637850a7</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixOpSerial &amp;M_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StPtM</name>
      <anchorfile>group__MatrixWithOp__func__grp.html</anchorfile>
      <anchor>ga5d570f9e4613b885421e857d1598b34b</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOpSerial &amp;M_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>group__MatrixWithOp__func__grp.html</anchorfile>
      <anchor>ga6fac6319c039bc064d8928636ab30536</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOpSerial &amp;M_rhs, BLAS_Cpp::Transp trans_rhs, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>MatrixSymNonsingularSerial_funcs</name>
    <title>MatrixSymNonsingSerial nonmember inline functions.</title>
    <filename>group__MatrixSymNonsingularSerial__funcs.html</filename>
    <member kind="function">
      <type>void</type>
      <name>M_StMtInvMtM</name>
      <anchorfile>group__MatrixSymNonsingularSerial__funcs.html</anchorfile>
      <anchor>gacaaba89e44fc327e6ede66093d9d005a</anchor>
      <arglist>(DMatrixSliceSym *sym_gms_lhs, value_type alpha, const MatrixOpSerial &amp;mwo, BLAS_Cpp::Transp mwo_trans, const MatrixSymNonsingSerial &amp;mswons, MatrixSymNonsingSerial::EMatrixDummyArg mwo_rhs)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>MatrixSymWithOpSerial_funcs</name>
    <title>Inline nonmeber functions for &lt;tt&gt;MatrixSymOpSerial&lt;/tt&gt;.</title>
    <filename>group__MatrixSymWithOpSerial__funcs.html</filename>
    <member kind="function">
      <type>void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>group__MatrixSymWithOpSerial__funcs.html</anchorfile>
      <anchor>gad2e5e7767dc132c95adc38202fcbc3e5</anchor>
      <arglist>(DMatrixSliceSym *sym_lhs, value_type alpha, MatrixSymOpSerial::EMatRhsPlaceHolder dummy_place_holder, const MatrixSymOpSerial &amp;M, const GenPermMatrixSlice &amp;gpms_rhs, BLAS_Cpp::Transp gpms_rhs_trans, value_type beta=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtMtM</name>
      <anchorfile>group__MatrixSymWithOpSerial__funcs.html</anchorfile>
      <anchor>ga387b13c27579a5f81d5a64eab68129b4</anchor>
      <arglist>(DMatrixSliceSym *sym_lhs, value_type alpha, MatrixSymOpSerial::EMatRhsPlaceHolder dummy_place_holder, const MatrixSymOpSerial &amp;M, const MatrixOpSerial &amp;mwo_rhs, BLAS_Cpp::Transp mwo_rhs_trans, value_type beta=1.0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::BasisSystem</name>
    <filename>classAbstractLinAlgPack_1_1BasisSystem.html</filename>
    <class kind="class">AbstractLinAlgPack::BasisSystem::SingularBasis</class>
    <member kind="function">
      <type></type>
      <name>BasisSystem</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a54c43a208cd8103f330de8d3bf618b37</anchor>
      <arglist>(const mat_sym_fcty_ptr_t &amp;factory_transDtD, const mat_sym_nonsing_fcty_ptr_t &amp;factory_S)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a7d8ecccfd6943b7caf412612562e1c3f</anchor>
      <arglist>(const mat_sym_fcty_ptr_t &amp;factory_transDtD, const mat_sym_nonsing_fcty_ptr_t &amp;factory_S)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasisSystem</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>ae3b1b84a4f73fbb5878f0a62a2201045</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <name>EMatRelations</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a877d83f50fda50b5344ffded411a2170</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; MatrixOpNonsing &gt; &gt;</type>
      <name>mat_nonsing_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a504d22f75c04baa66a6f25aa72fdd5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; MatrixOp &gt; &gt;</type>
      <name>mat_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a9088f86e0113e99dce6511b857b93bf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; MatrixSymOp &gt; &gt;</type>
      <name>mat_sym_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>aa73bb8908c23289dc3d40e95ce46f294</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; MatrixSymOpNonsing &gt; &gt;</type>
      <name>mat_sym_nonsing_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a2667cbaa04b20cb2f3c58f5d3bfacfb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const mat_nonsing_fcty_ptr_t</type>
      <name>factory_C</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>aa5caf4ef41f77a56db3c117fe99eb60c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const mat_fcty_ptr_t</type>
      <name>factory_D</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a25a7d948037d83c95d04386b19cc4d5a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const mat_fcty_ptr_t</type>
      <name>factory_GcUP</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>aa1a70173ee30ea5468994c20f19b0cd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const mat_sym_fcty_ptr_t</type>
      <name>factory_transDtD</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a70b3fa6d551b1cb9d2683a65a3294bfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const mat_sym_nonsing_fcty_ptr_t</type>
      <name>factory_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a62346ea3df2a47d9eeadce15f0aff351</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Range1D</type>
      <name>var_dep</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a3778d246ffe9688e8305fe95a9d63935</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Range1D</type>
      <name>var_indep</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a83ccd49da381ef612297593a24107a4d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Range1D</type>
      <name>equ_decomp</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>ad2c6b43c9830622ef1751bb624b13494</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Range1D</type>
      <name>equ_undecomp</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a24620621dd9cf5a70154bb93df0835e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update_basis</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a2c5c62c2036b3cbc29f22196bd8afc35</anchor>
      <arglist>(const MatrixOp &amp;Gc, MatrixOpNonsing *C, MatrixOp *D, MatrixOp *GcUP, EMatRelations mat_rel=MATRICES_INDEP_IMPS, std::ostream *out=NULL) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::BasisSystem::SingularBasis</name>
    <filename>classAbstractLinAlgPack_1_1BasisSystem_1_1SingularBasis.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::BasisSystemFactory</name>
    <filename>classAbstractLinAlgPack_1_1BasisSystemFactory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasisSystemFactory</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemFactory.html</anchorfile>
      <anchor>a5a0efe458bb3da99a773669136b62228</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set_options</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemFactory.html</anchorfile>
      <anchor>a5be0f967c5e40eec0b6aa9a4482fbce6</anchor>
      <arglist>(const options_ptr_t &amp;options)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const options_ptr_t &amp;</type>
      <name>get_options</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemFactory.html</anchorfile>
      <anchor>a434fcff13d49a61f082b2f47590a8240</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const OptionsFromStreamPack::OptionsFromStream &gt;</type>
      <name>options_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemFactory.html</anchorfile>
      <anchor>a588a8c55df6a90633a014666e85d7008</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::BasisSystemPerm</name>
    <filename>classAbstractLinAlgPack_1_1BasisSystemPerm.html</filename>
    <base>AbstractLinAlgPack::BasisSystem</base>
    <member kind="function">
      <type></type>
      <name>BasisSystemPerm</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPerm.html</anchorfile>
      <anchor>a7642f072b5b87c23ab8d14853ac2a5f9</anchor>
      <arglist>(const mat_sym_fcty_ptr_t &amp;factory_transDtD, const mat_sym_nonsing_fcty_ptr_t &amp;factory_S)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisSystem</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a54c43a208cd8103f330de8d3bf618b37</anchor>
      <arglist>(const mat_sym_fcty_ptr_t &amp;factory_transDtD, const mat_sym_nonsing_fcty_ptr_t &amp;factory_S)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a7d8ecccfd6943b7caf412612562e1c3f</anchor>
      <arglist>(const mat_sym_fcty_ptr_t &amp;factory_transDtD, const mat_sym_nonsing_fcty_ptr_t &amp;factory_S)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasisSystem</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>ae3b1b84a4f73fbb5878f0a62a2201045</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const mat_nonsing_fcty_ptr_t</type>
      <name>factory_C</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>aa5caf4ef41f77a56db3c117fe99eb60c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const mat_fcty_ptr_t</type>
      <name>factory_D</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a25a7d948037d83c95d04386b19cc4d5a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const mat_fcty_ptr_t</type>
      <name>factory_GcUP</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>aa1a70173ee30ea5468994c20f19b0cd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const mat_sym_fcty_ptr_t</type>
      <name>factory_transDtD</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a70b3fa6d551b1cb9d2683a65a3294bfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const mat_sym_nonsing_fcty_ptr_t</type>
      <name>factory_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a62346ea3df2a47d9eeadce15f0aff351</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Range1D</type>
      <name>var_dep</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a3778d246ffe9688e8305fe95a9d63935</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Range1D</type>
      <name>var_indep</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a83ccd49da381ef612297593a24107a4d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Range1D</type>
      <name>equ_decomp</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>ad2c6b43c9830622ef1751bb624b13494</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Range1D</type>
      <name>equ_undecomp</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a24620621dd9cf5a70154bb93df0835e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update_basis</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a2c5c62c2036b3cbc29f22196bd8afc35</anchor>
      <arglist>(const MatrixOp &amp;Gc, MatrixOpNonsing *C, MatrixOp *D, MatrixOp *GcUP, EMatRelations mat_rel=MATRICES_INDEP_IMPS, std::ostream *out=NULL) const =0</arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; Permutation &gt; &gt;</type>
      <name>perm_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPerm.html</anchorfile>
      <anchor>ab963e65e09e34987a53b83e1dea6dc7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const perm_fcty_ptr_t</type>
      <name>factory_P_var</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPerm.html</anchorfile>
      <anchor>ac4777840682c8d90a06bd5d34750f126</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const perm_fcty_ptr_t</type>
      <name>factory_P_equ</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPerm.html</anchorfile>
      <anchor>ae2f68454fd1652dee96df6dbfe25492c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set_basis</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPerm.html</anchorfile>
      <anchor>af7b089c66f1dec5d0c4cab4e992c8151</anchor>
      <arglist>(const Permutation &amp;P_var, const Range1D &amp;var_dep, const Permutation *P_equ, const Range1D *equ_decomp, const MatrixOp &amp;Gc, MatrixOpNonsing *C, MatrixOp *D, MatrixOp *GcUP, EMatRelations mat_rel=MATRICES_INDEP_IMPS, std::ostream *out=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>select_basis</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPerm.html</anchorfile>
      <anchor>aa5c033145d92f291b406cafa0b4b0d8c</anchor>
      <arglist>(const Vector *nu, MatrixOp *Gc, Permutation *P_var, Range1D *var_dep, Permutation *P_equ, Range1D *equ_decomp, MatrixOpNonsing *C, MatrixOp *D, MatrixOp *GcUP, EMatRelations mat_rel=MATRICES_INDEP_IMPS, std::ostream *out=NULL)=0</arglist>
    </member>
    <member kind="enumeration">
      <name>EMatRelations</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a877d83f50fda50b5344ffded411a2170</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; MatrixOpNonsing &gt; &gt;</type>
      <name>mat_nonsing_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a504d22f75c04baa66a6f25aa72fdd5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; MatrixOp &gt; &gt;</type>
      <name>mat_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a9088f86e0113e99dce6511b857b93bf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; MatrixSymOp &gt; &gt;</type>
      <name>mat_sym_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>aa73bb8908c23289dc3d40e95ce46f294</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; MatrixSymOpNonsing &gt; &gt;</type>
      <name>mat_sym_nonsing_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a2667cbaa04b20cb2f3c58f5d3bfacfb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AbstractLinAlgPack::compare_element_indexes_less</name>
    <filename>structAbstractLinAlgPack_1_1compare__element__indexes__less.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>AbstractLinAlgPack::compare_element_indexes_equal_to</name>
    <filename>structAbstractLinAlgPack_1_1compare__element__indexes__equal__to.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::EtaVector</name>
    <filename>classAbstractLinAlgPack_1_1EtaVector.html</filename>
    <member kind="function">
      <type></type>
      <name>EtaVector</name>
      <anchorfile>classAbstractLinAlgPack_1_1EtaVector.html</anchorfile>
      <anchor>abc589362082b8be4a6ab154d8c31d7ae</anchor>
      <arglist>(ele_t::index_type i, size_type n, ele_t::value_type alpha=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const SpVectorSlice</name>
      <anchorfile>classAbstractLinAlgPack_1_1EtaVector.html</anchorfile>
      <anchor>a5558c0adbaa257e95189ad06cbe5c7d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SpVectorSlice &amp;</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1EtaVector.html</anchorfile>
      <anchor>abeb0c0d67352cc50bd6ce5484567270f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::GenPermMatrixSlice</name>
    <filename>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</filename>
    <member kind="function">
      <type></type>
      <name>GenPermMatrixSlice</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>a8e1958117b00e5ee12ec9bf125ad12e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenPermMatrixSlice</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>aeef5040373c523e06f0bb642edacfd0b</anchor>
      <arglist>(index_type rows, index_type cols, EIdentityOrZero type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>a4fec2e82683d785af2246dcdcd865baf</anchor>
      <arglist>(index_type rows, index_type cols, EIdentityOrZero type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>a1b9789ae8571bdfd2fc49c21028bf4aa</anchor>
      <arglist>(index_type rows, index_type cols, index_type nz, difference_type row_off, difference_type col_off, EOrderedBy ordered_by, const index_type row_i[], const index_type col_j[], bool test_setup=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize_and_sort</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>ad7b6421cd858304e297d16d1232df52c</anchor>
      <arglist>(index_type rows, index_type cols, index_type nz, difference_type row_off, difference_type col_off, EOrderedBy ordered_by, index_type row_i[], index_type col_j[], bool test_setup=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>ac81f2e205bb28693aa0c279178f8841f</anchor>
      <arglist>(const GenPermMatrixSlice &amp;gpms)</arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>ad3172eeb46978b3dc83f125a0fdd4262</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>a6cbc6283684d5be5ee95904225ad9745</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>a1a8ff30e54a21870780507625dd21dfb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EOrderedBy</type>
      <name>ordered_by</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>a28a086a6941f01d00c415f8e711075d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_identity</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>ad3555aac002ed4b595e792e046f4f8d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>lookup_row_i</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>ada1dd1ace21954cdba6d7cb1281a8924</anchor>
      <arglist>(index_type col_j) const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>lookup_col_j</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>a22aa50da85e71ab8113b43ec0790527a</anchor>
      <arglist>(index_type row_i) const </arglist>
    </member>
    <member kind="function">
      <type>const GenPermMatrixSlice</type>
      <name>create_submatrix</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>a0c43d51edfb5e19afd17ef61bf8205fa</anchor>
      <arglist>(const Range1D &amp;rng, EOrderedBy ordered_by) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EIdentityOrZero</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>a7ac043b045d77b6cfc36231da8a2094f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenPermMatrixSliceIteratorPack::EOrderedBy</type>
      <name>EOrderedBy</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>a42db6885970c256832f755a79f04fe86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenPermMatrixSliceIteratorPack::row_col_iterator&lt; const index_type &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>ab69d4266a9b4da877728e3b70b324cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>a304e17c71b0d11e6713f5d750fa4d7cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>af350538d8780dee6b04785fd8b3b59f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSlice.html</anchorfile>
      <anchor>a6e3720619d4de04befbf565edea0c201</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::InnerProduct</name>
    <filename>classAbstractLinAlgPack_1_1InnerProduct.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InnerProduct</name>
      <anchorfile>classAbstractLinAlgPack_1_1InnerProduct.html</anchorfile>
      <anchor>af26b63c45369b924ffd6ed3474428de4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual value_type</type>
      <name>inner_prod</name>
      <anchorfile>classAbstractLinAlgPack_1_1InnerProduct.html</anchorfile>
      <anchor>a6f8c630bfb52393f9c1a6d07b872024b</anchor>
      <arglist>(const Vector &amp;v1, const Vector &amp;v2) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::InnerProductDot</name>
    <filename>classAbstractLinAlgPack_1_1InnerProductDot.html</filename>
    <base>AbstractLinAlgPack::InnerProduct</base>
    <member kind="function">
      <type>value_type</type>
      <name>inner_prod</name>
      <anchorfile>classAbstractLinAlgPack_1_1InnerProductDot.html</anchorfile>
      <anchor>a9fdc7883fa6e2ba710dbf8e62a061b04</anchor>
      <arglist>(const Vector &amp;v1, const Vector &amp;v2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InnerProduct</name>
      <anchorfile>classAbstractLinAlgPack_1_1InnerProduct.html</anchorfile>
      <anchor>af26b63c45369b924ffd6ed3474428de4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixBase</name>
    <filename>classAbstractLinAlgPack_1_1MatrixBase.html</filename>
    <class kind="class">AbstractLinAlgPack::MatrixBase::IncompatibleMatrices</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a74973b0f184c7bf0eadd56548119effa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a67d2a17263ae9c682990cf429a26321a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aea7780a16afe595a8a24ee52b8e7fbf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aed562e6e0ba0c4e8921e5c1741065f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a95a45f7ee07a98edef8272c3985a83f3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixBase::IncompatibleMatrices</name>
    <filename>classAbstractLinAlgPack_1_1MatrixBase_1_1IncompatibleMatrices.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixNonsing</name>
    <filename>classAbstractLinAlgPack_1_1MatrixNonsing.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixBase</base>
    <class kind="class">AbstractLinAlgPack::MatrixNonsing::SingularMatrix</class>
    <member kind="friend">
      <type>friend void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga90071a7e4a1b9ea07233037ffee447d6</anchor>
      <arglist>(VectorMutable *v_lhs, const MatrixNonsing &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga64d1c98cef06502bdd71c8dcac9d56ca</anchor>
      <arglist>(VectorMutable *v_lhs, const MatrixNonsing &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2)</arglist>
    </member>
    <member kind="friend">
      <type>friend value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga5a9304e92d8ac9a8523763d82428224e</anchor>
      <arglist>(const Vector &amp;v_rhs1, const MatrixNonsing &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3)</arglist>
    </member>
    <member kind="friend">
      <type>friend value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga0cb33e60f75a0744e114e3400ae1acff</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, const MatrixNonsing &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>M_StInvMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga22b8cd8cf8946ca7b41c98cc35db0f36</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, const MatrixNonsing &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>M_StMtInvM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gacdad8319ae9922e04427ccbe2ad590a2</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixNonsing &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mns_mut_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga85aa221b20eb1db5694ee77ade6ff62c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mns_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga1248902e6b31fbf89d091bdbd39ec377</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga7f4bfb88c6ffe3b2ad20732f7cdd0556</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gaf6e4d634fc68bf70ddcfcdb59913d17d</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gac5f155a0a7332fa04a5c1d1bbbec6398</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga7147936bfe4d44e1643390972120f1de</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga545137f6d79d96a0ae9c24ee5ef2487d</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga6d1ffb2ca031eefd95c99daec05bf281</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a74973b0f184c7bf0eadd56548119effa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a67d2a17263ae9c682990cf429a26321a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aea7780a16afe595a8a24ee52b8e7fbf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aed562e6e0ba0c4e8921e5c1741065f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a95a45f7ee07a98edef8272c3985a83f3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixNonsing::SingularMatrix</name>
    <filename>classAbstractLinAlgPack_1_1MatrixNonsing_1_1SingularMatrix.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixOp</name>
    <filename>classAbstractLinAlgPack_1_1MatrixOp.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixBase</base>
    <class kind="class">AbstractLinAlgPack::MatrixOp::IncompatibleMatrices</class>
    <class kind="struct">AbstractLinAlgPack::MatrixOp::MatNorm</class>
    <class kind="class">AbstractLinAlgPack::MatrixOp::MethodNotImplemented</class>
    <member kind="friend">
      <type>friend void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a31a889e37aec88579b4f71ff90e8fa96</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aae3174b4ef93e79220a864d59489e728</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a57dc72dff3a307bc5098151661842cfe</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>abbf0e9d91909510003c4a1ef9db60ceb</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a4d36f18c3511422f213ed3d74b15ccc9</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae56e94923a39297ba1524b0d02f1d6ce</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const MatrixOp &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a0c9219df2889662249428e8e53b90d9a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const MatrixOp &amp;M_rhs1, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae2923aa6f91c128ff99f5d9521c6d970</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;M_rhs2, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaee0acbe8ca9beb15f06683360e99ccf</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;M_rhs2, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta)</arglist>
    </member>
    <member kind="friend">
      <type>friend value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1e96b0e162724fdcf973b07d2f14d4d0</anchor>
      <arglist>(const Vector &amp;v_rhs1, const MatrixOp &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3)</arglist>
    </member>
    <member kind="friend">
      <type>friend value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>afe5427e14097aa710b1ecbe36c8ff5c6</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, const MatrixOp &amp;M_rhs2, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7c5c3e6dfdb076fd4775eba28eeaa1f1</anchor>
      <arglist>(const MatrixOp &amp;M, BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a9fcf08633ab78029218cf9a42457f6ab</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a9c285f193f95e1889da43a4751520e50</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs)</arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a3cf977e1ea2de043e4034825fbfff367</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7a2d853f87929633a47238ee7244ac98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2cf16b847f1f5eb912fc57c33908338b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad6aefd4a5ccb750ff066b3c94b43dbe5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa8a9edd1f07308d03fc1ddb6abe5607e</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a900f5bb64eb5c135e7f3a958da51918a</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac15a5369a10c424a12f9e8bc03344cb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2e81f486da8a59d0af9e7bf8a8ab9a8b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a29a1ad79c69bf12d96cf7a540280182e</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>af8e7324cc60e8d44aeef0b3a3b67785a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa684a28bfb9dd8e15c3af04cfcab7979</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>adaf68f480a35ab7c76a48b4a42d2c788</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6927e8f4dd1b50a3a615b8b14d8c92f3</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a267a73495821f95f1e9f1b09d196a5ea</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aac7173a6691e1778ca45d296a7c1ea17</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a74973b0f184c7bf0eadd56548119effa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a67d2a17263ae9c682990cf429a26321a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aea7780a16afe595a8a24ee52b8e7fbf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aed562e6e0ba0c4e8921e5c1741065f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a95a45f7ee07a98edef8272c3985a83f3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixOp::IncompatibleMatrices</name>
    <filename>classAbstractLinAlgPack_1_1MatrixOp_1_1IncompatibleMatrices.html</filename>
  </compound>
  <compound kind="struct">
    <name>AbstractLinAlgPack::MatrixOp::MatNorm</name>
    <filename>structAbstractLinAlgPack_1_1MatrixOp_1_1MatNorm.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixOp::MethodNotImplemented</name>
    <filename>classAbstractLinAlgPack_1_1MatrixOp_1_1MethodNotImplemented.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixOpNonsing</name>
    <filename>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixOp</base>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixNonsing</base>
    <member kind="function">
      <type>MatrixOpNonsing &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>aad51d5d2ebf68a901995278d7a30ba1b</anchor>
      <arglist>(const MatrixOpNonsing &amp;M)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a3cf977e1ea2de043e4034825fbfff367</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad6aefd4a5ccb750ff066b3c94b43dbe5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa8a9edd1f07308d03fc1ddb6abe5607e</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga7f4bfb88c6ffe3b2ad20732f7cdd0556</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gaf6e4d634fc68bf70ddcfcdb59913d17d</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gac5f155a0a7332fa04a5c1d1bbbec6398</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga7147936bfe4d44e1643390972120f1de</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga545137f6d79d96a0ae9c24ee5ef2487d</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga6d1ffb2ca031eefd95c99daec05bf281</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mwons_mut_ptr_t</type>
      <name>clone_mwons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>a7dfccfae507ecbc5a0311303b9fb6640</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mwons_ptr_t</type>
      <name>clone_mwons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>ab430be6b47866a8382813854c3632196</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_cond_num</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>a4212a7fac53cba1ece06aef6bb311586</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function">
      <type>mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>a13f7228c0438959e7fd26d34fece4499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>a3d2c6cba4ccc28ee6ab97cba9ed000ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mns_mut_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>ad419c8f1e1126d15d89ddffee016bb7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_mns_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>a0ea33aa12e078c37dc8b7da25d722938</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a900f5bb64eb5c135e7f3a958da51918a</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac15a5369a10c424a12f9e8bc03344cb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2e81f486da8a59d0af9e7bf8a8ab9a8b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a29a1ad79c69bf12d96cf7a540280182e</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>af8e7324cc60e8d44aeef0b3a3b67785a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa684a28bfb9dd8e15c3af04cfcab7979</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>adaf68f480a35ab7c76a48b4a42d2c788</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6927e8f4dd1b50a3a615b8b14d8c92f3</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a267a73495821f95f1e9f1b09d196a5ea</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aac7173a6691e1778ca45d296a7c1ea17</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixOpNonsingAggr</name>
    <filename>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixOpNonsing</base>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const MatrixOp &gt;</type>
      <name>mwo_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>ac9ce7cdcf00047f84b4495063c3e34d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const MatrixNonsing &gt;</type>
      <name>mns_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a65f32ebc5ab91cfe5594362e153a0675</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixOpNonsingAggr</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>ad59f7458631e47ad7fb909c2d13067a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixOpNonsingAggr</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a60c64858954083dc231a49e5a55cfd5f</anchor>
      <arglist>(const mwo_ptr_t &amp;mwo, BLAS_Cpp::Transp mwo_trans, const mns_ptr_t &amp;mns, BLAS_Cpp::Transp mns_trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>ad1a4bab0916c93ca008585844a8b19b5</anchor>
      <arglist>(const mwo_ptr_t &amp;mwo, BLAS_Cpp::Transp mwo_trans, const mns_ptr_t &amp;mns, BLAS_Cpp::Transp mns_trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_uninitialized</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a17e4ec1b2db771693f669b6b2abc6f4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mwo_ptr_t &amp;</type>
      <name>mwo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>aa24b0cd599b6a32228618937089f4830</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BLAS_Cpp::Transp</type>
      <name>mwo_trans</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>af7a797f51e631ae400dd770928b2b249</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const mns_ptr_t &amp;</type>
      <name>mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>acb471254c7e4e03a736edd5ca48dfead</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BLAS_Cpp::Transp</type>
      <name>mns_trans</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a374218895a6c02f348ef859c25d68254</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a875d22cc5d7e99c335637c0d1a50b3c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a3ead7e8425b24298d84064c102e1bacf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a7f96f791a0c8ef47b961f1456af89411</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>ada6bce3ac0fed61fb973f3ab9509926c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a8f169cf0bf733b85aeebe9b02747246b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixOp::mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a14f1d5b590ddba09161bb21caddc067a</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a6b49c1ef3992305e724bc6cc43da2455</anchor>
      <arglist>(const MatrixOp &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a6eccba554508fdab9cf19260e39d6591</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a6b7dcf46c3662ecdd9e8621324ce5352</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a48d0b675a606c9d15264e774a16b1d65</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a5eafed17fb5efe69dfe98bb695ecf965</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>ab89dce7410f7af1c29e7347c7ea9cbb8</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a2c687bfce00e55795d8d9e8b75645aed</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a43f645584e7e30ff8a2e4f4ec8fa390c</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a2044e805cb4fddc043c45f52a5b144fd</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>abc29d888ebe71e8e37a5ccf9c6a58626</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a0153e7c7b37c14d4455300a6f1e97896</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a9ab241c1f8853aea3dba5fce652110b2</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a120402add8aee100aaf4c7e04ff45a0f</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>aaedf74d742fb6bbe57719630a3318df6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>ae7ebd4d2e1529e25e02b22faf6136036</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a98764838073ad6096eea2dfcf6acc656</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>aedb71d4aef6a27191add4eb8ad946803</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>ad6c1bf09a647672047f079af27ad4e46</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>ab594ba4186fbabf181386046de0bf67a</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>a41c720156c76e2559840bbf681421abb</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>aab90c2e6a046c431c69725858a06a2e1</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingAggr.html</anchorfile>
      <anchor>ab5afe616bd74c6a0501d1eed1cd209ff</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MatrixOpNonsing &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>aad51d5d2ebf68a901995278d7a30ba1b</anchor>
      <arglist>(const MatrixOpNonsing &amp;M)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mwons_mut_ptr_t</type>
      <name>clone_mwons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>a7dfccfae507ecbc5a0311303b9fb6640</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mwons_ptr_t</type>
      <name>clone_mwons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>ab430be6b47866a8382813854c3632196</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_cond_num</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>a4212a7fac53cba1ece06aef6bb311586</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function">
      <type>mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>a13f7228c0438959e7fd26d34fece4499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>a3d2c6cba4ccc28ee6ab97cba9ed000ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mns_mut_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>ad419c8f1e1126d15d89ddffee016bb7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_mns_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>a0ea33aa12e078c37dc8b7da25d722938</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixOpSubView</name>
    <filename>classAbstractLinAlgPack_1_1MatrixOpSubView.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixOp</base>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; MatrixOp &gt;</type>
      <name>mat_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>ad178cafa780cf913c0a0aabdaf1cc1af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixOpSubView</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>af1a357961f135a1f4ac12c7bdf86abba</anchor>
      <arglist>(const mat_ptr_t &amp;M_full=Teuchos::null, const Range1D &amp;rng_rows=Range1D(), const Range1D &amp;rng_cols=Range1D(), BLAS_Cpp::Transp M_trans=BLAS_Cpp::no_trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a808fc062759d979421c6f1b88a0869c4</anchor>
      <arglist>(const mat_ptr_t &amp;M_full, const Range1D &amp;rng_rows=Range1D(), const Range1D &amp;rng_cols=Range1D(), BLAS_Cpp::Transp M_trans=BLAS_Cpp::no_trans)</arglist>
    </member>
    <member kind="function">
      <type>const mat_ptr_t &amp;</type>
      <name>M_full_ptr</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a386cbfecda1193a512b9ffee4fdfedcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixOp &amp;</type>
      <name>M_full</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a1c098a096fb770d98e43ab0ade30b485</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MatrixOp &amp;</type>
      <name>M_full</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a1e2941fd3d34d53c071d7b9a1c6ab05f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Range1D</type>
      <name>rng_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a849c348c90bfa2234c23ed213b87aeab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Range1D</type>
      <name>rng_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>aed0e008a0ea85fbd892994d0213a5b3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BLAS_Cpp::Transp</type>
      <name>M_trans</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a5d939a1084b213a71a37e34ca39ebea2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a8cf51cf7e26d1ca5da48ea1fe7100313</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a9e38b0e5d72c63e247dc29109a7cf8fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>adfe6828555ce5ed1dc36e60f29271c16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a88a2144b5afb19ee0725154f49b49bf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a3bb2e8c4b5e765f4236273f8d523d0d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixOp::mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a1987854efef87a868ddba4dd75cc2659</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a8ff7cf3decf23f59dfe12247e5f94589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a38b63a2de2980031cc368c2d84098eb9</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function">
      <type>MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a3be571ae33cd8bc29a228e064052b047</anchor>
      <arglist>(const MatrixOp &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a58eb850734a51cbc2927f8a312989b8d</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a2f491519180e210459c70f6bb3bfe342</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a03092955f916eb90bf0db78f5aaa4390</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a5433903ef9f05ce4c41c608a7b032a35</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a2c5b9a618794b675851e7115efc49b2a</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a6612a79cc6f2c40979f3de0542407b4c</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a8a2c4986a7169852867c0f6ed8be923e</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a06a55513a80f281eaa54b010afe6470a</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a39d2cb2f3161473b5683e6c08019e2a7</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a86f3b25d20bb71f1b43e067da6faad98</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a866c638949731d89a2a3ad739d2fa6df</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a02f365eba3fb8d249790b5e1a3c90d7d</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a28cbf7da7021740110f056e65f11ee08</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a915caf745a3a6745028e9b5711606cf9</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a5dd1d40a1e3a4caf3f9e6cb4052885c4</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a27385749778af03f115006128d172970</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a81eaf3434bc56f0afa2a782ae2f313ad</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>ab3f5de5fdf5101f9ff9931e64c179370</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a43639f149087aa8884461f02ca6e737e</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mvw_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSubView.html</anchorfile>
      <anchor>a579a680fd41dd9fc47b4942ff0beb226</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7a2d853f87929633a47238ee7244ac98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2cf16b847f1f5eb912fc57c33908338b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixPermAggr</name>
    <filename>classAbstractLinAlgPack_1_1MatrixPermAggr.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixOp</base>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Permutation &gt;</type>
      <name>perm_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>aff25cb7e2346ca974c2f8357ac42729b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixPermAggr</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>af4bc44a96129d7ff805fbcebadb0eacf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixPermAggr</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a690f1a67bfb61a0b092709ead1b867b9</anchor>
      <arglist>(const mat_ptr_t &amp;mat_orig, const perm_ptr_t &amp;row_perm, const perm_ptr_t &amp;col_perm, const mat_ptr_t &amp;mat_perm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a8c14486c720405d0aee2e6eea6be0250</anchor>
      <arglist>(const mat_ptr_t &amp;mat_orig, const perm_ptr_t &amp;row_perm, const perm_ptr_t &amp;col_perm, const mat_ptr_t &amp;mat_perm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_uninitialized</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>aeae3dd23acc91339221f6f94ec247d27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mat_ptr_t &amp;</type>
      <name>mat_orig</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a6ec5c8ed735fffae549692c64d492b9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const perm_ptr_t &amp;</type>
      <name>row_perm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a9c231dc7b5be10e6a41da731350e8378</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const perm_ptr_t &amp;</type>
      <name>col_perm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a96fd005c9a0235fb06b751526e4cadb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const mat_ptr_t &amp;</type>
      <name>mat_perm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>adf57314b19bfc6a59d6b0f458a0d75c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a6b665b57ed7baaae11462a7a300ce5f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a5206bb721482c425bd87ecceaf0569ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a7def8cec8a57edab6c63f8bf28d49a32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a6ec7523b854ee56ff984fdda43344d56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>ae63f75d22f403f3227b415bc1ff1d9fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixOp::mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a11dccb90b984843d7bb20d5fc5c9a4f1</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a1742d3d1e51012e5cb77b4be65c0041f</anchor>
      <arglist>(const MatrixOp &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>ab3d03253cbbc12898513fb36b40da3ab</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a1d4327d160740d56c68d4603b55dfcb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a630ae3c9ed80908dd7efb4dcca371720</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a828d0a1ec59a4a8754ea1aa1339e7bb1</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>ad0a75cdc61c1673b5ea164f7fea1e653</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a0eca3cab2ffcf475b136bad6bdb02096</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a81b40aee9b26f7042ba1c2dc44be6ef0</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a74141c73e7e0d9b158b20e7ebacb1950</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a73e37e55c04961a6b31759a1f4da2e9c</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a668d2398dd49c858e1573ba638b71306</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>aaa42c7a9e72d36c1848414976ed15b9a</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a3429198849f0a11bac5acba24c1fd196</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a8d8f6b55e7554aac2df0254b8941ede0</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a5af4bd3d76641975430592416867b37b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixPermAggr.html</anchorfile>
      <anchor>a40613b04f5ad0317125adb85fe1c3b29</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7a2d853f87929633a47238ee7244ac98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2cf16b847f1f5eb912fc57c33908338b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymDiag</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymDiag.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixSymOpNonsing</base>
    <member kind="function" virtualness="pure">
      <type>virtual const Vector &amp;</type>
      <name>diag</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiag.html</anchorfile>
      <anchor>a26e578ce5628467ee7284bb65890fcb9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>MatrixSymOpNonsing &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a97f3607578d9bfe8c8eff4047c9a221b</anchor>
      <arglist>(const MatrixSymOpNonsing &amp;M)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswons_mut_ptr_t</type>
      <name>clone_mswons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>adcb3e0d4fa8c403e53a9925e03f13d75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswons_ptr_t</type>
      <name>clone_mswons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>af8f7fb940ae76640fffcb2369d348215</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a7fe90dc22686526cbf6cf5baa4b093c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a2303a6ae091e764cb2620d0b68f9ff5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mns_mut_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>ab709e063616b2e88c7d2b6fa8f9200cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_mns_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>adce49fff5e167b7847c48162c439adc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mswo_mut_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a24e442575ef17ff26b0a98bc77a517e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_mswo_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>af2efe8854d7c9fce7aa6bfa4979b9415</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_msns_mut_ptr_t</type>
      <name>clone_msns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a9cc6e0e93fa53e81a0676141ead482ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_msns_ptr_t</type>
      <name>clone_msns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a2320ebc062b2ad34133b08d1f11747ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mwons_mut_ptr_t</type>
      <name>clone_mwons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a735f1cbda7da061664292ce97449071d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_mwons_ptr_t</type>
      <name>clone_mwons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>ae7000ebe87bae5a8242771f00f9b043f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixSymOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a8ce5fe62685d5d0e1ac9491047a5022d</anchor>
      <arglist>(const MatrixSymOp &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>abc0f88218955cbce2499cfdf6dc8fea8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a35110d50c6c1d5d1c4375316db91c57f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a3cf977e1ea2de043e4034825fbfff367</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad6aefd4a5ccb750ff066b3c94b43dbe5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa8a9edd1f07308d03fc1ddb6abe5607e</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixOpNonsing &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>aad51d5d2ebf68a901995278d7a30ba1b</anchor>
      <arglist>(const MatrixOpNonsing &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_cond_num</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>a4212a7fac53cba1ece06aef6bb311586</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatRhsPlaceHolder</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a9b0d347deb8c731c157edcd256859842</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatrixDummyArg</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>aa0a0c3370967939ec36d1c801963f8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a8d16dbc3d6cea0f84c47c6139e8339ee</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const GenPermMatrixSlice &amp;gpms_rhs, BLAS_Cpp::Transp gpms_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a0d49cf30e99144b4404222bec3c1bc6e</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp mwo_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a900f5bb64eb5c135e7f3a958da51918a</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac15a5369a10c424a12f9e8bc03344cb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2e81f486da8a59d0af9e7bf8a8ab9a8b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a29a1ad79c69bf12d96cf7a540280182e</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>af8e7324cc60e8d44aeef0b3a3b67785a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa684a28bfb9dd8e15c3af04cfcab7979</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>adaf68f480a35ab7c76a48b4a42d2c788</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6927e8f4dd1b50a3a615b8b14d8c92f3</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a267a73495821f95f1e9f1b09d196a5ea</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aac7173a6691e1778ca45d296a7c1ea17</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>a8503ff5c48659fa0c74d11c43aabdd3e</anchor>
      <arglist>(MatrixSymOp *symwo_lhs, value_type alpha, const MatrixOp &amp;mwo, BLAS_Cpp::Transp mwo_trans, EMatrixDummyArg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymInitDiag</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymInitDiag.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixSymInitDiag</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymInitDiag.html</anchorfile>
      <anchor>ac8dfbe3c4fd57587f606beb088cad996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init_identity</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymInitDiag.html</anchorfile>
      <anchor>a1dfbc124a0339f90d1f197c3bf9b347a</anchor>
      <arglist>(const VectorSpace &amp;space_diag, value_type alpha=1.0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init_diagonal</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymInitDiag.html</anchorfile>
      <anchor>a8ebaac9bf5cba442bf7eb68a5953dc38</anchor>
      <arglist>(const Vector &amp;diag)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymNonsing</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixNonsing</base>
    <member kind="enumeration">
      <name>EMatrixDummyArg</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>aa0a0c3370967939ec36d1c801963f8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>M_StMtInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>a42acdeee0c1838274fe74cad152e89c9</anchor>
      <arglist>(MatrixSymOp *sym_gms_lhs, value_type alpha, const MatrixOp &amp;mwo, BLAS_Cpp::Transp mwo_trans, const MatrixSymNonsing &amp;mswof, EMatrixDummyArg mwo_rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_msns_mut_ptr_t</type>
      <name>clone_msns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>aecb8a0f265d26411d6a6426bb9feda1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_msns_ptr_t</type>
      <name>clone_msns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>ab5e7901701d684f23648fe4c13b35669</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>a8503ff5c48659fa0c74d11c43aabdd3e</anchor>
      <arglist>(MatrixSymOp *symwo_lhs, value_type alpha, const MatrixOp &amp;mwo, BLAS_Cpp::Transp mwo_trans, EMatrixDummyArg) const </arglist>
    </member>
    <member kind="function">
      <type>mat_mns_mut_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>a075da4fa4e979cd51c536401a910e34c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_mns_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>a503898d68af890b6402dd86952b668c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga7f4bfb88c6ffe3b2ad20732f7cdd0556</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gaf6e4d634fc68bf70ddcfcdb59913d17d</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gac5f155a0a7332fa04a5c1d1bbbec6398</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga7147936bfe4d44e1643390972120f1de</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga545137f6d79d96a0ae9c24ee5ef2487d</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga6d1ffb2ca031eefd95c99daec05bf281</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a74973b0f184c7bf0eadd56548119effa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a67d2a17263ae9c682990cf429a26321a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aea7780a16afe595a8a24ee52b8e7fbf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aed562e6e0ba0c4e8921e5c1741065f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a95a45f7ee07a98edef8272c3985a83f3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymOp</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymOp.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixSymOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a8ce5fe62685d5d0e1ac9491047a5022d</anchor>
      <arglist>(const MatrixSymOp &amp;M)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a3cf977e1ea2de043e4034825fbfff367</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad6aefd4a5ccb750ff066b3c94b43dbe5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa8a9edd1f07308d03fc1ddb6abe5607e</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatRhsPlaceHolder</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a9b0d347deb8c731c157edcd256859842</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a9c6863ae8d4d2be35738533c29f84f83</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const MatrixSymOp &amp;M, const GenPermMatrixSlice &amp;gpms_rhs, BLAS_Cpp::Transp gpms_rhs_trans, value_type beta)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Mp_StMtMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a8ce9392216a77325f78cd473702d35b4</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const MatrixSymOp &amp;M, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp mwo_rhs_trans, value_type beta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswo_mut_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a5756056d870b0ba2d97205e2452e0df9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswo_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>aea20b6d17543d7265df808613b782dd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a8d16dbc3d6cea0f84c47c6139e8339ee</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const GenPermMatrixSlice &amp;gpms_rhs, BLAS_Cpp::Transp gpms_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a0d49cf30e99144b4404222bec3c1bc6e</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp mwo_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>abc0f88218955cbce2499cfdf6dc8fea8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a35110d50c6c1d5d1c4375316db91c57f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a514265a2bb36e0cb12df11086d59886d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a9ab3983bbf47189ffb99a6a191e79ded</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a900f5bb64eb5c135e7f3a958da51918a</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac15a5369a10c424a12f9e8bc03344cb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2e81f486da8a59d0af9e7bf8a8ab9a8b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a29a1ad79c69bf12d96cf7a540280182e</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>af8e7324cc60e8d44aeef0b3a3b67785a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa684a28bfb9dd8e15c3af04cfcab7979</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>adaf68f480a35ab7c76a48b4a42d2c788</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6927e8f4dd1b50a3a615b8b14d8c92f3</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a267a73495821f95f1e9f1b09d196a5ea</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aac7173a6691e1778ca45d296a7c1ea17</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymOpNonsing</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixSymOp</base>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixSymNonsing</base>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixOpNonsing</base>
    <member kind="function">
      <type>MatrixSymOpNonsing &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a97f3607578d9bfe8c8eff4047c9a221b</anchor>
      <arglist>(const MatrixSymOpNonsing &amp;M)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixSymOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a8ce5fe62685d5d0e1ac9491047a5022d</anchor>
      <arglist>(const MatrixSymOp &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>abc0f88218955cbce2499cfdf6dc8fea8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a35110d50c6c1d5d1c4375316db91c57f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a3cf977e1ea2de043e4034825fbfff367</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad6aefd4a5ccb750ff066b3c94b43dbe5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa8a9edd1f07308d03fc1ddb6abe5607e</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixOpNonsing &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>aad51d5d2ebf68a901995278d7a30ba1b</anchor>
      <arglist>(const MatrixOpNonsing &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_cond_num</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>a4212a7fac53cba1ece06aef6bb311586</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswons_mut_ptr_t</type>
      <name>clone_mswons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>adcb3e0d4fa8c403e53a9925e03f13d75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswons_ptr_t</type>
      <name>clone_mswons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>af8f7fb940ae76640fffcb2369d348215</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a7fe90dc22686526cbf6cf5baa4b093c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a2303a6ae091e764cb2620d0b68f9ff5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mns_mut_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>ab709e063616b2e88c7d2b6fa8f9200cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_mns_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>adce49fff5e167b7847c48162c439adc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mswo_mut_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a24e442575ef17ff26b0a98bc77a517e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_mswo_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>af2efe8854d7c9fce7aa6bfa4979b9415</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_msns_mut_ptr_t</type>
      <name>clone_msns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a9cc6e0e93fa53e81a0676141ead482ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_msns_ptr_t</type>
      <name>clone_msns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a2320ebc062b2ad34133b08d1f11747ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mwons_mut_ptr_t</type>
      <name>clone_mwons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a735f1cbda7da061664292ce97449071d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_mwons_ptr_t</type>
      <name>clone_mwons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>ae7000ebe87bae5a8242771f00f9b043f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatRhsPlaceHolder</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a9b0d347deb8c731c157edcd256859842</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatrixDummyArg</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>aa0a0c3370967939ec36d1c801963f8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a8d16dbc3d6cea0f84c47c6139e8339ee</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const GenPermMatrixSlice &amp;gpms_rhs, BLAS_Cpp::Transp gpms_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a0d49cf30e99144b4404222bec3c1bc6e</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp mwo_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a900f5bb64eb5c135e7f3a958da51918a</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac15a5369a10c424a12f9e8bc03344cb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2e81f486da8a59d0af9e7bf8a8ab9a8b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a29a1ad79c69bf12d96cf7a540280182e</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>af8e7324cc60e8d44aeef0b3a3b67785a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa684a28bfb9dd8e15c3af04cfcab7979</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>adaf68f480a35ab7c76a48b4a42d2c788</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6927e8f4dd1b50a3a615b8b14d8c92f3</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a267a73495821f95f1e9f1b09d196a5ea</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aac7173a6691e1778ca45d296a7c1ea17</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>a8503ff5c48659fa0c74d11c43aabdd3e</anchor>
      <arglist>(MatrixSymOp *symwo_lhs, value_type alpha, const MatrixOp &amp;mwo, BLAS_Cpp::Transp mwo_trans, EMatrixDummyArg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymSecant</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymSecant.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixSymInitDiag</base>
    <class kind="class">AbstractLinAlgPack::MatrixSymSecant::UpdateFailedException</class>
    <class kind="class">AbstractLinAlgPack::MatrixSymSecant::UpdateSkippedException</class>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>secant_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymSecant.html</anchorfile>
      <anchor>a7ae41446e36a294ed3f3a162d0d9e775</anchor>
      <arglist>(VectorMutable *s, VectorMutable *y, VectorMutable *Bs=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixSymInitDiag</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymInitDiag.html</anchorfile>
      <anchor>ac8dfbe3c4fd57587f606beb088cad996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init_identity</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymInitDiag.html</anchorfile>
      <anchor>a1dfbc124a0339f90d1f197c3bf9b347a</anchor>
      <arglist>(const VectorSpace &amp;space_diag, value_type alpha=1.0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init_diagonal</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymInitDiag.html</anchorfile>
      <anchor>a8ebaac9bf5cba442bf7eb68a5953dc38</anchor>
      <arglist>(const Vector &amp;diag)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymSecant::UpdateFailedException</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymSecant_1_1UpdateFailedException.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymSecant::UpdateSkippedException</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymSecant_1_1UpdateSkippedException.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MultiVector</name>
    <filename>classAbstractLinAlgPack_1_1MultiVector.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixOp</base>
    <member kind="typedef">
      <type>int</type>
      <name>access_by_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a0f044703955d313bf5e006878bbeebad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Vector &gt;</type>
      <name>vec_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a73e9ae8a232973bef01d955c9fd2a883</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const MultiVector &gt;</type>
      <name>multi_vec_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a008b0a0745e4ae51f89e3e8259bc9152</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a9bc45c175cfe05e5bf5d58b2f042c419</anchor>
      <arglist>(EApplyBy apply_by, const RTOpPack::RTOp &amp;primary_op, const size_t num_multi_vecs, const MultiVector *multi_vecs[], const size_t num_targ_multi_vecs, MultiVectorMutable *targ_multi_vecs[], RTOpPack::ReductTarget *reduct_objs[], const index_type primary_first_ele, const index_type primary_sub_dim, const index_type primary_global_offset, const index_type secondary_first_ele, const index_type secondary_sub_dim)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a87501211ff577ea71ae1c3f9b6c7c210</anchor>
      <arglist>(EApplyBy apply_by, const RTOpPack::RTOp &amp;primary_op, const RTOpPack::RTOp &amp;secondary_op, const size_t num_multi_vecs, const MultiVector *multi_vecs[], const size_t num_targ_multi_vecs, MultiVectorMutable *targ_multi_vecs[], RTOpPack::ReductTarget *reduct_obj, const index_type primary_first_ele, const index_type primary_sub_dim, const index_type primary_global_offset, const index_type secondary_first_ele, const index_type secondary_sub_dim)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual multi_vec_ptr_t</type>
      <name>mv_clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a64758d298366ee671d780496f340c28c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual access_by_t</type>
      <name>access_by</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a80eae46045d6fa6436cc029f723f19f6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual vec_ptr_t</type>
      <name>col</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a349ea3f0d996b1a9d2726538e2eb468e</anchor>
      <arglist>(index_type j) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual vec_ptr_t</type>
      <name>row</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>ac38a0f35759d275c5c1ffe0b7a1eb3d8</anchor>
      <arglist>(index_type i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual vec_ptr_t</type>
      <name>diag</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>aa7feadd16d045c535b2728ab2161ea1b</anchor>
      <arglist>(int k) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual multi_vec_ptr_t</type>
      <name>mv_sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a5a00c3e8c69303494ec7215dfa71aeff</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>multi_vec_ptr_t</type>
      <name>mv_sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a92dc96460238fcb9ce55fd0271227432</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a8dd734a4c4e284838c89517d5ad93d78</anchor>
      <arglist>(EApplyBy apply_by, const RTOpPack::RTOp &amp;primary_op, const size_t num_multi_vecs, const MultiVector *multi_vecs[], const size_t num_targ_multi_vecs, MultiVectorMutable *targ_multi_vecs[], RTOpPack::ReductTarget *reduct_objs[], const index_type primary_first_ele, const index_type primary_sub_dim, const index_type primary_global_offset, const index_type secondary_first_ele, const index_type secondary_sub_dim) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>acf40bfeb10097e5c270f55692aa3ae9f</anchor>
      <arglist>(EApplyBy apply_by, const RTOpPack::RTOp &amp;primary_op, const RTOpPack::RTOp &amp;secondary_op, const size_t num_multi_vecs, const MultiVector *multi_vecs[], const size_t num_targ_multi_vecs, MultiVectorMutable *targ_multi_vecs[], RTOpPack::ReductTarget *reduct_obj, const index_type primary_first_ele, const index_type primary_sub_dim, const index_type primary_global_offset, const index_type secondary_first_ele, const index_type secondary_sub_dim) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>ace7d5ce5742463bd909cb06f69c29131</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a5cc509cd2ee05cb67736648a0d81827b</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a6a005851b1353c65cf14fede0e0ea153</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a78fc2ff5b772ccf6c9126dc1c7980399</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a3cf977e1ea2de043e4034825fbfff367</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7a2d853f87929633a47238ee7244ac98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad6aefd4a5ccb750ff066b3c94b43dbe5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a74973b0f184c7bf0eadd56548119effa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a67d2a17263ae9c682990cf429a26321a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aea7780a16afe595a8a24ee52b8e7fbf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aed562e6e0ba0c4e8921e5c1741065f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a95a45f7ee07a98edef8272c3985a83f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a900f5bb64eb5c135e7f3a958da51918a</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac15a5369a10c424a12f9e8bc03344cb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2e81f486da8a59d0af9e7bf8a8ab9a8b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a29a1ad79c69bf12d96cf7a540280182e</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>af8e7324cc60e8d44aeef0b3a3b67785a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa684a28bfb9dd8e15c3af04cfcab7979</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>adaf68f480a35ab7c76a48b4a42d2c788</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6927e8f4dd1b50a3a615b8b14d8c92f3</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aac7173a6691e1778ca45d296a7c1ea17</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MultiVectorMutable</name>
    <filename>classAbstractLinAlgPack_1_1MultiVectorMutable.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MultiVector</base>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; VectorMutable &gt;</type>
      <name>vec_mut_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>ae62e13b55d1325de84574c590d49d30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; MultiVectorMutable &gt;</type>
      <name>multi_vec_mut_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a0ca851ee19940034e17295ce1ccf8461</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>access_by_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a0f044703955d313bf5e006878bbeebad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Vector &gt;</type>
      <name>vec_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a73e9ae8a232973bef01d955c9fd2a883</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const MultiVector &gt;</type>
      <name>multi_vec_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a008b0a0745e4ae51f89e3e8259bc9152</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual multi_vec_mut_ptr_t</type>
      <name>mv_clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a9b9aad9d93e0486998b35695b0ee1b90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual vec_mut_ptr_t</type>
      <name>col</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a1e2855be2785cdd1f8c6757ac32a9ab7</anchor>
      <arglist>(index_type j)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual vec_mut_ptr_t</type>
      <name>row</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>adc073bb8ee60f913e23748f24e192e4e</anchor>
      <arglist>(index_type i)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual vec_mut_ptr_t</type>
      <name>diag</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>aae4da22108e6a8621e585487ed9c0270</anchor>
      <arglist>(int k)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual multi_vec_mut_ptr_t</type>
      <name>mv_sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>afe7b017247483a5600f9418c61e8fb0d</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng)</arglist>
    </member>
    <member kind="function">
      <type>multi_vec_mut_ptr_t</type>
      <name>mv_sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a729a6584a9e48e08902eac57f759118e</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu)</arglist>
    </member>
    <member kind="function">
      <type>mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a2812e9ac542f95344387ba7876cd8ea7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a083a6598083febb4c238fdb8609a1a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a7680fe965838f52aa32e762101cb72b6</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function">
      <type>MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>aeb247f68d404b87c9eba81a5ff66cc4b</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a7c6bf32dcb2933154659f606956a75eb</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a28e766545903d740e56b40b835188b2b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function">
      <type>multi_vec_ptr_t</type>
      <name>mv_clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>ab47f66aece3e46eebac559e924d9bc32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vec_ptr_t</type>
      <name>col</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a20841c4f198caa370e53c75dd9e39142</anchor>
      <arglist>(index_type j) const </arglist>
    </member>
    <member kind="function">
      <type>vec_ptr_t</type>
      <name>row</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a54ae7d85ed843260a9e069d654a41a73</anchor>
      <arglist>(index_type i) const </arglist>
    </member>
    <member kind="function">
      <type>vec_ptr_t</type>
      <name>diag</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a6cfb003a1eb6ededfacf020085d2aac0</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>multi_vec_ptr_t</type>
      <name>mv_sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a60f05b4beb5c960e4eeab9d1dabc0cee</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual access_by_t</type>
      <name>access_by</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a80eae46045d6fa6436cc029f723f19f6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>multi_vec_ptr_t</type>
      <name>mv_sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a92dc96460238fcb9ce55fd0271227432</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>ace7d5ce5742463bd909cb06f69c29131</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a5cc509cd2ee05cb67736648a0d81827b</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a6a005851b1353c65cf14fede0e0ea153</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a78fc2ff5b772ccf6c9126dc1c7980399</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad6aefd4a5ccb750ff066b3c94b43dbe5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a74973b0f184c7bf0eadd56548119effa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a67d2a17263ae9c682990cf429a26321a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aea7780a16afe595a8a24ee52b8e7fbf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aed562e6e0ba0c4e8921e5c1741065f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a95a45f7ee07a98edef8272c3985a83f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a8dd734a4c4e284838c89517d5ad93d78</anchor>
      <arglist>(EApplyBy apply_by, const RTOpPack::RTOp &amp;primary_op, const size_t num_multi_vecs, const MultiVector *multi_vecs[], const size_t num_targ_multi_vecs, MultiVectorMutable *targ_multi_vecs[], RTOpPack::ReductTarget *reduct_objs[], const index_type primary_first_ele, const index_type primary_sub_dim, const index_type primary_global_offset, const index_type secondary_first_ele, const index_type secondary_sub_dim) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>acf40bfeb10097e5c270f55692aa3ae9f</anchor>
      <arglist>(EApplyBy apply_by, const RTOpPack::RTOp &amp;primary_op, const RTOpPack::RTOp &amp;secondary_op, const size_t num_multi_vecs, const MultiVector *multi_vecs[], const size_t num_targ_multi_vecs, MultiVectorMutable *targ_multi_vecs[], RTOpPack::ReductTarget *reduct_obj, const index_type primary_first_ele, const index_type primary_sub_dim, const index_type primary_global_offset, const index_type secondary_first_ele, const index_type secondary_sub_dim) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac15a5369a10c424a12f9e8bc03344cb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2e81f486da8a59d0af9e7bf8a8ab9a8b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a29a1ad79c69bf12d96cf7a540280182e</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>af8e7324cc60e8d44aeef0b3a3b67785a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa684a28bfb9dd8e15c3af04cfcab7979</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>adaf68f480a35ab7c76a48b4a42d2c788</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6927e8f4dd1b50a3a615b8b14d8c92f3</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aac7173a6691e1778ca45d296a7c1ea17</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::Permutation</name>
    <filename>classAbstractLinAlgPack_1_1Permutation.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Permutation</name>
      <anchorfile>classAbstractLinAlgPack_1_1Permutation.html</anchorfile>
      <anchor>a81bb892146b7f481dd0089136437ee84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space</name>
      <anchorfile>classAbstractLinAlgPack_1_1Permutation.html</anchorfile>
      <anchor>a51cbecef1e66d05241eec9391846bd7f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_type</type>
      <name>dim</name>
      <anchorfile>classAbstractLinAlgPack_1_1Permutation.html</anchorfile>
      <anchor>a65edddee25498c714c6e947cc1af4694</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_identity</name>
      <anchorfile>classAbstractLinAlgPack_1_1Permutation.html</anchorfile>
      <anchor>af25fd7a75f2785c8ff816a1321704f68</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1Permutation.html</anchorfile>
      <anchor>aeaf03fda40bdfd9cc38b1284e742d20a</anchor>
      <arglist>(std::ostream &amp;out) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>permute</name>
      <anchorfile>classAbstractLinAlgPack_1_1Permutation.html</anchorfile>
      <anchor>ab2513b0137abf98a313a7ac64f0bdb46</anchor>
      <arglist>(BLAS_Cpp::Transp P_trans, const Vector &amp;x, VectorMutable *y) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>permute</name>
      <anchorfile>classAbstractLinAlgPack_1_1Permutation.html</anchorfile>
      <anchor>a25ac02c834395fc0872c23da84dde2e4</anchor>
      <arglist>(BLAS_Cpp::Transp P_trans, VectorMutable *y) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::SparseElement</name>
    <filename>classAbstractLinAlgPack_1_1SparseElement.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T_Value</type>
      <name>value_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseElement.html</anchorfile>
      <anchor>a9ff76f34c4b1d7525c185d42f952e3b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_Index</type>
      <name>index_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseElement.html</anchorfile>
      <anchor>a0890307cda79b922898de8eb870000e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseElement</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseElement.html</anchorfile>
      <anchor>a410aa46f576f4916dbd384b0fdae0d38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseElement</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseElement.html</anchorfile>
      <anchor>a54f8c9b9d150a30a9a5f34074e7e0e35</anchor>
      <arglist>(index_type index, value_type value)</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>value</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseElement.html</anchorfile>
      <anchor>a16aa85ea4c6ad6f98377afbdf3b96700</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>value</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseElement.html</anchorfile>
      <anchor>ac58df7f39a85e650e75c037b8b284228</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const index_type &amp;</type>
      <name>index</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseElement.html</anchorfile>
      <anchor>afbdf19ef4424fb806aca5adb992ede82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseElement.html</anchorfile>
      <anchor>a065caf04fff0d24122a1c7db4fa50592</anchor>
      <arglist>(index_type index, value_type value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>change_index</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseElement.html</anchorfile>
      <anchor>aa301101f0d3c766ced854df76600b724</anchor>
      <arglist>(index_type index)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::SparseVector</name>
    <filename>classAbstractLinAlgPack_1_1SparseVector.html</filename>
    <templarg>T_Element</templarg>
    <templarg>T_Alloc</templarg>
    <member kind="function">
      <type>SparseVector&lt; T_Element, T_Alloc &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a86a495ebea4c3349ff8978ab1380eaf5</anchor>
      <arglist>(const SparseVector&lt; T_Element, T_Alloc &gt; &amp;sp_vec)</arglist>
    </member>
    <member kind="function">
      <type>SparseVector&lt; T_Element, T_Alloc &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a6f3c50943a735c7fd18976d01c254db6</anchor>
      <arglist>(const SparseVectorSlice&lt; T_Element &gt; &amp;sp_vec_slc)</arglist>
    </member>
    <member kind="function">
      <type>EOverLap</type>
      <name>overlap</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a0c0925bdcf345643258823df2e721f85</anchor>
      <arglist>(const SparseVectorSlice&lt; T_Element &gt; &amp;sv) const </arglist>
    </member>
    <member kind="typedef">
      <type>T_Alloc</type>
      <name>allocator_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a46b494f00119c8d425c1ca7cd2fd79ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_Element</type>
      <name>element_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>ae4ffa7b1be46ff126e2f7f2cf116f51d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractLinAlgPack::size_type</type>
      <name>size_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a6d51fa7291750046926fee7ea6961e63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a3dae103cb4af7995c9abb03a7371f113</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>element_type *</type>
      <name>iterator</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>ae8a502f0d212b1227c72eba77d046b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const element_type *</type>
      <name>const_iterator</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a9d2b712e068359c1d0f91db046db9fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>aa7365c1efc9ba35b2a5202251ee72cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a77b2ce514f4976c11325241f93ac13c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SparseVectorUtilityPack::DoesNotExistException</type>
      <name>DoesNotExistException</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a37e124f91a67661d3960875c0ac53c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SparseVectorUtilityPack::NotSortedException</type>
      <name>NotSortedException</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a7250837fde86159a9f608d78ec040d8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SparseVectorUtilityPack::DuplicateIndexesException</type>
      <name>DuplicateIndexesException</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a5d5198bc7aca99b9882dbe52c562b0b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SparseVectorUtilityPack::OutOfRoomException</type>
      <name>OutOfRoomException</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a5291e98ff57e7c6e60bcea4ae8cd99ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SparseVectorUtilityPack::UnsizedException</type>
      <name>UnsizedException</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a265358e99d9d10241c74a260b306847b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SparseVectorUtilityPack::NoNonZeroElementsException</type>
      <name>NoNonZeroElementsException</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a4474bbc20a8a1d71f467b0836dfbc76f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseVector</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>ad1dcceaa73d30e5bafe90b5280c0ff31</anchor>
      <arglist>(const allocator_type &amp;alloc=allocator_type())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseVector</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a0dafda1ba5359f3c8389161f5555a0f0</anchor>
      <arglist>(bool assume_sorted, const allocator_type &amp;alloc=allocator_type())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseVector</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>ae9172fdc4f322bf1e0a77ff53af28918</anchor>
      <arglist>(size_type size, size_type max_nz, difference_type offset=0, bool assume_sorted=false, const allocator_type &amp;alloc=allocator_type())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseVector</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a449e935bfb8c6982856ebf672ec15130</anchor>
      <arglist>(const SparseVector&lt; T_Element, T_Alloc &gt; &amp;sp_vec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseVector</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>abbc9f38c7f4fefa1fed2a02df5137f5c</anchor>
      <arglist>(SparseVectorSlice&lt; T_Element &gt; sp_vec_slc, const allocator_type &amp;alloc=allocator_type())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseVector</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a71aa2d49823045f7a46fdb6bbeef6ff7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dim</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a8404872ba5dd1305c98b47186febcc21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a0e32c31bd165a3fff41815b9f30820e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>offset</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a5ba147341b3b6662da36d4e549333f4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sorted</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>abea9e8477cc5134d609aa05257568ae7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>afbbdc2ff787e118337be66b0ff6a94a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a49ca9e04cf11052d4096790ec0ae5585</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>aebc003963cd147eb44bbf0bf5b9520ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a0285f845d158e528744ccb939574aea7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>abf000cf6805fe3cf851ef08df6f7540b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a8752bb79c1bc5621bef18829327462ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>ad966603e71fa853c3ad4d3f85d9e492d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>acbecd2e5e944a3212df9e4dfabfa614a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>ae686a15931c556e482caa88a07f01715</anchor>
      <arglist>(size_type size, size_type max_nz, difference_type offset=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uninitialized_resize</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a2c62c97576dfb48d9e7c06f0968406a1</anchor>
      <arglist>(size_type size, size_type nz, size_type max_nz, difference_type offset=0)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a596e5324b6f63a17ea92e6b07a0cdec3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_element</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a300c594441311d3821b4a2c31f47d9cc</anchor>
      <arglist>(element_type ele)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert_element</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>abf380d94ad0c02c7aa55d3637b982a5d</anchor>
      <arglist>(element_type ele)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assume_sorted</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a15a1d97b9ac81ad935ba0476e84a4b8e</anchor>
      <arglist>(bool assume_is_sorted)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a6a018ae364fe994de58318bd9ea3de86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assert_valid_and_sorted</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a310ad9083e2a11524a2e495eee478fb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>element_type *</type>
      <name>lookup_element</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a140184ad4f2668ee140be76bcfa304a8</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const element_type *</type>
      <name>lookup_element</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a3391647d7d45da39914f1444db2c2b81</anchor>
      <arglist>(size_type i) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator SparseVectorSlice&lt; T_Element &gt;</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a18548ed767c03c997c76071ad159ecfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const SparseVectorSlice&lt; T_Element &gt;</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>afc747bf050fb448643af606259f2d8c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SparseVectorSlice&lt; T_Element &gt;</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a1bc9246199b819dc5e88d4d3de43d206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SparseVectorSlice&lt; T_Element &gt;</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a80400cd2679bc99295475c3d1ba02206</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SparseVectorSlice&lt; T_Element &gt;</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a4797c91b30b255014edd2c478f96e484</anchor>
      <arglist>(const Range1D &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>const SparseVectorSlice&lt; T_Element &gt;</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>a740e35df33fde6944704922bcf0387ce</anchor>
      <arglist>(const Range1D &amp;rng) const </arglist>
    </member>
    <member kind="function">
      <type>SparseVectorSlice&lt; T_Element &gt;</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>ad2c3330dd5becc8f8e4e97ee4228eb3b</anchor>
      <arglist>(size_type lbound, size_type ubound)</arglist>
    </member>
    <member kind="function">
      <type>const SparseVectorSlice&lt; T_Element &gt;</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVector.html</anchorfile>
      <anchor>ad1533a973947ff5035e131be5905d5b1</anchor>
      <arglist>(size_type lbound, size_type ubound) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::SparseVectorSlice</name>
    <filename>classAbstractLinAlgPack_1_1SparseVectorSlice.html</filename>
    <templarg>T_Element</templarg>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>aa0b31429b3e39bdfe829ba1f2f9a08bd</anchor>
      <arglist>(SparseVectorSlice svs)</arglist>
    </member>
    <member kind="function">
      <type>EOverLap</type>
      <name>overlap</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>ab7f6b12c50dd9b1888040aa751a3806d</anchor>
      <arglist>(const SparseVectorSlice&lt; T_Element &gt; &amp;sv) const </arglist>
    </member>
    <member kind="typedef">
      <type>T_Element</type>
      <name>element_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a8b7691293ccd0a8ff2f1cf246d6d26be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractLinAlgPack::size_type</type>
      <name>size_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a1d5680bdb2d74a41d359d4e9d2f8af49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a53a8a3ee9196310e0dff1ed59fd93abd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>element_type *</type>
      <name>iterator</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a517a9dbcad05792b26b09d56d6168933</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const element_type *</type>
      <name>const_iterator</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>aa77dacf0b585e706f58f2f0c715929c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>abf420b729fd4f3403b262e6b97b43865</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a00d300783168ef57ef72c6b15cba9fd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SparseVectorUtilityPack::DoesNotExistException</type>
      <name>DoesNotExistException</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>af7f2753920f0634ad75cd2649b627b16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SparseVectorUtilityPack::NotSortedException</type>
      <name>NotSortedException</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>abd08349df2f22dc1825e4426313ba2e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseVectorSlice</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a8634189687418e3a168289bf9eeaa82d</anchor>
      <arglist>(element_type ele[], size_type nz, difference_type offset, size_type size, bool assume_sorted=false)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dim</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a6c10560b7cc650fadcb3bc4a222cc120</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a667a42a83a522978d24c75960e3da94a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>offset</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>af0a104a6d53f4f971b946789aaf88242</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sorted</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a2bde908c57a07408497086790d6c80ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a28317f146205cb6ebf6385f8185e7546</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>ad8fe23d73959d8393ca0795cb8f8eacf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>ac3acfc1ef6ce18f71b960e92c27c15de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a5002055b377688a793eb46fe6a348135</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a28421f2d5849f4b647413bac9d94231d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a135182ffa31729b581332c7766e06513</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a3ea48fc65d12cac570a6357a4f14cb7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a24b6b05207b12ee7c13fbea4a9afa3c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>element_type *</type>
      <name>lookup_element</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a2cb4a940c1fed86c1594201385116b13</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const element_type *</type>
      <name>lookup_element</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a0c991046c1907b4088547c50775c0c20</anchor>
      <arglist>(size_type i) const </arglist>
    </member>
    <member kind="function">
      <type>SparseVectorSlice&lt; T_Element &gt; &amp;</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>aa2f60f77ec8552e2ea96327f18f5b039</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SparseVectorSlice&lt; T_Element &gt; &amp;</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a47f0d0163d4f8b9db8a29fb0603db70f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SparseVectorSlice *</type>
      <name>operator&amp;</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>af5f0d3ece27b08c1ffe21231b4934911</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SparseVectorSlice *</type>
      <name>operator&amp;</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a44077d7c6a8fc68ad67900e9ca12cfd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SparseVectorSlice&lt; T_Element &gt;</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>aac1083d9d8bdf01799618df4ef357333</anchor>
      <arglist>(const Range1D &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>const SparseVectorSlice&lt; T_Element &gt;</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a3266817827c48f1de086572ad1251e26</anchor>
      <arglist>(const Range1D &amp;rng) const </arglist>
    </member>
    <member kind="function">
      <type>SparseVectorSlice&lt; T_Element &gt;</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>a065c397aba0b2b0dbf6a35f60b02a64f</anchor>
      <arglist>(size_type lbound, size_type ubound)</arglist>
    </member>
    <member kind="function">
      <type>const SparseVectorSlice&lt; T_Element &gt;</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorSlice.html</anchorfile>
      <anchor>adacb58c99cc15932abc41a37bf8df2d7</anchor>
      <arglist>(size_type lbound, size_type ubound) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::Vector</name>
    <filename>classAbstractLinAlgPack_1_1Vector.html</filename>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Vector &gt;</type>
      <name>vec_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>acc877a06c751cb8a2c45b70749449c74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; VectorMutable &gt;</type>
      <name>vec_mut_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a79b1a172981f4e8470db55f8882cb778</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a13327c9f41c859edb60d8b440695d319</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>ab1fb6eca76137538ab8e3d50da8ee825</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vec_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a4b1454905dbdb543012a9a1c85d580b1</anchor>
      <arglist>(const index_type &amp;l, const index_type &amp;u) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>has_changed</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a06e01e3de2bccc505ed09e8b4cb133f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a3d95d8f385c9d12561001ed18aaa53c5</anchor>
      <arglist>(const RTOpPack::RTOp &amp;op, const size_t num_vecs, const Vector *vecs[], const size_t num_targ_vecs, VectorMutable *targ_vecs[], RTOpPack::ReductTarget *reduct_obj, const index_type first_ele, const index_type sub_dim, const index_type global_offset)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>ac99ddacd26ea8ed784b4668017850e87</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>ae35739f49732ef7f7a497d00af28458e</anchor>
      <arglist>(const RTOpPack::RTOp &amp;op, const size_t num_vecs, const Vector *vecs[], const size_t num_targ_vecs, VectorMutable *targ_vecs[], RTOpPack::ReductTarget *reduct_obj, const index_type first_ele, const index_type sub_dim, const index_type global_offset) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual index_type</type>
      <name>dim</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a60baa230565d530c86a9232545549e0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual index_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a0947234961448a00c535d6c2d45a0445</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a1318f9d56b5306d85a68659ae633e386</anchor>
      <arglist>(std::ostream &amp;out, bool print_dim=true, bool newline=true, index_type global_offset=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vec_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a2c0572b91a55d1be817bf8fc461a4488</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>get_ele</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a75c59e9bdf02d22e2f950e87e65eb08d</anchor>
      <arglist>(index_type i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vec_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a00759967838f2d1dbdb5678a03bd90b2</anchor>
      <arglist>(const Range1D &amp;rng) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>norm_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>ad2e503f3ac90deaf9db3cf6057113642</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>norm_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a938d97e5470f36c4d336bb76fb9a8886</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>norm_inf</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>ac0d9ac6ad8cce21d2d980ffcf365d143</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>inner_product</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a6de7b062a83a6cad28e0c9a9d85129e6</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>get_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a05d371bb7061cf5496c17f8373b21e9c</anchor>
      <arglist>(const Range1D &amp;rng, RTOpPack::SubVector *sub_vec) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>free_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>aec49335f152317ca594b53efd5dc01d3</anchor>
      <arglist>(RTOpPack::SubVector *sub_vec) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize_apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a94180c72097167271d0110440433d52d</anchor>
      <arglist>(const size_t num_targ_vecs, VectorMutable **targ_vecs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::VectorApplyOpSerialBase</name>
    <filename>classAbstractLinAlgPack_1_1VectorApplyOpSerialBase.html</filename>
    <member kind="function">
      <type></type>
      <name>VectorApplyOpSerialBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorApplyOpSerialBase.html</anchorfile>
      <anchor>ad969765c2af18e0d0a22cef58a171ed3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_op_serial</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorApplyOpSerialBase.html</anchorfile>
      <anchor>a80fe796040ce31b724c9960b6ec4c042</anchor>
      <arglist>(const RTOpPack::RTOp &amp;op, const size_t num_vecs, const Vector *vecs[], const size_t num_targ_vecs, VectorMutable *targ_vecs[], RTOpPack::ReductTarget *reduct_obj, const index_type first_ele, const index_type sub_dim, const index_type global_offset) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::VectorMutable</name>
    <filename>classAbstractLinAlgPack_1_1VectorMutable.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::Vector</base>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorMutable &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a3559d6457a58b8a58beb992590285374</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorMutable &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>ae8048bdd468b19e6b523e2b42b98af5d</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorMutable &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a3e59462e4e97d477ad5161d0f6cda944</anchor>
      <arglist>(const VectorMutable &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_ele</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>afcfb23dddd69884a6987cbabdd1cc35f</anchor>
      <arglist>(index_type i, value_type val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vec_mut_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a23bee8c490ca0c44e12c0efdf8e85b25</anchor>
      <arglist>(const Range1D &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>vec_mut_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>acc94538acbce8f8f323a80bd7ebe908b</anchor>
      <arglist>(const index_type &amp;l, const index_type &amp;u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a0cc2260e6976f1cefbad57928d2f0d3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>axpy</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a6bc366da29319c989dd387eb743bea2c</anchor>
      <arglist>(value_type alpha, const Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>get_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a052deb92b7a0ed03c0d6b55a12977e12</anchor>
      <arglist>(const Range1D &amp;rng, RTOpPack::MutableSubVector *sub_vec)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commit_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a08b3df447824fd4cb636aea98fb0e11b</anchor>
      <arglist>(RTOpPack::MutableSubVector *sub_vec)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>ad5df121180eb1389fe764de57d30124d</anchor>
      <arglist>(const RTOpPack::SparseSubVector &amp;sub_vec)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a58d606bcfed7495844612c2e27433285</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P, BLAS_Cpp::Transp P_trans, const Vector &amp;x, value_type beta)</arglist>
    </member>
    <member kind="function">
      <type>vec_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a488a56bc2635b310012a04a851c1460e</anchor>
      <arglist>(const Range1D &amp;rng) const </arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Vector &gt;</type>
      <name>vec_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>acc877a06c751cb8a2c45b70749449c74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; VectorMutable &gt;</type>
      <name>vec_mut_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a79b1a172981f4e8470db55f8882cb778</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a13327c9f41c859edb60d8b440695d319</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>ab1fb6eca76137538ab8e3d50da8ee825</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vec_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a4b1454905dbdb543012a9a1c85d580b1</anchor>
      <arglist>(const index_type &amp;l, const index_type &amp;u) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>has_changed</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a06e01e3de2bccc505ed09e8b4cb133f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>ac99ddacd26ea8ed784b4668017850e87</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual index_type</type>
      <name>dim</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a60baa230565d530c86a9232545549e0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual index_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a0947234961448a00c535d6c2d45a0445</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a1318f9d56b5306d85a68659ae633e386</anchor>
      <arglist>(std::ostream &amp;out, bool print_dim=true, bool newline=true, index_type global_offset=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vec_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a2c0572b91a55d1be817bf8fc461a4488</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>get_ele</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a75c59e9bdf02d22e2f950e87e65eb08d</anchor>
      <arglist>(index_type i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>norm_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>ad2e503f3ac90deaf9db3cf6057113642</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>norm_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a938d97e5470f36c4d336bb76fb9a8886</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>norm_inf</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>ac0d9ac6ad8cce21d2d980ffcf365d143</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>inner_product</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a6de7b062a83a6cad28e0c9a9d85129e6</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>get_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a05d371bb7061cf5496c17f8373b21e9c</anchor>
      <arglist>(const Range1D &amp;rng, RTOpPack::SubVector *sub_vec) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>free_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>aec49335f152317ca594b53efd5dc01d3</anchor>
      <arglist>(RTOpPack::SubVector *sub_vec) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>ae35739f49732ef7f7a497d00af28458e</anchor>
      <arglist>(const RTOpPack::RTOp &amp;op, const size_t num_vecs, const Vector *vecs[], const size_t num_targ_vecs, VectorMutable *targ_vecs[], RTOpPack::ReductTarget *reduct_obj, const index_type first_ele, const index_type sub_dim, const index_type global_offset) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize_apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a94180c72097167271d0110440433d52d</anchor>
      <arglist>(const size_t num_targ_vecs, VectorMutable **targ_vecs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::VectorMutableSubView</name>
    <filename>classAbstractLinAlgPack_1_1VectorMutableSubView.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::VectorMutable</base>
    <base virtualness="virtual">AbstractLinAlgPack::VectorSubView</base>
    <member kind="function">
      <type></type>
      <name>VectorMutableSubView</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableSubView.html</anchorfile>
      <anchor>a3231e3c74c177109bb074a6de5f6444a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorMutableSubView</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableSubView.html</anchorfile>
      <anchor>a3d6d4779ac6a951c2fbea3d97edaa81e</anchor>
      <arglist>(const vec_mut_ptr_t &amp;full_vec, const Range1D &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableSubView.html</anchorfile>
      <anchor>a4b58ad32fd4c20759ff8aec3362a9488</anchor>
      <arglist>(const vec_mut_ptr_t &amp;vec, const Range1D &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_uninitialized</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableSubView.html</anchorfile>
      <anchor>aa36614328c0998850b06e2e21ddce05f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const vec_mut_ptr_t &amp;</type>
      <name>full_vec</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableSubView.html</anchorfile>
      <anchor>a8dbbb7d01e176e53767fd85a5334e7f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorMutable &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a3559d6457a58b8a58beb992590285374</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorMutable &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>ae8048bdd468b19e6b523e2b42b98af5d</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorMutable &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a3e59462e4e97d477ad5161d0f6cda944</anchor>
      <arglist>(const VectorMutable &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>vec_mut_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>acc94538acbce8f8f323a80bd7ebe908b</anchor>
      <arglist>(const index_type &amp;l, const index_type &amp;u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a0cc2260e6976f1cefbad57928d2f0d3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>axpy</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a6bc366da29319c989dd387eb743bea2c</anchor>
      <arglist>(value_type alpha, const Vector &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a58d606bcfed7495844612c2e27433285</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P, BLAS_Cpp::Transp P_trans, const Vector &amp;x, value_type beta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSubView</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>ac75af01026e7f4b194318b14b798b3c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSubView</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>ad682e1caf34560ceac0120ac8daa2ca3</anchor>
      <arglist>(const vec_ptr_t &amp;full_vec, const Range1D &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>ad9832bebc2dfe350015db3db5f801f46</anchor>
      <arglist>(const vec_ptr_t &amp;full_vec, const Range1D &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_uninitialized</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>aafba7bf0d5070c6912ceab96328ddf30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const vec_ptr_t &amp;</type>
      <name>full_vec</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>a425b263c594ecb0f089f4029701e3eac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpaceSubSpace &amp;</type>
      <name>space_impl</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>a274579595de74caaaa21ad7d800c7f8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>a5136aadba697f6af65bc592540e9b9bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>dim</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>a86e61a4115c4fdfa7c17249e5173a24b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>a8ed063d4c2de117c7a10edebc97baae2</anchor>
      <arglist>(const RTOpPack::RTOp &amp;op, const size_t num_vecs, const Vector *vecs[], const size_t num_targ_vecs, VectorMutable *targ_vecs[], RTOpPack::ReductTarget *reduct_obj, const index_type first_ele, const index_type sub_dim, const index_type global_offset) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>get_ele</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>a4837feb40c7b1d924f769309729deb47</anchor>
      <arglist>(index_type i) const </arglist>
    </member>
    <member kind="function">
      <type>vec_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>a73bc4d3aea73a6dad05f888276aa06a1</anchor>
      <arglist>(const Range1D &amp;rng) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>a7814972da0118c1f9fc013459ac06c3d</anchor>
      <arglist>(const Range1D &amp;rng, RTOpPack::SubVector *sub_vec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>ab1b68ad66125dfe6165e964a1e9f00be</anchor>
      <arglist>(RTOpPack::SubVector *sub_vec) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a13327c9f41c859edb60d8b440695d319</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>ab1fb6eca76137538ab8e3d50da8ee825</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vec_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a4b1454905dbdb543012a9a1c85d580b1</anchor>
      <arglist>(const index_type &amp;l, const index_type &amp;u) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>has_changed</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a06e01e3de2bccc505ed09e8b4cb133f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual index_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a0947234961448a00c535d6c2d45a0445</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a1318f9d56b5306d85a68659ae633e386</anchor>
      <arglist>(std::ostream &amp;out, bool print_dim=true, bool newline=true, index_type global_offset=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vec_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a2c0572b91a55d1be817bf8fc461a4488</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>norm_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>ad2e503f3ac90deaf9db3cf6057113642</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>norm_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a938d97e5470f36c4d336bb76fb9a8886</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>norm_inf</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>ac0d9ac6ad8cce21d2d980ffcf365d143</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>inner_product</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a6de7b062a83a6cad28e0c9a9d85129e6</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>vec_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableSubView.html</anchorfile>
      <anchor>af0a254ec12923f11fc6fa6b6add1b088</anchor>
      <arglist>(const Range1D &amp;rng) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ele</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableSubView.html</anchorfile>
      <anchor>afce2eb99445e072dbf81d5ed2f9f420a</anchor>
      <arglist>(index_type i, value_type val)</arglist>
    </member>
    <member kind="function">
      <type>vec_mut_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableSubView.html</anchorfile>
      <anchor>a5e5c007e8ca36984c8f2c5b5e504a4ac</anchor>
      <arglist>(const Range1D &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableSubView.html</anchorfile>
      <anchor>adc2d7f4f932d36f4d661f3571a5ca5a6</anchor>
      <arglist>(const Range1D &amp;rng, RTOpPack::MutableSubVector *sub_vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commit_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableSubView.html</anchorfile>
      <anchor>a92f876f4259dc2ca97c2678e0850f958</anchor>
      <arglist>(RTOpPack::MutableSubVector *sub_vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableSubView.html</anchorfile>
      <anchor>a7bc1e1979da4f59c94972be76229706a</anchor>
      <arglist>(const RTOpPack::SparseSubVector &amp;sub_vec)</arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Vector &gt;</type>
      <name>vec_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>acc877a06c751cb8a2c45b70749449c74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; VectorMutable &gt;</type>
      <name>vec_mut_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a79b1a172981f4e8470db55f8882cb778</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize_apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a94180c72097167271d0110440433d52d</anchor>
      <arglist>(const size_t num_targ_vecs, VectorMutable **targ_vecs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::VectorSpace</name>
    <filename>classAbstractLinAlgPack_1_1VectorSpace.html</filename>
    <class kind="class">AbstractLinAlgPack::VectorSpace::IncompatibleVectorSpaces</class>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const InnerProduct &gt;</type>
      <name>inner_prod_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>aec8e06a0f28bf05a5ac7700e3a9763ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const VectorSpace &gt;</type>
      <name>space_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>ad590dd5038d21aedfe76555f668094fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const VectorSpaceFactory &gt;</type>
      <name>space_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a644c585d8ac1ea7b36389cbc1920bdc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; VectorMutable &gt;</type>
      <name>vec_mut_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>ab6e228dcfaed2ae182ec29b535699793</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; MultiVectorMutable &gt;</type>
      <name>multi_vec_mut_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a07e69cd27b3357a7e8fea8119def9f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual space_ptr_t</type>
      <name>sub_space</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a05fbf61278d0f6756b589989359adca0</anchor>
      <arglist>(const Range1D &amp;rng) const </arglist>
    </member>
    <member kind="function">
      <type>space_ptr_t</type>
      <name>sub_space</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a32235311021f90cb1f17a891c96e83a0</anchor>
      <arglist>(const index_type il, const index_type iu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual space_ptr_t</type>
      <name>space</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a35f8ff9cb7c8c7e1aca8b9c14612f6b0</anchor>
      <arglist>(const GenPermMatrixSlice &amp;P, BLAS_Cpp::Transp P_trans) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSpace</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>ab8b4e86f8802fd047712ff7978615ae3</anchor>
      <arglist>(const inner_prod_ptr_t &amp;inner_prod=Teuchos::null)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>inner_prod</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a90c92ae94465fbbb98e9d92b3bb1f9bd</anchor>
      <arglist>(const inner_prod_ptr_t &amp;inner_prod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const inner_prod_ptr_t</type>
      <name>inner_prod</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>accd7d3926bb7eb543d7d27a998501f48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual space_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a1ef6826cfc12c43b5e16e061a0e2cf2c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_compatible</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a94c08076903d9fc62a8da580acaefaad</anchor>
      <arglist>(const VectorSpace &amp;vec_spc) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual index_type</type>
      <name>dim</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a158da1ebc4998d12e27bbb6ff012e076</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual vec_mut_ptr_t</type>
      <name>create_member</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a86c7811ae43cef704cadfa97ba05ca31</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_in_core</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a9aa64398932dd5fe277713ba20d4b143</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual space_fcty_ptr_t</type>
      <name>small_vec_spc_fcty</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a32e1f4cfcf224ac11bee46ccf7d9502a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vec_mut_ptr_t</type>
      <name>create_member</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a6df56240586ce7c1a911780be51180ea</anchor>
      <arglist>(const value_type &amp;alpha) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual multi_vec_mut_ptr_t</type>
      <name>create_members</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>abc5932e305967b35c0a1c8bf4d0a4f89</anchor>
      <arglist>(size_type num_vecs) const </arglist>
    </member>
    <member kind="function">
      <type>obj_ptr_t</type>
      <name>create</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a37fb0f8f59062e0d826082bf57da1251</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::VectorSpace::IncompatibleVectorSpaces</name>
    <filename>classAbstractLinAlgPack_1_1VectorSpace_1_1IncompatibleVectorSpaces.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::VectorSpaceFactory</name>
    <filename>classAbstractLinAlgPack_1_1VectorSpaceFactory.html</filename>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const InnerProduct &gt;</type>
      <name>inner_prod_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceFactory.html</anchorfile>
      <anchor>a3ea10382c117338af9dd59648ed8a3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const VectorSpace &gt;</type>
      <name>space_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceFactory.html</anchorfile>
      <anchor>a2cc56c841b8064ab41f63ee477dbbfa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VectorSpaceFactory</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceFactory.html</anchorfile>
      <anchor>a9489103ec92648c14b0684847263e1fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSpaceFactory</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceFactory.html</anchorfile>
      <anchor>a9be6f504b84cea8d34b3061743317fbf</anchor>
      <arglist>(const inner_prod_ptr_t &amp;inner_prod=Teuchos::null)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>inner_prod</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceFactory.html</anchorfile>
      <anchor>a63750b3329f66f825f5fa46ccf7b0f5b</anchor>
      <arglist>(const inner_prod_ptr_t &amp;inner_prod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const inner_prod_ptr_t</type>
      <name>inner_prod</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceFactory.html</anchorfile>
      <anchor>a063b724501ccf1c978adea6e5667fc9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual space_ptr_t</type>
      <name>create_vec_spc</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceFactory.html</anchorfile>
      <anchor>a4bfe46c69001e049620d511bed605823</anchor>
      <arglist>(index_type dim) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::VectorSpaceSubSpace</name>
    <filename>classAbstractLinAlgPack_1_1VectorSpaceSubSpace.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::VectorSpace</base>
    <member kind="function">
      <type></type>
      <name>VectorSpaceSubSpace</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSubSpace.html</anchorfile>
      <anchor>aaf3ecef1c5269cd88a64da237bce125b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSpaceSubSpace</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSubSpace.html</anchorfile>
      <anchor>a2afc3644b521bfda158ec9fe83699ce2</anchor>
      <arglist>(const space_ptr_t &amp;full_space, const Range1D &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSubSpace.html</anchorfile>
      <anchor>ac5ff7377dcc8d5f4ae676c921437883f</anchor>
      <arglist>(const space_ptr_t &amp;full_space, const Range1D &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_uninitialized</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSubSpace.html</anchorfile>
      <anchor>a1cc2e5b47f36c8ce171e25ce84f2c235</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const space_ptr_t &amp;</type>
      <name>full_space</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSubSpace.html</anchorfile>
      <anchor>a6e57fabb032f5769c82c7ef536355530</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Range1D &amp;</type>
      <name>rng</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSubSpace.html</anchorfile>
      <anchor>a0603ca6eeae4a1249193daf9ca30c911</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate_range</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSubSpace.html</anchorfile>
      <anchor>a24e3e7942d7b1bc780c25945f30f4335</anchor>
      <arglist>(const Range1D &amp;rng) const </arglist>
    </member>
    <member kind="function">
      <type>space_ptr_t</type>
      <name>sub_space</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a32235311021f90cb1f17a891c96e83a0</anchor>
      <arglist>(const index_type il, const index_type iu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual space_ptr_t</type>
      <name>space</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a35f8ff9cb7c8c7e1aca8b9c14612f6b0</anchor>
      <arglist>(const GenPermMatrixSlice &amp;P, BLAS_Cpp::Transp P_trans) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSpace</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>ab8b4e86f8802fd047712ff7978615ae3</anchor>
      <arglist>(const inner_prod_ptr_t &amp;inner_prod=Teuchos::null)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>inner_prod</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a90c92ae94465fbbb98e9d92b3bb1f9bd</anchor>
      <arglist>(const inner_prod_ptr_t &amp;inner_prod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const inner_prod_ptr_t</type>
      <name>inner_prod</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>accd7d3926bb7eb543d7d27a998501f48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual space_fcty_ptr_t</type>
      <name>small_vec_spc_fcty</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a32e1f4cfcf224ac11bee46ccf7d9502a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vec_mut_ptr_t</type>
      <name>create_member</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a6df56240586ce7c1a911780be51180ea</anchor>
      <arglist>(const value_type &amp;alpha) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual multi_vec_mut_ptr_t</type>
      <name>create_members</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>abc5932e305967b35c0a1c8bf4d0a4f89</anchor>
      <arglist>(size_type num_vecs) const </arglist>
    </member>
    <member kind="function">
      <type>obj_ptr_t</type>
      <name>create</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a37fb0f8f59062e0d826082bf57da1251</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_compatible</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSubSpace.html</anchorfile>
      <anchor>a00a7327dd8d12e1bcadab9510d5e87b5</anchor>
      <arglist>(const VectorSpace &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_in_core</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSubSpace.html</anchorfile>
      <anchor>ab06546fc7426b27184e155f8e4771537</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>dim</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSubSpace.html</anchorfile>
      <anchor>ae8db8092c22a1844071da916caff3d38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vec_mut_ptr_t</type>
      <name>create_member</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSubSpace.html</anchorfile>
      <anchor>a0b5804d7f05fb684dd184e9d690e4454</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>space_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSubSpace.html</anchorfile>
      <anchor>aa62c36804257391921cb3fa803e7b9e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>space_ptr_t</type>
      <name>sub_space</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSubSpace.html</anchorfile>
      <anchor>a45bd0786d322b65f934ae1a76790656b</anchor>
      <arglist>(const Range1D &amp;rng) const </arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const InnerProduct &gt;</type>
      <name>inner_prod_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>aec8e06a0f28bf05a5ac7700e3a9763ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const VectorSpace &gt;</type>
      <name>space_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>ad590dd5038d21aedfe76555f668094fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const VectorSpaceFactory &gt;</type>
      <name>space_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a644c585d8ac1ea7b36389cbc1920bdc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; VectorMutable &gt;</type>
      <name>vec_mut_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>ab6e228dcfaed2ae182ec29b535699793</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; MultiVectorMutable &gt;</type>
      <name>multi_vec_mut_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a07e69cd27b3357a7e8fea8119def9f68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::VectorSubView</name>
    <filename>classAbstractLinAlgPack_1_1VectorSubView.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::Vector</base>
    <base protection="protected" virtualness="virtual">AbstractLinAlgPack::VectorApplyOpSerialBase</base>
    <member kind="function">
      <type></type>
      <name>VectorSubView</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>ac75af01026e7f4b194318b14b798b3c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSubView</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>ad682e1caf34560ceac0120ac8daa2ca3</anchor>
      <arglist>(const vec_ptr_t &amp;full_vec, const Range1D &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>ad9832bebc2dfe350015db3db5f801f46</anchor>
      <arglist>(const vec_ptr_t &amp;full_vec, const Range1D &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_uninitialized</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>aafba7bf0d5070c6912ceab96328ddf30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const vec_ptr_t &amp;</type>
      <name>full_vec</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>a425b263c594ecb0f089f4029701e3eac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpaceSubSpace &amp;</type>
      <name>space_impl</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>a274579595de74caaaa21ad7d800c7f8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a13327c9f41c859edb60d8b440695d319</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>ab1fb6eca76137538ab8e3d50da8ee825</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vec_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a4b1454905dbdb543012a9a1c85d580b1</anchor>
      <arglist>(const index_type &amp;l, const index_type &amp;u) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>has_changed</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a06e01e3de2bccc505ed09e8b4cb133f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual index_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a0947234961448a00c535d6c2d45a0445</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a1318f9d56b5306d85a68659ae633e386</anchor>
      <arglist>(std::ostream &amp;out, bool print_dim=true, bool newline=true, index_type global_offset=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vec_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a2c0572b91a55d1be817bf8fc461a4488</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>norm_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>ad2e503f3ac90deaf9db3cf6057113642</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>norm_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a938d97e5470f36c4d336bb76fb9a8886</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>norm_inf</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>ac0d9ac6ad8cce21d2d980ffcf365d143</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>inner_product</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a6de7b062a83a6cad28e0c9a9d85129e6</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>a5136aadba697f6af65bc592540e9b9bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>dim</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>a86e61a4115c4fdfa7c17249e5173a24b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>a8ed063d4c2de117c7a10edebc97baae2</anchor>
      <arglist>(const RTOpPack::RTOp &amp;op, const size_t num_vecs, const Vector *vecs[], const size_t num_targ_vecs, VectorMutable *targ_vecs[], RTOpPack::ReductTarget *reduct_obj, const index_type first_ele, const index_type sub_dim, const index_type global_offset) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>get_ele</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>a4837feb40c7b1d924f769309729deb47</anchor>
      <arglist>(index_type i) const </arglist>
    </member>
    <member kind="function">
      <type>vec_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>a73bc4d3aea73a6dad05f888276aa06a1</anchor>
      <arglist>(const Range1D &amp;rng) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>a7814972da0118c1f9fc013459ac06c3d</anchor>
      <arglist>(const Range1D &amp;rng, RTOpPack::SubVector *sub_vec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSubView.html</anchorfile>
      <anchor>ab1b68ad66125dfe6165e964a1e9f00be</anchor>
      <arglist>(RTOpPack::SubVector *sub_vec) const </arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Vector &gt;</type>
      <name>vec_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>acc877a06c751cb8a2c45b70749449c74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; VectorMutable &gt;</type>
      <name>vec_mut_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a79b1a172981f4e8470db55f8882cb778</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize_apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a94180c72097167271d0110440433d52d</anchor>
      <arglist>(const size_t num_targ_vecs, VectorMutable **targ_vecs) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorApplyOpSerialBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorApplyOpSerialBase.html</anchorfile>
      <anchor>ad969765c2af18e0d0a22cef58a171ed3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_op_serial</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorApplyOpSerialBase.html</anchorfile>
      <anchor>a80fe796040ce31b724c9960b6ec4c042</anchor>
      <arglist>(const RTOpPack::RTOp &amp;op, const size_t num_vecs, const Vector *vecs[], const size_t num_targ_vecs, VectorMutable *targ_vecs[], RTOpPack::ReductTarget *reduct_obj, const index_type first_ele, const index_type sub_dim, const index_type global_offset) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::NaNInfException</name>
    <filename>classAbstractLinAlgPack_1_1NaNInfException.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::BasisSystemComposite</name>
    <filename>classAbstractLinAlgPack_1_1BasisSystemComposite.html</filename>
    <base>AbstractLinAlgPack::BasisSystem</base>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; MatrixOp &gt; &gt;</type>
      <name>fcty_Gc_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>a30ad33f48ba4c1196f8d7cdffaefcd20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; MatrixOpNonsing &gt;</type>
      <name>C_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>a3a136386ee195fa1e0b1885a836a71a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; MatrixOp &gt;</type>
      <name>N_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>afbb6590e8ab5f10b9fe14806663cb2b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize_space_x</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>afdc1e35e271c74d1e386da85fa3dd542</anchor>
      <arglist>(const VectorSpace::space_ptr_t &amp;space_xD, const VectorSpace::space_ptr_t &amp;space_xI, Range1D *var_dep, Range1D *var_indep, VectorSpace::space_ptr_t *space_x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const fcty_Gc_ptr_t</type>
      <name>factory_Gc</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>a4819e05976ca2939be6494643030cc4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize_Gc</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>a2fccbe48e328ddecb2a602bf2e502b94</anchor>
      <arglist>(const VectorSpace::space_ptr_t &amp;space_x, const Range1D &amp;var_dep, const Range1D &amp;var_indep, const VectorSpace::space_ptr_t &amp;space_c, const C_ptr_t &amp;C, const N_ptr_t &amp;N, MatrixOp *Gc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>get_C_N</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>a7c3bc027b00152d5fb823591f0d33fc6</anchor>
      <arglist>(MatrixOp *Gc, MatrixOpNonsing **C, MatrixOp **N)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>get_C_N</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>a07d95675eb12ed2a0e2f6eb28e778a6a</anchor>
      <arglist>(const MatrixOp &amp;Gc, const MatrixOpNonsing **C, const MatrixOp **N)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisSystemComposite</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>a531f4e81c83f704f320d75e5b46e05b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisSystemComposite</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>a1910b81823aea8f7c8f2ed59aef09c15</anchor>
      <arglist>(const VectorSpace::space_ptr_t &amp;space_x, const VectorSpace::space_ptr_t &amp;space_c, const mat_nonsing_fcty_ptr_t &amp;factory_C, const mat_sym_fcty_ptr_t &amp;factory_transDtD, const mat_sym_nonsing_fcty_ptr_t &amp;factory_S)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisSystemComposite</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>aacf7bceb5479705a3585a5c0107643fb</anchor>
      <arglist>(const VectorSpace::space_ptr_t &amp;space_x, const Range1D &amp;var_dep, const Range1D &amp;var_indep, const VectorSpace::space_ptr_t &amp;space_c, const mat_nonsing_fcty_ptr_t &amp;factory_C, const mat_sym_fcty_ptr_t &amp;factory_transDtD, const mat_sym_nonsing_fcty_ptr_t &amp;factory_S, const mat_fcty_ptr_t &amp;factory_D=Teuchos::null)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>ae0e9a15f040951ee7c05f8dc9f9688f5</anchor>
      <arglist>(const VectorSpace::space_ptr_t &amp;space_x, const Range1D &amp;var_dep, const Range1D &amp;var_indep, const VectorSpace::space_ptr_t &amp;space_c, const mat_nonsing_fcty_ptr_t &amp;factory_C, const mat_sym_fcty_ptr_t &amp;factory_transDtD, const mat_sym_nonsing_fcty_ptr_t &amp;factory_S, const mat_fcty_ptr_t &amp;factory_D=Teuchos::null)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_uninitialized</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>ace245f81b6b3d42c027f5f8738732984</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace::space_ptr_t &amp;</type>
      <name>space_x</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>ac673c9a352b2b67252f9830504237c40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace::space_ptr_t &amp;</type>
      <name>space_c</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>a8be5be084b7d9bd0dfcad749f64b076c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update_D</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>ae3496f1f1356fe6f80d0f141302d2b89</anchor>
      <arglist>(const MatrixOpNonsing &amp;C, const MatrixOp &amp;N, MatrixOp *D, EMatRelations mat_rel) const </arglist>
    </member>
    <member kind="function">
      <type>const mat_nonsing_fcty_ptr_t</type>
      <name>factory_C</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>a85e12aec87d2953613cadad8cbcaa915</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const mat_fcty_ptr_t</type>
      <name>factory_D</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>a4af6a123dc13e953b4bbe3c67450f487</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Range1D</type>
      <name>var_dep</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>af3be8402aa1e361d5bb5312f3a9e8e31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Range1D</type>
      <name>var_indep</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>a72b72bb6eb01fb157d3bcd7d8f6ef8b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_basis</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemComposite.html</anchorfile>
      <anchor>a456e4b654cfc8bb647d68aca1996a0bc</anchor>
      <arglist>(const MatrixOp &amp;Gc, MatrixOpNonsing *C, MatrixOp *D, MatrixOp *GcUP, EMatRelations mat_rel, std::ostream *out) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatRelations</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a877d83f50fda50b5344ffded411a2170</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; MatrixOpNonsing &gt; &gt;</type>
      <name>mat_nonsing_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a504d22f75c04baa66a6f25aa72fdd5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; MatrixOp &gt; &gt;</type>
      <name>mat_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a9088f86e0113e99dce6511b857b93bf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; MatrixSymOp &gt; &gt;</type>
      <name>mat_sym_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>aa73bb8908c23289dc3d40e95ce46f294</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; MatrixSymOpNonsing &gt; &gt;</type>
      <name>mat_sym_nonsing_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a2667cbaa04b20cb2f3c58f5d3bfacfb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisSystem</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a54c43a208cd8103f330de8d3bf618b37</anchor>
      <arglist>(const mat_sym_fcty_ptr_t &amp;factory_transDtD, const mat_sym_nonsing_fcty_ptr_t &amp;factory_S)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a7d8ecccfd6943b7caf412612562e1c3f</anchor>
      <arglist>(const mat_sym_fcty_ptr_t &amp;factory_transDtD, const mat_sym_nonsing_fcty_ptr_t &amp;factory_S)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasisSystem</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>ae3b1b84a4f73fbb5878f0a62a2201045</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const mat_fcty_ptr_t</type>
      <name>factory_GcUP</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>aa1a70173ee30ea5468994c20f19b0cd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const mat_sym_fcty_ptr_t</type>
      <name>factory_transDtD</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a70b3fa6d551b1cb9d2683a65a3294bfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const mat_sym_nonsing_fcty_ptr_t</type>
      <name>factory_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a62346ea3df2a47d9eeadce15f0aff351</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Range1D</type>
      <name>equ_decomp</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>ad2c6b43c9830622ef1751bb624b13494</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Range1D</type>
      <name>equ_undecomp</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a24620621dd9cf5a70154bb93df0835e7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::BasisSystemTester</name>
    <filename>classAbstractLinAlgPack_1_1BasisSystemTester.html</filename>
    <member kind="enumeration">
      <name>EPrintTestLevel</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemTester.html</anchorfile>
      <anchor>a9d53b4e7b2c2236ef37e55ca3d6cb678</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRINT_NOT_SELECTED</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemTester.html</anchorfile>
      <anchor>a9d53b4e7b2c2236ef37e55ca3d6cb678aa98a2bb7ec1e81ad0af585ee248198b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRINT_NONE</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemTester.html</anchorfile>
      <anchor>a9d53b4e7b2c2236ef37e55ca3d6cb678aba3198faae63d236937d6d57ac34941f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRINT_BASIC</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemTester.html</anchorfile>
      <anchor>a9d53b4e7b2c2236ef37e55ca3d6cb678adcd7a9c84803f67def8edd87e6fab941</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRINT_MORE</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemTester.html</anchorfile>
      <anchor>a9d53b4e7b2c2236ef37e55ca3d6cb678af9df268c1a0f7fb71b5b681f62c65ee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRINT_ALL</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemTester.html</anchorfile>
      <anchor>a9d53b4e7b2c2236ef37e55ca3d6cb678a67da827e67d113c1dcd8e3219ccc9f38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemTester.html</anchorfile>
      <anchor>ae56dd6acc061c981943ef64584b0e0ec</anchor>
      <arglist>(EPrintTestLevel, print_tests)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemTester.html</anchorfile>
      <anchor>aaed0eb42aecc0c9e548b5bec55972928</anchor>
      <arglist>(bool, dump_all)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemTester.html</anchorfile>
      <anchor>ab8ecb489eed91bbe423d199c28134ea1</anchor>
      <arglist>(bool, throw_exception)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemTester.html</anchorfile>
      <anchor>a8df42a2eafaf6f9d5bf1cddeadbe1fcc</anchor>
      <arglist>(size_type, num_random_tests)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemTester.html</anchorfile>
      <anchor>ae4ca7788a82551a161f42951efb2765c</anchor>
      <arglist>(value_type, warning_tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemTester.html</anchorfile>
      <anchor>a9273479a40ac84968f9a427ae1b8cde8</anchor>
      <arglist>(value_type, error_tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisSystemTester</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemTester.html</anchorfile>
      <anchor>a60f8cb46a72975e10d3713fd7b8611e5</anchor>
      <arglist>(EPrintTestLevel print_tests=PRINT_NOT_SELECTED, bool dump_all=false, bool throw_exception=true, size_type num_random_tests=1, value_type warning_tol=1e-14, value_type error_tol=1e-8)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test_basis_system</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemTester.html</anchorfile>
      <anchor>aa10e4d2d8a15d51c7aae151062979bda</anchor>
      <arglist>(const BasisSystem &amp;basis_sys, const MatrixOp *Gc, const MatrixOpNonsing *C, const MatrixOp *N, const MatrixOp *D, const MatrixOp *GcUP, std::ostream *out)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::BasisSystemTesterSetOptions</name>
    <filename>classAbstractLinAlgPack_1_1BasisSystemTesterSetOptions.html</filename>
    <base>OptionsFromStreamPack::SetOptionsFromStreamNode</base>
    <base>SetOptionsToTargetBase&lt; BasisSystemTester &gt;</base>
    <member kind="function">
      <type></type>
      <name>BasisSystemTesterSetOptions</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemTesterSetOptions.html</anchorfile>
      <anchor>a022675f0a235c4e14bc515062f39f421</anchor>
      <arglist>(BasisSystemTester *target=0, const char opt_grp_name[]=&quot;BasisSystemTester&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setOption</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemTesterSetOptions.html</anchorfile>
      <anchor>af9f594b8991bb05cc2c351fc3bf54476</anchor>
      <arglist>(int option_num, const std::string &amp;option_value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixComposite</name>
    <filename>classAbstractLinAlgPack_1_1MatrixComposite.html</filename>
    <base>AbstractLinAlgPack::MatrixOp</base>
    <class kind="struct">AbstractLinAlgPack::MatrixComposite::SubMatrixEntry</class>
    <class kind="struct">AbstractLinAlgPack::MatrixComposite::SubVectorEntry</class>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; MemMngPack::ReleaseResource &gt;</type>
      <name>release_resource_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>aedaf8e6e2b2de06f8ea63142bfb9bed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::deque&lt; SubVectorEntry &gt;</type>
      <name>vector_list_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a83bf8b7bd7bb5d20a36c388b36a8805d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::deque&lt; SubMatrixEntry &gt;</type>
      <name>matrix_list_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a727c75f14392e23f927dc52ccd1f74da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixComposite</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>ac3b98b4f27df93fb8a08257e61d2f0a5</anchor>
      <arglist>(size_type rows=0, size_type cols=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reinitialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a86ead8d8bbea01ad66f413a87ce2521b</anchor>
      <arglist>(size_type rows=0, size_type cols=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a48779ebbcb01f8ebcb90c529231ef35c</anchor>
      <arglist>(size_type row_offset, size_type col_offset, value_type beta, const GenPermMatrixSlice *G, const release_resource_ptr_t &amp;G_release, BLAS_Cpp::Transp G_trans, const Vector *v, const release_resource_ptr_t &amp;v_release, BLAS_Cpp::Transp v_trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>acb966cd6895064352836eae8813a4497</anchor>
      <arglist>(size_type row_offset, size_type col_offset, value_type beta, const Range1D &amp;rng_G, const Vector *v, const release_resource_ptr_t &amp;v_release, BLAS_Cpp::Transp v_trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a118c8696aa581b4fae27c3b9b111c11b</anchor>
      <arglist>(size_type row_offset, size_type col_offset, value_type beta, const Vector *v, const release_resource_ptr_t &amp;v_release, BLAS_Cpp::Transp v_trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a604c28b9249dd8761fe2d31651030dec</anchor>
      <arglist>(vector_list_t::iterator itr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_matrix</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a633cd74c51cf299f3e0e0c6ffb46ed34</anchor>
      <arglist>(size_type row_offset, size_type col_offset, value_type alpha, const GenPermMatrixSlice *P, const release_resource_ptr_t &amp;P_release, BLAS_Cpp::Transp P_trans, const MatrixOp *A, const release_resource_ptr_t &amp;A_release, BLAS_Cpp::Transp A_trans, const GenPermMatrixSlice *Q, const release_resource_ptr_t &amp;Q_release, BLAS_Cpp::Transp Q_trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_matrix</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a595b7dbbb36140c61911d6b17d189571</anchor>
      <arglist>(size_type row_offset, size_type col_offset, value_type alpha, const Range1D &amp;rng_P, const MatrixOp *A, const release_resource_ptr_t &amp;A_release, BLAS_Cpp::Transp A_trans, const Range1D &amp;rng_Q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_matrix</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a36d87105ffc6ad8e99b68154521082a6</anchor>
      <arglist>(size_type row_offset, size_type col_offset, value_type alpha, const Range1D &amp;rng_P, const MatrixOp *A, const release_resource_ptr_t &amp;A_release, BLAS_Cpp::Transp A_trans, const GenPermMatrixSlice *Q, const release_resource_ptr_t &amp;Q_release, BLAS_Cpp::Transp Q_trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_matrix</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a296515b76d3a506634049112ff67d50f</anchor>
      <arglist>(size_type row_offset, size_type col_offset, value_type alpha, const GenPermMatrixSlice *P, const release_resource_ptr_t &amp;P_release, BLAS_Cpp::Transp P_trans, const MatrixOp *A, const release_resource_ptr_t &amp;A_release, BLAS_Cpp::Transp A_trans, const Range1D &amp;rng_Q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_matrix</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>aea62c49126b853fbc09c4571440fad2a</anchor>
      <arglist>(size_type row_offset, size_type col_offset, value_type alpha, const MatrixOp *A, const release_resource_ptr_t &amp;A_release, BLAS_Cpp::Transp A_trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_matrix</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a059e43b8a9825d316a50738f9fec689a</anchor>
      <arglist>(size_type row_offset, size_type col_offset, value_type alpha, const GenPermMatrixSlice *P, const release_resource_ptr_t &amp;P_release, BLAS_Cpp::Transp P_trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_matrix</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a4d31b1ae02b3ece0737ebfbf59534988</anchor>
      <arglist>(matrix_list_t::iterator itr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish_construction</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a8e79d06c9ec73d9002e3ae57269ea939</anchor>
      <arglist>(const VectorSpace::space_ptr_t &amp;space_cols, const VectorSpace::space_ptr_t &amp;space_rows)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_vectors</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a05b8a91337d638d1bbbc0a2e726b2657</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector_list_t::iterator</type>
      <name>vectors_begin</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a54740cdf29c89c1578d3c68f1a2dc03d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector_list_t::iterator</type>
      <name>vectors_end</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a72447fe232d91a1ba304c6b6a1830935</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector_list_t::const_iterator</type>
      <name>vectors_begin</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a9f3fb7c406db1d1cc5b172aba2ae5d7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector_list_t::const_iterator</type>
      <name>vectors_end</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>ad1db6e211c8b21700fe00133e7524a4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_matrices</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>aac31043aa9d7ef6c53a763a0010389c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>matrix_list_t::iterator</type>
      <name>matrices_begin</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a0b39af095936a881d0f02a0cb89fa168</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>matrix_list_t::iterator</type>
      <name>matrices_end</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a273c3ba477b8e10202556be7f5ccae7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>matrix_list_t::const_iterator</type>
      <name>matrices_begin</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a9bec922cb864b7e08172929f63e3cb17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>matrix_list_t::const_iterator</type>
      <name>matrices_end</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a73d8e08b5f5e15b36e82113cbf5589dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a73b15e93e413d30a91eed31dcc91d20d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>aed3ded57b864ca0500364d3847ce5761</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a1d2e182ea4d922bf7350cccd85602cf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>ad0fe5799612ba0b410f992264ec0e2f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a91115197172807530eed140eb96a9223</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a8809f3f431048051bf8a0e76e39f2997</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a238c6bb038a8bd01cd8d1c5d3d60353f</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>ae323fa8aac3cd997ca5400ae9bea49d5</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>a1dff5dedec385e54bd3a2d42ccab6957</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixComposite.html</anchorfile>
      <anchor>aefdf340b8b9662f633edb95fbc265920</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a3cf977e1ea2de043e4034825fbfff367</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7a2d853f87929633a47238ee7244ac98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2cf16b847f1f5eb912fc57c33908338b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad6aefd4a5ccb750ff066b3c94b43dbe5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a900f5bb64eb5c135e7f3a958da51918a</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac15a5369a10c424a12f9e8bc03344cb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2e81f486da8a59d0af9e7bf8a8ab9a8b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a29a1ad79c69bf12d96cf7a540280182e</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>adaf68f480a35ab7c76a48b4a42d2c788</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6927e8f4dd1b50a3a615b8b14d8c92f3</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a267a73495821f95f1e9f1b09d196a5ea</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aac7173a6691e1778ca45d296a7c1ea17</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AbstractLinAlgPack::MatrixComposite::SubMatrixEntry</name>
    <filename>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubMatrixEntry.html</filename>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const GenPermMatrixSlice &gt;</type>
      <name>GPMS_ptr_t</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubMatrixEntry.html</anchorfile>
      <anchor>accbd9243f643d8aa4c983ff73588f4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubMatrixEntry</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubMatrixEntry.html</anchorfile>
      <anchor>ab9cb30f25c1b3dd929bbee8876718d89</anchor>
      <arglist>(size_type r_l, size_type r_u, size_type c_l, size_type c_u, value_type alpha, const Range1D &amp;rng_P, const GPMS_ptr_t &amp;P, const release_resource_ptr_t &amp;P_release, BLAS_Cpp::Transp P_trans, const MatrixOp *A, const release_resource_ptr_t &amp;A_release, BLAS_Cpp::Transp A_trans, const Range1D &amp;rng_Q, const GPMS_ptr_t &amp;Q, const release_resource_ptr_t &amp;Q_release, BLAS_Cpp::Transp Q_trans)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubMatrixEntry.html</anchorfile>
      <anchor>abc89fa98d3509ee37d870d5d05d98d60</anchor>
      <arglist>(const SubMatrixEntry m)</arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>r_l_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubMatrixEntry.html</anchorfile>
      <anchor>ab20586c18d9dada6dd39399b389256d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>alpha_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubMatrixEntry.html</anchorfile>
      <anchor>a5413e72076ce26fe33733fa73c898b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Range1D</type>
      <name>rng_P_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubMatrixEntry.html</anchorfile>
      <anchor>ad9fbb2f875c12a608467ccf8cadf52fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GPMS_ptr_t</type>
      <name>P_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubMatrixEntry.html</anchorfile>
      <anchor>a772df39a747d707dad219a16afc6b369</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>release_resource_ptr_t</type>
      <name>P_release_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubMatrixEntry.html</anchorfile>
      <anchor>a53c6eee8baedae6f8ccf3d16ae196858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BLAS_Cpp::Transp</type>
      <name>P_trans_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubMatrixEntry.html</anchorfile>
      <anchor>a5c26503cef80931fcee6df6412dcfb00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MatrixOp *</type>
      <name>A_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubMatrixEntry.html</anchorfile>
      <anchor>a47efe850895d746a31261fbbdd1abd40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>release_resource_ptr_t</type>
      <name>A_release_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubMatrixEntry.html</anchorfile>
      <anchor>af77fec3d5db59a6c74f1b9c2d184e8b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BLAS_Cpp::Transp</type>
      <name>A_trans_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubMatrixEntry.html</anchorfile>
      <anchor>a3a6dcda0ec1922bb269e66b8513c3b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Range1D</type>
      <name>rng_Q_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubMatrixEntry.html</anchorfile>
      <anchor>aef62dcd90ef2a4cb94721b9d5688f480</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GPMS_ptr_t</type>
      <name>Q_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubMatrixEntry.html</anchorfile>
      <anchor>ab524ddb524bf8a586bae6faac5f3b744</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>release_resource_ptr_t</type>
      <name>Q_release_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubMatrixEntry.html</anchorfile>
      <anchor>aff9887b583f8d5c31ec912a1b1fd66d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BLAS_Cpp::Transp</type>
      <name>Q_trans_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubMatrixEntry.html</anchorfile>
      <anchor>aea9441fb301270496cd70f65c52813d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AbstractLinAlgPack::MatrixComposite::SubVectorEntry</name>
    <filename>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubVectorEntry.html</filename>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const GenPermMatrixSlice &gt;</type>
      <name>GPMS_ptr_t</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubVectorEntry.html</anchorfile>
      <anchor>a6bd37efc354506265af8304935c294ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubVectorEntry</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubVectorEntry.html</anchorfile>
      <anchor>abf2938346fc270a0fb6861f9e92fbd2c</anchor>
      <arglist>(size_type r_l, size_type c_l, value_type beta, const Range1D &amp;rng_G, const GPMS_ptr_t &amp;G, const release_resource_ptr_t &amp;G_release, BLAS_Cpp::Transp G_trans, const Vector *v, const release_resource_ptr_t &amp;v_release, BLAS_Cpp::Transp v_trans)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubVectorEntry.html</anchorfile>
      <anchor>a2e22ec91f22664102b65649420f72837</anchor>
      <arglist>(const SubVectorEntry v)</arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>r_l_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubVectorEntry.html</anchorfile>
      <anchor>aca4aff74ab27f67aaf8c3b4594a8d510</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>c_l_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubVectorEntry.html</anchorfile>
      <anchor>ac2040b97a34bc973b8af0ab500bf9d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>beta_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubVectorEntry.html</anchorfile>
      <anchor>a06d2b48105cb03c416dad77b7651ee96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Range1D</type>
      <name>rng_G_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubVectorEntry.html</anchorfile>
      <anchor>aa225571b69989536ae4350a169a6147b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GPMS_ptr_t</type>
      <name>G_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubVectorEntry.html</anchorfile>
      <anchor>a9a0a15d0bb463aa11c5f942123c0580f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>release_resource_ptr_t</type>
      <name>G_release_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubVectorEntry.html</anchorfile>
      <anchor>aefd338c67bea1f872eb5392ed57b6096</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BLAS_Cpp::Transp</type>
      <name>G_trans_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubVectorEntry.html</anchorfile>
      <anchor>a1a4c99a069b986100ca75bd225c2b3b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vector *</type>
      <name>v_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubVectorEntry.html</anchorfile>
      <anchor>a821e7a060141bb260a2c60e676640d33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>release_resource_ptr_t</type>
      <name>v_release_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubVectorEntry.html</anchorfile>
      <anchor>a802e31b9cccf27041f87a65473c525c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BLAS_Cpp::Transp</type>
      <name>v_trans_</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixComposite_1_1SubVectorEntry.html</anchorfile>
      <anchor>a529db4cdbfe8cef4c52262447393fac4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixOpNonsingTester</name>
    <filename>classAbstractLinAlgPack_1_1MatrixOpNonsingTester.html</filename>
    <member kind="enumeration">
      <name>ETestLevel</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingTester.html</anchorfile>
      <anchor>a80191eb032296fb3cc2a9f49817b27a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TEST_LEVEL_2_BLAS</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingTester.html</anchorfile>
      <anchor>a80191eb032296fb3cc2a9f49817b27a3a590f09d151a186ac7fc1a9c4576c1e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TEST_LEVEL_3_BLAS</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingTester.html</anchorfile>
      <anchor>a80191eb032296fb3cc2a9f49817b27a3a5c76a47dccc2a2b24d4f7707073ce35a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EPrintTestLevel</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingTester.html</anchorfile>
      <anchor>a9804f2ef7b61b2d8b260990fef13e92e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRINT_NONE</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingTester.html</anchorfile>
      <anchor>a9804f2ef7b61b2d8b260990fef13e92ea87c1b3d999d24c29e2c01f591ff50c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRINT_BASIC</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingTester.html</anchorfile>
      <anchor>a9804f2ef7b61b2d8b260990fef13e92ea6a655a831536bd5a423ede8453aec537</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRINT_MORE</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingTester.html</anchorfile>
      <anchor>a9804f2ef7b61b2d8b260990fef13e92ea90b5dc3c7e052596055a825c61d57461</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRINT_ALL</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingTester.html</anchorfile>
      <anchor>a9804f2ef7b61b2d8b260990fef13e92ea0930d1729ef7f02db81286c0cbd54c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingTester.html</anchorfile>
      <anchor>a905adfe4139b383e4642300812a5c8eb</anchor>
      <arglist>(ETestLevel, test_level)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingTester.html</anchorfile>
      <anchor>aef8cbf1b847637d7c0985f6773af76e7</anchor>
      <arglist>(EPrintTestLevel, print_tests)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingTester.html</anchorfile>
      <anchor>a908601a4d2e6c30b467306349af5b40c</anchor>
      <arglist>(bool, dump_all)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingTester.html</anchorfile>
      <anchor>a5120a7a316bf49311aef2589d635824f</anchor>
      <arglist>(bool, throw_exception)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingTester.html</anchorfile>
      <anchor>a3014fd51dd941b46f19dcaaa01e295fd</anchor>
      <arglist>(size_type, num_random_tests)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingTester.html</anchorfile>
      <anchor>ab6564b0b6d722d619498c46195d9aded</anchor>
      <arglist>(value_type, warning_tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingTester.html</anchorfile>
      <anchor>aad62e5e3efd638123f95091cb787f6e0</anchor>
      <arglist>(value_type, error_tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixOpNonsingTester</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingTester.html</anchorfile>
      <anchor>afe2509f046d45dffbf78cf694685348b</anchor>
      <arglist>(ETestLevel test_level=TEST_LEVEL_2_BLAS, EPrintTestLevel print_tests=PRINT_NONE, bool dump_all=false, bool throw_exception=true, size_type num_random_tests=1, value_type warning_tol=1e-14, value_type error_tol=1e-8)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test_matrix</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsingTester.html</anchorfile>
      <anchor>aa7a8441c17ed73f4b1cb18f6a5835a17</anchor>
      <arglist>(const MatrixOpNonsing &amp;M, const char M_name[], std::ostream *out)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymDiagStd</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixSymInitDiag</base>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixSymDiag</base>
    <class kind="class">AbstractLinAlgPack::MatrixSymDiagStd::PostMod</class>
    <member kind="function">
      <type></type>
      <name>MatrixSymDiagStd</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</anchorfile>
      <anchor>a9c748bfe601ab2f0fd18a1ea377a851b</anchor>
      <arglist>(const VectorSpace::vec_mut_ptr_t &amp;diag=Teuchos::null, bool unique=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</anchorfile>
      <anchor>a69a1e81544e1118afb455645dd19d021</anchor>
      <arglist>(const VectorSpace::vec_mut_ptr_t &amp;diag, bool unique=true)</arglist>
    </member>
    <member kind="function">
      <type>VectorMutable &amp;</type>
      <name>diag</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</anchorfile>
      <anchor>a47b85ccfe41dbd215c6f03b40e8a45a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace::vec_mut_ptr_t &amp;</type>
      <name>diag_ptr</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</anchorfile>
      <anchor>a3ec8879f79b77ea39977fbfef1cc21fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</anchorfile>
      <anchor>a6a7bdc7a8487155443be3eed0e0dfec2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</anchorfile>
      <anchor>a15e8ff469668a340724544b981870367</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</anchorfile>
      <anchor>a2d76dd3c6e91b6b3f8eb70c05762f5e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</anchorfile>
      <anchor>aec8d440fdb1e7a24d6b55e813b594989</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</anchorfile>
      <anchor>a91ed296d36dbff3e2a649426e23a5ee3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</anchorfile>
      <anchor>a70da1df55b3260e3977c52f736a5d1ff</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</anchorfile>
      <anchor>afc89219628398397eecb4a9e22bbffc2</anchor>
      <arglist>(MatrixOp *g_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</anchorfile>
      <anchor>ad9077d403dadc0163f9b9efb915dd292</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</anchorfile>
      <anchor>a24418d69e41c94a32ed930f65c988f4b</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</anchorfile>
      <anchor>a03f62804758257f051131a91bc946fca</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</anchorfile>
      <anchor>ac6676206a7f3cce4af4be91e08034ae8</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</anchorfile>
      <anchor>a2348926d71c0558a14d82a94a1321be3</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_identity</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</anchorfile>
      <anchor>a6777ab5ec3c5791fe4dd4c7e297a6bb6</anchor>
      <arglist>(const VectorSpace &amp;space_diag, value_type alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_diagonal</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</anchorfile>
      <anchor>a136153cb1d6c825aab92f6d8df2cee68</anchor>
      <arglist>(const Vector &amp;diag)</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>diag</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagStd.html</anchorfile>
      <anchor>a4f101a2c971dd39c217f3fa348a6cfc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatRhsPlaceHolder</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a9b0d347deb8c731c157edcd256859842</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatrixDummyArg</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>aa0a0c3370967939ec36d1c801963f8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixSymInitDiag</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymInitDiag.html</anchorfile>
      <anchor>ac8dfbe3c4fd57587f606beb088cad996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixSymOpNonsing &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a97f3607578d9bfe8c8eff4047c9a221b</anchor>
      <arglist>(const MatrixSymOpNonsing &amp;M)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswons_mut_ptr_t</type>
      <name>clone_mswons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>adcb3e0d4fa8c403e53a9925e03f13d75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswons_ptr_t</type>
      <name>clone_mswons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>af8f7fb940ae76640fffcb2369d348215</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a7fe90dc22686526cbf6cf5baa4b093c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a2303a6ae091e764cb2620d0b68f9ff5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mns_mut_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>ab709e063616b2e88c7d2b6fa8f9200cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_mns_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>adce49fff5e167b7847c48162c439adc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mswo_mut_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a24e442575ef17ff26b0a98bc77a517e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_mswo_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>af2efe8854d7c9fce7aa6bfa4979b9415</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_msns_mut_ptr_t</type>
      <name>clone_msns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a9cc6e0e93fa53e81a0676141ead482ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_msns_ptr_t</type>
      <name>clone_msns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a2320ebc062b2ad34133b08d1f11747ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mwons_mut_ptr_t</type>
      <name>clone_mwons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a735f1cbda7da061664292ce97449071d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_mwons_ptr_t</type>
      <name>clone_mwons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>ae7000ebe87bae5a8242771f00f9b043f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a8d16dbc3d6cea0f84c47c6139e8339ee</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const GenPermMatrixSlice &amp;gpms_rhs, BLAS_Cpp::Transp gpms_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a0d49cf30e99144b4404222bec3c1bc6e</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp mwo_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac15a5369a10c424a12f9e8bc03344cb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2e81f486da8a59d0af9e7bf8a8ab9a8b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a29a1ad79c69bf12d96cf7a540280182e</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa684a28bfb9dd8e15c3af04cfcab7979</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>adaf68f480a35ab7c76a48b4a42d2c788</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6927e8f4dd1b50a3a615b8b14d8c92f3</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a267a73495821f95f1e9f1b09d196a5ea</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>a8503ff5c48659fa0c74d11c43aabdd3e</anchor>
      <arglist>(MatrixSymOp *symwo_lhs, value_type alpha, const MatrixOp &amp;mwo, BLAS_Cpp::Transp mwo_trans, EMatrixDummyArg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymDiagStd::PostMod</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymDiagStd_1_1PostMod.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymIdent</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymIdent.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixSymOpNonsing</base>
    <member kind="function">
      <type></type>
      <name>MatrixSymIdent</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymIdent.html</anchorfile>
      <anchor>ab739bd318cc03812cce22f87bceb4adf</anchor>
      <arglist>(const VectorSpace::space_ptr_t &amp;vec_space=Teuchos::null, const value_type scale=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymIdent.html</anchorfile>
      <anchor>a7cc26f759c6cc30a376c61eddcd5139c</anchor>
      <arglist>(const VectorSpace::space_ptr_t &amp;vec_space, const value_type scale=1.0)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>scale</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymIdent.html</anchorfile>
      <anchor>a73dcaa6ac8aa3d9cf31d417869a999f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymIdent.html</anchorfile>
      <anchor>a0f3117ffd27816877164cd038eda34d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymIdent.html</anchorfile>
      <anchor>ae53c898cb0ab233b91ca27a6cdad30db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymIdent.html</anchorfile>
      <anchor>aba2b231c8bf63579184693cf24023d6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymIdent.html</anchorfile>
      <anchor>a0a2f43815bbe9b1f53c1b8eedbbc1879</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymIdent.html</anchorfile>
      <anchor>a1435bf500a4e21c745628ea294affd2e</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymIdent.html</anchorfile>
      <anchor>a3c2190924428428fb183310e9c25a534</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatRhsPlaceHolder</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a9b0d347deb8c731c157edcd256859842</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatrixDummyArg</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>aa0a0c3370967939ec36d1c801963f8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MatrixSymOpNonsing &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a97f3607578d9bfe8c8eff4047c9a221b</anchor>
      <arglist>(const MatrixSymOpNonsing &amp;M)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswons_mut_ptr_t</type>
      <name>clone_mswons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>adcb3e0d4fa8c403e53a9925e03f13d75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswons_ptr_t</type>
      <name>clone_mswons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>af8f7fb940ae76640fffcb2369d348215</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a7fe90dc22686526cbf6cf5baa4b093c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a2303a6ae091e764cb2620d0b68f9ff5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mns_mut_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>ab709e063616b2e88c7d2b6fa8f9200cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_mns_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>adce49fff5e167b7847c48162c439adc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mswo_mut_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a24e442575ef17ff26b0a98bc77a517e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_mswo_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>af2efe8854d7c9fce7aa6bfa4979b9415</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_msns_mut_ptr_t</type>
      <name>clone_msns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a9cc6e0e93fa53e81a0676141ead482ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_msns_ptr_t</type>
      <name>clone_msns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a2320ebc062b2ad34133b08d1f11747ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mwons_mut_ptr_t</type>
      <name>clone_mwons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a735f1cbda7da061664292ce97449071d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_mwons_ptr_t</type>
      <name>clone_mwons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>ae7000ebe87bae5a8242771f00f9b043f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a8d16dbc3d6cea0f84c47c6139e8339ee</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const GenPermMatrixSlice &amp;gpms_rhs, BLAS_Cpp::Transp gpms_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a0d49cf30e99144b4404222bec3c1bc6e</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp mwo_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a900f5bb64eb5c135e7f3a958da51918a</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac15a5369a10c424a12f9e8bc03344cb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2e81f486da8a59d0af9e7bf8a8ab9a8b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a29a1ad79c69bf12d96cf7a540280182e</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa684a28bfb9dd8e15c3af04cfcab7979</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>adaf68f480a35ab7c76a48b4a42d2c788</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6927e8f4dd1b50a3a615b8b14d8c92f3</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a267a73495821f95f1e9f1b09d196a5ea</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aac7173a6691e1778ca45d296a7c1ea17</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>a8503ff5c48659fa0c74d11c43aabdd3e</anchor>
      <arglist>(MatrixSymOp *symwo_lhs, value_type alpha, const MatrixOp &amp;mwo, BLAS_Cpp::Transp mwo_trans, EMatrixDummyArg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixZero</name>
    <filename>classAbstractLinAlgPack_1_1MatrixZero.html</filename>
    <base>AbstractLinAlgPack::MatrixOp</base>
    <member kind="function">
      <type></type>
      <name>MatrixZero</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>aac3743f010ab476c5aad1e2c6cd11c2a</anchor>
      <arglist>(const VectorSpace::space_ptr_t &amp;space_cols=Teuchos::null, const VectorSpace::space_ptr_t &amp;space_rows=Teuchos::null)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>a6d324225e57f630bbeab85f02fc928a8</anchor>
      <arglist>(const VectorSpace::space_ptr_t &amp;space_cols, const VectorSpace::space_ptr_t &amp;space_rows)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>a854021ad66e0d2534a94d88036ad9dbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>a55f85059b4b3b390a3e0065f0e3af5ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>a401f29d774e1acaa06d3d9f502393fc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>a1d96d6b4af6602bde9c422715bc9db0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>a408873b7d1f0e45bb92f992808c59034</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>ac961c4843c05fb7397098794c87d5203</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>a057538f738a92b156b75d332b6c2dda6</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function">
      <type>MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>ab0ed0a4c4a0e847a9a802f8053579fe8</anchor>
      <arglist>(const MatrixOp &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>ad8cca1bbb788e263d663ec8b1b9f4823</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>a3d3e863a4eab5c853bd4895324a8bfb0</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>af434a8738e08ce7c94d9a965e7093d6f</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>a334d6d6cc63bc6c56eca7db558d2999c</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>a6a18c9157d1ed2fadd68c05262e76e4f</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>a02794d9a7c638eae2b018d044bd41760</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>aaff9b416e5c7a526b845d85657c253f0</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>aecc856d6ff715e60d92e31efdd853586</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>a21dff249d0b0ec24803b72adcab2d94c</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>aaebed7ba1b4f0f7e6908f5efd389da10</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>aec96419688139973d9ba666a558becfa</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>ae8767b7bd41aaa8a2512f323437e236b</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>aafc90ad50896f7a19fc151511704cdb2</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>ac0e764875f42d498160cf25c542cebd6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixZero.html</anchorfile>
      <anchor>ab9a5afc62337ebe599e53b6ebc0a043a</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7a2d853f87929633a47238ee7244ac98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2cf16b847f1f5eb912fc57c33908338b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa8a9edd1f07308d03fc1ddb6abe5607e</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::VectorMutableBlocked</name>
    <filename>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::VectorMutable</base>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const VectorSpaceBlocked &gt;</type>
      <name>vec_space_comp_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>a761fcb70af532986d0c78b2b916af351</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorMutableBlocked</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>a5d7ab8e8589cb852101838e007adf381</anchor>
      <arglist>(VectorMutable::vec_mut_ptr_t *vecs, const vec_space_comp_ptr_t &amp;vec_space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>a58e5d0125e5b8f4cc1fdcf28b05e4748</anchor>
      <arglist>(VectorMutable::vec_mut_ptr_t *vecs, const vec_space_comp_ptr_t &amp;vec_space)</arglist>
    </member>
    <member kind="function">
      <type>const VectorSpaceBlocked &amp;</type>
      <name>block_space</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>a8317bb93e1cb637135bc5cdf469a42f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>get_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>a898195927a6f04985c6e6ea0d2c6bf13</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>VectorMutable &amp;</type>
      <name>get_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>ae39f3cdb075e4a34cf93d485109de5f1</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorMutable &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a3e59462e4e97d477ad5161d0f6cda944</anchor>
      <arglist>(const VectorMutable &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>vec_mut_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>acc94538acbce8f8f323a80bd7ebe908b</anchor>
      <arglist>(const index_type &amp;l, const index_type &amp;u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a0cc2260e6976f1cefbad57928d2f0d3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>get_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a052deb92b7a0ed03c0d6b55a12977e12</anchor>
      <arglist>(const Range1D &amp;rng, RTOpPack::MutableSubVector *sub_vec)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>commit_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a08b3df447824fd4cb636aea98fb0e11b</anchor>
      <arglist>(RTOpPack::MutableSubVector *sub_vec)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a58d606bcfed7495844612c2e27433285</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P, BLAS_Cpp::Transp P_trans, const Vector &amp;x, value_type beta)</arglist>
    </member>
    <member kind="function">
      <type>vec_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a488a56bc2635b310012a04a851c1460e</anchor>
      <arglist>(const Range1D &amp;rng) const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>dim</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>a81fefb30c1ab67a97716c3ce85a1028a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>a831f8dffbd269694aacfb83887d5cf24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>aa499b0bbaaac5bf8ec10e1d25a05357a</anchor>
      <arglist>(const RTOpPack::RTOp &amp;op, const size_t num_vecs, const Vector *vecs[], const size_t num_targ_vecs, VectorMutable *targ_vecs[], RTOpPack::ReductTarget *reduct_obj, const index_type first_ele, const index_type sub_dim, const index_type global_offset) const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>ae6b03378f66a8d5cba1eca6eb843ba37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>a4426b54ef694f5e63f2b178565b52328</anchor>
      <arglist>(std::ostream &amp;out, bool print_dim, bool newline, index_type global_offset) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>get_ele</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>a1628ced446363cb66926c4be61cc37f6</anchor>
      <arglist>(index_type i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>norm_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>a2977234078e295b2bb7f6cab377bbe08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>norm_inf</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>aa95d34d279786053de474bcbf0eb0b02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>inner_product</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>a0549ce3a025206a09cec63793f5c3f31</anchor>
      <arglist>(const Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>aea6a6a11e2f8df9194b88d0ae324b605</anchor>
      <arglist>(const Range1D &amp;rng, RTOpPack::SubVector *sub_vec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>a9fefca13aba2534c0c9693d4c7e68196</anchor>
      <arglist>(RTOpPack::SubVector *sub_vec) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>has_changed</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>a0faf45f7b0fd3faf4fb07c1aa872e4eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vec_mut_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>a3a484f6401687d572bf71a85bc332c38</anchor>
      <arglist>(const Range1D &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>a7d4d0280e2eec06dcd13cbec75bad560</anchor>
      <arglist>(value_type alpha, const Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>VectorMutable &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>a75455a6ed9595d1347fadd8b4bc9bee4</anchor>
      <arglist>(value_type)</arglist>
    </member>
    <member kind="function">
      <type>VectorMutable &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>a1831184e830bfead61502becd44539da</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ele</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>a86dafeae1cc201df0f00966936e7c466</anchor>
      <arglist>(index_type i, value_type val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableBlocked.html</anchorfile>
      <anchor>a94eeaf5b9383c41eade2768b2c6c39ba</anchor>
      <arglist>(const RTOpPack::SparseSubVector &amp;sub_vec)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize_apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a94180c72097167271d0110440433d52d</anchor>
      <arglist>(const size_t num_targ_vecs, VectorMutable **targ_vecs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::VectorSpaceBlocked</name>
    <filename>classAbstractLinAlgPack_1_1VectorSpaceBlocked.html</filename>
    <base>AbstractLinAlgPack::VectorSpace</base>
    <member kind="function">
      <type></type>
      <name>VectorSpaceBlocked</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceBlocked.html</anchorfile>
      <anchor>aaed6492ed67ae553909ca39b2983c47d</anchor>
      <arglist>(const VectorSpace::space_ptr_t vector_spaces[], int num_vector_spaces, const VectorSpace::space_fcty_ptr_t &amp;small_vec_spc_fcty=Teuchos::null)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceBlocked.html</anchorfile>
      <anchor>a130c6501bd92d04f52d3ff819767d46e</anchor>
      <arglist>(const VectorSpace::space_ptr_t vec_spaces[], int num_vector_spaces, const VectorSpace::space_fcty_ptr_t &amp;small_vec_spc_fcty=Teuchos::null)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_vector_spaces</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceBlocked.html</anchorfile>
      <anchor>a37a3206916ad520073edb0a02cdb5c15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace::space_ptr_t *</type>
      <name>vector_spaces</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceBlocked.html</anchorfile>
      <anchor>a8b0f4e2007a9435b0717ab3a44a3f735</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const index_type *</type>
      <name>vector_spaces_offsets</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceBlocked.html</anchorfile>
      <anchor>ab8af0020905a1a62e557d145541cdfde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_vector_space_position</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceBlocked.html</anchorfile>
      <anchor>aeff55a346881ccca0820d8337a94c09c</anchor>
      <arglist>(index_type i, int *kth_vector_space, index_type *kth_global_offset) const </arglist>
    </member>
    <member kind="function">
      <type>space_ptr_t</type>
      <name>sub_space</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a32235311021f90cb1f17a891c96e83a0</anchor>
      <arglist>(const index_type il, const index_type iu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual space_ptr_t</type>
      <name>space</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a35f8ff9cb7c8c7e1aca8b9c14612f6b0</anchor>
      <arglist>(const GenPermMatrixSlice &amp;P, BLAS_Cpp::Transp P_trans) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSpace</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>ab8b4e86f8802fd047712ff7978615ae3</anchor>
      <arglist>(const inner_prod_ptr_t &amp;inner_prod=Teuchos::null)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>inner_prod</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a90c92ae94465fbbb98e9d92b3bb1f9bd</anchor>
      <arglist>(const inner_prod_ptr_t &amp;inner_prod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const inner_prod_ptr_t</type>
      <name>inner_prod</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>accd7d3926bb7eb543d7d27a998501f48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_in_core</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a9aa64398932dd5fe277713ba20d4b143</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vec_mut_ptr_t</type>
      <name>create_member</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a6df56240586ce7c1a911780be51180ea</anchor>
      <arglist>(const value_type &amp;alpha) const </arglist>
    </member>
    <member kind="function">
      <type>obj_ptr_t</type>
      <name>create</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a37fb0f8f59062e0d826082bf57da1251</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_compatible</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceBlocked.html</anchorfile>
      <anchor>a5739f78b026b7a91c34dc7ea1533c24b</anchor>
      <arglist>(const VectorSpace &amp;vec_space) const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>dim</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceBlocked.html</anchorfile>
      <anchor>a0617c750fac489f2e3886e46fee487b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>space_fcty_ptr_t</type>
      <name>small_vec_spc_fcty</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceBlocked.html</anchorfile>
      <anchor>aa0199bf60cbeb66d0b6896732640acff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vec_mut_ptr_t</type>
      <name>create_member</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceBlocked.html</anchorfile>
      <anchor>a45c60abb8d33491a7e12cc2659f85f3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>multi_vec_mut_ptr_t</type>
      <name>create_members</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceBlocked.html</anchorfile>
      <anchor>adb7d672856d224b469474f846ef5c990</anchor>
      <arglist>(size_type num_vecs) const </arglist>
    </member>
    <member kind="function">
      <type>space_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceBlocked.html</anchorfile>
      <anchor>a9a748878332cd821e4d3c8591841dfe1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>space_ptr_t</type>
      <name>sub_space</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceBlocked.html</anchorfile>
      <anchor>acd68b9bd613668049dc5191426ce3946</anchor>
      <arglist>(const Range1D &amp;rng) const </arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const InnerProduct &gt;</type>
      <name>inner_prod_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>aec8e06a0f28bf05a5ac7700e3a9763ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const VectorSpace &gt;</type>
      <name>space_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>ad590dd5038d21aedfe76555f668094fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const VectorSpaceFactory &gt;</type>
      <name>space_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a644c585d8ac1ea7b36389cbc1920bdc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; VectorMutable &gt;</type>
      <name>vec_mut_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>ab6e228dcfaed2ae182ec29b535699793</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; MultiVectorMutable &gt;</type>
      <name>multi_vec_mut_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a07e69cd27b3357a7e8fea8119def9f68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::VectorSpaceTester</name>
    <filename>classAbstractLinAlgPack_1_1VectorSpaceTester.html</filename>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceTester.html</anchorfile>
      <anchor>a254e33a546b2170cd43c5ace1a74f7e8</anchor>
      <arglist>(bool, print_all_tests)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceTester.html</anchorfile>
      <anchor>ad32f1ba884bbffcf7c453923954fcf69</anchor>
      <arglist>(bool, print_vectors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceTester.html</anchorfile>
      <anchor>ac94d623264e5203ce44980a6cdb53b5d</anchor>
      <arglist>(bool, throw_exception)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceTester.html</anchorfile>
      <anchor>ab2abbe2da3ad4e473afa6354a5dda3a4</anchor>
      <arglist>(size_type, num_random_tests)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceTester.html</anchorfile>
      <anchor>a648b87836642ddcd9d90e57e5b73c602</anchor>
      <arglist>(value_type, warning_tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceTester.html</anchorfile>
      <anchor>a3e42df332f19d34bb4304bddbc75f181</anchor>
      <arglist>(value_type, error_tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSpaceTester</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceTester.html</anchorfile>
      <anchor>a176944e9cf307441ba670ad57b9ed1b2</anchor>
      <arglist>(bool print_all_tests=false, bool print_vectors=false, bool throw_exception=true, size_type num_random_tests=4, value_type warning_tol=1e-14, value_type error_tol=1e-10)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VectorSpaceTester</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceTester.html</anchorfile>
      <anchor>a8c42c7d46fece9dc39079ee69827c1fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>check_vector_space</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceTester.html</anchorfile>
      <anchor>a1960b508dd29c362cf5fe34b820754c0</anchor>
      <arglist>(const VectorSpace &amp;space, std::ostream *out) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::VectorSpaceTesterSetOptions</name>
    <filename>classAbstractLinAlgPack_1_1VectorSpaceTesterSetOptions.html</filename>
    <base>OptionsFromStreamPack::SetOptionsFromStreamNode</base>
    <base>SetOptionsToTargetBase&lt; VectorSpaceTester &gt;</base>
    <member kind="function">
      <type></type>
      <name>VectorSpaceTesterSetOptions</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceTesterSetOptions.html</anchorfile>
      <anchor>a6e969fd6481d704f3d9e508b08212457</anchor>
      <arglist>(VectorSpaceTester *target=0, const char opt_grp_name[]=&quot;VectorSpaceTester&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setOption</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceTesterSetOptions.html</anchorfile>
      <anchor>acd33129475c892908828e90337a94ee0</anchor>
      <arglist>(int option_num, const std::string &amp;option_value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::PreConditionException</name>
    <filename>classAbstractLinAlgPack_1_1PreConditionException.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::PostConditionException</name>
    <filename>classAbstractLinAlgPack_1_1PostConditionException.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::InputException</name>
    <filename>classAbstractLinAlgPack_1_1InputException.html</filename>
    <base>AbstractLinAlgPack::PreConditionException</base>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::SetupException</name>
    <filename>classAbstractLinAlgPack_1_1SetupException.html</filename>
    <base>AbstractLinAlgPack::PreConditionException</base>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::COOMatrix</name>
    <filename>classAbstractLinAlgPack_1_1COOMatrix.html</filename>
    <member kind="function">
      <type>COOMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrix.html</anchorfile>
      <anchor>a48d6a2d15187a505efa15d1ec56dc21f</anchor>
      <arglist>(const COOMatrix &amp;coom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrix.html</anchorfile>
      <anchor>a6daa75a0b19caf155732196dc07fc78f</anchor>
      <arglist>(size_type rows, size_type cols, size_type nz)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrix.html</anchorfile>
      <anchor>ac6718713641a9614ed9a5994a90b9e86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrix.html</anchorfile>
      <anchor>a70947c8c7bafd644ad3c59bfaf0cdcd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef">
      <type>AbstractLinAlgPack::size_type</type>
      <name>size_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrix.html</anchorfile>
      <anchor>adb1b28b4e9609c487b7e33defb3427e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractLinAlgPack::indice_type</type>
      <name>indice_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrix.html</anchorfile>
      <anchor>ac697a6b794e2eac6b5329a9667dccac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractLinAlgPack::value_type</type>
      <name>value_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrix.html</anchorfile>
      <anchor>a72e9f0e1175d2d6be3247389901bdcf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>COOMatrix</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrix.html</anchorfile>
      <anchor>a106c30a2d353b78879243e260a3a4429</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type *</type>
      <name>val</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrix.html</anchorfile>
      <anchor>a91c18c5e4a154357d6b4b0c5a49cbc28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>val</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrix.html</anchorfile>
      <anchor>a787654b6bec4aade517d1f073993b3d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>const_val</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrix.html</anchorfile>
      <anchor>a5750fe1e787777d938b9aba6824ae8df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>indice_type *</type>
      <name>ivect</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrix.html</anchorfile>
      <anchor>ab39f85c529caea520db4adabe7423e63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const indice_type *</type>
      <name>ivect</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrix.html</anchorfile>
      <anchor>a1a452aa008572393d7ca1070a6da1a3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const indice_type *</type>
      <name>const_ivect</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrix.html</anchorfile>
      <anchor>a099f1616684bfb517cd7149f59436b45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>indice_type *</type>
      <name>jvect</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrix.html</anchorfile>
      <anchor>a52c6a33e71ea7e09273d48967725b66b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const indice_type *</type>
      <name>jvect</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrix.html</anchorfile>
      <anchor>a8cc2583b2be027a05a5c108133d2c882</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const indice_type *</type>
      <name>const_jvect</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrix.html</anchorfile>
      <anchor>a3e1ce799ff7b0568286978fc7e446096</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrix.html</anchorfile>
      <anchor>aaf0dc1c0227c85145d90b20f57dc6c06</anchor>
      <arglist>(std::istream &amp;istrm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::COOMatrixPartitionedView</name>
    <filename>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</filename>
    <templarg>T_Indice</templarg>
    <templarg>T_Value</templarg>
    <class kind="class">AbstractLinAlgPack::COOMatrixPartitionedView::UninitializedException</class>
    <member kind="enumeration">
      <name>EPartitionOrder</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a589d3d4e368afb45a94a118f378b6a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>COOMatrixPartitionedViewUtilityPack::Partition&lt; T_Indice, T_Value &gt;</type>
      <name>partition_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a80618a41daf84e4844db90879ccb0f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>COOMatrixPartitionedViewUtilityPack::TransposedPartition&lt; T_Indice, T_Value &gt;</type>
      <name>transposed_partition_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a2d6ddd492b067f20032b37d65ff781a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_Indice</type>
      <name>indice_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a28b124f1935006eabb7129b2c83eb5c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractLinAlgPack::size_type</type>
      <name>size_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a3c3ebacfd7b185ef12f0b32de9481f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a4cb301404c0ff05a03126eb860ceafc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>COOMatrixPartitionedView</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a36d21e4f4f21fd3d6f8fd71ba1d578ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>COOMatrixPartitionedView</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>aad00c2618b36ea12fd6f8c510b4ed041</anchor>
      <arglist>(size_type rows, size_type cols, size_type nz, value_type val[], const indice_type ivect[], const indice_type jvect[], const size_type inv_row_perm[], const size_type inv_col_perm[], const size_type num_row_part, const size_type row_part[], const size_type num_col_part, const size_type col_part[], const EPartitionOrder partition_order)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a022a0fc36fa21ce96cce7392943f2d72</anchor>
      <arglist>(size_type rows, size_type cols, size_type nz, value_type val[], const indice_type ivect[], const indice_type jvect[], const size_type inv_row_perm[], const size_type inv_col_perm[], const size_type num_row_part, const size_type row_part[], const size_type num_col_part, const size_type col_part[], const EPartitionOrder partition_order)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a3a1b153e5f881d40691cbcb02fcd8cd9</anchor>
      <arglist>(const COOMatrixPartitionedView &amp;coom_view)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>aac2edccb20b04245e7418d85f39f8484</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_initialized</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a23d9b7d3c059879f794fed5df3ad08d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>ae1c8a772040722df195751982c66c766</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a24e3442c6c8d42bdb7ee79994a93f7e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a7d13e14945616dc9a3d8d5430f218448</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_row_part</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a96b02bcc4fceb36cb1e5d71008f94609</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_col_part</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a359938f848f14d6bfe73fccc08b5887f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_row_part</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>aeb324636f6b038b39f0b8478dcde3586</anchor>
      <arglist>(indice_type row_part[]) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_col_part</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a1c3f4da563fd9d5f74cd2e0127d4e6e2</anchor>
      <arglist>(indice_type col_part[]) const </arglist>
    </member>
    <member kind="function">
      <type>EPartitionOrder</type>
      <name>partition_order</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>af4e3bb09bc6aecac9a89f798e753c57e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>overall_part_num</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a28d36b0e1fd428e0f6a99dd140ad11cd</anchor>
      <arglist>(size_type row_p, size_type col_p) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>row_part_num</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a2f3f685d752323443c8f9ea3b20fa0b6</anchor>
      <arglist>(size_type overall_p) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>col_part_num</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>aa92f31a9a2f74489b6728e9959730bc9</anchor>
      <arglist>(size_type overall_p) const </arglist>
    </member>
    <member kind="function">
      <type>partition_type</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a2436ea036224b48b7efe1196143d453a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const partition_type</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>aa841cd3cc3eeef5ba4908c2d137be350</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>partition_type</type>
      <name>partition</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>afd3540c7c315ae097ed59a875a457f6b</anchor>
      <arglist>(size_type overall_p)</arglist>
    </member>
    <member kind="function">
      <type>const partition_type</type>
      <name>partition</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>aaf6b03a4dc54e3eec0ead3b1eeff48d1</anchor>
      <arglist>(size_type overall_p) const </arglist>
    </member>
    <member kind="function">
      <type>partition_type</type>
      <name>partition</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>abb18b60f93ae2d9fe1a9abd74e04e02d</anchor>
      <arglist>(size_type row_p, size_type col_p)</arglist>
    </member>
    <member kind="function">
      <type>const partition_type</type>
      <name>partition</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>ae5bcf403435855615d47a5f92fab0f6b</anchor>
      <arglist>(size_type row_p, size_type col_p) const </arglist>
    </member>
    <member kind="function">
      <type>partition_type</type>
      <name>partition</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a565e28db55302a8d0ee2e13ebaf98642</anchor>
      <arglist>(Range1D rng_overall_p)</arglist>
    </member>
    <member kind="function">
      <type>const partition_type</type>
      <name>partition</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedView.html</anchorfile>
      <anchor>a78df87d1e7a60a82ce1b7e870bec9364</anchor>
      <arglist>(Range1D rng_overall_p) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::COOMatrixPartitionedView::UninitializedException</name>
    <filename>classAbstractLinAlgPack_1_1COOMatrixPartitionedView_1_1UninitializedException.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::COOMatrixPartitionViewSubclass</name>
    <filename>classAbstractLinAlgPack_1_1COOMatrixPartitionViewSubclass.html</filename>
    <base>AbstractLinAlgPack::MatrixOp</base>
    <member kind="typedef">
      <type>COOMatrixWithPartitionedView::partition_type</type>
      <name>M</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionViewSubclass.html</anchorfile>
      <anchor>a0299706fe9d236f1d850cac923d2131f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>COOMatrixPartitionViewSubclass</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionViewSubclass.html</anchorfile>
      <anchor>a2893e3d4023d6b4702047789bb7c4c6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>COOMatrixPartitionViewSubclass</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionViewSubclass.html</anchorfile>
      <anchor>a991f7f59dd8bf54b88cbe8c5dc46b309</anchor>
      <arglist>(BLAS_Cpp::Transp trans)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>COOMatrixPartitionViewSubclass</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionViewSubclass.html</anchorfile>
      <anchor>a3872102cbde6bab734d4dea968178cdf</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>COOMatrixPartitionViewSubclass</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionViewSubclass.html</anchorfile>
      <anchor>aff47b2e7b279e29f400d354a2ec049d5</anchor>
      <arglist>(const M &amp;m, BLAS_Cpp::Transp trans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_trans</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionViewSubclass.html</anchorfile>
      <anchor>aabdadcde25cba8fc3d03f84ed4c90ce4</anchor>
      <arglist>(BLAS_Cpp::Transp trans)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionViewSubclass.html</anchorfile>
      <anchor>a8b1d1fe848fe21b49d8aac8ec961147e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionViewSubclass.html</anchorfile>
      <anchor>a38a46d1c3093b8822751712a2d5b9d0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionViewSubclass.html</anchorfile>
      <anchor>a2f48a0574564aa364fb3b69605aeb0ee</anchor>
      <arglist>(const MatrixOp &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7a2d853f87929633a47238ee7244ac98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2cf16b847f1f5eb912fc57c33908338b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad6aefd4a5ccb750ff066b3c94b43dbe5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa8a9edd1f07308d03fc1ddb6abe5607e</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="function">
      <type>M &amp;</type>
      <name>m</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionViewSubclass.html</anchorfile>
      <anchor>a50dc9e480863c648b5837697dace2813</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const M &amp;</type>
      <name>m</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionViewSubclass.html</anchorfile>
      <anchor>af0af975ecf488e31e8eaa9b465a1efad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionViewSubclass.html</anchorfile>
      <anchor>a30b2ba3e7f0d5170b9b769bda94a4d0c</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionViewSubclass.html</anchorfile>
      <anchor>ac7458cba2296d0bb5c7ffe4721d69cac</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionViewSubclass.html</anchorfile>
      <anchor>ace01709c394d60d2b96af4e6b9b0d1b6</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionViewSubclass.html</anchorfile>
      <anchor>af1199ff8a47a2a803c552c04358e92bf</anchor>
      <arglist>(const DVectorSlice &amp;vs_rhs1, BLAS_Cpp::Transp trans_rhs2, const DVectorSlice &amp;vs_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionViewSubclass.html</anchorfile>
      <anchor>a312b0dea2f09094c5f415e9b98e6826d</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionViewSubclass.html</anchorfile>
      <anchor>a8346850828d38a1bce91473ff8729f4d</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionViewSubclass.html</anchorfile>
      <anchor>af425b55dd09771c8ee3e2374fe832cf7</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a900f5bb64eb5c135e7f3a958da51918a</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac15a5369a10c424a12f9e8bc03344cb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2e81f486da8a59d0af9e7bf8a8ab9a8b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a29a1ad79c69bf12d96cf7a540280182e</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>af8e7324cc60e8d44aeef0b3a3b67785a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa684a28bfb9dd8e15c3af04cfcab7979</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>adaf68f480a35ab7c76a48b4a42d2c788</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6927e8f4dd1b50a3a615b8b14d8c92f3</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a267a73495821f95f1e9f1b09d196a5ea</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aac7173a6691e1778ca45d296a7c1ea17</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::COOMatrixWithPartitionedView</name>
    <filename>classAbstractLinAlgPack_1_1COOMatrixWithPartitionedView.html</filename>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixWithPartitionedView.html</anchorfile>
      <anchor>aa3b60bd275a8d7cf9e352e8573280569</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixWithPartitionedView.html</anchorfile>
      <anchor>ae6613595eb7eb8d39690dea85116998c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>COOMatrixWithPartitionedView &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixWithPartitionedView.html</anchorfile>
      <anchor>ae885b12e50294d5ec3aa8a55b3d370ea</anchor>
      <arglist>(const COOMatrixWithPartitionedView &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>COOMatrixWithPartitionedView &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixWithPartitionedView.html</anchorfile>
      <anchor>a2a5e7aa1c013681421ad7c3200cac040</anchor>
      <arglist>(const COOMatrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const COOMatrix &amp;</type>
      <name>coom</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixWithPartitionedView.html</anchorfile>
      <anchor>a17d2eb3a851c9e13ebd78a9527245a8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const partitioned_view_type &amp;</type>
      <name>coom_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixWithPartitionedView.html</anchorfile>
      <anchor>a6e5ae081fcef44ae7b42bb855347c216</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef">
      <type>COOMatrixPartitionedView&lt; indice_type, value_type &gt;</type>
      <name>partitioned_view_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixWithPartitionedView.html</anchorfile>
      <anchor>a5abfde5c3f92b9b9e1c155e5dca6d148</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>partitioned_view_type::partition_type</type>
      <name>partition_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixWithPartitionedView.html</anchorfile>
      <anchor>a3f53d109a8ec51347193e9886026b50f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>partitioned_view_type::EPartitionOrder</type>
      <name>EPartitionOrder</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixWithPartitionedView.html</anchorfile>
      <anchor>ae92871cecbaddd3910c7939861a1be47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixWithPartitionedView.html</anchorfile>
      <anchor>a283492ec8ac9fe5577ec01138a9b3e38</anchor>
      <arglist>(size_type rows, size_type cols, size_type nz)</arglist>
    </member>
    <member kind="function">
      <type>value_type *</type>
      <name>val</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixWithPartitionedView.html</anchorfile>
      <anchor>ada9548f2f08d38024763ef82f464df0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>indice_type *</type>
      <name>ivect</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixWithPartitionedView.html</anchorfile>
      <anchor>a52b44efa22a41391411d0895571fad19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>indice_type *</type>
      <name>jvect</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixWithPartitionedView.html</anchorfile>
      <anchor>a321d70fc702308bc0d4c7703dc638707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixWithPartitionedView.html</anchorfile>
      <anchor>ae6bad3d342914704270ceb71e8997a57</anchor>
      <arglist>(std::istream &amp;istrm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixWithPartitionedView.html</anchorfile>
      <anchor>a0772a452cf8e049bae7024be5aa8e087</anchor>
      <arglist>(const size_type row_perm[], const size_type col_perm[], const size_type num_row_part, const size_type row_part[], const size_type num_col_part, const size_type col_part[], const EPartitionOrder partition_order)</arglist>
    </member>
    <member kind="function">
      <type>partition_type</type>
      <name>partition</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixWithPartitionedView.html</anchorfile>
      <anchor>a8bc373053332eeea4c6154806c3cbdf7</anchor>
      <arglist>(size_type overall_p)</arglist>
    </member>
    <member kind="function">
      <type>partition_type</type>
      <name>partition</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixWithPartitionedView.html</anchorfile>
      <anchor>a2da742ed3442ea74565b4411d1dd3bef</anchor>
      <arglist>(size_type row_p, size_type col_p)</arglist>
    </member>
    <member kind="function">
      <type>partition_type</type>
      <name>partition</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixWithPartitionedView.html</anchorfile>
      <anchor>a83af75a523ccd5e4c7e815fe12f7064a</anchor>
      <arglist>(Range1D rng_overall_p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixCOORTmplItfc</name>
    <filename>classAbstractLinAlgPack_1_1MatrixCOORTmplItfc.html</filename>
    <templarg>T_Scalar</templarg>
    <templarg>T_Index</templarg>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixCOORTmplItfcItrEleView</name>
    <filename>classAbstractLinAlgPack_1_1MatrixCOORTmplItfcItrEleView.html</filename>
    <templarg>T_Scalar</templarg>
    <templarg>T_Index</templarg>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixCOORTmplItfcItr</name>
    <filename>classAbstractLinAlgPack_1_1MatrixCOORTmplItfcItr.html</filename>
    <templarg>T_Scalar</templarg>
    <templarg>T_Index</templarg>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSparseCOORSerial</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixOp</base>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixLoadSparseElements</base>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixExtractSparseElements</base>
    <class kind="class">AbstractLinAlgPack::MatrixSparseCOORSerial::ReleaseValRowColArrays</class>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; MemMngPack::ReleaseResource &gt;</type>
      <name>release_resource_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>adfe2ded79406d0a71692490be1c608b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixSparseCOORSerial</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>a0ba27daefc0c8763318df4746acaca80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_buffers</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>a3f518a7699ab602dec95c3d0b11a69f8</anchor>
      <arglist>(size_type max_nz, value_type *val, index_type *row_i, index_type *col_j, const release_resource_ptr_t &amp;release_resource, size_type rows=0, size_type cols=0, size_type nz=0, bool check_input=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_uninitialized</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>af7556f5eee78ebad33f32878c383ffb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type *</type>
      <name>val</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>af6e0a12cffa8d430ee0977a44893101a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>val</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>a36290b8b5569b90dc1afd5497ff29b0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>index_type *</type>
      <name>row_i</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>a4a791ed49292274adee1f39d120ed82a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const index_type *</type>
      <name>row_i</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>a280c8189ac2f43d29d75f837a1647026</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>index_type *</type>
      <name>col_j</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>a8bd015c3f366bda4c0398a088335c869</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const index_type *</type>
      <name>col_j</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>adf7260e22c10283b3891bc864b45dae9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const release_resource_ptr_t &amp;</type>
      <name>release_resource</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>a3dcc49b4d901602f8ef0d7dd71267101</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>a96ad1ddb93b4dc806bd49b3a9edd2727</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>a4b94f20ef160000a80353e1d00e30bfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>ab0fe2edb31aa02193e7c7415343523d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>af00e99966d4b9a730f7f99e9a0e37f6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>a3c220996a8248a8df2fde176aafb07a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>a4d10b605e18a70a5e48af20197dd431e</anchor>
      <arglist>(const MatrixOp &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>abfce6d28ba4ed1adfac5c2798be85bf9</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>ae3ced549d81ee1adabd72b5a0284b296</anchor>
      <arglist>(VectorMutable *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reinitialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>ab0aef6bb7deea7eab9d244b7b027da55</anchor>
      <arglist>(size_type rows, size_type cols, size_type max_nz, EAssumeElementUniqueness element_uniqueness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_to_load_values</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>a99c055d68df5688e008846a12595b207</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_load_nonzeros_buffers</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>a940046409719295c92565cc46857d537</anchor>
      <arglist>(size_type max_nz_load, value_type **val, index_type **row_i, index_type **col_j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commit_load_nonzeros_buffers</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>a9c938436929ab9a3223e4be5a41db5d7</anchor>
      <arglist>(size_type nz_commit, value_type **val, index_type **row_i, index_type **col_j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish_construction</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>a3247903b2a49963e7114be0b344b8346</anchor>
      <arglist>(bool test_setup)</arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>count_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>a632533d3e3ac91793803dab43c622958</anchor>
      <arglist>(EElementUniqueness element_uniqueness, const index_type inv_row_perm[], const index_type inv_col_perm[], const Range1D &amp;row_rng, const Range1D &amp;col_rng, index_type dl, index_type du) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coor_extract_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial.html</anchorfile>
      <anchor>abe65c4d0b1c9aacac1c6298eee3ebb42</anchor>
      <arglist>(EElementUniqueness element_uniqueness, const index_type inv_row_perm[], const index_type inv_col_perm[], const Range1D &amp;row_rng, const Range1D &amp;col_rng, index_type dl, index_type du, value_type alpha, const index_type len_Aval, value_type Aval[], const index_type len_Aij, index_type Arow[], index_type Acol[], const index_type row_offset, const index_type col_offset) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EAssumeElementUniqueness</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixLoadSparseElements.html</anchorfile>
      <anchor>a6497a2903d69bb159542a75d9c47eb63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ELEMENTS_ASSUME_UNIQUE</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixLoadSparseElements.html</anchorfile>
      <anchor>a6497a2903d69bb159542a75d9c47eb63a2ea2f4cdd07683a27c92f72971523ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ELEMENTS_ASSUME_DUPLICATES_SUM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixLoadSparseElements.html</anchorfile>
      <anchor>a6497a2903d69bb159542a75d9c47eb63a5f61951a83803d4de6efd2fe5b28d7d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EExtractRegion</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRACT_FULL_MATRIX</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683a4237dcf369916295535767413796fb34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRACT_UPPER_TRIANGULAR</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683a76c519aba5771f1bfa600b478007ac12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRACT_LOWER_TRIANGULAR</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683ab2eb3008099f4c6667a3db1edfe85f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EElementUniqueness</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>ade5634947e2a5d18ec08886cfecee943</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ELEMENTS_FORCE_UNIQUE</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>ade5634947e2a5d18ec08886cfecee943a5b41e2992dde659a1defb4c0048c2260</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ELEMENTS_ALLOW_DUPLICATES_SUM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>ade5634947e2a5d18ec08886cfecee943a53ffd0cf14308b42d7d0f02b8a37cc5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7a2d853f87929633a47238ee7244ac98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2cf16b847f1f5eb912fc57c33908338b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa8a9edd1f07308d03fc1ddb6abe5607e</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>num_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixExtractSparseElements.html</anchorfile>
      <anchor>abfe08a878e94b4aa36f4019a71d21d8b</anchor>
      <arglist>(EExtractRegion extract_region, EElementUniqueness element_uniqueness) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coor_extract_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixExtractSparseElements.html</anchorfile>
      <anchor>a270d46c5035b989479dd38c5b2e8c0e9</anchor>
      <arglist>(EExtractRegion extract_region, EElementUniqueness element_uniqueness, const index_type len_Aval, value_type Aval[], const index_type len_Aij, index_type Arow[], index_type Acol[], const index_type row_offset, const index_type col_offset) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a900f5bb64eb5c135e7f3a958da51918a</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac15a5369a10c424a12f9e8bc03344cb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2e81f486da8a59d0af9e7bf8a8ab9a8b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a29a1ad79c69bf12d96cf7a540280182e</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa684a28bfb9dd8e15c3af04cfcab7979</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>adaf68f480a35ab7c76a48b4a42d2c788</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6927e8f4dd1b50a3a615b8b14d8c92f3</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a267a73495821f95f1e9f1b09d196a5ea</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aac7173a6691e1778ca45d296a7c1ea17</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSparseCOORSerial::ReleaseValRowColArrays</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial_1_1ReleaseValRowColArrays.html</filename>
    <base>MemMngPack::ReleaseResource</base>
    <member kind="function">
      <type></type>
      <name>ReleaseValRowColArrays</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial_1_1ReleaseValRowColArrays.html</anchorfile>
      <anchor>ae7769bf24d2649cb5cc78b0ae4cb1d0e</anchor>
      <arglist>(value_type *val, index_type *row_i, index_type *col_j)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resource_is_bound</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial_1_1ReleaseValRowColArrays.html</anchorfile>
      <anchor>ad206279cc082cfe07d062cf19e5a3a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release_ownership</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSparseCOORSerial_1_1ReleaseValRowColArrays.html</anchorfile>
      <anchor>a44ab77a1593c24f23f0706e7cb40641d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymDiagSparseStd</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymDiagSparseStd.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixSymDiagSparse</base>
    <member kind="function">
      <type></type>
      <name>MatrixSymDiagSparseStd</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparseStd.html</anchorfile>
      <anchor>a96cf59870976189d48a73a20bbb92f50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixSymDiagSparseStd</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparseStd.html</anchorfile>
      <anchor>a98c7863459915b6e8d92df4b389407a5</anchor>
      <arglist>(const SpVectorSlice &amp;diag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparseStd.html</anchorfile>
      <anchor>acbdd5a80a4b82815c7571cc8e42f2e48</anchor>
      <arglist>(const SpVectorSlice &amp;diag)</arglist>
    </member>
    <member kind="function">
      <type>MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparseStd.html</anchorfile>
      <anchor>a7615c3c7bd2ff8586ca7bfeb6fc4f127</anchor>
      <arglist>(const MatrixOp &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const SpVectorSlice</type>
      <name>diag</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparseStd.html</anchorfile>
      <anchor>a1a66c4035e93c1837a0cb4f8229ecb51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatRhsPlaceHolder</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a9b0d347deb8c731c157edcd256859842</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EExtractRegion</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRACT_FULL_MATRIX</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683a4237dcf369916295535767413796fb34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRACT_UPPER_TRIANGULAR</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683a76c519aba5771f1bfa600b478007ac12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRACT_LOWER_TRIANGULAR</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683ab2eb3008099f4c6667a3db1edfe85f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EElementUniqueness</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>ade5634947e2a5d18ec08886cfecee943</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ELEMENTS_FORCE_UNIQUE</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>ade5634947e2a5d18ec08886cfecee943a5b41e2992dde659a1defb4c0048c2260</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ELEMENTS_ALLOW_DUPLICATES_SUM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>ade5634947e2a5d18ec08886cfecee943a53ffd0cf14308b42d7d0f02b8a37cc5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparse.html</anchorfile>
      <anchor>a3f086cafa79577878f5e3dbb9c39f81c</anchor>
      <arglist>(size_type, num_updates_at_once)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixSymDiagSparse</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparse.html</anchorfile>
      <anchor>a71ed3a157bb45a39367bce87275a8666</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparse.html</anchorfile>
      <anchor>aec8ebc65ac9ee8f2efe123fc887f8d37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparse.html</anchorfile>
      <anchor>a67b2935e6061ca771295feb53279c26f</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparse.html</anchorfile>
      <anchor>a88cbc8d75f9492e784ba44f44f59062c</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparse.html</anchorfile>
      <anchor>a406b41860468540f1b51ad52ced94860</anchor>
      <arglist>(DMatrixSliceSym *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const MatrixOpSerial &amp;mwo_rhs, BLAS_Cpp::Transp mwo_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>num_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparse.html</anchorfile>
      <anchor>ac0e4b4a060448732d64c2c606f438baa</anchor>
      <arglist>(EExtractRegion extract_region, EElementUniqueness element_uniqueness) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coor_extract_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparse.html</anchorfile>
      <anchor>a26d2cc1a0a5e82b1cb223cdf5df254ab</anchor>
      <arglist>(EExtractRegion extract_region, EElementUniqueness element_uniqueness, const index_type len_Aval, value_type Aval[], const index_type len_Aij, index_type Arow[], index_type Acol[], const index_type row_offset, const index_type col_offset) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixWithOpConcreteEncap</name>
    <filename>classAbstractLinAlgPack_1_1MatrixWithOpConcreteEncap.html</filename>
    <templarg>M</templarg>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixOp</base>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixWithOpConcreteEncap.html</anchorfile>
      <anchor>a8ab1e96fb240d6ae5b29da5a43bb6d42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixWithOpConcreteEncap.html</anchorfile>
      <anchor>af897a50c6be3cf2c126c2d987d747855</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixWithOpConcreteEncap.html</anchorfile>
      <anchor>a829f532ad7f4f09f76cecea98cab9b3a</anchor>
      <arglist>(const MatrixOp &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7a2d853f87929633a47238ee7244ac98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2cf16b847f1f5eb912fc57c33908338b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad6aefd4a5ccb750ff066b3c94b43dbe5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa8a9edd1f07308d03fc1ddb6abe5607e</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixWithOpConcreteEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixWithOpConcreteEncap.html</anchorfile>
      <anchor>a7269b201815fac269c19801a1c491786</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixWithOpConcreteEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixWithOpConcreteEncap.html</anchorfile>
      <anchor>ab571f62c45de39ac31752d294928373e</anchor>
      <arglist>(const M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>M &amp;</type>
      <name>m</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixWithOpConcreteEncap.html</anchorfile>
      <anchor>a4423dcdca2f645e72313b2084410f88a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const M &amp;</type>
      <name>m</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixWithOpConcreteEncap.html</anchorfile>
      <anchor>a4f14ad723423a937bb2453e0fbd131e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a900f5bb64eb5c135e7f3a958da51918a</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac15a5369a10c424a12f9e8bc03344cb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2e81f486da8a59d0af9e7bf8a8ab9a8b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a29a1ad79c69bf12d96cf7a540280182e</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>af8e7324cc60e8d44aeef0b3a3b67785a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa684a28bfb9dd8e15c3af04cfcab7979</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>adaf68f480a35ab7c76a48b4a42d2c788</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6927e8f4dd1b50a3a615b8b14d8c92f3</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a267a73495821f95f1e9f1b09d196a5ea</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aac7173a6691e1778ca45d296a7c1ea17</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::SortByDescendingAbsValue</name>
    <filename>classAbstractLinAlgPack_1_1SortByDescendingAbsValue.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::sparse_bounds_itr</name>
    <filename>classAbstractLinAlgPack_1_1sparse__bounds__itr.html</filename>
    <member kind="function">
      <type></type>
      <name>sparse_bounds_itr</name>
      <anchorfile>classAbstractLinAlgPack_1_1sparse__bounds__itr.html</anchorfile>
      <anchor>a1c2f757b3153890820f14dad99096d1f</anchor>
      <arglist>(const DVectorSlice::const_iterator &amp;bl_begin, const DVectorSlice::const_iterator &amp;bl_end, const DVectorSlice::const_iterator &amp;bu_begin, const DVectorSlice::const_iterator &amp;bu_end, value_type big_bnd)</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>big_bnd</name>
      <anchorfile>classAbstractLinAlgPack_1_1sparse__bounds__itr.html</anchorfile>
      <anchor>a8a8ff3ea8e8584f4e1fb011b7acfe637</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>at_end</name>
      <anchorfile>classAbstractLinAlgPack_1_1sparse__bounds__itr.html</anchorfile>
      <anchor>a66f3ba6a23b716f0aaf17ae634ff87d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>sparse_bounds_itr &amp;</type>
      <name>operator++</name>
      <anchorfile>classAbstractLinAlgPack_1_1sparse__bounds__itr.html</anchorfile>
      <anchor>adeaae44bb42933fbdb8a10b04a3f1117</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>index</name>
      <anchorfile>classAbstractLinAlgPack_1_1sparse__bounds__itr.html</anchorfile>
      <anchor>ad03a01a29d9ae3484e142a9a05b9c1dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>lbound</name>
      <anchorfile>classAbstractLinAlgPack_1_1sparse__bounds__itr.html</anchorfile>
      <anchor>ab3b02c223167685cb78fbec7a6201199</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>ubound</name>
      <anchorfile>classAbstractLinAlgPack_1_1sparse__bounds__itr.html</anchorfile>
      <anchor>a57b1e97db5c2be5649ada3a69b950eae</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::SparseCOOPtrElement</name>
    <filename>classAbstractLinAlgPack_1_1SparseCOOPtrElement.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T_Value</type>
      <name>value_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseCOOPtrElement.html</anchorfile>
      <anchor>a4f4d49f4867090f4c373322e25e270aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_Index</type>
      <name>index_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseCOOPtrElement.html</anchorfile>
      <anchor>a7e64e309f838da3ddc971ccfaece953b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseCOOPtrElement</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseCOOPtrElement.html</anchorfile>
      <anchor>aeab60e8508aaab8ec3112da09481c3e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseCOOPtrElement</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseCOOPtrElement.html</anchorfile>
      <anchor>a81c5287c9b1294c32749158e7a91e723</anchor>
      <arglist>(value_type *pvalue, index_type row_i, index_type col_j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseCOOPtrElement.html</anchorfile>
      <anchor>aa9bd7d7e9f7eb456dfd14e06a135935e</anchor>
      <arglist>(value_type *pvalue, index_type row_i, index_type col_j)</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>value</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseCOOPtrElement.html</anchorfile>
      <anchor>a2c00f21305aa980bc047966e00aa65c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseCOOPtrElement.html</anchorfile>
      <anchor>afd0f1b0b39c8a8943d9c73c1c3ba11b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>row_i</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseCOOPtrElement.html</anchorfile>
      <anchor>a896134852db80250a4e4ac8652fe403a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>col_j</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseCOOPtrElement.html</anchorfile>
      <anchor>aafe8e54875f4e0f3c598410176300415</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>change_indexes</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseCOOPtrElement.html</anchorfile>
      <anchor>a39002aa4818dacba789b642cdc95e830</anchor>
      <arglist>(index_type row_i, index_type col_j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>change_value_ptr</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseCOOPtrElement.html</anchorfile>
      <anchor>af67ef95d253a459cbf9ab8364c465a15</anchor>
      <arglist>(value_type *pvalue)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::SparsePtrElement</name>
    <filename>classAbstractLinAlgPack_1_1SparsePtrElement.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T_Value</type>
      <name>value_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparsePtrElement.html</anchorfile>
      <anchor>ab61d2513d78a0e9c245d839cd0664413</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_Indice</type>
      <name>indice_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparsePtrElement.html</anchorfile>
      <anchor>ad9ce9360229d86bafac05d5904d3cfc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparsePtrElement</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparsePtrElement.html</anchorfile>
      <anchor>aef48e89af383644f7da49786a1020ed8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparsePtrElement</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparsePtrElement.html</anchorfile>
      <anchor>a219142b5792a6dc0f04b7ae5d0863340</anchor>
      <arglist>(indice_type indice, value_type *pvalue)</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>value</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparsePtrElement.html</anchorfile>
      <anchor>a6fade437fedd9ed57a6bb5ece6ad1756</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparsePtrElement.html</anchorfile>
      <anchor>a940f78a76a193b9c7eb639bd551c0f75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>indice_type</type>
      <name>indice</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparsePtrElement.html</anchorfile>
      <anchor>a7f2663418db3211c59e5ecd1dda08c22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>change_indice</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparsePtrElement.html</anchorfile>
      <anchor>a02b035206d4835f21208a44b79c02d9b</anchor>
      <arglist>(indice_type indice)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>change_value_ptr</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparsePtrElement.html</anchorfile>
      <anchor>a4e89174db1bf8b5070405922b34c3608</anchor>
      <arglist>(value_type *pvalue)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::TransSparseCOOElementViewIter</name>
    <filename>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">AbstractLinAlgPack::TransSparseCOOElementViewIter::ElementView</class>
    <member kind="typedef">
      <type>ElementView&lt; T_Iter, T_IterCat, T_Indice,T_ValRef, T_Diff &gt;</type>
      <name>element_view_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a89a6edd6ebbe5257e706e212174b951d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_Iter</type>
      <name>encap_iter_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>adc7ebcf8d3444adc960a1157e3d9d8ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TransSparseCOOElementViewIter&lt; T_Iter, T_IterCat,T_Indice, T_ValRef, T_Diff &gt;</type>
      <name>iterator_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a8f37fc87286699ce687a4220b7a92a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_IterCat</type>
      <name>iterator_category</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a9143b0498eb2a424f673f0222560866d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>element_view_type</type>
      <name>value_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>adcdf705947ca5f59d872574342c023c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>element_view_type &amp;</type>
      <name>reference_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a80bee2f557617ce87a7ab0a1bd3fd929</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>element_view_type *</type>
      <name>pointer_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>ae635227105949822eb44ca4c2d43ea6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_Diff</type>
      <name>difference_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a348e07fddff70a171fb92f793ce827b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_t</type>
      <name>distance_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a3de9e66b0bcfbbd925ea3d875a951fd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransSparseCOOElementViewIter</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>abb166b9332985ead671a879b431180d3</anchor>
      <arglist>(T_Iter itr)</arglist>
    </member>
    <member kind="function">
      <type>reference_type</type>
      <name>operator*</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>aed1fae6d868baeb6ad2aed1d01e3026a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>pointer_type</type>
      <name>operator-&gt;</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a48ccca26625016160e9f9ee8cc4f1402</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator[]</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>ab1683c7f382905339b4fe47d87b994a4</anchor>
      <arglist>(distance_type n) const </arglist>
    </member>
    <member kind="function">
      <type>iterator_type &amp;</type>
      <name>operator++</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a1e29a14b67b3f9e96a4cae9a55099874</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const iterator_type</type>
      <name>operator++</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>aa178deef6d23d0e0ecf21de69397f3a9</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>iterator_type &amp;</type>
      <name>operator--</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a6ff0e11c7b2b464efe96e2bf65b694bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const iterator_type</type>
      <name>operator--</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>ada678974b853080606c4c0aa10b0a223</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>iterator_type</type>
      <name>operator+</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a898965523446de4b4494b6e254ba6c2d</anchor>
      <arglist>(distance_type n)</arglist>
    </member>
    <member kind="function">
      <type>const iterator_type</type>
      <name>operator+</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a4a1a0f5bc70b75ce6dd69bf495c470ad</anchor>
      <arglist>(distance_type n) const </arglist>
    </member>
    <member kind="function">
      <type>iterator_type &amp;</type>
      <name>operator+=</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>aed31aec069910f01705b2d3a895d9077</anchor>
      <arglist>(distance_type n)</arglist>
    </member>
    <member kind="function">
      <type>iterator_type</type>
      <name>operator-</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>ad5fbc5aef43691c8e43c49175a4bf95a</anchor>
      <arglist>(distance_type n)</arglist>
    </member>
    <member kind="function">
      <type>const iterator_type</type>
      <name>operator-</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a89a7e0089e204dac5b53a52368a110d6</anchor>
      <arglist>(distance_type n) const </arglist>
    </member>
    <member kind="function">
      <type>iterator_type &amp;</type>
      <name>operator-=</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a3d409943c3cdfe5bca9b77ef8a969cbd</anchor>
      <arglist>(distance_type n)</arglist>
    </member>
    <member kind="function">
      <type>distance_type</type>
      <name>operator-</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a225730b3fce84704cdfca315364d9777</anchor>
      <arglist>(const iterator_type &amp;itr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a900b9b245b5161d9ab979df4ac74e6e9</anchor>
      <arglist>(const iterator_type &amp;itr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a34492459fde4a254fbdc6dad7d07e91c</anchor>
      <arglist>(const iterator_type &amp;itr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a07b8930f8958251679a6a88d8ed77883</anchor>
      <arglist>(const iterator_type &amp;itr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a90ba8033555e6511bf95e37df10889fd</anchor>
      <arglist>(const iterator_type &amp;itr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a93d6e3bf017e9022a705acc3f12b0304</anchor>
      <arglist>(const iterator_type &amp;itr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter.html</anchorfile>
      <anchor>a7a2bee0bf496805707bba5cdfa2dceb3</anchor>
      <arglist>(const iterator_type &amp;itr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::TransSparseCOOElementViewIter::ElementView</name>
    <filename>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter_1_1ElementView.html</filename>
    <templarg>TT_Iter</templarg>
    <templarg>TT_IterCat</templarg>
    <templarg>TT_Indice</templarg>
    <templarg>TT_ValRef</templarg>
    <templarg>TT_Diff</templarg>
    <member kind="typedef">
      <type>TT_Indice</type>
      <name>indice_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter_1_1ElementView.html</anchorfile>
      <anchor>a64afc1e22fbf927f5a2f84ed34a77e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TT_ValRef</type>
      <name>value_ref_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter_1_1ElementView.html</anchorfile>
      <anchor>a5ba9dc74369569001b9f3c5eaf4e68cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementView</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter_1_1ElementView.html</anchorfile>
      <anchor>aea3b17fb99200ccbba3bdd55809b978c</anchor>
      <arglist>(const TT_Iter &amp;iter)</arglist>
    </member>
    <member kind="function">
      <type>value_ref_type</type>
      <name>value</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter_1_1ElementView.html</anchorfile>
      <anchor>a812f6137a1cbe1d2e1a3e5b084283ad0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>indice_type</type>
      <name>row_i</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter_1_1ElementView.html</anchorfile>
      <anchor>a5552e018fdfe6b09990e620d61a6d555</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>indice_type</type>
      <name>col_j</name>
      <anchorfile>classAbstractLinAlgPack_1_1TransSparseCOOElementViewIter_1_1ElementView.html</anchorfile>
      <anchor>a855429f407a7f34f04032d9f7a4139e5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::VectorDenseEncap</name>
    <filename>classAbstractLinAlgPack_1_1VectorDenseEncap.html</filename>
    <member kind="function">
      <type></type>
      <name>VectorDenseEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorDenseEncap.html</anchorfile>
      <anchor>a2a4322bb9c8c27dc116dc75265b7b470</anchor>
      <arglist>(const Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VectorDenseEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorDenseEncap.html</anchorfile>
      <anchor>a778d3fecb5e4058e151c80e64585fd02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DVectorSlice &amp;</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorDenseEncap.html</anchorfile>
      <anchor>a943cadc84749a4182a33c56a9f912f92</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::VectorDenseMutableEncap</name>
    <filename>classAbstractLinAlgPack_1_1VectorDenseMutableEncap.html</filename>
    <member kind="function">
      <type></type>
      <name>VectorDenseMutableEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorDenseMutableEncap.html</anchorfile>
      <anchor>ac5d3b6cf509aefaa3e0d739cdb3a5fbe</anchor>
      <arglist>(VectorMutable &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VectorDenseMutableEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorDenseMutableEncap.html</anchorfile>
      <anchor>a8ee9b80ead67de380a1c4f9146a8f7ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DVectorSlice &amp;</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorDenseMutableEncap.html</anchorfile>
      <anchor>a47435f9e1b3fe312b77aff96cc7f5a8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DVectorSlice &amp;</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorDenseMutableEncap.html</anchorfile>
      <anchor>a03977a61a8c378dd12b033069db7b2f4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixConvertToSparse</name>
    <filename>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixBase</base>
    <member kind="enumeration">
      <name>EExtractRegion</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRACT_FULL_MATRIX</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683a4237dcf369916295535767413796fb34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRACT_UPPER_TRIANGULAR</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683a76c519aba5771f1bfa600b478007ac12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRACT_LOWER_TRIANGULAR</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683ab2eb3008099f4c6667a3db1edfe85f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EElementUniqueness</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>ade5634947e2a5d18ec08886cfecee943</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ELEMENTS_FORCE_UNIQUE</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>ade5634947e2a5d18ec08886cfecee943a5b41e2992dde659a1defb4c0048c2260</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ELEMENTS_ALLOW_DUPLICATES_SUM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>ade5634947e2a5d18ec08886cfecee943a53ffd0cf14308b42d7d0f02b8a37cc5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual index_type</type>
      <name>num_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>a25791eab41a40ee4c1c7fbb198edfcde</anchor>
      <arglist>(EExtractRegion extract_region, EElementUniqueness element_uniqueness) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>coor_extract_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>a2f21bf0f97410fae23bfe54c81d764c9</anchor>
      <arglist>(EExtractRegion extract_region, EElementUniqueness element_uniqueness, const index_type len_Aval, value_type Aval[], const index_type len_Aij, index_type Arow[], index_type Acol[], const index_type row_offset=0, const index_type col_offset=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a74973b0f184c7bf0eadd56548119effa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a67d2a17263ae9c682990cf429a26321a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aea7780a16afe595a8a24ee52b8e7fbf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aed562e6e0ba0c4e8921e5c1741065f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a95a45f7ee07a98edef8272c3985a83f3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixConvertToSparseEncap</name>
    <filename>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixConvertToSparse</base>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const MatrixExtractSparseElements &gt;</type>
      <name>mese_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>a2f759b3bf36842a88250fd1b2c9be29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const IVector &gt;</type>
      <name>i_vector_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>a2bb71b8cb494416b7017589527633467</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixConvertToSparseEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>abac3762961792594243a90c5e6501073</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixConvertToSparseEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>a6c3cbc3eb4f67305fdad6868b61ddfb3</anchor>
      <arglist>(const mese_ptr_t &amp;mese, const i_vector_ptr_t &amp;inv_row_perm, const Range1D &amp;row_rng, const i_vector_ptr_t &amp;inv_col_perm, const Range1D &amp;col_rng, const BLAS_Cpp::Transp mese_trans, const value_type alpha=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>a092e4039fb4cd6b72b2d16edbea809cd</anchor>
      <arglist>(const mese_ptr_t &amp;mese, const i_vector_ptr_t &amp;inv_row_perm, const Range1D &amp;row_rng, const i_vector_ptr_t &amp;inv_col_perm, const Range1D &amp;col_rng, const BLAS_Cpp::Transp mese_trans, const value_type alpha=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_uninitialized</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>ab8ff246190b431372d4205bc29903dc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mese_ptr_t &amp;</type>
      <name>mese</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>ada97de0d940defadaa9edccd301ab98d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const i_vector_ptr_t &amp;</type>
      <name>inv_row_perm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>ad70f80a295e0b0373bc32b40cb4dc771</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Range1D &amp;</type>
      <name>row_rng</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>a46a40f5d539481fe93ab49f19a88de23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const i_vector_ptr_t &amp;</type>
      <name>inv_col_perm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>ac1cbbd50320359cfa9e151b171047113</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Range1D &amp;</type>
      <name>col_rng</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>abf00c5398be7733611fc0e637bffd346</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BLAS_Cpp::Transp</type>
      <name>mese_trans</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>aac5232943e1c4534408f279cb86eed37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const value_type</type>
      <name>alpha</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>ae1fbfa34fb463d6ccac3a69dc338a511</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>adf7a46d57506c411057a28700f1bb72c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>a57a24ff5655f701ff79ed149cc75a5ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>a59923255fe6109f301cf7cdf18a2042b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>a57f00aef9d69d89990f8a0bb31237cb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>a8870535c35f7d13c83d126ad025e7e10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>num_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>ab4d059412248705acb4a21cac14dab73</anchor>
      <arglist>(EExtractRegion extract_region, EElementUniqueness element_uniqueness) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coor_extract_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparseEncap.html</anchorfile>
      <anchor>a69d8d24ea193b0d0c8a79485c78e1baf</anchor>
      <arglist>(EExtractRegion extract_region, EElementUniqueness element_uniqueness, const index_type len_Aval, value_type Aval[], const index_type len_Aij, index_type Arow[], index_type Acol[], const index_type row_offset, const index_type col_offset) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EExtractRegion</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRACT_FULL_MATRIX</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683a4237dcf369916295535767413796fb34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRACT_UPPER_TRIANGULAR</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683a76c519aba5771f1bfa600b478007ac12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRACT_LOWER_TRIANGULAR</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683ab2eb3008099f4c6667a3db1edfe85f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EElementUniqueness</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>ade5634947e2a5d18ec08886cfecee943</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ELEMENTS_FORCE_UNIQUE</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>ade5634947e2a5d18ec08886cfecee943a5b41e2992dde659a1defb4c0048c2260</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ELEMENTS_ALLOW_DUPLICATES_SUM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>ade5634947e2a5d18ec08886cfecee943a53ffd0cf14308b42d7d0f02b8a37cc5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixExtractInvCholFactor</name>
    <filename>classAbstractLinAlgPack_1_1MatrixExtractInvCholFactor.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixBase</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>extract_inv_chol</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixExtractInvCholFactor.html</anchorfile>
      <anchor>a8886241691b2a9e604e1d719a5d027c1</anchor>
      <arglist>(DMatrixSliceTriEle *InvChol) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a74973b0f184c7bf0eadd56548119effa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a67d2a17263ae9c682990cf429a26321a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aea7780a16afe595a8a24ee52b8e7fbf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aed562e6e0ba0c4e8921e5c1741065f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a95a45f7ee07a98edef8272c3985a83f3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixExtractSparseElements</name>
    <filename>classAbstractLinAlgPack_1_1MatrixExtractSparseElements.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixConvertToSparse</base>
    <member kind="function" virtualness="pure">
      <type>virtual index_type</type>
      <name>count_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixExtractSparseElements.html</anchorfile>
      <anchor>ad751435eb22d9b3f2f69e11a4f67fcde</anchor>
      <arglist>(EElementUniqueness element_uniqueness, const index_type inv_row_perm[], const index_type inv_col_perm[], const Range1D &amp;row_rng, const Range1D &amp;col_rng, index_type dl, index_type du) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>coor_extract_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixExtractSparseElements.html</anchorfile>
      <anchor>aa15cf998e15828788c92b2a329f6a803</anchor>
      <arglist>(EElementUniqueness element_uniqueness, const index_type inv_row_perm[], const index_type inv_col_perm[], const Range1D &amp;row_rng, const Range1D &amp;col_rng, index_type dl, index_type du, value_type alpha, const index_type len_Aval, value_type Aval[], const index_type len_Aij, index_type Arow[], index_type Acol[], const index_type row_offset=0, const index_type col_offset=0) const =0</arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>num_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixExtractSparseElements.html</anchorfile>
      <anchor>abfe08a878e94b4aa36f4019a71d21d8b</anchor>
      <arglist>(EExtractRegion extract_region, EElementUniqueness element_uniqueness) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coor_extract_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixExtractSparseElements.html</anchorfile>
      <anchor>a270d46c5035b989479dd38c5b2e8c0e9</anchor>
      <arglist>(EExtractRegion extract_region, EElementUniqueness element_uniqueness, const index_type len_Aval, value_type Aval[], const index_type len_Aij, index_type Arow[], index_type Acol[], const index_type row_offset, const index_type col_offset) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EExtractRegion</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRACT_FULL_MATRIX</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683a4237dcf369916295535767413796fb34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRACT_UPPER_TRIANGULAR</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683a76c519aba5771f1bfa600b478007ac12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRACT_LOWER_TRIANGULAR</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683ab2eb3008099f4c6667a3db1edfe85f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EElementUniqueness</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>ade5634947e2a5d18ec08886cfecee943</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ELEMENTS_FORCE_UNIQUE</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>ade5634947e2a5d18ec08886cfecee943a5b41e2992dde659a1defb4c0048c2260</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ELEMENTS_ALLOW_DUPLICATES_SUM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>ade5634947e2a5d18ec08886cfecee943a53ffd0cf14308b42d7d0f02b8a37cc5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixLoadSparseElements</name>
    <filename>classAbstractLinAlgPack_1_1MatrixLoadSparseElements.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixBase</base>
    <member kind="enumeration">
      <name>EAssumeElementUniqueness</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixLoadSparseElements.html</anchorfile>
      <anchor>a6497a2903d69bb159542a75d9c47eb63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ELEMENTS_ASSUME_UNIQUE</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixLoadSparseElements.html</anchorfile>
      <anchor>a6497a2903d69bb159542a75d9c47eb63a2ea2f4cdd07683a27c92f72971523ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ELEMENTS_ASSUME_DUPLICATES_SUM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixLoadSparseElements.html</anchorfile>
      <anchor>a6497a2903d69bb159542a75d9c47eb63a5f61951a83803d4de6efd2fe5b28d7d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reinitialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixLoadSparseElements.html</anchorfile>
      <anchor>a5e03bb30aae49f32652c70a2ba272012</anchor>
      <arglist>(size_type rows, size_type cols, size_type max_nz, EAssumeElementUniqueness element_uniqueness=ELEMENTS_ASSUME_DUPLICATES_SUM)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset_to_load_values</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixLoadSparseElements.html</anchorfile>
      <anchor>a26862e291fb2bbb651903cfa83d921dc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>get_load_nonzeros_buffers</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixLoadSparseElements.html</anchorfile>
      <anchor>ac45c1c8bec1ccc5a9a30ad8b1f132760</anchor>
      <arglist>(size_type max_nz_load, value_type **val, index_type **row_i, index_type **col_j)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>commit_load_nonzeros_buffers</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixLoadSparseElements.html</anchorfile>
      <anchor>a931fc33905f05024f264067efca95769</anchor>
      <arglist>(size_type nz_commit, value_type **val, index_type **row_i, index_type **col_j)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>finish_construction</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixLoadSparseElements.html</anchorfile>
      <anchor>a5441dac0926a46d97d12ee35053e2e3c</anchor>
      <arglist>(bool test_setup)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a74973b0f184c7bf0eadd56548119effa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a67d2a17263ae9c682990cf429a26321a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aea7780a16afe595a8a24ee52b8e7fbf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aed562e6e0ba0c4e8921e5c1741065f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a95a45f7ee07a98edef8272c3985a83f3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixNonsingSerial</name>
    <filename>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixNonsing</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>ab6698046e9211f09fddad1f2472b4d4e</anchor>
      <arglist>(DVector *v_lhs, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>aa86e8a5c78ff1d58ff869c22959db1b6</anchor>
      <arglist>(DVectorSlice *vs_lhs, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>af3333aa4940578a7ad5f7acc4c2b50c3</anchor>
      <arglist>(DVector *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a7ed8b17277db1209102cdc310934cf49</anchor>
      <arglist>(DVectorSlice *vs_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>ac058fa0d64ffe35a8e246db81ba7493c</anchor>
      <arglist>(const DVectorSlice &amp;vs_rhs1, BLAS_Cpp::Transp trans_rhs2, const DVectorSlice &amp;vs_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a27b0d77f0c9a9a7c48f2cee99046de81</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a93b5797acbf76e94ba6549f2737d447b</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a2c05c4e55d56ede26854f75fe5d70348</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>af2df56400761a1771de68deab783e66b</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>ac6f4e521c2b92d6fb1fc89b5c7e0d14d</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a69f7bc72545dd50c2b3a520c0118a9fc</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a804f882a0cb0fcbd7129a1820bb24988</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>acd417462612f97dc5586c9be33d46734</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, const MatrixOpSerial &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>acb810c48dc4226763a63be2dd117659c</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixOpSerial &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>ac9dea530e49965e9b78b87eb701d0c99</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>aa426fdc3b0d2defaf8ff8dca17c6b920</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a41a53afa6785abae92c9d0597faf1706</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a92175f4f915b37047434f274a00e4bd8</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a2a9434bc081c41c624f749b83a7eb23f</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mns_mut_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga85aa221b20eb1db5694ee77ade6ff62c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mns_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga1248902e6b31fbf89d091bdbd39ec377</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gaf6e4d634fc68bf70ddcfcdb59913d17d</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga7147936bfe4d44e1643390972120f1de</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a74973b0f184c7bf0eadd56548119effa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a67d2a17263ae9c682990cf429a26321a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aea7780a16afe595a8a24ee52b8e7fbf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aed562e6e0ba0c4e8921e5c1741065f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a95a45f7ee07a98edef8272c3985a83f3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixOpGetGMS</name>
    <filename>classAbstractLinAlgPack_1_1MatrixOpGetGMS.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixOp</base>
    <member kind="function" virtualness="pure">
      <type>virtual const DMatrixSlice</type>
      <name>get_gms_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpGetGMS.html</anchorfile>
      <anchor>a8a41dfcf1ef8d092cfb05a63507a3fbb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>free_gms_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpGetGMS.html</anchorfile>
      <anchor>a4a6d727b29329e31cb8a394cf63f3b72</anchor>
      <arglist>(const DMatrixSlice *gms_view) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a3cf977e1ea2de043e4034825fbfff367</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7a2d853f87929633a47238ee7244ac98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2cf16b847f1f5eb912fc57c33908338b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad6aefd4a5ccb750ff066b3c94b43dbe5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa8a9edd1f07308d03fc1ddb6abe5607e</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a900f5bb64eb5c135e7f3a958da51918a</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac15a5369a10c424a12f9e8bc03344cb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2e81f486da8a59d0af9e7bf8a8ab9a8b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a29a1ad79c69bf12d96cf7a540280182e</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>af8e7324cc60e8d44aeef0b3a3b67785a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa684a28bfb9dd8e15c3af04cfcab7979</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>adaf68f480a35ab7c76a48b4a42d2c788</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6927e8f4dd1b50a3a615b8b14d8c92f3</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a267a73495821f95f1e9f1b09d196a5ea</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aac7173a6691e1778ca45d296a7c1ea17</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixDenseEncap</name>
    <filename>classAbstractLinAlgPack_1_1MatrixDenseEncap.html</filename>
    <member kind="function">
      <type></type>
      <name>MatrixDenseEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseEncap.html</anchorfile>
      <anchor>a7ffbc7a515b02d3c240504c75aa82217</anchor>
      <arglist>(const MatrixOpGetGMS &amp;mat_get)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixDenseEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseEncap.html</anchorfile>
      <anchor>a60a0c5061eef1b74c1c5ea33da70c8ea</anchor>
      <arglist>(const MatrixOp &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MatrixDenseEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseEncap.html</anchorfile>
      <anchor>a6ec944c61bce9ae222f3b871aedb2022</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DMatrixSlice</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseEncap.html</anchorfile>
      <anchor>a88b33f60b3aa4135f9d2b9c1ed0d0dda</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixOpGetGMSMutable</name>
    <filename>classAbstractLinAlgPack_1_1MatrixOpGetGMSMutable.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixOpGetGMS</base>
    <member kind="function" virtualness="pure">
      <type>virtual DMatrixSlice</type>
      <name>get_gms_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpGetGMSMutable.html</anchorfile>
      <anchor>a4f608e6a335ad1a2ec96be2851248f4f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>commit_gms_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpGetGMSMutable.html</anchorfile>
      <anchor>a72fada2f0d43c2a31aa0fb3044952b8f</anchor>
      <arglist>(DMatrixSlice *gms_view)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const DMatrixSlice</type>
      <name>get_gms_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpGetGMS.html</anchorfile>
      <anchor>a8a41dfcf1ef8d092cfb05a63507a3fbb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>free_gms_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpGetGMS.html</anchorfile>
      <anchor>a4a6d727b29329e31cb8a394cf63f3b72</anchor>
      <arglist>(const DMatrixSlice *gms_view) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a3cf977e1ea2de043e4034825fbfff367</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7a2d853f87929633a47238ee7244ac98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2cf16b847f1f5eb912fc57c33908338b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad6aefd4a5ccb750ff066b3c94b43dbe5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa8a9edd1f07308d03fc1ddb6abe5607e</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a900f5bb64eb5c135e7f3a958da51918a</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac15a5369a10c424a12f9e8bc03344cb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2e81f486da8a59d0af9e7bf8a8ab9a8b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a29a1ad79c69bf12d96cf7a540280182e</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>af8e7324cc60e8d44aeef0b3a3b67785a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa684a28bfb9dd8e15c3af04cfcab7979</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>adaf68f480a35ab7c76a48b4a42d2c788</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6927e8f4dd1b50a3a615b8b14d8c92f3</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a267a73495821f95f1e9f1b09d196a5ea</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aac7173a6691e1778ca45d296a7c1ea17</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixDenseMutableEncap</name>
    <filename>classAbstractLinAlgPack_1_1MatrixDenseMutableEncap.html</filename>
    <member kind="function">
      <type></type>
      <name>MatrixDenseMutableEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseMutableEncap.html</anchorfile>
      <anchor>a5a0bf1f312021628f3bb73cc6199e96a</anchor>
      <arglist>(MatrixOpGetGMSMutable *mat_get)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixDenseMutableEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseMutableEncap.html</anchorfile>
      <anchor>a383ed5b9f1b0e0776268236eddea7d39</anchor>
      <arglist>(MatrixOp *mat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MatrixDenseMutableEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseMutableEncap.html</anchorfile>
      <anchor>af1a15a38a603890ffbb3a1c615fd7343</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DMatrixSlice</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseMutableEncap.html</anchorfile>
      <anchor>a5c715b8c2971bb61c142942ab6da15c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DMatrixSlice</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseMutableEncap.html</anchorfile>
      <anchor>a5e80dfdeb48b1d638be0a5be3124d2ff</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixOpGetGMSTri</name>
    <filename>classAbstractLinAlgPack_1_1MatrixOpGetGMSTri.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixOp</base>
    <member kind="function" virtualness="pure">
      <type>virtual const DenseLinAlgPack::DMatrixSliceTri</type>
      <name>get_tri_gms_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpGetGMSTri.html</anchorfile>
      <anchor>a8f0d308de594cd5e9bc79c9501b45eba</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>free_tri_gms_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpGetGMSTri.html</anchorfile>
      <anchor>a6453cd09a31aef10b2a34ed2679f77db</anchor>
      <arglist>(const DenseLinAlgPack::DMatrixSliceTri *tri_gms_view) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a3cf977e1ea2de043e4034825fbfff367</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7a2d853f87929633a47238ee7244ac98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2cf16b847f1f5eb912fc57c33908338b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad6aefd4a5ccb750ff066b3c94b43dbe5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa8a9edd1f07308d03fc1ddb6abe5607e</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a900f5bb64eb5c135e7f3a958da51918a</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac15a5369a10c424a12f9e8bc03344cb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2e81f486da8a59d0af9e7bf8a8ab9a8b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a29a1ad79c69bf12d96cf7a540280182e</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>af8e7324cc60e8d44aeef0b3a3b67785a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa684a28bfb9dd8e15c3af04cfcab7979</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>adaf68f480a35ab7c76a48b4a42d2c788</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6927e8f4dd1b50a3a615b8b14d8c92f3</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a267a73495821f95f1e9f1b09d196a5ea</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aac7173a6691e1778ca45d296a7c1ea17</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixDenseTriEncap</name>
    <filename>classAbstractLinAlgPack_1_1MatrixDenseTriEncap.html</filename>
    <member kind="function">
      <type></type>
      <name>MatrixDenseTriEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseTriEncap.html</anchorfile>
      <anchor>aa518fc27a36059e107c4bc68ffc7df9a</anchor>
      <arglist>(const MatrixOpGetGMSTri &amp;mat_get)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixDenseTriEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseTriEncap.html</anchorfile>
      <anchor>a59e10a6549636136b72130eafbad91ad</anchor>
      <arglist>(const MatrixOp &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MatrixDenseTriEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseTriEncap.html</anchorfile>
      <anchor>aab4431bd88049711b4809a8132c952eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DenseLinAlgPack::DMatrixSliceTri</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseTriEncap.html</anchorfile>
      <anchor>a50aba69638b878d20ab3c00ec8ea82d1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixOpNonsingSerial</name>
    <filename>classAbstractLinAlgPack_1_1MatrixOpNonsingSerial.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixOpSerial</base>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixNonsingSerial</base>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixOpNonsing</base>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a69ed2f9e955d38daee709d28ddbbb501</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a0a8cd0c468a9e89e8d21950007283aee</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ac112644c5c9e6385b8c909922a136ce3</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aa52d1811bce7da5643fd00c87ff969bb</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a0c25642e480ce79cc57de242c9e394cb</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2, value_type beta) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a73ad2e5d8e868f2958167fec5224bc8f</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>acad1bd0dba0266fc4d36c4562a939abb</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const DVectorSlice &amp;vs_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>af353ed747af5ecabac0ced94b45585d5</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a0680435b717a9130773fd1e2cd5987cc</anchor>
      <arglist>(const DVectorSlice &amp;vs_rhs1, BLAS_Cpp::Transp trans_rhs2, const DVectorSlice &amp;vs_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a30772cb896f1402c7e46ee6f1788de02</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, DMatrixSliceSym *sym_lhs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a204b236d132ab96b7f5f5cdeb586b997</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aa0780f38a2128a8cf11efcbcc33c0423</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a63d7abe5e5210fa68ff6d0189e1890de</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ab28fc5b3bcc12209a84b22e8d9a94d45</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSliceSym &amp;sym_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ad9ee3496da0040e3ad472ca95fce58ec</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSliceSym &amp;sym_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a4a61e59e15a0d4973a0257ed12859fca</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSliceTri &amp;tri_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a35b6920eda517708e854d322a175ed76</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSliceTri &amp;tri_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a17e15547a01e8c23037a294679d83358</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, DMatrixSliceSym *sym_lhs) const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a3558600e588a8349a8b13a690e5c4e36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a07569ed07da77f41d46631c016f48164</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a40474bc33d3a5c5dbca8e712549ea13c</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a846d28d6493cc12e77af4d7c96159dc8</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>afd045d56deccade6d2f7b230c0585e61</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a4e3105f997aed684cdaabbd5c1477336</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a61f7b06e5eb6005cb3bb68b44f5e94fe</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a78e505d8b91232e71197321611bfdefe</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aac0c7c00a9cd9ace9f7f956289e82d6a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a73550a4b667f3fbd8abec3ba5860ac39</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aeaf328aebafcf1693d891f42f5659a2f</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ae85b8284f9fc0f2dce80d71306f31be9</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a51e75eb0e77340b079c1ea14ce605729</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>acecf3ebfae7babc396e9b23861c3404e</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a1a643003c47f8bf193b180d210623e7d</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a004d4bab78da4b3a1cbeb73ebb1b51c7</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a3cf977e1ea2de043e4034825fbfff367</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa8a9edd1f07308d03fc1ddb6abe5607e</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aea7780a16afe595a8a24ee52b8e7fbf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aed562e6e0ba0c4e8921e5c1741065f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a95a45f7ee07a98edef8272c3985a83f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>ab6698046e9211f09fddad1f2472b4d4e</anchor>
      <arglist>(DVector *v_lhs, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>aa86e8a5c78ff1d58ff869c22959db1b6</anchor>
      <arglist>(DVectorSlice *vs_lhs, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>af3333aa4940578a7ad5f7acc4c2b50c3</anchor>
      <arglist>(DVector *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a7ed8b17277db1209102cdc310934cf49</anchor>
      <arglist>(DVectorSlice *vs_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>ac058fa0d64ffe35a8e246db81ba7493c</anchor>
      <arglist>(const DVectorSlice &amp;vs_rhs1, BLAS_Cpp::Transp trans_rhs2, const DVectorSlice &amp;vs_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a27b0d77f0c9a9a7c48f2cee99046de81</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a93b5797acbf76e94ba6549f2737d447b</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a2c05c4e55d56ede26854f75fe5d70348</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>af2df56400761a1771de68deab783e66b</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>ac6f4e521c2b92d6fb1fc89b5c7e0d14d</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a69f7bc72545dd50c2b3a520c0118a9fc</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a804f882a0cb0fcbd7129a1820bb24988</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>acd417462612f97dc5586c9be33d46734</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, const MatrixOpSerial &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>acb810c48dc4226763a63be2dd117659c</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixOpSerial &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>ac9dea530e49965e9b78b87eb701d0c99</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>aa426fdc3b0d2defaf8ff8dca17c6b920</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a41a53afa6785abae92c9d0597faf1706</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a92175f4f915b37047434f274a00e4bd8</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a2a9434bc081c41c624f749b83a7eb23f</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gaf6e4d634fc68bf70ddcfcdb59913d17d</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga7147936bfe4d44e1643390972120f1de</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixOpNonsing &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>aad51d5d2ebf68a901995278d7a30ba1b</anchor>
      <arglist>(const MatrixOpNonsing &amp;M)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mwons_mut_ptr_t</type>
      <name>clone_mwons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>a7dfccfae507ecbc5a0311303b9fb6640</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mwons_ptr_t</type>
      <name>clone_mwons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>ab430be6b47866a8382813854c3632196</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_cond_num</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>a4212a7fac53cba1ece06aef6bb311586</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function">
      <type>mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>a13f7228c0438959e7fd26d34fece4499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>a3d2c6cba4ccc28ee6ab97cba9ed000ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mns_mut_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>ad419c8f1e1126d15d89ddffee016bb7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_mns_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>a0ea33aa12e078c37dc8b7da25d722938</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixOpSerial</name>
    <filename>classAbstractLinAlgPack_1_1MatrixOpSerial.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a69ed2f9e955d38daee709d28ddbbb501</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a0a8cd0c468a9e89e8d21950007283aee</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ac112644c5c9e6385b8c909922a136ce3</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aa52d1811bce7da5643fd00c87ff969bb</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a0c25642e480ce79cc57de242c9e394cb</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2, value_type beta) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a73ad2e5d8e868f2958167fec5224bc8f</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>acad1bd0dba0266fc4d36c4562a939abb</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const DVectorSlice &amp;vs_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>af353ed747af5ecabac0ced94b45585d5</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a0680435b717a9130773fd1e2cd5987cc</anchor>
      <arglist>(const DVectorSlice &amp;vs_rhs1, BLAS_Cpp::Transp trans_rhs2, const DVectorSlice &amp;vs_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a30772cb896f1402c7e46ee6f1788de02</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, DMatrixSliceSym *sym_lhs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a204b236d132ab96b7f5f5cdeb586b997</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aa0780f38a2128a8cf11efcbcc33c0423</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a63d7abe5e5210fa68ff6d0189e1890de</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ab28fc5b3bcc12209a84b22e8d9a94d45</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSliceSym &amp;sym_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ad9ee3496da0040e3ad472ca95fce58ec</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSliceSym &amp;sym_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a4a61e59e15a0d4973a0257ed12859fca</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSliceTri &amp;tri_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a35b6920eda517708e854d322a175ed76</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSliceTri &amp;tri_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a17e15547a01e8c23037a294679d83358</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, DMatrixSliceSym *sym_lhs) const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a3558600e588a8349a8b13a690e5c4e36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a07569ed07da77f41d46631c016f48164</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a40474bc33d3a5c5dbca8e712549ea13c</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a846d28d6493cc12e77af4d7c96159dc8</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>afd045d56deccade6d2f7b230c0585e61</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a4e3105f997aed684cdaabbd5c1477336</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a61f7b06e5eb6005cb3bb68b44f5e94fe</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a78e505d8b91232e71197321611bfdefe</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aac0c7c00a9cd9ace9f7f956289e82d6a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a73550a4b667f3fbd8abec3ba5860ac39</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aeaf328aebafcf1693d891f42f5659a2f</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ae85b8284f9fc0f2dce80d71306f31be9</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a51e75eb0e77340b079c1ea14ce605729</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>acecf3ebfae7babc396e9b23861c3404e</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a1a643003c47f8bf193b180d210623e7d</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a004d4bab78da4b3a1cbeb73ebb1b51c7</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a3cf977e1ea2de043e4034825fbfff367</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7a2d853f87929633a47238ee7244ac98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2cf16b847f1f5eb912fc57c33908338b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa8a9edd1f07308d03fc1ddb6abe5607e</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aea7780a16afe595a8a24ee52b8e7fbf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aed562e6e0ba0c4e8921e5c1741065f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a95a45f7ee07a98edef8272c3985a83f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymAddDelUpdateable</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixBase</base>
    <class kind="struct">AbstractLinAlgPack::MatrixSymAddDelUpdateable::Inertia</class>
    <class kind="class">AbstractLinAlgPack::MatrixSymAddDelUpdateable::MaxSizeExceededException</class>
    <class kind="struct">AbstractLinAlgPack::MatrixSymAddDelUpdateable::PivotTolerances</class>
    <class kind="class">AbstractLinAlgPack::MatrixSymAddDelUpdateable::SingularUpdateException</class>
    <class kind="class">AbstractLinAlgPack::MatrixSymAddDelUpdateable::WarnNearSingularUpdateException</class>
    <class kind="class">AbstractLinAlgPack::MatrixSymAddDelUpdateable::WrongInertiaUpdateException</class>
    <member kind="enumeration">
      <name>EEigenValType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable.html</anchorfile>
      <anchor>ab66d9318e0448f3fe0fa67c6730d32ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixSymAddDelUpdateable</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable.html</anchorfile>
      <anchor>ab3225c9b1c72b62cee4c5d94e7faaf76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable.html</anchorfile>
      <anchor>af4ba401dfd4bf32e4fb0bd72646ccd0d</anchor>
      <arglist>(value_type alpha, size_type max_size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable.html</anchorfile>
      <anchor>a7a18a3dc6a5c0f32970e66bc8d844a64</anchor>
      <arglist>(const DMatrixSliceSym &amp;A, size_type max_size, bool force_factorization, Inertia inertia, PivotTolerances pivot_tols=PivotTolerances())=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_type</type>
      <name>max_size</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable.html</anchorfile>
      <anchor>af00517b8fcbdfb721eb4b845e87f787d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Inertia</type>
      <name>inertia</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable.html</anchorfile>
      <anchor>a8ddea2b0f8ff15d66bb77bdf3d2acba4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set_uninitialized</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable.html</anchorfile>
      <anchor>a9f0df50cc5e6c89ec45910dd3c26ea13</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>augment_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable.html</anchorfile>
      <anchor>ad173aa5a6982c561e7f645886da34c8b</anchor>
      <arglist>(const DVectorSlice *t, value_type alpha, bool force_refactorization=true, EEigenValType add_eigen_val=EIGEN_VAL_UNKNOWN, PivotTolerances pivot_tols=PivotTolerances())=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>delete_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable.html</anchorfile>
      <anchor>a6d855dd66a0e99195174001b203e9794</anchor>
      <arglist>(size_type jd, bool force_refactorization=true, EEigenValType drop_eigen_val=EIGEN_VAL_UNKNOWN, PivotTolerances pivot_tols=PivotTolerances())=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a74973b0f184c7bf0eadd56548119effa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a67d2a17263ae9c682990cf429a26321a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aea7780a16afe595a8a24ee52b8e7fbf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aed562e6e0ba0c4e8921e5c1741065f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a95a45f7ee07a98edef8272c3985a83f3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AbstractLinAlgPack::MatrixSymAddDelUpdateable::Inertia</name>
    <filename>structAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable_1_1Inertia.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>neg_eigens</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable_1_1Inertia.html</anchorfile>
      <anchor>ae31384c13b4d169900778d6bdc1636f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>zero_eigens</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable_1_1Inertia.html</anchorfile>
      <anchor>ad2c6746950149f95ff7c50bf792a8abf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>pos_eigens</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable_1_1Inertia.html</anchorfile>
      <anchor>ade37c4c9f96b9d4d6161a84a94e01a3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymAddDelUpdateable::MaxSizeExceededException</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable_1_1MaxSizeExceededException.html</filename>
  </compound>
  <compound kind="struct">
    <name>AbstractLinAlgPack::MatrixSymAddDelUpdateable::PivotTolerances</name>
    <filename>structAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable_1_1PivotTolerances.html</filename>
    <member kind="variable">
      <type>value_type</type>
      <name>warning_tol</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable_1_1PivotTolerances.html</anchorfile>
      <anchor>adf2d8e399c96982fb6fa2fda72bf53cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>singular_tol</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable_1_1PivotTolerances.html</anchorfile>
      <anchor>af68754483ceace933aec3a80510cbf80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>wrong_inertia_tol</name>
      <anchorfile>structAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable_1_1PivotTolerances.html</anchorfile>
      <anchor>a718af3f7f584dec19bc51896b06de83c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymAddDelUpdateable::SingularUpdateException</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable_1_1SingularUpdateException.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymAddDelUpdateable::WarnNearSingularUpdateException</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable_1_1WarnNearSingularUpdateException.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymAddDelUpdateable::WrongInertiaUpdateException</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymAddDelUpdateable_1_1WrongInertiaUpdateException.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymDenseInitialize</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymDenseInitialize.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixBase</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDenseInitialize.html</anchorfile>
      <anchor>a1f0be193af157d9ef265fe4df64da8c5</anchor>
      <arglist>(const DMatrixSliceSym &amp;M)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a74973b0f184c7bf0eadd56548119effa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a67d2a17263ae9c682990cf429a26321a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aea7780a16afe595a8a24ee52b8e7fbf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aed562e6e0ba0c4e8921e5c1741065f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a95a45f7ee07a98edef8272c3985a83f3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymDiagSparse</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymDiagSparse.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixSymOpSerial</base>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixConvertToSparse</base>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparse.html</anchorfile>
      <anchor>a3f086cafa79577878f5e3dbb9c39f81c</anchor>
      <arglist>(size_type, num_updates_at_once)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixSymDiagSparse</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparse.html</anchorfile>
      <anchor>a71ed3a157bb45a39367bce87275a8666</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpSerial.html</anchorfile>
      <anchor>a86d2e092aef133db2175e13f9b153598</anchor>
      <arglist>(DMatrixSliceSym *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const GenPermMatrixSlice &amp;gpms_rhs, BLAS_Cpp::Transp gpms_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpSerial.html</anchorfile>
      <anchor>aae83a908d3f9e3beaf1645653989e669</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpSerial.html</anchorfile>
      <anchor>ab84daf6931aa5e5e44fd0b850f45a615</anchor>
      <arglist>(MatrixSymOp *symwo_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const GenPermMatrixSlice &amp;gpms_rhs, BLAS_Cpp::Transp gpms_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpSerial.html</anchorfile>
      <anchor>ace43aa42f45ebeab3259959b77111501</anchor>
      <arglist>(MatrixSymOp *symwo_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp mwo_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a69ed2f9e955d38daee709d28ddbbb501</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a0a8cd0c468a9e89e8d21950007283aee</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ac112644c5c9e6385b8c909922a136ce3</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aa52d1811bce7da5643fd00c87ff969bb</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a73ad2e5d8e868f2958167fec5224bc8f</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>acad1bd0dba0266fc4d36c4562a939abb</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const DVectorSlice &amp;vs_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>af353ed747af5ecabac0ced94b45585d5</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a0680435b717a9130773fd1e2cd5987cc</anchor>
      <arglist>(const DVectorSlice &amp;vs_rhs1, BLAS_Cpp::Transp trans_rhs2, const DVectorSlice &amp;vs_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a30772cb896f1402c7e46ee6f1788de02</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, DMatrixSliceSym *sym_lhs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a204b236d132ab96b7f5f5cdeb586b997</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aa0780f38a2128a8cf11efcbcc33c0423</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a63d7abe5e5210fa68ff6d0189e1890de</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ab28fc5b3bcc12209a84b22e8d9a94d45</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSliceSym &amp;sym_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ad9ee3496da0040e3ad472ca95fce58ec</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSliceSym &amp;sym_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a4a61e59e15a0d4973a0257ed12859fca</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSliceTri &amp;tri_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a35b6920eda517708e854d322a175ed76</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSliceTri &amp;tri_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a17e15547a01e8c23037a294679d83358</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, DMatrixSliceSym *sym_lhs) const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a3558600e588a8349a8b13a690e5c4e36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a846d28d6493cc12e77af4d7c96159dc8</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>afd045d56deccade6d2f7b230c0585e61</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a4e3105f997aed684cdaabbd5c1477336</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a61f7b06e5eb6005cb3bb68b44f5e94fe</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a78e505d8b91232e71197321611bfdefe</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aac0c7c00a9cd9ace9f7f956289e82d6a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a73550a4b667f3fbd8abec3ba5860ac39</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aeaf328aebafcf1693d891f42f5659a2f</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ae85b8284f9fc0f2dce80d71306f31be9</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a51e75eb0e77340b079c1ea14ce605729</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>acecf3ebfae7babc396e9b23861c3404e</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a1a643003c47f8bf193b180d210623e7d</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a004d4bab78da4b3a1cbeb73ebb1b51c7</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixSymOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a8ce5fe62685d5d0e1ac9491047a5022d</anchor>
      <arglist>(const MatrixSymOp &amp;M)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswo_mut_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a5756056d870b0ba2d97205e2452e0df9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswo_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>aea20b6d17543d7265df808613b782dd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>abc0f88218955cbce2499cfdf6dc8fea8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a514265a2bb36e0cb12df11086d59886d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a9ab3983bbf47189ffb99a6a191e79ded</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a3cf977e1ea2de043e4034825fbfff367</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa8a9edd1f07308d03fc1ddb6abe5607e</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const SpVectorSlice</type>
      <name>diag</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparse.html</anchorfile>
      <anchor>a11bd3596d1b0e83db671c7b19ccc2cb3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparse.html</anchorfile>
      <anchor>aec8ebc65ac9ee8f2efe123fc887f8d37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparse.html</anchorfile>
      <anchor>a67b2935e6061ca771295feb53279c26f</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparse.html</anchorfile>
      <anchor>a88cbc8d75f9492e784ba44f44f59062c</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparse.html</anchorfile>
      <anchor>a406b41860468540f1b51ad52ced94860</anchor>
      <arglist>(DMatrixSliceSym *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const MatrixOpSerial &amp;mwo_rhs, BLAS_Cpp::Transp mwo_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>num_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparse.html</anchorfile>
      <anchor>ac0e4b4a060448732d64c2c606f438baa</anchor>
      <arglist>(EExtractRegion extract_region, EElementUniqueness element_uniqueness) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coor_extract_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymDiagSparse.html</anchorfile>
      <anchor>a26d2cc1a0a5e82b1cb223cdf5df254ab</anchor>
      <arglist>(EExtractRegion extract_region, EElementUniqueness element_uniqueness, const index_type len_Aval, value_type Aval[], const index_type len_Aij, index_type Arow[], index_type Acol[], const index_type row_offset, const index_type col_offset) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatRhsPlaceHolder</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a9b0d347deb8c731c157edcd256859842</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EExtractRegion</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRACT_FULL_MATRIX</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683a4237dcf369916295535767413796fb34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRACT_UPPER_TRIANGULAR</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683a76c519aba5771f1bfa600b478007ac12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRACT_LOWER_TRIANGULAR</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>aa3cb8da7f487553bf12bd57ed1aa6683ab2eb3008099f4c6667a3db1edfe85f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EElementUniqueness</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>ade5634947e2a5d18ec08886cfecee943</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ELEMENTS_FORCE_UNIQUE</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>ade5634947e2a5d18ec08886cfecee943a5b41e2992dde659a1defb4c0048c2260</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ELEMENTS_ALLOW_DUPLICATES_SUM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixConvertToSparse.html</anchorfile>
      <anchor>ade5634947e2a5d18ec08886cfecee943a53ffd0cf14308b42d7d0f02b8a37cc5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymNonsingSerial</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymNonsingSerial.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixNonsingSerial</base>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixSymNonsing</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsingSerial.html</anchorfile>
      <anchor>a5d0f4225e1b2f84193973d3b3dc3316c</anchor>
      <arglist>(DMatrixSliceSym *sym_gms_lhs, value_type alpha, const MatrixOpSerial &amp;mwo, BLAS_Cpp::Transp mwo_trans, EMatrixDummyArg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StMtInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsingSerial.html</anchorfile>
      <anchor>a900a24a0770edf0d18bb21699767af40</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, const MatrixOp &amp;mwo, BLAS_Cpp::Transp mwo_trans, EMatrixDummyArg) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatrixDummyArg</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>aa0a0c3370967939ec36d1c801963f8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>ab6698046e9211f09fddad1f2472b4d4e</anchor>
      <arglist>(DVector *v_lhs, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>aa86e8a5c78ff1d58ff869c22959db1b6</anchor>
      <arglist>(DVectorSlice *vs_lhs, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>af3333aa4940578a7ad5f7acc4c2b50c3</anchor>
      <arglist>(DVector *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a7ed8b17277db1209102cdc310934cf49</anchor>
      <arglist>(DVectorSlice *vs_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>ac058fa0d64ffe35a8e246db81ba7493c</anchor>
      <arglist>(const DVectorSlice &amp;vs_rhs1, BLAS_Cpp::Transp trans_rhs2, const DVectorSlice &amp;vs_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a27b0d77f0c9a9a7c48f2cee99046de81</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a93b5797acbf76e94ba6549f2737d447b</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a2c05c4e55d56ede26854f75fe5d70348</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>af2df56400761a1771de68deab783e66b</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>ac6f4e521c2b92d6fb1fc89b5c7e0d14d</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a69f7bc72545dd50c2b3a520c0118a9fc</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a804f882a0cb0fcbd7129a1820bb24988</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>acd417462612f97dc5586c9be33d46734</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, const MatrixOpSerial &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>acb810c48dc4226763a63be2dd117659c</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixOpSerial &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>ac9dea530e49965e9b78b87eb701d0c99</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>aa426fdc3b0d2defaf8ff8dca17c6b920</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a41a53afa6785abae92c9d0597faf1706</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a92175f4f915b37047434f274a00e4bd8</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a2a9434bc081c41c624f749b83a7eb23f</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gaf6e4d634fc68bf70ddcfcdb59913d17d</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga7147936bfe4d44e1643390972120f1de</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a74973b0f184c7bf0eadd56548119effa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a67d2a17263ae9c682990cf429a26321a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aea7780a16afe595a8a24ee52b8e7fbf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aed562e6e0ba0c4e8921e5c1741065f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a95a45f7ee07a98edef8272c3985a83f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_msns_mut_ptr_t</type>
      <name>clone_msns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>aecb8a0f265d26411d6a6426bb9feda1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_msns_ptr_t</type>
      <name>clone_msns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>ab5e7901701d684f23648fe4c13b35669</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mns_mut_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>a075da4fa4e979cd51c536401a910e34c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_mns_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>a503898d68af890b6402dd86952b668c8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymOpGetGMSSym</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymOpGetGMSSym.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixSymOp</base>
    <member kind="function" virtualness="pure">
      <type>virtual const DenseLinAlgPack::DMatrixSliceSym</type>
      <name>get_sym_gms_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpGetGMSSym.html</anchorfile>
      <anchor>a5da94904a25489d1b731d60e6331c93d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>free_sym_gms_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpGetGMSSym.html</anchorfile>
      <anchor>a6a53782ae16e34b1ca17fbc0aa233170</anchor>
      <arglist>(const DenseLinAlgPack::DMatrixSliceSym *sym_gms_view) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixSymOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a8ce5fe62685d5d0e1ac9491047a5022d</anchor>
      <arglist>(const MatrixSymOp &amp;M)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswo_mut_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a5756056d870b0ba2d97205e2452e0df9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswo_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>aea20b6d17543d7265df808613b782dd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>abc0f88218955cbce2499cfdf6dc8fea8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a35110d50c6c1d5d1c4375316db91c57f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a514265a2bb36e0cb12df11086d59886d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a9ab3983bbf47189ffb99a6a191e79ded</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a3cf977e1ea2de043e4034825fbfff367</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad6aefd4a5ccb750ff066b3c94b43dbe5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa8a9edd1f07308d03fc1ddb6abe5607e</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatRhsPlaceHolder</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a9b0d347deb8c731c157edcd256859842</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a8d16dbc3d6cea0f84c47c6139e8339ee</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const GenPermMatrixSlice &amp;gpms_rhs, BLAS_Cpp::Transp gpms_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a0d49cf30e99144b4404222bec3c1bc6e</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp mwo_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a900f5bb64eb5c135e7f3a958da51918a</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac15a5369a10c424a12f9e8bc03344cb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2e81f486da8a59d0af9e7bf8a8ab9a8b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a29a1ad79c69bf12d96cf7a540280182e</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>af8e7324cc60e8d44aeef0b3a3b67785a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa684a28bfb9dd8e15c3af04cfcab7979</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>adaf68f480a35ab7c76a48b4a42d2c788</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6927e8f4dd1b50a3a615b8b14d8c92f3</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a267a73495821f95f1e9f1b09d196a5ea</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aac7173a6691e1778ca45d296a7c1ea17</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixDenseSymEncap</name>
    <filename>classAbstractLinAlgPack_1_1MatrixDenseSymEncap.html</filename>
    <member kind="function">
      <type></type>
      <name>MatrixDenseSymEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseSymEncap.html</anchorfile>
      <anchor>a3e2ea00cc9f810ff2b51f3755a57a395</anchor>
      <arglist>(const MatrixSymOpGetGMSSym &amp;mat_get)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixDenseSymEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseSymEncap.html</anchorfile>
      <anchor>a469c3aead7b6bbe7ea408556551868cc</anchor>
      <arglist>(const MatrixSymOp &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MatrixDenseSymEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseSymEncap.html</anchorfile>
      <anchor>ac9bfae24c5738ac08617f76a3cef1296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DenseLinAlgPack::DMatrixSliceSym</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseSymEncap.html</anchorfile>
      <anchor>ab7b818d210bf033061adf89c8ef086f7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymOpGetGMSSymMutable</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymOpGetGMSSymMutable.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixSymOpGetGMSSym</base>
    <member kind="function" virtualness="pure">
      <type>virtual DenseLinAlgPack::DMatrixSliceSym</type>
      <name>get_sym_gms_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpGetGMSSymMutable.html</anchorfile>
      <anchor>a46f2d4ab9344f371bc55497be6f45221</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>commit_sym_gms_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpGetGMSSymMutable.html</anchorfile>
      <anchor>ab9e5ff733c7c80006bec70d21fd7433a</anchor>
      <arglist>(DenseLinAlgPack::DMatrixSliceSym *sym_gms_view)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const DenseLinAlgPack::DMatrixSliceSym</type>
      <name>get_sym_gms_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpGetGMSSym.html</anchorfile>
      <anchor>a5da94904a25489d1b731d60e6331c93d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>free_sym_gms_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpGetGMSSym.html</anchorfile>
      <anchor>a6a53782ae16e34b1ca17fbc0aa233170</anchor>
      <arglist>(const DenseLinAlgPack::DMatrixSliceSym *sym_gms_view) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixSymOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a8ce5fe62685d5d0e1ac9491047a5022d</anchor>
      <arglist>(const MatrixSymOp &amp;M)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswo_mut_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a5756056d870b0ba2d97205e2452e0df9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswo_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>aea20b6d17543d7265df808613b782dd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>abc0f88218955cbce2499cfdf6dc8fea8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a35110d50c6c1d5d1c4375316db91c57f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a514265a2bb36e0cb12df11086d59886d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a9ab3983bbf47189ffb99a6a191e79ded</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a3cf977e1ea2de043e4034825fbfff367</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad6aefd4a5ccb750ff066b3c94b43dbe5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa8a9edd1f07308d03fc1ddb6abe5607e</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatRhsPlaceHolder</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a9b0d347deb8c731c157edcd256859842</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a8d16dbc3d6cea0f84c47c6139e8339ee</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const GenPermMatrixSlice &amp;gpms_rhs, BLAS_Cpp::Transp gpms_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a0d49cf30e99144b4404222bec3c1bc6e</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp mwo_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a900f5bb64eb5c135e7f3a958da51918a</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac15a5369a10c424a12f9e8bc03344cb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2e81f486da8a59d0af9e7bf8a8ab9a8b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a29a1ad79c69bf12d96cf7a540280182e</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>af8e7324cc60e8d44aeef0b3a3b67785a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa684a28bfb9dd8e15c3af04cfcab7979</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>adaf68f480a35ab7c76a48b4a42d2c788</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6927e8f4dd1b50a3a615b8b14d8c92f3</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a267a73495821f95f1e9f1b09d196a5ea</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aac7173a6691e1778ca45d296a7c1ea17</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixDenseSymMutableEncap</name>
    <filename>classAbstractLinAlgPack_1_1MatrixDenseSymMutableEncap.html</filename>
    <member kind="function">
      <type></type>
      <name>MatrixDenseSymMutableEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseSymMutableEncap.html</anchorfile>
      <anchor>abdcb1154debb743143e6a2c0cb80643b</anchor>
      <arglist>(MatrixSymOpGetGMSSymMutable *mat_get)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixDenseSymMutableEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseSymMutableEncap.html</anchorfile>
      <anchor>a5b9bdbc8bb1872f1c6cdd75a24840670</anchor>
      <arglist>(MatrixSymOp *mat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MatrixDenseSymMutableEncap</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseSymMutableEncap.html</anchorfile>
      <anchor>a61ccb0623d48a6f08d2ccbccce4f67de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DenseLinAlgPack::DMatrixSliceSym</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseSymMutableEncap.html</anchorfile>
      <anchor>a086f1e33f83fb00fe32aec35560fc81c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DenseLinAlgPack::DMatrixSliceSym</type>
      <name>operator()</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixDenseSymMutableEncap.html</anchorfile>
      <anchor>a7ff771304ffae9fcfce2b5747204ea6e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymOpNonsingSerial</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymOpNonsingSerial.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixSymOpSerial</base>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixSymNonsingSerial</base>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixOpNonsing</base>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixSymOpNonsing</base>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatRhsPlaceHolder</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a9b0d347deb8c731c157edcd256859842</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatrixDummyArg</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsing.html</anchorfile>
      <anchor>aa0a0c3370967939ec36d1c801963f8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpSerial.html</anchorfile>
      <anchor>a86d2e092aef133db2175e13f9b153598</anchor>
      <arglist>(DMatrixSliceSym *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const GenPermMatrixSlice &amp;gpms_rhs, BLAS_Cpp::Transp gpms_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpSerial.html</anchorfile>
      <anchor>a44dcd26d7a0898b4ce679ad3fd348572</anchor>
      <arglist>(DMatrixSliceSym *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const MatrixOpSerial &amp;mwo_rhs, BLAS_Cpp::Transp mwo_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpSerial.html</anchorfile>
      <anchor>aae83a908d3f9e3beaf1645653989e669</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpSerial.html</anchorfile>
      <anchor>ab84daf6931aa5e5e44fd0b850f45a615</anchor>
      <arglist>(MatrixSymOp *symwo_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const GenPermMatrixSlice &amp;gpms_rhs, BLAS_Cpp::Transp gpms_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpSerial.html</anchorfile>
      <anchor>ace43aa42f45ebeab3259959b77111501</anchor>
      <arglist>(MatrixSymOp *symwo_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp mwo_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsingSerial.html</anchorfile>
      <anchor>a5d0f4225e1b2f84193973d3b3dc3316c</anchor>
      <arglist>(DMatrixSliceSym *sym_gms_lhs, value_type alpha, const MatrixOpSerial &amp;mwo, BLAS_Cpp::Transp mwo_trans, EMatrixDummyArg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StMtInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymNonsingSerial.html</anchorfile>
      <anchor>a900a24a0770edf0d18bb21699767af40</anchor>
      <arglist>(MatrixSymOp *sym_lhs, value_type alpha, const MatrixOp &amp;mwo, BLAS_Cpp::Transp mwo_trans, EMatrixDummyArg) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>ab6698046e9211f09fddad1f2472b4d4e</anchor>
      <arglist>(DVector *v_lhs, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>aa86e8a5c78ff1d58ff869c22959db1b6</anchor>
      <arglist>(DVectorSlice *vs_lhs, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>af3333aa4940578a7ad5f7acc4c2b50c3</anchor>
      <arglist>(DVector *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a7ed8b17277db1209102cdc310934cf49</anchor>
      <arglist>(DVectorSlice *vs_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>ac058fa0d64ffe35a8e246db81ba7493c</anchor>
      <arglist>(const DVectorSlice &amp;vs_rhs1, BLAS_Cpp::Transp trans_rhs2, const DVectorSlice &amp;vs_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a27b0d77f0c9a9a7c48f2cee99046de81</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a93b5797acbf76e94ba6549f2737d447b</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a2c05c4e55d56ede26854f75fe5d70348</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>af2df56400761a1771de68deab783e66b</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>ac6f4e521c2b92d6fb1fc89b5c7e0d14d</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a69f7bc72545dd50c2b3a520c0118a9fc</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a804f882a0cb0fcbd7129a1820bb24988</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>acd417462612f97dc5586c9be33d46734</anchor>
      <arglist>(DMatrix *gm_lhs, value_type alpha, const MatrixOpSerial &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>acb810c48dc4226763a63be2dd117659c</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const MatrixOpSerial &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>ac9dea530e49965e9b78b87eb701d0c99</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>aa426fdc3b0d2defaf8ff8dca17c6b920</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a41a53afa6785abae92c9d0597faf1706</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StInvMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a92175f4f915b37047434f274a00e4bd8</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>M_StMtInvM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixNonsingSerial.html</anchorfile>
      <anchor>a2a9434bc081c41c624f749b83a7eb23f</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gaf6e4d634fc68bf70ddcfcdb59913d17d</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga7147936bfe4d44e1643390972120f1de</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>aea7780a16afe595a8a24ee52b8e7fbf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a95a45f7ee07a98edef8272c3985a83f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixOpNonsing &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>aad51d5d2ebf68a901995278d7a30ba1b</anchor>
      <arglist>(const MatrixOpNonsing &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_cond_num</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpNonsing.html</anchorfile>
      <anchor>a4212a7fac53cba1ece06aef6bb311586</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixSymOpNonsing &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a97f3607578d9bfe8c8eff4047c9a221b</anchor>
      <arglist>(const MatrixSymOpNonsing &amp;M)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswons_mut_ptr_t</type>
      <name>clone_mswons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>adcb3e0d4fa8c403e53a9925e03f13d75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswons_ptr_t</type>
      <name>clone_mswons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>af8f7fb940ae76640fffcb2369d348215</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mswo_mut_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a24e442575ef17ff26b0a98bc77a517e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_mswo_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>af2efe8854d7c9fce7aa6bfa4979b9415</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_msns_mut_ptr_t</type>
      <name>clone_msns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a9cc6e0e93fa53e81a0676141ead482ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_msns_ptr_t</type>
      <name>clone_msns</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a2320ebc062b2ad34133b08d1f11747ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mwons_mut_ptr_t</type>
      <name>clone_mwons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>a735f1cbda7da061664292ce97449071d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_mwons_ptr_t</type>
      <name>clone_mwons</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpNonsing.html</anchorfile>
      <anchor>ae7000ebe87bae5a8242771f00f9b043f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixSymOpSerial</name>
    <filename>classAbstractLinAlgPack_1_1MatrixSymOpSerial.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixOpSerial</base>
    <base virtualness="virtual">AbstractLinAlgPack::MatrixSymOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpSerial.html</anchorfile>
      <anchor>a86d2e092aef133db2175e13f9b153598</anchor>
      <arglist>(DMatrixSliceSym *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const GenPermMatrixSlice &amp;gpms_rhs, BLAS_Cpp::Transp gpms_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpSerial.html</anchorfile>
      <anchor>a44dcd26d7a0898b4ce679ad3fd348572</anchor>
      <arglist>(DMatrixSliceSym *sym_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const MatrixOpSerial &amp;mwo_rhs, BLAS_Cpp::Transp mwo_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a69ed2f9e955d38daee709d28ddbbb501</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a0a8cd0c468a9e89e8d21950007283aee</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ac112644c5c9e6385b8c909922a136ce3</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aa52d1811bce7da5643fd00c87ff969bb</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a0c25642e480ce79cc57de242c9e394cb</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2, value_type beta) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a73ad2e5d8e868f2958167fec5224bc8f</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>acad1bd0dba0266fc4d36c4562a939abb</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const DVectorSlice &amp;vs_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>af353ed747af5ecabac0ced94b45585d5</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a0680435b717a9130773fd1e2cd5987cc</anchor>
      <arglist>(const DVectorSlice &amp;vs_rhs1, BLAS_Cpp::Transp trans_rhs2, const DVectorSlice &amp;vs_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a30772cb896f1402c7e46ee6f1788de02</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, DMatrixSliceSym *sym_lhs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a204b236d132ab96b7f5f5cdeb586b997</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aa0780f38a2128a8cf11efcbcc33c0423</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a63d7abe5e5210fa68ff6d0189e1890de</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ab28fc5b3bcc12209a84b22e8d9a94d45</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSliceSym &amp;sym_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ad9ee3496da0040e3ad472ca95fce58ec</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSliceSym &amp;sym_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a4a61e59e15a0d4973a0257ed12859fca</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSliceTri &amp;tri_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a35b6920eda517708e854d322a175ed76</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSliceTri &amp;tri_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a17e15547a01e8c23037a294679d83358</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, DMatrixSliceSym *sym_lhs) const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a3558600e588a8349a8b13a690e5c4e36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a40474bc33d3a5c5dbca8e712549ea13c</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a846d28d6493cc12e77af4d7c96159dc8</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>afd045d56deccade6d2f7b230c0585e61</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a4e3105f997aed684cdaabbd5c1477336</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a61f7b06e5eb6005cb3bb68b44f5e94fe</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a78e505d8b91232e71197321611bfdefe</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aac0c7c00a9cd9ace9f7f956289e82d6a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a73550a4b667f3fbd8abec3ba5860ac39</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aeaf328aebafcf1693d891f42f5659a2f</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ae85b8284f9fc0f2dce80d71306f31be9</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a51e75eb0e77340b079c1ea14ce605729</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>acecf3ebfae7babc396e9b23861c3404e</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a1a643003c47f8bf193b180d210623e7d</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a004d4bab78da4b3a1cbeb73ebb1b51c7</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixSymOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a8ce5fe62685d5d0e1ac9491047a5022d</anchor>
      <arglist>(const MatrixSymOp &amp;M)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswo_mut_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a5756056d870b0ba2d97205e2452e0df9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mswo_ptr_t</type>
      <name>clone_mswo</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>aea20b6d17543d7265df808613b782dd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>abc0f88218955cbce2499cfdf6dc8fea8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a514265a2bb36e0cb12df11086d59886d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a9ab3983bbf47189ffb99a6a191e79ded</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aaf0f5cab93fac512d64245f8f2de7444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac42fe99585a0e90aa9b45da2587ac2cb</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a3cf977e1ea2de043e4034825fbfff367</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa8a9edd1f07308d03fc1ddb6abe5607e</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpSerial.html</anchorfile>
      <anchor>aae83a908d3f9e3beaf1645653989e669</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpSerial.html</anchorfile>
      <anchor>ab84daf6931aa5e5e44fd0b850f45a615</anchor>
      <arglist>(MatrixSymOp *symwo_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const GenPermMatrixSlice &amp;gpms_rhs, BLAS_Cpp::Transp gpms_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mp_StMtMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOpSerial.html</anchorfile>
      <anchor>ace43aa42f45ebeab3259959b77111501</anchor>
      <arglist>(MatrixSymOp *symwo_lhs, value_type alpha, EMatRhsPlaceHolder dummy_place_holder, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp mwo_rhs_trans, value_type beta) const </arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatRhsPlaceHolder</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixSymOp.html</anchorfile>
      <anchor>a9b0d347deb8c731c157edcd256859842</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa1b6ebafaadc8c6f63bd297e02798cd6</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a1dd8d90c637f4f2bfdc4c49bde2f70f5</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MultiVectorMutableCols</name>
    <filename>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::MultiVectorMutable</base>
    <member kind="function">
      <type></type>
      <name>MultiVectorMutableCols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a4f38becc81750b78e0adc7b18634ef8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiVectorMutableCols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a47f420d230bba11e598e6f02230b9659</anchor>
      <arglist>(const Teuchos::RCP&lt; const VectorSpace &gt; &amp;space_cols, const Teuchos::RCP&lt; const VectorSpace &gt; &amp;space_rows, Teuchos::RCP&lt; VectorMutable &gt; col_vecs[]=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a29a18535b531f487221924ac896cd50e</anchor>
      <arglist>(const Teuchos::RCP&lt; const VectorSpace &gt; &amp;space_cols, const Teuchos::RCP&lt; const VectorSpace &gt; &amp;space_rows, Teuchos::RCP&lt; VectorMutable &gt; col_vecs[]=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_uninitialized</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a20e70beef352e2e0595fd09c14061603</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a8fc18f0aa058a8510cd0ff03f50af8a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a14419a151999adcc9103d0a36e8f271b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a90690ceb778df6985f61d2632e61aeb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a67551c8a00f72f25533ce8b65cf2dd99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a2ec53e13c1ff13d6de59a0899cf24aac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a0e72b4082781caf13731a16cdfb5cbd8</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function">
      <type>MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a0430ed0cae2987212f52b5148c57dbae</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function">
      <type>mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a9651a3a5a75118d71fd54d5ad81ede22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a4bd3f3a2b8d44a5850d51bb5c2b01dbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a4649e197cfd704fb316936cfa9f2b916</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a4bc13176fd8433b7acdf1f482b82bd51</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a1d1909d392f5abfa9f9a3bd436e0c0bb</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function">
      <type>access_by_t</type>
      <name>access_by</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a50afd3b4a38772037b5330eacf201028</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vec_mut_ptr_t</type>
      <name>col</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>aaa6137281baa43bd227ec275a128431b</anchor>
      <arglist>(index_type j)</arglist>
    </member>
    <member kind="function">
      <type>vec_mut_ptr_t</type>
      <name>row</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a5cd07b4a029e43e23beb94e5ec31c985</anchor>
      <arglist>(index_type i)</arglist>
    </member>
    <member kind="function">
      <type>vec_mut_ptr_t</type>
      <name>diag</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a748006def63a05a12b5eda410834f32a</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>multi_vec_mut_ptr_t</type>
      <name>mv_sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableCols.html</anchorfile>
      <anchor>a2d48aebcf5d3392c16b263b8821ac1dd</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng)</arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; VectorMutable &gt;</type>
      <name>vec_mut_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>ae62e13b55d1325de84574c590d49d30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; MultiVectorMutable &gt;</type>
      <name>multi_vec_mut_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a0ca851ee19940034e17295ce1ccf8461</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual multi_vec_mut_ptr_t</type>
      <name>mv_clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a9b9aad9d93e0486998b35695b0ee1b90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>multi_vec_mut_ptr_t</type>
      <name>mv_sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a729a6584a9e48e08902eac57f759118e</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a7c6bf32dcb2933154659f606956a75eb</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a28e766545903d740e56b40b835188b2b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function">
      <type>multi_vec_ptr_t</type>
      <name>mv_clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>ab47f66aece3e46eebac559e924d9bc32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vec_ptr_t</type>
      <name>col</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a20841c4f198caa370e53c75dd9e39142</anchor>
      <arglist>(index_type j) const </arglist>
    </member>
    <member kind="function">
      <type>vec_ptr_t</type>
      <name>row</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a54ae7d85ed843260a9e069d654a41a73</anchor>
      <arglist>(index_type i) const </arglist>
    </member>
    <member kind="function">
      <type>vec_ptr_t</type>
      <name>diag</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a6cfb003a1eb6ededfacf020085d2aac0</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>multi_vec_ptr_t</type>
      <name>mv_sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a60f05b4beb5c960e4eeab9d1dabc0cee</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>multi_vec_ptr_t</type>
      <name>mv_sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a92dc96460238fcb9ce55fd0271227432</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a5cc509cd2ee05cb67736648a0d81827b</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a6a005851b1353c65cf14fede0e0ea153</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a78fc2ff5b772ccf6c9126dc1c7980399</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad6aefd4a5ccb750ff066b3c94b43dbe5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a95a45f7ee07a98edef8272c3985a83f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a8dd734a4c4e284838c89517d5ad93d78</anchor>
      <arglist>(EApplyBy apply_by, const RTOpPack::RTOp &amp;primary_op, const size_t num_multi_vecs, const MultiVector *multi_vecs[], const size_t num_targ_multi_vecs, MultiVectorMutable *targ_multi_vecs[], RTOpPack::ReductTarget *reduct_objs[], const index_type primary_first_ele, const index_type primary_sub_dim, const index_type primary_global_offset, const index_type secondary_first_ele, const index_type secondary_sub_dim) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>acf40bfeb10097e5c270f55692aa3ae9f</anchor>
      <arglist>(EApplyBy apply_by, const RTOpPack::RTOp &amp;primary_op, const RTOpPack::RTOp &amp;secondary_op, const size_t num_multi_vecs, const MultiVector *multi_vecs[], const size_t num_targ_multi_vecs, MultiVectorMutable *targ_multi_vecs[], RTOpPack::ReductTarget *reduct_obj, const index_type primary_first_ele, const index_type primary_sub_dim, const index_type primary_global_offset, const index_type secondary_first_ele, const index_type secondary_sub_dim) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac15a5369a10c424a12f9e8bc03344cb6</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a2e81f486da8a59d0af9e7bf8a8ab9a8b</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a29a1ad79c69bf12d96cf7a540280182e</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa684a28bfb9dd8e15c3af04cfcab7979</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>adaf68f480a35ab7c76a48b4a42d2c788</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6927e8f4dd1b50a3a615b8b14d8c92f3</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MultiVectorMutableDense</name>
    <filename>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</filename>
    <base>AbstractLinAlgPack::MultiVectorMutable</base>
    <base>AbstractLinAlgPack::MatrixOpSerial</base>
    <base>AbstractLinAlgPack::MatrixOpGetGMS</base>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; MemMngPack::ReleaseResource &gt;</type>
      <name>release_resource_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>ac70a11f672dadf8b106b58761c5be3f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; VectorMutable &gt;</type>
      <name>vec_mut_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>ae62e13b55d1325de84574c590d49d30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; MultiVectorMutable &gt;</type>
      <name>multi_vec_mut_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a0ca851ee19940034e17295ce1ccf8461</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>access_by_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a0f044703955d313bf5e006878bbeebad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Vector &gt;</type>
      <name>vec_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a73e9ae8a232973bef01d955c9fd2a883</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const MultiVector &gt;</type>
      <name>multi_vec_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a008b0a0745e4ae51f89e3e8259bc9152</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatNormType</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_INF</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a958957a872ce095efd6918335c602109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_2</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a88ee4c5c1e6b794c48afe9170481bf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_1</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574a1f30e8ef2b9c727291d6b81a69c4316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAT_NORM_FORB</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a955414e28dc0b6768ca2829179478574aac9fc9ca683cc1c3a82f572aac963623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiVectorMutableDense</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a84bf54a153e9f5a1f252f4ee8a96b9ca</anchor>
      <arglist>(const size_type rows=0, const size_type cols=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiVectorMutableDense</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>ad3c1c25b050d2541666e8dfda912c38a</anchor>
      <arglist>(DMatrixSlice gms, BLAS_Cpp::Transp gms_trans, const release_resource_ptr_t &amp;gms_release)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>aeaaac6e360e6651036d80932c4b980c2</anchor>
      <arglist>(const size_type rows, const size_type cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a1996aec9e1369839d4e1e8e292b16e23</anchor>
      <arglist>(DMatrixSlice gms, BLAS_Cpp::Transp gms_trans, const release_resource_ptr_t &amp;gms_release)</arglist>
    </member>
    <member kind="function">
      <type>DMatrixSlice</type>
      <name>set_gms</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a50acd3666212ffb45733ca15b23ac9b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DMatrixSlice</type>
      <name>get_gms</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a0ff932fd7e0a2cb456b51ce63a866e88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BLAS_Cpp::Transp</type>
      <name>gms_trans</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a1bf3cb9296579f24c209bf72e9505bb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const release_resource_ptr_t &amp;</type>
      <name>gms_release</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a01fea76549d079ffac0d82cb3b49f330</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DMatrixSlice</type>
      <name>get_gms_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a3cc48a12b3098ba4a3fc78eb81b2cfbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free_gms_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>ae8a32271fd6be94e687f355730270893</anchor>
      <arglist>(const DMatrixSlice *gms_view) const </arglist>
    </member>
    <member kind="function">
      <type>DMatrixSlice</type>
      <name>get_gms_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>adacf557b8f55941dbe155e92c3d624d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commit_gms_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a2330b9d92f3dd79b43d1794067bf5ddb</anchor>
      <arglist>(DMatrixSlice *gms_view)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a65e2315db8801e93feee1f3cebb9ad0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a4e10d7475398a9077233f81c955dd0ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero_out</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>aca67b0b5613db689acb790b9941ac032</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Mt_S</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>ae6c555aab6392c791224115bce9da543</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function">
      <type>MatrixOp &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>af6e89f4a50acfb7bc09688145354c0b5</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>output</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a8d71001ae0e61fae3a6ea3f1474c21fc</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a43d55d9156205d34f605a3bd14f026b8</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a5fc696f07d7351d8cec2788d77292f36</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;M_rhs, BLAS_Cpp::Transp trans_rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a4db88e9b854fb8156532060c0e9e847f</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, MatrixSymOp *sym_lhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>ae586754e2bbbfe46da237324f22c0569</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a28220b6ac758e70c7c2178953cb4a5f3</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>access_by_t</type>
      <name>access_by</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a3f3b943c663f8a47e67d9cbd38830ae2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>ac2de8e0ab307220370f20e7a4e457026</anchor>
      <arglist>(EApplyBy apply_by, const RTOpPack::RTOp &amp;primary_op, const size_t num_multi_vecs, const MultiVector **multi_vecs, const size_t num_targ_multi_vecs, MultiVectorMutable **targ_multi_vecs, RTOpPack::ReductTarget *reduct_objs[], const index_type primary_first_ele, const index_type primary_sub_dim, const index_type primary_global_offset, const index_type secondary_first_ele, const index_type secondary_sub_dim) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>ad7b34648fdac3ed57dc55c49a693e6cd</anchor>
      <arglist>(EApplyBy apply_by, const RTOpPack::RTOp &amp;primary_op, const RTOpPack::RTOp &amp;secondary_op, const size_t num_multi_vecs, const MultiVector **multi_vecs, const size_t num_targ_multi_vecs, MultiVectorMutable **targ_multi_vecs, RTOpPack::ReductTarget *reduct_obj, const index_type primary_first_ele, const index_type primary_sub_dim, const index_type primary_global_offset, const index_type secondary_first_ele, const index_type secondary_sub_dim) const </arglist>
    </member>
    <member kind="function">
      <type>vec_mut_ptr_t</type>
      <name>col</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a6411cfa16c39b2473fd6885d0e7c6769</anchor>
      <arglist>(index_type j)</arglist>
    </member>
    <member kind="function">
      <type>vec_mut_ptr_t</type>
      <name>row</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>ae93d0d35a90974ed06269c296987ffff</anchor>
      <arglist>(index_type i)</arglist>
    </member>
    <member kind="function">
      <type>vec_mut_ptr_t</type>
      <name>diag</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a40cdaa18c5eb468583908bf3325c261e</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>multi_vec_mut_ptr_t</type>
      <name>mv_sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a23225e74e3a49a9f5a49192b0595b811</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a2d21462fecc32f993f5ae9da5d7917bc</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DVectorSlice &amp;vs_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutableDense.html</anchorfile>
      <anchor>a5529e3413e60600a822e6a49a8b3d913</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual multi_vec_mut_ptr_t</type>
      <name>mv_clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a9b9aad9d93e0486998b35695b0ee1b90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>multi_vec_mut_ptr_t</type>
      <name>mv_sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a729a6584a9e48e08902eac57f759118e</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu)</arglist>
    </member>
    <member kind="function">
      <type>mat_mut_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a2812e9ac542f95344387ba7876cd8ea7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>multi_vec_ptr_t</type>
      <name>mv_clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>ab47f66aece3e46eebac559e924d9bc32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vec_ptr_t</type>
      <name>col</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a20841c4f198caa370e53c75dd9e39142</anchor>
      <arglist>(index_type j) const </arglist>
    </member>
    <member kind="function">
      <type>vec_ptr_t</type>
      <name>row</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a54ae7d85ed843260a9e069d654a41a73</anchor>
      <arglist>(index_type i) const </arglist>
    </member>
    <member kind="function">
      <type>vec_ptr_t</type>
      <name>diag</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a6cfb003a1eb6ededfacf020085d2aac0</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>multi_vec_ptr_t</type>
      <name>mv_sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVectorMutable.html</anchorfile>
      <anchor>a60f05b4beb5c960e4eeab9d1dabc0cee</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>multi_vec_ptr_t</type>
      <name>mv_sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a92dc96460238fcb9ce55fd0271227432</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>ace7d5ce5742463bd909cb06f69c29131</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a5cc509cd2ee05cb67736648a0d81827b</anchor>
      <arglist>(const Range1D &amp;row_rng, const Range1D &amp;col_rng) const </arglist>
    </member>
    <member kind="function">
      <type>const MatNorm</type>
      <name>calc_norm</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7b07bdfece7f5d4262e799faa12bfbde</anchor>
      <arglist>(EMatNormType requested_norm_type=MAT_NORM_1, bool allow_replacement=false) const </arglist>
    </member>
    <member kind="function">
      <type>mat_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ad236e2c28780a5e0f39d41408b874bcf</anchor>
      <arglist>(const index_type &amp;rl, const index_type &amp;ru, const index_type &amp;cl, const index_type &amp;cu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a170543880da54f38e59e266b9b59cfaf</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_ptr_t</type>
      <name>perm_view_update</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a27e92477ce58a776885dcb3d32ac136e</anchor>
      <arglist>(const Permutation *P_row, const index_type row_part[], int num_row_part, const Permutation *P_col, const index_type col_part[], int num_col_part, const mat_ptr_t &amp;perm_view) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a95a45f7ee07a98edef8272c3985a83f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a69ed2f9e955d38daee709d28ddbbb501</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a0a8cd0c468a9e89e8d21950007283aee</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ac112644c5c9e6385b8c909922a136ce3</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aa52d1811bce7da5643fd00c87ff969bb</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>acad1bd0dba0266fc4d36c4562a939abb</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const DVectorSlice &amp;vs_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>af353ed747af5ecabac0ced94b45585d5</anchor>
      <arglist>(DVectorSlice *vs_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a0680435b717a9130773fd1e2cd5987cc</anchor>
      <arglist>(const DVectorSlice &amp;vs_rhs1, BLAS_Cpp::Transp trans_rhs2, const DVectorSlice &amp;vs_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a30772cb896f1402c7e46ee6f1788de02</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, DMatrixSliceSym *sym_lhs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a204b236d132ab96b7f5f5cdeb586b997</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSlice &amp;gms_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aa0780f38a2128a8cf11efcbcc33c0423</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSlice &amp;gms_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a63d7abe5e5210fa68ff6d0189e1890de</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOpSerial &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ab28fc5b3bcc12209a84b22e8d9a94d45</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSliceSym &amp;sym_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ad9ee3496da0040e3ad472ca95fce58ec</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSliceSym &amp;sym_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a4a61e59e15a0d4973a0257ed12859fca</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const DMatrixSliceTri &amp;tri_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a35b6920eda517708e854d322a175ed76</anchor>
      <arglist>(DMatrixSlice *gms_lhs, value_type alpha, const DMatrixSliceTri &amp;tri_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a17e15547a01e8c23037a294679d83358</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta, DMatrixSliceSym *sym_lhs) const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a3558600e588a8349a8b13a690e5c4e36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a07569ed07da77f41d46631c016f48164</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>afd045d56deccade6d2f7b230c0585e61</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a4e3105f997aed684cdaabbd5c1477336</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, BLAS_Cpp::Transp M_trans) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a61f7b06e5eb6005cb3bb68b44f5e94fe</anchor>
      <arglist>(MatrixOp *mwo_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a78e505d8b91232e71197321611bfdefe</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aac0c7c00a9cd9ace9f7f956289e82d6a</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a73550a4b667f3fbd8abec3ba5860ac39</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const Vector &amp;v_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>aeaf328aebafcf1693d891f42f5659a2f</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>ae85b8284f9fc0f2dce80d71306f31be9</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>a51e75eb0e77340b079c1ea14ce605729</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syr2k</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOpSerial.html</anchorfile>
      <anchor>acecf3ebfae7babc396e9b23861c3404e</anchor>
      <arglist>(BLAS_Cpp::Transp M_trans, value_type alpha, const GenPermMatrixSlice &amp;P1, BLAS_Cpp::Transp P1_trans, const GenPermMatrixSlice &amp;P2, BLAS_Cpp::Transp P2_trans, value_type beta, MatrixSymOp *symwo_lhs) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>a8dd734a4c4e284838c89517d5ad93d78</anchor>
      <arglist>(EApplyBy apply_by, const RTOpPack::RTOp &amp;primary_op, const size_t num_multi_vecs, const MultiVector *multi_vecs[], const size_t num_targ_multi_vecs, MultiVectorMutable *targ_multi_vecs[], RTOpPack::ReductTarget *reduct_objs[], const index_type primary_first_ele, const index_type primary_sub_dim, const index_type primary_global_offset, const index_type secondary_first_ele, const index_type secondary_sub_dim) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1MultiVector.html</anchorfile>
      <anchor>acf40bfeb10097e5c270f55692aa3ae9f</anchor>
      <arglist>(EApplyBy apply_by, const RTOpPack::RTOp &amp;primary_op, const RTOpPack::RTOp &amp;secondary_op, const size_t num_multi_vecs, const MultiVector *multi_vecs[], const size_t num_targ_multi_vecs, MultiVectorMutable *targ_multi_vecs[], RTOpPack::ReductTarget *reduct_obj, const index_type primary_first_ele, const index_type primary_sub_dim, const index_type primary_global_offset, const index_type secondary_first_ele, const index_type secondary_sub_dim) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a6d88f004df4e7cc9e83bf2362fb18c91</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ae02ba80948f0277817b1ac53a27ac453</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs, BLAS_Cpp::Transp P_rhs_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StPtMtP</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac184fd07b7b8f43ec9b7b6f44b22ea88</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, const GenPermMatrixSlice &amp;P_rhs2, BLAS_Cpp::Transp P_rhs2_trans)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>ac09d051d74cd267f5b8fe5fdb53d8276</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Vp_StPtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa39f9c1dfa847aba84761cd20e175f76</anchor>
      <arglist>(VectorMutable *v_lhs, value_type alpha, const GenPermMatrixSlice &amp;P_rhs1, BLAS_Cpp::Transp P_rhs1_trans, BLAS_Cpp::Transp M_rhs2_trans, const SpVectorSlice &amp;sv_rhs3, value_type beta) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aba5fa997127d2ca59f691d5206d54af7</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Mp_StMtM</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>aa68d9ebe18d078c08e61f9852773d62b</anchor>
      <arglist>(value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>syrk</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixOp.html</anchorfile>
      <anchor>a7dd06951bf322a42c56beb4637448c14</anchor>
      <arglist>(const MatrixOp &amp;mwo_rhs, BLAS_Cpp::Transp M_trans, value_type alpha, value_type beta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::VectorMutableDense</name>
    <filename>classAbstractLinAlgPack_1_1VectorMutableDense.html</filename>
    <base virtualness="virtual">AbstractLinAlgPack::VectorMutable</base>
    <base protection="private" virtualness="virtual">AbstractLinAlgPack::VectorApplyOpSerialBase</base>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; MemMngPack::ReleaseResource &gt;</type>
      <name>release_resource_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>a24a13a5278d00bc024fce9039018ead7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VectorMutableDense *</type>
      <name>operator&amp;</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>ab6607eee85392c6d8f4f7df1983a6d23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vec_mut_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>acc94538acbce8f8f323a80bd7ebe908b</anchor>
      <arglist>(const index_type &amp;l, const index_type &amp;u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zero</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a0cc2260e6976f1cefbad57928d2f0d3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>axpy</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a6bc366da29319c989dd387eb743bea2c</anchor>
      <arglist>(value_type alpha, const Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>vec_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutable.html</anchorfile>
      <anchor>a488a56bc2635b310012a04a851c1460e</anchor>
      <arglist>(const Range1D &amp;rng) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorMutableDense</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>a24c1497dddb3271a9b55dfe08af16e62</anchor>
      <arglist>(const size_type dim=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorMutableDense</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>acf7fdbd09be38b18a1bba23e4ee72613</anchor>
      <arglist>(DVectorSlice v, const release_resource_ptr_t &amp;v_release)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>aeee5619cec32c08bb104e3e0011ec288</anchor>
      <arglist>(const size_type dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>a2f1bae22ab8411d8de2864058ee0fc04</anchor>
      <arglist>(DVectorSlice v, const release_resource_ptr_t &amp;v_release)</arglist>
    </member>
    <member kind="function">
      <type>DVectorSlice</type>
      <name>set_vec</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>a3052dc40edd7e0f64f523be101ab2941</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DVectorSlice</type>
      <name>get_vec</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>a1b61a488db55d57e2f2913762621773d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const release_resource_ptr_t &amp;</type>
      <name>vec_release</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>ab66e276cf9486a32201cfa4813c06432</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>aacaed7e18f239f9d312b0b62f2335199</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>a1954120c8742421547acec32cb761a46</anchor>
      <arglist>(const RTOpPack::RTOp &amp;op, const size_t num_vecs, const Vector *vecs[], const size_t num_targ_vecs, VectorMutable *targ_vecs[], RTOpPack::ReductTarget *reduct_obj, const index_type first_ele, const index_type sub_dim, const index_type global_offset) const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>dim</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>a035ba0c734b1648c880e10aa6058ecda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>get_ele</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>ab86259193f01668b4f305a79eb551253</anchor>
      <arglist>(index_type i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>a2da24a8b65d7806b94ef7cabde8d8f56</anchor>
      <arglist>(const Range1D &amp;rng, RTOpPack::SubVector *sub_vec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>acb4b040a0e657142bd6df073432c50b7</anchor>
      <arglist>(RTOpPack::SubVector *sub_vec) const </arglist>
    </member>
    <member kind="function">
      <type>VectorMutable &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>a6ecc79d68f32d52bf53c67be21031109</anchor>
      <arglist>(value_type alpha)</arglist>
    </member>
    <member kind="function">
      <type>VectorMutable &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>ad7f15badeb1abca6ac822fc008ac2fe1</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>VectorMutable &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>a68edc5257b220b5e9310c685c43ff366</anchor>
      <arglist>(const VectorMutable &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ele</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>a94296666aba1c618bdc220a28eb87078</anchor>
      <arglist>(index_type i, value_type val)</arglist>
    </member>
    <member kind="function">
      <type>vec_mut_ptr_t</type>
      <name>sub_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>a5c1ee3561c7002233df18d34f23c1839</anchor>
      <arglist>(const Range1D &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>a9dc807b2d5794b9805f098354868cd90</anchor>
      <arglist>(const Range1D &amp;rng, RTOpPack::MutableSubVector *sub_vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commit_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>a311460d9dd6a0224e3e1be44fd7c44c8</anchor>
      <arglist>(RTOpPack::MutableSubVector *sub_vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sub_vector</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>aeb650d5ecf24057b9ec0299166164211</anchor>
      <arglist>(const RTOpPack::SparseSubVector &amp;sub_vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Vp_StMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorMutableDense.html</anchorfile>
      <anchor>a189a8d1dbd4ce2b50beb8ac05ca555cc</anchor>
      <arglist>(value_type alpha, const GenPermMatrixSlice &amp;P, BLAS_Cpp::Transp P_trans, const Vector &amp;x, value_type beta)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize_apply_op</name>
      <anchorfile>classAbstractLinAlgPack_1_1Vector.html</anchorfile>
      <anchor>a94180c72097167271d0110440433d52d</anchor>
      <arglist>(const size_t num_targ_vecs, VectorMutable **targ_vecs) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorApplyOpSerialBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorApplyOpSerialBase.html</anchorfile>
      <anchor>ad969765c2af18e0d0a22cef58a171ed3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_op_serial</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorApplyOpSerialBase.html</anchorfile>
      <anchor>a80fe796040ce31b724c9960b6ec4c042</anchor>
      <arglist>(const RTOpPack::RTOp &amp;op, const size_t num_vecs, const Vector *vecs[], const size_t num_targ_vecs, VectorMutable *targ_vecs[], RTOpPack::ReductTarget *reduct_obj, const index_type first_ele, const index_type sub_dim, const index_type global_offset) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::VectorSpaceFactorySerial</name>
    <filename>classAbstractLinAlgPack_1_1VectorSpaceFactorySerial.html</filename>
    <base>AbstractLinAlgPack::VectorSpaceFactory</base>
    <member kind="function">
      <type></type>
      <name>VectorSpaceFactorySerial</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceFactorySerial.html</anchorfile>
      <anchor>a7ab71038179696f55d62d8b9280ee333</anchor>
      <arglist>(const inner_prod_ptr_t &amp;inner_prod=Teuchos::null)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VectorSpaceFactory</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceFactory.html</anchorfile>
      <anchor>a9489103ec92648c14b0684847263e1fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSpaceFactory</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceFactory.html</anchorfile>
      <anchor>a9be6f504b84cea8d34b3061743317fbf</anchor>
      <arglist>(const inner_prod_ptr_t &amp;inner_prod=Teuchos::null)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>inner_prod</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceFactory.html</anchorfile>
      <anchor>a63750b3329f66f825f5fa46ccf7b0f5b</anchor>
      <arglist>(const inner_prod_ptr_t &amp;inner_prod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const inner_prod_ptr_t</type>
      <name>inner_prod</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceFactory.html</anchorfile>
      <anchor>a063b724501ccf1c978adea6e5667fc9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>space_ptr_t</type>
      <name>create_vec_spc</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceFactorySerial.html</anchorfile>
      <anchor>a2603ae304c962f1353e606ef4c36d83d</anchor>
      <arglist>(index_type dim) const </arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const InnerProduct &gt;</type>
      <name>inner_prod_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceFactory.html</anchorfile>
      <anchor>a3ea10382c117338af9dd59648ed8a3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const VectorSpace &gt;</type>
      <name>space_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceFactory.html</anchorfile>
      <anchor>a2cc56c841b8064ab41f63ee477dbbfa1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::VectorSpaceSerial</name>
    <filename>classAbstractLinAlgPack_1_1VectorSpaceSerial.html</filename>
    <base>AbstractLinAlgPack::VectorSpace</base>
    <member kind="function">
      <type></type>
      <name>VectorSpaceSerial</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSerial.html</anchorfile>
      <anchor>a35cdb0f8fee15209c89ffed5445dbafb</anchor>
      <arglist>(size_type dim=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSerial.html</anchorfile>
      <anchor>a7c6f2ae2db70e1d4c7cda8f0bc02ad59</anchor>
      <arglist>(size_type dim)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_compatible</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSerial.html</anchorfile>
      <anchor>a1afc36406589704ea2acaafd3a3d1e21</anchor>
      <arglist>(const VectorSpace &amp;vec_space) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_in_core</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSerial.html</anchorfile>
      <anchor>a459768554290be2188f15f3155bcf37c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>dim</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSerial.html</anchorfile>
      <anchor>a682e6b312cd9266d384b926a61bf9efa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>space_fcty_ptr_t</type>
      <name>small_vec_spc_fcty</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSerial.html</anchorfile>
      <anchor>a0c57251ecf29e88010cc27d430808e50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>space_ptr_t</type>
      <name>clone</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSerial.html</anchorfile>
      <anchor>a9528e1ed0f0f2a5db005d97be5298998</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vec_mut_ptr_t</type>
      <name>create_member</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSerial.html</anchorfile>
      <anchor>a6c040884310e4a80f690e08723747cfb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>multi_vec_mut_ptr_t</type>
      <name>create_members</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSerial.html</anchorfile>
      <anchor>aa240e69363141f24b1ba93b51726656c</anchor>
      <arglist>(size_type num_vecs) const </arglist>
    </member>
    <member kind="function">
      <type>space_ptr_t</type>
      <name>sub_space</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSerial.html</anchorfile>
      <anchor>ad7b28e139b18873aea6b0003c86d94fa</anchor>
      <arglist>(const Range1D &amp;rng) const </arglist>
    </member>
    <member kind="function">
      <type>space_ptr_t</type>
      <name>space</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpaceSerial.html</anchorfile>
      <anchor>a6c6b00e8b47b2b0bcf2cef93cf882585</anchor>
      <arglist>(const GenPermMatrixSlice &amp;P, BLAS_Cpp::Transp P_trans) const </arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const InnerProduct &gt;</type>
      <name>inner_prod_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>aec8e06a0f28bf05a5ac7700e3a9763ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const VectorSpace &gt;</type>
      <name>space_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>ad590dd5038d21aedfe76555f668094fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const VectorSpaceFactory &gt;</type>
      <name>space_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a644c585d8ac1ea7b36389cbc1920bdc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; VectorMutable &gt;</type>
      <name>vec_mut_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>ab6e228dcfaed2ae182ec29b535699793</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; MultiVectorMutable &gt;</type>
      <name>multi_vec_mut_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a07e69cd27b3357a7e8fea8119def9f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>space_ptr_t</type>
      <name>sub_space</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a32235311021f90cb1f17a891c96e83a0</anchor>
      <arglist>(const index_type il, const index_type iu) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSpace</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>ab8b4e86f8802fd047712ff7978615ae3</anchor>
      <arglist>(const inner_prod_ptr_t &amp;inner_prod=Teuchos::null)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>inner_prod</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a90c92ae94465fbbb98e9d92b3bb1f9bd</anchor>
      <arglist>(const inner_prod_ptr_t &amp;inner_prod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const inner_prod_ptr_t</type>
      <name>inner_prod</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>accd7d3926bb7eb543d7d27a998501f48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual vec_mut_ptr_t</type>
      <name>create_member</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a6df56240586ce7c1a911780be51180ea</anchor>
      <arglist>(const value_type &amp;alpha) const </arglist>
    </member>
    <member kind="function">
      <type>obj_ptr_t</type>
      <name>create</name>
      <anchorfile>classAbstractLinAlgPack_1_1VectorSpace.html</anchorfile>
      <anchor>a37fb0f8f59062e0d826082bf57da1251</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::BasisSystemFactoryStd</name>
    <filename>classAbstractLinAlgPack_1_1BasisSystemFactoryStd.html</filename>
    <base>AbstractLinAlgPack::BasisSystemFactory</base>
    <member kind="function">
      <type></type>
      <name>BasisSystemFactoryStd</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemFactoryStd.html</anchorfile>
      <anchor>add71a309c82beae2571f74992dcb7427</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasisSystemFactory</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemFactory.html</anchorfile>
      <anchor>a5a0efe458bb3da99a773669136b62228</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_options</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemFactoryStd.html</anchorfile>
      <anchor>a432d5a2f401778ae8f174f3b3b8a89de</anchor>
      <arglist>(const options_ptr_t &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>const options_ptr_t &amp;</type>
      <name>get_options</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemFactoryStd.html</anchorfile>
      <anchor>a7b87b26ebc4f2df805f27c9ba043e28c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>obj_ptr_t</type>
      <name>create</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemFactoryStd.html</anchorfile>
      <anchor>a5613e6d7f9f44c9230c6aefbb6c55935</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const OptionsFromStreamPack::OptionsFromStream &gt;</type>
      <name>options_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemFactory.html</anchorfile>
      <anchor>a588a8c55df6a90633a014666e85d7008</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::BasisSystemPermDirectSparse</name>
    <filename>classAbstractLinAlgPack_1_1BasisSystemPermDirectSparse.html</filename>
    <base>AbstractLinAlgPack::BasisSystemPerm</base>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; DirectSparseSolver &gt;</type>
      <name>direct_solver_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPermDirectSparse.html</anchorfile>
      <anchor>a55517c0d3862ab77669ecd405b84fdf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisSystemPermDirectSparse</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPermDirectSparse.html</anchorfile>
      <anchor>a2628da817452db7898a6ed42b31b043e</anchor>
      <arglist>(const direct_solver_ptr_t &amp;direct_solver=Teuchos::null)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPermDirectSparse.html</anchorfile>
      <anchor>a86e73cb0eb5ab6325515cb0bae60d5e3</anchor>
      <arglist>(const direct_solver_ptr_t &amp;direct_solver)</arglist>
    </member>
    <member kind="function">
      <type>const mat_nonsing_fcty_ptr_t</type>
      <name>factory_C</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPermDirectSparse.html</anchorfile>
      <anchor>a99912271fed269920bd10f15616d6dde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const mat_fcty_ptr_t</type>
      <name>factory_D</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPermDirectSparse.html</anchorfile>
      <anchor>a9f49dda8963987dfa4acaf6731d6e348</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const mat_fcty_ptr_t</type>
      <name>factory_GcUP</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPermDirectSparse.html</anchorfile>
      <anchor>a9e38f6098e1e0820b97d53fa615d9a1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Range1D</type>
      <name>var_dep</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPermDirectSparse.html</anchorfile>
      <anchor>ae6e7f8fec3f84ec71a0e060e6479b271</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Range1D</type>
      <name>var_indep</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPermDirectSparse.html</anchorfile>
      <anchor>a2d40b5aa3f70cf344c507f78df2cb343</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Range1D</type>
      <name>equ_decomp</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPermDirectSparse.html</anchorfile>
      <anchor>a0c6af83538fac690e758783be73768e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Range1D</type>
      <name>equ_undecomp</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPermDirectSparse.html</anchorfile>
      <anchor>a3fab93e4ccec700819dab70440f54260</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_basis</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPermDirectSparse.html</anchorfile>
      <anchor>a70b95f20c6fbc1bbf2ccdabc0a4284f0</anchor>
      <arglist>(const MatrixOp &amp;Gc, MatrixOpNonsing *C, MatrixOp *D, MatrixOp *GcUP, EMatRelations mat_rel, std::ostream *out) const </arglist>
    </member>
    <member kind="function">
      <type>const perm_fcty_ptr_t</type>
      <name>factory_P_var</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPermDirectSparse.html</anchorfile>
      <anchor>af6c278739df8f4449ffa5c1ca7b7a58a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const perm_fcty_ptr_t</type>
      <name>factory_P_equ</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPermDirectSparse.html</anchorfile>
      <anchor>a31844195ed7ef0176f3abad5391b832b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const perm_fcty_ptr_t</type>
      <name>factory_P_inequ</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPermDirectSparse.html</anchorfile>
      <anchor>aa5a40742f717e55e7fe0a8ab19e94065</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_basis</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPermDirectSparse.html</anchorfile>
      <anchor>a41aee3a63529098ccb519b5564361861</anchor>
      <arglist>(const Permutation &amp;P_var, const Range1D &amp;var_dep, const Permutation *P_equ, const Range1D *equ_decomp, const MatrixOp &amp;Gc, MatrixOpNonsing *C, MatrixOp *D, MatrixOp *GcUP, EMatRelations mat_rel, std::ostream *out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>select_basis</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPermDirectSparse.html</anchorfile>
      <anchor>ad7a1d85b8a8453fbec7a81affbfc984f</anchor>
      <arglist>(const Vector *nu, MatrixOp *Gc, Permutation *P_var, Range1D *var_dep, Permutation *P_equ, Range1D *equ_decomp, MatrixOpNonsing *C, MatrixOp *D, MatrixOp *GcUP, EMatRelations mat_rel, std::ostream *out)</arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; Permutation &gt; &gt;</type>
      <name>perm_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPerm.html</anchorfile>
      <anchor>ab963e65e09e34987a53b83e1dea6dc7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMatRelations</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a877d83f50fda50b5344ffded411a2170</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; MatrixOpNonsing &gt; &gt;</type>
      <name>mat_nonsing_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a504d22f75c04baa66a6f25aa72fdd5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; MatrixOp &gt; &gt;</type>
      <name>mat_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a9088f86e0113e99dce6511b857b93bf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; MatrixSymOp &gt; &gt;</type>
      <name>mat_sym_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>aa73bb8908c23289dc3d40e95ce46f294</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; MatrixSymOpNonsing &gt; &gt;</type>
      <name>mat_sym_nonsing_fcty_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystem.html</anchorfile>
      <anchor>a2667cbaa04b20cb2f3c58f5d3bfacfb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisSystemPerm</name>
      <anchorfile>classAbstractLinAlgPack_1_1BasisSystemPerm.html</anchorfile>
      <anchor>a7642f072b5b87c23ab8d14853ac2a5f9</anchor>
      <arglist>(const mat_sym_fcty_ptr_t &amp;factory_transDtD, const mat_sym_nonsing_fcty_ptr_t &amp;factory_S)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolver</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolver.html</filename>
    <class kind="class">AbstractLinAlgPack::DirectSparseSolver::BasisMatrix</class>
    <class kind="class">AbstractLinAlgPack::DirectSparseSolver::FactorizationFailure</class>
    <class kind="class">AbstractLinAlgPack::DirectSparseSolver::FactorizationStructure</class>
    <class kind="class">AbstractLinAlgPack::DirectSparseSolver::IncompatibleMatrixStructureException</class>
    <class kind="class">AbstractLinAlgPack::DirectSparseSolver::InvalidObjectType</class>
    <class kind="class">AbstractLinAlgPack::DirectSparseSolver::NoCurrentBasisException</class>
    <class kind="class">AbstractLinAlgPack::DirectSparseSolver::UnsymmetricRankDeficientException</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DirectSparseSolver</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver.html</anchorfile>
      <anchor>ab9abdad6efc221729a3711e4a2ac323e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const basis_matrix_factory_ptr_t</type>
      <name>basis_matrix_factory</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver.html</anchorfile>
      <anchor>aaf0a4dcc8b4db68140b181c96df79785</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>estimated_fillin_ratio</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver.html</anchorfile>
      <anchor>ac700e3f03f5e504c100050f10c9d0d11</anchor>
      <arglist>(value_type estimated_fillin_ratio)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>analyze_and_factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver.html</anchorfile>
      <anchor>ae347339a03a54a36f288a2fbc1125650</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, DenseLinAlgPack::IVector *row_perm, DenseLinAlgPack::IVector *col_perm, size_type *rank, BasisMatrix *basis_matrix, std::ostream *out=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver.html</anchorfile>
      <anchor>a8f92d842e57a9a0bd2b61dbd34f56bc5</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, BasisMatrix *basis_matrix, const BasisMatrix::fact_struc_ptr_t &amp;fact_struc=Teuchos::null, std::ostream *out=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const BasisMatrix::fact_struc_ptr_t &amp;</type>
      <name>get_fact_struc</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver.html</anchorfile>
      <anchor>a3f8d9652a79e59de61226d085cbe4e31</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set_uninitialized</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver.html</anchorfile>
      <anchor>a20224510b9ebc6a683e0120694131e17</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; BasisMatrix &gt; &gt;</type>
      <name>basis_matrix_factory_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver.html</anchorfile>
      <anchor>ad5e8c7afa7e13a3fc42c2b8220be67b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolver::BasisMatrix</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolver_1_1BasisMatrix.html</filename>
    <base>AbstractLinAlgPack::MatrixNonsing</base>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; FactorizationStructure &gt;</type>
      <name>fact_struc_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver_1_1BasisMatrix.html</anchorfile>
      <anchor>a7c1d4bff54351eb540445de842426d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const fact_struc_ptr_t &amp;</type>
      <name>get_fact_struc</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver_1_1BasisMatrix.html</anchorfile>
      <anchor>afccad9070b247d7057f46dc8b6cbd1cd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mns_mut_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga85aa221b20eb1db5694ee77ade6ff62c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mns_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga1248902e6b31fbf89d091bdbd39ec377</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga7f4bfb88c6ffe3b2ad20732f7cdd0556</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gaf6e4d634fc68bf70ddcfcdb59913d17d</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gac5f155a0a7332fa04a5c1d1bbbec6398</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga7147936bfe4d44e1643390972120f1de</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga545137f6d79d96a0ae9c24ee5ef2487d</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga6d1ffb2ca031eefd95c99daec05bf281</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolver::FactorizationFailure</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolver_1_1FactorizationFailure.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolver::FactorizationStructure</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolver_1_1FactorizationStructure.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FactorizationStructure</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver_1_1FactorizationStructure.html</anchorfile>
      <anchor>ad90c874e662c42a52db70b7644235b5d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolver::IncompatibleMatrixStructureException</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolver_1_1IncompatibleMatrixStructureException.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolver::InvalidObjectType</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolver_1_1InvalidObjectType.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolver::NoCurrentBasisException</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolver_1_1NoCurrentBasisException.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolver::UnsymmetricRankDeficientException</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolver_1_1UnsymmetricRankDeficientException.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolverDense</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolverDense.html</filename>
    <base>AbstractLinAlgPack::DirectSparseSolverImp</base>
    <class kind="class">AbstractLinAlgPack::DirectSparseSolverDense::BasisMatrixDense</class>
    <class kind="class">AbstractLinAlgPack::DirectSparseSolverDense::FactorizationNonzerosDense</class>
    <class kind="class">AbstractLinAlgPack::DirectSparseSolverDense::FactorizationStructureDense</class>
    <member kind="function">
      <type></type>
      <name>DirectSparseSolverDense</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverDense.html</anchorfile>
      <anchor>a3d468af219f3e34a80e47a834ab3a060</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const basis_matrix_factory_ptr_t</type>
      <name>basis_matrix_factory</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverDense.html</anchorfile>
      <anchor>a95b472be9630cb80ed74a6817ddeccc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>estimated_fillin_ratio</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverDense.html</anchorfile>
      <anchor>a443c1a62b68a08c9d8fa26e42e856653</anchor>
      <arglist>(value_type estimated_fillin_ratio)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Teuchos::RCP&lt; FactorizationStructure &gt;</type>
      <name>create_fact_struc</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverDense.html</anchorfile>
      <anchor>a10d9799ad31ef77ca22dee8f67e82222</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Teuchos::RCP&lt; FactorizationNonzeros &gt;</type>
      <name>create_fact_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverDense.html</anchorfile>
      <anchor>a929ac85303718bac6d637ef01c5f9b9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>imp_analyze_and_factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverDense.html</anchorfile>
      <anchor>acbd04c9dbf63cdacebd373e93c1743dd</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, FactorizationStructure *fact_struc, FactorizationNonzeros *fact_nonzeros, DenseLinAlgPack::IVector *row_perm, DenseLinAlgPack::IVector *col_perm, size_type *rank, std::ostream *out)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>imp_factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverDense.html</anchorfile>
      <anchor>a8a764918f9ff58e860b20088114e382c</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, const FactorizationStructure &amp;fact_struc, FactorizationNonzeros *fact_nonzeros, std::ostream *out)</arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; BasisMatrix &gt; &gt;</type>
      <name>basis_matrix_factory_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver.html</anchorfile>
      <anchor>ad5e8c7afa7e13a3fc42c2b8220be67b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyze_and_factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>aeb20d4d9cc2ea6eb5ed53b98895e6cd4</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, DenseLinAlgPack::IVector *row_perm, DenseLinAlgPack::IVector *col_perm, size_type *rank, BasisMatrix *basis_matrix, std::ostream *out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>a45ce0d810836f932f510dd9b14bec852</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, BasisMatrix *basis_matrix, const BasisMatrix::fact_struc_ptr_t &amp;fact_struc, std::ostream *out)</arglist>
    </member>
    <member kind="function">
      <type>const BasisMatrix::fact_struc_ptr_t &amp;</type>
      <name>get_fact_struc</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>ae85c33f04f8cb69a77bcd1a636babd9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_uninitialized</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>a7c129127fbeb04c5b850450bc492b6d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DirectSparseSolver</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver.html</anchorfile>
      <anchor>ab9abdad6efc221729a3711e4a2ac323e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver.html</anchorfile>
      <anchor>a8f92d842e57a9a0bd2b61dbd34f56bc5</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, BasisMatrix *basis_matrix, const BasisMatrix::fact_struc_ptr_t &amp;fact_struc=Teuchos::null, std::ostream *out=NULL)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>imp_analyze_and_factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>aff61134573a1b50bb865bda8f495586f</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, FactorizationStructure *fact_struc, FactorizationNonzeros *fact_nonzeros, DenseLinAlgPack::IVector *row_perm, DenseLinAlgPack::IVector *col_perm, size_type *rank, std::ostream *out=NULL)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>imp_factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>a539339507187df6075f4ec2d16c3c0d1</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, const FactorizationStructure &amp;fact_struc, FactorizationNonzeros *fact_nonzeros, std::ostream *out=NULL)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolverDense::BasisMatrixDense</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolverDense_1_1BasisMatrixDense.html</filename>
    <member kind="function">
      <type>Teuchos::RCP&lt; BasisMatrixImp &gt;</type>
      <name>create_matrix</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverDense_1_1BasisMatrixDense.html</anchorfile>
      <anchor>ac5ecf346d47ce9bc5b3e86bc53e07a2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverDense_1_1BasisMatrixDense.html</anchorfile>
      <anchor>a99d861441cfc1e9852e242588ac7da85</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolverDense::FactorizationNonzerosDense</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolverDense_1_1FactorizationNonzerosDense.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolverDense::FactorizationStructureDense</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolverDense_1_1FactorizationStructureDense.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolverImp</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</filename>
    <base>AbstractLinAlgPack::DirectSparseSolver</base>
    <class kind="class">AbstractLinAlgPack::DirectSparseSolverImp::BasisMatrixImp</class>
    <class kind="class">AbstractLinAlgPack::DirectSparseSolverImp::FactorizationNonzeros</class>
    <member kind="function">
      <type>void</type>
      <name>analyze_and_factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>aeb20d4d9cc2ea6eb5ed53b98895e6cd4</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, DenseLinAlgPack::IVector *row_perm, DenseLinAlgPack::IVector *col_perm, size_type *rank, BasisMatrix *basis_matrix, std::ostream *out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>a45ce0d810836f932f510dd9b14bec852</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, BasisMatrix *basis_matrix, const BasisMatrix::fact_struc_ptr_t &amp;fact_struc, std::ostream *out)</arglist>
    </member>
    <member kind="function">
      <type>const BasisMatrix::fact_struc_ptr_t &amp;</type>
      <name>get_fact_struc</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>ae85c33f04f8cb69a77bcd1a636babd9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_uninitialized</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>a7c129127fbeb04c5b850450bc492b6d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const Teuchos::RCP&lt; FactorizationStructure &gt;</type>
      <name>create_fact_struc</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>abe0240630d550660a956a27cc02331f6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const Teuchos::RCP&lt; FactorizationNonzeros &gt;</type>
      <name>create_fact_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>a9ddebde126f2b3453251dde094907f5c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>imp_analyze_and_factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>aff61134573a1b50bb865bda8f495586f</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, FactorizationStructure *fact_struc, FactorizationNonzeros *fact_nonzeros, DenseLinAlgPack::IVector *row_perm, DenseLinAlgPack::IVector *col_perm, size_type *rank, std::ostream *out=NULL)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>imp_factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>a539339507187df6075f4ec2d16c3c0d1</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, const FactorizationStructure &amp;fact_struc, FactorizationNonzeros *fact_nonzeros, std::ostream *out=NULL)=0</arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; BasisMatrix &gt; &gt;</type>
      <name>basis_matrix_factory_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver.html</anchorfile>
      <anchor>ad5e8c7afa7e13a3fc42c2b8220be67b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DirectSparseSolver</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver.html</anchorfile>
      <anchor>ab9abdad6efc221729a3711e4a2ac323e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const basis_matrix_factory_ptr_t</type>
      <name>basis_matrix_factory</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver.html</anchorfile>
      <anchor>aaf0a4dcc8b4db68140b181c96df79785</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>estimated_fillin_ratio</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver.html</anchorfile>
      <anchor>ac700e3f03f5e504c100050f10c9d0d11</anchor>
      <arglist>(value_type estimated_fillin_ratio)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver.html</anchorfile>
      <anchor>a8f92d842e57a9a0bd2b61dbd34f56bc5</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, BasisMatrix *basis_matrix, const BasisMatrix::fact_struc_ptr_t &amp;fact_struc=Teuchos::null, std::ostream *out=NULL)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolverImp::BasisMatrixImp</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolverImp_1_1BasisMatrixImp.html</filename>
    <base>AbstractLinAlgPack::DirectSparseSolver::BasisMatrix</base>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DirectSparseSolverImp</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp_1_1BasisMatrixImp.html</anchorfile>
      <anchor>a860f4bf7bc7abcf7eb6c3383ccaa9489</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; FactorizationNonzeros &gt;</type>
      <name>fact_nonzeros_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp_1_1BasisMatrixImp.html</anchorfile>
      <anchor>a37854a293e4c5a9f566574ae00e9b480</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const fact_nonzeros_ptr_t &amp;</type>
      <name>get_fact_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp_1_1BasisMatrixImp.html</anchorfile>
      <anchor>a84130fdf363c59f814773a60ad931f88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp_1_1BasisMatrixImp.html</anchorfile>
      <anchor>ab0485acd7f08f2376929174760360873</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace &amp;</type>
      <name>space_rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp_1_1BasisMatrixImp.html</anchorfile>
      <anchor>a3b80b93b4c1638be00a30fa85a01087a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp_1_1BasisMatrixImp.html</anchorfile>
      <anchor>a64dc07a0dbc46d10ee0925c680ef87d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp_1_1BasisMatrixImp.html</anchorfile>
      <anchor>a1e65a15980398de703158ae7f2e01e26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>mat_mns_mut_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp_1_1BasisMatrixImp.html</anchorfile>
      <anchor>af40a03edf5e597fb68c77e9995d1b2a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const fact_struc_ptr_t &amp;</type>
      <name>get_fact_struc</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp_1_1BasisMatrixImp.html</anchorfile>
      <anchor>af17f307ecdb5300bca9ded199a386636</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BasisMatrixImp</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp_1_1BasisMatrixImp.html</anchorfile>
      <anchor>abc739d8a75f8b0154476d66e77c93b91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BasisMatrixImp</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp_1_1BasisMatrixImp.html</anchorfile>
      <anchor>acb653e901daa9e1516bf7729080df3c2</anchor>
      <arglist>(size_type dim, const fact_struc_ptr_t &amp;fact_struc, const fact_nonzeros_ptr_t &amp;fact_nonzeros)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp_1_1BasisMatrixImp.html</anchorfile>
      <anchor>a82c48533e184aa0666772e6330a0b578</anchor>
      <arglist>(size_type dim, const fact_struc_ptr_t &amp;fact_struc, const fact_nonzeros_ptr_t &amp;fact_nonzeros)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_uninitialized</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp_1_1BasisMatrixImp.html</anchorfile>
      <anchor>a9d485757d65046cb923c95c56eb9ccf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Teuchos::RCP&lt; BasisMatrixImp &gt;</type>
      <name>create_matrix</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp_1_1BasisMatrixImp.html</anchorfile>
      <anchor>a3b634c2095a50b0b9116791dcd631889</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; FactorizationStructure &gt;</type>
      <name>fact_struc_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver_1_1BasisMatrix.html</anchorfile>
      <anchor>a7c1d4bff54351eb540445de842426d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mat_mns_ptr_t</type>
      <name>clone_mns</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga1248902e6b31fbf89d091bdbd39ec377</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga7f4bfb88c6ffe3b2ad20732f7cdd0556</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>V_InvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gaf6e4d634fc68bf70ddcfcdb59913d17d</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const SpVectorSlice &amp;sv_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>gac5f155a0a7332fa04a5c1d1bbbec6398</anchor>
      <arglist>(const Vector &amp;v_rhs1, BLAS_Cpp::Transp trans_rhs2, const Vector &amp;v_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>transVtInvMtV</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga7147936bfe4d44e1643390972120f1de</anchor>
      <arglist>(const SpVectorSlice &amp;sv_rhs1, BLAS_Cpp::Transp trans_rhs2, const SpVectorSlice &amp;sv_rhs3) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StInvMtM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga545137f6d79d96a0ae9c24ee5ef2487d</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, BLAS_Cpp::Transp trans_rhs1, const MatrixOp &amp;mwo_rhs2, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>M_StMtInvM</name>
      <anchorfile>group__MatrixNonsingular__funcs__grp.html</anchorfile>
      <anchor>ga6d1ffb2ca031eefd95c99daec05bf281</anchor>
      <arglist>(MatrixOp *m_lhs, value_type alpha, const MatrixOp &amp;mwo_rhs1, BLAS_Cpp::Transp trans_rhs1, BLAS_Cpp::Transp trans_rhs2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixBase</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>af7f9d8334c71593859f213111b2af268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixBase.html</anchorfile>
      <anchor>a95a45f7ee07a98edef8272c3985a83f3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolverImp::FactorizationNonzeros</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolverImp_1_1FactorizationNonzeros.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FactorizationNonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp_1_1FactorizationNonzeros.html</anchorfile>
      <anchor>a87a74715dc472dcf08c3a8a1dd3dc95b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolverMA28</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolverMA28.html</filename>
    <base>AbstractLinAlgPack::DirectSparseSolverImp</base>
    <class kind="class">AbstractLinAlgPack::DirectSparseSolverMA28::BasisMatrixMA28</class>
    <class kind="class">AbstractLinAlgPack::DirectSparseSolverMA28::FactorizationNonzerosMA28</class>
    <class kind="class">AbstractLinAlgPack::DirectSparseSolverMA28::FactorizationStructureMA28</class>
    <member kind="enumeration">
      <name>EScalingMethod</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28.html</anchorfile>
      <anchor>a43475282f96e4bb8f01722968234ea09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28.html</anchorfile>
      <anchor>a4c8a8f08b52378880f0fdafc8282e9af</anchor>
      <arglist>(value_type, u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28.html</anchorfile>
      <anchor>a7646c504d79736fa0317ca1b3e999eaa</anchor>
      <arglist>(bool, grow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28.html</anchorfile>
      <anchor>a55330a44e55bae96d486b494bcf0d33c</anchor>
      <arglist>(value_type, tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28.html</anchorfile>
      <anchor>ae8df2f2991309c27adc8671a02585250</anchor>
      <arglist>(index_type, nsrch)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28.html</anchorfile>
      <anchor>a95ad7641433ea071e6d4dd3b2cff149c</anchor>
      <arglist>(bool, lbig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28.html</anchorfile>
      <anchor>a33f2e6d38a18788489c4d2a56f4904fc</anchor>
      <arglist>(bool, print_ma28_outputs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_MEMBER_COMPOSITION_MEMBERS</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28.html</anchorfile>
      <anchor>ad602fc8d565d4359ba4b5acd45698bce</anchor>
      <arglist>(std::string, output_file_name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DirectSparseSolverMA28</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28.html</anchorfile>
      <anchor>a367293ba8b3b03956421a3c7afef6d4d</anchor>
      <arglist>(value_type estimated_fillin_ratio=10.0, value_type u=0.1, bool grow=false, value_type tol=0.0, index_type nsrch=4, bool lbig=false, bool print_ma28_outputs=false, const std::string &amp;output_file_name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const basis_matrix_factory_ptr_t</type>
      <name>basis_matrix_factory</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28.html</anchorfile>
      <anchor>aecbb5126539033586b96904639699966</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>estimated_fillin_ratio</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28.html</anchorfile>
      <anchor>a4b7878f94ff0dc03ba1441de56e985d8</anchor>
      <arglist>(value_type estimated_fillin_ratio)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Teuchos::RCP&lt; FactorizationStructure &gt;</type>
      <name>create_fact_struc</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28.html</anchorfile>
      <anchor>a00a2733d3920a1256df373f725299f82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Teuchos::RCP&lt; FactorizationNonzeros &gt;</type>
      <name>create_fact_nonzeros</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28.html</anchorfile>
      <anchor>abbfa1e4c707dc34d0300c6713c418da0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>imp_analyze_and_factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28.html</anchorfile>
      <anchor>a6fdf7363d6bfe7843c7652ae94f292f9</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, FactorizationStructure *fact_struc, FactorizationNonzeros *fact_nonzeros, DenseLinAlgPack::IVector *row_perm, DenseLinAlgPack::IVector *col_perm, size_type *rank, std::ostream *out)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>imp_factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28.html</anchorfile>
      <anchor>a8e10f24e921efba7493e25aa3396a984</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, const FactorizationStructure &amp;fact_struc, FactorizationNonzeros *fact_nonzeros, std::ostream *out)</arglist>
    </member>
    <member kind="typedef">
      <type>Teuchos::RCP&lt; const Teuchos::AbstractFactory&lt; BasisMatrix &gt; &gt;</type>
      <name>basis_matrix_factory_ptr_t</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver.html</anchorfile>
      <anchor>ad5e8c7afa7e13a3fc42c2b8220be67b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyze_and_factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>aeb20d4d9cc2ea6eb5ed53b98895e6cd4</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, DenseLinAlgPack::IVector *row_perm, DenseLinAlgPack::IVector *col_perm, size_type *rank, BasisMatrix *basis_matrix, std::ostream *out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>a45ce0d810836f932f510dd9b14bec852</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, BasisMatrix *basis_matrix, const BasisMatrix::fact_struc_ptr_t &amp;fact_struc, std::ostream *out)</arglist>
    </member>
    <member kind="function">
      <type>const BasisMatrix::fact_struc_ptr_t &amp;</type>
      <name>get_fact_struc</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>ae85c33f04f8cb69a77bcd1a636babd9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_uninitialized</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>a7c129127fbeb04c5b850450bc492b6d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DirectSparseSolver</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver.html</anchorfile>
      <anchor>ab9abdad6efc221729a3711e4a2ac323e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver.html</anchorfile>
      <anchor>a8f92d842e57a9a0bd2b61dbd34f56bc5</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, BasisMatrix *basis_matrix, const BasisMatrix::fact_struc_ptr_t &amp;fact_struc=Teuchos::null, std::ostream *out=NULL)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>imp_analyze_and_factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>aff61134573a1b50bb865bda8f495586f</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, FactorizationStructure *fact_struc, FactorizationNonzeros *fact_nonzeros, DenseLinAlgPack::IVector *row_perm, DenseLinAlgPack::IVector *col_perm, size_type *rank, std::ostream *out=NULL)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>imp_factor</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverImp.html</anchorfile>
      <anchor>a539339507187df6075f4ec2d16c3c0d1</anchor>
      <arglist>(const AbstractLinAlgPack::MatrixConvertToSparse &amp;A, const FactorizationStructure &amp;fact_struc, FactorizationNonzeros *fact_nonzeros, std::ostream *out=NULL)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolverMA28::BasisMatrixMA28</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolverMA28_1_1BasisMatrixMA28.html</filename>
    <member kind="function">
      <type>Teuchos::RCP&lt; BasisMatrixImp &gt;</type>
      <name>create_matrix</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28_1_1BasisMatrixMA28.html</anchorfile>
      <anchor>af773bfcc4d972a585c8b9847ffc1de41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V_InvMtV</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28_1_1BasisMatrixMA28.html</anchorfile>
      <anchor>aefa4b74c54264c7df2a95320a1d2e1e7</anchor>
      <arglist>(VectorMutable *v_lhs, BLAS_Cpp::Transp trans_rhs1, const Vector &amp;v_rhs2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolverMA28::FactorizationNonzerosMA28</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolverMA28_1_1FactorizationNonzerosMA28.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>DirectSparseSolverMA28</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28_1_1FactorizationNonzerosMA28.html</anchorfile>
      <anchor>a8e5b8ac28a44b9f72ff3e6f3525ec821</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>BasisMatrixMA28</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28_1_1FactorizationNonzerosMA28.html</anchorfile>
      <anchor>ac1a1781e1b6a6d1c0e41a2a3b50e85b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolverMA28::FactorizationStructureMA28</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolverMA28_1_1FactorizationStructureMA28.html</filename>
    <base>AbstractLinAlgPack::DirectSparseSolver::FactorizationStructure</base>
    <member kind="friend">
      <type>friend class</type>
      <name>DirectSparseSolverMA28</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28_1_1FactorizationStructureMA28.html</anchorfile>
      <anchor>a8e5b8ac28a44b9f72ff3e6f3525ec821</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>BasisMatrixMA28</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28_1_1FactorizationStructureMA28.html</anchorfile>
      <anchor>ac1a1781e1b6a6d1c0e41a2a3b50e85b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FactorizationStructure</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolver_1_1FactorizationStructure.html</anchorfile>
      <anchor>ad90c874e662c42a52db70b7644235b5d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::DirectSparseSolverMA28SetOptions</name>
    <filename>classAbstractLinAlgPack_1_1DirectSparseSolverMA28SetOptions.html</filename>
    <base>OptionsFromStreamPack::SetOptionsFromStreamNode</base>
    <base>SetOptionsToTargetBase&lt; DirectSparseSolverMA28 &gt;</base>
    <member kind="function">
      <type></type>
      <name>DirectSparseSolverMA28SetOptions</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28SetOptions.html</anchorfile>
      <anchor>a52fd12db285e256cdcf95071f8ed7ee8</anchor>
      <arglist>(DirectSparseSolverMA28 *qp_solver=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setOption</name>
      <anchorfile>classAbstractLinAlgPack_1_1DirectSparseSolverMA28SetOptions.html</anchorfile>
      <anchor>a9a9d8a1d932e7dc78f72383eb69cb303</anchor>
      <arglist>(int option_num, const std::string &amp;option_value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::MatrixScaling_Strategy</name>
    <filename>classAbstractLinAlgPack_1_1MatrixScaling__Strategy.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatrixScaling_Strategy</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixScaling__Strategy.html</anchorfile>
      <anchor>af1d44d7041c2a481bc3bb7c22aa6da9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scale_matrix</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixScaling__Strategy.html</anchorfile>
      <anchor>adaeadbd43bb178dddedc86a12f8372c9</anchor>
      <arglist>(index_type m, index_type n, index_type nz, const index_type row_i[], const index_type col_j[], bool new_matrix, value_type A[])=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scale_rhs</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixScaling__Strategy.html</anchorfile>
      <anchor>a0dd8615b53a80a075c90c73eae18b73b</anchor>
      <arglist>(BLAS_Cpp::Transp trans, value_type b[]) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scale_lhs</name>
      <anchorfile>classAbstractLinAlgPack_1_1MatrixScaling__Strategy.html</anchorfile>
      <anchor>ab2973a479c6790af2a6d308edb968bec</anchor>
      <arglist>(BLAS_Cpp::Transp trans, value_type x[]) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::COOMatrixPartitionedViewUtilityPack::Partition</name>
    <filename>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</filename>
    <templarg>T_Indice</templarg>
    <templarg>T_Value</templarg>
    <member kind="typedef">
      <type>AbstractLinAlgPack::size_type</type>
      <name>size_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</anchorfile>
      <anchor>aa1752a3a7ea1df5e14ca033e262c4e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Partition&lt; T_Indice, T_Value &gt;</type>
      <name>partition_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</anchorfile>
      <anchor>a460e7bd02e866d8fbcdf06ea15c9945c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</anchorfile>
      <anchor>af21703e04bd8997d7db1b39e48328bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SparseCOOPtrElement&lt; T_Indice, T_Value &gt;</type>
      <name>element_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</anchorfile>
      <anchor>a8a475500ea3d12af639f2d4da8322746</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>element_type *</type>
      <name>iterator</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</anchorfile>
      <anchor>a39e875f48b185f85b5f90abd7f4eba96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const element_type *</type>
      <name>const_iterator</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</anchorfile>
      <anchor>a1bd005b1cb2b401bad2142fa4c8588b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Partition</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</anchorfile>
      <anchor>ae8335122a98c2857fd571c374b6490da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Partition</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</anchorfile>
      <anchor>a60824aa294ef143236b6caf92018b5da</anchor>
      <arglist>(size_type rows, size_type cols, size_type nz, element_type *ele, difference_type row_offset, difference_type col_offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</anchorfile>
      <anchor>a630bf5ac4a5b3e0ffca48f3ac119a815</anchor>
      <arglist>(size_type rows, size_type cols, size_type nz, element_type *ele, difference_type row_offset, difference_type col_offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</anchorfile>
      <anchor>af5773e53ed9cdbf458c1a28a587106d7</anchor>
      <arglist>(const partition_type &amp;partition)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</anchorfile>
      <anchor>aaa269c532345f8cf076a55048f507ebd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</anchorfile>
      <anchor>a22f15d3cdef172f71ed02881a52879e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</anchorfile>
      <anchor>a42fd001a21943752c271079a00ae89d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>row_offset</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</anchorfile>
      <anchor>a95bcd48b3a664f2559cdaa5e898e9ccd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>col_offset</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</anchorfile>
      <anchor>aceecac1eb064cb10494c48615661a206</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</anchorfile>
      <anchor>a1b83f8830690e5a66884e42f6d49b44f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</anchorfile>
      <anchor>a8709a22a5484fc14f49ac5ffba29a659</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</anchorfile>
      <anchor>ac7ae98e54411ba2c113fd5899f519708</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1Partition.html</anchorfile>
      <anchor>a2a76311707aa3baa7341aabf0cee5fa4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::COOMatrixPartitionedViewUtilityPack::TransposedPartition</name>
    <filename>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1TransposedPartition.html</filename>
    <templarg>T_Indice</templarg>
    <templarg>T_Value</templarg>
    <member kind="typedef">
      <type>Partition&lt; T_Indice, T_Value &gt;</type>
      <name>partition_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1TransposedPartition.html</anchorfile>
      <anchor>a7a3869a77eb97085431da89e1e260117</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractLinAlgPack::size_type</type>
      <name>size_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1TransposedPartition.html</anchorfile>
      <anchor>a15fbd97df67853931537009f0b8baaac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1TransposedPartition.html</anchorfile>
      <anchor>a29f7553ad2ca4af8260e49d83e27c67e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SparseCOOPtrElement&lt; T_Indice, T_Value &gt;</type>
      <name>element_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1TransposedPartition.html</anchorfile>
      <anchor>aaa489c986703c3a86b8cfcd638bcb6bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TransSparseCOOElementViewIter&lt; element_type *, std::random_access_iterator_tag, typename element_type::indice_type, typename element_type::value_type &amp;, difference_type &gt;</type>
      <name>iterator</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1TransposedPartition.html</anchorfile>
      <anchor>a6b9a40e335502a2b3afad945a415b327</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TransSparseCOOElementViewIter&lt; const element_type *, std::random_access_iterator_tag, typename element_type::indice_type, const typename element_type::value_type &amp;, difference_type &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1TransposedPartition.html</anchorfile>
      <anchor>a70fe620122977c7fbaa471193aab0eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransposedPartition</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1TransposedPartition.html</anchorfile>
      <anchor>a2a34a97f77a882574606bc2e6e3c4432</anchor>
      <arglist>(const partition_type &amp;partition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1TransposedPartition.html</anchorfile>
      <anchor>a91114df8337ba6a562e496e73bab74d7</anchor>
      <arglist>(const partition_type &amp;partition)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1TransposedPartition.html</anchorfile>
      <anchor>a26d1ee25b260787055d858fbdc16c15f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1TransposedPartition.html</anchorfile>
      <anchor>aa8e551bd1474946239aabf1f3f88e478</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1TransposedPartition.html</anchorfile>
      <anchor>a53949fae96195316076932b9e3f5f66d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>row_offset</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1TransposedPartition.html</anchorfile>
      <anchor>a293741ca2d7dcc757b3a19a4ec7dd954</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>col_offset</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1TransposedPartition.html</anchorfile>
      <anchor>ad7954f849fd67354a5ac48b11bd3c35a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1TransposedPartition.html</anchorfile>
      <anchor>a0d4861fc27855324513de7d98542f560</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1TransposedPartition.html</anchorfile>
      <anchor>a8d18597fcd11fc8b340740978b3d2919</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1TransposedPartition.html</anchorfile>
      <anchor>a6a4f0fa3d552a9ff7e6a4bbc7374d86d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classAbstractLinAlgPack_1_1COOMatrixPartitionedViewUtilityPack_1_1TransposedPartition.html</anchorfile>
      <anchor>a8dd27bdf372aeecf62192954f69fd4db</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::GenPermMatrixSliceIteratorPack::external_row_col_value_type</name>
    <filename>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1external__row__col__value__type.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>index_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1external__row__col__value__type.html</anchorfile>
      <anchor>a4e2472ce554812be25531fb63b401b4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1external__row__col__value__type.html</anchorfile>
      <anchor>a3afde40f08e12979f8bb8c06554eb40c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>external_row_col_value_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1external__row__col__value__type.html</anchorfile>
      <anchor>aad678fa2fe0f1073e580c1eea70c9f5e</anchor>
      <arglist>(difference_type row_off, difference_type col_off, index_type row_i, index_type col_j)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::GenPermMatrixSliceIteratorPack::row_col_value_type</name>
    <filename>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__value__type.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>index_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__value__type.html</anchorfile>
      <anchor>a453c1afa16b18e2d6aa140709ca05bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__value__type.html</anchorfile>
      <anchor>a5239cfa49a840afde7060574d73d6aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>row_col_value_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__value__type.html</anchorfile>
      <anchor>a035f4407cb13e73740d8ed24d48fac9c</anchor>
      <arglist>(difference_type row_off, difference_type col_off, index_type row_i[], index_type col_j[], size_type nz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind_view</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__value__type.html</anchorfile>
      <anchor>a2216175ce440954b1762df627e61591b</anchor>
      <arglist>(const row_col_value_type&lt; T &gt; &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__value__type.html</anchorfile>
      <anchor>a277bd640c826f50ca32fab566b62d4ea</anchor>
      <arglist>(difference_type)</arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>row_i</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__value__type.html</anchorfile>
      <anchor>a6c640f48bbd7f4a8d8f3f8de2b259a42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>col_j</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__value__type.html</anchorfile>
      <anchor>a4979bee37fe8df1d8c2c0632e6838eba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>index_type *</type>
      <name>row_i_ptr</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__value__type.html</anchorfile>
      <anchor>a6f5c0112b231ccb209984e8856453699</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>row_col_value_type&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__value__type.html</anchorfile>
      <anchor>aa72b600b06ed6d961dbab7ceb42cbeb2</anchor>
      <arglist>(const row_col_value_type&lt; T &gt; &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const external_row_col_value_type&lt; T &gt;</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__value__type.html</anchorfile>
      <anchor>a651fa949b7f2c04848d2294b1a78b0da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>row_col_value_type&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__value__type.html</anchorfile>
      <anchor>a903188e69045e427dced546158c2a844</anchor>
      <arglist>(const external_row_col_value_type&lt; T &gt; &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::GenPermMatrixSliceIteratorPack::row_col_iterator</name>
    <filename>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>index_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a8250ee0c3c4e9008a2cddea00365ba9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a150e7f289245e30b54bdb8aa26f710f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>external_row_col_value_type&lt; T &gt;</type>
      <name>value_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a5a1a29688cae0f67b659f18203d3e15c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_col_value_type&lt; T &gt; &amp;</type>
      <name>reference</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>adaf04acd258740ff96f2800f78a04aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_col_value_type&lt; T &gt; *</type>
      <name>pointer</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a4abb90b7d4ce284e7997d1e87d21cb7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a3fb9d4f6577e7778ed681724056d7d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>row_col_iterator</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a9920837021c4f77fea0b3cbcf747b4ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>row_col_iterator</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a73c50aaa213200b62584bea4928331bb</anchor>
      <arglist>(difference_type row_off, difference_type col_off, index_type row_i[], index_type col_j[], size_type nz)</arglist>
    </member>
    <member kind="function">
      <type>row_col_iterator&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a116189efcc55f409d378412ed3641c85</anchor>
      <arglist>(const row_col_iterator&lt; T &gt; &amp;itr)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a0767fa972571d09bd54acf40b295d050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a3845fead588b6f4835131626b704e3d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a05b9f9c1db66310dc61e1f0d1b7fa067</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>row_col_iterator&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>af197828ec918271f8376be8d7534f194</anchor>
      <arglist>(difference_type) const </arglist>
    </member>
    <member kind="function">
      <type>row_col_iterator&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>ae128850407df503fc7f3c0cfcbde9a8d</anchor>
      <arglist>(difference_type)</arglist>
    </member>
    <member kind="function">
      <type>row_col_iterator&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>ac7dbb64c3ca184d039faa73aae067a62</anchor>
      <arglist>(difference_type)</arglist>
    </member>
    <member kind="function">
      <type>row_col_iterator&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a25f93ba82a01fe5ec25d25853b647414</anchor>
      <arglist>(difference_type)</arglist>
    </member>
    <member kind="function">
      <type>row_col_iterator&lt; T &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a57a870d370c7abadffc436adaf2a93b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const row_col_iterator&lt; T &gt;</type>
      <name>operator++</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a4e4e92b7de23e9b836c0438da4ec7489</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>row_col_iterator&lt; T &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a4ff146a5ad9e81c0f5f362c555180766</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const row_col_iterator&lt; T &gt;</type>
      <name>operator--</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a7ef8b7c2144e952e507c606b687c7812</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>operator-</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a8b56744e716e7d252de0240b7d37aece</anchor>
      <arglist>(const row_col_iterator&lt; T &gt; &amp;itr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>ad54ce1a79dd0fbc22cd02399a490fa8d</anchor>
      <arglist>(const row_col_iterator&lt; T &gt; &amp;itr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>ad04163ef271d3725bcb19af4c83f6ae1</anchor>
      <arglist>(const row_col_iterator&lt; T &gt; &amp;itr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>af1644c41bd61b122f677096898dff88b</anchor>
      <arglist>(const row_col_iterator&lt; T &gt; &amp;itr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a1d44b631d1c479002c4a8ea34dff91df</anchor>
      <arglist>(const row_col_iterator&lt; T &gt; &amp;itr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>ab26007eb84201afa33f8e1cda25aef42</anchor>
      <arglist>(const row_col_iterator&lt; T &gt; &amp;itr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a9c6bc3a93bc72a7e2225bc09a7b65020</anchor>
      <arglist>(const row_col_iterator&lt; T &gt; &amp;itr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classAbstractLinAlgPack_1_1GenPermMatrixSliceIteratorPack_1_1row__col__iterator.html</anchorfile>
      <anchor>a19f5eb282f8d33166f37f88c046f5276</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::SparseVectorUtilityPack::DoesNotExistException</name>
    <filename>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1DoesNotExistException.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::SparseVectorUtilityPack::NotSortedException</name>
    <filename>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1NotSortedException.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::SparseVectorUtilityPack::DuplicateIndexesException</name>
    <filename>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1DuplicateIndexesException.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::SparseVectorUtilityPack::OutOfRoomException</name>
    <filename>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1OutOfRoomException.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::SparseVectorUtilityPack::UnsizedException</name>
    <filename>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1UnsizedException.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::SparseVectorUtilityPack::NoNonZeroElementsException</name>
    <filename>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1NoNonZeroElementsException.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::SparseVectorUtilityPack::SpVecIndexLookup</name>
    <filename>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup.html</filename>
    <templarg>T_Element</templarg>
    <class kind="class">AbstractLinAlgPack::SparseVectorUtilityPack::SpVecIndexLookup::InvalidInternalStateException</class>
    <class kind="class">AbstractLinAlgPack::SparseVectorUtilityPack::SpVecIndexLookup::NoSpVecSetException</class>
    <class kind="struct">AbstractLinAlgPack::SparseVectorUtilityPack::SpVecIndexLookup::poss_type</class>
    <member kind="enumeration">
      <name>UpperLower</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup.html</anchorfile>
      <anchor>a922e0fba81bf7724da30c8689d909f6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ElementRelation</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup.html</anchorfile>
      <anchor>a7238fd12c3dcde710b7e6a143c516742</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_Element</type>
      <name>element_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup.html</anchorfile>
      <anchor>ac536a9178ee1b6c69742422073054562</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>element_type::index_type</type>
      <name>index_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup.html</anchorfile>
      <anchor>a3a46b3a2168082b2a21820fed3a82b9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup.html</anchorfile>
      <anchor>ac4d2049b3be276ea6d81e1cec1e761bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpVecIndexLookup</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup.html</anchorfile>
      <anchor>ab11161072b02bf47a5866366edeab2cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpVecIndexLookup</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup.html</anchorfile>
      <anchor>a09e0113db6bd54009feff552d71b4582</anchor>
      <arglist>(element_type *ele, size_type nz, difference_type offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sp_vec</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup.html</anchorfile>
      <anchor>a2888433364a32439cc83f94deb3057a3</anchor>
      <arglist>(element_type *ele, size_type nz, difference_type offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incr_nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup.html</anchorfile>
      <anchor>afd60deb31a340e35cdc65a6ad44292e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>element_type *</type>
      <name>ele</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup.html</anchorfile>
      <anchor>a1357474cc8b1fa7d4c5db5e2be2820c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nz</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup.html</anchorfile>
      <anchor>a48108a3f34e4cae50806161fda783e62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>offset</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup.html</anchorfile>
      <anchor>a5d301b44dc9caed66885f5faaea8d9c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>poss_type</type>
      <name>find_poss</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup.html</anchorfile>
      <anchor>a4b037feafadebbd4e2f1b6620d26de55</anchor>
      <arglist>(index_type index, UpperLower uplow) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_element</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup.html</anchorfile>
      <anchor>ad4e3b28358975dc52cfa19f342bb0e3f</anchor>
      <arglist>(index_type index, bool is_sorted) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sp_vec_was_modified</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup.html</anchorfile>
      <anchor>a66732b1e087de1448fedd2c454073a1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate_state</name>
      <anchorfile>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup.html</anchorfile>
      <anchor>a57630f5a4ca5afba98861a99bb0b2e53</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::SparseVectorUtilityPack::SpVecIndexLookup::InvalidInternalStateException</name>
    <filename>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup_1_1InvalidInternalStateException.html</filename>
  </compound>
  <compound kind="class">
    <name>AbstractLinAlgPack::SparseVectorUtilityPack::SpVecIndexLookup::NoSpVecSetException</name>
    <filename>classAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup_1_1NoSpVecSetException.html</filename>
  </compound>
  <compound kind="struct">
    <name>AbstractLinAlgPack::SparseVectorUtilityPack::SpVecIndexLookup::poss_type</name>
    <filename>structAbstractLinAlgPack_1_1SparseVectorUtilityPack_1_1SpVecIndexLookup_1_1poss__type.html</filename>
  </compound>
  <compound kind="class">
    <name>MA28_Cpp::MA28Solver</name>
    <filename>classMA28__Cpp_1_1MA28Solver.html</filename>
    <member kind="function">
      <type></type>
      <name>MA28Solver</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>aa24cbe8ee2a77b8f63a74bc60c6fbf0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MA28Solver</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>ab5bd451ab4770558b97915ee63ef4cad</anchor>
      <arglist>(const MA28Solver &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ma28ad</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>ac55714264663060fbfff89646ccd54c4</anchor>
      <arglist>(const f_int &amp;n, const f_int &amp;nz, f_dbl_prec a[], const f_int &amp;licn, f_int irn[], const f_int &amp;lirn, f_int icn[], const f_dbl_prec &amp;u, f_int ikeep[], f_int iw[], f_dbl_prec w[], f_int *iflag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ma28bd</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a35a7ae19812d8fde7e8f2ecc4bcced0f</anchor>
      <arglist>(const f_int &amp;n, const f_int &amp;nz, f_dbl_prec a[], const f_int &amp;licn, const f_int ivect[], const f_int jvect[], const f_int icn[], const f_int ikeep[], f_int iw[], f_dbl_prec w[], f_int *iflag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ma28cd</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a46122161a1bd35228508aa036a8f47ea</anchor>
      <arglist>(const f_int &amp;n, const f_dbl_prec a[], const f_int &amp;licn, const f_int icn[], const f_int ikeep[], f_dbl_prec rhs[], f_dbl_prec w[], const f_int &amp;mtype)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lp</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a4f26ed27eb59b1e6a2e65d893be44d19</anchor>
      <arglist>(f_int lp)</arglist>
    </member>
    <member kind="function">
      <type>f_int</type>
      <name>lp</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a1d5364f7073f0c72a1648130020db6e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mp</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a00504febbd188dc75dffc966d9b8c0a4</anchor>
      <arglist>(f_int mp)</arglist>
    </member>
    <member kind="function">
      <type>f_int</type>
      <name>mp</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>afe908e39ee6e7024ca0b5c872da53dc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lblock</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>ac3b3859fc1abf40641d1aaccf7a920d4</anchor>
      <arglist>(f_logical lblock)</arglist>
    </member>
    <member kind="function">
      <type>f_logical</type>
      <name>lblock</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>abada2573593e684db4ca202a97c277e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grow</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a834a410c15665e737866c632d2f2dbe0</anchor>
      <arglist>(f_logical grow)</arglist>
    </member>
    <member kind="function">
      <type>f_logical</type>
      <name>grow</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a30ffee47b28075cf313f2b82d9a69e5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eps</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>ad8fd51069ac21700550f3924c5a016bb</anchor>
      <arglist>(f_dbl_prec eps)</arglist>
    </member>
    <member kind="function">
      <type>f_dbl_prec</type>
      <name>eps</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a65bfaef487b2f6ae37eb5802dfca7541</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rmin</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>adf1dab49a16a4935d6846e3fbb928bed</anchor>
      <arglist>(f_dbl_prec rmin)</arglist>
    </member>
    <member kind="function">
      <type>f_dbl_prec</type>
      <name>rmin</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a7dd29b5688974e28bd7f76a486666dc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resid</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a7a8073698eea11718b2e9b83fbefb788</anchor>
      <arglist>(f_dbl_prec resid)</arglist>
    </member>
    <member kind="function">
      <type>f_dbl_prec</type>
      <name>resid</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a22195269204e9ee270a043d516a71569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>irncp</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a1ae250c66a1924679b4b442e865dfd8d</anchor>
      <arglist>(f_int irncp)</arglist>
    </member>
    <member kind="function">
      <type>f_int</type>
      <name>irncp</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a7a8e0881ce18592a493b3f2a03b5b902</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>icncp</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a8e078289743fd9da79660774e5c567fc</anchor>
      <arglist>(f_int icncp)</arglist>
    </member>
    <member kind="function">
      <type>f_int</type>
      <name>icncp</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a588b74c1af6d42232afab4d9cd83c856</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minirn</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a38acd882f1308c9affb28c362824be65</anchor>
      <arglist>(f_int minirn)</arglist>
    </member>
    <member kind="function">
      <type>f_int</type>
      <name>minirn</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>abedb5add522232603c68182b197ae840</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minicn</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a44a054d12632169c8813d72cda840f8f</anchor>
      <arglist>(f_int minicn)</arglist>
    </member>
    <member kind="function">
      <type>f_int</type>
      <name>minicn</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>af64908b0b00d58de2c759b1aba492f52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>irank</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>af5986310c96871cdee055035dd24be46</anchor>
      <arglist>(f_int irank)</arglist>
    </member>
    <member kind="function">
      <type>f_int</type>
      <name>irank</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>adf71ce96ab6ba793e5ecbe5707d6a017</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abort1</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a25f6af88c56e003846d85bc481b86378</anchor>
      <arglist>(f_logical abort1)</arglist>
    </member>
    <member kind="function">
      <type>f_logical</type>
      <name>abort1</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a928a5b8277c5954079dbc4adf0454350</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abort2</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a641eab487011ed9726f0babf50804d91</anchor>
      <arglist>(f_logical abort2)</arglist>
    </member>
    <member kind="function">
      <type>f_logical</type>
      <name>abort2</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a40a4300649f2de77a8b369f16b34f56a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>idisp</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a20ecc97b05aaaab78bd33f14fa2c4373</anchor>
      <arglist>(f_int val, f_int i)</arglist>
    </member>
    <member kind="function">
      <type>f_int</type>
      <name>idisp</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a398d2e0c9a1eb6b46f1b6de98de5af02</anchor>
      <arglist>(f_int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tol</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a976570a288178f873c7eef00e25a8d63</anchor>
      <arglist>(f_dbl_prec tol)</arglist>
    </member>
    <member kind="function">
      <type>f_dbl_prec</type>
      <name>tol</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a4258cf623e6be5c5639a582c6cc6ebc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>themax</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a99424e9cbfa3d3f7d11cac666738d307</anchor>
      <arglist>(f_dbl_prec themax)</arglist>
    </member>
    <member kind="function">
      <type>f_dbl_prec</type>
      <name>themax</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a765dd00bc7581ada3d29fa5714d789ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>big</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a77676ae74f99f84086b848f213150df8</anchor>
      <arglist>(f_dbl_prec big)</arglist>
    </member>
    <member kind="function">
      <type>f_dbl_prec</type>
      <name>big</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a13d5226e916b2be8c766bf2620129fef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dxmax</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a9276749c3c06e2b1a4508c516ce28d6e</anchor>
      <arglist>(f_dbl_prec dxmax)</arglist>
    </member>
    <member kind="function">
      <type>f_dbl_prec</type>
      <name>dxmax</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a2aac4ef5e5495d0f9b87e03082c8ae1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errmax</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>ace1604be290e25d0fcd9915a84317dd9</anchor>
      <arglist>(f_dbl_prec errmax)</arglist>
    </member>
    <member kind="function">
      <type>f_dbl_prec</type>
      <name>errmax</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a022e8b4efbeee8cb66df3eb55eaa8e87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dres</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>ac4f65540ceee1ace141277cb1b958d5e</anchor>
      <arglist>(f_dbl_prec dres)</arglist>
    </member>
    <member kind="function">
      <type>f_dbl_prec</type>
      <name>dres</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a5d44bc7f6d65858eaaaf879f708f691a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cgce</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a2f94afdbb4fbb22da7c7e32ccd077693</anchor>
      <arglist>(f_dbl_prec cgce)</arglist>
    </member>
    <member kind="function">
      <type>f_dbl_prec</type>
      <name>cgce</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a475c380406ff4a045edee0fbb5dd7ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ndrop</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>ad4b2ef377e8a679424607ec2e3a71d37</anchor>
      <arglist>(f_int ndrop)</arglist>
    </member>
    <member kind="function">
      <type>f_int</type>
      <name>ndrop</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>ab7451bd29a5fc6d81b2ed296bf36636b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxit</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a9da74b4f8cb557a4fdcd7c235a0161d1</anchor>
      <arglist>(f_int maxit)</arglist>
    </member>
    <member kind="function">
      <type>f_int</type>
      <name>maxit</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a126fb700e7ad96e679ca57d1e1ac8081</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>noiter</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a459a85aebc2e4fe631d6e1261ce431ec</anchor>
      <arglist>(f_int noiter)</arglist>
    </member>
    <member kind="function">
      <type>f_int</type>
      <name>noiter</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a7a0f02fe0afe34c2b8bff63f2af7f95d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nsrch</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a60c459f4b83d172b5c9001f306308f6f</anchor>
      <arglist>(f_int nsrch)</arglist>
    </member>
    <member kind="function">
      <type>f_int</type>
      <name>nsrch</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>ad47236e8d50b6aaed950cd9db29f4eb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>istart</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a6b23a9fe8240fd5b9609514434094b2a</anchor>
      <arglist>(f_int istart)</arglist>
    </member>
    <member kind="function">
      <type>f_int</type>
      <name>istart</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a8160c2c74584249a61de9442d75ef132</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lbig</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a4039ab2d4a245a4c9a4c0ff56405656f</anchor>
      <arglist>(f_logical lbig)</arglist>
    </member>
    <member kind="function">
      <type>f_logical</type>
      <name>lbig</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>af3cfea322c6d7852f95730a168b18bbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump_common_blocks</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a46ac1ebf5a726558ffcdf78f4fc14c01</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>MA28Solver &amp;</type>
      <name>operator=</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>a1e27264b651d4368fcf9d99d63e71907</anchor>
      <arglist>(const MA28Solver &amp;solver)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dump_ma28_common_blocks</name>
      <anchorfile>classMA28__Cpp_1_1MA28Solver.html</anchorfile>
      <anchor>aa30f78d10e80119012c6634ce1fe3091</anchor>
      <arglist>(std::ostream &amp;o)</arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>abstract</name>
    <path>/Users/sscoll/Downloads/trilinos-11.0.3-Source/packages/moocho/src/AbstractLinAlgPack/src/abstract/</path>
    <filename>dir_a76321eece4c0871c7ca9808a2805f48.html</filename>
    <dir>interfaces</dir>
    <dir>tools</dir>
  </compound>
  <compound kind="dir">
    <name>AbstractLinAlgPack</name>
    <path>/Users/sscoll/Downloads/trilinos-11.0.3-Source/packages/moocho/src/AbstractLinAlgPack/</path>
    <filename>dir_689effd755cb8c8f3e797f0c0e7de0b2.html</filename>
    <dir>src</dir>
  </compound>
  <compound kind="dir">
    <name>implementations</name>
    <path>/Users/sscoll/Downloads/trilinos-11.0.3-Source/packages/moocho/src/AbstractLinAlgPack/src/serial/implementations/</path>
    <filename>dir_85f914e5b6ebf6d239bbb8c5f6470811.html</filename>
    <file>AbstractLinAlgPack_BFGS_helpers.cpp</file>
    <file>AbstractLinAlgPack_BFGS_helpers.hpp</file>
    <file>AbstractLinAlgPack_COOMatrixClass.cpp</file>
    <file>AbstractLinAlgPack_COOMatrixClass.hpp</file>
    <file>AbstractLinAlgPack_COOMatrixIn.hpp</file>
    <file>AbstractLinAlgPack_COOMatrixOut.hpp</file>
    <file>AbstractLinAlgPack_COOMatrixOutFunc.cpp</file>
    <file>AbstractLinAlgPack_COOMatrixOutFunc.hpp</file>
    <file>AbstractLinAlgPack_COOMatrixPartitionedViewClass.hpp</file>
    <file>AbstractLinAlgPack_COOMatrixPartitionedViewClassDecl.hpp</file>
    <file>AbstractLinAlgPack_COOMatrixPartitionedViewClassDef.hpp</file>
    <file>AbstractLinAlgPack_COOMatrixPartitionViewSubclass.cpp</file>
    <file>AbstractLinAlgPack_COOMatrixPartitionViewSubclass.hpp</file>
    <file>AbstractLinAlgPack_COOMatrixTmplConvertToSparseCompressedColumn.hpp</file>
    <file>AbstractLinAlgPack_COOMatrixTmplConvertToSparseCompressedColumnDecl.hpp</file>
    <file>AbstractLinAlgPack_COOMatrixTmplConvertToSparseCompressedColumnDef.hpp</file>
    <file>AbstractLinAlgPack_COOMatrixTmplOp.hpp</file>
    <file>AbstractLinAlgPack_COOMatrixTmplOpDecl.hpp</file>
    <file>AbstractLinAlgPack_COOMatrixTmplOpDef.hpp</file>
    <file>AbstractLinAlgPack_COOMatrixTmplOutFunc.hpp</file>
    <file>AbstractLinAlgPack_COOMatrixTmplOutFuncDecl.hpp</file>
    <file>AbstractLinAlgPack_COOMatrixTmplOutFuncDef.hpp</file>
    <file>AbstractLinAlgPack_COOMatrixWithPartitionedView.hpp</file>
    <file>AbstractLinAlgPack_COOMPartitionOp.hpp</file>
    <file>AbstractLinAlgPack_COOMPartitionOut.hpp</file>
    <file>AbstractLinAlgPack_dense_Vp_StPtMtV.hpp</file>
    <file>AbstractLinAlgPack_MatrixCOORTmplItfc.hpp</file>
    <file>AbstractLinAlgPack_MatrixSparseCOORSerial.cpp</file>
    <file>AbstractLinAlgPack_MatrixSparseCOORSerial.hpp</file>
    <file>AbstractLinAlgPack_MatrixSymDiagonalStd.cpp</file>
    <file>AbstractLinAlgPack_MatrixSymDiagSparseStd.cpp</file>
    <file>AbstractLinAlgPack_MatrixSymDiagSparseStd.hpp</file>
    <file>AbstractLinAlgPack_MatrixSymPosDefCholFactor.cpp</file>
    <file>AbstractLinAlgPack_MatrixSymPosDefCholFactor.hpp</file>
    <file>AbstractLinAlgPack_MatrixVectorTemplateOp.hpp</file>
    <file>AbstractLinAlgPack_MatrixVectorTemplateOpDef.hpp</file>
    <file>AbstractLinAlgPack_MatrixWithOpConcreteEncap.hpp</file>
    <file>AbstractLinAlgPack_PermutationSerial.cpp</file>
    <file>AbstractLinAlgPack_PermutationSerial.hpp</file>
    <file>AbstractLinAlgPack_rank_2_chol_update.cpp</file>
    <file>AbstractLinAlgPack_rank_2_chol_update.hpp</file>
    <file>AbstractLinAlgPack_SortByDescendingAbsValue.hpp</file>
    <file>AbstractLinAlgPack_sparse_bounds.cpp</file>
    <file>AbstractLinAlgPack_sparse_bounds.hpp</file>
    <file>AbstractLinAlgPack_sparse_bounds_diff.cpp</file>
    <file>AbstractLinAlgPack_sparse_bounds_diff.hpp</file>
    <file>AbstractLinAlgPack_SparseCOOElementTransView.hpp</file>
    <file>AbstractLinAlgPack_SparseCOOPtrElement.hpp</file>
    <file>AbstractLinAlgPack_SparseCOOReadMatrix.cpp</file>
    <file>AbstractLinAlgPack_SparseCOOReadMatrix.hpp</file>
    <file>AbstractLinAlgPack_SparseElementOut.hpp</file>
    <file>AbstractLinAlgPack_SparsePtrElement.hpp</file>
    <file>AbstractLinAlgPack_SparseVectorOp.hpp</file>
    <file>AbstractLinAlgPack_SparseVectorOpDecl.hpp</file>
    <file>AbstractLinAlgPack_SparseVectorOpDef.hpp</file>
    <file>AbstractLinAlgPack_SparseVectorOutput.hpp</file>
    <file>AbstractLinAlgPack_SparseVectorOutputDef.hpp</file>
    <file>AbstractLinAlgPack_SparseVectorSliceOp.hpp</file>
    <file>AbstractLinAlgPack_SpVectorOp.cpp</file>
    <file>AbstractLinAlgPack_SpVectorOp.hpp</file>
    <file>AbstractLinAlgPack_TransSparseCOOElementViewIter.hpp</file>
    <file>AbstractLinAlgPack_VectorDenseEncap.hpp</file>
    <file>dchud_c.c</file>
  </compound>
  <compound kind="dir">
    <name>interfaces</name>
    <path>/Users/sscoll/Downloads/trilinos-11.0.3-Source/packages/moocho/src/AbstractLinAlgPack/src/serial/interfaces/</path>
    <filename>dir_c745cde348dca777c9bf6bb1a8217ca8.html</filename>
    <file>AbstractLinAlgPack_GenPermMatrixSliceOp.cpp</file>
    <file>AbstractLinAlgPack_GenPermMatrixSliceOp.hpp</file>
    <file>AbstractLinAlgPack_LinAlgOpPackHack.cpp</file>
    <file>AbstractLinAlgPack_LinAlgOpPackHack.hpp</file>
    <file>AbstractLinAlgPack_MatrixConvertToSparse.hpp</file>
    <file>AbstractLinAlgPack_MatrixConvertToSparseEncap.cpp</file>
    <file>AbstractLinAlgPack_MatrixConvertToSparseEncap.hpp</file>
    <file>AbstractLinAlgPack_MatrixExtractInvCholFactor.hpp</file>
    <file>AbstractLinAlgPack_MatrixExtractSparseElements.cpp</file>
    <file>AbstractLinAlgPack_MatrixExtractSparseElements.hpp</file>
    <file>AbstractLinAlgPack_MatrixLoadSparseElements.hpp</file>
    <file>AbstractLinAlgPack_MatrixNonsingSerial.cpp</file>
    <file>AbstractLinAlgPack_MatrixNonsingSerial.hpp</file>
    <file>AbstractLinAlgPack_MatrixOpGetGMS.hpp</file>
    <file>AbstractLinAlgPack_MatrixOpGetGMSMutable.hpp</file>
    <file>AbstractLinAlgPack_MatrixOpGetGMSTri.hpp</file>
    <file>AbstractLinAlgPack_MatrixOpNonsingSerial.hpp</file>
    <file>AbstractLinAlgPack_MatrixOpSerial.cpp</file>
    <file>AbstractLinAlgPack_MatrixOpSerial.hpp</file>
    <file>AbstractLinAlgPack_MatrixSymAddDelUpdateable.hpp</file>
    <file>AbstractLinAlgPack_MatrixSymDenseInitialize.hpp</file>
    <file>AbstractLinAlgPack_MatrixSymDiagSparse.cpp</file>
    <file>AbstractLinAlgPack_MatrixSymDiagSparse.hpp</file>
    <file>AbstractLinAlgPack_MatrixSymNonsingSerial.cpp</file>
    <file>AbstractLinAlgPack_MatrixSymNonsingSerial.hpp</file>
    <file>AbstractLinAlgPack_MatrixSymOpGetGMSSym.hpp</file>
    <file>AbstractLinAlgPack_MatrixSymOpGetGMSSymMutable.hpp</file>
    <file>AbstractLinAlgPack_MatrixSymOpNonsingSerial.hpp</file>
    <file>AbstractLinAlgPack_MatrixSymOpSerial.cpp</file>
    <file>AbstractLinAlgPack_MatrixSymOpSerial.hpp</file>
    <file>AbstractLinAlgPack_MultiVectorMutableCols.cpp</file>
    <file>AbstractLinAlgPack_MultiVectorMutableCols.hpp</file>
    <file>AbstractLinAlgPack_MultiVectorMutableDense.cpp</file>
    <file>AbstractLinAlgPack_MultiVectorMutableDense.hpp</file>
    <file>AbstractLinAlgPack_VectorMutableDense.cpp</file>
    <file>AbstractLinAlgPack_VectorMutableDense.hpp</file>
    <file>AbstractLinAlgPack_VectorSpaceFactorySerial.cpp</file>
    <file>AbstractLinAlgPack_VectorSpaceFactorySerial.hpp</file>
    <file>AbstractLinAlgPack_VectorSpaceSerial.cpp</file>
    <file>AbstractLinAlgPack_VectorSpaceSerial.hpp</file>
  </compound>
  <compound kind="dir">
    <name>interfaces</name>
    <path>/Users/sscoll/Downloads/trilinos-11.0.3-Source/packages/moocho/src/AbstractLinAlgPack/src/abstract/interfaces/</path>
    <filename>dir_27a7eacf39ab25e83c7b12108235c409.html</filename>
    <file>AbstractLinAlgPack_AbstractLinAlgOpPack.cpp</file>
    <file>AbstractLinAlgPack_apply_op_helper.cpp</file>
    <file>AbstractLinAlgPack_apply_op_helper.hpp</file>
    <file>AbstractLinAlgPack_AssertOp.cpp</file>
    <file>AbstractLinAlgPack_AssertOp.hpp</file>
    <file>AbstractLinAlgPack_BasisSystem.cpp</file>
    <file>AbstractLinAlgPack_BasisSystem.hpp</file>
    <file>AbstractLinAlgPack_BasisSystemFactory.hpp</file>
    <file>AbstractLinAlgPack_BasisSystemPerm.hpp</file>
    <file>AbstractLinAlgPack_compare_element_indexes.hpp</file>
    <file>AbstractLinAlgPack_EtaVector.hpp</file>
    <file>AbstractLinAlgPack_GenPermMatrixSlice.cpp</file>
    <file>AbstractLinAlgPack_GenPermMatrixSlice.hpp</file>
    <file>AbstractLinAlgPack_GenPermMatrixSliceIterator.cpp</file>
    <file>AbstractLinAlgPack_GenPermMatrixSliceIterator.hpp</file>
    <file>AbstractLinAlgPack_GenPermMatrixSliceOut.cpp</file>
    <file>AbstractLinAlgPack_GenPermMatrixSliceOut.hpp</file>
    <file>AbstractLinAlgPack_InnerProduct.hpp</file>
    <file>AbstractLinAlgPack_InnerProductDot.cpp</file>
    <file>AbstractLinAlgPack_InnerProductDot.hpp</file>
    <file>AbstractLinAlgPack_LinAlgOpPack.hpp</file>
    <file>AbstractLinAlgPack_MatrixBase.cpp</file>
    <file>AbstractLinAlgPack_MatrixBase.hpp</file>
    <file>AbstractLinAlgPack_MatrixNonsing.cpp</file>
    <file>AbstractLinAlgPack_MatrixNonsing.hpp</file>
    <file>AbstractLinAlgPack_MatrixOp.cpp</file>
    <file>AbstractLinAlgPack_MatrixOp.hpp</file>
    <file>AbstractLinAlgPack_MatrixOpNonsing.cpp</file>
    <file>AbstractLinAlgPack_MatrixOpNonsing.hpp</file>
    <file>AbstractLinAlgPack_MatrixOpNonsingAggr.cpp</file>
    <file>AbstractLinAlgPack_MatrixOpNonsingAggr.hpp</file>
    <file>AbstractLinAlgPack_MatrixOpOut.hpp</file>
    <file>AbstractLinAlgPack_MatrixOpSubView.cpp</file>
    <file>AbstractLinAlgPack_MatrixOpSubView.hpp</file>
    <file>AbstractLinAlgPack_MatrixPermAggr.cpp</file>
    <file>AbstractLinAlgPack_MatrixPermAggr.hpp</file>
    <file>AbstractLinAlgPack_MatrixSymDiag.hpp</file>
    <file>AbstractLinAlgPack_MatrixSymInitDiag.hpp</file>
    <file>AbstractLinAlgPack_MatrixSymNonsing.cpp</file>
    <file>AbstractLinAlgPack_MatrixSymNonsing.hpp</file>
    <file>AbstractLinAlgPack_MatrixSymOp.cpp</file>
    <file>AbstractLinAlgPack_MatrixSymOp.hpp</file>
    <file>AbstractLinAlgPack_MatrixSymOpNonsing.cpp</file>
    <file>AbstractLinAlgPack_MatrixSymOpNonsing.hpp</file>
    <file>AbstractLinAlgPack_MatrixSymSecant.hpp</file>
    <file>AbstractLinAlgPack_MultiVector.cpp</file>
    <file>AbstractLinAlgPack_MultiVector.hpp</file>
    <file>AbstractLinAlgPack_MultiVectorMutable.cpp</file>
    <file>AbstractLinAlgPack_MultiVectorMutable.hpp</file>
    <file>AbstractLinAlgPack_Permutation.hpp</file>
    <file>AbstractLinAlgPack_PermutationOut.hpp</file>
    <file>AbstractLinAlgPack_SparseElement.hpp</file>
    <file>AbstractLinAlgPack_SparseVectorClass.cpp</file>
    <file>AbstractLinAlgPack_SparseVectorClass.hpp</file>
    <file>AbstractLinAlgPack_SparseVectorClassDecl.hpp</file>
    <file>AbstractLinAlgPack_SparseVectorClassDef.hpp</file>
    <file>AbstractLinAlgPack_SpVecIndexLookupClass.hpp</file>
    <file>AbstractLinAlgPack_SpVecIndexLookupClassDecl.hpp</file>
    <file>AbstractLinAlgPack_SpVecIndexLookupClassDef.hpp</file>
    <file>AbstractLinAlgPack_SpVectorClass.hpp</file>
    <file>AbstractLinAlgPack_SpVectorOut.cpp</file>
    <file>AbstractLinAlgPack_SpVectorOut.hpp</file>
    <file>AbstractLinAlgPack_SpVectorView.cpp</file>
    <file>AbstractLinAlgPack_SpVectorView.hpp</file>
    <file>AbstractLinAlgPack_Vector.cpp</file>
    <file>AbstractLinAlgPack_Vector.hpp</file>
    <file>AbstractLinAlgPack_VectorApplyOpSerialBase.cpp</file>
    <file>AbstractLinAlgPack_VectorApplyOpSerialBase.hpp</file>
    <file>AbstractLinAlgPack_VectorMutable.cpp</file>
    <file>AbstractLinAlgPack_VectorMutable.hpp</file>
    <file>AbstractLinAlgPack_VectorMutableSubView.cpp</file>
    <file>AbstractLinAlgPack_VectorMutableSubView.hpp</file>
    <file>AbstractLinAlgPack_VectorOut.hpp</file>
    <file>AbstractLinAlgPack_VectorSpace.cpp</file>
    <file>AbstractLinAlgPack_VectorSpace.hpp</file>
    <file>AbstractLinAlgPack_VectorSpaceFactory.cpp</file>
    <file>AbstractLinAlgPack_VectorSpaceFactory.hpp</file>
    <file>AbstractLinAlgPack_VectorSpaceSubSpace.cpp</file>
    <file>AbstractLinAlgPack_VectorSpaceSubSpace.hpp</file>
    <file>AbstractLinAlgPack_VectorStdOps.cpp</file>
    <file>AbstractLinAlgPack_VectorStdOps.hpp</file>
    <file>AbstractLinAlgPack_VectorSubView.cpp</file>
    <file>AbstractLinAlgPack_VectorSubView.hpp</file>
  </compound>
  <compound kind="dir">
    <name>serial</name>
    <path>/Users/sscoll/Downloads/trilinos-11.0.3-Source/packages/moocho/src/AbstractLinAlgPack/src/serial/</path>
    <filename>dir_93b88f5017b5ed20af07c1cd94028993.html</filename>
    <dir>implementations</dir>
    <dir>interfaces</dir>
    <dir>solvers</dir>
  </compound>
  <compound kind="dir">
    <name>solvers</name>
    <path>/Users/sscoll/Downloads/trilinos-11.0.3-Source/packages/moocho/src/AbstractLinAlgPack/src/serial/solvers/</path>
    <filename>dir_9713313da4c9d88370688a465bcb92e6.html</filename>
    <file>AbstractLinAlgPack_BasisSystemFactoryStd.cpp</file>
    <file>AbstractLinAlgPack_BasisSystemFactoryStd.hpp</file>
    <file>AbstractLinAlgPack_BasisSystemPermDirectSparse.cpp</file>
    <file>AbstractLinAlgPack_BasisSystemPermDirectSparse.hpp</file>
    <file>AbstractLinAlgPack_DirectSparseSolver.hpp</file>
    <file>AbstractLinAlgPack_DirectSparseSolverDense.cpp</file>
    <file>AbstractLinAlgPack_DirectSparseSolverDense.hpp</file>
    <file>AbstractLinAlgPack_DirectSparseSolverImp.cpp</file>
    <file>AbstractLinAlgPack_DirectSparseSolverImp.hpp</file>
    <file>AbstractLinAlgPack_DirectSparseSolverMA28.cpp</file>
    <file>AbstractLinAlgPack_DirectSparseSolverMA28.hpp</file>
    <file>AbstractLinAlgPack_DirectSparseSolverMA28SetOptions.cpp</file>
    <file>AbstractLinAlgPack_DirectSparseSolverMA28SetOptions.hpp</file>
    <file>AbstractLinAlgPack_DirectSparseSolverSuperLU.cpp</file>
    <file>AbstractLinAlgPack_DirectSparseSolverSuperLU.hpp</file>
    <file>AbstractLinAlgPack_MA28_CppDecl.cpp</file>
    <file>AbstractLinAlgPack_MA28_CppDecl.hpp</file>
    <file>AbstractLinAlgPack_MA28CommonBlockEncap.cpp</file>
    <file>AbstractLinAlgPack_MA28CommonBlockEncap.hpp</file>
    <file>AbstractLinAlgPack_MA28Solver.cpp</file>
    <file>AbstractLinAlgPack_MA28Solver.hpp</file>
    <file>AbstractLinAlgPack_MatrixScaling_Strategy.hpp</file>
    <file>AbstractLinAlgPack_SuperLUSolver.cpp</file>
    <file>AbstractLinAlgPack_SuperLUSolver.hpp</file>
  </compound>
  <compound kind="dir">
    <name>src</name>
    <path>/Users/sscoll/Downloads/trilinos-11.0.3-Source/packages/moocho/src/AbstractLinAlgPack/src/</path>
    <filename>dir_61a97358d43f78177faffcd10042eaa3.html</filename>
    <dir>abstract</dir>
    <dir>serial</dir>
    <file>AbstractLinAlgPack_Types.hpp</file>
  </compound>
  <compound kind="dir">
    <name>src</name>
    <path>/Users/sscoll/Downloads/trilinos-11.0.3-Source/packages/moocho/src/</path>
    <filename>dir_7bfd6931b65fca56728ca4076fbf2548.html</filename>
    <dir>AbstractLinAlgPack</dir>
  </compound>
  <compound kind="dir">
    <name>tools</name>
    <path>/Users/sscoll/Downloads/trilinos-11.0.3-Source/packages/moocho/src/AbstractLinAlgPack/src/abstract/tools/</path>
    <filename>dir_f80c6aaa37c42d3944750b47e6d765a3.html</filename>
    <file>AbstractLinAlgPack_assert_print_nan_inf.cpp</file>
    <file>AbstractLinAlgPack_assert_print_nan_inf.hpp</file>
    <file>AbstractLinAlgPack_BasisSystemComposite.cpp</file>
    <file>AbstractLinAlgPack_BasisSystemComposite.hpp</file>
    <file>AbstractLinAlgPack_BasisSystemTester.cpp</file>
    <file>AbstractLinAlgPack_BasisSystemTester.hpp</file>
    <file>AbstractLinAlgPack_BasisSystemTesterSetOptions.cpp</file>
    <file>AbstractLinAlgPack_BasisSystemTesterSetOptions.hpp</file>
    <file>AbstractLinAlgPack_MatrixComposite.cpp</file>
    <file>AbstractLinAlgPack_MatrixComposite.hpp</file>
    <file>AbstractLinAlgPack_MatrixOpNonsingTester.cpp</file>
    <file>AbstractLinAlgPack_MatrixOpNonsingTester.hpp</file>
    <file>AbstractLinAlgPack_MatrixSymDiagStd.cpp</file>
    <file>AbstractLinAlgPack_MatrixSymDiagStd.hpp</file>
    <file>AbstractLinAlgPack_MatrixSymIdent.cpp</file>
    <file>AbstractLinAlgPack_MatrixSymIdent.hpp</file>
    <file>AbstractLinAlgPack_MatrixZero.cpp</file>
    <file>AbstractLinAlgPack_MatrixZero.hpp</file>
    <file>AbstractLinAlgPack_TestMatrixSymSecant.cpp</file>
    <file>AbstractLinAlgPack_TestMatrixSymSecant.hpp</file>
    <file>AbstractLinAlgPack_VectorAuxiliaryOps.cpp</file>
    <file>AbstractLinAlgPack_VectorAuxiliaryOps.hpp</file>
    <file>AbstractLinAlgPack_VectorMutableBlocked.cpp</file>
    <file>AbstractLinAlgPack_VectorMutableBlocked.hpp</file>
    <file>AbstractLinAlgPack_VectorSpaceBlocked.cpp</file>
    <file>AbstractLinAlgPack_VectorSpaceBlocked.hpp</file>
    <file>AbstractLinAlgPack_VectorSpaceTester.cpp</file>
    <file>AbstractLinAlgPack_VectorSpaceTester.hpp</file>
    <file>AbstractLinAlgPack_VectorSpaceTesterSetOptions.cpp</file>
    <file>AbstractLinAlgPack_VectorSpaceTesterSetOptions.hpp</file>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>AbstractLinAlgPack: C++ Interfaces For Vectors, Matrices And Related Linear Algebra Objects</title>
    <filename>index</filename>
  </compound>
</tagfile>
